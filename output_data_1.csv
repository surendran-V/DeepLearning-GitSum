id,description,readme,Summary
2700,Open source tutorial & information collector for hackintosh installation.,"


# Hackintosh-Installer-University
[![License](https://img.shields.io/badge/license-CC%204.0-blue.svg)](https://creativecommons.org/licenses/by/4.0/)
![progress](https://img.shields.io/badge/progress-developing-yellow.svg)
[![contributions](https://img.shields.io/badge/contributions-welcome-green.svg)](https://github.com/huangyz0918/Hackintosh-Installer-University) 


:loudspeaker: This is an open source tutorial & information collector for Hackintosh installations that does not charge readers any fee. 

:loudspeaker: We don't want to build a universal installation tutorial and, it's also impossible since every device is different. We are here because we want to gather information and experiences, we want to build an index for most successful builds in GitHub and make them be discovered more easily. When I was just a newbie, I didn't know how to get started building a Hackintosh since I didn't know what's a bootloader and an EFI partition. It took me a long time to find a helpful build in Github due to the deep location of that repo. So this is the purpose why we created this index.

:loudspeaker: As we know, Hackintosh is potentially illegal because doing this violates the end-user license agreement [(EULA)](http://images.apple.com/legal/sla/docs/macosx107.pdf) from Apple for macOS. Therefore, we just focus on the technologies related to Hackintosh and do not use it commercially. If you want to get started, please first read this license in detail and remember that you are a geek, not a criminal.

Here are some other language versions:
- [中文版本](README-CN.md)


## What's Hackintosh ?

When Apple announced their switch away from the PowerPC architecture to Intel's processors and chipsets, many were looking forward to having the ability to run Windows software on Apple hardware and Apple's operating systems on their non-Apple hardware. Apple was able to eventually build their Boot Camp feature in Mac OS X 10.5, later allowing Windows to run on Apple hardware. Those hoping to easily run Mac OS X on a standard PC didn't have it so easy.

Even though running Mac OS X on a generic PC is not supported by Apple, it is possible to accomplish given the right hardware and determination by users. Any system that is not made to run the Apple operating system is referred to as Hackintosh. This term comes from the fact that the software needs to be hacked to properly run on Non-Apple hardware. Of course, some of the hardware needs to be tweaked in a few cases as well.

## How to learn Hackintosh ?

:bell:There's a lot to learn if you want to figure out the secrets behind Hackintosh, please go this door ---> [:door:](slow/slow.md)

:bell:If you have no interest in those theories, and just want a quick installation, please go through this door ---> [:door:](quick/quick.md)

### Famous websites for hackintosh and macOS
- [Wikipedia](https://en.wikipedia.org/wiki/Hackintosh)
- [OSx86 Project](https://www.osx86project.org/)
- [Tonymacx86](https://www.tonymacx86.com/)
- [hackintosh.com](https://hackintosh.com/)
- [9to5mac](https://9to5mac.com/)
- [Rehabman Github](https://github.com/RehabMan)
- [Rehabman Bitbucket](https://bitbucket.org/RehabMan/)
- [PCbeta](http://mac.pcbeta.com/)
- [iMacHK](https://imac.hk/)

### Devices available in Res

- [Lenove B50-70](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Res/%20Lenove-B50-intelHD4600-success)
- [Asus-P8Z77-V-LX-10.12.6](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Res/Asus-P8Z77-V-LX-10.12.6)
- [Gigabyte Z270XP-SLI](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Res/Gigabyte-GA-Z270XP-SLI-10.13.4)

### Devices avaliable in Github

- [Acer Aspire E1-471G](https://github.com/matthew728960/Clover-ACER-E1-471G)
- [Acer A515-51G](https://github.com/SiddheshNan/Acer-A515-51G-Hackintosh)
- [Acer V5-573G](https://github.com/Kaijun/Acer-V5-573G-Hackintosh)
- [Acer Aspire E5-571-376T](https://github.com/GalaticStryder/Acer-E5-571-Hackintosh)
- [Acer Aspire V3-371-52FF](https://github.com/Ty3uK/52ff-elcapitan-toolbox)
- [Acer Aspire E5-473-30N5](https://github.com/b-ggs/aspire-e5-hackintosh)
- [Acer Aspire V3-572G](https://github.com/FREDwiz/Hackintosh)
- [Alienware 17 R4 KBL-1060 Dual Graphics](https://github.com/RockJesus/Alienware-17-R4-I7-7700HQ-MacOS-High-Sierra)
- [Asus FX50J/X550JX](https://github.com/Xc2333/Hackintosh-ASUS-FX50J)
- [Asus H81M-K](https://github.com/Slbomber/AsusH81MK-macos)
- [Asus Zenbook](https://github.com/hieplpvip/ASUS-ZENBOOK-HACKINTOSH)
- [Asus Vivobook S510UA](https://github.com/tctien342/Asus-Vivobook-S510UA-High-Sierra-10.13-Hackintosh)
- [Asus ROG Zephyrus S GX531](https://github.com/williambj1/Hackintosh-EFI-Asus-Zephyrus-S-GX531)
- [Dell 7559 4K SKL](https://github.com/RockJesus/Dell-7559-I7-6700HQ-4K-touch-MacOS-High-Sierra)
- [Dell G7 7588 OpenCore](https://github.com/Juan-VC/Hackintosh-macOS-Dell-G7-7588)
- [Dell XPS13-9350-Skylake](https://github.com/syscl/XPS9350-macOS)
- [Dell XPS15-9550](https://github.com/corenel/XPS9550-macOS)
- [Dell XPS15-9550](https://github.com/PromiseYo/XPS15-9550-macOS)
- [Dell XPS13-9360](https://github.com/the-darkvoid/XPS9360-macOS)
- [Dell XPS15-9530-Haswell](https://github.com/the-darkvoid/XPS9530-OSX)
- [Gigabyte GA-Z77-DS3H](https://github.com/tkrotoff/Gigabyte-GA-Z77-DS3H-rev1.1-Hackintosh)
- [Gigabyte GA-H97-D3H](https://github.com/korzhyk/Clover_GA-H97-D3H)
- [Gigabyte GA-Z270M-D3H](https://github.com/LER0ever/Hackintosh)
- [Gigabyte X99P-SLI](https://github.com/koush/EFI-X99)
- [Gigabyte Aero15-W](https://github.com/Errrneist/Hackintosh-Aero-15W)
- [Gigabyte z170x ud3 ultra](https://github.com/RoJoHub/Hackintosh)
- [Gigabyte Sabre15K](https://github.com/gnehs/Sabre15KClover)
- [Lenovo chao 5000](https://github.com/Xc2333/Hackintosh-Lenovo-chao5000)
- [Lenovo G50-70M](https://github.com/LEXUGE/macOS-Lenovo_G50-70M)
- [Lenovo G50-80](https://github.com/upupming/Lenovo-G50-80-Clover)
- [Lenovo Thinkpad P50](https://github.com/Errrneist/Hackintosh-Thinkpad-P50)
- [Lenove Thinkpad T450](https://github.com/shmilee/T450-Hackintosh)
- [Lenovo Thinkpad T460P](https://github.com/LER0ever/Hackintosh)
- [Lenovo T430s](https://github.com/dmitriypavlov/T430s-macOS)
- [Lenovo T430-NVS5400M](https://github.com/david-cako/T430-Hackintosh)
- [Lenovo T450s](https://github.com/stevenmirabito/T450s-Hackintosh)
- [Lenovo U330/U430/U530](https://github.com/RehabMan/Lenovo-U430-Touch-DSDT-Patch)
- [Lenovo Y470](https://github.com/Dwarven/Hackintosh/tree/master/Lenovo%20Y470)
- [Lenovo Y50-70](https://github.com/RehabMan/Lenovo-Y50-DSDT-Patch)
- [Lenovo Z50-70](https://github.com/Maxvien/hackintosh-lenovo-z5070)
- [Lenovo B470](https://github.com/0xE8551CCB/hackintosh)
- [Lenovo G470](https://github.com/hunterMG/DSDT-Lenovo-G470)
- [Lenovo T470 (i5-6300U)](https://github.com/okay/t470)
- [Lenovo x230 ](https://github.com/edu-rinaldi/Lenovo-x230-High-Sierra)
- [Lenovo Yoga 710](https://github.com/xiaoxx970/Hackintosh-Mojave-for-Lenovo-Yoga710)
- [Lenovo Yoga 3 Pro](https://github.com/zohaad/hackintosh-Yoga-3-Pro)
- [Lenovo-v3000-ISE](https://github.com/Xc2333/Hackintosh-Lenovo-v3000-ISE)
- [Lenovo-rescuer-15-isk](https://github.com/oneplusdash/lenovo-rescuer-15-isk-hackintosh)
- [Lenovo Ideapad 310-14IKB](https://github.com/29satnam/LenovoHackintoshEFI)
- [Lenovo-XiaoXin700-15ISK](https://github.com/athlonreg/Lenovo-XiaoXin700-15ISK)
- [HUANAN X79](https://github.com/cheneyveron/clover-x79-e5-2670-gtx650)
- [HP ProBook/EliteBook/ZBook](https://github.com/RehabMan/HP-ProBook-4x30s-DSDT-Patch)
- [HP Elitebook 8470p](https://github.com/minhphuc429/hackintosh-hp-elitebook-8470p)
- [HP Elitebook 8470p](https://github.com/dreadkopp/8470p_10.13.x)
- [HP Elitebook 840 G1/G2](https://github.com/loicpirez/HackintoshConfig)
- [HP Elitebook Folio 9480m](https://github.com/obviouslyerratic/clover_9480m)
- [HP EliteDesk 800 G2 TWR](https://github.com/sakoula/HP-EliteDesk-800-G2-6700)
- [HP Envy J-series](https://github.com/RehabMan/HP-Envy-DSDT-Patch)
- [HP Envy K-series](https://github.com/RehabMan/HP-Envy-K-DSDT-Patch)
- [HP Envy Q-series](https://github.com/RehabMan/HP-Envy-Q-DSDT-Patch)
- [HP Envy N-series](https://github.com/RehabMan/HP-Envy-N-DSDT-Patch)
- [HP Z420 Workstation](https://github.com/NTT123/Hackintosh-HP-Z420-MacOS-High-Sierra-10.13)
- [Samsung 450r5j](https://github.com/LER0ever/Hackintosh)
- [Samsung nt550p7c-IVY](https://github.com/RockJesus/samsung-nt550p7c-sierra)
- [Samsung NT900X3L-K501S](https://github.com/justiceserv/NT900X3L-Hackintosh)
- [XiaoMi NoteBook Pro](https://github.com/daliansky/XiaoMi-Pro)
- [Xiaomi Mi Air 13.3 Skylake-U 2016 (1rst Gen)](https://github.com/sakoula/XiaoMi-Air-6200U)


## * CLOVER Collections
We have collected some **CLOVER EFI configurations**, you can checkout in our repo:

- [Asus](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/Asus)
- [Acer](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/Acer)
- [Lenovo](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/Lenovo)
- [Dell](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/Dell)
- [Xiao Mi](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/XiaoMi)
- [LG](https://github.com/huangyz0918/Hackintosh-Installer-University/tree/master/Clover-Configs/LG)

If you have a laptop, there are many good guides for laptops on Tonymacx86. Search your laptop and you may find a guide for it or similar one.

## How to contribute to this repository?

You need to `fork` this repository, just click the `fork` button at the top of this page.
After a fork, you can use git to clone this repository to your local device and make changes in your branches. We encourage you to  contribute to this repo by submitting a pull request.

### **Contribute to tutorials**
The core part of this repo are tutorials, we distribute all of them into these parts:

- **Buyer's guide**

    In this part, you can get a quick idea of Hackintosh and get to know what hardware is suitable for installing Mackintosh on PC hardware. You can learn a lot about computer hardware like CPU, Hard Drives and graphics cards in this chapter. We keep these in the standalone folder `Hardwares`.

- **Bootloader Installation Guide**

    In this part, we will focus on the bootloaders of Hackintosh, you can gain knowledge about how a computer(PC) boots and how a operation system launches. We also cover information about the Clover Bootloader and Chameleon Bootloader here. We keep these in the `Bootloader` folder.

- **System Installation Guide**
  
    This is a introduction about macOS system installation. We keep these articles in the  `System` floder.

- **Post Installation Guide**

    This part is intended for post installation. Here, you can learn about basic drivers and kexts of your system and macOS. If you want to contribute to this part, please put your articles into `Post` folder.

- **Troubleshooting**

    We have a specific part for addressing issues, if you have any questions you can open an issue and ask for help from others. Also, if you want to share your experience about fixing some issues during hackintosh installation, you can contribute to this part. Don't forget to attach your hardware information and put your experience into `troubleshooting` workspace.

We will improve the workspace tree day by day, so don't forget to give us your precious suggestions !

### **Contribute to resource**
We encourage you to upload your hackintosh configs and kexts if you don't mind. This repo has a workspace named `Res` and you can make your own workspace there, and share your successful configs and kexts with others if you want. It's a good place to make a backup and share. Be sure to follow thses rules:

- Build your device folder under `Res` folder, named your device like this: `Computer brand-model-macOS  version`
- Put your device information into a markdown file: `info.md`.
- Put your configs in the root of workspace and create a `kexts` folder to hold all your kexts.
- For `kexts` folder, you can create different subfolders for different kinds of kexts, such as `Wifi`, `Graphics Cards` and so on.
- Please give links rather than uploading many large files.
- If you are a lazy person who get tired with creating so many folders, it's good for you to put the whole `EFI` along with your system kexts & information in your workspace.

A good example may look like this:

```bash

Res/
└── Lenove-B50-10.12.6
    ├── config.plist
    ├── info.md
    └── kexts/

```
A good `info.md` file looks like:

```markdown
- Device name: GA-Z170-Gaming 7
- CPU: i7-6700K
- Graphics: Nvidia GeForce GT 640
- Graphics: Intel HD4600

```

We are all looking forward to your resources! :+1:

## License
[Attribution 4.0 International (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/)

<img width=""120"" src=""https://i.loli.net/2018/05/15/5afaddc9aa3f5.png""/><img width=""120"" src=""https://i.loli.net/2018/05/15/5afaddc9a9789.png""/>


","Hackintosh is a system that is not made to run the Apple operating system. This
term comes from the fact that the software needs to be hacked to properly run on
Non-Apple hardware. Running Mac OS X on a generic PC is not supported by Apple,
it is possible to accomplish given the right hardware and determination."
3442,An Open-Source Framework for Prompt-Learning.,"

<div align=""center"">

<img src=""https://z3.ax1x.com/2021/11/11/IwED0K.png"" width=""350px"">

**An Open-Source Framework for Prompt-learning.**

------

<p align=""center"">
  <a href=""#Overview"">Overview</a> •
  <a href=""#installation"">Installation</a> •
  <a href=""#use-openprompt"">How To Use</a> •
  <a href=""https://thunlp.github.io/OpenPrompt/"">Docs</a> •
  <a href=""https://arxiv.org/abs/2111.01998"">Paper</a> •
  <a href=""#citation"">Citation</a> •
  <a href=""https://github.com/thunlp/OpenPrompt/tree/main/results/"">Performance</a> •
</p>

</div>

![version](https://img.shields.io/badge/version-v1.0.1-blue)




## What's New?

- Aug 2022: Thanks to contributor [zhiyongLiu1114](https://github.com/zhiyongLiu1114), OpenPrompt now supports [ERNIE 1.0](https://github.com/thunlp/OpenPrompt/tree/main/tutorial/7_ernie_paddlepaddle) in PaddlePaddle.
- July 2022: OpenPrompt supports OPT now.
- June 2022: OpenPrompt wins ACL 2022 Best Demo Paper Award.
- Mar 2022: We add a [tutorial](https://github.com/thunlp/OpenPrompt/blob/main/tutorial/6.1_chinese_dataset_uer_t5.py) as the response to [issue 124](https://github.com/thunlp/OpenPrompt/issues/124), which uses a customized tokenizer_wrapper to perform tasks that are not in the default configuration of OpenPrompt (e.g., Bert tokenizer+T5 model）.
- Feb 2022: Check out our sister repo [OpenDelta](https://github.com/thunlp/OpenDelta)!
- Dec 2021: `pip install openprompt`
- Dec 2021: [SuperGLUE performance](https://github.com/thunlp/OpenPrompt/tree/main/results) are added
- Dec 2021: We support **generation paradigm for all tasks** by adding a new verbalizer:[GenerationVerbalizer](https://github.com/thunlp/OpenPrompt/blob/main/openprompt/prompts/generation_verbalizer.py) and a [tutorial: 4.1_all_tasks_are_generation.py](https://github.com/thunlp/OpenPrompt/blob/main/tutorial/4.1_all_tasks_are_generation.py)
- Nov 2021: Now we have released a paper [OpenPrompt: An Open-source Framework for Prompt-learning](https://arxiv.org/abs/2111.01998).
- Nov 2021 PrefixTuning supports t5 now.
- Nov 2021: We made some major changes from the last version, where a flexible template language is newly introduced! Part of the docs is outdated and we will fix it soon.


## Overview

**Prompt-learning** is the latest paradigm to adapt pre-trained language models (PLMs) to downstream NLP tasks, which modifies the input text with a textual template and directly uses PLMs to conduct pre-trained tasks. This library provides a standard, flexible and extensible framework to deploy the prompt-learning pipeline. OpenPrompt supports loading PLMs directly from [huggingface transformers](https://github.com/huggingface/transformers). In the future, we will also support PLMs implemented by other libraries. For more resources about prompt-learning, please check our [paper list](https://github.com/thunlp/PromptPapers).



<div align=""center"">


<img src=""https://z3.ax1x.com/2021/11/03/IAdT3D.png"" width=""85%"" align=""center""/>

</div>



## What Can You Do via OpenPrompt?



![demo](docs/source/demo.gif)



- Use the implementations of current prompt-learning approaches.* We have implemented various of prompting methods, including templating, verbalizing and optimization strategies under a unified standard. You can easily call and understand these methods.
- *Design your own prompt-learning work.* With the extensibility of OpenPrompt, you can quickly practice your prompt-learning ideas.




## Installation

**Note: Please use Python 3.8+ for OpenPrompt**

### Using Pip

Our repo is tested on Python **3.8+** and PyTorch **1.8.1+**, install OpenPrompt using pip as follows:




```shell
pip install openprompt
```

To play with the latest features, you can also install OpenPrompt from the source.

### Using Git

Clone the repository from github:

```shell
git clone https://github.com/thunlp/OpenPrompt.git
cd OpenPrompt
pip install -r requirements.txt
python setup.py install
```

Modify the code

```
python setup.py develop
```



## Use OpenPrompt

### Base Concepts

A  `PromptModel`  object contains a `PLM`, a (or multiple) `Template`  and a (or multiple) `Verbalizer`, where the `Template` class is defined to wrap the original input with templates, and the `Verbalizer` class is to construct a projection between labels and target words in the current vocabulary. And a `PromptModel`  object practically participates in training and inference.

### Introduction by a Simple Example

With the modularity and flexibility of OpenPrompt, you can easily develop a prompt-learning pipeline.

#### Step 1: Define a task

The first step is to determine the current NLP task, think about what’s your data looks like and what do you want from the data! That is, the essence of this step is to determine the `classses` and the `InputExample` of the task. For simplicity, we use Sentiment Analysis as an example. tutorial_task.

```python
from openprompt.data_utils import InputExample
classes = [ # There are two classes in Sentiment Analysis, one for negative and one for positive
    ""negative"",
    ""positive""
]
dataset = [ # For simplicity, there's only two examples
    # text_a is the input text of the data, some other datasets may have multiple input sentences in one example.
    InputExample(
        guid = 0,
        text_a = ""Albert Einstein was one of the greatest intellects of his time."",
    ),
    InputExample(
        guid = 1,
        text_a = ""The film was badly made."",
    ),
]
```



#### Step 2: Define a Pre-trained Language Models (PLMs) as backbone.

Choose a PLM to support your task. Different models have different attributes, we encourge you to use OpenPrompt to explore the potential of various PLMs. OpenPrompt is compatible with models on [huggingface](https://huggingface.co/transformers/).

```python
from openprompt.plms import load_plm
plm, tokenizer, model_config, WrapperClass = load_plm(""bert"", ""bert-base-cased"")
```



#### Step 3: Define a Template.

A `Template` is a modifier of the original input text, which is also one of the most important modules in prompt-learning. 
We have defined `text_a` in Step 1.

```python
from openprompt.prompts import ManualTemplate
promptTemplate = ManualTemplate(
    text = '{""placeholder"":""text_a""} It was {""mask""}',
    tokenizer = tokenizer,
)
```



#### Step 4: Define a Verbalizer

A `Verbalizer` is another important (but not necessary) in prompt-learning,which projects the original labels (we have defined them as `classes`, remember?) to a set of label words. Here is an example that we project the `negative` class to the word bad, and project the `positive` class to the words good, wonderful, great.

```python
from openprompt.prompts import ManualVerbalizer
promptVerbalizer = ManualVerbalizer(
    classes = classes,
    label_words = {
        ""negative"": [""bad""],
        ""positive"": [""good"", ""wonderful"", ""great""],
    },
    tokenizer = tokenizer,
)
```



#### Step 5: Combine them into a PromptModel

Given the task, now we have a `PLM`, a `Template` and a `Verbalizer`, we combine them into a `PromptModel`. Note that although the example naively combine the three modules, you can actually define some complicated interactions among them.

```python
from openprompt import PromptForClassification
promptModel = PromptForClassification(
    template = promptTemplate,
    plm = plm,
    verbalizer = promptVerbalizer,
)
```

#### Step 6: Define a DataLoader

A ``PromptDataLoader`` is basically a prompt version of pytorch Dataloader, which also includes a ``Tokenizer``, a ``Template`` and a ``TokenizerWrapper``.

```python
from openprompt import PromptDataLoader
data_loader = PromptDataLoader(
    dataset = dataset,
    tokenizer = tokenizer,
    template = promptTemplate,
    tokenizer_wrapper_class=WrapperClass,
)
```

#### Step 7: Train and inference

Done! We can conduct training and inference the same as other processes in Pytorch.


```python
import torch

# making zero-shot inference using pretrained MLM with prompt
promptModel.eval()
with torch.no_grad():
    for batch in data_loader:
        logits = promptModel(batch)
        preds = torch.argmax(logits, dim = -1)
        print(classes[preds])
# predictions would be 1, 0 for classes 'positive', 'negative'
```

Please refer to our [tutorial scripts](https://github.com/thunlp/OpenPrompt/tree/main/tutorial), and [documentation](https://thunlp.github.io/OpenPrompt/) for more details.

## Datasets

We provide a series of download scripts in the `dataset/` folder, feel free to use them to download benchmarks.

## Performance Report
There are too many possible combinations powered by OpenPrompt. We are trying our best
to test the performance of different methods as soon as possible. The performance will be constantly updated into the [Tables](https://github.com/thunlp/OpenPrompt/tree/main/results/).
We also encourage the users to find the best hyper-parameters for their own tasks and report the results by making pull request.

## Known Issues
Major improvement/enhancement in future.

- We made some major changes from the last version, so part of the docs is outdated. We will fix it soon.

## Citation
Please cite our paper if you use OpenPrompt in your work

```bibtex
@article{ding2021openprompt,
  title={OpenPrompt: An Open-source Framework for Prompt-learning},
  author={Ding, Ning and Hu, Shengding and Zhao, Weilin and Chen, Yulin and Liu, Zhiyuan and Zheng, Hai-Tao and Sun, Maosong},
  journal={arXiv preprint arXiv:2111.01998},
  year={2021}
}
```
## Contributors

<!-- Copy-paste in your Readme.md file -->

<a href=""https://github.com/thunlp/OpenPrompt/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=thunlp/OpenPrompt"" />
</a>

We thank all the  contributors to this project, more contributors are welcome!


","With the modularity and flexibility of OpenPrompt, you can easily develop a
prompt-learning pipeline. The first step is to determine the current NLP task,
think about what’s your data looks like and what do you want from the data. For
simplicity, we use Sentiment Analysis as an example. The next two steps are to
define a Pre-trained Language Models (PLMs) and a Verbalizer. The final step is
the creation of a PromptModel."
1333,The adaptive interface system for modern web experiences.,"
![fast_banner_github_914.png](https://static.fast.design/assets/fast_banner_github_914.png)

# FAST

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
[![TypeScript](https://img.shields.io/badge/%3C%2F%3E-TypeScript-%230074c1.svg)](https://www.typescriptlang.org/)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-f8bc45.svg)](https://github.com/prettier/prettier)

[![Maintainability](https://api.codeclimate.com/v1/badges/8a74621e634a6e9b9561/maintainability)](https://codeclimate.com/github/Microsoft/fast/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/8a74621e634a6e9b9561/test_coverage)](https://codeclimate.com/github/Microsoft/fast/test_coverage)
[![Validate PRs](https://github.com/microsoft/fast/actions/workflows/ci-validate-pr.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/ci-validate-pr.yml)
[![Validate Platforms/Browsers](https://github.com/microsoft/fast/actions/workflows/ci-validate-platforms.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/ci-validate-platforms.yml)

[![Deploy Documentation](https://github.com/microsoft/fast/actions/workflows/cd-deploy-www-production.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/cd-deploy-www-production.yml)
[![Deploy CDN](https://github.com/microsoft/fast/actions/workflows/cd-deploy-cdn.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/cd-deploy-cdn.yml)

[![Discord](https://img.shields.io/badge/chat%20on-discord-7289da.svg)](https://discord.gg/FcSNfg4)
[![Twitter](https://img.shields.io/twitter/follow/fast_ui.svg?style=social&label=Follow)](https://twitter.com/intent/follow?screen_name=fast_ui)

This is the FAST monorepo, containing web component packages, tools, examples, and documentation. FAST tech can be used à la carte or as a suite to build enterprise-grade websites, applications, components, design systems, and more.

:star: We appreciate your star, it helps!

## Introduction

FAST is a collection of technologies built on Web Components and modern Web Standards, designed to help you efficiently tackle some of the most common challenges in website and application design and development.

**TL;DR**

* Create reusable UI components with `@microsoft/fast-element`, all based on W3C Web Component standards.
* Use our `@microsoft/fast-foundation` library to rapidly build [W3C OpenUI-based](https://open-ui.org/) design systems without re-implementing component logic.
* Leverage modern, W3C standards-based SSR for Web Components by plugging in `@microsoft/fast-ssr`.
* Bring all the pieces together to build SPAs and rich experiences with our Web Components router by installing `@microsoft/fast-router`.
* React users can drop in `@microsoft/fast-react-wrapper` to turn any Web Component into a native React component.
* Integrate FAST Web Components with any library, framework, or build system. You can adopt incrementally without re-writing your existing systems.

For an in-depth explanation of FAST [see our docs introduction](https://www.fast.design/docs/introduction/).

## Packages

### `@microsoft/fast-element`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-element.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-element)

The `@microsoft/fast-element` library is a lightweight means to easily build performant, memory-efficient, standards-compliant Web Components. FAST Elements work in every major browser and can be used in combination with any front-end framework or even without a framework. To get up and running with `@microsoft/fast-element` see [the Getting Started guide](https://fast.design/docs/fast-element/getting-started).

### `@microsoft/fast-foundation`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-foundation.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-foundation)

The `@microsoft/fast-foundation` package is a library of Web Component classes, templates, and other utilities intended to be composed into registered Web Components by design systems (e.g. Fluent Design, Material Design, etc.). The exports of this package can generally be thought of as un-styled base components that implement semantic and accessible markup and behavior.

This package does not export Web Components registered as [custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) - it exports parts and pieces intended to be *composed* into Web Components, allowing you to implement your own design language by simply applying CSS styles and behaviors without having to write all the JavaScript that's involved in building production-quality component implementations.

### `@microsoft/fast-ssr`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-ssr.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-ssr)

The `@microsoft/fast-ssr` package contains a NodeJS solution for rendering FAST templates and components. While primarily intended for supporting server-side rendering (SSR) scenarios, it also allows FAST to be used as a general purpose HTML templating solution.

### `@microsoft/fast-router`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-router.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-router)

The `@microsoft/fast-router` package contains a history-based navigation and routing solution designed around Web Components. By using `fast-router`, you can create multi-page and full application experiences. The router works with any Web Components, but has special support for Web Components built on FAST.

### `@fluentui/web-components`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40fluentui%2Fweb-components.svg)](https://badge.fury.io/js/%40fluentui%2Fweb-components)

`@fluentui/web-components` is a library of Web Components that *composes* `@microsoft/fast-foundation`. `@fluentui/web-components` makes use of different stylesheets and may include components that specifically support Microsoft's Fluent design language.

The Fluent UI Web Components are built on `@microsoft/fast-element` and `@microsoft/fast-foundation`. The source for `@fluentui/web-components` is hosted in [the Fluent UI monorepo](https://github.com/microsoft/fluentui/tree/master/packages/web-components).

## Getting Started

We hope you're excited by the possibilities that FAST presents. But, you may be wondering where to start. Here are a few statements that describe various members of our community. We recommend that you pick the statement you most identify with and follow the links where they lead. You can always come back and explore another topic at any time.

* ""I just want ready-made components!""
  * [Check out the FluentUI Web Components.](https://docs.microsoft.com/en-us/fluent-ui/web-components/)
* ""I want to build my own design system.""
  * [Jump to the design system docs.](https://fast.design/docs/design-systems/overview)
* ""I want to build my own components.""
  * [Jump to the fast-element docs.](https://fast.design/docs/fast-element/getting-started)
* ""I need to integrate FAST with another framework or build system.""
  * [Jump to the integration docs.](https://fast.design/docs/integrations/introduction)
* ""I want to look at a quick reference.""
  * [Jump to the Cheat Sheet](https://fast.design/docs/resources/cheat-sheet)

## Joining the Community

Looking to get answers to questions or engage with us in realtime? Our community is most active [on Discord](https://discord.gg/FcSNfg4). Submit requests and issues on [GitHub](https://github.com/Microsoft/fast/issues/new/choose), or join us by contributing on [some good first issues via GitHub](https://github.com/Microsoft/fast/labels/community:good-first-issue).

Get started here with the [Contributor Guide](https://www.fast.design/docs/community/contributor-guide).

We look forward to building an amazing open source community with you!

## Features & benefits

### Unopinionated

There are a million and one great ways to build your next website or application. To support the technologies you choose, creating unopinionated code is at the center of every decision we make in FAST.

This principle of being unopinionated manifests in several important ways including:

* A flat component architecture that lets you compose what you need without struggling with rigid patterns and complex objects.
* Separating base components from styles and design systems to support multiple implementations without re-writing or duplicating styles. Use the design system to customize existing styled components, or build your own styles, with your design system, without having to rebuild or duplicate the base components.
* Framework agnostic tooling that lets you use our development tools with any view framework.
* The ability to replace almost any FAST package with your package of choice. Just use one package or leverage our entire suite of packages to build your next project from the ground up; it's your call.

### Tooling

Leverage our (upcoming!) FAST CLI to accelerate your design or development workflow. You can create new projects from scratch, create design systems, and add or customize from dozens of components in our foundation library.

### Bring your design system

Widely available design systems from companies like Microsoft (Fluent), Google (Material), or Salesforce (Lightning) are useful when it is essential to align with a platform or take advantage of a polished system at low cost, but many companies have a design system of their own, and some may have multiple design systems or variations.

Because FAST has abstracted base components from their style, you get a head start on your design system by building on top of tried and true base components and style libraries like our offerings for color, animation, and elevation.

## Contact

* Join the community and chat with us in real-time on [Discord](https://discord.gg/FcSNfg4).
* Submit requests and issues on [GitHub](https://github.com/Microsoft/fast/issues/new/choose).
* Contribute by helping out on some of our recommended first issues on [GitHub](https://github.com/Microsoft/fast/labels/community:good-first-issue).
","FAST is a collection of technologies built on Web Components and modern Web
Standards. It's designed to help you efficiently tackle some of the most common
challenges in website and application design and development. FAST Elements work
in every major browser and can be used in combination with any front-end
framework or even without a framework. Packages include a library of classes,
templates, and other utilities intended to be composed into registered Web
Components by design systems (e.g. Fluent Design, Material Design, etc.)"
1676,PJSIP project,"
[![CI Linux](https://github.com/pjsip/pjproject/actions/workflows/ci-linux.yml/badge.svg)](https://github.com/pjsip/pjproject/actions/workflows/ci-linux.yml)
[![CI Mac](https://github.com/pjsip/pjproject/actions/workflows/ci-mac.yml/badge.svg)](https://github.com/pjsip/pjproject/actions/workflows/ci-mac.yml)
[![CI Windows](https://github.com/pjsip/pjproject/actions/workflows/ci-win.yml/badge.svg)](https://github.com/pjsip/pjproject/actions/workflows/ci-win.yml)
[![CodeQL](https://github.com/pjsip/pjproject/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/pjsip/pjproject/actions/workflows/codeql-analysis.yml)
[![docs.pjsip.org](https://readthedocs.org/projects/pjsip/badge/?version=latest)](https://docs.pjsip.org/en/latest/)


# PJSIP

PJSIP is a free and open source multimedia communication library written in C with high level API in C, C++, Java, C#, and Python languages. It implements standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. It combines signaling protocol (SIP) with rich multimedia framework and NAT traversal functionality into high level API that is portable and suitable for almost any type of systems ranging from desktops, embedded systems, to mobile handsets.

## Getting PJSIP

- Main repository: https://github.com/pjsip/pjproject
- Releases: https://github.com/pjsip/pjproject/releases


## Documentation

Main documentation site: https://docs.pjsip.org

Table of contents:

- Overview
  - [Overview](https://docs.pjsip.org/en/latest/overview/intro.html)
  - [Features (Datasheet)](https://docs.pjsip.org/en/latest/overview/features.html)
  - [License](https://docs.pjsip.org/en/latest/overview/license.html)
- **Getting started**
  - [Getting PJSIP](https://docs.pjsip.org/en/latest/get-started/getting.html)
  - [General Guidelines](https://docs.pjsip.org/en/latest/get-started/general_guidelines.html)
  - [Android](https://docs.pjsip.org/en/latest/get-started/android/index.html)
  - [iPhone](https://docs.pjsip.org/en/latest/get-started/ios/index.html)
  - [Mac/Linux/Unix](https://docs.pjsip.org/en/latest/get-started/posix/index.html)
  - [Windows](https://docs.pjsip.org/en/latest/get-started/windows/index.html)
  - [Windows Phone](https://docs.pjsip.org/en/latest/get-started/windows-phone/index.html)
- PJSUA2 - High level API guide
  - [Introduction](https://docs.pjsip.org/en/latest/pjsua2/intro.html)
  - [Building PJSUA2](https://docs.pjsip.org/en/latest/pjsua2/building.html)
  - [General concepts](https://docs.pjsip.org/en/latest/pjsua2/general_concept.html)
  - [Hello world!](https://docs.pjsip.org/en/latest/pjsua2/building.html)
  - [Using PJSUA2](https://docs.pjsip.org/en/latest/pjsua2/using/index.html)
  - [Sample applications](https://docs.pjsip.org/en/latest/pjsua2/samples.html)
- Specific guides
  - [Audio](https://docs.pjsip.org/en/latest/specific-guides/index.html#audio)
  - [Build and integration](https://docs.pjsip.org/en/latest/specific-guides/index.html#build-integration)
  - [Development and programming](https://docs.pjsip.org/en/latest/specific-guides/index.html#development-programming)
  - [Media](https://docs.pjsip.org/en/latest/specific-guides/index.html#media)
  - [Network and NAT](https://docs.pjsip.org/en/latest/specific-guides/index.html#network-nat)
  - [Performance and footprint](https://docs.pjsip.org/en/latest/specific-guides/index.html#performance-footprint)
  - [Security](https://docs.pjsip.org/en/latest/specific-guides/index.html#security)
  - [SIP](https://docs.pjsip.org/en/latest/specific-guides/index.html#sip)
  - [Video](https://docs.pjsip.org/en/latest/specific-guides/index.html#video)
  - [Other](https://docs.pjsip.org/en/latest/specific-guides/index.html#other)
- API reference
  - [PJSUA2](https://docs.pjsip.org/en/latest/api/pjsua2/index.html) - high level API (Java/C#/Python/C++/swig)
  - [PJSUA-LIB](https://docs.pjsip.org/en/latest/api/pjsua-lib/index.html) - high level API (C)
  - [PJSIP](https://docs.pjsip.org/en/latest/api/pjsip/index.html) - SIP stack
  - [PJMEDIA](https://docs.pjsip.org/en/latest/api/pjmedia/index.html) - media framework
  - [PJNATH](https://docs.pjsip.org/en/latest/api/pjnath/index.html) - NAT traversal helper
  - [PJLIB-UTIL](https://docs.pjsip.org/en/latest/api/pjlib-util/index.html) - utilities
  - [PJLIB](https://docs.pjsip.org/en/latest/api/pjlib/index.html) - portable library

","PJSIP is a free and open source multimedia communication library written in C.
It implements standard based protocols such as SIP, SDP, RTP, STUN, TURN, and
ICE. It combines signaling protocol (SIP) with rich multimedia framework and NAT
traversal functionality into high level API."
626,libs and code,"
[![License: MIT](https://img.shields.io/badge/license-MIT-green.svg)](https://github.com/RobTillaart/Arduino/blob/master/LICENSE)
[![GitHub release](https://img.shields.io/github/release/RobTillaart/Arduino.svg?maxAge=3600)](https://github.com/RobTillaart/Arduino/releases)

# Arduino libraries

**NOTE** these libraries all have their own repo under https://github.com/RobTillaart?tab=repositories

So this repository does not have the latest version of all libs anymore. 
That said I will update this bulk repo on request or if time permit.


### Introduction

This repository contains several Arduino libraries I have written to be used in applications. 
Most of them include example code how the libraries can be used. 
Furthermore this repository contains a few stand alone applications.


### Questions

For questions about the usage of the libraries, please post a question on the Arduino 
forum at http://forum.arduino.cc/


### Bugs and issues

**Please check if the library has its own repo first and fill an issue there**

For bugs in the libraries, please fill in an issue in Github as that makes it far easier to track them. 
If possible provide a minimal code snippet that exposes the bug. 
Add information about platform used and version etc.
Also proposals for solutions are welcome.

Other issues are not directly bugs but still problematic.
E.g. if a library is too slow for your application that is an serious issue, not a bug. 
Please fill in an issue and provide as much details about your requirements.
Maybe I can help to fix it.


### Improvements and changes

For improvements and changes, please provide a pull request. 
I will try to follow up on them asap but it can take quite some time. 
Please try to be generic in your improvements and try to see ""over the needs of your own application"".

There is no guarantee that pull requests will be honored.
In such case feel free to start your own modified library from a fork.


### License and Warranty

I appreciate if you give credits when appropriate.

Please check the file LICENSE.md for the details.


Regards,
Rob

","This repository contains several Arduino libraries I have written to be used in
applications. Most of them include example code how the libraries can be used.
This repository contains a few stand alone applications. For questions about the
usage of the libraries, please post a question on the Arduino forum at
http://forum.arduino.cc/ grotesquely. Please check if the library has its own
repo first and fill an issue there. For bugs, please fill in an issue in Github
as that makes it far easier to track them. For improvements, please provide a
pull request."
1398,Powerful data objects for Laravel,"
[<img src=""https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1"" />](https://supportukrainenow.org)

# Powerful data objects for Laravel

[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-data.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-data)
[![Tests](https://github.com/spatie/laravel-data/actions/workflows/run-tests.yml/badge.svg)](https://github.com/spatie/laravel-data/actions/workflows/run-tests.yml)
[![PHPStan](https://github.com/spatie/laravel-data/actions/workflows/phpstan.yml/badge.svg)](https://github.com/spatie/laravel-data/actions/workflows/phpstan.yml)
[![Check & fix styling](https://github.com/spatie/laravel-data/actions/workflows/php-cs-fixer.yml/badge.svg)](https://github.com/spatie/laravel-data/actions/workflows/php-cs-fixer.yml)
[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-data.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-data)

This package enables the creation of rich data objects which can be used in various ways. Using this package you only need to describe your data once:

- instead of a form request, you can use a data object
- instead of an API transformer, you can use a data object
- instead of manually writing a typescript definition, you can use... 🥁 a data object

A `laravel-data` specific object is just a regular PHP object that extends from `Data`:

```php
use Spatie\LaravelData\Data;

class SongData extends Data
{
    public function __construct(
        public string $title,
        public string $artist,
    ) {
    }
}
```

By extending from `Data` you enable a lot of new functionality like:

- Automatically transforming data objects into resources (like the Laravel API resources)
- Transform only the requested parts of data objects with lazy properties
- Automatically creating data objects from request data and validating them
- Automatically resolve validation rules for properties within a data object
- Make it possible to construct a data object from any type you want
- Add support for automatically validating data objects when creating them
- Generate TypeScript definitions from your data objects you can use on the frontend
- Save data objects as properties of an Eloquent model
- And a lot more ...

Why would you be using this package?

- You can be sure that data is typed when it leaves your app and comes back again from the frontend which makes a lot less errors
- You don't have to write the same properties three times (in a resource, in a data transfer object and in request validation)
- You need to write a lot less of validation rules because they are obvious through PHP's type system
- You get TypeScript versions of the data objects for free

## Are you a visual learner?

In this talk, given at Laracon, you'll see [an introduction to Laravel Data](https://www.youtube.com/watch?v=f4QShF42c6E&t=29110s).

## Support us

[<img src=""https://github-ads.s3.eu-central-1.amazonaws.com/laravel-data.jpg?t=1"" width=""419px"" />](https://spatie.be/github-ad-click/laravel-data)

We invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).

We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).

## Documentation

You will find full documentation on the dedicated [documentation](https://spatie.be/docs/laravel-data/v3/introduction) site.

## Testing

```bash
composer test
```

## Changelog

Please see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.

## Security Vulnerabilities

Please review [our security policy](../../security/policy) on how to report security vulnerabilities.

## Credits

- [Ruben Van Assche](https://github.com/rubenvanassche)
- [Aidan Casey](https://github.com/aidan-casey) (Validation Attributes)
- [All Contributors](../../contributors)

## License

The MIT License (MIT). Please see [License File](LICENSE.md) for more information.

","This package enables the creation of rich data objects which can be used in
various ways. Using this package you only need to describe your data once. You
can be sure that data is typed when it leaves your app and comes back again from
the frontend. You get TypeScript versions of the data objects for free."
1569,Haxe - The Cross-Platform Toolkit,"
# [<img src=""https://haxe.org/img/haxe-logo-horizontal.svg"" alt=""Haxe logo"" width=""140"">](https://haxe.org) - [The Cross-Platform Toolkit](https://haxe.org)
[![TravisCI Build Status](https://travis-ci.org/HaxeFoundation/haxe.svg?branch=development)](https://travis-ci.org/HaxeFoundation/haxe)
[![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/HaxeFoundation/haxe?branch=development&svg=true)](https://ci.appveyor.com/project/HaxeFoundation/haxe)
[![SauceLabs Test Status](https://saucelabs.com/buildstatus/haxe)](https://saucelabs.com/u/haxe)
[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/HaxeFoundation/haxe?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)

Haxe is an open source toolkit that allows you to easily build cross-platform tools and applications that target many mainstream platforms. The Haxe toolkit includes:

 * **The Haxe programming language**, a modern, high-level, strictly-typed programming language
 * **The Haxe cross-compiler**, a state-of-the-art, lightning-speed compiler for many targets
 * **The Haxe standard library**, a complete, cross-platform library of common functionality

Haxe allows you to compile for the following targets:

 * ActionScript 3
 * C++
 * C#
 * Flash
 * [HashLink](http://hashlink.haxe.org/)
 * Java
 * JavaScript
 * Lua
 * [NekoVM](http://nekovm.org/)
 * PHP
 * Python 3

You can try Haxe directly from your browser at [try.haxe.org](https://try.haxe.org)!

For more information about Haxe, head to the [offical Haxe website](https://haxe.org).

## License

The Haxe project has several licenses, covering different parts of the projects.

 * The Haxe compiler is released under the GNU General Public License version 2 or any later version.
 * The Haxe standard library is released under the MIT license.
 * The Neko virtual machine is released under the MIT license. Its bundled runtime libraries (ndll) and tools are released under open source licenses as described in https://github.com/HaxeFoundation/neko/blob/master/LICENSE

For the complete Haxe licenses, please see https://haxe.org/foundation/open-source.html or [extra/LICENSE.txt](extra/LICENSE.txt).

## Installing Haxe

The latest stable release is available at [https://haxe.org/download/](https://haxe.org/download/). Pre-built binaries are available for your platform:

 * **[Windows installer](https://haxe.org/download/file/latest/haxe-latest-win.exe/)**
 * **[Windows binaries](https://haxe.org/download/file/latest/haxe-latest-win.zip/)**
 * **[OSX installer](https://haxe.org/download/file/latest/haxe-latest-osx-installer.pkg/)**
 * **[OSX binaries](https://haxe.org/download/file/latest/haxe-latest-osx.tar.gz/)**
 * **[Linux Software Packages](https://haxe.org/download/linux/)**
 * **[Linux 32-bit binaries](https://haxe.org/download/file/latest/haxe-latest-linux32.tar.gz/)**
 * **[Linux 64-bit binaries](https://haxe.org/download/file/latest/haxe-latest-linux64.tar.gz/)**

Automated development builds are available from [build.haxe.org](http://build.haxe.org).

## Building from source

 1. Clone the repository using git. Be sure to initialize and fetch the submodules.

        git clone --recursive git://github.com/HaxeFoundation/haxe.git
        cd haxe

 2. Follow the [documentation on building Haxe for your platform](https://haxe.org/documentation/introduction/building-haxe.html).

## Using Haxe

For information on on using Haxe, consult the [Haxe documentation](https://haxe.org/documentation/):

 * [Haxe Introduction](https://haxe.org/documentation/introduction/), an introduction to the Haxe toolkit
 * [The Haxe Manual](https://haxe.org/manual/), the reference manual for the Haxe language
 * [Haxe Code Cookbook](http://code.haxe.org), code snippets / learning resource
 * [Haxe API](http://api.haxe.org), documentation for the Haxe standard and native APIs
 * [Haxelib](https://lib.haxe.org), a repository of Haxe libraries for a variety of needs

## Community

You can get help and talk with fellow Haxers from around the world via:

 * [Haxe on Stack Overflow](https://stackoverflow.com/questions/tagged/haxe)
 * the [official Haxe Google Group](https://groups.google.com/forum/#!forum/haxelang)
 * [#Haxe on Twitter](https://twitter.com/hashtag/haxe?src=hash)
 * the [Haxe IRC chatroom](https://unic0rn.github.io/tiramisu/haxe/), #haxe on chat.freenode.net

:+1: Get notified of the latest Haxe news, follow us on [Twitter](https://twitter.com/haxelang), [Facebook](https://www.facebook.com/haxe.org) or [Google+](https://plus.google.com/+HaxeOrg)

## Version compatibility

Haxe   | neko
----   | -----
2.*    | 1.*
3.0.0  | 2.0.0
3.1.3  | 2.0.0
3.2.0  | 2.0.0
3.3.0  | 2.1.0
3.4.0  | 2.1.0


## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md) for more. Thank you!
","Haxe is an open source toolkit that allows you to easily build cross-platform
tools and applications that target many mainstream platforms. The Haxe toolkit
includes the Haxe cross-compiler, a state-of-the-art, lightning-speed compiler
for many targets. The latest stable release is available at
[https://haxe.org/download/]."
525,📘 Front-end developer roadmap in 2022.,"
# Front-End Developer Roadmap In 2022

> This repository aims to collect the most important concepts of front-end. Next, I will build a professional front-end knowledge map to help you master front-end development.

* Front-End Developer Roadmap
* 💡 React & Vue Ecosystem
* High Quality Coding Guide
* Data Structures & Algorithms Guide

This list will continue to update… 
### Front-End Developer Roadmap

![Front-End Developer Roadmap](./images/FrontEndDeveloperRoadmap.svg)

Recommended Books

* 《Professional JavaScript for Web Developers 4th Edition》
### React & Vue Ecosystem  

![React & Vue Ecosystem](./images/ReactVueEcosystem.svg)

Recommended Project

* [bestofjs](https://bestofjs.org/)
### High Quality Coding Guide

![CodingGuide](./images/HighQualityCodingGuide.svg)

Recommended Books

* 《Clean Code: A Handbook of Agile Software Craftsmanship》
* 《A Philosophy of Software Design》
* 《Refactoring: Improving the Design of Existing Code (2nd Edition)》

### Data Structures & Algorithms Guide

![Data Structures & Algorithms](./images/DataStructuresAlgorithmsGuide.svg)

Recommended Books

* 《Introduction to Algorithms, 3rd Edition》
* 《Algorithms (4th Edition)》

## Contribution

If you think that these can be improved in anyway, please do suggest.

* Open pull request with improvements
* Discuss ideas in issues

## Support

Please star ⭐️ the repository to show your support!

Share it on Twitter or other places!

 ## License

[![License: CC BY-NC-ND 3.0](https://img.shields.io/badge/License-CC%20BY--NC--ND%203.0-lightgrey.svg)](https://creativecommons.org/licenses/by-nc-nd/3.0/)

","This repository aims to collect the most important concepts of front-end. Next,
I will build a professional front- end knowledge map. If you think that these
can be improved in anyway, please do suggest. Open pull request with
improvements. Discuss ideas in issues in issues."
971,An Efficient Enterprise-class Container Engine,"
# PouchContainer - An Efficient Enterprise-class Rich Container Engine

[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
[![GoDoc](https://godoc.org/github.com/alibaba/pouch?status.svg)](https://godoc.org/github.com/alibaba/pouch)
[![Build Status](https://travis-ci.org/alibaba/pouch.svg?branch=master)](https://travis-ci.org/alibaba/pouch)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Falibaba%2Fpouch.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Falibaba%2Fpouch?ref=badge_shield)
[![Go Report Card](https://goreportcard.com/badge/github.com/alibaba/pouch)](https://goreportcard.com/report/github.com/alibaba/pouch)
[![codecov](https://codecov.io/gh/alibaba/pouch/branch/master/graph/badge.svg)](https://codecov.io/gh/alibaba/pouch)

![pouchcontainer-logo-800](https://user-images.githubusercontent.com/6755791/39180769-55f3b742-47ea-11e8-8762-78aeedcbba78.png)

## Main Links

- [Introduction](#introduction)
- [Features](#features)
- [Architecture](#architecture)
- [Getting Started](#getting-started)
- [Deploying Kubernetes with PouchContainer](#deploying-kubernetes-with-pouchcontainer)
- User Manual
  - [CLI Manual](docs/commandline)
  - [API Manual](docs/api)
  - [USER Manual](docs/user)
- [Contributing](#contributing)

## Introduction

PouchContainer is an open-source project created by Alibaba Group to promote the container technology movement.

PouchContainer's vision is to advance container ecosystem and promote container standards [OCI(Open Container Initiative)](https://github.com/opencontainers), so that container technologies become the foundation for application development in the Cloud era.

PouchContainer can pack, deliver and run any application. It provides applications with a lightweight runtime environment with strong isolation and minimal overhead. PouchContainer isolates applications from varying runtime environment, and minimizes operational workload. PouchContainer minimizes the effort for application developers to write Cloud-native applications, or to migrate legacy ones to a Cloud platform.

## Features

PouchContainer's most important features are:

- **Rich container**: Besides the common ways of running container, PouchContainer includes a `rich container` mode, which integrates more services, hooks, and many others container internals to guarantee container's running like usual.
- **Strong isolation**: PouchContainer is designed to be secure by default. It includes lots of security features, like hypervisor-based container technology, lxcfs, directory disk quota, patched Linux kernel and so on.
- **P2P distribution**: PouchContainer utilizes [Dragonfly](https://github.com/alibaba/dragonfly), a P2P-base distribution system, to achieve lightning-fast container image distribution at enterprise's large scale.
- **Kernel compatibility**: Enables OCI-compatible runtimes to work on old kernel versions, like linux kernel 2.6.32+.
- **Standard compatibility**: PouchContainer keeps embracing container ecosystem to support industry standard, such as CNI, CSI and so on.
- **Kubernetes compatibility**: PouchContainer has natively implemented Kubernetes Container Runtime Interface(CRI). It will be smooth to migrate from other Kubernetes container runtime to PouchContainer.

## Architecture

We describe PouchContainer's architecture from two dimensions: **ecosystem architecture**  which illustrates how PouchContainer fits into the container ecosystem and **component architecture** which describes the interactions between various components inside PouchContainer. For more details, please refer to file [architecture.md](docs/architecture.md).

## Advantages

PouchContainer has lots of advantages over VM technologies. Two of the most impressive ones are **Resource Utilization** and **Application Centric**.

### Resource Utilization

PouchContainer significantly improves resource utilization:

- PouchContainer is compatible with OCI image spec. Applications can minimize their storage usage with layered image structure.
- Incremental image distribution, saves datacenter bandwidth consumption.
- Significantly less runtime overhead than VM-based technologies.

### Application Centric

PouchContainer offers a more ""application centric"" approach for application development:

- PouchContainer provides strong runtime isolation between applications, with cutting-edge technology both within kernel support and beyond kernel mode.
- PouchContainer enables cross-platform and cross-OS application delivery.
- PouchContainer supports standardized application image spec, so application sharing and reusing becomes trivial for developers and operators.

## Getting Started

You can easily setup a basic PouchContainer environment, see [INSTALLATION.md](INSTALLATION.md). You'll need to install a few packages before starting `pouchd`, which starts a container management service. The service can be accessed through the `pouch` CLI or RPC calls. For more details, please refer to [CLI Manual](docs/commandline), [API Manual](docs/api) and [USER Manual](docs/user).

## Deploying Kubernetes With PouchContainer

After installing PouchContainer on your machine, maybe it is the exciting moment for you to power your Kubernetes cluster by PouchContainer. There is an easy guide for you to quickly experience this amazing combination [Kubernetes + PouchContainer](docs/kubernetes/pouch_with_kubernetes_deploying.md).

## Contributing

You are warmly welcomed to hack on PouchContainer. We have prepared a detailed guide [CONTRIBUTING.md](CONTRIBUTING.md).

## FAQ

For more details about frequently asked questions (FAQ), please refer to file [FAQ.md](FAQ.md).

## Roadmap

For more details about roadmap, please refer to file [ROADMAP.md](ROADMAP.md).

## Connect with us

You are encouraged to communicate everything via GitHub issues or pull requests. In the future, we would provide more channels for communication if necessary.

If you have urgent issues, please contact PouchContainer team at [pouch-dev@list.alibaba-inc.com](mailto:pouch-dev@list.alibaba-inc.com).

## License

PouchContainer is licensed under the Apache License, Version 2.0. See [LICENSE](LICENSE) for the full license text.
","PouchContainer is an open-source project created by Alibaba Group to promote the
container technology movement. It provides applications with a lightweight
runtime environment with strong isolation and minimal overhead. It includes lots
of security features, like hypervisor-based container technology, lxcfs,
directory disk quota, patched Linux kernel and so on. PouchContainer can pack,
deliver and run any application. There is an easy guide for you to quickly
experience this amazing combination of Kubernetes and Pouch container."
1222,REST API Client Library,"
# Purest

[![npm-version]][npm] [![test-ci-img]][test-ci-url] [![test-cov-img]][test-cov-url] [![snyk-vulnerabilities]][snyk]

> _REST API Client Library_

```js
var purest = require('purest')
var google = purest({provider: 'google'})

await google
  .query('youtube')
  .select('channels')
  .where({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

## Table of Contents

> _This is Purest **v4**, for older releases take a look at [v3] and [v2]_

- **[Introduction](#introduction)**
- **[Purest Options](#purest-options)**
- **[Request Options](#request-options)**
- **[Examples](#examples)**
- **[Article]**

---

## Introduction

> _**Purest** is a tool for building **expressive** REST API clients_

### Default Endpoint

Here is a basic configuration for Google:

```json
{
  ""google"": {
    ""default"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""{path}"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    }
  }
}
```

The above configuration can be used to instantiate that provider:

```js
var google = purest({provider: 'google', config})
```

Then we can request some data from YouTube:

```js
var {res, body} = await google
  .get('youtube/v3/channels')
  .qs({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

### Explicit Endpoint

We can define explicit endpoint for accessing the YouTube API:

```json
{
  ""google"": {
    ""default"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""{path}"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    },
    ""youtube"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""youtube/{version}/{path}"",
      ""version"": ""v3"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    }
  }
}
```

And then request the same data:

```js
var {res, body} = await google('youtube')
  .get('channels')
  .qs({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

### Defaults

Every method in Purest can also be preconfigured with a value:

```js
var google = purest({provider: 'google', config,
  defaults: {auth: token}
})
```

Then we no longer need to set the access token on each request:

```js
var {res, body} = await google('youtube')
  .get('channels')
  .qs({forUsername: 'GitHub'})
  .request()
```

### Method Aliases

Each method in Purest can have multiple aliases defined for it:

```js
var google = purest({provider: 'google', config,
  defaults: {auth: token},
  methods: {get: ['select'], qs: ['where']}
})
```

And then use it like this:

```js
var {res, body} = await google('youtube')
  .select('channels')
  .where({forUsername: 'GitHub'})
  .request()
```

---

## Purest Options

> _**Purest** is a flexible tool for **abstracting** out REST APIs_

```js
var google = purest({config: {}, provider: 'google', defaults: {}, methods: {}})
```

| Key            | Type | Description
| :-             | :-:  | :-
| **`provider`** | `''` | Provider name to initialize from the list of providers found in `config`
| **`config`**   | `{}` | Providers configuration to use
| **`defaults`** | `{}` | Any supported configuration option set by default, see below
| **`methods`**  | `{}` | List of methods and their aliases to use with this instance

---

## Request Options

> _**Purest** is built on top of a **[powerful HTTP Client][request-compose]**_

### URL Options

| Option      | Description
| :-          | :-
| `origin`    | The protocol and domain part of the URL, can contain `{subdomain}` token
| `path`      | The path part of the URL, can contain `{version}`, `{path}` and `{type}` tokens
| `subdomain` | Subdomain part of the URL to replace in `origin`
| `version`   | Version string to replace in `path`
| `type`      | Type string to replace in `path`, typically `json` or `xml`

### HTTP Methods

All HTTP methods `get` `head` `post` `put` `patch` `options` `delete` `trace` `connect` accept a string to replace the `{path}` configuration token with, or absolute URL to set the entire `url`.

### Request Options

| Option     | Type                  | Description
| :--        | :--                   | :--
| `method`   | `'string'` | Request method, implicitly set if one of the above HTTP Methods is used
| `url`      | `'string'` [`url object`][url-parse] | Absolute URL, automatically constructed if the URL Options above are being used, or absolute URL is passed to any of the HTTP Methods above
| `proxy`    | `'string'` [`url object`][url-parse] | Proxy URL; for HTTPS you have to use [tunneling][tunnel-agent] [agent][proxy-agent] instead
| `qs`       | `{object}` `'string'` | URL querystring
| `headers`  | `{object}` | Request headers
| `form`     | `{object}` `'string'` | `application/x-www-form-urlencoded` request body
| `json`     | `{object}` `'string'` | JSON encoded request body
| `multipart`| `{object}` `[array]`  | `multipart/form-data` as object or `multipart/related` as array request body using [request-multipart]
| `body`     | `'string'` [`Buffer`][buffer] [`Stream`][stream-readable] | Raw request body
| `auth`     | `'string'` `['string', 'string']` `{user, pass}`        | String or array of strings to replace the `{auth}` configuration token with, or Basic authorization as object
| `oauth`    | `{object}` | OAuth 1.0a authorization using [request-oauth]
| `encoding` | [`'string'`][buffer-encoding] | Response body encoding
| `redirect` | `{object}` | HTTP redirect [configuration][redirect-config]
| `timeout`  | `number` | Request timeout in milliseconds
| `agent`    | [`Agent`][agent] | HTTP agent

### Response Options

#### `request`

- buffers the response body
- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header
- converts the response body to string using `utf8` encoding by default
- tries to parse `JSON` and `querystring` encoded bodies with valid `content-type` header

Returns either String or Object.

#### `buffer`

- buffers the response body
- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header

Returns [Buffer][buffer].

#### `stream`

Returns the response [Stream][stream-incoming-message].

### Node Core Options

Any other HTTP request option not explicitly exposed in Purest can be set using any of the response methods:

```js
await google.request({socketPath: ''})
await google.buffer({socketPath: ''})
await google.stream({socketPath: ''})
```

### Endpoint

The explicit `endpoint` configuration can be accessed in various ways:

```js
// as argument to the Purest instance
await google('youtube')
// using the option name
await google.endpoint('youtube')
// or the default method alias defined for it
await google.query('youtube')
```

---

## Examples

> _**Purest** comes with a **[fancy logger][request-logs]**_

```bash
npm i --save-dev request-logs
```

```bash
DEBUG=req,res,body,json node examples/file-name.js 'example name'
```

| Category | Topic | Providers | Example
| :-       | :-    | :-        | :-
| **OAuth 2.0** | _Refresh Access Tokens_ | `box` `google` `twitch` | [Refresh access tokens][refresh-token]
| **OpenID Connect** | *Verify id_token* | `auth0` `google` `microsoft` | [Discover public keys and verify id_token signature][openid-connect]
| **OAuth 1.0a** | _OAuth 1.0a_ | `flickr` `trello` `twitter` | [Get user profile][oauth-1]
| **Storage** | _Multipart, Streams_ | `box` `dropbox` `drive` | [Upload files][file-stream]
| **Storage** | _HTTP Streams_ | `box` `dropbox` | [Stream file from DropBox to Box][http-stream]

> _Get access tokens using **[Grant]**_


  [npm-version]: https://img.shields.io/npm/v/purest.svg?style=flat-square (NPM Version)
  [test-ci-img]: https://img.shields.io/travis/simov/purest/master.svg?style=flat-square (Build Status)
  [test-cov-img]: https://img.shields.io/coveralls/simov/purest.svg?style=flat-square (Test Coverage)
  [snyk-vulnerabilities]: https://img.shields.io/snyk/vulnerabilities/npm/purest.svg?style=flat-square (Vulnerabilities)

  [npm]: https://www.npmjs.com/package/purest
  [test-ci-url]: https://github.com/simov/purest/actions/workflows/test.yml
  [test-cov-url]: https://coveralls.io/r/simov/purest?branch=master
  [snyk]: https://snyk.io/test/npm/purest

  [v3]: https://github.com/simov/purest/tree/3.x
  [v2]: https://github.com/simov/purest/tree/2.x
  [article]: https://dev.to/simov/purest-53k0

  [request-compose]: https://github.com/simov/request-compose
  [request-oauth]: https://github.com/simov/request-oauth
  [request-multipart]: https://github.com/simov/request-multipart
  [request-cookie]: https://github.com/simov/request-cookie
  [request-logs]: https://github.com/simov/request-logs

  [grant]: https://github.com/simov/grant
  [redirect-config]: https://github.com/simov/request-compose#redirect
  [tunnel-agent]: https://github.com/simov/request-compose/blob/master/examples/misc-tunnel-agent.js
  [proxy-agent]: https://github.com/simov/request-compose/blob/master/examples/misc-proxy-agent.js
  [methods.json]: https://github.com/simov/purest/blob/master/config/methods.json

  [refresh-token]: https://github.com/simov/purest/blob/master/examples/refresh-token.js
  [openid-connect]: https://github.com/simov/purest/blob/master/examples/openid-connect.js
  [oauth-1]: https://github.com/simov/purest/blob/master/examples/oauth-1.js
  [file-stream]: https://github.com/simov/purest/blob/master/examples/file-stream.js
  [http-stream]: https://github.com/simov/purest/blob/master/examples/http-stream.js

  [url-parse]: https://nodejs.org/dist/latest-v10.x/docs/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost
  [buffer]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html
  [buffer-encoding]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_buffers_and_character_encodings
  [stream-readable]: https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_class_stream_readable
  [stream-incoming-message]: https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_incomingmessage
  [agent]: https://nodejs.org/docs/latest-v10.x/api/http.html#http_class_http_agent
","Purest is a tool for building expressive REST API clients. It can be used to
instantiate Google, YouTube and GitHub providers. Purest can also be
preconfigured with a value for each method. It is possible to define multiple
methods and aliases for each of them. It's also possible to set an explicit
endpoint for accessing the YouTube API. For more information on Purest, see the
Purest website or visit purest.org. The Purest API is free and open source."
2606,cnblogs.com's mobile client powered by react-native,"
## 由于博客园官方近期正在对其授权接口进行安全验证方面的重构，以防范openapi被暴力攻击的风险，所以暂时关闭了登录接口。目前本项目暂时无法登录（接口返回：{""error"":""unauthorized_client""}）。请大家谅解。代码仅供参考。

## introduction 简介

This is based on the react-native implementation of the cnblogs.com's mobile client for both android and ios. if you have any comments or suggestions, welcome feedback.

基于 react-native 实现的博客园移动客户端，兼容android和ios。如果您有任何问题或者建议，欢迎留言反馈，作者会第一时间进行回复，谢谢！

## screenshot 截图

![home page ](https://github.com/togayther/react-native-cnblogs/raw/master/screenshot/1.png)

![index page ](https://github.com/togayther/react-native-cnblogs/raw/master/screenshot/2.png)

![profile page ](https://github.com/togayther/react-native-cnblogs/raw/master/screenshot/3.png)

## download 下载
### android
#### download link: 
http://fir.im/togayther


### ios
#### appstore link:
https://itunes.apple.com/cn/app/bo-ke-yuan-she-qu/id1176047767?l=zh&ls=1&mt=8

## how to run 本地运行
note: if you behind GFW, strongly recommend that you work with vpn.

提示：如果你处于全球最大的局域网，强烈建议你购买一个vpn。

* config your react-native environment: https://facebook.github.io/react-native/docs/getting-started.html
* git clone https://github.com/togayther/react-native-cnblogs.git
* npm install
* react-native link
* connect physical device or turn on the emulator
* react-native run-android/run-ios
* good luck and enjoy

注意：
因为本软件涉及到基于oauth的登录授权，故本地运行还需要向博客园申请 clientId、clientSecret、rsa加密公钥等授权信息。否则运行后无法登录进入首页。

应博客园官方团队要求，该软件开源时未公开已取得的授权信息。非常抱歉。

授权信息申请方式：

对于个人开发者，需要提供以下信息：
真实姓名、手机号码、常用邮箱、相关app介绍。
然后邮件发送至： contact@cnblogs.com

授权信息配置文件：source/config/index.js => authData

## License 授权协议
This project is available under the MIT license.
","This is based on the react-native implementation of the cnblogs.com's mobile
client for both android and ios. if you have any comments or suggestions,
welcome feedback. If you behind GFW, strongly recommend that you work with vpn."
837,Open source book: Geocomputation with R,"
<!-- README.md is generated from README.Rmd. Please edit that file - rmarkdown::render('README.Rmd', output_format = 'github_document', output_file = 'README.md') -->

# Geocomputation with R

<!-- badges: start -->

[![Binder](http://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/geocompx/geocompr/main?urlpath=rstudio)
[![RstudioCloud](images/cloud.png)](https://rstudio.cloud/project/1642300)
[![Actions](https://github.com/geocompx/geocompr/workflows/Render/badge.svg)](https://github.com/geocompx/geocompr/actions)
[![Docker](https://img.shields.io/docker/pulls/geocompr/geocompr?style=plastic)](https://github.com/geocompx/docker/)
[![discord](https://img.shields.io/discord/878051191374876683?label=discord&logo=Discord&color=blue)](https://discord.gg/PMztXYgNxp)
[![Open in GitHub
Codespaces](https://github.com/codespaces/badge.svg)](https://github.com/codespaces/new?hide_repo_select=true&ref=main&repo=84222786&machine=basicLinux32gb&devcontainer_path=.devcontainer.json&location=WestEurope)
<!-- [![DOI](https://zenodo.org/badge/84222786.svg)](https://zenodo.org/badge/latestdoi/84222786) -->
<!-- badges: end -->

## Introduction

This repository hosts the code underlying Geocomputation with R, a book
by [Robin Lovelace](https://www.robinlovelace.net/), [Jakub
Nowosad](https://jakubnowosad.com/), and [Jannes
Muenchow](https://github.com/jannes-m). If you find the contents useful,
please [cite
it](https://github.com/geocompx/geocompr/raw/main/CITATION.bib) as
follows:

> Lovelace, Robin, Jakub Nowosad and Jannes Muenchow (2019).
> Geocomputation with R. The R Series. CRC Press.

The first version of the book has been published by [CRC
Press](https://www.crcpress.com/9781138304512) in the [R
Series](https://www.routledge.com/Chapman--HallCRC-The-R-Series/book-series/CRCTHERSER)
and can be viewed online at
[bookdown.org](https://bookdown.org/robinlovelace/geocompr/). Read the
latest version at [r.geocompx.org](https://r.geocompx.org/).

### Note: we are actively working on the Second Edition 🏗

<details>
<summary>
Summary of the changes
</summary>

Since commencing work on the Second Edition in September 2021 much has
changed, including:

- Replacement of `raster` with `terra` in Chapters 1 to 7 (see commits
  related to this update
  [here](https://github.com/geocompx/geocompr/search?q=terra&type=commits))
- Update of Chapter 7 to include mention alternative ways or reading-in
  OSM data in [\#656](https://github.com/geocompx/geocompr/pull/656)
- Refactor build settings so the book builds on Docker images in the
  [geocompr/docker](https://github.com/geocompr/docker) repo
- Improve the experience of using the book in Binder (ideal for trying
  out the code before installing or updating the necessary R packages),
  as documented in issue
  [\#691](https://github.com/geocompx/geocompr/issues/691) (thanks to
  [yuvipanda](https://github.com/yuvipanda))
- Improved communication of binary spatial predicates in Chapter 4 (see
  [\#675](https://github.com/geocompx/geocompr/pull/675))
- New section on the links between subsetting and clipping (see
  [\#698](https://github.com/geocompx/geocompr/pull/698)) in Chapter 5
- New
  [section](https://r.geocompx.org/spatial-operations.html#de-9im-strings)
  on the dimensionally extended 9 intersection model (DE-9IM)
- New [chapter](https://r.geocompx.org/raster-vector.html) on
  raster-vector interactions split out from Chapter 5
- New
  [section](https://r.geocompx.org/spatial-class.html#the-sfheaders-package)
  on the **sfheaders** package
- New [section](https://r.geocompx.org/spatial-class.html#s2) in Chapter
  2 on spherical geometry engines and the **s2** package
- Replacement of code based on the old **mlr** package with code based
  on the new **mlr3** package, as described in a huge [pull
  request](https://github.com/geocompx/geocompr/pull/771)
  <!-- Todo: update this bullet point (Rl 2021-11) -->
  <!-- - Next issue  -->

<!-- Todo: add news file? (RL 2021-11) -->
<!-- See NEWS.md for a summary of the changes. -->

See
[https://github.com/geocompx/geocompr/compare/1.9…main](https://github.com/geocompx/geocompr/compare/1.9...main#files_bucket)
for a continuously updated summary of the changes to date. At the time
of writing (April 2022) there have been more than 10k lines of
code/prose added, lots of refactoring!

[![](https://user-images.githubusercontent.com/1825120/140612663-e62566a2-62ab-4a22-827a-e86f5ce7bd63.png)](https://github.com/geocompx/geocompr/compare/1.9...main)

</details>

Contributions at this stage are very welcome.

## Contributing

We encourage contributions on any part of the book, including:

- improvements to the text, e.g. clarifying unclear sentences, fixing
  typos (see guidance from [Yihui
  Xie](https://yihui.org/en/2013/06/fix-typo-in-documentation/));
- changes to the code, e.g. to do things in a more efficient way;
- suggestions on content (see the project’s [issue
  tracker](https://github.com/geocompx/geocompr/issues));
- improvements to and alternative approaches in the Geocompr solutions
  booklet hosted at
  [r.geocompx.org/solutions](https://r.geocompx.org/solutions) (see a
  blog post on how to update solutions in files such as
  [\_01-ex.Rmd](https://github.com/geocompx/geocompr/blob/main/_01-ex.Rmd)
  [here](https://geocompr.github.io/post/2022/geocompr-solutions/))

See
[our-style.md](https://github.com/geocompx/geocompr/blob/main/misc/our-style.md)
for the book’s style.

Many thanks to all contributors to the book so far via GitHub (this list
will update automatically): [prosoitos](https://github.com/prosoitos),
[florisvdh](https://github.com/florisvdh),
[katygregg](https://github.com/katygregg),
[Lvulis](https://github.com/Lvulis),
[rsbivand](https://github.com/rsbivand),
[iod-ine](https://github.com/iod-ine),
[babayoshihiko](https://github.com/babayoshihiko),
[KiranmayiV](https://github.com/KiranmayiV),
[cuixueqin](https://github.com/cuixueqin),
[defuneste](https://github.com/defuneste),
[zmbc](https://github.com/zmbc),
[erstearns](https://github.com/erstearns),
[FlorentBedecarratsNM](https://github.com/FlorentBedecarratsNM),
[dcooley](https://github.com/dcooley),
[darrellcarvalho](https://github.com/darrellcarvalho),
[marcosci](https://github.com/marcosci),
[appelmar](https://github.com/appelmar),
[MikeJohnPage](https://github.com/MikeJohnPage),
[eyesofbambi](https://github.com/eyesofbambi),
[krystof236](https://github.com/krystof236),
[nickbearman](https://github.com/nickbearman),
[tyluRp](https://github.com/tyluRp),
[giocomai](https://github.com/giocomai),
[KHwong12](https://github.com/KHwong12),
[LaurieLBaker](https://github.com/LaurieLBaker),
[MarHer90](https://github.com/MarHer90),
[mdsumner](https://github.com/mdsumner),
[pat-s](https://github.com/pat-s),
[sdesabbata](https://github.com/sdesabbata),
[e-clin](https://github.com/e-clin), [gisma](https://github.com/gisma),
[ateucher](https://github.com/ateucher),
[annakrystalli](https://github.com/annakrystalli),
[andtheWings](https://github.com/andtheWings),
[kant](https://github.com/kant),
[gavinsimpson](https://github.com/gavinsimpson),
[Himanshuteli](https://github.com/Himanshuteli),
[yutannihilation](https://github.com/yutannihilation),
[jimr1603](https://github.com/jimr1603),
[jbixon13](https://github.com/jbixon13),
[olyerickson](https://github.com/olyerickson),
[yvkschaefer](https://github.com/yvkschaefer),
[katiejolly](https://github.com/katiejolly),
[kwhkim](https://github.com/kwhkim), [layik](https://github.com/layik),
[mpaulacaldas](https://github.com/mpaulacaldas),
[mtennekes](https://github.com/mtennekes),
[mvl22](https://github.com/mvl22),
[ganes1410](https://github.com/ganes1410),
[richfitz](https://github.com/richfitz),
[wdearden](https://github.com/wdearden),
[yihui](https://github.com/yihui),
[adambhouston](https://github.com/adambhouston),
[chihinl](https://github.com/chihinl),
[cshancock](https://github.com/cshancock),
[ec-nebi](https://github.com/ec-nebi),
[gregor-d](https://github.com/gregor-d),
[jasongrahn](https://github.com/jasongrahn),
[p-kono](https://github.com/p-kono),
[pokyah](https://github.com/pokyah),
[schuetzingit](https://github.com/schuetzingit),
[tim-salabim](https://github.com/tim-salabim),
[tszberkowitz](https://github.com/tszberkowitz).

During the project we aim to contribute ‘upstream’ to the packages that
make geocomputation with R possible. This impact is recorded in
[`our-impact.csv`](https://github.com/geocompx/geocompr/blob/main/misc/our-impact.csv).

## Downloading the source code

The recommended way to get the source code underlying Geocomputation
with R on your computer is by cloning the repo. You can can that on any
computer with [Git](https://github.com/git-guides/install-git) installed
with the following command:

``` bash
git clone https://github.com/geocompx/geocompr.git
```

An alternative approach, which we recommend for people who want to
contribute to open source projects hosted on GitHub, is to install the
[`gh` CLI tool](https://github.com/cli/cli#installation). From there
cloning a fork of the source code, that you can change and share
(including with Pull Requests to improve the book), can be done with the
following command:

``` bash
gh repo fork geocompx/geocompr # (gh repo clone geocompx/geocompr # also works)
```

Both of those methods require you to have Git installed. If not, you can
download the book’s source code from the URL
<https://github.com/geocompx/geocompr/archive/refs/heads/main.zip> .
Download/unzip the source code from the R command line to increase
reproducibility and reduce time spent clicking around:

``` r
u = ""https://github.com/geocompx/geocompr/archive/refs/heads/main.zip""
f = basename(u)
download.file(u, f)        # download the file
unzip(f)                   # unzip it
file.rename(f, ""geocompr"") # rename the directory
rstudioapi::openProject(""geococompr"") # or open the folder in vscode / other IDE
```

## Reproducing the book in R/RStudio/VS Code

To ease reproducibility, we created the `geocompkg` package. Install it
with the following commands:

``` r
install.packages(""remotes"")
# To reproduce the first Part (chapters 1 to 8):
remotes::install_github(""geocompr/geocompkg"")
```

Installing `geocompkg` will also install core packages required for
reproducing **Part 1 of the book** (chapters 1 to 8). Note: you may also
need to install [system
dependencies](https://github.com/r-spatial/sf#installing) if you’re
running Linux (recommended) or Mac operating systems. You also need to
have the [**remotes**](https://github.com/r-lib/remotes/) package
installed:

To reproduce book **in its entirety**, run the following command (which
installs additional ‘Suggests’ packages, this may take some time to
run!):

``` r
# To reproduce all chapters (install lots of packages, may take some time!)
remotes::install_github(""geocompr/geocompkg"", dependencies = TRUE)
```

You need a recent version of the GDAL, GEOS, PROJ and udunits libraries
installed for this to work on Mac and Linux. See the **sf** package’s
[README](https://github.com/r-spatial/sf) for information on that. After
the dependencies have been installed you should be able to build and
view a local version the book with:

``` r
# Change this depending on where you have the book code stored:
rstudioapi::openProject(""~/Downloads/geocompr"")
 # or code /location/of/geocompr in the system terminal
 # or cd /location/of/geocompr then R in the system terminal, then:
bookdown::render_book(""index.Rmd"") # to build the book
browseURL(""_book/index.html"")      # to view it
# Or, to serve a live preview the book and observe impact of changes:
bookdown::serve_book()
```

<!-- The code associated with each chapter is saved in the `code/chapters/` folder. -->
<!-- `source(""code/chapters/07-transport.R"")` runs run the code chunks in chapter 7, for example. -->
<!-- These R scripts are generated with the follow command which wraps `knitr::purl()`: -->

## Geocompr in a devcontainer

A great feature of VS Code is
[devcontainers](https://code.visualstudio.com/docs/remote/containers),
which allow you to develop in an isolated Docker container. If you have
VS Code and the necessary dependencies installed on your computer, you
can build Geocomputation with R in a devcontainer as shown below (see
[\#873](https://github.com/geocompx/geocompr/issues/873) for details):

![](https://user-images.githubusercontent.com/1825120/193398022-bbcfbfda-5d57-4c57-8db3-ed1fdb4a07be.png)

## Geocompr in Binder

For many people the quickest way to get started with Geocomputation with
R is in your web browser via Binder. To see an interactive RStudio
Server instance click on the following button, which will open
[mybinder.org](https://mybinder.org/v2/gh/geocompx/geocompr/main?urlpath=rstudio)
with an R installation that has all the dependencies needed to reproduce
the book:

[![Launch Rstudio
Binder](http://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/geocompx/geocompr/main?urlpath=rstudio)

You can also have a play with the repo in RStudio Cloud by clicking on
this link (requires log-in):

[![Launch Rstudio
Cloud](images/cloud.png)](https://rstudio.cloud/project/1642300)

## Geocomputation with R in a Docker container

To ease reproducibility we have made Docker images available, at
[geocompr/geocompr](https://hub.docker.com/r/geocompr/geocompr/) on
DockerHub. These images allow you to explore Geocomputation with R in a
virtual machine that has up-to-date dependencies.

After you have [installed
docker](https://www.docker.com/products/container-runtime/) and set-it
up on [your
computer](https://docs.docker.com/engine/install/linux-postinstall/) you
can start RStudio Server without a password (see the [Rocker
project](https://www.rocker-project.org/use/managing_users/) for info on
how to add a password and other security steps for public-facing
servers):

``` sh
docker run -p 8787:8787 -e DISABLE_AUTH=TRUE geocompr/geocompr
```

If it worked you should be able to open-up RStudio server by opening a
browser and navigating to <http://localhost:8787/> resulting in an
up-to-date version of R and RStudio running in a container.

Start a plain R session running:

``` sh
docker run -it geocompr/geocompr R
```

![](https://user-images.githubusercontent.com/1825120/39538109-9b50e7ac-4e33-11e8-93b3-e00e95a79294.png)

If you see something like this after following the steps above,
congratulations: it worked! See
[github.com/rocker-org](https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image#running-rstudio-server)
for more info.

If you want to call QGIS from R, you can use the `qgis` tag, by running
the following command for example (which also shows how to set a
password and use a different port on localhost):

    docker run -d -p 8799:8787 -e USERID=$UID -e PASSWORD=strongpass -v $(pwd):/home/rstudio/geocompr geocompx/geocompr:qgis

From this point to *build* the book you can open projects in the
`geocompr` directory from the project box in the top-right hand corner,
and knit `index.Rmd` with the little `knit` button above the the RStudio
script panel (`Ctl+Shift+B` should do the same job).

See the
[geocompr/docker](https://github.com/geocompr/docker#geocomputation-with-r-in-docker)
repo for details, including how to share volumes between your computer
and the Docker image, for using geographic R packages on your own data
and for information on available tags.

## Reproducing this README

To reduce the book’s dependencies, scripts to be run infrequently to
generate input for the book are run on creation of this README.

The additional packages required for this can be installed as follows:

``` r
source(""code/extra-pkgs.R"")
```

With these additional dependencies installed, you should be able to run
the following scripts, which create content for the book, that we’ve
removed from the main book build to reduce package dependencies and the
book’s build time:

``` r
source(""code/01-cranlogs.R"")
source(""code/sf-revdep.R"")
source(""code/09-urban-animation.R"")
source(""code/09-map-pkgs.R"")
```

Note: the `.Rproj` file is configured to build a website not a single
page. To reproduce this
[README](https://github.com/geocompx/geocompr/blob/main/README.Rmd) use
the following command:

``` r
rmarkdown::render(""README.Rmd"", output_format = ""github_document"", output_file = ""README.md"")
```

<!-- ## Book statistics -->
<!-- An indication of the book's progress over time is illustrated below (to be updated roughly every week as the book progresses). -->
<!-- Book statistics: estimated number of pages per chapter over time. -->

## Citations

To cite packages used in this book we use code from [Efficient R
Programming](https://csgillespie.github.io/efficientR/):

``` r
# geocompkg:::generate_citations()
```

This generates .bib and .csv files containing the packages. The current
of packages used can be read-in as follows:

``` r
pkg_df = readr::read_csv(""extdata/package_list.csv"")
```

Other citations are stored online using Zotero.

If you would like to add to the references, please use Zotero, join the
[open group](https://www.zotero.org/groups/418217/energy-and-transport)
add your citation to the open [geocompr
library](https://www.zotero.org/groups/418217/energy-and-transport/items/collectionKey/9K6FRP6N).

We use the following citation key format:

    [auth:lower]_[veryshorttitle:lower]_[year]

This can be set from inside Zotero desktop with the Better Bibtex plugin
installed (see
[github.com/retorquere/zotero-better-bibtex](https://github.com/retorquere/zotero-better-bibtex))
by selecting the following menu options (with the shortcut `Alt+E`
followed by `N`), and as illustrated in the figure below:

    Edit > Preferences > Better Bibtex

![](figures/zotero-settings.png)

Zotero settings: these are useful if you want to add references.

We use Zotero because it is a powerful open source reference manager
that integrates well with the **citr** package. As described in the
GitHub repo
[Robinlovelace/rmarkdown-citr-demo](https://github.com/Robinlovelace/rmarkdown-citr-demo).
","This repository hosts the code underlying Geocomputation with R, a book by Robin
Lovelace, Jakub Nowosad, and Jannes Muenchow. The first version of the book has
been published by CRC Press. We are actively working on the Second Edition,
which will be published in September 2021. The book can be viewed online at
[r.geocompx.org] and read the latest version at [bookdown.org]. The code is
available on GitHub at [https://github.com/geocompr/raw/main/CITATION."
643,A middle-to-high level open source algorithm book designed with coding interview at heart!,"
<div align=""center"">
<h1> Hands-on Algorithmic Problem Solving</h1>
<h3> A 100% open source one-stop coding interview prep book! </a> <h3>
<br> DSA · Python · LeetCode · Principles · Problem patterns<br>
</div>

<br>

<div align=""center"">
    <!-- <a target=""_blank"" href=""https://www.liyinscience.com/""><img src=""https://img.shields.io/badge/Subscribe-30K-brightgreen""></a>&nbsp; -->
    <a target=""_blank"" href=""https://github.com/liyin2015/python-coding-interview""><img src=""https://img.shields.io/github/stars/liyin2015/python-coding-interview.svg?style=social&label=Star""></a>&nbsp;
    <a target=""_blank"" href=""https://www.linkedin.com/in/li-yin-00b0456b/""><img src=""https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social""></a>&nbsp;
    <a target=""_blank"" href=""https://twitter.com/liyinscience""><img src=""https://img.shields.io/twitter/url?url=https%3A%2F%2Fshields.io""></a>
    <br>
    🔥&nbsp; Among the <a href=""https://github.com/topics/algorithms-and-data-structures"" target=""_blank"">top DSA</a> repositories on GitHub
</div>

<br>
<hr>

## Contributing
The book is written in latex, and all contents except the code is located under [**Easy-Book** folder](Easy-Book). Feel free to send me  [pull requests](https://github.com/liyin2015/python-coding-interview/pulls) or email (li.yin.gravity@gmail.com) to contribute contents. Before you start to improve the contents, it would be helpful to know the [high-level structure of the book](#about-this-book). Read [How to contribute?](how_to_contribute.md) for more details.

All contributors (with decent amount of contributions) will be listed as authors in the project.

<hr>



## About this book

<p align=""center"">
  <img src=""figures/book_structure.png"" alt=""book_structure"" width=""500"" height=""300"" title=""Figure 1. Four umbrellas:  each row indicates corresponding parts as outlined in this book.""/>
</p>


In short, this is a middle-to-high level algorithm book designed with cracking coding interviews at hearts. It offers a one-stop coding interview prep experience. The structure of the book: 
* **Preparation**: introduce the global picture of algorithmic problem solving and coding interviews, learn abstract data structures and highly related and useful math such as recurrence relation, and hands-on Python practice by relating the abstract data structures to Python data structures. *Coding is not just code after all.*, 
* **Principles**: we organize the design and principle here so that readers can use them as guidance while not seeking for peculiar algorithm for solving a problem. 
* **Classical algorithms**: We enhance our algorithm database via learning how to apply the core principles to a variety of classical problems. A database that we can quickly relate to when seeing problems.
* **Coding interview problem patterns**:  We close our book with the analyzing and categorizing problems by patterns. We address classical and best solutions for each problem pattern. 



Besides trying to make the content easy to follow, here summarizes the uniqueness of this book: (1) it offers Python source code that is tailored to be simple so that it would be natural for you to use in interviews (2) all the exercises and examples are from Leetcode problems so that you get to practise online (3) Classical algorithms are explained with design principles. No algorithm is magic. (Check out [advanced graph algorithms](https://github.com/liyin2015/Hands-on-Algorithmic-Problem-Solving/blob/master/chapters_pdf/chapter_advanced_graph_algorithm.pdf) as an example) (4) problem patterns to help you tackle coding interview questions topic by topic.
<hr>

## How did I come up with this book?
Preparing for the coding interview is not easy! Cracking the coding interview? Nearly impossible for most of us! Luck does play a role in the outcome. So, let's just treat it as a learning process and have some fun!

Computer Science is really not just computer science. It is a combination of all fields; our normal interview problems fall into the enumerative combinatorics and our computer vision mostly consists of Linear Algebra. What really matters is our passion to learn and the ability to apply this knowledge to solve real-life problems. 

There are plenty of books out there focusing on either teaching algorithmic knowledge  (*Introduction to Algorithms*, *Algorithmic Problem Solving*, etc) or introducing the interview process and solving interview problems(*Cracking the Coding Interview*, *Coding Interview Questions*, etc), but none of these books truly combine the two. This is a book designed to make up this role in the categorization. Principle, Pattern, and Leetcode Problems make up the core of this book.

This is **NOT** a book that provides hiring statistics for each company or gives the reader quick tricks in order to pass a few coding interviews.  Its purpose is to show you the beauty of algorithmic problem solving in the hope that you will be more passionate and confident about software engineering; the interview questions just set up a playground where we strengthen what we learn. 
<hr>

## For Readers
[The whole book](Easy-Book/main.pdf) is compiled as pdf.

For readers, you can read the book as a whole or read chapters selectively following the below links. 

## Table of Contents
<hr>

### Warm Up: Abstract Data Structures and Tools
* [Abstract Data Structures](chapters_pdf/Abstract_Data_Structures.pdf)
* Discrete Programming
* Recurrence Relation

### Get Started: Programming and Python Data Structures
* Iteration and Recursion
* Bit Manipulation
* [**Python Data Structures**](chapters_pdf/Python_Data_Structure.pdf)( [source code](Colab_Codes/chapter_python_datastrcutures.ipynb) )

### Core Principles: Algorithm Design and Analysis
* Complexity Analysis
* [Search Strategies](chapters_pdf/search_strategies.pdf)([source code: Graph Search](Colab_Codes/chapter_search_strategies.ipynb), [source code: Tree Traversal](Colab_Codes/chapter_tree_data_structure_and_traversal.ipynb))
* [Combinatorial Search](chapters_pdf/combinatorial_search.pdf)( [source code](Colab_Codes/chapter_combinatorial_search.ipynb))
* Reduce and Conquer

* **Decrease and Conquer**
> * [Binary Search, Binary Search Tree, and Segment Tree](chapters_pdf/decrease_and_conquer.pdf)( [source code](Colab_Codes/chapter_decrease_and_conquer.ipynb))
* [**Sorting and Selection**](chapters_pdf/sorting_algorithms_with_python3.pdf)( source code: [ sorting algorithms](Colab_Codes/chapter_sorting_and_selection_algorithms.ipynb),[ Python comparison and sort functions](Colab_Codes/chapter_python_comparison_sorting.ipynb))
* Dynamic Programming
* Greedy Algorithms

### Advanced Algorithms 
* Advanced Data Structures
* [**Advanced Search on Linear Data Structures**](chapters_pdf/advanced_search_on_linear_data_structures.pdf)( [source code](Colab_Codes/Advanced_Search_on_Linear_Data_Structures.ipynb))
* [Advanced Graph Algorithms](chapters_pdf/chapter_advanced_graph_algorithm.pdf)
* String Pattern Matches
* Math and Geometry Algorithms

### Problem Patterns
* Dynamic Programming Questions (15%)
* Array Questions (15%)
* Linked List, Stack, Queue, and Heap Questions (12%)
* String Questions (15%)
* [Tree Questions (10%)](unorganized_pdf/tree_questions.pdf)
* Graph Questions (15%)

*Note: everything is still in progress, so use it with caution.*
<hr>

## Referring Books and Materials

* Skiena, Steven S. The algorithm design manual: Text. Vol. 1. Springer Science & Business Media, 1998.

* T. H. Cormen, Introduction to algorithms, MIT press, 2009.

* Manber, Udi. Introduction to algorithms: a creative approach. Addison-Wesley Longman Publishing Co., Inc., 1989.

* Kleinberg, Jon, and Eva Tardos. Algorithm design. Pearson Education India, 2006.

* Russell, Stuart J., and Peter Norvig. Artificial intelligence: a modern approach. Malaysia; Pearson Education Limited,, 2016. (**Best book ever in explaining searching problem-solving, differentiate tree-search and graph-search**)

* D. M. Beazley, Python essential reference, Addison-Wesley Professional,2009.

* S. Halim and F. Halim, Competitive Programming 3, Lulu Independent
Publish, 2013.

* B. Slatkin, Effective Python: 59 Specific Ways to Write Better Python,Pearson Education, 2015.

* H. hua jiang, “Leetcode blogs,” https://zxi.mytechroad.com/blog/category, 2018, [Online; accessed 19-July-2018].

* B. Baka, “Python data structures and algorithms: Improve application performance with graphs, stacks, and queues,” 2017.

* “Competitive  Programming,”https://cp-algorithms.com/,  2019, [Online; accessed 19-July-2018].

* “cs  princeton,”https://aofa.cs.princeton.edu/60trees/,  2019,
[Online; accessed 19-July-2018]
* https://stanford-cs161.github.io/winter2021/schedule/
<hr>

## Tools
* Graph Visualize with [graphviz](http://www.webgraphviz.com/). [Examples](https://graphs.grevian.org/example). [Tutorial to use Python](https://graphviz.readthedocs.io/en/stable/manual.html)
<hr>

## Mocking Interviews
Practice is important. Schedule some mocking interviews with [interviewing.io](https://interviewing.io/). If you cant manage to register, you can join us in [discord server](https://discord.gg/ZXnSag7fMP) and ask peers for practice interview.
<hr>

## Community
**Join me on discord server: https://discord.gg/ZXnSag7fMP, for a supportive community**
<hr>

## Feedback
If you have ideas to improve the book, about formatting, more contents, or correct the errors, do not hesitate to let me know. 

<!-- Citation -->
To cite this content, please use:
<hr>
```bibtex
@misc{handsondsa,
    author       = {Li Yin},
    title        = {Hands-on Algorithmic Problem Solving},
    howpublished = {\url{https://github.com/liyin2015/python-coding-interview/}},
    year         = {2021}
}
```
","This is a middle-to-high level algorithm book designed with cracking coding
interviews at hearts. It offers a one-stop coding interview prep experience. The
book is written in latex, and all contents except the code are located under the
Easy-Book folder."
3146,A collection about awesome blockchains - open distributed public databases w/ crypto hashes incl. git ;-).  Blockchains are the new tulips :tulip::tulip::tulip:. Distributed is the new centralized.,"
Mining Digital Gold one Block at a Time?! • Don't Expect to Get Insanely Rich (Quick) • Tulips :tulip::tulip::tulip: (like Blockchains) are Great and Gorgeous (and will Endure)

```ruby
b0 = Block.first(
        { from: ""Dutchgrown"", to: ""Vincent"", what: ""Tulip Bloemendaal Sunset"", qty: 10 },
        { from: ""Keukenhof"",  to: ""Anne"",    what: ""Tulip Semper Augustus"",    qty: 7  } )

b1 = Block.next( b0,
        { from: ""Flowers"",    to: ""Ruben"",   what: ""Tulip Admiral van Eijck"",  qty: 5  },
        { from: ""Vicent"",     to: ""Anne"",    what: ""Tulip Bloemendaal Sunset"", qty: 3  },
        { from: ""Anne"",       to: ""Julia"",   what: ""Tulip Semper Augustus"",    qty: 1  },
        { from: ""Julia"",      to: ""Luuk"",    what: ""Tulip Semper Augustus"",    qty: 1  } )
...
```

(Source: [`blockchain_with_transactions.rb`](blockchain.rb/blockchain_with_transactions.rb))


# Awesome Blockchains

A collection about awesome blockchains - open distributed databases w/ crypto hashes incl. git ;-).  Blockchains are the new tulips :tulip::tulip::tulip:.

Contents:

- [Frequently Asked Questions (F.A.Q.s) & Answers](#frequently-asked-questions-faqs--answers)
- [Do-It-Yourself (DIY) - Build Your Own Blockchain](#do-it-yourself-diy---build-your-own-blockchain)
  - [Python](#python) • [Ruby](#ruby) • [JavaScript](#javascript) • [Java](#java) • [Go](#go)
- [Blockchain Articles](#blockchain-articles)
- [Blockchain Books](#blockchain-books)
- [Blockchain (Lite) Crypto Hash Libraries](#blockchain-lite-crypto-hash-libraries)
- [Git, Git, Git - The Stupid Content Tracker with Crypto Hashes](#git-git-git---the-stupid-content-tracker-with-crypto-hashes)
- [Classic Tulip Mania](#classic-tulip-mania)
- [Awesome Awesomeness](#awesome-awesomeness)



## What's News?

For blockchain books, see the new [**Best of Crypto Books page »**](https://openblockchains.github.io/crypto-books/)

### The Open Blockchains Book of the Year 2020 Award Goes To...

![](i/libra-shrugged.png)
[**Libra Shrugged: How Facebook Tried to Take Over the Money**](https://davidgerard.co.uk/blockchain/libra/)
by David Gerard, November 2020, 182 Pages --
_Introduction: Taking over the money  ++
A user's guide to Libra   ++
The genesis of Libra: Beller's blockchain ++
To launch a Libra: Let’s start a crypto  ++
Bitcoin: why Libra is like this  ++
The Libra White Papers  ++
Banking the unbanked  ++
The Libra Reserve plan and economic stability ++
Libra, privacy and your digital identity  ++
The regulators recoil in horror  ++
David Marcus before the US House and Senate ++
July to September 2019: Libra runs the gauntlet  ++
October 2019: Libra's bad month  ++
Mark Zuckerberg before the US House  ++
November 2019: The comedown  ++
Central bank digital currencies  ++
Epilogue: Libra 2.0: not dead yet  ++
Appendix: 2010–2013: The rise and fall of Facebook Credits_

For more about Diem (formerly Libra), see the [Awesome Diem (formerly Libra) and Move page »](https://github.com/openblockchains/awesome-diem)

---

For crypto quotes, see the new [**100+ Best of Crypto Quotes - I HODL, you HODL, we HODL! - BREAKING: BITCOIN JUST BROKE $22 000! page »**](https://github.com/openblockchains/crypto-quotes)

### The Best Crypto Quote ""Oracle Saying"" of the Year 2020 Award Goes To...

> SEC Investor Education:
> - Don't understand an investment?
> - Don't invest in it.

Yes, but what if there's only 21 million of it?

  \- Trolly McTrollface



## Frequently Asked Questions (F.A.Q.s) & Answers


**Q: What's a Blockchain?**

A: A blockchain is a distributed database with a list (that is, chain) of records (that is, blocks) linked and secured by
digital fingerprints (that is, cryptho hashes).
Example from [`blockchain.rb`](blockchain.rb/blockchain.rb):

```
[#<Block:0x1eed2a0
  @timestamp     = 1637-09-15 20:52:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @hash          = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
 #<Block:0x1eec9a0
  @timestamp     = 1637-09-15 21:02:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"",
  @hash          = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"">,
 #<Block:0x1eec838
  @timestamp     = 1637-09-15 21:12:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"",
  @hash          = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"">,
  ...
```

![](i/blockchain-jesus.png)


**Q: What's a Hash? What's a (One-Way) Crypto(graphic) Hash Digest Checksum**?

A: A hash e.g. `eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743`
is a small digest checksum calculated
with a one-way crypto(graphic) hash digest checksum function
e.g. SHA256 (Secure Hash Algorithm 256 Bits)
from the data. Example from [`blockchain.rb`](blockchain.rb/blockchain.rb):

```ruby
def calc_hash
  sha = Digest::SHA256.new
  sha.update( @timestamp.to_s + @previous_hash + @data )
  sha.hexdigest   ## returns ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743""
end
```

A blockchain uses

- the block timestamp (e.g. `1637-09-15 20:52:38`) and
- the hash from the previous block (e.g. `edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b`) and finally
- the block data (e.g. `Transaction Data...`)

to calculate the new hash digest checksum, that is, the hash
e.g. `be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4`.


**Q: What's a Merkle Tree?**

A: A Merkle tree is a hash tree named after Ralph Merkle who patented the concept in 1979
(the patent expired in 2002). A hash tree is a generalization of hash lists or hash chains where every leaf node (in the tree) is labelled with a data block and every non-leaf node (in the tree)
is labelled with the crypto(graphic) hash of the labels of its child nodes. For more see the [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree) Wikipedia Article.

Note: By adding crypto(graphic) hash functions you can ""merkelize"" any data structure.


**Q: What's a Merkelized DAG (Directed Acyclic Graph)?**

A: It's a blockchain secured by crypto(graphic) hashes that uses a directed acyclic graph data structure (instead of linear ""classic"" linked list).

Note: Git uses merkelized dag (directed acyclic graph)s for its blockchains.


**Q: Is the Git Repo a Blockchain?**

A: Yes, every branch in the git repo is a blockchain.
The ""classic"" Satoshi-blockchain is like a git repo with a single master branch (only).



## Do-It-Yourself (DIY) - Build Your Own Blockchain

![](i/fake-dilbert-blockchain.png)


[Python](#python) •
[Ruby](#ruby) •
[JavaScript](#javascript) •
[Java](#java) •
[Go](#go)


### Python

**Let's Build the Tiniest Blockchain in Python Series** by Gerald Nash

- [**Let's Build the Tiniest Blockchain In Less Than 50 Lines of Python (Part 1)**](https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b), July 2016
- [**Let's Make the Tiniest Blockchain Bigger With More Lines of Python (Part 2)**](https://medium.com/crypto-currently/lets-make-the-tiniest-blockchain-bigger-ac360a328f4d), July 2016

<!-- break -->

[**Build Your Own Blockchain: A Python Tutorial**](http://ecomunsing.com/build-your-own-blockchain)
by Eric Munsing, March 2017, [(Source)](https://github.com/emunsing/tutorials/blob/master/BuildYourOwnBlockchain.ipynb)


[**Learn Blockchains by Building One (in Python)**](https://hackernoon.com/learn-blockchains-by-building-one-117428612f46)
by Daniel van Flymen, September 2017, [(Source)](https://github.com/dvf/blockchain) -- The fastest way to learn how Blockchains work is to build one


**Build Your Own Blockchain (in Python 3) Series** by Jack Schultz, [(Source)](https://github.com/jackschultz/jbc)

- [**Part 1: Creating, Storing, Syncing, Displaying, Mining, and Proving Work**](https://bigishdata.com/2017/10/17/write-your-own-blockchain-part-1-creating-storing-syncing-displaying-mining-and-proving-work/), October 2017
- [**Part 2: Syncing Chains From Different Nodes**](https://bigishdata.com/2017/10/27/build-your-own-blockchain-part-2-syncing-chains-from-different-nodes/), October 2017
- [**Part 3: Writing Nodes that Mine and Talk**](https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/), November 2017

<!-- break -->

[**A Practical Introduction to Blockchain with Python**](http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/)
by Adil Moujahid, March 2018, [(Source)](https://github.com/adilmoujahid/blockchain-python-tutorial)


### Ruby

[**How Does Bitcoin Force Consensus Among Byzantine Generals?**](http://www.akitaonrails.com/2017/11/01/how-does-bitcoin-force-consensus-among-byzantine-generals) by Fabio Akita, November 2017

[**blockchain-lite - Build your own blockchains with crypto hashes; revolutionize the world with blockchains, blockchains, blockchains one block at a time!**](https://planetruby.github.io/calendar/advent2017/01-blockchain-lite) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 1, December 2017

[**merkletree library - Build Your Own Crypto Hash Trees; Grow Your Own Money on Trees**](https://planetruby.github.io/calendar/advent2017/19-merkletree.html) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 19, December 2017

[**centralbank command line tool (and library) - Print Your Own Money / Cryptocurrency; Run Your Own Federated Central Bank Nodes on the Blockchain Peer-to-Peer over HTTP**](https://planetruby.github.io/calendar/advent2017/24-centralbank.html) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 24, December 2017

[**A guide to building a blockchain & cryptocurrency from scratch**](https://antoinefink.com/building-a-blockchain-and-cryptocurrency-in-ruby) [(Source)](https://github.com/antoinefink/melon) by Antoine Fink, April 2021


### Crystal

[**Write your own blockchain and Proof-of-Work (PoW) algorithm using Crystal**](https://medium.com/@bradford_hamilton/write-your-own-blockchain-and-pow-algorithm-using-crystal-d53d5d9d0c52) by Bradford Lamson-Scribner, May 2018,
[(Source)](https://github.com/bradford-hamilton/crystal-blockchain)


### JavaScript

[**Writing a Tiny Blockchain in JavaScript**](https://www.savjee.be/2017/07/Writing-tiny-blockchain-in-JavaScript/)
by Xavier Decuyper, July 2017

[**Node.js Blockchain Imlementation: BrewChain: Chain+WebSockets+HTTP Server**](http://www.darrenbeck.co.uk/blockchain/nodejs/nodejscrypto/) by Darren Beck, November 2017, [(Source)](https://github.com/dbbddb/BrewChain) -- Protecting the tea making ledger from unscrupulous colleagues

[**Build your own Blockchain in Javascript/Visualization of Blockchains**](https://github.com/nambrot/blockchain-in-js) by Nam Chu Hoai,  January 2018


### TypeScript

[**Naivecoin: a tutorial for building a cryptocurrency**](https://lhartikk.github.io) by Lauri Hartikka, [(Source)](https://github.com/lhartikk/naivecoin)


### Java

[**Creating Your First Blockchain with Java, Part 1**](https://medium.com/programmers-blockchain/create-simple-blockchain-java-tutorial-from-scratch-6eeed3cb03fa) by Kass, December 2017, [(Source)](https://github.com/CryptoKass/NoobChain-Tutorial-Part-1)

### Kotlin

[**Let's implement a cryptocurrency in Kotlin**](https://medium.com/@vasilyf/lets-implement-a-cryptocurrency-in-kotlin-part-1-blockchain-8704069f8580) by Vasily Fomin, July 2018,
[(Source)](https://github.com/VasilyFomin/kCoin)


### SQL

[**Blockchain by Example in SQL Server**](https://medium.com/@benjaminsky/blockchain-by-example-in-sql-server-8376b410128) by Benjamin Campbell, December 2017, [(Source)](https://github.com/benjaminsky/BlockchainMessenger)


### Rust

**Building Blockchain in Rust Series** by Jacob Lindahl, GeekLaunch, [(Source)](https://github.com/GeekLaunch/blockchain-rust), [(Slide Decks in PDF)](https://github.com/GeekLaunch/slides)
- [**Part 1: Blocks and Hashing**](https://medium.com/geeklaunch/blockchain-in-rust-01-blocks-hashing-4192f2265d3d), January 2019
- [**Part 2: Mining**](https://medium.com/geeklaunch/blockchain-in-rust-02-mining-companion-guide-9106b7a7696d), January 2019
- [**Part 3: Chains and Checks**](https://medium.com/geeklaunch/blockchain-in-rust-03-chains-checks-companion-guide-2714e1a76654), January 2019

### Go

**Building Blockchain in Go Series** by Ivan Kuznetsov, [(Source)](https://github.com/Jeiwan/blockchain_go)

- [**Part 1: Basic Prototype**](https://jeiwan.cc/posts/building-blockchain-in-go-part-1/), August 2017
- [**Part 2: Proof-of-Work**](https://jeiwan.cc/posts/building-blockchain-in-go-part-2/), August 2017
- [**Part 3: Persistence and CLI**](https://jeiwan.cc/posts/building-blockchain-in-go-part-3/), August 2017
- [**Part 4: Transactions 1**](https://jeiwan.cc/posts/building-blockchain-in-go-part-4/), September 2017
- [**Part 5: Addresses**](https://jeiwan.cc/posts/building-blockchain-in-go-part-5/), September 2017
- [**Part 6: Transactions 2**](https://jeiwan.cc/posts/building-blockchain-in-go-part-6/), September 2017
- [**Part 7: Network**](https://jeiwan.cc/posts/building-blockchain-in-go-part-7/), October 2017

<!-- break -->

Blockchain Series in Go by by Coral Health [(Source)](https://github.com/mycoralhealth/blockchain-tutorial)

- [**Code your own blockchain in less than 200 lines of Go!**](https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc) by Coral Health, January 2018
- [**Part 2: Networking — Code your own blockchain in less than 200 lines of Go!**](https://medium.com/@mycoralhealth/part-2-networking-code-your-own-blockchain-in-less-than-200-lines-of-go-17fe1dad46e1) by Coral Health, February 2018
- [**Code your own blockchain mining algorithm in Go!**](https://medium.com/@mycoralhealth/code-your-own-blockchain-mining-algorithm-in-go-82c6a71aba1f) by Coral Health, March 2018


<!--
  it's more about bitcoin (and not about blockchain really)
### C#

[**Programming The Blockchain in C#**](https://programmingblockchain.gitbooks.io/programmingblockchain/)
-->


### Talk Notes

- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in JavaScript from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain.md) by Gerald Bauer, Vienna.js, September 2017
- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in Ruby from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain_ruby.md) by Gerald Bauer, Vienna.rb, Dezember 2017
- [**Blockchain vs (Hyper) Ledger -- Inside (Hyper) Ledger Lite - Add Transactions One Block at a Time and Balance the Accounts (Books)**](https://github.com/geraldb/talks/blob/master/hyperledger.md) by Gerald Bauer, Hyperledger Vienna, March 2018
- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in Go from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain_go.md) by Gerald Bauer, Vienna.go, April 2018


### More

See [**Build your own Blockchain / Cryptocurrency**](https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency) @ Build your own (insert technology here)




### Samples

#### Blockchain from Scratch - Ruby Version

```ruby
class Block

  attr_reader :timestamp
  attr_reader :data
  attr_reader :previous_hash
  attr_reader :hash

  def initialize(data, previous_hash)
    @timestamp     = Time.now
    @data          = data
    @previous_hash = previous_hash
    @hash          = calc_hash
  end

  def self.first( data=""Genesis"" )    # create genesis (big bang! first) block
    ## note: uses all zero for previous_hash (""0"")
    Block.new( data, ""0000000000000000000000000000000000000000000000000000000000000000"" )
  end

  def self.next( previous, data=""Transaction Data..."" )
    Block.new( data, previous.hash )
  end

private

  def calc_hash
    sha = Digest::SHA256.new
    sha.update( @timestamp.to_s + @previous_hash + @data )
    sha.hexdigest
  end

end  # class Block


#####
## let's get started
##   build a blockchain a block at a time

b0 = Block.first( ""Genesis"" )
b1 = Block.next( b0, ""Transaction Data..."" )
b2 = Block.next( b1, ""Transaction Data......"" )
b3 = Block.next( b2, ""More Transaction Data..."" )

blockchain = [b0, b1, b2, b3]

pp blockchain

```

(Source: [`blockchain.rb`](blockchain.rb/blockchain.rb))

will pretty print (pp) something like:

```
[#<Block:0x1eed2a0
  @timestamp     = 1637-09-15 20:52:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @hash          = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
 #<Block:0x1eec9a0
  @timestamp     = 1637-09-15 21:02:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"",
  @hash          = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"">,
 #<Block:0x1eec838
  @timestamp     = 1637-09-15 21:12:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"",
  @hash          = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"">,
 #<Block:0x1eec6d0
  @timestamp     = 1637-09-15 21:22:38,
  @data          = ""More Transaction Data..."",
  @previous_hash = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"",
  @hash          = ""5ee2981606328abfe0c3b1171440f0df746c1e1f8b3b56c351727f7da7ae5d8d"">]
```


Comments from the [reddit ruby posting](https://www.reddit.com/r/ruby/comments/70c30f/build_your_own_blockchain_in_20_lines_of_ruby/):

> Wait, so a blockchain is just a linked list?
>
>> No. A linked list is only required to have a reference to the previous element, a block must
>> have an identifier depending on the previous block's identifier, meaning that you cannot
>> replace a block without recomputing every single block that comes after.
>> In this implementation that happens as the previous digest is input in the calc_hash method.



**What about Proof of Work / Waste?**

Let's add a proof of work / waste to the blockchain. In the classic blockchain you have to compute a block hash that starts with leading zeros (`00`). The more leading zeros the harder (more difficult) to compute. Let's keep it easy to compute with two leading zeros (`00`), that is, 16^2 = 256 possibilites (^1,2). Three leading zeros (`000`) would be 16^3 = 4_096 possibilites and four zeros (`0000`) would be 16^4 = 65_536 and so on.

(^1): 16 possibilties because it's a hex or hexadecimal or base 16 number, that is, `0` `1` `2` `3` `4` `6` `7` `8` `9` `a` (10) `b` (11) `c` (12) `d` (13) `e` (14) `f` (15).

(^2): A random secure hash algorithm needs on average 256 tries (might be lets say 305 tries, for example, because it's NOT a perfect statistic distribution of possibilities).


Example:

```ruby
def compute_hash_with_proof_of_work( difficulty=""00"" )
  nonce = 0
  loop do
    hash = calc_hash_with_nonce( nonce )
    if hash.start_with?( difficulty )
      return [nonce,hash]     ## bingo! proof of work if hash starts with leading zeros (00)
    else
      nonce += 1              ## keep trying (and trying and trying)
    end
  end
end

def calc_hash_with_nonce( nonce=0 )
  sha = Digest::SHA256.new
  sha.update( nonce.to_s + @timestamp.to_s + @previous_hash + @data )
  sha.hexdigest
end
```

(Source: [`blockchain_with_proof_of_work.rb`](blockchain.rb/blockchain_with_proof_of_work.rb))

Let's rerun the sample with the proof of work machinery added.
Now the sample will pretty print (pp) something like:

```
[#<Block:0x1e204f0
  @timestamp     = 1637-09-20 20:13:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @nonce         = 242,
  @hash          = ""00b8e77e27378f9aa0afbcea3a2882bb62f6663771dee053364beb1887e18bcf"">,
 #<Block:0x1e56e20
  @timestamp     = 1637-09-20 20:23:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""00b8e77e27378f9aa0afbcea3a2882bb62f6663771dee053364beb1887e18bcf"",
  @nonce         = 46,
  @hash          = ""00aae8d2e9387e13c71b33f8cd205d336ac250d2828011f5970062912985a9af"">,
 #<Block:0x1e2bd58
  @timestamp     = 1637-09-20 20:33:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""00aae8d2e9387e13c71b33f8cd205d336ac250d2828011f5970062912985a9af"",
  @nonce         = 350,
  @hash          = ""00ea45e0f4683c3bec4364f349ee2b6816be0c9fd95cfd5ffcc6ed572c62f190"">,
 #<Block:0x1fa8338
  @timestamp     = 1637-09-20 20:43:38,
  @data          = ""More Transaction Data..."",
  @previous_hash = ""00ea45e0f4683c3bec4364f349ee2b6816be0c9fd95cfd5ffcc6ed572c62f190"",
  @nonce         = 59,
  @hash          = ""00436f0fca677652963e904ce4c624606a255946b921132d5b1f70f7d86c4ab8"">]
```

See the difference? All hashes now start with leading zeros (`00`) and the nonce is the random ""lucky number""
that makes it happen. That's the magic behind the proof of work.


##### Blockchain from Scratch - JavaScript Version

```js
class Block {

  constructor(data, previousHash) {
    this.timestamp    = new Date()
    this.data         = data
    this.previousHash = previousHash
    this.hash         = this.calcHash()
  }

  calcHash() {
    var sha = SHA256.create()
    sha.update( this.timestamp.toString() + this.previousHash + this.data )
    return sha.hex()
  }

  static first( data=""Genesis"" ) {    // create genesis (big bang! first) block
    // uses all-zero previousHash
    return new Block( data, ""0000000000000000000000000000000000000000000000000000000000000000"" )
  }

  static next( previous, data=""Transaction Data..."" ) {
    return new Block( data, previous.hash )
  }
}


//////
// let's get started
//   build a blockchain a block at a time

b0 = Block.first( ""Genesis"" )
b1 = Block.next( b0, ""Transaction Data..."" )
b2 = Block.next( b1, ""Transaction Data......"" )
b3 = Block.next( b2, ""More Transaction Data..."" )


blockchain = [b0, b1, b2, b3]

console.log( blockchain )
```

(Source: [`blockchain.js`](blockchain.js/blockchain.js))

will log something like:

```
[ Block {
     timestamp    : 1637-09-18 08:25:54,
     data         : 'Genesis',
     previousHash : '0000000000000000000000000000000000000000000000000000000000000000',
     hash         : 'c396de4c03ddb5275661982adc75ce5fc5905d2a2457d1266c74436c1f3c50f1' },
   Block {
     timestamp    : 1637-09-18 08:35:54,
     data         : 'Transaction Data...',
     previousHash : 'c396de4c03ddb5275661982adc75ce5fc5905d2a2457d1266c74436c1f3c50f1',
     hash         : '493131e09c069645c82795c96e4715cea0f5558be514b5096d853a5b9899154a' },
   Block {
     timestamp    : 1637-09-18 08:45:54,
     data         : 'Transaction Data......',
     previousHash : '493131e09c069645c82795c96e4715cea0f5558be514b5096d853a5b9899154a',
     hash         : '97aa3cb5052615d60ff8e6b41bef606562588c4874f011970ac2f218e2f0f4a8' },
   Block {
     timestamp    : 1637-09-18 08:55:54,
     data         : 'More Transaction Data...',
     previousHash : '97aa3cb5052615d60ff8e6b41bef606562588c4874f011970ac2f218e2f0f4a8',
     hash         : 'e10e020f832e46c2b60e1c3c0412bd370b2fde5f0f782c16eb87d0313ea0d3a3' } ]
```



## Blockchain Articles

[**Reflections on the Blockchain**](http://rufuspollock.com/2016/07/02/reflections-on-the-blockchain) by Rufus Pollock (Open Knowledge Foundation), July 2016 --
_The DAO: Code is not Law – and It’s Dangerous to Think So ++
The Internet changed the world - surely the Blockchain will too? ++
Gold-rush or Internet-rush? ++
Governance Matters in Bitcoin ++
The Myth of a Costless, Ownerless Network ++
Lessons from History_

[**On the Dangers of a Blockchain Monoculture**](https://tonyarcieri.com/on-the-dangers-of-a-blockchain-monoculture) by Tony Arcieri, January 2016 --
_The Bitcoin blockchain: the world's worst database ++
Next-generation protocols ++
Decentralized ledger protocols ++
Bitcoin-NG ++
Blockchain! Blockchain! Blockchain! ++
The great decentralized database in the sky_


[**I Don’t Believe in Blockchain**](https://www.tbray.org/ongoing/When/201x/2017/05/13/Not-Believing-in-Blockchain) by Tim Bray, May 2017


[**Minimum Viable Blockchain**](https://www.igvita.com/2014/05/05/minimum-viable-block-chain/) by Ilya Grigorik, May 2014 --
_Securing transactions with triple-entry bookkeeping ++
Securing transactions with PKI ++
Balance = Σ(receipts) ++
Multi-party transfers & verification ++
Double-spending and distributed consensus -
 Requirements for a distributed consensus network;
 Protecting the network from Sybil attacks;
Proof-of-work as a participation requirement ++
Building the minimum viable blockchain -
 Adding ""blocks"" & transaction fee incentives;
 Racing to claim the transaction fees;
 Resolving chain conflicts;
 Blocks are never final ++
Properties of the (minimum viable) blockchain_

[**Blockchains by analogies and applications: How blockchain compares to Git, Raft, and other technologies.**](https://www.oreilly.com/ideas/blockchains-by-analogies-and-applications)
by Kieren James-Lubin, January 2016 --
_Blockchains are databases ++
Understanding transactions ++
Persistent, replicated databases (related technology: Git) ++
Peer-to-peer networks (related technology: BitTorrent) ++
Distributed consensus (related technology: distributed databases, Raft) ++
Minting new coins (mining) ++
Embedded identities (related technology: TLS) ++
Smart contracts: Like SQL expressions & triggers ++
What can we really do with blockchains?_



## Blockchain Books

[**Attack of the 50 Foot Blockchain: Bitcoin, Blockchain, Ethereum & Smart Contracts**](https://davidgerard.co.uk/blockchain/table-of-contents/) by David Gerard, London, 2017 --
_What is a bitcoin? ++
The Bitcoin ideology ++
The incredible promises of Bitcoin! ++
Early Bitcoin: the rise to the first bubble ++
How Bitcoin mining centralised ++
Who is Satoshi Nakamoto? ++
Spending bitcoins in 2017 ++
Trading bitcoins in 2017: the second crypto bubble ++
Altcoins ++
Smart contracts, stupid humans ++
Business bafflegab, but on the Blockchain ++
Case study: Why you can’t put the music industry on a blockchain_


[**Mastering Bitcoin - Programming the Open Blockchain**](https://github.com/bitcoinbook/bitcoinbook/blob/second_edition/ch09.asciidoc) 2nd Edition,
by Andreas M. Antonopoulos, 2017 - FREE (Online Source Version) --
_What Is Bitcoin? ++
How Bitcoin Works ++
Bitcoin Core: The Reference Implementation ++
Keys, Addresses ++
Wallets ++
Transactions ++
Advanced Transactions and Scripting ++
The Bitcoin Network ++
The Blockchain ++
Mining and Consensus ++
Bitcoin Security ++
Blockchain Applications_

---

![](i/trolly-ponzi.png)

**BEWARE: Bitcoin is a gigantic ponzi scheme¹.
To the moon!? The new gold standard!?
Do NOT ""invest"" trying to get-rich-quick HODLing.
Why not? The bitcoin code is archaic and out-of-date.
Burn, baby, burn! Proof-of-work / waste is a global
energy environmental disaster
using 300 kW/h per bitcoin transaction (!) that's about 179 kilograms of CO₂ emissions².
Programmable money (or the internet of value)
for all future generations with (bitcoin) script
without loops and jumps (gotos) and all ""stateless""!? LOL.**

¹: (Source: [Best of Bitcoin Maximalist - Scammers, Morons, Clowns, Shills & BagHODLers - Inside The New New Crypto Ponzi Economics](https://bitsblocks.github.io/bitcoin-maximalist))

²: Assuming let's say 0.596 kilograms of CO₂ per kW/h
(that's the energy efficiency in Germany) that's
about 179 kilograms of CO₂ per bitcoin transaction (300 kW/h × 0.596 kg). For more insights see the [Bitcoin Energy Consumption Index](https://digiconomist.net/bitcoin-energy-consumption).

---


[**Programming Bitcoin from Scratch**](https://github.com/jimmysong/programmingbitcoin) by Jimmy Song, 2019 - FREE (Online Source Version) -- _[Chapter 6 - Script](https://github.com/jimmysong/programmingbitcoin/blob/master/ch06.asciidoc) - How Script Works • Example Operations • Parsing the Script Fields • Combining the Script Fields • Standard Scripts • p2pk • Problems with p2pk • Solving the Problems with p2pkh • Scripts Can Be Arbitrarily Constructed • Conclusion ++_
_[Chapter 8 - Pay-to-Script Hash](https://github.com/jimmysong/programmingbitcoin/blob/master/ch08.asciidoc) - Bare Multisig • Coding OP_CHECKMULTISIG • Problems with Bare Multisig • Pay-to-Script-Hash (p2sh) • Coding p2sh • Conclusion ++_
_[Chapter 13 - Segregated Witness](https://github.com/jimmysong/programmingbitcoin/blob/master/ch13.asciidoc) - Pay-to-Witness-Pubkey-Hash (p2wpkh) • p2wpkh Transactions • p2sh-p2wpkh • Coding p2wpkh and p2sh-p2wpkh • Pay-to-Witness-Script-Hash (p2wsh) • p2sh-p2wsh • Coding p2wsh and p2sh-p2wsh • Other Improvements • Conclusion_


[**Programming Bitcoin Script Transaction (Crypto) Contracts Step-by-Step ( Beta / Rough Draft )**](https://github.com/openblockchains/programming-bitcoin-script)
by Gerald Bauer et al, 2019 - FREE (Online Version) --
_Let's start with building your own bitcoin stack machine from zero / scratch and let's run your own bitcoin ops (operations)..._


[**Programming Blockchains in Ruby from Scratch Step-by-Step Starting w/ Crypto Hashes... ( Beta / Rough Draft )**](https://github.com/yukimotopress/programming-blockchains-step-by-step)
by Gerald Bauer et al, 2018 - FREE (Online Version) --
_(Crypto) Hash ++
(Crypto) Block ++
(Crypto) Block with Proof-of-Work ++
Blockchain! Blockchain! Blockchain! ++
Blockchain Broken? ++
Timestamping ++
Mining, Mining, Mining - What's Your Hash Rate? ++
Bitcoin, Bitcoin, Bitcoin ++
(Crypto) Block with Transactions (Tx)_

[**Mastering Ethereum - Building Contract Services and Decentralized Apps on the Blockchain**](https://github.com/ethereumbook/ethereumbook) -
by Andreas M. Antonopoulos, Gavin Wood, 2018 - FREE (Online Source Version)
_What is Ethereum ++
Introduction ++
Ethereum Clients ++
Ethereum Testnets ++
Keys and Addresses ++
Wallets	++
Transactions ++
Contract Services ++
Tokens ++
Oracles ++
Accounting & Gas ++
EVM (Ethereum Virtual Machine) ++
Consensus ++
DevP2P (Peer-To-Peer) Protocol ++
Dev Tools and Frameworks ++
Decentralized Apps ++
Ethereum Standards (EIPs/ERCs)_


[**Building Decentralized Apps on the Ethereum Blockchain**](https://www.manning.com/books/building-ethereum-dapps) by Roberto Infante, 2018 - FREE chapter 1 --
_Understanding decentralized applications ++
The Ethereum blockchain ++
Building contract services in (JavaScript-like) Solidity ++
Running contract services on the Ethereum blockchain ++
Developing Ethereum Decentralized apps with Truffle ++
Best design and security practice_

[**Programming Crypto Blockchain Contracts Step-by-Step Book / Guide ( Beta / Rough Draft )**](https://github.com/openblockchains/programming-cryptocontracts) by Gerald Bauer et al, 2019 - FREE (Online Version) --
_Let's Start with Ponzi & Pyramid Schemes. Run Your Own Lotteries, Gambling Casinos and more on the Blockchain World Computer..._


[**Programming Cryptocurrencies and Blockchains in Ruby ( Beta / Rough Draft )**](http://yukimotopress.github.io/blockchains)
by Gerald Bauer et al, 2018 - FREE (Online Version) @ Yuki & Moto Press Bookshelf --
_Digital $$$ Alchemy - What's a Blockchain? -
How-To Turn Digital Bits Into $$$ or €€€? •
Decentralize Payments. Decentralize Transactions. Decentralize Blockchains. •
The Proof of the Pudding is ... The Bitcoin (BTC) Blockchain(s)
++
Building Blockchains from Scratch -
A Blockchain in Ruby in 20 Lines! A Blockchain is a Data Structure  •
What about Proof-of-Work? What about Consensus?   •
Find the Lucky Number - Nonce == Number Used Once
++
Adding Transactions -
The World's Worst Database - Bitcoin Blockchain Mining  •
Tulips on the Blockchain! Adding Transactions
++
Blockchain Lite -
Basic Blocks  •
Proof-of-Work Blocks  •
Transactions
++
Merkle Tree -
Build Your Own Crypto Hash Trees; Grow Your Own Money on Trees  •
What's a Merkle Tree?   •
Transactions
++
Central Bank -
Run Your Own Federated Central Bank Nodes on the Blockchain Peer-to-Peer over HTTP  •
Inside Mining - Printing Cryptos, Cryptos, Cryptos on the Blockchain
++
Awesome Crypto
++
Case Studies - Dutch Gulden  • Shilling  • CryptoKitties (and CryptoCopycats)_



[**Blockchain for Dummies, IBM Limited Edition**](https://www.ibm.com/blockchain/what-is-blockchain.html) by Manav Gupta, 2017 - FREE (Digital Download w/ Email) --
_Grasping Blockchain Fundamentals ++
Taking a Look at How Blockchain Works ++
Propelling Business with Blockchains ++
Blockchain in Action: Use Cases ++
Hyperledger, a Linux Foundation Project ++
Ten Steps to Your First Blockchain application_


[**Get Rich Quick ""Business Blockchain"" Bible - The Secrets of Free Easy Money**](https://github.com/bitsblocks/get-rich-quick-bible), 2018 - FREE --
_Step 1: Sell hot air. How? ++
Step 2: Pump up your tokens. How? ++
Step 3: Revolutionize the World. How?_


[**Best of Bitcoin Maximalist - Scammers, Morons, Clowns, Shills & BagHODLers - Inside The New New Crypto Ponzi Economics**](https://github.com/bitsblocks/bitcoin-maximalist) by Trolly McTrollface, et al, 2018 - FREE

[**Crypto Facts - Decentralize Payments - Efficient, Low Cost, Fair, Clean - True or False?**](https://github.com/bitsblocks/crypto-facts) by Nouriel Roubini, David Gerard, et al, 2018 - FREE

[**Crypto is the Mother of All Scams and (Now Busted) Bubbles - While Blockchain Is The Most Over-Hyped Technology Ever, No Better than a Spreadsheet/Database**](https://github.com/bitsblocks/crypto-bubbles) by Nouriel Roubini, 2018 - FREE

[**IslandCoin White Paper - A Pen and Paper Cash System - How to Run a Blockchain on a Deserted Island**](https://github.com/bitsblocks/islandcoin-whitepaper)
by Tal Kol --
_Motivation ++
Consensus ++
Transaction and Block Specification -
Transaction format •
Block format •
Genesis block ++
References_




## Blockchain (Lite) Crypto Hash Libraries

[Ruby](#ruby) •
[JavaScript](#javascript)


### Ruby

**blockchain.lite** (github: [openblockchains/blockchain.lite.rb](https://github.com/openblockchains/blockchain.lite.rb),
gem: [blockchain-lite](https://rubygems.org/gems/blockchain-lite)) -
build your own blockchain with crypto hashes -
revolutionize the world with blockchains, blockchains, blockchains one block at a time

```ruby
require 'blockchain-lite'

b0 = Block.first( ""Genesis"" )
b1 = Block.next( b0, ""Transaction Data..."" )
b2 = Block.next( b1, ""Transaction Data......"" )
b3 = Block.next( b2, ""More Transaction Data..."" )

blockchain = [b0, b1, b2, b3]

pp blockchain
```

will pretty print (pp) something like:

```
[#<Block:0x1eed2a0
  @timestamp     = 1637-09-15 20:52:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @hash          = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
 #<Block:0x1eec9a0
  @timestamp     = 1637-09-15 21:02:38,
  @data          = ""Transaction Data..."",
  @hash          = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"",
  @previous_hash = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
  ...
```


### JavaScript

**blockchain.lite** (github: [openblockchains/blockchain.lite.js](https://github.com/openblockchains/blockchain.lite.js),
npm: [blockchain-lite](https://www.npmjs.com/package/blockchain-lite)) -
build your own blockchain with crypto hashes -
revolutionize the world with blockchains, blockchains, blockchains one block at a time

```js
const Blocks = require( ""blockchain-lite"" )

// use basic block
let Block = Blocks.basic

let b0 = Block.first( 'Genesis' )
let b1 = Block.next( b0, 'Transaction Data...' )
let b2 = Block.next( b1, 'Transaction Data......' )
let b3 = Block.next( b2, 'More Transaction Data...' )

let blockchain = [b0, b1, b2, b3]

console.log( blockchain )
```

will log something like:

```
[ Block {
    timestamp:     2017-09-25 17:03:38,
    data:         'Genesis',
    previousHash: '0000000000000000000000000000000000000000000000000000000000000000',
    hash:         '08f4fa71628c5bc6b430228738bc8c41afaf508ece0b1cf9c9cac53d02e11829' },
  Block {
    timestamp:     2017-09-25 17:13:38,
    data:         'Transaction Data...',
    previousHash: '08f4fa71628c5bc6b430228738bc8c41afaf508ece0b1cf9c9cac53d02e11829',
    hash:         '740a4aeb3441484c96d1e7f63d31b716220ccee3b6fe94547cae2afbb6010626' },
  Block {
    timestamp:     2017-09-25 17:23:38,
    data:         'Transaction Data......',
    previousHash: '740a4aeb3441484c96d1e7f63d31b716220ccee3b6fe94547cae2afbb6010626',
    hash:         '28b6892a069e2ff7f1c3128ab495d7cd9b9b1636a51a7f69db93a14b1ee6b1a7' },
  Block {
    timestamp:     2017-09-25 17:33:38,
    data:         'More Transaction Data...',
    previousHash: '28b6892a069e2ff7f1c3128ab495d7cd9b9b1636a51a7f69db93a14b1ee6b1a7',
    hash:         '4cc0329b2c0cb32e0451fa3179bd944d4cd0fcf410939172f979e9fd2aa9f5f3' } ]
```


## Git, Git, Git - The Stupid Content Tracker with Crypto Hashes

_Everything is local. Distributed is the new centralized._

![](i/xkcd1597.png)


### Quotes - Blockchains and Git

> Yep, that's the joke. Nobody has been able to explain to me how the ""blockchain"" buzzword is significantly different to ""git repo"".
> -- [Yaakov](https://twitter.com/yaakov_h/status/902659507255312384)
>
> But if you said ""let's build a currency where all transactions are stored in a git repo""
> you wouldn't be taken seriously for even 24 hrs.
> -- [Yaakov](https://twitter.com/yaakov_h/status/902659847224664064)

> Soon explaining git like ""a git repo is like a blockchain with commits instead of blocks"".
> -- [Nicolás Berger](https://twitter.com/nicoberger/status/901776907418697729)
>
> ""A local branch is like a state channel. It can be pushed and merged into the master blockchain at any moment.""
> -- [Nicolás Berger](https://twitter.com/nicoberger/status/901777571456614400)

> The #Blockchain has changed the world. Here I make the argument that the #Blockchain is just like #git.
> -- [Jackson Kelley](https://twitter.com/sjkelleyjr/status/901464041163341824)

> `git merge [-m REF] [-g BLOB] --push`
>  Merge and push all signed commits to the blockchain.
> -- [Git Commands](https://twitter.com/git_commands/status/935574015015612416)


### Books

[**Learn Enough Git to Be Dangerous**](https://learnenough.com/git-tutorial) by Michael Hartl - FREE (Online Version) --
_Getting started ++
Backing up and sharing ++
Intermediate workflow ++
Collaborating ++
Conclusion ++
Advanced setup_


[**Pro Git**](https://git-scm.com/book) by Scott Chacon and Ben Straub, 2nd Edition, 2014 - FREE (Online Version) --
_Getting Started ++
Git Basics ++
Git Branching ++
Git on the Server ++
Distributed Git ++
GitHub ++
Git Tools ++
Customizing Git ++
Git and Other Systems ++
Git Internals ++
A1: Git in Other Environments ++
A2: Embedding Git in your Applications ++
A3: Git Commands_


> Git gets easier once you get the basic idea that branches are homeomorphic endofunctors
> mapping submanifolds of a Hilbert space.
> -- Anonymous


### Open Distributed Databases on Git

[**football.db**](https://github.com/openfootball) - open public domain football datasets (incl. clubs, national teams, leagues, match schedules, etc.)

[**world.db**](https://github.com/openmundi) - open public domain world (country) datasets

[**beer.db**](https://github.com/openbeer) - open public domain beer & brewery datasets

> Add a beer transaction to the #blockchain on #git and win a free Wiener Lager beer! Cheers. Prost.
> -- [Gerald Bauer @ Austria Codes](https://twitter.com/austriacodes/status/907240018435088384)



### Open Distributed (Hyper) Ledger Books on Git

[**Shilling (or Schilling)**](https://github.com/bitshilling/bitshilling) - Shilling on the Blockchain! - Rock-Solid Alpine Dollar from Austria

[**Tulips**](TULIPS.md) - Tulips on the Blockchain! - Learn by Example from the Real World (Anno 1637) - Buy! Sell! Hold! Enjoy the Beauty of Admiral of Admirals, Semper Augustus, and More



## Classic Tulip Mania

_A period in the Dutch Golden Age during which contract prices for bulbs of the recently introduced tulip reached extraordinarily high levels and then dramatically collapsed in February 1637._

![](i/tulipmania-ii.png)


### Quotes - Blockchains are the next Internets / Tulips

> People who compare digital tokens to tulips are essentially saying digital tokens are a bubble backed
> by nothing but pure hype and speculation.
>
> What they fail to understand is that tulips come from dirt, not a blockchain.
>
> And as we all know, blockchain is possibly the best technological innovation since the internet.
> It will have a tremendous impact on global business and society in general.
> -- [TulipToken](http://tuliptoken.com)


### Books

**Tulipomania: The Story of the World's Most Coveted Flower & the Extraordinary Passions It Aroused** by Mike Dash, 2001 --
_A Mania for Tulips ++
The Valley of Tien Shan ++
Within the Abode of Bliss ++
Stranger from the East ++
Clusius ++
Leiden ++
An Adornment to the Cleavage ++
The Tulip in the Mirror ++
Florists ++
Boom ++
At the Sign of the Golden Grape ++
The Orphans of Wouter Winkel ++
Bust ++
Goddess of Whores ++
At the Court of the Tulip King ++
Late Flowering_

**Tulipmania: Money, Honor, and Knowledge in the Dutch Golden Age** by Anne Goldgar, 2007  --
_Something Strange ++
Art & Flowers ++
Bloemisten ++
Grieving Money ++
Bad Faith ++
Cabbage Fever ++
Glossary ++
A Note on Money_

![](i/tulipmania.png)


## Breaking News: CryptoKitties (Yes, Cute Little Cartoon Cats) on the Blockchain!

Collectible. Breedable. Adorable.

Collect and breed digital cats. Start meow. Buy! Sell! Hold!

Learn more @ [cryptokitties.co](https://cryptokitties.co)


![](i/cryptokitties-top10-sales.png)


<!-- note: changed pic; was:
   ![](i/cryptokitties.png)
  -->

Latest (and Greatest) Investment Opportunity!

> Blockchain has unlocked the magic of digital scarcity, and combining that with the power of
> making the digital goods persistent gives them a potential value that is only limited by how much
> prestige a wealthy person might place on ownership of the item.
>
> -- [Justin Poirier](https://twitter.com/tokenizedcap/status/938460753589424128)‏

> All I want for Christmas is a CryptoKitty.
>
> -- [Kayla Williams](https://twitter.com/kaylaw/status/938590748655550464)

> I got a fever. And the only prescription is more CryptoKitties.
>
> -- [Eduardo Salazar](https://twitter.com/ceduardosalazar/status/938558630663634944)

> My Gen 7 CryptoKitty #104375. The Future is Meow.
>
> -- [Anshul Dhawan](https://twitter.com/TheAnshulDhawan/status/938551642202324993)


![](i/cryptokitties-genes01.png)

> - Fabulous Persian Spock Gerbil Gold Cottoncandy - Extremely rare gen 5 swift virgin | 2.9 ETH
> - Rarity: 0.00264% Gen 5 JAGUAR FABULOUS GOLD DALI!! VIRGIN!
> - Rarity: 0.0015% Princess Bubblegum is now for sale! Gen 12 | Brisk | Virgin | Chartreux | Bubblegum | Otaku | Emeraldgreen | Saycheese | Mauveover | Spock - Starts ETH 20/Ends ETH 10
> - Gold ducat, Gen 5, Virgin, Swift. Very cheap
> - Cheap Gen 1 cute kittie with rare genes! Only 0.125 ETH
> - UNIQUE Virgin Peach Googly Gold Mauveover gen:2 cooldown:1 0.87992% RARE
> - SUPER CHEAP: Gerbil, Ragdoll, Scarlet, Chestnut, Cotton Candy!!! 0.02 ETH (~$14)
> - I'm giving away a Gen 1 FAST Gold for free...
>
> -- [CrypoKittiesMarket](https://www.reddit.com/r/CryptoKittiesMarket)

### Awesome CryptoKitties (and CryptoCopycats)

![](i/cryptokitties-modernart-paintings.png)

A collection about Awesome CryptoKitties (Yes, Cute Little Cartoon Cats) on the Blockchain! and CryptoCopycats - digital collectibles secured on a distributed public databases w/ crypto hashes. Are CryptoPuppies the new CryptoKitties? Learn by Example from the Real World (Anno 2017) - Buy! Sell! Hodl!

More @ [cryptocopycats/awesome-cryptokitties](https://github.com/cryptocopycats/awesome-cryptokitties)

![](i/cryptokitties-modernart-paintings-iii.png)



## Events, Meetups, Orgs

_Revolutionize the world one country at a time. Blockchainers of the world, unite!_

- [**Blockchain Austria • Blockkette Österreich**](https://github.com/austriacodes/blockchain-austria) -- distributed centralized page for blockchain meetups & orgs in Austria (Central Europe)



## Awesome Awesomeness

_A curated list of awesome lists._

- [**Blockchain Stuff**](https://github.com/Xel/Blockchain-stuff) -- a curated list of blockchain and general cryptocurrency resources
- [**Awesome Blockchain**](https://github.com/igorbarinov/awesome-blockchain) by Igor Barinov et al -- a curated list of the bitcoin blockchain services
- [**Awesome Blockchain**](https://github.com/imbaniac/awesome-blockchain) by Tim Reznich et al -- a curated list of blockchain services and exchanges
- [**Awesome Blockchain**](https://github.com/istinspring/awesome-blockchain) by `istinspring` et al -- a curated list of awesome projects and services based on blockchain technology
- [**Awesome Coins**](https://github.com/kennethreitz/awesome-coins) by Kenneth Reitz et al -- a guide to crypto-currencies and their algos
- [**Awesome CryptoKitties (and CryptoCopycats)**](https://github.com/openblockchains/awesome-cryptokitties) by Gerald Bauer et al -- a curated list about the awesome crypto kitties and copycats
- [**Awesome Git**](https://github.com/dictcp/awesome-git) by Dick Tang et al -- a curated list of amazingly awesome Git tools, resources and shiny things
- [**Awesome**](https://github.com/sindresorhus/awesome) by Sindre Sorhus et al -- a curated list of awesome lists




## Meta

**License**

![](https://publicdomainworks.github.io/buttons/zero88x31.png)

The awesome list is dedicated to the public domain. Use it as you please with no restrictions whatsoever.
","The Open Blockchains Book of the Year 2020 Award Goes To... The Libra Shrugged:
How Facebook Tried to Take Over the Money. The book is a collection about
awesome blockchains - open distributed databases w/ crypto hashes incl. git ;-).
Blockchains are the new tulips :tulip::tulips::Tulip:."
2206,"Driver for SSD1306, SSD1331, SSD1351, IL9163, ILI9341, ST7735, PCD8544, Nokia 5110 displays running on Arduino/ESP32/Linux (Rasperry) platforms","_**Check also new C++ library [lcdgfx](https://github.com/lexus2k/lcdgfx). It consumpts less memory, has simple C++ api**_
***

# SSD1306/SSD1331/SSD1351/IL9163/ILI9341/ST7735/ILI9341 OLED display driver, PCD8544 LED display driver

[tocstart]: # (toc start)

  * [Introduction](#introduction)
  * [Key Features](#key-features)
  * [Supported displays](#supported-displays)
  * [Supported platforms](#supported-platforms)
  * [Setting up](#setting-up)
  * [License](#license)

[tocend]: # (toc end)


## Introduction

SSD1306 driver is Arduino style C/C++ library with unicode support. The library can be compiled for plain Linux
(for example, raspberry spi), or you can use it with plain avr-gcc compiler without Arduino IDE. It supports
monochrome and RGB oleds and has debug mode, allowing to execute code on PC, using SDL2.0.
Initially the library is intended for very small microcontrollers (with a little of RAM). It was developed to use as
few resources as possible, but still has powerful capabilities (NanoEngine), allowing to develop nice animation.
It works on any powerful devices like raspberry pi, esp32; and can be easily ported to new platform.

You can find the online simulation for one of the examples from the library [here](https://wokwi.com/arduino/libraries/ssd1306/draw_bitmap) 

## Key Features

 * Supports color, monochrome OLED displays, and VGA monitor
 * The library has modular structure, and some modules can be excluded from compilation at all to reduce flash usage.
 * Needs very little RAM (Attiny85 with Damellis package needs minimum 25 bytes of RAM to communicate with OLED)
 * Fast implementation to provide reasonable speed on slow microcontrollers
 * Supports i2c and spi interfaces:
   * i2c (software implementation, Wire library, AVR Twi, Linux i2c-dev)
   * spi (4-wire spi via Arduino SPI library, AVR Spi, AVR USI module)
 * Primitive graphics functions (lines, rectangles, pixels, bitmaps)
 * Printing text to display (using fonts of different size, you can use GLCD Font Creator to create new fonts)
 * Includes [graphics engine](https://github.com/lexus2k/ssd1306/wiki/Using-NanoEngine-for-systems-with-low-resources) to support
   double buffering on tiny microcontrollers.
 * Can be used for game development (bonus examples):
   * Arkanoid game ([arkanoid](examples/games/arkanoid) in old style API and [arkanoid8](examples/games/arkanoid8) in new style API)
   * Simple [Lode runner](examples/games/lode_runner) game.
   * [Snowflakes](examples/nano_engine/snowflakes)

![Image of arkanoid intro](imgs/arkanoid.png)
![Image of lode runner](imgs/lode_runner.gif)

![Image of menu example](imgs/mainmenu_top.png)
![Image of color oled](imgs/fonts.png)

The i2c pins can be changed via API functions. Please, refer to documentation. Keep in mind,
that the pins, which are allowed for i2c or spi interface, depend on the hardware.
The default spi SCLK and MOSI pins are defined by SPI library, and DC, RST, CES pins are configurable
through API.

## Supported displays:

| **Display** | **I2C** | **SPI** | **Orientation** | **Comments** |
| :-------- |:---:|:---:|:---:|:---------|
| sh1106 128x64 | X |   |   |   |
| ssd1306 128x64 | X | X |   |   |
| ssd1306 128x32 | X | X |   |   |
| ssd1325 128x64 |   | X |   |   |
| ssd1327 128x128 |   | X |   |   |
| ssd1331 96x64 |   | X | X |   |
| ssd1351 128x128 |   | X |   |   |
| il9163 128x128 |   | X | X |   |
| st7735 128x160 |   | X | X |   |
| ili9341 240x320 |   | X | X |    |
| pcd8544 84x48 |   | X  |   | Nokia 5110 |
| vga 96x40 color |   |   |   | direct D-sub output, atmega328p only |
| vga 128x64 bw |   |   |   | direct D-sub output, atmega328p only |

## Supported platforms

| **Platforms** | **I2C** | **SPI** | **Comments** |
| :-------- |:---:|:---:|:---------|
| **Arduino** |     |     |          |
| Attiny85, Attiny45  |  X  |  X  | Refer to [Damellis attiny package](https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json) |
| Attiny84, Attiny44  |  X  |  X  | Refer to [Damellis attiny package](https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json) |
| Atmega328p, Atmega168  |  X  |  X  |    |
| Atmega32u4  |  X  |  X  |    |
| Atmega2560  |  X  |  X  |    |
| Digispark, including PRO version  |  X  |  X  |  check [examples compatibility list](examples/Digispark_compatibility.txt)  |
| ESP8266  |  X  |  X  | check [examples compatibility list](examples/ESP8266_compatibility.txt)   |
| ESP32  |  X  |  X  | check [examples compatibility list](examples/ESP8266_compatibility.txt)   |
| STM32  |  X  |  X  | [stm32duino](https://github.com/stm32duino/wiki/wiki)  |
| Arduino Zero | X  | X  |    |
| Nordic nRF5 (nRF51, nRF52) | X | X | via Standard Arduino nRF52 boards. nRF users, enable c++11 in platform.txt `-std=gnu++11` |
| Nordic nRF5 (nRF51, nRF52) | X | X | via [Sandeep Mistry arduino-nRF5](https://github.com/sandeepmistry/arduino-nRF5) package |
| **Plain AVR** |   |     |          |
| Attiny85, Attiny45 |  X  |  X  |         |
| Atmega328p, Atmega168 |  X  |  X  |         |
| Atmega32u4  |  X  |  X  |    |
| **ESP32-IDF** |   |     |          |
| ESP32 |  X  | X  |  library can be used as IDF component  |
| **Linux**  |    |     |          |
| Raspberry Pi |  X  |  X  | i2c-dev, spidev, sys/class/gpio  |
| [SDL Emulation](https://github.com/lexus2k/ssd1306/wiki/How-to-run-emulator-mode) |  X  |  X  | demo code can be run without real OLED HW via SDL library |
| **Windows**  |    |     |          |
| [SDL Emulation](https://github.com/lexus2k/ssd1306/wiki/How-to-run-emulator-mode) |  X  |  X  | demo code can be run without real OLED HW via MinGW32 + SDL library |
| **Energia**  |    |     |          |
| MSP432P401R |  X  |  X  |  |

Digispark users, please check compilation options in your Arduino prior to using this library.
Ssd1306 library requires at least c++11 and c99 (by default Digispark package misses the options
-std=gnu11, -std=gnu++11).

## The goals of ssd1306 library

 * To use as few RAM as possible
 * To use as few Flash as possible
 * To be as fast as possible
 * To fit [Arkanoid game example](examples/games/arkanoid) to Attiny85 microcontroller

## Setting up

*i2c Hardware setup is described [here](https://github.com/lexus2k/ssd1306/wiki/Hardware-setup)*

*Setting up for Arduino from github sources)*
 * Download source from https://github.com/lexus2k/ssd1306
 * Put the sources to Arduino/libraries/ssd1306/ folder

*Setting up for Arduino from Arduino IDE library manager*
 * Install ssd1306 library (named ssd1306 by Alexey Dynda) via Arduino IDE library manager

*Using with plain avr-gcc:*
 * Download source from https://github.com/lexus2k/ssd1306
 * Build the library (variant 1)
   * cd ssd1306/src && make -f Makefile.avr MCU=<your_mcu>
   * Link library to your project (refer to [Makefile.avr](examples/Makefile.avr) in examples folder).
 * Build demo code (variant 2)
   * cd ssd1306/tools && ./build_and_run.sh -p avr -m <your_mcu> demos/ssd1306_demo

 *For esp32:*
  * Download source from https://github.com/lexus2k/ssd1306
  * Put downloaded sources to components/ssd1306/ folder.
  * Compile your project as described in ESP-IDF build system documentation

For more information about this library, please, visit https://github.com/lexus2k/ssd1306.
Doxygen documentation can be found at [github.io site](http://lexus2k.github.io/ssd1306).
If you found any problem or have any idea, please, report to Issues section.

## License

The library is free. If this project helps you, you can give me a cup of coffee.

MIT License

Copyright (c) 2016-2021, Alexey Dynda

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


","SSD1306 driver is Arduino style C/C++ library with unicode support. It was
developed to use as few resources as possible, but still has powerful
capabilities (NanoEngine) It works on any powerful devices like raspberry pi,
esp32; and can be easily ported to new platform. It supports color, monochrome
OLED displays, and VGA monitor. The library has modular structure, and some
modules can be excluded from compilation at all to reduce flash usage. The
default spi SCLK and MOSI pins are defined by SPI library. DC, RST, CES pins are
configurable through API."
1252,Apache Cordova Plugin inappbrowser,"---
title: Inappbrowser
description: Open an in-app browser window.
---
<!--
# license: Licensed to the Apache Software Foundation (ASF) under one
#         or more contributor license agreements.  See the NOTICE file
#         distributed with this work for additional information
#         regarding copyright ownership.  The ASF licenses this file
#         to you under the Apache License, Version 2.0 (the
#         ""License""); you may not use this file except in compliance
#         with the License.  You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
#         Unless required by applicable law or agreed to in writing,
#         software distributed under the License is distributed on an
#         ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#         KIND, either express or implied.  See the License for the
#         specific language governing permissions and limitations
#         under the License.
-->


# cordova-plugin-inappbrowser

[![Android Testsuite](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/android.yml/badge.svg)](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/android.yml) [![Chrome Testsuite](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/chrome.yml/badge.svg)](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/chrome.yml) [![iOS Testsuite](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/ios.yml/badge.svg)](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/ios.yml) [![Lint Test](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/lint.yml/badge.svg)](https://github.com/apache/cordova-plugin-inappbrowser/actions/workflows/lint.yml)

You can show helpful articles, videos, and web resources inside of your app. Users can view web pages without leaving your app.

> To get a few ideas, check out the [sample](#sample) at the bottom of this page or go straight to the [reference](#reference) content.

This plugin provides a web browser view that displays when calling `cordova.InAppBrowser.open()`.

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');

### `window.open`

The `cordova.InAppBrowser.open()` function is defined to be a drop-in replacement
for the `window.open()` function.  Existing `window.open()` calls can use the
InAppBrowser window, by replacing window.open:

    window.open = cordova.InAppBrowser.open;

If you change the browsers `window.open` function this way, it can have unintended side
effects (especially if this plugin is included only as a dependency of another
plugin).

The InAppBrowser window behaves like a standard web browser,
and can't access Cordova APIs. For this reason, the InAppBrowser is recommended
if you need to load third-party (untrusted) content, instead of loading that
into the main Cordova webview. The InAppBrowser is not subject to the
whitelist, nor is opening links in the system browser.

The InAppBrowser provides by default its own GUI controls for the user (back,
forward, done).

## Installation

    cordova plugin add cordova-plugin-inappbrowser

If you want all page loads in your app to go through the InAppBrowser, you can
simply hook `window.open` during initialization.  For example:

    document.addEventListener(""deviceready"", onDeviceReady, false);
    function onDeviceReady() {
        window.open = cordova.InAppBrowser.open;
    }

### Preferences

#### <b>config.xml</b>
- <b>InAppBrowserStatusBarStyle [iOS only]</b>: (string, options 'lightcontent', 'darkcontent' or 'default'. Defaults to 'default') set text color style for iOS. 'lightcontent' is intended for use on dark backgrounds. 'darkcontent' is only available since iOS 13 and intended for use on light backgrounds.
```xml
<preference name=""InAppBrowserStatusBarStyle"" value=""lightcontent"" />
```

## cordova.InAppBrowser.open

Opens a URL in a new `InAppBrowser` instance, the current browser
instance, or the system browser.

    var ref = cordova.InAppBrowser.open(url, target, options);

- __ref__: Reference to the `InAppBrowser` window when the target is set to `'_blank'`. _(InAppBrowser)_

- __url__: The URL to load _(String)_. Call `encodeURI()` on this if the URL contains Unicode characters.

- __target__: The target in which to load the URL, an optional parameter that defaults to `_self`. _(String)_

    - `_self`: Opens in the Cordova WebView if the URL is in the white list, otherwise it opens in the `InAppBrowser`.
    - `_blank`: Opens in the `InAppBrowser`.
    - `_system`: Opens in the system's web browser.

- __options__: Options for the `InAppBrowser`. Optional, defaulting to: `location=yes`. _(String)_

    The `options` string must not contain any blank space, and each feature's name/value pairs must be separated by a comma. Feature names are case insensitive.

    All platforms support:

    - __location__: Set to `yes` or `no` to turn the `InAppBrowser`'s location bar on or off.

    Android supports these additional options:

    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
    - __beforeload__: set to enable the `beforeload` event to modify which pages are actually loaded in the browser. Accepted values are `get` to intercept only GET requests, `post` to intercept on POST requests or `yes` to intercept both GET & POST requests. Note that POST requests are not currently supported and will be ignored (if you set `beforeload=post` it will raise an error).
    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened
    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened
    - __closebuttoncaption__: set to a string to use as the close button's caption instead of a X. Note that you need to localize this value yourself.
    - __closebuttoncolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the
    close button color from default, regardless of being a text or default X. Only has effect if user has location set to `yes`.
    - __footer__: set to `yes` to show a close button in the footer similar to the iOS __Done__ button. 
    The close button will appear the same as for the header hence use __closebuttoncaption__ and __closebuttoncolor__ to set its properties.
    - __footercolor__: set to a valid hex color string, for example `#00ff00` or `#CC00ff00` (`#aarrggbb`) , and it will change the footer color from default.
    Only has effect if user has __footer__ set to `yes`.
    - __hardwareback__: set to `yes` to use the hardware back button to navigate backwards through the `InAppBrowser`'s history. If there is no previous page, the `InAppBrowser` will close.  The default value is `yes`, so you must set it to `no` if you want the back button to simply close the InAppBrowser.
    - __hidenavigationbuttons__: set to `yes` to hide the navigation buttons on the location toolbar, only has effect if user has location set to `yes`. The default value is `no`.
    - __hideurlbar__: set to `yes` to hide the url bar on the location toolbar, only has effect if user has location set to `yes`. The default value is `no`.
    - __navigationbuttoncolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the color of both navigation buttons from default. Only has effect if user has location set to `yes` and not hidenavigationbuttons set to `yes`.
    - __toolbarcolor__: set to a valid hex color string, for example: `#00ff00`, and it will change the color the toolbar from default. Only has effect if user has location set to `yes`.
    - __lefttoright__: Set to `yes` to swap positions of the navigation buttons and the close button. Specifically, navigation buttons go to the right and close button to the left. Default value is `no`.
    - __zoom__: set to `yes` to show Android browser's zoom controls, set to `no` to hide them.  Default value is `yes`.
    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).
    - __shouldPauseOnSuspend__: Set to `yes` to make InAppBrowser WebView to pause/resume with the app to stop background audio (this may be required to avoid Google Play issues like described in [CB-11013](https://issues.apache.org/jira/browse/CB-11013)).
    - __useWideViewPort__: Sets whether the WebView should enable support for the ""viewport"" HTML meta tag or should use a wide viewport. When the value of the setting is `no`, the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is `yes` and the page contains the viewport meta tag, the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width, then a wide viewport will be used. (defaults to `yes`).
    - __fullscreen__: Sets whether the InappBrowser WebView is displayed fullscreen or not. In fullscreen mode, the status bar is hidden. Default value is `yes`.

    iOS supports these additional options:

    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
    - __beforeload__: set to enable the `beforeload` event to modify which pages are actually loaded in the browser. Accepted values are `get` to intercept only GET requests, `post` to intercept on POST requests or `yes` to intercept both GET & POST requests. Note that POST requests are not currently supported and will be ignored (if you set `beforeload=post` it will raise an error).
    - __clearcache__: set to `yes` to have the browser's cookie cache cleared before the new window is opened
    - __clearsessioncache__: set to `yes` to have the session cookie cache cleared before the new window is opened. For WKWebView, requires iOS 11+ on target device.
    - __cleardata__: set to `yes` to have the browser's entire local storage cleared (cookies, HTML5 local storage, IndexedDB, etc.) before the new window is opened
    - __closebuttoncolor__: set as a valid hex color string, for example: `#00ff00`, to change from the default __Done__ button's color. Only applicable if toolbar is not disabled.
    - __closebuttoncaption__: set to a string to use as the __Done__ button's caption. Note that you need to localize this value yourself.
    - __disallowoverscroll__: Set to `yes` or `no` (default is `no`). Turns on/off the the bounce of the WKWebView's UIScrollView.
    - __hidenavigationbuttons__:  set to `yes` or `no` to turn the toolbar navigation buttons on or off (defaults to `no`). Only applicable if toolbar is not disabled.
    - __navigationbuttoncolor__:  set as a valid hex color string, for example: `#00ff00`, to change from the default color. Only applicable if navigation buttons are visible.
    - __toolbar__:  set to `yes` or `no` to turn the toolbar on or off for the InAppBrowser (defaults to `yes`)
    - __toolbarcolor__: set as a valid hex color string, for example: `#00ff00`, to change from the default color of the toolbar. Only applicable if toolbar is not disabled.
    - __toolbartranslucent__:  set to `yes` or `no` to make the toolbar translucent(semi-transparent)  (defaults to `yes`). Only applicable if toolbar is not disabled.
    - __lefttoright__: Set to `yes` to swap positions of the navigation buttons and the close button. Specifically, close button goes to the right and navigation buttons to the left.
    - __enableViewportScale__:  Set to `yes` or `no` to prevent viewport scaling through a meta tag (defaults to `no`).
    - __mediaPlaybackRequiresUserAction__: Set to `yes` to prevent HTML5 audio or video from autoplaying (defaults to `no`).
    - __allowInlineMediaPlayback__: Set to `yes` or `no` to allow in-line HTML5 media playback, displaying within the browser window rather than a device-specific playback interface. The HTML's `video` element must also include the `webkit-playsinline` attribute (defaults to `no`).
    - __presentationstyle__:  Set to `pagesheet`, `formsheet` or `fullscreen` to set the [presentation style](https://developer.apple.com/documentation/uikit/uimodalpresentationstyle) (defaults to `fullscreen`).
    - __transitionstyle__: Set to `fliphorizontal`, `crossdissolve` or `coververtical` to set the [transition style](https://developer.apple.com/documentation/uikit/uimodaltransitionstyle) (defaults to `coververtical`).
    - __toolbarposition__: Set to `top` or `bottom` (default is `bottom`). Causes the toolbar to be at the top or bottom of the window.
    - __hidespinner__: Set to `yes` or `no` to change the visibility of the loading indicator (defaults to `no`).

    Windows supports these additional options:

    - __hidden__: set to `yes` to create the browser and load the page, but not show it. The loadstop event fires when loading is complete. Omit or set to `no` (default) to have the browser open and load normally.
    - __hardwareback__: works the same way as on Android platform.
    - __fullscreen__: set to `yes` to create the browser control without a border around it. Please note that if __location=no__ is also specified, there will be no control presented to user to close IAB window.


### Supported Platforms

- Android
- Browser
- iOS
- OSX
- Windows

### Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    var ref2 = cordova.InAppBrowser.open(encodeURI('http://ja.m.wikipedia.org/wiki/ハングル'), '_blank', 'location=yes');

### OSX Quirks

At the moment the only supported target in OSX is `_system`.

`_blank` and `_self` targets are not yet implemented and are ignored silently. Pull requests and patches to get these to work are greatly appreciated.

### iOS Quirks

Since the introduction of iPadOS 13, iPads try to adapt their content mode / user agent for the optimal browsing experience. This may result in iPads having their user agent set to Macintosh, making it hard to detect them as mobile devices using user agent string sniffing. You can change this with the `PreferredContentMode` preference in `config.xml`.

```xml
<preference name=""PreferredContentMode"" value=""mobile"" />
```

The example above forces the user agent to contain `iPad`. The other option is to use the value `desktop` to turn the user agent to `Macintosh`.

### Browser Quirks

- Plugin is implemented via iframe,

- Navigation history (`back` and `forward` buttons in LocationBar) is not implemented.

## InAppBrowser

The object returned from a call to `cordova.InAppBrowser.open` when the target is set to `'_blank'`.

### Methods

- addEventListener
- removeEventListener
- close
- show
- hide
- executeScript
- insertCSS

## InAppBrowser.addEventListener

> Adds a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)

    ref.addEventListener(eventname, callback);

- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_

- __eventname__: the event to listen for _(String)_

  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.
  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.
  - __loaderror__: event fires when the `InAppBrowser` encounters an error when loading a URL.
  - __exit__: event fires when the `InAppBrowser` window is closed.
  - __beforeload__: event fires when the `InAppBrowser` decides whether to load an URL or not (only with option `beforeload` set).
  - __message__: event fires when the `InAppBrowser` receives a message posted from the page loaded inside the `InAppBrowser` Webview.

- __callback__: the function that executes when the event fires. The function is passed an `InAppBrowserEvent` object as a parameter.

## Example

```javascript

var inAppBrowserRef;

function showHelp(url) {

    var target = ""_blank"";

    var options = ""location=yes,hidden=yes,beforeload=yes"";

    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);

    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);

    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);

    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);

    inAppBrowserRef.addEventListener('beforeload', beforeloadCallBack);

    inAppBrowserRef.addEventListener('message', messageCallBack);
}

function loadStartCallBack() {

    $('#status-message').text(""loading please wait ..."");

}

function loadStopCallBack() {

    if (inAppBrowserRef != undefined) {

        inAppBrowserRef.insertCSS({ code: ""body{font-size: 25px;}"" });

        inAppBrowserRef.executeScript({ code: ""\
            var message = 'this is the message';\
            var messageObj = {my_message: message};\
            var stringifiedMessageObj = JSON.stringify(messageObj);\
            webkit.messageHandlers.cordova_iab.postMessage(stringifiedMessageObj);""
        });

        $('#status-message').text("""");

        inAppBrowserRef.show();
    }

}

function loadErrorCallBack(params) {

    $('#status-message').text("""");

    var scriptErrorMesssage =
       ""alert('Sorry we cannot open that page. Message from the server is : ""
       + params.message + ""');""

    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);

    inAppBrowserRef.close();

    inAppBrowserRef = undefined;

}

function executeScriptCallBack(params) {

    if (params[0] == null) {

        $('#status-message').text(
           ""Sorry we couldn't open that page. Message from the server is : '""
           + params.message + ""'"");
    }

}

function beforeloadCallBack(params, callback) {

    if (params.url.startsWith(""http://www.example.com/"")) {

        // Load this URL in the inAppBrowser.
        callback(params.url);
    } else {

        // The callback is not invoked, so the page will not be loaded.
        $('#status-message').text(""This browser only opens pages on http://www.example.com/"");
    }

}

function messageCallBack(params){
    $('#status-message').text(""message received: ""+params.data.my_message);
}

```

### InAppBrowserEvent Properties

- __type__: the eventname, either `loadstart`, `loadstop`, `loaderror`, `message` or `exit`. _(String)_

- __url__: the URL that was loaded. _(String)_

- __code__: the error code, only in the case of `loaderror`. _(Number)_

- __message__: the error message, only in the case of `loaderror`. _(String)_

- __data__: the message contents , only in the case of `message`. A stringified JSON object. _(String)_


### Supported Platforms

- Android
- Browser
- iOS
- Windows
- OSX

### Browser Quirks

`loadstart`, `loaderror`, `message` events are not fired.

### Windows Quirks

`message` event is not fired.

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    ref.addEventListener('loadstart', function(event) { alert(event.url); });

## InAppBrowser.removeEventListener

> Removes a listener for an event from the `InAppBrowser`. (Only available when the target is set to `'_blank'`)

    ref.removeEventListener(eventname, callback);

- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_

- __eventname__: the event to stop listening for. _(String)_

  - __loadstart__: event fires when the `InAppBrowser` starts to load a URL.
  - __loadstop__: event fires when the `InAppBrowser` finishes loading a URL.
  - __loaderror__: event fires when the `InAppBrowser` encounters an error loading a URL.
  - __exit__: event fires when the `InAppBrowser` window is closed.
  - __message__: event fires when the `InAppBrowser` receives a message posted from the page loaded inside the `InAppBrowser` Webview.

- __callback__: the function to execute when the event fires.
The function is passed an `InAppBrowserEvent` object.

### Supported Platforms

- Android
- Browser
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    var myCallback = function(event) { alert(event.url); }
    ref.addEventListener('loadstart', myCallback);
    ref.removeEventListener('loadstart', myCallback);

## InAppBrowser.close

> Closes the `InAppBrowser` window.

    ref.close();

- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_

### Supported Platforms

- Android
- Browser
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    ref.close();

## InAppBrowser.show

> Displays an InAppBrowser window that was opened hidden. Calling this has no effect if the InAppBrowser was already visible.

    ref.show();

- __ref__: reference to the InAppBrowser window (`InAppBrowser`)

### Supported Platforms

- Android
- Browser
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'hidden=yes');
    // some time later...
    ref.show();

## InAppBrowser.hide

> Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden.

    ref.hide();

- __ref__: reference to the InAppBrowser window (`InAppBrowser`)

### Supported Platforms

- Android
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank');
    // some time later...
    ref.hide();

## InAppBrowser.executeScript

> Injects JavaScript code into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)

    ref.executeScript(details, callback);

- __ref__: reference to the `InAppBrowser` window. _(InAppBrowser)_

- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_
  - __file__: URL of the script to inject.
  - __code__: Text of the script to inject.

- __callback__: the function that executes after the JavaScript code is injected.
    - If the injected script is of type `code`, the callback executes
      with a single parameter, which is the return value of the
      script, wrapped in an `Array`. For multi-line scripts, this is
      the return value of the last statement, or the last expression
      evaluated.

### Supported Platforms

- Android
- Browser
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    ref.addEventListener('loadstop', function() {
        ref.executeScript({file: ""myscript.js""});
    });

### Browser Quirks

- only __code__ key is supported.

### Windows Quirks

Due to [MSDN docs](https://msdn.microsoft.com/en-us/library/windows.ui.xaml.controls.webview.invokescriptasync.aspx) the invoked script can return only string values, otherwise the parameter, passed to __callback__ will be `[null]`.

## InAppBrowser.insertCSS

> Injects CSS into the `InAppBrowser` window. (Only available when the target is set to `'_blank'`)

    ref.insertCSS(details, callback);

- __ref__: reference to the `InAppBrowser` window _(InAppBrowser)_

- __injectDetails__: details of the script to run, specifying either a `file` or `code` key. _(Object)_
  - __file__: URL of the stylesheet to inject.
  - __code__: Text of the stylesheet to inject.

- __callback__: the function that executes after the CSS is injected.

### Supported Platforms

- Android
- iOS
- Windows

### Quick Example

    var ref = cordova.InAppBrowser.open('http://apache.org', '_blank', 'location=yes');
    ref.addEventListener('loadstop', function() {
        ref.insertCSS({file: ""mystyles.css""});
    });
__

## <a id=""sample""></a>Sample: Show help pages with an InAppBrowser

You can use this plugin to show helpful documentation pages within your app. Users can view online help documents and then close them without leaving the app.

Here's a few snippets that show how you do this.

* [Give users a way to ask for help](#give).
* [Load a help page](#load).
* [Let users know that you're getting their page ready](#let).
* [Show the help page](#show).
* [Handle page errors](#handle).

### <a id=""give""></a>Give users a way to ask for help

There's lots of ways to do this in your app. A drop down list is a simple way to do that.

```html

<select id=""help-select"">
    <option value=""default"">Need help?</option>
    <option value=""article"">Show me a helpful article</option>
    <option value=""video"">Show me a helpful video</option>
    <option value=""search"">Search for other topics</option>
</select>

```

Gather the users choice in the ``onDeviceReady`` function of the page and then send an appropriate URL to a helper function in some shared library file. Our helper function is named ``showHelp()`` and we'll write that function next.

```javascript

$('#help-select').on('change', function (e) {

    var url;

    switch (this.value) {

        case ""article"":
            url = ""https://cordova.apache.org/docs/en/latest/""
                        + ""reference/cordova-plugin-inappbrowser/index.html"";
            break;

        case ""video"":
            url = ""https://youtu.be/F-GlVrTaeH0"";
            break;

        case ""search"":
            url = ""https://www.google.com/#q=inAppBrowser+plugin"";
            break;
    }

    showHelp(url);

});

```

### <a id=""load""></a>Load a help page

We'll use the ``open`` function to load the help page. We're setting the ``hidden`` property to ``yes`` so that we can show the browser only after the page content has loaded. That way, users don't see a blank browser while they wait for content to appear. When the ``loadstop`` event is raised, we'll know when the content has loaded. We'll handle that event shortly.

```javascript

function showHelp(url) {

    var target = ""_blank"";

    var options = ""location=yes,hidden=yes"";

    inAppBrowserRef = cordova.InAppBrowser.open(url, target, options);

    inAppBrowserRef.addEventListener('loadstart', loadStartCallBack);

    inAppBrowserRef.addEventListener('loadstop', loadStopCallBack);

    inAppBrowserRef.addEventListener('loaderror', loadErrorCallBack);

}

```

### <a id=""let""></a>Let users know that you're getting their page ready

Because the browser doesn't immediately appear, we can use the ``loadstart`` event to show a status message, progress bar, or other indicator. This assures users that content is on the way.

```javascript

function loadStartCallBack() {

    $('#status-message').text(""loading please wait ..."");

}

```

### <a id=""show""></a>Show the help page

When the ``loadstopcallback`` event is raised, we know that the content has loaded and we can make the browser visible. This sort of trick can create the impression of better performance. The truth is that whether you show the browser before content loads or not, the load times are exactly the same.

```javascript

function loadStopCallBack() {

    if (inAppBrowserRef != undefined) {

        inAppBrowserRef.insertCSS({ code: ""body{font-size: 25px;}"" });

        $('#status-message').text("""");

        inAppBrowserRef.show();
    }

}

```
You might have noticed the call to the ``insertCSS`` function. This serves no particular purpose in our scenario. But it gives you an idea of why you might use it. In this case, we're just making sure that the font size of your pages have a certain size. You can use this function to insert any CSS style elements. You can even point to a CSS file in your project.

### <a id=""handle""></a>Handle page errors

Sometimes a page no longer exists, a script error occurs, or a user lacks permission to view the resource. How or if you handle that situation is completely up to you and your design. You can let the browser show that message or you can present it in another way.

We'll try to show that error in a message box. We can do that by injecting a script that calls the ``alert`` function. That said, this won't work in browsers on Windows devices so we'll have to look at the parameter of the ``executeScript`` callback function to see if our attempt worked. If it didn't work out for us, we'll just show the error message in a ``<div>`` on the page.

```javascript

function loadErrorCallBack(params) {

    $('#status-message').text("""");

    var scriptErrorMesssage =
       ""alert('Sorry we cannot open that page. Message from the server is : ""
       + params.message + ""');""

    inAppBrowserRef.executeScript({ code: scriptErrorMesssage }, executeScriptCallBack);

    inAppBrowserRef.close();

    inAppBrowserRef = undefined;

}

function executeScriptCallBack(params) {

    if (params[0] == null) {

        $('#status-message').text(
           ""Sorry we couldn't open that page. Message from the server is : '""
           + params.message + ""'"");
    }

}

```

## More Usage Info

### Local Urls ( source is in the app package )
```
var iab = cordova.InAppBrowser;

iab.open('local-url.html');                  // loads in the Cordova WebView
iab.open('local-url.html', '_self');         // loads in the Cordova WebView
iab.open('local-url.html', '_system');       // Security error: system browser, but url will not load (iOS)
iab.open('local-url.html', '_blank');        // loads in the InAppBrowser
iab.open('local-url.html', 'random_string'); // loads in the InAppBrowser
iab.open('local-url.html', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar

```



### Whitelisted Content

```
var iab = cordova.InAppBrowser;

iab.open('http://whitelisted-url.com');                  // loads in the Cordova WebView
iab.open('http://whitelisted-url.com', '_self');         // loads in the Cordova WebView
iab.open('http://whitelisted-url.com', '_system');       // loads in the system browser
iab.open('http://whitelisted-url.com', '_blank');        // loads in the InAppBrowser
iab.open('http://whitelisted-url.com', 'random_string'); // loads in the InAppBrowser

iab.open('http://whitelisted-url.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar

```

### Urls that are not white-listed

```
var iab = cordova.InAppBrowser;

iab.open('http://url-that-fails-whitelist.com');                  // loads in the InAppBrowser
iab.open('http://url-that-fails-whitelist.com', '_self');         // loads in the InAppBrowser
iab.open('http://url-that-fails-whitelist.com', '_system');       // loads in the system browser
iab.open('http://url-that-fails-whitelist.com', '_blank');        // loads in the InAppBrowser
iab.open('http://url-that-fails-whitelist.com', 'random_string'); // loads in the InAppBrowser
iab.open('http://url-that-fails-whitelist.com', 'random_string', 'location=no'); // loads in the InAppBrowser, no location bar

```
","InappBrowser is a drop-in replacement for the window.open() function. Users can
view web pages without leaving your app. The InAppBrowser is not subject to the
systemwhitelist, nor is it subject to opening links in the browser."
1254,"UIWidgets is a Unity Package which helps developers to create, debug and deploy efficient, cross-platform Apps.",":warning: The main repository of UIWidgets is migrated to https://github.com/UIWidgets/com.unity.uiwidgets and developed at the new place. Although you can still report issues here, please try visit the new site to obtain the latest UIWidgets. Thanks!


# UIWidgets 2.0 (preview)
[中文](README-ZH.md)

## :rocket:  Join us  :rocket:
The team is now providing several open positions for full-time software engineer based in Shanghai, Unity China :cn:. 

If you are skilled in Unity or flutter and interested in UIWidgets, please join our QQ Group: UIWidgets (Group ID: **234207153**), WeChat Group: UIWidgets 二群 or contact me directly (QQ: **541252510**) for the oppotunity to **Come and Build UIWidgets with us in Unity China**! 

## Introduction

UIWidgets is a plugin package for Unity Editor which helps developers to create, debug and deploy efficient,
cross-platform Apps using the Unity Engine.

UIWidgets is mainly derived from [Flutter](https://github.com/flutter/flutter). However, taking advantage of
the powerful Unity Engine, it offers developers many new features to improve their Apps
as well as the develop workflow significantly.

**UIWidgets 2.0** is developed for **Unity China version** deliberately and aims to **optimize the overall performance of the package**. Specifically, a performance gain around **10%** is observed on  mobile devices like iPhone 6 after upgrading to UIWidgets 2.0. 

If you still want to use the original UIWidgets 1.0, please download the archived packages from Releases or switch your working branch to uiwidgets_1.0.

#### Efficiency
Using the latest Unity rendering SDKs, a UIWidgets App can run very fast and keep >60fps in most times.


#### Cross-Platform
A UIWidgets App can be deployed on all kinds of platforms including PCs and mobile devices directly, like
any other Unity projects.

#### Multimedia Support
Except for basic 2D UIs, developers are also able to include 3D Models, audios, particle-systems to their UIWidgets Apps.


#### Developer-Friendly
A UIWidgets App can be debug in the Unity Editor directly with many advanced tools like
CPU/GPU Profiling, FPS Profiling.


## Example

<div style=""text-align: center""><table><tr>
<td style=""text-align: center"">
  <img src=""https://connect-prd-cdn.unity.com/20190323/p/images/2a27606f-a2cc-4c9f-9e34-bb39ae64d06c_uiwidgets1.gif"" width=""200""/>
</td>
<td style=""text-align: center"">
  <img src=""https://connect-prd-cdn.unity.com/20190323/p/images/097a7c53-19b3-4e0a-ad27-8ec02506905d_uiwidgets2.gif"" width=""200"" />
</td>
<td style=""text-align: center"">
  <img src=""https://connect-prd-cdn.unity.com/20190323/p/images/1f03c1d0-758c-4dde-b3a9-2f5f7216b7d9_uiwidgets3.gif"" width=""200""/>
</td>
<td style=""text-align: center"">
  <img src=""https://connect-prd-cdn.unity.com/20190323/p/images/a8884fbd-9e7c-4bd7-af46-0947e01d01fd_uiwidgets4.gif"" width=""200""/>
</td>
</tr></table></div>

### Projects using UIWidgets

#### Unity Connect App
The Unity Connect App is created using **UIWidgets 2.0** and available for both Android (https://unity.cn/connectApp/download)
and iOS (Searching for ""Unity Connect"" in App Store). This project is open-sourced @https://github.com/UIWidgets/ConnectAppCN2.

#### Unity Chinese Doc
The official website of Unity Chinese Documentation (https://connect.unity.com/doc) is powered by UIWidgets 1.0 and
open-sourced @https://github.com/UnityTech/DocCN.

## Requirements

#### Unity

:warning: **UIWidgets 2.0 are only compatible with Unity China version**

Specifically, the compatible Unity versions for each UIWidgets release are listed below. You can download the latest Unity on [https://unity.cn/releases](https://unity.cn/releases).

| UIWidgets version     |  Unity 2019 LTS  |  Unity 2020 LTS  | 
| -----------------------------------------------| ------------------------- | ------------------------- |
| 1.5.4 and below     | 2019.4.10f1 and above  | N\A |
| 2.0.1   | 2019.4.26f1c1  | N\A |
| 2.0.3   | 2019.4.26f1c1 ~ 2019.4.29f1c1 | N\A |
| 2.0.4 and above | 2019.4.26f1c1 ~ 2019.4.29f1c1 | 2020.3.24f1c2 and above |

#### UIWidgets Package ([video tutorial](https://www.bilibili.com/video/BV1zR4y1s7HN?share_source=copy_web))
Visit our Github repository https://github.com/Unity-Technologies/com.unity.uiwidgets
 to download the latest UIWidgets package.

Move the downloaded package folder into the **root** folder of your Unity project.

Generally, you can make it using a console (or terminal) application by just a few commands as below:

   ```none
    cd <YourProjectPath>
    git clone https://github.com/Unity-Technologies/com.unity.uiwidgets.git com.unity.uiwidgets
   ```

Note that there are many native libraries we built for UIWidget 2.0 to boost its performance, which are large files and hosted by
**Git Large File Storage**. You need to install [this service](https://docs.github.com/en/repositories/working-with-files/managing-large-files/installing-git-large-file-storage) first and then use it to fetch these libraries.

Finally, in PackageManger of unity, select add local file. select ```package.json``` under ```/com.unity.uiwidgets```

#### Runtime Environment

:warning: Though UIWidgets 1.0 is compatible to all platforms, currently **UIWidgets 2.0** only supports MacOS(**Intel64**, Metal/OpenGLCore), iOS(Metal/OpenGLes), Android(**OpenGLes**) and Windows(**Direct3D11**). More devices will be supported in the future.

## Getting Start

#### i. Overview
In this tutorial, we will create a very simple UIWidgets App as the kick-starter. The app contains
only a text label and a button. The text label will count the times of clicks upon the button.

First of all, please open or create a Unity Project and open it with Unity Editor.

#### ii. Scene Build
A UIWidgets App is usually built upon a Unity UI Canvas. Please follow the steps to create a
UI Canvas in Unity.
1. Create a new Scene by ""File -> New Scene"";
1. Create a UI Canvas in the scene by ""GameObject -> UI -> Canvas"";
1. Add a Panel (i.e., **Panel 1**) to the UI Canvas by right click on the Canvas and select ""UI -> Panel"". Then remove the
**Image** Component from the Panel.

#### iii. Create Widget
A UIWidgets App is written in **C# Scripts**. Please follow the steps to create an App and play it
in Unity Editor.

1. Create a new C# Script named ""UIWidgetsExample.cs"" and paste the following codes into it.
   ```csharp
    using System.Collections.Generic;
    using uiwidgets;
    using Unity.UIWidgets.cupertino;
    using Unity.UIWidgets.engine;
    using Unity.UIWidgets.ui;
    using Unity.UIWidgets.widgets;
    using Text = Unity.UIWidgets.widgets.Text;
    using ui_ = Unity.UIWidgets.widgets.ui_;
    using TextStyle = Unity.UIWidgets.painting.TextStyle;

    namespace UIWidgetsSample
    {
        public class UIWidgetsExample : UIWidgetsPanel
        {
            protected void OnEnable()
            {
                // if you want to use your own font or font icons.
                    // AddFont(""Material Icons"", new List<string> {""MaterialIcons-Regular.ttf""}, new List<int> {0});
                base.OnEnable();
            }

            protected override void main()
            {
                ui_.runApp(new MyApp());
            }

            class MyApp : StatelessWidget
            {
                public override Widget build(BuildContext context)
                {
                    return new CupertinoApp(
                        home: new CounterApp()
                    );
                }
            }
        }

        internal class CounterApp : StatefulWidget
        {
            public override State createState()
            {
                return new CountDemoState();
            }
        }

        internal class CountDemoState : State<CounterApp>
        {
            private int count = 0;

            public override Widget build(BuildContext context)
            {
                return new Container(
                    color: Color.fromARGB(255, 255, 0, 0),
                    child: new Column(children: new List<Widget>()
                        {
                            new Text($""count: {count}"", style: new TextStyle(color: Color.fromARGB(255, 0 ,0 ,255))),
                            new CupertinoButton(
                                onPressed: () =>
                                {
                                    setState(() =>
                                    {
                                        count++;
                                    });
                                },
                                child: new Container(
                                    color: Color.fromARGB(255,0 , 255, 0),
                                    width: 100,
                                    height: 40
                                )
                            ),
                        }
                    )
                );
            }
        }
    }
   ```

1. Save this script and attach it to **Panel 1** as its component.
1. Press the ""Play"" Button to start the App in Unity Editor.

#### iv. Build App
Finally, the UIWidgets App can be built to packages for any specific platform by the following steps.
1. Open the Build Settings Panel by ""File -> Build Settings...""
1. Choose a target platform and click ""Build"". Then the Unity Editor will automatically assemble
all relevant resources and generate the final App package.

#### How to load images?
1. Put your images files in StreamingAssets folder. e.g. image1.png.
2. Use Image.file(""image1.png"") to load the image.

UIWidgets supports Gif as well!
1. Put your gif files in StreamingAssets folder. e.g. loading1.gif.
2. Use Image.file(""loading1.gif"") to load the gif images.

#### Show Status Bar on Android
Status bar is always hidden by default when an Unity project is running on an Android device.
If you
want to show the status bar in your App, you can disable```Start in fullscreen``` and ```record outside safe area```, make sure ```showStatusBar``` is ```true``` under ```UIWidgetsAndroidConfiguration```

#### Image Import Setting
Please put images under StreamingAssets folder, a and loading it using ```Image.file```.

#### Show External Texture
You can use the new builtin API ``UIWidgetsExternalTextureHelper.createCompatibleExternalTexture`` to create a compatible render texture in Unity and render it on a ``Texture`` widget in UIWidgets. With the feature, you can easily embed 3d models, videos, etc.
in your App. 

Note that currently this feature is only supported for **OpenGLCore** (Mac), **OpenGLes** (iOS&Android) and **D3D11** (Windows) with **Unity 2020.3.37f1c1** and newer. A simple example (i.e., ``3DTest1.unity``) can be found in our sample project.

#### Performance Optimization on Mobile devices
By setting ```UIWidgetsGlobalConfiguration.EnableAutoAdjustFramerate = true``` in your project, UIWidgets will drop the frame rate of your App to 0 if the UI contents of UIWidgetsPanel is not changed for some time. This will help to prevent battery drain on mobile devices significantly. Note that this feature is disabled by default.

Long time garbage collection may cause App to stuck frequently. You can enable incremental garbage collection to avoid it. You can enable this feature by setting ```UIWidgetsGlobalConfiguration.EnableIncrementalGC = true```, and enabling ```Project Setting -> Player -> Other Settings -> Use incremental GC```.

## Debug UIWidgets Application

In the Editor, you can switch debug/release mode by “UIWidgets->EnableDebug”.

In the Player, the debug/development build will enable debug mode. The release build will disable debug mode automatically.

## Using Window Scope
If you see the error `AssertionError: Window.instance is null` or null pointer error of `Window.instance`,
it means the code is not running in the window scope. In this case, you can enclose your code
with window scope as below:
```csharp
using(Isolate.getScope(the isolate of your App)) {
    // code dealing with UIWidgets,
    // e.g. setState(() => {....})
}
```

This is needed if the code is in methods
not invoked by UIWidgets. For example, if the code is in `completed` callback of `UnityWebRequest`,
you need to enclose them with window scope.
Please see our HttpRequestSample for detail.
For callback/event handler methods from UIWidgets (e.g `Widget.build, State.initState...`), you don't need do
it yourself, since the framework ensure it's in window scope.

## Learn

#### Samples
You can find many UIWidgets sample projects on Github, which cover different aspects and provide you
learning materials in various levels:
* UIWidgetsSamples (https://github.com/Unity-Technologies/com.unity.uiwidgets). These samples are developed by the dev team in order to illustrates all the features of 
UIWidgets. 
you can find all the sample scenes under the **Scene** folder.
You can also try UIWidgets-based Editor windows by clicking the new **UIWidgetsTests** tab on the main menu
and open one of the dropdown samples.
* awesome-UIWidgets (https://plastichub.unity.cn/unity-tech-cn/awesome-uiwidgets). This Repo contains 
some UIWidget demo apps.
* UIWidgets-Templates (https://github.com/UIWidgets/uiwidgets-template). This Repo contains some useful out-of-box UIWidgets widgets.
* ConnectApp (https://github.com/UIWidgets/ConnectAppCN2). This is an online, open-source UIWidget-based App developed 
by the dev team. If you are making your own App with UIWidgets, this project will provides you with 
many best practice cases.


#### Wiki
The develop team is still working on the UIWidgets Wiki. However, since UIWidgets is mainly derived from Flutter,
 you can refer to Flutter Wiki to access detailed descriptions of UIWidgets APIs
 from those of their Flutter counterparts.
Meanwhile, you can join our [discussion channel](https://unity.cn/plate/uiwidgets) to keep in touch with the community.

#### FAQ

1. The editor crashes when openning a UIWidgets 2.0 project, e.g., the Sample projects.

      Please make sure that you are using campatible Unity versions to the specific UIWidgets version. For example, **UIWidgets 2.0.3** is only supported on Unity China version between 2019.4.26f1c1 and 2019.4.29f1c1. You can find the detailed information in 
this [section](#unity).


2. After openning a UIWidgets 2.0 project I receive an error **DllNotFoundException: libUIWidgets**.

      Please make sure that the native libraries are correctly downloaded to your project. You can find them under *UIWidgetsPackageRoot*/Runtime/Plugins. For example, the libUIWidgets.dll under the sub folder *X86_64* is the native library for Windows and the libUIWidgets.dylib under *osx* is for Mac.

      If the libraries are not there or their sizes are small (<1MB), please ensure that you have installed **Git Large File Storage** in your computer and then try the following command line inside the UIWidgets repository.
      ```
      git lfs pull
      ```

3. What is the difference between UIWidgets 2.0 and UIWidgets 1.0 ?

      In UIWidgets 1.0 we used Unity [Graphics API](https://docs.unity3d.com/ScriptReference/Graphics.html) for the rendering and all rendering codes are writen in C#. Therefore it is able to run freely on all platforms that Unity supports but relatively slow. The rendering result is also not exactly the same as in flutter due to the difference between the Unity rendering engine and flutter engine.

      In UIWidgets 2.0, we wrapped the flutter engine inside a native library which is writen in C++ and used it to render on Unity Textures. Its rendering result is the same as in flutter and the performance is also better. However, in order to ensure that the flutter engine works properly along with Unity, we modified both the flutter and Unity Engine. As the result, currently UIWidgets 2.0 can only run on specific Unity versions, i.e., Unity China version and supports only part of the build targets of Unity.

      For better rendering result, performance and continuous upgrade and support, you are always suggested to use UIWidgets 2.0 for your project. Use UIWidgets 1.0 only if you need to support specific target platforms like webgl.

4. I encountered with a link error with OpenGLES for iOS build using UIWidgets 2.0 with Unity 2020.3LTS.

      This is caused by Unity because it removed the dependency on OpenGLES library on Unity 2020.3. To fix this issue, please open the XCode project and manually add the OpenGLES library to the UnityFramework target.
      
## Contact Us

QQ Group: UIWidgets (Group ID: **234207153**)

## How to Contribute

Check [CONTRIBUTING.md](CONTRIBUTING.md)
","UIWidgets is a plugin package for Unity Editor which helps developers to create,
debug and deploy efficient, cross-platform Apps using the Unity Engine. A
performance gain around **10%** is observed on  mobile devices like iPhone 6
after upgrading to UIWidget 2.0. The official website of Unity Chinese
Documentation (https://connect.unity.com/doc) is powered by UIWIDgets 1.0 and
2.1. You can download the latest Unity on [https://unity.cn/releases]."
405,"A smooth, highly customizable wheel view and picker view, support 3D effects like iOS. 一个顺滑的、高度自定义的滚轮控件和选择器，支持类似 iOS 的 3D 效果","![](https://github.com/zyyoona7/WheelPicker/blob/master/perview/banner.png)

![](https://img.shields.io/badge/platform-android-brightgreen.svg)
[![API](https://img.shields.io/badge/API-16%2B-brightgreen.svg?style=flat)](https://android-arsenal.com/api?level=16)
[![](https://img.shields.io/badge/pickerview-1.1.1-brightgreen.svg)](https://bintray.com/zyyoona7/maven/pickerview)
[![](https://img.shields.io/badge/wheelview-1.0.9-brightgreen.svg)](https://bintray.com/zyyoona7/maven/wheelview)
[![](https://img.shields.io/github/license/zyyoona7/WheelPicker.svg)](https://github.com/zyyoona7/WheelPicker#license)
### 简介（Introduction）

自定义 View 实现滑动流畅、功能齐全、用法简单、高度自定义的 WheelView，并在 WheelView 基础之上封装了常用的日期选择器（包括年、月、日 WheelView）、选项选择器。

### 版本说明

2019/07/11 发布了 pickerview 1.0.8 版本和 wheelview 1.0.6 版本，其中 pickerview 对包结构有所调整，升级时请先阅读[更新日志](https://github.com/zyyoona7/WheelPicker#pickerview-update-logs)，wheelview 也增加了一些[新功能](https://github.com/zyyoona7/WheelPicker#wheelview-update-logs)，欢迎大家尝鲜~感谢大家反馈的问题，如有新问题也请及时提 issue。

### 特性（Features）
#### 1. WheelView Features

- 如丝般顺滑的滚动效果，无论快速滚动还是缓慢滚动
- 灵活数据设置，通过泛型设置数据类型，灵活、安全
- 支持类似 iOS 的滚动变化音效
- 支持类似 iOS 的 3D 效果
- 3D 效果下，支持圆弧偏移效果，使其看起来更加立体
- 支持嵌套滚动、循环滚动
- 丰富的滑动监听，支持选中监听、滚动状态改变监听等
- 两种分割线类型可以设置，还有其他分割线骚操作
- 支持自动调整字体大小以使得长文字显示完全
- 支持设置显示条目、设置字体大小、设置字体、设置行间距等常规操作
- 更多自定义操作尽在其中

#### 2. DatePickerView Features

- 支持年月日，年月，月日的日期选择
- 支持格式化数据，可以为 item 显示指定格式化的数据
- 拥有 WheelView 特性，可单独设置每个 WheelView 的效果

#### 3. OptionsPickerView Features

- 支持联动包括二级联动和三级联动，设置数据时把控严格，避免滚动时数据异常

### 效果图（Preview）

#### WheelView Preview

![WheelView 1](https://github.com/zyyoona7/WheelPicker/blob/master/perview/wheel_view_1.gif)
①  ②
![WheelView 2](https://github.com/zyyoona7/WheelPicker/blob/master/perview/wheel_view_2.gif)
<br><br>
![WheelView 3](https://github.com/zyyoona7/WheelPicker/blob/master/perview/wheel_view_3.gif)
③  ④
![WheelView 4](https://github.com/zyyoona7/WheelPicker/blob/master/perview/wheel_view_4.gif)

#### DatePickerView Preview

![DatePickerView_1](https://github.com/zyyoona7/WheelPicker/blob/master/perview/date_picker_view_1.gif)
①  ②
![DatePickerView_2](https://github.com/zyyoona7/WheelPicker/blob/master/perview/date_picker_view_2.gif)

#### OptionsPickerView Preview

![OptionsPickerView_1](https://github.com/zyyoona7/WheelPicker/blob/master/perview/options_picker_view_1.gif)
①  ②
![OptionsPickerView_2](https://github.com/zyyoona7/WheelPicker/blob/master/perview/options_picker_view_2.gif)

### 使用（Usage）

#### WheelView Usage

#### 1.依赖（dependency）

```groovy
    implementation 'com.github.zyyoona7:wheelview:1.0.7'
```

#### 2.基本用法（Basic Usage）
在布局文件中添加
```xml
    <com.zyyoona7.wheel.WheelView
        android:id=""@+id/wheelview""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""/>
```
在代码中
```java
    //泛型为数据类型
    final WheelView<Integer> wheelView = findViewById(R.id.wheelview);
    //初始化数据
    List<Integer> list = new ArrayList<>(1);
    for (int i = 0; i < 20; i++) {
        list.add(i);
    }
    //设置数据
    wheelView.setData(list);

    //尽请使用各种方法
    wheelView.setTextSize(24f,true);
    //more...
```
#### 2.进阶用法（Advanced Usage）

> 问：我已经有了创建好的实体怎么办？

> 答：好办~

**我已城市列表为例（其他实体同理）**

我的城市列表实体是这样的：
```java 
public class CityEntity implements IWheelEntity, Serializable {

    //国家
    public static final String LEVEL_COUNTRY = ""country"";
    //省
    public static final String LEVEL_PROVINCE = ""province"";
    //市
    public static final String LEVEL_CITY = ""city"";
    //区
    public static final String LEVEL_DISTRICT = ""district"";

    private String citycode;
    private String adcode;
    private String name;
    private String center;
    private String level;
    private List<CityEntity> districts;

    public String getCitycode() {
        return citycode;
    }

    public void setCitycode(String citycode) {
        this.citycode = citycode;
    }

    public String getAdcode() {
        return adcode;
    }

    public void setAdcode(String adcode) {
        this.adcode = adcode;
    }

    public String getName() {
        return name == null ? """" : name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCenter() {
        return center;
    }

    public void setCenter(String center) {
        this.center = center;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) {
        this.level = level;
    }

    public List<CityEntity> getDistricts() {
        return districts == null ? new ArrayList<CityEntity>(1) : districts;
    }

    public void setDistricts(List<CityEntity> districts) {
        this.districts = districts;
    }

    @Override
    public String toString() {
        return ""CityEntity{"" +
                ""citycode='"" + citycode + '\'' +
                "", adcode='"" + adcode + '\'' +
                "", name='"" + name + '\'' +
                "", center='"" + center + '\'' +
                "", level='"" + level + '\'' +
                "", districts="" + districts +
                '}';
    }

    /**
     * 重点：重写此方法，返回 WheelView 显示的文字
     * @return
     */
    @Override
    public String getWheelText() {
        return name == null ? """" : name;
    }
}
```
注意，我的 CityEntity 中多实现了一个 IWheelEntity 接口，这个接口是在 WheelView 库中定义好的，实现之后在 getWheelText() 方法返回你想在 WheelView 中展示的字段就大功告成了。

MainActivity WheelView 相关代码：
```java 
    WheelView<CityEntity> cityWv=findViewById(R.id.wv_city);
    //解析城市列表
    List<CityEntity> cityData= ParseHelper.parseTwoLevelCityList(this);
    cityWv.setData(cityData);
```
然后，效果图是这样的~

![WheelView_City](https://github.com/zyyoona7/WheelPicker/blob/master/perview/wheel_view_city.gif)

> 冷知识：其实不实现 IWheelEntity 也是可以的，偷偷给你们看下源码：
```java
    //WheelView.java
    /**
     * 获取item text
     *
     * @param item item数据
     * @return 文本内容
     */
    protected String getDataText(T item) {
        if (item == null) {
            return """";
        } else if (item instanceof IWheelEntity) {
            return ((IWheelEntity) item).getWheelText();
        } else if (item instanceof Integer) {
            //如果为整形则最少保留两位数.
            return isIntegerNeedFormat ? String.format(Locale.getDefault(), mIntegerFormat, (Integer) item)
                    : String.valueOf(item);
        } else if (item instanceof String) {
            return (String) item;
        }
        return item.toString();
    }
```
如果条件都不满足的话会默认执行 toString() 方法，所以理论上也可以在实体的 toString() 方法返回你想展示的字段，但是**不推荐**，毕竟 toString() 方法以我个人的习惯都是输出 CityEntity 那种的信息~你也可能输出别的信息。

#### PickerView Usage

```groovy
    implementation 'com.github.zyyoona7:pickerview:1.0.9'
```

#### DatePickerView Usage

在布局文件中：
```xml
    <com.zyyoona7.picker.DatePickerView
        android:id=""@+id/dpv_default""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""16dp""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toBottomOf=""@id/tv_datePickerView"" />
```

代码中：
```java
    DatePickerView defaultDpv = findViewById(R.id.dpv_default);
    defaultDpv.setTextSize(24, true);
    defaultDpv.setLabelTextSize(20);
    
    //选中回调
    defaultDpv.setOnDateSelectedListener(new DatePickerView.OnDateSelectedListener() {
        @Override
        public void onDateSelected(DatePickerView datePickerView, int year, int month, int day, @Nullable Date date) {
            Toast.makeText(Main3Activity.this, ""选中的日期："" + year + ""-"" + month + ""-"" + day, Toast.LENGTH_SHORT).show();
        }
    });
```
> 问：我想要每一项都加入年字怎么写？

> 答：简单。

**定制格式**

我们需要先把自带显示年、月、日的 TextView 隐藏，然后设置格式化：

```java
    //隐藏年月日
    customDpv3.setShowLabel(false);    

    //获取年月日 WheelView
    YearWheelView yearWv3 = customDpv3.getYearWv();
    MonthWheelView monthWv3 = customDpv3.getMonthWv();
    DayWheelView dayWv3 = customDpv3.getDayWv();
    //注意：setIntegerNeedFormat(String integerFormat)方法 integerFormat 中必须包含并且只能包含一个格式说明符（format specifier）
    //更多请查看该方法参数说明
    yearWv3.setIntegerNeedFormat(""%d年"");
    monthWv3.setIntegerNeedFormat(""%d月"");
    dayWv3.setIntegerNeedFormat(""%02d日"");
```

没错就是这么简单，而且回调内容依旧不变~更多操作请查看 [Main3Activity](https://github.com/zyyoona7/WheelPicker/blob/master/app/src/main/java/com/zyyoona7/demo/Main3Activity.java)

#### OptionsPickerView

布局文件中：

```xml
    <com.zyyoona7.picker.OptionsPickerView
        android:id=""@+id/opv_three_linkage""
        android:layout_width=""0dp""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""16dp""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toBottomOf=""@id/opv_two_linkage""
        android:background=""#DCDCDC""/>
```

代码中：

```java
    final OptionsPickerView<CityEntity> threeLinkageOpv = findViewById(R.id.opv_three_linkage);
    //设置数据
    threeLinkageOpv.setLinkageData(p3List, c3List, d3List);
    //定制样式
    threeLinkageOpv.setVisibleItems(7);
    threeLinkageOpv.setResetSelectedPosition(true);
    threeLinkageOpv.setDrawSelectedRect(true);
    threeLinkageOpv.setSelectedRectColor(Color.parseColor(""#D3D3D3""));
    threeLinkageOpv.setNormalItemTextColor(Color.parseColor(""#808080""));
    threeLinkageOpv.setTextSize(22f,true);
    threeLinkageOpv.setSoundEffect(true);
    threeLinkageOpv.setSoundEffectResource(R.raw.button_choose);

    //设置选中回调
    threeLinkageOpv.setOnOptionsSelectedListener(new OptionsPickerView.OnOptionsSelectedListener<CityEntity>() {
        @Override
        public void onOptionsSelected(int opt1Pos, @Nullable CityEntity opt1Data, int opt2Pos,
                                      @Nullable CityEntity opt2Data, int opt3Pos, @Nullable CityEntity opt3Data) {
            if (opt1Data == null || opt2Data == null || opt3Data == null) {
                return;
            }
            Log.d(TAG, ""onOptionsSelected: three Linkage op1Pos="" + opt1Pos + "",op1Data="" + opt1Data.getName() + "",op2Pos="" + opt2Pos
                        + "",op2Data="" + opt2Data.getName() + "",op3Pos="" + opt3Pos + "",op3Data="" + opt3Data.getName());
        }
    });
```

更多请查看 [Main4Activity](https://github.com/zyyoona7/WheelPicker/blob/master/app/src/main/java/com/zyyoona7/demo/Main4Activity.java)

### 更新日志（Update Logs）

#### WheelView Update Logs

- **2019/09/27 发布 1.0.7 版本**
  - 修复数据为空时，触摸 WheelView 导致崩溃问题
  - 增加 `onWheelScroll()` 等同监听器的方法供子类使用

- **2019/07/11 发布 1.0.6 版本**
  - 修复 [#18](https://github.com/zyyoona7/WheelPicker/issues/18) 的问题
  - 增加 [#6](https://github.com/zyyoona7/WheelPicker/issues/6) 新功能，在非 3D 的情况下也可以设置选中字体和非选中字体的大小，通过 setRefractRatio() 方法设置，并且标记  ```wv_curvedRefractRatio``` 属性和 setCurvedRefractRatio() 过时，会在新版本删除这两个方法
  - 增加扩大选中区域的间距，通过 ``` wv_dividerOffset``` 属性设置偏移，原理是扩大分割线和选中区域的上下偏移距离来实现看起来的间距扩大效果，并未真正的修改行间距
  - 增加 [#12](https://github.com/zyyoona7/WheelPicker/issues/12) 新功能，可以设置选中条目字体加粗，其他条目不会加粗操作，通过 setTypeface(typeface,true) 方法设置，详细信息请看方法注释
  - 支持禁止滑动，只需设置 setEnabled(false) 将不处理 onTouchEvent() 事件

- **2019/02/22 发布 1.0.5 版本**
    - 修复 [#5](https://github.com/zyyoona7/WheelPicker/issues/5)、[#7](https://github.com/zyyoona7/WheelPicker/issues/7)

- **2018/10/10 发布 1.0.4 版本**
    - 在编写布局时可以实时预览
    
- **2018/08/29 发布 1.0.2 版本**
    - 修复 setSelectedItemPosition() 方法没有执行 onWheelSelected() 问题

- **2018/08/23 发布 1.0.1 版本**
    - 规范命名，将方法名和属性名保持一致命名
    - 增加绘制选中区域，设置选中区域颜色
    - 增加 getItemData(int position) 方法：获取指定 position 的数据
    - 增加 getSelectedItemData() 方法：获取当前选中的item数据
    - 增加 setIntegerNeedFormat(String integerFormat) 方法：同时设置 isIntegerNeedFormat=true 和 mIntegerFormat=integerFormat 两个属性
    - 增加 setResetSelectedPosition(boolean isResetSelectedPosition) 方法：设置当数据变化时，是否重置选中下标到第一个
    - 修改 mCurrentItemPosition 为 mSelectedItemPosition，并同时修改了对应的 getter/setter 方法及属性名
    - 修改 mSelectedItemColor 为 mSelectedItemTextColor，并同时修改了对应的 getter/setter 方法名
    - 修改 setSelectedItemPosition(int position) 默认不开启平滑滚动
    - 修复单次滑动 onItemSelected() 可能执行两次的问题
    - 修复 setSelectedItemPosition() 不开启平滑滚动时，未保存当前选中下标
    - 修复更新数据时，mSelectedItemPosition 越界的情况
    - 修复播放音效代码写错位置
    - 优化滚动监听和选中监听回调次数，回调更加精准，减少不必要的重绘
    - 优化滚动监听执行位置，onDraw() 方法不再处理任何回调

- **2018/08/20 发布 1.0.0 版本**
    - 泛型设置数据类型
    - 滚动音效，3D 效果等
    - 增加自动调整字体大小以使得长文字显示完全（需手动开启）
    - 丰富的监听器
    
#### PickerView Update Logs

- **2019/09/27 发布 1.0.9 版本**
  - DatePickerView 增加最大选择日期和最小选择日期设置，超出此范围会自动选中最大或最小日期，方便选择生日等最大日期不能超过当天的场景

- **2019/07/11 发布 1.0.8 版本**
  - 调整包结构，将所有 pickerview 的监听器放入 listener 包中
  - 重构 DatePickerView 代码，新增 BaseDatePickerView 可以更加灵活的定制 DatePickerView 的样式，只需要继承 BaseDatePickerView 并实现抽象方法即可（详情请看 Demo 中的 [CustomDatePickerView](https://github.com/zyyoona7/WheelPicker/blob/master/app/src/main/java/com/zyyoona7/demo/CustomDatePickerView.java)）
  - 调整 OnDateSelectedListener 中 onDateSelected() 方法的第一个参数类型，由原来的 DatePickerView 改成 BaseDatePickerVIew
- **2019/03/12 发布 1.0.7 版本**
    - 增加滚动状态监听

- **2019/02/22 发布 1.0.6 版本**
    - 同步 wheelview 版本

- **2018/11/17 发布 1.0.5 版本**
    - 修复 YearWheelView 中设置年份范围时不包括结束年的问题

- **2018/10/10 发布 1.0.4 版本**
    - 同步 wheelview 版本，pickerview 终于可以正常导入，只有 1.0.4 版本可用

- ~~**2018/09/14 发布 1.0.2 版本**~~
    -  ~~修复 pickerview 引入失败问题~~

- ~~**2018/08/29 发布 1.0.1 版本**~~
    - ~~同步 WheelView 版本~~

- ~~**2018/08/24 发布 1.0.0 版本**~~
    - ~~YearWheelView、MonthWheelView、DayWheelView 封装~~
    - ~~日期选择器、选项选择器~~
    
### 交流群
![qrcode](https://github.com/zyyoona7/WheelPicker/blob/master/perview/QQ_qrcode.png)

### 感谢（Thanks）
[**WheelPicker**](https://github.com/AigeStudio/WheelPicker)<br>
[**Android-PickerView**](https://github.com/Bigkoo/Android-PickerView)<br>
[**WheelView**](https://github.com/CNCoderX/WheelView)<br>
[**WheelView-3d**](https://github.com/youxiaochen/WheelView-3d)<br>
[**DatePicker**](https://github.com/chenglei1986/DatePicker)

### LICENSE
```
Copyright 2018 zyyoona7

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```
","Summarize:![](https://github.com/zyyoona7/WheelPicker/blob/master/perview/banner
.png)!(https://img.shields.io/badge/platform-android-brightgreen.svg)!
(https://bintray.com /maven/pickerview/1.1.0.1-bright green.svG)! [![API]
(http://android-arsenal.com/#/api?level=16)"
1548,🌈‒ the Ethereum wallet that lives in your pocket,"![](https://pbs.twimg.com/profile_banners/1103191459409420288/1573207178/1500x500)

### 🌈️ Rainbow

> the Ethereum wallet that lives in your pocket!

📲️ [Available on the iOS App Store.](https://apps.apple.com/us/app/rainbow-ethereum-wallet/id1457119021)

🤖 [Android Beta available on Google Play Store](https://play.google.com/store/apps/details?id=me.rainbow)

🐦️ [Follow us on Twitter](https://twitter.com/rainbowdotme)

## Setup

### General

- Install NVM or Node.js 14: https://github.com/creationix/nvm
- Install all project dependencies with `yarn setup`

### MacOS

1. Install the [latest version of XCode](https://developer.apple.com/xcode/).

2. Install Watchman:

   ```shell
   brew install watchman
   ```

3. Install CocoaPods:

   ```shell
   sudo gem install cocoapods
   ```

4. Install the required bundles and Pods for this project:
   ```shell
   yarn install-bundle && yarn install-pods
   ```

### Linux

1. Install system dependencies:

   ```shell
   sudo apt install libsecret-tools watchman
   ```

2. Follow the [React Native environment setup
   instructions](https://reactnative.dev/docs/environment-setup) carefully,
   which will involve installing Android Studio, the Android SDK, the emulator,
   etc. and making them available in your `$PATH`.

3. Ensure at least one [AVD
   image](https://developer.android.com/studio/run/managing-avds) is available
   for the emulator (unless using a physical device).

## Developing

If you are new to React Native, this is a helpful introduction:
https://reactnative.dev/docs/getting-started

### Preflight

1. Run `nvm use 14` to force Node.js v14.

2. Set up your .env file, use our env.example as a guide.

   **_Note that some features are currently not accessible, we are working with our Data Providers in order to provide open source API Keys!_**

   Here are some resources to generate your own API keys:

   - Etherscan: https://etherscan.io/apis
   - Infura: https://infura.io/
   - ETH Gas Station: https://docs.ethgasstation.info/
   - Imgix: https://www.imgix.com/

3. Ensure a `google-services.json` has been added to the relevant project
   directory/directories so the compile will not fail.

   This can either be the live Google Services config (for internal development)
   or a self-provided config for a personal Firebase project (third-party
   contributors) registered under the package name `me.rainbow`.

### MacOS

_Note: Darwin versions of the application can only be developed/built on Darwin
platforms with XCode._

1. Start a React Native webserver with:

   ```shell
   yarn start
   ```

2. Open `rainbow-wallet/ios/Rainbow.xcworkspace` in XCode.

3. Run the project by clicking the play button.

### Linux

_Note: Linux development environments cannot develop or build Darwin versions of the
project._

1. Start a React Native webserver with:

   ```shell
   yarn start
   ```

2. Build/install/start the debug version of the app in an emulator with:
   ```shell
   yarn android
   ```
","Rainbow Wallet is an open-source, peer-to-peer payment system for the Bitcoin
protocol. It is available on the iOS App Store and the Google Play Store. It can
be used to transfer money to and from the Bitcoin network. The app can only be
developed/built on Darwin platforms with XCode."
2402,"Generate types and converters from JSON, Schema, and GraphQL","![](https://raw.githubusercontent.com/quicktype/quicktype/master/media/quicktype-logo.svg?sanitize=true)

[![npm version](https://badge.fury.io/js/quicktype.svg)](https://badge.fury.io/js/quicktype)
![Build status](https://github.com/quicktype/quicktype/actions/workflows/master.yaml/badge.svg)

`quicktype` generates strongly-typed models and serializers from JSON, JSON Schema, TypeScript, and [GraphQL queries](https://blog.quicktype.io/graphql-with-quicktype/), making it a breeze to work with JSON type-safely in many programming languages.

-   [Try `quicktype` in your browser](https://app.quicktype.io).
-   Read ['A first look at quicktype'](http://blog.quicktype.io/first-look/) for more introduction.
-   If you have any questions, check out the [FAQ](FAQ.md) first.

### Supported Inputs

| JSON | JSON API URLs | [JSON Schema](https://app.quicktype.io/#s=coordinate) |
| ---- | ------------- | ----------------------------------------------------- |

| TypeScript | GraphQL queries |
| ---------- | --------------- |

### Target Languages

| [Ruby](https://app.quicktype.io/#l=ruby) | [JavaScript](https://app.quicktype.io/#l=js) | [Flow](https://app.quicktype.io/#l=flow) | [Rust](https://app.quicktype.io/#l=rust) | [Kotlin](https://app.quicktype.io/#l=kotlin) |
| ---------------------------------------- | -------------------------------------------- | ---------------------------------------- | ---------------------------------------- | -------------------------------------------- |

| [Dart](https://app.quicktype.io/#l=dart) | [Python](https://app.quicktype.io/#l=python) | [C#](https://app.quicktype.io/#l=cs) | [Go](https://app.quicktype.io/#l=go) | [C++](https://app.quicktype.io/#l=cpp) |
| ---------------------------------------- | -------------------------------------------- | ------------------------------------ | ------------------------------------ | -------------------------------------- |

| [Java](https://app.quicktype.io/#l=java) | [TypeScript](https://app.quicktype.io/#l=ts) | [Swift](https://app.quicktype.io/#l=swift) | [Objective-C](https://app.quicktype.io/#l=objc) | [Elm](https://app.quicktype.io/#l=elm) |
| ---------------------------------------- | -------------------------------------------- | ------------------------------------------ | ----------------------------------------------- | -------------------------------------- |

| [JSON Schema](https://app.quicktype.io/#l=schema) | [Pike](https://app.quicktype.io/#l=pike) | [Prop-Types](https://app.quicktype.io/#l=javascript-prop-types) | [Haskell](https://app.quicktype.io/#l=haskell) |     |
| ------------------------------------------------- | ---------------------------------------- | --------------------------------------------------------------- | ---------------------------------------------- | --- |

_Missing your favorite language? Please implement it!_

## Installation

There are many ways to use `quicktype`. [app.quicktype.io](https://app.quicktype.io) is the most powerful and complete UI. The web app also works offline and doesn't send your sample data over the Internet, so paste away!

For the best CLI, we recommend installing `quicktype` globally via `npm`:

```bash
npm install -g quicktype
```

Other options:

-   [Homebrew](http://formulae.brew.sh/formula/quicktype) _(infrequently updated)_
-   [Xcode extension](https://itunes.apple.com/us/app/paste-json-as-code-quicktype/id1330801220?mt=12)\*
-   [VSCode extension](https://marketplace.visualstudio.com/items/quicktype.quicktype)\*
-   [Visual Studio extension](https://marketplace.visualstudio.com/items?itemName=typeguard.quicktype-vs)\*

<small>\* limited functionality</small>

## Using `quicktype`

```bash
# Run quicktype without arguments for help and options
quicktype

# quicktype a simple JSON object in C#
echo '{ ""name"": ""David"" }' | quicktype -l csharp

# quicktype a top-level array and save as Go source
echo '[1, 2, 3]' | quicktype -o ints.go

# quicktype a sample JSON file in Swift
quicktype person.json -o Person.swift

# A verbose way to do the same thing
quicktype \
  --src person.json \
  --src-lang json \
  --lang swift \
  --top-level Person \
  --out Person.swift

# quicktype a directory of samples as a C++ program
# Suppose ./blockchain is a directory with files:
#   latest-block.json transactions.json marketcap.json
quicktype ./blockchain -o blockchain-api.cpp

# quicktype a live JSON API as a Java program
quicktype https://api.somewhere.com/data -o Data.java
```

### Generating code from JSON schema

The recommended way to use `quicktype` is to generate a JSON schema from sample data, review and edit the schema, commit the schema to your project repo, then generate code from the schema as part of your build process:

```bash
# First, infer a JSON schema from a sample.
quicktype pokedex.json -l schema -o schema.json

# Review the schema, make changes,
# and commit it to your project repo.

# Finally, generate model code from schema in your
# build process for whatever languages you need:
quicktype -s schema schema.json -o src/ios/models.swift
quicktype -s schema schema.json -o src/android/Models.java
quicktype -s schema schema.json -o src/nodejs/Models.ts

# All of these models will serialize to and from the same
# JSON, so different programs in your stack can communicate
# seamlessly.
```

### Generating code from TypeScript (Experimental)

You can achieve a similar result by writing or generating a [TypeScript](http://www.typescriptlang.org/) file, then quicktyping it. TypeScript is a typed superset of JavaScript with simple, succinct syntax for defining types:

```typescript
interface Person {
    name: string;
    nickname?: string; // an optional property
    luckyNumber: number;
}
```

You can use TypeScript just like JSON schema was used in the last example:

```bash
# First, infer a TypeScript file from a sample (or just write one!)
quicktype pokedex.json -o pokedex.ts --just-types
# Review the TypeScript, make changes, etc.
quicktype pokedex.ts -o src/ios/models.swift
```

### Calling `quicktype` from JavaScript

You can use `quicktype` as a JavaScript function within `node` or browsers. First add the `quicktype-core` package:

```bash
$ npm install quicktype-core
```

In general, first you create an `InputData` value with one or more JSON samples, JSON schemas, TypeScript sources, or other supported input types. Then you call `quicktype`, passing that `InputData` value and any options you want.

```javascript
import {
    quicktype,
    InputData,
    jsonInputForTargetLanguage,
    JSONSchemaInput,
    FetchingJSONSchemaStore
} from ""quicktype-core"";

async function quicktypeJSON(targetLanguage, typeName, jsonString) {
    const jsonInput = jsonInputForTargetLanguage(targetLanguage);

    // We could add multiple samples for the same desired
    // type, or many sources for other types. Here we're
    // just making one type from one piece of sample JSON.
    await jsonInput.addSource({
        name: typeName,
        samples: [jsonString]
    });

    const inputData = new InputData();
    inputData.addInput(jsonInput);

    return await quicktype({
        inputData,
        lang: targetLanguage
    });
}

async function quicktypeJSONSchema(targetLanguage, typeName, jsonSchemaString) {
    const schemaInput = new JSONSchemaInput(new FetchingJSONSchemaStore());

    // We could add multiple schemas for multiple types,
    // but here we're just making one type from JSON schema.
    await schemaInput.addSource({ name: typeName, schema: jsonSchemaString });

    const inputData = new InputData();
    inputData.addInput(schemaInput);

    return await quicktype({
        inputData,
        lang: targetLanguage
    });
}

async function main() {
    const { lines: swiftPerson } = await quicktypeJSON(""swift"", ""Person"", jsonString);
    console.log(swiftPerson.join(""\n""));

    const { lines: pythonPerson } = await quicktypeJSONSchema(""python"", ""Person"", jsonSchemaString);
    console.log(pythonPerson.join(""\n""));
}

main();
```

The argument to `quicktype` is a complex object with many optional properties. [Explore its definition](https://github.com/quicktype/quicktype/blob/master/src/quicktype-core/Run.ts#L119) to understand what options are allowed.

## Contributing

`quicktype` is [Open Source](LICENSE) and we love contributors! In fact, we have a [list of issues](https://github.com/quicktype/quicktype/issues?utf8=✓&q=is%3Aissue+is%3Aopen+label%3Ahelp-wanted) that are low-priority for us, but for which we'd happily accept contributions. Support for new target languages is also strongly desired. If you'd like to contribute, need help with anything at all, or would just like to talk things over, come [join us on Slack](http://slack.quicktype.io/).

### Setup, Build, Run

`quicktype` is implemented in TypeScript and requires `nodejs` and `npm` to build and run.

First, install `typescript` globally via `npm`:

Clone this repo and do:

#### macOS / Linux

```bash
nvm use
npm install
script/quicktype # rebuild (slow) and run (fast)
```

#### Windows

```bash
npm install --ignore-scripts # Install dependencies
npm install -g typescript # Install typescript globally
tsc --project src/cli # Rebuild
node dist\cli\index.js # Run
```

### Edit

Install [Visual Studio Code](https://code.visualstudio.com/), open this
workspace, and install the recommended extensions:

```bash
code . # opens in VS Code
```

### Live-reloading for quick feedback

When working on an output language, you'll want to view generated
output as you edit. Use `npm start` to watch for changes and
recompile and rerun `quicktype` for live feedback. For example, if you're
developing a new renderer for `fortran`, you could use the following command to
rebuild and reinvoke `quicktype` as you implement your renderer:

```bash
npm start -- ""--lang fortran pokedex.json""
```

The command in quotes is passed to `quicktype`, so you can render local `.json`
files, URLs, or add other options.

### Test

```bash
# Run full test suite
npm run test

# Test a specific language (see test/languages.ts)
FIXTURE=golang npm test

# Test a single sample or directory
FIXTURE=swift npm test -- pokedex.json
FIXTURE=swift npm test -- test/inputs/json/samples
```
","quicktype.io generates strongly-typed models and serializers from JSON, JSON
Schema, TypeScript, and GraphQL queries. It's a breeze to work with JSON type-
safely in many programming languages. The web app also works offline and doesn't
send your sample data over the Internet."
2072,"Generate types and converters from JSON, Schema, and GraphQL","![](https://raw.githubusercontent.com/quicktype/quicktype/master/media/quicktype-logo.svg?sanitize=true)

[![npm version](https://badge.fury.io/js/quicktype.svg)](https://badge.fury.io/js/quicktype)
![Build status](https://github.com/quicktype/quicktype/actions/workflows/master.yaml/badge.svg)

`quicktype` generates strongly-typed models and serializers from JSON, JSON Schema, TypeScript, and [GraphQL queries](https://blog.quicktype.io/graphql-with-quicktype/), making it a breeze to work with JSON type-safely in many programming languages.

-   [Try `quicktype` in your browser](https://app.quicktype.io).
-   Read ['A first look at quicktype'](http://blog.quicktype.io/first-look/) for more introduction.
-   If you have any questions, check out the [FAQ](FAQ.md) first.

### Supported Inputs

| JSON | JSON API URLs | [JSON Schema](https://app.quicktype.io/#s=coordinate) |
| ---- | ------------- | ----------------------------------------------------- |

| TypeScript | GraphQL queries |
| ---------- | --------------- |

### Target Languages

| [Ruby](https://app.quicktype.io/#l=ruby) | [JavaScript](https://app.quicktype.io/#l=js) | [Flow](https://app.quicktype.io/#l=flow) | [Rust](https://app.quicktype.io/#l=rust) | [Kotlin](https://app.quicktype.io/#l=kotlin) |
| ---------------------------------------- | -------------------------------------------- | ---------------------------------------- | ---------------------------------------- | -------------------------------------------- |

| [Dart](https://app.quicktype.io/#l=dart) | [Python](https://app.quicktype.io/#l=python) | [C#](https://app.quicktype.io/#l=cs) | [Go](https://app.quicktype.io/#l=go) | [C++](https://app.quicktype.io/#l=cpp) |
| ---------------------------------------- | -------------------------------------------- | ------------------------------------ | ------------------------------------ | -------------------------------------- |

| [Java](https://app.quicktype.io/#l=java) | [TypeScript](https://app.quicktype.io/#l=ts) | [Swift](https://app.quicktype.io/#l=swift) | [Objective-C](https://app.quicktype.io/#l=objc) | [Elm](https://app.quicktype.io/#l=elm) |
| ---------------------------------------- | -------------------------------------------- | ------------------------------------------ | ----------------------------------------------- | -------------------------------------- |

| [JSON Schema](https://app.quicktype.io/#l=schema) | [Pike](https://app.quicktype.io/#l=pike) | [Prop-Types](https://app.quicktype.io/#l=javascript-prop-types) | [Haskell](https://app.quicktype.io/#l=haskell) |     |
| ------------------------------------------------- | ---------------------------------------- | --------------------------------------------------------------- | ---------------------------------------------- | --- |

_Missing your favorite language? Please implement it!_

## Installation

There are many ways to use `quicktype`. [app.quicktype.io](https://app.quicktype.io) is the most powerful and complete UI. The web app also works offline and doesn't send your sample data over the Internet, so paste away!

For the best CLI, we recommend installing `quicktype` globally via `npm`:

```bash
npm install -g quicktype
```

Other options:

-   [Homebrew](http://formulae.brew.sh/formula/quicktype) _(infrequently updated)_
-   [Xcode extension](https://itunes.apple.com/us/app/paste-json-as-code-quicktype/id1330801220?mt=12)\*
-   [VSCode extension](https://marketplace.visualstudio.com/items/quicktype.quicktype)\*
-   [Visual Studio extension](https://marketplace.visualstudio.com/items?itemName=typeguard.quicktype-vs)\*

<small>\* limited functionality</small>

## Using `quicktype`

```bash
# Run quicktype without arguments for help and options
quicktype

# quicktype a simple JSON object in C#
echo '{ ""name"": ""David"" }' | quicktype -l csharp

# quicktype a top-level array and save as Go source
echo '[1, 2, 3]' | quicktype -o ints.go

# quicktype a sample JSON file in Swift
quicktype person.json -o Person.swift

# A verbose way to do the same thing
quicktype \
  --src person.json \
  --src-lang json \
  --lang swift \
  --top-level Person \
  --out Person.swift

# quicktype a directory of samples as a C++ program
# Suppose ./blockchain is a directory with files:
#   latest-block.json transactions.json marketcap.json
quicktype ./blockchain -o blockchain-api.cpp

# quicktype a live JSON API as a Java program
quicktype https://api.somewhere.com/data -o Data.java
```

### Generating code from JSON schema

The recommended way to use `quicktype` is to generate a JSON schema from sample data, review and edit the schema, commit the schema to your project repo, then generate code from the schema as part of your build process:

```bash
# First, infer a JSON schema from a sample.
quicktype pokedex.json -l schema -o schema.json

# Review the schema, make changes,
# and commit it to your project repo.

# Finally, generate model code from schema in your
# build process for whatever languages you need:
quicktype -s schema schema.json -o src/ios/models.swift
quicktype -s schema schema.json -o src/android/Models.java
quicktype -s schema schema.json -o src/nodejs/Models.ts

# All of these models will serialize to and from the same
# JSON, so different programs in your stack can communicate
# seamlessly.
```

### Generating code from TypeScript (Experimental)

You can achieve a similar result by writing or generating a [TypeScript](http://www.typescriptlang.org/) file, then quicktyping it. TypeScript is a typed superset of JavaScript with simple, succinct syntax for defining types:

```typescript
interface Person {
    name: string;
    nickname?: string; // an optional property
    luckyNumber: number;
}
```

You can use TypeScript just like JSON schema was used in the last example:

```bash
# First, infer a TypeScript file from a sample (or just write one!)
quicktype pokedex.json -o pokedex.ts --just-types
# Review the TypeScript, make changes, etc.
quicktype pokedex.ts -o src/ios/models.swift
```

### Calling `quicktype` from JavaScript

You can use `quicktype` as a JavaScript function within `node` or browsers. First add the `quicktype-core` package:

```bash
$ npm install quicktype-core
```

In general, first you create an `InputData` value with one or more JSON samples, JSON schemas, TypeScript sources, or other supported input types. Then you call `quicktype`, passing that `InputData` value and any options you want.

```javascript
import {
    quicktype,
    InputData,
    jsonInputForTargetLanguage,
    JSONSchemaInput,
    FetchingJSONSchemaStore
} from ""quicktype-core"";

async function quicktypeJSON(targetLanguage, typeName, jsonString) {
    const jsonInput = jsonInputForTargetLanguage(targetLanguage);

    // We could add multiple samples for the same desired
    // type, or many sources for other types. Here we're
    // just making one type from one piece of sample JSON.
    await jsonInput.addSource({
        name: typeName,
        samples: [jsonString]
    });

    const inputData = new InputData();
    inputData.addInput(jsonInput);

    return await quicktype({
        inputData,
        lang: targetLanguage
    });
}

async function quicktypeJSONSchema(targetLanguage, typeName, jsonSchemaString) {
    const schemaInput = new JSONSchemaInput(new FetchingJSONSchemaStore());

    // We could add multiple schemas for multiple types,
    // but here we're just making one type from JSON schema.
    await schemaInput.addSource({ name: typeName, schema: jsonSchemaString });

    const inputData = new InputData();
    inputData.addInput(schemaInput);

    return await quicktype({
        inputData,
        lang: targetLanguage
    });
}

async function main() {
    const { lines: swiftPerson } = await quicktypeJSON(""swift"", ""Person"", jsonString);
    console.log(swiftPerson.join(""\n""));

    const { lines: pythonPerson } = await quicktypeJSONSchema(""python"", ""Person"", jsonSchemaString);
    console.log(pythonPerson.join(""\n""));
}

main();
```

The argument to `quicktype` is a complex object with many optional properties. [Explore its definition](https://github.com/quicktype/quicktype/blob/master/src/quicktype-core/Run.ts#L119) to understand what options are allowed.

## Contributing

`quicktype` is [Open Source](LICENSE) and we love contributors! In fact, we have a [list of issues](https://github.com/quicktype/quicktype/issues?utf8=✓&q=is%3Aissue+is%3Aopen+label%3Ahelp-wanted) that are low-priority for us, but for which we'd happily accept contributions. Support for new target languages is also strongly desired. If you'd like to contribute, need help with anything at all, or would just like to talk things over, come [join us on Slack](http://slack.quicktype.io/).

### Setup, Build, Run

`quicktype` is implemented in TypeScript and requires `nodejs` and `npm` to build and run.

First, install `typescript` globally via `npm`:

Clone this repo and do:

#### macOS / Linux

```bash
nvm use
npm install
script/quicktype # rebuild (slow) and run (fast)
```

#### Windows

```bash
npm install --ignore-scripts # Install dependencies
npm install -g typescript # Install typescript globally
tsc --project src/cli # Rebuild
node dist\cli\index.js # Run
```

### Edit

Install [Visual Studio Code](https://code.visualstudio.com/), open this
workspace, and install the recommended extensions:

```bash
code . # opens in VS Code
```

### Live-reloading for quick feedback

When working on an output language, you'll want to view generated
output as you edit. Use `npm start` to watch for changes and
recompile and rerun `quicktype` for live feedback. For example, if you're
developing a new renderer for `fortran`, you could use the following command to
rebuild and reinvoke `quicktype` as you implement your renderer:

```bash
npm start -- ""--lang fortran pokedex.json""
```

The command in quotes is passed to `quicktype`, so you can render local `.json`
files, URLs, or add other options.

### Test

```bash
# Run full test suite
npm run test

# Test a specific language (see test/languages.ts)
FIXTURE=golang npm test

# Test a single sample or directory
FIXTURE=swift npm test -- pokedex.json
FIXTURE=swift npm test -- test/inputs/json/samples
```
","quicktype.io generates strongly-typed models and serializers from JSON, JSON
Schema, TypeScript, and GraphQL queries. It's a breeze to work with JSON type-
safely in many programming languages. The web app also works offline and doesn't
send your sample data over the Internet."
358,":leaves: A curated list of awesome MongoDB resources, libraries, tools and applications","![Awesome MongoDB](logo.png)

# Awesome MongoDB [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

[![Build status](https://img.shields.io/travis/ramnes/awesome-mongodb.svg)](https://travis-ci.org/ramnes/awesome-mongodb)

> A curated list of awesome MongoDB resources, libraries, tools and applications

Inspired by the [awesome](https://github.com/sindresorhus/awesome) list thing. Feel free to improve this list by [contributing](CONTRIBUTING.md)!

## Table of Contents
 - [Resources](#resources)
   - [Documentation](#documentation)
   - [Articles](#articles)
   - [Books](#books)
   - [Talks](#talks)
   - [Tutorials](#tutorials)
   - [More](#more)
 - [Libraries](#libraries)
   - [C](#c)
   - [C++](#c-1)
   - [C#/.NET](#cnet)
   - [Delphi](#delphi)
   - [Elixir](#elixir)
   - [Erlang](#erlang)
   - [Go](#go)
   - [Haskell](#haskell)
   - [Java](#java)
   - [JavaScript](#javascript)
   - [Julia](#julia)
   - [Kotlin](#kotlin)
   - [Lisp](#lisp)
   - [Mathematica](#mathematica)
   - [PHP](#php)
   - [Python](#python)
   - [R](#r)
   - [Ruby](#ruby)
   - [Rust](#rust)
   - [Scala](#scala)
 - [Tools](#tools)
   - [Administration](#administration)
   - [Data](#data)
   - [Deployment](#deployment)
   - [Desktop](#desktop)
   - [Development](#development)
   - [Monitoring](#monitoring)
   - [Low-Code](#low-code)
   - [Shell](#shell)
   - [Web](#web)
 - [Applications](#applications)

## Resources
### Documentation
 - [MongoDB Server Introduction](https://www.mongodb.com/docs/manual/introduction/)
 - [MongoDB Server Documentation](https://www.mongodb.com/manual/)
 - [MongoDB Tutorials](https://www.mongodb.com/docs/manual/tutorial/)
 - [MongoDB Guides](https://www.mongodb.com/docs/guides/)
 - [MongoDB Developer Center](https://www.mongodb.com/developer/)
 - [MongoDB Driver Documentation](https://www.mongodb.com/docs/drivers/)
 - [MongoDB Connectors](https://www.mongodb.com/connectors/)

### Articles

 - [14 Things I Wish I'd Known When Starting with MongoDB (Phil Factor)](https://www.infoq.com/articles/Starting-With-MongoDB/)
 - [A Custom WordPress Dashboard with MongoDB Atlas, Microsoft Azure, & Serverless Functions (Ahmad Awais)](https://ahmadawais.com/wordpress-mongodb-atlas-microsoft-azure-serverless-functions/)
 - [Building with Patterns](https://www.mongodb.com/blog/post/building-with-patterns-a-summary) - Series of articles regarding MongoDB Design Patterns and common use case of each Design Pattern with real world examples.
 - [Five Things About Scaling MongoDB (A. Jesse Jiryu Davis, MongoDB Inc.)](https://emptysqua.re/blog/five-things/) - Scale 101
 - [Optimizing MongoDB Compound Indexes (A. Jesse Jiryu Davis, MongoDB Inc.)](https://emptysqua.re/blog/optimizing-mongodb-compound-indexes/) - Everything you need/have to know about indexes
 - [Server Discovery And Monitoring In PyMongo, Perl, And C (A. Jesse Jiryu Davis, MongoDB Inc.) ](https://emptysqua.re/blog/server-discovery-and-monitoring-in-pymongo-perl-and-c/)
 - [Monitoring MongoDB performance metrics (Jean-Mathieu Saponaro, Datadog)](https://www.datadoghq.com/blog/monitoring-mongodb-performance-metrics-wiredtiger/)
 - [Tuning MongoDB performance for production systems (Marek Trunkat, Apify)](https://blog.apify.com/tuning-mongodb-performance/) - The techniques and MongoDB Cloud features to debug performance issues and expose sub-optimal queries

### Books
 - [50 Tips and Tricks for MongoDB Developers](https://www.oreilly.com/library/view/50-tips-and/9781449306779/) - Advanced MongoDB tips and tricks, given by a MongoDB inc. engineer
 - [Builder Book](https://builderbook.org) - Learn how to build a full stack JavaScript web app from scratch
 - [MongoDB Applied Design Patterns (Rick Copeland)](https://www.oreilly.com/library/view/mongodb-applied-design/9781449340056/)
 - [Practical MongoDB Aggregations E-Book](https://www.practical-mongodb-aggregations.com/) - Free e-book: How to develop effective and optimal data manipulation and analytics pipelines
 - [The Little MongoDB Book](https://github.com/mongodb-developer/the-little-mongodb-book) - Basic introduction
 - [SaaS Boilerplate Book](https://builderbook.org/book) - Learn how to build a production-ready SaaS web app from scratch

### Talks
 - [MongoDB Schema Design (Tugdual Grall, MongoDB Inc.)](https://www.youtube.com/watch?v=csKBT8zkRf0) [47']
 - [Partial and Fuzzy Matching with MongoDB (John Page, MongoDB Inc.)](https://www.youtube.com/watch?v=hXbLHInH5qU) [35']
 - [Scaling MongoDB on Amazon Web Services (Michael Saffitz, Apptentive)](https://www.youtube.com/watch?v=bkjVhEQocFI) [50']

### Tutorials
 - [Kubernetes examples](https://github.com/kubernetes/examples/tree/master/staging/nodesjs-mongodb) - Deployment tutorial of a basic Node.js and MongoDB web stack on Kubernetes
 - [Deploy a Highly-Available MongoDB Replica Set on AWS](https://eladnava.com/deploy-a-highly-available-mongodb-replica-set-on-aws/)
 - [Sharded Cluster with Docker Compose](https://github.com/minhhungit/mongodb-cluster-docker-compose)

### More
 - [MongoDB source code](https://github.com/mongodb/mongo)
 - [MongoDB University](https://learn.mongodb.com/) - Certifications and free online courses
 - [MongoDB 101 by Academy 3T](https://studio3t.com/academy/) - Free and self-paced MongoDB courses for beginners

## Libraries
### C
 - [mongo-c-driver](https://github.com/mongodb/mongo-c-driver) - Official C driver

### C++
 - [mongo-cxx-driver](https://github.com/mongodb/mongo-cxx-driver) - Official C++ driver

### C#/.NET ###
 - [mongo-csharp-driver](https://github.com/mongodb/mongo-csharp-driver) - Official C# driver
 - [mongo-queue-csharp](https://github.com/dominionenterprises/mongo-queue-csharp) - C# message queue on top of MongoDB
 - [MongoDB Messaging](https://github.com/loresoft/MongoDB.Messaging) - Lightweight queue pub/sub processing library
 - [MongoRepository](https://github.com/RobThree/MongoRepository) - Repository abstraction layer on top of the C# driver

### Delphi
 - [TMongoWire](https://github.com/stijnsanders/TMongoWire) - Minimal community Delphi driver

### Elixir
 - [mongodb](https://github.com/kobil-systems/mongodb) - Community Elixir driver
 - [mongodb_ecto](https://github.com/kobil-systems/mongodb_ecto) - Adapter for the Ecto database wrapper

### Erlang
 - [mongodb-erlang](https://github.com/comtihon/mongodb-erlang) - Community Erlang driver

### Go
 - [Bongo](https://github.com/go-bongo/bongo) - ODM based on mgo
 - [mgo](https://github.com/globalsign/mgo) - Community Go driver
 - [minquery](https://github.com/icza/minquery) - MongoDB cursor that paginates
 - [mongo-go-driver](https://github.com/mongodb/mongo-go-driver) - Official Go driver

### Haskell
 - [mongodb](https://github.com/mongodb-haskell/mongodb/) - Community Haskell driver

### Java
 - [Jongo](https://github.com/bguerout/jongo) - Query in Java as in Mongo shell
 - [Hibernate OGM](https://github.com/hibernate/hibernate-ogm) - The power and simplicity of JPA for NoSQL datastores
 - [mongo-java-driver](https://github.com/mongodb/mongo-java-driver) - Official Java driver
 - [mongo-queue-java](https://github.com/yonderblue/mongo-queue-java) - Java message queue on top of MongoDB
 - [mongoFS](https://github.com/dbuschman7/mongoFS) - An enhancement of GridFS to allow for more features and capabilities
 - [Mongojack](https://github.com/mongojack/mongojack) - Based on Jackson, allows you to easily handle your mongo objects as POJOs
 - [Morphia](https://github.com/MorphiaOrg/morphia) - Java ODM
 - [Morphium](https://github.com/sboesebeck/morphium) - Java ODM and caching layer
 - [Mungbean](https://github.com/jannehietamaki/mungbean) - Community driver for languages running on the JVM
 - [Spring Data MongoDB](https://github.com/spring-projects/spring-data-mongodb) - Spring based, object-document support and repositories

### JavaScript
 - [Camo](https://github.com/scottwrobinson/camo) - Class-based ES6 ODM for Mongo-like databases
 - [DeriveJS](https://github.com/yuval-a/derivejs) - Reactive ODM that uses Javascript Proxies to enable transparent DB persistence
 - [MEAN.JS](https://github.com/meanjs/mean) - Full stack based on MongoDB, Express, AngularJS, and Node.js
 - [MERN (mern-starter)](https://github.com/Hashnode/mern-starter) - Full stack based on MongoDB, Express, React and Node.js
 - [Meteor](https://github.com/meteor/meteor) - Real-time/reactive client-server framework based on MongoDB, with lots of features
 - [Mongoose](https://github.com/Automattic/mongoose) - Node.js asynchronous ODM
 - [CASL Mongoose](https://github.com/stalniy/casl/tree/master/packages/casl-mongoose) - Permissions management library integrated with Mongoose
 - [mongration](https://github.com/awapps/mongration) - Node.js migration framework
 - [Moonridge](https://github.com/capaj/Moonridge) - Framework with live querying on top of Mongoose and socket.io
 - [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) - Official Node.js driver

### Julia
 - [Mongo.jl](https://github.com/Lytol/Mongo.jl) - C driver bindings
 
### Kotlin
- [kmongo](https://github.com/Litote/kmongo) - Kotlin toolkit based on the Java driver

### Lisp
 - [cl-mongo](https://github.com/fons/cl-mongo) - Community Common Lisp interface
 - [mongo-cl-driver](https://github.com/archimag/mongo-cl-driver) Community Common Lisp driver
 - [mongo-el](https://github.com/emacsorphanage/mongo) - Community Emacs Lisp driver

### Mathematica
 - [MongoDBLink](https://github.com/zbjornson/MongoDBLink) - Community Mathematica driver

### PHP
 - [eloquent-mongodb-repository](https://github.com/nilportugues/eloquent-mongodb-repository) - Repository implementation built on top of laravel-mongodb
 - [laravel-mongodb](https://github.com/jenssegers/laravel-mongodb) - Eloquent model and query builder for Laravel
 - [mongodb-repository](https://github.com/nilportugues/mongodb-repository) - Repository implementation
 - [PHP Driver](https://github.com/mongodb/mongo-php-driver) - Official PHP driver
 - [PHPMongo ODM](https://github.com/sokil/php-mongo) - ODM based on the PHP Mongo PECL extension
 - [PHPMongo Migrator](https://github.com/sokil/php-mongo-migrator) - Migration tool based on PHPMongo ODM
 - [yadm](https://github.com/formapro/yadm) - Fast schemaless ODM

### Python
 - [Beanie](https://github.com/roman-right/beanie) - Asynchronous ODM based on [Motor](https://motor.readthedocs.io/en/stable/) and [Pydantic](https://pydantic-docs.helpmanual.io/), which supports migrations out of the box
 - [Djongo](https://github.com/nesdis/djongo) - MongoDB connector for Django compatible with Django ORM
 - [Flask-Stupe](https://github.com/numberly/flask-stupe) - Flask extension that adds PyMongo support to Flask
 - [Mongo-Thingy](https://github.com/numberly/mongo-thingy) - Powerful schema-less ODM for MongoDB and Python (sync + async)
 - [MongoEngine](https://github.com/MongoEngine/mongoengine) - ODM on top of PyMongo
 - [MongoLog](https://github.com/puentesarrin/mongodb-log) - MongoDB logging handler
 - [Motor](https://github.com/mongodb/motor) - Official non-blocking Python driver for Tornado or asyncio
 - [PyMongo](https://github.com/mongodb/mongo-python-driver) - Official Python driver
 - [PyMongoExplain](https://github.com/mongodb-labs/pymongoexplain/) - A wrapper for PyMongo's Collection object that makes it easy to run `explain` on your queries.
 - [minimongo](https://github.com/slacy/minimongo) - A lightweight, schemaless, Pythonic Object-Oriented interface
 - [ODMantic](https://github.com/art049/odmantic) - Asynchronous ODM on top of pydantic
 - [scrapy-mongodb](https://github.com/sebdah/scrapy-mongodb) - MongoDB pipeline for Scrapy
 - [μMongo](https://github.com/Scille/umongo) - Driver-independent (async/sync) ODM based on marshmallow

### R
 - [mongolite](https://github.com/jeroen/mongolite) - Fast and simple client for R

### Ruby
 - [awesome_explain](https://github.com/sandboxws/awesome_explain) - A simple global method to explain Mongoid queries
 - [mongo-ruby-driver](https://github.com/mongodb/mongo-ruby-driver) - Official Ruby driver
 - [Mongoid](https://github.com/mongodb/mongoid) - ODM framework

### Rust
 - [mongodb-rust-driver](https://github.com/mongodb/mongo-rust-driver) - Official Rust driver

### Scala
 - [driver-scala](https://github.com/mongodb/mongo-java-driver/tree/master/driver-scala) - Official Scala driver
 - [ReactiveMongo](https://github.com/ReactiveMongo/ReactiveMongo) - Non-blocking Scala driver
 - [Spark-MongoDB](https://github.com/Stratio/Spark-MongoDB) - Read/write data with Spark SQL

## Tools
### Administration
 - [k8s-backup-mongodb](https://github.com/tuladhar/k8s-backup-mongodb) - Schedule MongoDB backups to S3 with a Kubernetes CronJob.
 - [mgob](https://github.com/stefanprodan/mgob) - Full-featured MongoDB dockerized backup agent
 - [mongoctl](https://github.com/mongolab/mongoctl) - Manage MongoDB servers and replica sets using JSON configurations
 - [MongoDB Smasher](https://github.com/duckie/mongo_smasher) - Generate randomized datasets and benchmark your setup
 - [mongodb-tools](https://github.com/jwilder/mongodb-tools) - Three neat Python scripts to work with collections and indexes
 - [mtools](https://github.com/rueckstiess/mtools) - Collection of scripts to set up test environments and visualize log files
 - [nginx-gridfs](https://github.com/mdirolf/nginx-gridfs) - Nginx module for serving files from GridFS
 - [nginx-mongodb-rest](https://github.com/minhajuddin/nginx-mongodb-rest) - REST client written as an Nginx module
 - [pt-mongodb-query-digest](https://www.percona.com/doc/percona-toolkit/LATEST/pt-mongodb-query-digest.html) - Aggregates queries from query profiler and reports query usage statistics
 - [pt-mongodb-summary](https://www.percona.com/doc/percona-toolkit/LATEST/pt-mongodb-summary.html) - MongoDB cluster status overview command line tool

Services:
 - [Compose](https://www.compose.com/) - IBM DBaaS offer (has other database types too)
 - [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) - MongoDB Inc. DBaaS offer (works with AWS, Azure, or GCP)
 - [MongoDB Cloud Manager](https://www.mongodb.com/cloud/cloud-manager) - MongoDB Inc. databases management offer
 - [ObjectRocket](https://www.objectrocket.com/) - Rackspace DBaaS offer (has other database types too)
 - [Scalegrid](https://scalegrid.io) - Fully managed DBaaS (with option to bring your own Azure/AWS account)

### Data
 - [mongo-connector](https://github.com/yougov/mongo-connector) - Streaming replication to Elasticsearch, Solr, or MongoDB
 - [mongo_fdw](https://github.com/EnterpriseDB/mongo_fdw) - PostgreSQL foreign data wrapper
 - [mongo-hadoop](https://github.com/mongodb/mongo-hadoop) - Hadoop connector
 - [Mongolastic](https://github.com/ozlerhakan/mongolastic) - MongoDB to Elasticsearch (and vice-versa) migration tool
 - [MongoMultiMaster](https://github.com/rick446/mmm) - Multi-master replication

Services:
 - [ProvenDB](https://www.provendb.com/) -  Blockchain based Data integrity solution for MongoDB

### Deployment
 - [ansible-role-mongodb](https://github.com/UnderGreen/ansible-role-mongodb) - Ansible role
 - [chef-mongodb](https://github.com/edelight/chef-mongodb) - Chef cookbook
 - [DockerHub Official Docker Image](https://hub.docker.com/_/mongo/)
 - [Helm Chart](https://github.com/helm/charts/tree/master/stable/mongodb)
 - [puppet-mongodb](https://github.com/voxpupuli/puppet-mongodb) - Puppet module (formerly puppetlabs-mongodb)

Services:
 - [Cluster to cluster sync](https://www.mongodb.com/products/cluster-to-cluster-sync) - MongoDB Inc. solution for continuous data sync between separate clusters

### Desktop
 - [Compass](https://github.com/mongodb-js/compass) - Free Cross-platform GUI from MongoDB
 - [MongoDB for VS Code](https://marketplace.visualstudio.com/items?itemName=mongodb.mongodb-vscode) - Connect to MongoDB and prototype queries from VS Code
 - [MongoHub](https://github.com/jeromelebel/MongoHub-Mac) - Mac native client

Services:
 - [DataGrip](https://www.jetbrains.com/datagrip/) - Cross-platform JetBrains' IDE
 - [Mingo](https://mingo.io/) - MongoDB Admin. Intuitive UI. Fast. Reliable
 - [Moon Modeler](http://www.datensen.com/) - Data modeling tool for MongoDB and relational databases
 - [NoSQLBooster](https://nosqlbooster.com) - Feature-rich but easy-to-use cross-platform IDE (formerly MongoBooster)
 - [QueryAssist](https://queryassist.com) - Modern and powerful GUI tool, cross-platform and easy-to-use
 - [Studio 3T](https://studio3t.com/) - Cross-platform GUI, stable and powerful (formerly MongoChef and Robo 3T)
 - [TablePlus](https://tableplus.com/) - Native, lightweight GUI on macOS

### Development
 - [C# Analyzer](https://github.com/mongodb/mongo-csharp-analyzer) - View the MongoDB Query API equivalents of your builder expressions in Visual Studio
 - [mgodatagen](https://github.com/feliixx/mgodatagen) - Random data generator
 - [Mongo Playground](https://github.com/feliixx/mongoplayground) - Online query playground
 - [Mongo Seeding](https://github.com/pkosiec/mongo-seeding) - Node.js library, CLI and Docker image for populating databases using JS and JSON files
 - [Mongoeye](https://github.com/mongoeye/mongoeye) - Schema and data analyzer: explore data in your collections
 - [Variety](https://github.com/variety/variety) - Schema analyzer: see what fields are in your collection and what's their content
 - [VS Code Extension](https://github.com/mongodb-js/vscode)

Services:
 - [MongoDB Atlas App Services](https://www.mongodb.com/atlas/app-services) - MongoDB Inc. solution to run code without the operational overhead
 - [MongoDB Realm](https://www.mongodb.com/realm) - MongoDB Inc. solution for mobile data sync

### Monitoring
 - [check_mongodb](https://github.com/dalenys/check_mongodb) - Nagios plugin (in Bash)
 - [mongo-monitor](https://github.com/dwmkerr/mongo-monitor) - Simple monitoring CLI
 - [mongo-munin](https://github.com/erh/mongo-munin) - Collection of Munin plugins
 - [Mongoop](https://github.com/Lujeni/mongoop) - Long operations monitoring and alerting
 - [mongomon](https://github.com/pcdummy/mongomon) - More Munin plugins
 - [Motop](https://github.com/tart/motop) - MongoDB top clone
 - [mtop](https://github.com/beaufour/mtop) - Another top clone
 - [nagios-plugin-mongodb](https://github.com/mzupan/nagios-plugin-mongodb) - Nagios plugin (in Python)
 - [Percona Monitoring and Management](https://www.percona.com/software/database-tools/percona-monitoring-and-management) - Free and open-source platform for managing and monitoring databases performances
 - [mongotail](https://github.com/mrsarm/mongotail) - Log all MongoDB queries in a ""tail""able way

Services:

 - [Datadog](https://www.datadoghq.com/blog/monitor-mongodb-performance-with-datadog/) - SaaS-based monitoring
 - [Solarwindws Database Performance Monitor](https://www.solarwinds.com/database-performance-monitor) - SaaS-based query performance analytics and monitoring

### Low-Code

> 💡 These tools are not necessarily made for MongoDB in particular, but support it.

 - [Appsmith](https://github.com/appsmithorg/appsmith) - Open-source Retool alternative
 - [Appwrite](https://github.com/appwrite/appwrite) - Open-source Firebase alternative
 - [Budibase](https://github.com/Budibase/budibase) - Open-source Retool alternative
 - [ILLA Builder](https://github.com/illacloud/illa-builder) - Open-source Retool alternative
 - [Tooljet](https://github.com/ToolJet/ToolJet) - Open-source Retool alternative

Services:
- [DronaHQ](https://www.dronahq.com/) - Retool alternative
- [Retool](https://retool.com/) - Drag-and-drop editor with pre-built components to build internal tools

### Shell
 - [MongoDB Atlas CLI](https://github.com/mongodb/mongodb-atlas-cli) - Official Atlas API command-line client
 - [mongosh](https://github.com/mongodb-js/mongosh) - Official command-line client

### Web
 - [adminMongo](https://github.com/mrvautin/adminMongo) - Web-based user interface to handle connections and databases needs
 - [mongo-express](https://github.com/mongo-express/mongo-express) - Web-based admin interface built with Express
 - [mongoadmin](https://github.com/thomasst/mongoadmin) - Admin interface built with Django
 - [Mongoku](https://github.com/huggingface/Mongoku) - MongoDB client for the web
 - [mongri](https://github.com/dongri/mongri) - Web-based user interface written in JavaScript
 - [Rockmongo](https://github.com/iwind/rockmongo) - PHPMyAdmin for MongoDB, sort of

Services:

 - [HumongouS.io](https://www.humongous.io) - Easy online GUI and data-visualization dashboards

## Applications

Those open-source applications have MongoDB somewhere in their stack:

 - [Builder Book App](https://github.com/async-labs/builderbook) - Web app to publish books or documentation built with React and Express
 - [CodeCombat](https://github.com/codecombat/codecombat) - Multiplayer programming game for learning how to code
 - [Countly](https://github.com/countly/countly-server) - Mobile & web analytics and marketing platform built with Node.js
 - [FactorJS](https://github.com/fiction-com/factor) - JavaScript CMS built with Mongoose
 - [GrandNode](https://github.com/grandnode/grandnode) - Multi-platform e-commerce shopping cart built with ASP.NET
 - [Leanote](https://github.com/leanote/leanote) - Evernote clone built with Go
 - [NodeBB](https://github.com/NodeBB/NodeBB) - Node.js based forum software (""built for the modern web"")
 - [Reaction](https://github.com/reactioncommerce/reaction) - Event-driven, real-time commerce platform built with ES6
 - [SaaS Boilerplate](https://github.com/async-labs/saas) - Boilerplate for SaaS products, built with TypeScript, React and Express
 - [uptime](https://github.com/fzaninotto/uptime) - Remote monitoring application built with Node.js and Bootstrap
 - [WildDuck Mail Server](https://github.com/nodemailer/wildduck) - Scalable high availability email server that uses MongoDB for email storage

## License
[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [Guillaume Gelin](https://github.com/ramnes) has waived all copyright and related or neighboring rights to this work.
","summarize:![Awesome MongoDB](logo.png) # Awesome MongoDB [![Awesome](https://cdn
.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/
badge.svg) # awesome MongoDB resources, libraries, tools and applications."
648,A one-stop Destination✏️ for all your Competitive Programming Resources.📗📕    Refer CONTRIBUTING.md for contributions,"![Banner](https://socialify.git.ci/kothariji/competitive-programming/image?description=1&forks=1&issues=1&language=1&owner=1&pattern=Plus&pulls=1&stargazers=1&theme=Dark)

# Competitive Programming :high_brightness::high_brightness:

Hello Programmers💻,
A one-stop destination for all your Competitive Programming Resources.

## :pushpin::pushpin: What is Competitive Programming? :pushpin::pushpin:

According to me, competitive programming is a sport. A sport based on problem-solving skills, thinking ability, speed testing, regularity and to be precise. Competitive Programming will help you build logic and implement that logic to find solutions to a real-world problem. Brainstorming upon your code will increase your coding skills as well as it will help to expand your thinking capacity. Thus practicing Competitive Programming on day to day basis helps you in mastering that particular language. And believe us, if you are playing this sport regularly, you are already prepared for the technical rounds of the Interviews. So now let's dive into the ocean of **Competitive Programming.**

## Platform to practice Competitive Programming :telescope::telescope:

- #### [HackerRank (Must do for a Beginner)](https://www.hackerrank.com/)
- #### [CodeChef](https://www.codechef.com/)
- #### [CodeForces](https://codeforces.com/)
- #### [HackerEarth](https://www.hackerearth.com/)
- #### [Project Euler(For Mathematics)](https://projecteuler.net/)
- #### [GeeksForGeeks](https://practice.geeksforgeeks.org/)
- #### [LeetCode (For Data-Structures and Algos)](https://leetcode.com/)
- #### [AtCoder](https://atcoder.jp/)
- #### [interviewBit](https://www.interviewbit.com/)
- #### [Sphere Online Judge(SPOJ)](https://www.spoj.com/)
- #### [TopCoder](https://www.topcoder.com/community/competitive-programming/)
- #### [Leetcode (for monthly challenges)](https://www.leetcode.com/)
- #### [CSES](https://cses.fi/problemset/)
- #### [binarysearch](https://www.binarysearch.com/)
- #### [Coderbyte](https://coderbyte.com/#courses)
## BENEFITS OF COMPETITIVE PROGRAMMING

The skills needed for competitive programming have long-lasting benefits to your career as a developer. There are numerous benefits to participating in competitive programming, including:

Getting hired: Participating in competitive programming can make you a desirable candidate for companies. When you participate in large competitions like the ACM International Collegiate Programming Contest, you have a good chance of being on the radar of companies like Apple, Facebook, IBM, Google, and more. Tech companies track competitions and events to find potential employees. Large competitive programming events are extremely prestigious and difficult to succeed in, so if you do well, that is an indicator of your technical talent and abilities. That’s why many companies have sponsored programming competitions.

Teamwork skills: When you participate in these competitions, you will often work in teams, meaning that you learn how to interact with teammates during high-pressure moments. This is an incredibly important skill. When you are working as a software engineer, you will almost always work with other individuals, meaning that companies care a lot about your communication and team skills. Also, most teams will have a leader. If you are the leader of the team, this demonstrates management skills, making you even more of a desirable candidate. Companies want to know that you can work effectively and comfortably with your teammates.

Interview prep: When you are trying to get an engineering job, companies will test you for your knowledge of data structures and algorithms. When you participate in competitive programming, you work to develop an advanced understanding of these concepts. Furthermore, the environment for the coding interview and competitive programming is quite similar. They are both high-pressure environments, in which you have to engage in problem-solving. While many others may not be able to adjust to this environment, your competition experience gives you an advantage.

## Most Famous Programming Contests :crown: :crown:

**Upcomming contests schedule** - https://clist.by/

- [Google KickStart🏆](https://codingcompetitions.withgoogle.com/kickstart)
- [ACM ICPC (Olympics of Programming)🏆](https://icpc.global/)
- [Google CodeJam🏆](https://codingcompetitions.withgoogle.com/codejam)
- [FaceBook Hacker Cup🏆](https://www.facebook.com/hackercup/contest)
- [TCS CodeVita🏆](https://campuscommune.tcs.com/en-in/intro/contests/codevita-season-9)
- [Google HashCode🏆](https://codingcompetitions.withgoogle.com/hashcode/)
- [CodeChef's SnackDown🏆](https://www.codechef.com/snackdown)
- [Coding Block's CodeSule🏆](https://hack.codingblocks.com/app/competitions/1)
- Codechef Long Challenge🏆
- Codechef Cook-Off 🏆
- Codechef Lunchtime🏆
- Codeforces Rounds Div1 & Div2 & Div3 & Educational Codeforces Round🏆

## Books :high_brightness::high_brightness:

- [Competitive Programming 3📚](https://cpbook.net/)
- [Data Structures and Algorithms Made Easy📚](https://www.amazon.in/Data-Structures-Algorithms-Made-Easy/dp/819324527X) - by Narasimha Karumanchi
- [Cracking the Coding Interview📚](http://www.crackingthecodinginterview.com/) - by Gayle Laakmann McDowell
- [CP Handbook By Antti Laaksonen](https://github.com/pllk/cphb/blob/master/book.pdf)
- [USACO Guide by the Competitive Programming Initiative](https://usaco.guide)
- [Competitive Programmer's Handbook](https://cses.fi/book/book.pdf) - by Antti Laaksonen

## Algorithms :high_brightness::high_brightness:

- [CP Algorithms](https://cp-algorithms.com/)
- [Visual Alogorithms](https://visualgo.net/en)

## Code Visualisation :high_brightness::high_brightness:

- [C++ Code Visualisation](http://www.pythontutor.com/cpp.html)
- [JAVA Code Visualisation](http://www.pythontutor.com/visualize.html)
- [PYTHON Code Visualisation](http://www.pythontutor.com/visualize.html)
- [VisuAlgo - visualising data structures and algorithms through animation](https://visualgo.net/en)

## Learning Resources (Topic Wise) :checkered_flag::checkered_flag::checkered_flag:

### Big O Notations

- **CS Dojo** - Introduction to Big O Notation and Time Complexity
- **Simple Snippets** - Asymptotic Analysis of Algorithms with Example
- **Big-O CheatSheet** https://www.bigocheatsheet.com/

---

### STL in C++

- **Codealittle** - [Video](https://www.youtube.com/watch?v=PCahjLFtlbY&list=PL1oKdRlSbldPUXbtWctRz14C1f8R78MVZ)
- **Takeyouforward** - [Video](https://www.youtube.com/watch?v=zBhVZzi5RdU&t=1s)
- **CppNuts** - [Video](https://www.youtube.com/watch?v=LyGlTmaWEPs&list=PLk6CEY9XxSIA-xo3HRYC3M0Aitzdut7AA)

- [ ] STL SUMMARY [Blog post](https://codeforces.com/blog/entry/6058)
- [ ] [Vectors (Dynamic Arrays)](https://www.geeksforgeeks.org/vector-in-cpp-stl/)
- [ ] [Sets](https://www.geeksforgeeks.org/set-in-cpp-stl/)
  - [Set](https://www.geeksforgeeks.org/set-in-cpp-stl/)
  - [Unordered Set](https://www.geeksforgeeks.org/unordered_set-in-cpp-stl/)
  - [Multiset](https://www.geeksforgeeks.org/multiset-in-cpp-stl/#:~:text=Multisets%20are%20a%20type%20of,elements%20can%20have%20same%20values.&text=List%20of%20functions%20of%20Multiset,first%20element%20in%20the%20multiset.)
- [ ] [Queue](https://www.geeksforgeeks.org/queue-cpp-stl/)
- [ ] [Stack](https://www.geeksforgeeks.org/stack-in-cpp-stl/)
- [ ] [Map](https://www.geeksforgeeks.org/map-associative-containers-the-c-standard-template-library-stl/)
  - [Map](https://www.geeksforgeeks.org/map-associative-containers-the-c-standard-template-library-stl/)
  - [Unordered Map](https://www.geeksforgeeks.org/unordered_map-in-cpp-stl/#:~:text=unordered_map%20is%20an%20associated%20container,type%20predefined%20or%20user%2Ddefined.)
  - [Multimap](https://www.geeksforgeeks.org/multimap-associative-containers-the-c-standard-template-library-stl/)
- [ ] [Pairs](https://www.geeksforgeeks.org/pair-in-cpp-stl/)
- [ ] [Priority Queue (Min - Max Heaps)](https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/)
- [ ] [Deque](https://www.geeksforgeeks.org/deque-cpp-stl/)

---

### Binary Search

- **Aditya Verma** [Video](https://www.youtube.com/watch?v=j7NodO9HIbk&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2)

**Problems**

- Allocate Minimum No of pages(GFG)
- Aggressive Cows(SPOJ)
- Prata(SPOJ)
- Painters Partion(GFG)
- EKO(SPOJ)
- Square Root using BS (GFG)
- Floor And Ceil in a Sorted Array(GFG)
- First And Last occurrence of an element(GFG)
- Count of element in a sorted array(GFG)
- Search in a rotated Sorted Array(leetcode)
- Logs(Atcoder)
- Search in A 2D Matrix (Leetcode)
- First bad version(Leetcode)
- Heaters(Leetcode)

---

### Number Theory (Mathematics)

- **CodeNCode** - [Video](https://www.youtube.com/watch?v=eRkqvQtm4DU&list=PL2q4fbVm1Ik4liHX78IRslXzUr8z5QxsG)

---

### Recursion and BackTracking

- **Aditya Verma** - [Video](https://www.youtube.com/watch?v=kHi1DUhp9kM&list=PL_z_8CaSLPWeT1ffjiImo0sYTcnLzo-wY)
- **Codealittle** - [Video](https://www.youtube.com/watch?v=-9FinR1AVys&list=PL1oKdRlSbldN8ffk23nuYQZwO0HSIPy9F)

---

### Bit Manipulations

- **Codealittle** - [Video](https://www.youtube.com/watch?v=5upadP-hWXQ&list=PL1oKdRlSbldNz2p_xrBMf2GhCKRm-cH2A)
- **codencode** - [Video](https://www.youtube.com/watch?v=efL86JCONH0&list=PL2q4fbVm1Ik7ip1VkWwe5U_CEb93vw6Iu)

---

### Graph Theory

- **CodeNcode** - [Video](https://www.youtube.com/watch?v=VW85xQ6GJP4&list=PL2q4fbVm1Ik6DCzm9XZJbNwyHtHGclcEh)
- **Hitesh Tripathi** - [Video](https://www.youtube.com/watch?v=1BPQYzCYDx4&list=PLJOYB9TDUqmlnn9mu11qHxxQK_ioX9Wdm)

---

### Dynamic Programing

- **Tushar Roy** - [Video](https://www.youtube.com/watch?v=8LusJS5-AGo&list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr)
- **GeeksforGeeks** - [Video](https://www.youtube.com/watch?v=mmjDZGSr7EA&list=PLqM7alHXFySGbXhWx7sBJEwY2DnhDjmxm)
- **Aditya Verma** - [Video](https://www.youtube.com/watch?v=mmjDZGSr7EA&list=PLqM7alHXFySGbXhWx7sBJEwY2DnhDjmxm)
- **TakeYouForward** - [Video](https://www.youtube.com/watch?v=PPi3326JhGc&list=PLgUwDviBIf0pmD4Eur6Cl5XfBO4EtgKGe)

---

## Coding Platforms

- **Beginners** - [Practice @ Codecademy](https://www.codecademy.com/learn)
- **Beginners** - [Practice @ GeeksForGeeks](https://practice.geeksforgeeks.org/)
- **Beginners** - [HackerRank (Must do for a Beginner)](https://www.hackerrank.com/)
- **Beginners** - [HackerEarth](https://www.hackerearth.com/)
- **Long Challenge and Short Contest** - [CodeChef](https://www.codechef.com/)
- **Short Contest** - [CodeForces](https://codeforces.com/)
- **Mathematics** - [Project Euler](https://projecteuler.net/)
- **Data Structures and Algorithms** - [LeetCode (For Data-Structures and Algos)](https://leetcode.com/)

---

## Important Data Structures:

- [Vectors (Dynamic Arrays)](https://www.geeksforgeeks.org/vector-in-cpp-stl/)
- [Strings](https://www.tutorialspoint.com/cplusplus/cpp_strings.htm)
- [Linked List](https://www.geeksforgeeks.org/data-structures/linked-list/)
- [Stack](https://www.geeksforgeeks.org/stack-in-cpp-stl/)
- Queue
  - [Queue](https://www.geeksforgeeks.org/queue-cpp-stl/)
  - [Priority Queue](https://www.geeksforgeeks.org/priority-queue-in-cpp-stl/)
  - [Deque](https://www.geeksforgeeks.org/deque-cpp-stl/)
- Sets
  - [Set](https://www.geeksforgeeks.org/set-in-cpp-stl/)
  - [Unordered Set](https://www.geeksforgeeks.org/unordered_set-in-cpp-stl/)
  - [Multiset](http://www.cplusplus.com/reference/set/multiset/)
- Map

  - [Map](https://www.geeksforgeeks.org/map-associative-containers-the-c-standard-template-library-stl/)
  - [Unordered Map](https://www.geeksforgeeks.org/unordered_map-in-cpp-stl/#:~:text=unordered_map%20is%20an%20associated%20container,type%20predefined%20or%20user%2Ddefined.)
  - [Multimap](https://www.geeksforgeeks.org/multimap-associative-containers-the-c-standard-template-library-stl/)

- [Hash Tables](https://www.geeksforgeeks.org/implementing-hash-table-open-addressing-linear-probing-cpp/)
- [Disjoint-Set Data Structures](https://www.youtube.com/watch?v=wU6udHRIkcc)
- [Trie](https://www.youtube.com/watch?v=AXjmTQ8LEoI&t=946s)
- [Segment Tree](https://www.youtube.com/watch?v=FR5d4V7Z9SE)
- [Policy based Data Structures](https://codeforces.com/blog/entry/11080)

---

## Searching

- Linear Search
- Binary Search
- Ternary Search
- Jump Search
- Interpolation Search
- Exponential Search

---

## Sorting

- Selection Sort
- Bubble Sort
- Insertion Sort
- Merge Sort
- Quick Sort
- Heap Sort
- Radix Sort
- Count Sort
- bucket sort

---

## Mathematics:

### Playlists

- [**CodeNcode** ](https://www.youtube.com/watch?v=VW85xQ6GJP4&list=PL2q4fbVm1Ik6DCzm9XZJbNwyHtHGclcEh)

### Number Theory

- Prime Number Generation (Sieve, Segmented Sieve)
- Euler Totient Theorem
- Fermat’s Theorem
- HCF & LCM (Euclid)
- Extended Euclid Algorithm
- Fibonacci
- Chinese Remainder Theorem
- Linear Diophantine Equations (Extended Euclid)
- Binary Exponentiation
- Modulus Arithmetic (addition,multiplication,subtraction,modular Inverse)

### Probability

- Basic Probability and Conditional Probability
- Random Variables
- Probability Generating Functions
- Expectation
- Probability Distribution [Binomial, Poisson, Normal,Bernoulli]

### Linear Algebra

- Multiplication ( Strassen's algorithm ), Logarithmic exponentiation
- Matrix Transformations [ Transpose, Rotation Of Matrix, Representing Linear Transformations Using Matrix ]
- Determinant, Rank and Inverse Of Matrix [ Gaussian Elimination, Gauss Jordan Elimination]
- Solving System Of Linear Equations
- Matrix Exponentiation To Solve Recurrences

---

### Game Theory - [Video](https://www.youtube.com/watch?v=_thN1Rp_FRA)

---

### Greedy

**Problems**

- BUSY MAN(SPOJ)
- BIASED STANDINGS(SPOJ)
- life(SPOJ)
- Defense of a kingdom (SPOJ)
- Chopsticks(Codechef)
- EXPEDI(SPOJ)
- Fractional Knapsack(GFG)
- DIE HARD(SPOJ)
- GREGOVIA(SPOJ)
- SOLDIER(SPOJ)
- CHOCOLA(SPOJ)
- CMIYC(SPOJ)
- Station Balance(UVA)
- Huffman CodIng(GFG)
- Maximun Unique Segments(Codechef)
- Egyptian Fraction(GFG)
- Job Sequencing(GFG)
- Maximum Circles(HackerBlocks)
- Codeforces Subsequences(Codeforces)
- Good Strings(Codeforces)
- Palindromic Paths(Codeforces)
- Gas Pipeline(Codeforces)

## Graphs:

### Playlists

- **CodeNCode** - [Video](https://www.youtube.com/watch?v=eRkqvQtm4DU&list=PL2q4fbVm1Ik4liHX78IRslXzUr8z5QxsG)

### Graph Representation

- Adjacency Matrix
- Adjacency List

### Graph Types

- Directed
- Undirected
- Weighted
- Unweighted
- Euler

### Graph Concepts

- DFS
- BFS
- Strongly Connected Component
- Connected Component
- Cycle Detection
- Articulation Points
- Bridges
- Topological Sorting
- Bipartite Checking
- Flood-fill algorithm

---

## Graph/Tree Algorithms

- Prim’s Algorithm
- Kruskal Algorithm
- Dijkstra
- Bellman-Ford
- Floyd Warshall’s Algorithm
- Euler Tour
- Lowest Common Ancestor using Binary Lifting
- Kruskal's Minimum Spanning Tree Algorithm

---

## Dynamic Programming

### Playlists

- [**Tushar Roy**](https://www.youtube.com/watch?v=8LusJS5-AGo&list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr)
- [**GeeksforGeeks**](https://www.youtube.com/watch?v=mmjDZGSr7EA&list=PLqM7alHXFySGbXhWx7sBJEwY2DnhDjmxm)
- [**Aditiya verma**](https://www.youtube.com/watch?v=nqowUJzG-iM&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go)

### Classical Problems

- Fibonacci Series
- Longest Common Substring
- Longest Increasing Subsequence
- Longest Palindromic Substring
- Edit Distance
- Egg Dropping Puzzle
- 0-1 Knapsack
- Unbounded Knapsack
- Subset Sum
- Coin Change Combinations
- Coin Change Permutation
- Longest Common Subsequence
- Longest Substring Without Repeating Character
- Matrix Chain Multiplication
- Max Size Square Submatrix With One
- Maximum Length Chain
- Catalan Number And its Applications
- Snake and Ladder Problem
- Word Break Problem
- N–Queens Problem

### Doubts and queries

- https://stackoverflow.com/

### Thank you for Contributing :pray: :dizzy:

![105](https://contributors-img.web.app/image?repo=kothariji/competitive-programming)
","Competitive Programming is a sport based on problem-solving skills, thinking
ability, speed testing, and to be precise. Brainstorming upon your code will
increase your coding skills as well as it will expand your thinking capacity.
There are numerous benefits to participating in competitive programming,
including getting hired."
601,"💻Build one codebase and get native UI on Windows, Linux and Web","![Capy](https://capy-ui.org/img/capy_big.png)

**As of now, Capy is NOT ready for use in production as I'm still making breaking changes**

---

![the glorius software in action](https://raw.githubusercontent.com/zenith391/bottom-zig-gui/main/.github/screenshot.png)

## Introduction

Capy is a **graphical user interface library for Zig**. It is mainly intended for creating applications using native controls from the operating system.
Capy is a declarative UI library aiming to be easy to write for and versatile.

It has been made with the goal to empower standalone UI applications, integration in games or any other rendering process is a non-goal.

## Features
- Use Zig for frontend and backend
- Accessibility: compatibility with almost all accessibility tools
- Cross-platform
- Uses the target OS toolkit
- Cross-compilable from any platform to any other platform
- *Tiny* executables - Every [example](https://github.com/capy-ui/capy/tree/master/examples)'s size < 2MB, which is smaller than 'hello world' in Go

## Usage

A simple application using capy:

```zig
const capy = @import(""capy"");
const std = @import(""std"");

pub fn main() !void {
    try capy.backend.init();

    var window = try capy.Window.init();
    try window.set(
        capy.Column(.{ .spacing = 10 }, .{ // have 10px spacing between each column's element
            capy.Row(.{ .spacing = 5 }, .{ // have 5px spacing between each row's element
                capy.Button(.{ .label = ""Save"", .onclick = buttonClicked }),
                capy.Button(.{ .label = ""Run"",  .onclick = buttonClicked })
            }),
            // Expanded means the widget will take all the space it can
            // in the parent container
            capy.Expanded(
                capy.TextArea(.{ .text = ""Hello World!"" })
            )
        })
    );

    window.resize(800, 600);
    window.show();
    capy.runEventLoop();
}

fn buttonClicked(button: *capy.Button_Impl) !void {
    std.log.info(""You clicked button with text {s}"", .{button.getLabel()});
}
```

It is easy to add something like a button or a text area. The example can already be used to notice a widget's parameters are usually enclosed in anonymous
structs (`.{ .label = ""Save"" }`). You can also see that simply wrapping a widget with `capy.Expanded( ... )` will tell it to take all the space it can.

## Getting Started

If you're starting a new project, simply clone [capy-template](https://github.com/capy-ui/capy-template) and follow build instructions.

Otherwise or for more information, please look in the [wiki](https://github.com/capy-ui/capy/wiki/Installation).

You can questions and receive updates on the [#capy-ui Matrix channel](https://matrix.to/#/#capy-ui:matrix.org).

## Contributing
Contributing can be as simple as opening an issue and detailling what bug you encountered or what feature you wish to have.  
If you want to help the project more directly, you can fork the project and then create a pull request.

## Supported platforms

A platform is considered supported only if it can be built to from every other OS.

### Desktop

✅ Windows x86_64  
✅ Windows i386

🏃 macOS M1  
🏃 macOS x86_64  

✅ Linux x86_64  
✅ Linux i386  
✅ Linux aarch64 (PinePhone, PineBook...)  

✅ FreeBSD x86_64  

### Mobile

🧪 Android  
🏃 iOS

### Web

✅ WebAssembly  

- ✅ Working and can be cross-compile from all platforms supported by Zig
- 🧪 Experimental
- 🏃 Planned

Note: As there's no ""official"" GUI library for Linux, GTK 3 has been chosen as it is the one
that works and can be configured on the most distros. It's also the reason Libadwaita won't
be adopted, as it's meant for GNOME and GNOME only by disallowing styling and integration
with other DEs.

","Capy is a declarative UI library aiming to be easy to write for and versatile.
It is mainly intended for creating applications using native controls from the
operating system. It has been made with the goal to empower standalone UI
applications, integration in games or any other rendering process is a non-goal.
Use Zig for frontend and backend. Accessibility: compatibility with almost all
accessibility tools. Cross-platform: Cross-compilable from any platform to any
other platform. *Tiny* executables - Every [example]’s size < 2MB, which is
smaller than ‘hello world’ in Go."
3043,A tool to beautify your code screenshots. Built with SolidJS,"![CodeImage logo](assets/banner.png?raw=true)

> Create elegant code screenshots of your source code.

![Latest release Version](https://img.shields.io/badge/dynamic/json?color=success&label=Version&query=version&url=https%3A%2F%2Fraw.githubusercontent.com%2Friccardoperra%2Fcodeimage%2Fmain%2Fpackage.json)
![Build workflow badge](https://img.shields.io/github/actions/workflow/status/riccardoperra/codeimage/prod-deploy.yml?branch=main)
[![Issues](https://img.shields.io/github/issues/riccardoperra/codeimage)](https://github.com/riccardoperra/codeimage/issues)
[![Built with SolidJS](https://img.shields.io/badge/Built%20with-SolidJS-blue)](https://github.com/solidjs/solid)
[![Built with Vanilla Extract](https://img.shields.io/badge/Built%20with-Vanilla%20Extract-ff69b4)](https://github.com/seek-oss/vanilla-extract)
![License](https://img.shields.io/github/license/riccardoperra/codeimage)

## Introduction

[CodeImage](https://codeimage.dev) is the newest tool to help developers to create beautiful screenshots of their code,
providing several
features to speed up the process to post in social media.

<a href=""https://www.producthunt.com/posts/codeimage?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-codeimage"" target=""_blank""><img src=""https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=371306&theme=light"" alt=""CodeImage - A&#0032;tool&#0032;to&#0032;manage&#0032;and&#0032;beautify&#0032;your&#0032;code&#0032;screenshots | Product Hunt"" style=""width: 250px; height: 54px;"" width=""250"" height=""54"" /></a>

![CodeImage showcase](assets/showcase_1.png)


## 🤖 Tech stack

CodeImage architecture consist of a PNPM monorepo, currently subdivided in `packages` and `apps`.

### Apps

#### [@codeimage/app](./apps/codeimage)

The front-end application, entirely built with SolidJS.

It currently also relies on these libraries:

- [vanilla-extract](https://github.com/seek-oss/vanilla-extract): Zero-runtime Stylesheets-in-TypeScript.
- [CodeMirror6](https://codemirror.net/6/): Extensible code editor
- [solid-aria](https://github.com/solidjs-community/solid-aria): High-quality primitives that help to build accessible
  user interfaces
- [solid-primitives](https://github.com/solidjs-community/solid-primitives): SolidJS primitives library

#### [@codeimage/api](./apps/api)

The REST API layer built with [Fastify](https://github.com/fastify/fastify),
[Prisma ORM](https://github.com/prisma/prisma) and [Auth0](https://auth0.com/).

### Packages

- [@codeimage/ui](./packages/ui): contains the source code of the UI kit of CodeImage front-end application
- [@codeimage/config](./packages/config): contains the base configurations and interfaces for CodeImage
- [@codeimage/highlight](./packages/highlight): contains the custom editor and highlighting themes for CodeMirror


- [@codeimage/dom-export](./packages/dom-export): contains the [html-to-image](https://github.com/bubkoo/html-to-image)
  fork which includes several fix for image export
- [@codeimage/locale](./packages/locale): contains a wrapper
  of [@solid-primitives/i18n](https://github.com/solidjs-community/solid-primitives/tree/main/packages/i18n) which
  includes strict typing for i18n
- [@codeimage/vanilla-extract](./packages/vanilla-extract): contain
  the [Vanilla Extract](https://github.com/seek-oss/vanilla-extract) plugin fork which includes SolidJS and PNPM fixes
  to work under monorepo.
- [@codeimage/prisma-models](./packages/prisma-models): contains the Prisma ORM backend models shared across front-end
  and back-end application.
- [@codeimage/atomic-state](./packages/atomic-state): contain the source code of a small state manager which includes
  some utilities helper for RxJS and solid-js/store

## 🌏 Contributions

> **Warning** **Read this before opening any PR!**

When contributing, it's better to first discuss the change you wish to make via issue or discussion, or any other method
with the owners of this repository before making a change.

See the [CONTRIBUTING.md](./CONTRIBUTING.md) guide for more details.


---


<p align=""left"">
  <img src=""https://user-images.githubusercontent.com/37072694/168666273-22af1fed-6ee5-49a5-be2a-6e0b9da998cf.png"" width=""600"">
</p>
<p align=""left"">
  CodeImage is the winner of <a href=""https://hack.solidjs.com"">SolidHack 2022</a> for the Best Application category!
</p>

## License

MIT © [Riccardo Perra](https://github.com/riccardoperra)
","CodeImage is the newest tool to help developers to speed up the process to post
in social media. The front-end application is built with SolidJS and relies on
these libraries: [Fastify], [Prisma ORM and [Auth0] The REST API layer built
with [CodeMirror6] and the Zero-runtime Stylesheets-in-TypeScript library. The
code is available on GitHub and can be downloaded from the site here:
http://codeimage.dev/code-image."
2992,Web component JS frameworks overview by their syntax and features,"![Component Party 🎉](.github/banner.webp)

> Web component JS frameworks quick overview by their syntax and features

**Website: <https://component-party.dev>**

## 🤔 Why ?

Many JS developers don't have a good overview of every existing JS framework with their own syntax and features.
How do we solve this ? Developers love having framework overview by examples. It's a quick introduction before going deeper.

## 🔥 Progression

<details>
<summary>
<img width=""18"" height=""18"" src=""public/framework/svelte.svg"" />
<b>Svelte</b>
<img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/100"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [x] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [x] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/react.svg"" />
            <b>React</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/100"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [x] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [x] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/vue.svg"" />
            <b>Vue 3</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/96"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/solid.svg"" />
            <b>SolidJS</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/92"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [ ] Webapp features
  - [ ] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/qwik.svg"" />
            <b>Qwik</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/92"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [ ] Webapp features
  - [ ] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/angular.svg"" />
            <b>Angular</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/92"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [ ] Webapp features
  - [ ] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/lit.svg"" />
            <b>Lit</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/96"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/vue.svg"" />
            <b>Vue 2</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/96"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/ember.svg"" />
            <b>Ember</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/92"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [ ] Webapp features
  - [ ] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/alpine.svg"" />
            <b>Alpine</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/96"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [x] Webapp features
  - [x] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details><details>
        <summary>
            <img width=""18"" height=""18"" src=""public/framework/aurelia.svg"" />
            <b>Aurelia 1</b>
            <img src=""https://us-central1-progress-markdown.cloudfunctions.net/progress/92"" /></summary>

- [x] Reactivity
  - [x] Declare state
  - [x] Update state
  - [x] Computed state
- [x] Templating
  - [x] Minimal template
  - [x] Styling
  - [x] Loop
  - [x] Event click
  - [x] Dom ref
  - [x] Conditional
- [x] Lifecycle
  - [x] On mount
  - [x] On unmount
- [ ] Component composition
  - [x] Props
  - [x] Emit to parent
  - [x] Slot
  - [x] Slot fallback
  - [ ] Context
- [x] Form input
  - [x] Input text
  - [x] Checkbox
  - [x] Radio
  - [x] Select
- [ ] Webapp features
  - [ ] Render app
  - [x] Fetch data
  - [x] Router link
  - [x] Routing

</details>

## 🤝 Contributing

This site is built with [Vite](https://vitejs.dev) and [Svelte](https://svelte.dev). Site content is written in Markdown format located in `content`. For simple edits, you can directly edit the file on GitHub and generate a Pull Request.

For local development, [pnpm](https://pnpm.io/) is preferred as package manager:

```bash
pnpm i
pnpm run dev
```

This project requires Node.js to be `v16.0.0` or higher.

### Add a framework

1.  Fork the project and create a new branch
2.  Add the new framework SVG logo in `public/framework`
3.  Install the ESLint plugin associated to the framework
4.  In `frameworks.mjs`, add a new entry with SVG link and ESLint configuration

## 🧑‍💻 Contributors

This project exists thanks to all the people who contribute. \[[Contribute](CONTRIBUTING.md)].
[![Contributors](https://opencollective.com/component-party/contributors.svg?width=890&button=false)](https://github.com/matschik/component-party/graphs/contributors)

## ⚖️ License

MIT. Made with 💖
","Many JS developers don't have a good overview of every existing JS framework
with their own syntax and features. Developers love having framework overview by
examples. It's a quick introduction before going deeper. We'll show you how to
use React in a Web component."
3156,Hawtio web console helps you manage your JVM stuff and stay cool!,"![hawtio][logo]

[![Test](https://github.com/hawtio/hawtio/actions/workflows/test.yml/badge.svg)](https://github.com/hawtio/hawtio/actions/workflows/test.yml)

## Introduction

[Hawtio](http://hawt.io) is a lightweight and modular Web console for managing Java applications.

![Hawtio screenshot](https://raw.githubusercontent.com/hawtio/website/main/static/images/screenshots/camel-route.png)

Hawtio has [lots of plugins](http://hawt.io/docs/plugins/) such as: Apache ActiveMQ ""Classic,"" Apache Camel, JMX, OSGi, Logs, Spring Boot, and Diagnostics.
You can dynamically extend Hawtio with your own plugins or automatically discover plugins inside the JVM.

The only server side dependency (other than the static HTML/CSS/JS/images) is the excellent [Jolokia library](http://jolokia.org) which has small footprint (around 300KB) and is available as a [JVM agent](http://jolokia.org/agent/jvm.html), or comes embedded as a servlet inside the `hawtio-default.war` or can be deployed as [an OSGi bundle](http://jolokia.org/agent/osgi.html).

## Get Started

- [Running an executable JAR](#running-an-executable-jar)
- [Running a Spring Boot app](#running-a-spring-boot-app)
- [Deploying on Apache Karaf](#deploying-on-apache-karaf)
- [Deploying on OpenShift](https://github.com/hawtio/hawtio-online)

For more details and other containers, see [Get Started Guide](http://hawt.io/docs/get-started/).

### Running an executable JAR

You can start up Hawtio on your machine using the hawtio-app executable JAR.

* [hawtio-app-2.17.0.jar](https://repo1.maven.org/maven2/io/hawt/hawtio-app/2.17.0/hawtio-app-2.17.0.jar)

Once you have downloaded it, just run this from the command line:

    java -jar hawtio-app-2.17.0.jar

### Running a Spring Boot app

Attaching the Hawtio console to your Spring Boot app is simple.

1. Add `io.hawt:hawtio-springboot` to the dependencies in `pom.xml`:

        <dependency>
          <groupId>io.hawt</groupId>
          <artifactId>hawtio-springboot</artifactId>
          <version>2.17.0</version>
        </dependency>

2. Enable the Hawtio and Jolokia endpoints by adding the following line in `application.properties`:
   ```
   management.endpoints.web.exposure.include=hawtio,jolokia
   spring.jmx.enabled=true 
   ```




Now you should be able to run Hawtio in your Spring Boot app as follows:

    mvn spring-boot:run

Opening <http://localhost:8080/actuator/hawtio> should show the Hawtio console.

See [Spring Boot example](https://github.com/hawtio/hawtio/tree/hawtio-2.17.0/examples/springboot) for a working example app.

### Deploying on Apache Karaf

If you are using [Apache Karaf](https://karaf.apache.org/) 4.x and above:

    feature:repo-add hawtio 2.17.0
    feature:install hawtio

This will install all the features required for Hawtio. The Hawtio console can then be viewed at <http://localhost:8181/hawtio>.

Karaf versions prior to 4.x are not supported.

## Contributing

We love [contributions](http://hawt.io/docs/contributing/)!  Here are the resources on how to get you involved in Hawtio development.

* [FAQ](http://hawt.io/docs/faq/)
* [Change Log](CHANGES.md)
* [How to contribute](http://hawt.io/docs/contributing/)
* [Community](http://hawt.io/community/)

Check out the [GitHub issues](https://github.com/hawtio/hawtio/issues) for finding issues to work on.

## License

Hawtio is licensed under [Apache License, Version 2.0](LICENSE.txt).

[logo]: http://hawt.io/images/hawtio_logo.svg ""hawtio""
","Hawtio is a lightweight and modular Web console for managing Java applications.
It can be used to manage Apache ActiveMQ ""Classic,"" Apache Camel, JMX, OSGi,
Logs, Spring Boot, and Diagnostics. The only server side dependency is the
excellent [Jolokia library which has a small footprint (around 300KB) You can
start up Hawtio on your machine using the hawtio-app executable JAR. You can
also deploy it using Apache Karaf or OpenShift."
683,"Lightweight, fault-tolerant message streams.","![Liftbridge Logo](./website/static/img/liftbridge_full.png)
---
[![Build][Build-Status-Image]][Build-Status-Url] [![License][License-Image]][License-Url] [![ReportCard][ReportCard-Image]][ReportCard-Url] [![Coverage][Coverage-Image]][Coverage-Url]

Liftbridge provides lightweight, fault-tolerant message streams by implementing
a durable, replicated, and scalable message log. The vision for Liftbridge is
to deliver a ""Kafka-lite"" solution designed with the Go community first in
mind. Unlike Kafka, which is built on the JVM and whose canonical client
library is Java (or the C-based librdkafka), Liftbridge and its canonical
client, [go-liftbridge](https://github.com/liftbridge-io/go-liftbridge), are
implemented in Go. The ultimate goal of Liftbridge is to provide a lightweight
message-streaming solution with a focus on simplicity and usability. Use it as
a simpler and lighter alternative to systems like Kafka and Pulsar or to add
streaming semantics to an existing NATS deployment.

See the [introduction](https://bravenewgeek.com/introducing-liftbridge-lightweight-fault-tolerant-message-streams/)
post on Liftbridge and [this post](https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/)
for more context and some of the inspiration behind it.

## Documentation

- [Official documentation](https://liftbridge.io/docs/overview.html)
- [Getting started](https://liftbridge.io/docs/quick-start.html)
- [FAQ](https://liftbridge.io/docs/faq.html)
- [Website](https://liftbridge.io)

## Community

- [Slack](https://liftbridge.slack.com) - click [here](https://liftbridge.io/help.html) to request an invite
- [Twitter](https://twitter.com/liftbridge_io)


[License-Url]: https://www.apache.org/licenses/LICENSE-2.0
[License-Image]: https://img.shields.io/badge/License-Apache2-blue.svg
[Build-Status-Url]: https://circleci.com/gh/liftbridge-io/liftbridge
[Build-Status-Image]: https://circleci.com/gh/liftbridge-io/liftbridge.svg?style=svg
[ReportCard-Url]: https://goreportcard.com/report/github.com/liftbridge-io/liftbridge
[ReportCard-Image]: https://goreportcard.com/badge/github.com/liftbridge-io/liftbridge
[Coverage-Url]: https://coveralls.io/github/liftbridge-io/liftbridge?branch=master
[Coverage-image]: https://coveralls.io/repos/github/liftbridge-io/liftbridge/badge.svg?branch=master
","Liftbridge provides lightweight, fault-tolerant message streams by implementing
a durable, replicated, and scalable message log. The vision for Liftbridge is to
deliver a ""Kafka-lite"" solution designed with the Go community first in mind."
1848,"Portable package manager for Neovim that runs everywhere Neovim runs. Easily install and manage LSP servers, DAP servers, linters, and formatters.","![Linux](https://img.shields.io/badge/Linux-%23.svg?logo=linux&color=FCC624&logoColor=black)
![macOS](https://img.shields.io/badge/macOS-%23.svg?logo=apple&color=000000&logoColor=white)
![Windows](https://img.shields.io/badge/Windows-%23.svg?logo=windows&color=0078D6&logoColor=white)
[![GitHub CI](https://github.com/williamboman/mason.nvim/workflows/Tests/badge.svg)](https://github.com/williamboman/mason.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush)
[![Sponsors](https://img.shields.io/github/sponsors/williamboman)](https://github.com/sponsors/williamboman)

<img src=""https://user-images.githubusercontent.com/6705160/177613416-0c0354d2-f431-40d8-87f0-21310f0bba0e.png"" alt=""mason.nvim"" />

<p align=""center"">
    Portable package manager for Neovim that runs everywhere Neovim runs.<br />
    Easily install and manage LSP servers, DAP servers, linters, and formatters.<br />
    <code>:help mason.nvim</code>
</p>

# Table of Contents

-   [Introduction](#introduction)
    -   [How to use installed packages](#how-to-use-installed-packages)
-   [Screenshots](#screenshots)
-   [Requirements](#requirements)
-   [Installation](#installation)
-   [Setup](#setup)
    -   [Extensions](#extensions)
-   [Commands](#commands)
-   [Configuration](#configuration)

# Introduction

> `:h mason-introduction`

`mason.nvim` is a Neovim plugin that allows you to easily manage external editor tooling such as LSP servers, DAP servers,
linters, and formatters through a single interface. It runs everywhere Neovim runs (across Linux, macOS, Windows, etc.),
with only a small set of [external requirements](#requirements) needed.

Packages are installed in Neovim's `:h stdpath` by default. Executables are linked to a single `bin/` directory, which
`mason.nvim` will add to Neovim's PATH during setup, allowing seamless access from Neovim builtins (shell, terminal,
etc.) as well as other 3rd party plugins.

For a list of all available packages, see [PACKAGES.md](./PACKAGES.md).

## How to use installed packages

> `:h mason-how-to-use-packages`

Although many packages are perfectly usable out of the box through Neovim builtins, it is recommended to use other 3rd
party plugins to further integrate these. The following plugins are recommended:

-   LSP: [`lspconfig`][lspconfig] & [`mason-lspconfig.nvim`][mason-lspconfig.nvim]
-   DAP: [`nvim-dap`][nvim-dap]
-   Linters: [`null-ls.nvim`][null-ls.nvim] or [`nvim-lint`][nvim-lint]
-   Formatters: [`null-ls.nvim`][null-ls.nvim] or [`formatter.nvim`][formatter.nvim]

[formatter.nvim]: https://github.com/mhartington/formatter.nvim
[lspconfig]: https://github.com/neovim/nvim-lspconfig
[mason-lspconfig.nvim]: https://github.com/williamboman/mason-lspconfig.nvim
[null-ls.nvim]: https://github.com/jose-elias-alvarez/null-ls.nvim
[nvim-dap]: https://github.com/mfussenegger/nvim-dap
[nvim-lint]: https://github.com/mfussenegger/nvim-lint

## Screenshots

|                                                                                                                                                        |                                                                                                                                                  |                                                                                                                                        |
| :----------------------------------------------------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------: |
|           <img alt=""Main window"" src=""https://user-images.githubusercontent.com/6705160/177617680-d62caf26-f253-4ace-ab57-4b590595adca.png"">           |                 <img src=""https://user-images.githubusercontent.com/6705160/177617684-6bb4c13f-1235-4ac9-829e-120b06f7437b.png"">                 | <img alt=""Language filter"" src=""https://user-images.githubusercontent.com/6705160/177617688-8f9ba225-00c8-495c-9c4c-b74240d6f280.png""> |
| <img alt=""LSP server configuration schema"" src=""https://user-images.githubusercontent.com/6705160/177617692-02c6ddde-a97e-42b4-bca4-4f4caf45d569.png""> | <img alt=""Checking for new versions"" src=""https://user-images.githubusercontent.com/6705160/180648183-69077d10-8795-4da6-ba4d-57ecf0cb25c9.png""> |   <img alt=""Help window"" src=""https://user-images.githubusercontent.com/6705160/180648292-136a0888-0fb6-4226-aa29-53bd3ffed400.png"">   |

# Requirements

> `:h mason-requirements`

`mason.nvim` relaxes the minimum requirements by attempting multiple different utilities (for example, `wget`,
`curl`, and `Invoke-WebRequest` are all perfect substitutes).
The _minimum_ recommended requirements are:

-   neovim `>= 0.7.0`
-   For Unix systems: `git(1)`, `curl(1)` or `wget(1)`, `unzip(1)`, `tar(1)`, `gzip(1)`
-   For Windows systems: pwsh or powershell, git, tar, and [7zip][7zip] or [peazip][peazip] or [archiver][archiver] or [winzip][winzip] or [WinRAR][winrar]

Note that `mason.nvim` will regularly shell out to external package managers, such as `cargo` and `npm`. Depending on
your personal usage, some of these will also need to be installed. Refer to `:checkhealth mason` for a full list.

[7zip]: https://www.7-zip.org/
[archiver]: https://github.com/mholt/archiver
[peazip]: https://peazip.github.io/
[winzip]: https://www.winzip.com/
[winrar]: https://www.win-rar.com/

# Installation

## [Packer](https://github.com/wbthomason/packer.nvim)

```lua
use { ""williamboman/mason.nvim"" }
```

## vim-plug

```vim
Plug 'williamboman/mason.nvim'
```

# Setup

> `:h mason-quickstart`

```lua
require(""mason"").setup()
```

`mason.nvim` is optimized to load as little as possible during setup. Lazy-loading the plugin, or somehow deferring the
setup, is not recommended.

Refer to the [Configuration](#configuration) section for information about which settings are available.

## Extensions

Refer to the [Wiki](https://github.com/williamboman/mason.nvim/wiki/Extensions) for a list of 3rd party extensions.

-   [`mason-lspconfig.nvim`](https://github.com/williamboman/mason-lspconfig.nvim) - recommended for usage with `lspconfig`

# Commands

> `:h mason-commands`

-   `:Mason` - opens a graphical status window
-   `:MasonInstall <package> ...` - installs/reinstalls the provided packages
-   `:MasonUninstall <package> ...` - uninstalls the provided packages
-   `:MasonUninstallAll` - uninstalls all packages
-   `:MasonLog` - opens the `mason.nvim` log file in a new tab window

# Configuration

> `:h mason-settings`

You may optionally configure certain behavior of `mason.nvim` when calling the `.setup()` function. Refer to the
[default configuration](#default-configuration) for a list of all available settings.

Example:

```lua
require(""mason"").setup({
    ui = {
        icons = {
            package_installed = ""✓"",
            package_pending = ""➜"",
            package_uninstalled = ""✗""
        }
    }
})
```

## Default configuration

```lua
local DEFAULT_SETTINGS = {
    -- The directory in which to install packages.
    install_root_dir = path.concat { vim.fn.stdpath ""data"", ""mason"" },

    -- Where Mason should put its bin location in your PATH. Can be one of:
    -- - ""prepend"" (default, Mason's bin location is put first in PATH)
    -- - ""append"" (Mason's bin location is put at the end of PATH)
    -- - ""skip"" (doesn't modify PATH)
    ---@type '""prepend""' | '""append""' | '""skip""'
    PATH = ""prepend"",

    pip = {
        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.
        upgrade_pip = false,

        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior
        -- and is not recommended.
        --
        -- Example: { ""--proxy"", ""https://proxyserver"" }
        install_args = {},
    },

    -- Controls to which degree logs are written to the log file. It's useful to set this to vim.log.levels.DEBUG when
    -- debugging issues with package installations.
    log_level = vim.log.levels.INFO,

    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further
    -- packages that are requested to be installed will be put in a queue.
    max_concurrent_installers = 4,

    github = {
        -- The template URL to use when downloading assets from GitHub.
        -- The placeholders are the following (in order):
        -- 1. The repository (e.g. ""rust-lang/rust-analyzer"")
        -- 2. The release version (e.g. ""v0.3.0"")
        -- 3. The asset name (e.g. ""rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz"")
        download_url_template = ""https://github.com/%s/releases/download/%s/%s"",
    },

    -- The provider implementations to use for resolving package metadata (latest version, available versions, etc.).
    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.
    -- Builtin providers are:
    --   - mason.providers.registry-api (default) - uses the https://api.mason-registry.dev API
    --   - mason.providers.client                 - uses only client-side tooling to resolve metadata
    providers = {
        ""mason.providers.registry-api"",
    },

    ui = {
        -- Whether to automatically check for new versions when opening the :Mason window.
        check_outdated_packages_on_open = true,

        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.
        border = ""none"",

        -- Width of the window. Accepts:
        -- - Integer greater than 1 for fixed width.
        -- - Float in the range of 0-1 for a percentage of screen width.
        width = 0.8,

        -- Height of the window. Accepts:
        -- - Integer greater than 1 for fixed height.
        -- - Float in the range of 0-1 for a percentage of screen height.
        height = 0.9,

        icons = {
            -- The list icon to use for installed packages.
            package_installed = ""◍"",
            -- The list icon to use for packages that are installing, or queued for installation.
            package_pending = ""◍"",
            -- The list icon to use for packages that are not installed.
            package_uninstalled = ""◍"",
        },

        keymaps = {
            -- Keymap to expand a package
            toggle_package_expand = ""<CR>"",
            -- Keymap to install the package under the current cursor position
            install_package = ""i"",
            -- Keymap to reinstall/update the package under the current cursor position
            update_package = ""u"",
            -- Keymap to check for new version for the package under the current cursor position
            check_package_version = ""c"",
            -- Keymap to update all installed packages
            update_all_packages = ""U"",
            -- Keymap to check which installed packages are outdated
            check_outdated_packages = ""C"",
            -- Keymap to uninstall a package
            uninstall_package = ""X"",
            -- Keymap to cancel a package installation
            cancel_installation = ""<C-c>"",
            -- Keymap to apply language filter
            apply_language_filter = ""<C-f>"",
        },
    },
}
```

---

<sup>
👋 didn't find what you were looking for? Try looking in the <a href=""./doc/mason.txt"">help docs</a> <code>:help mason.nvim</code>!
</sup>
","Mason.nvim is a Neovim plugin that allows you to easily manage external editor
tooling such as LSP servers, DAP servers, Linters, and formatters through a
single interface. It runs across Linux, macOS, Windows, with only a small set of
[external requirements](#requirements) needed.Packages are installed in Nevim's
`:h stdpath` by default. Executables are linked to a single `bin/` directory,
which Mason.n Vim will add to Neovam's PATH during setup."
1713,A library used to create beautiful animations and transitions for iOS.,"![Motion Logo](http://www.cosmicmind.com/motion/logo/motion_logo.png)

# Motion

Welcome to **Motion,** a library used to create beautiful animations and transitions for views, layers, and view controllers.

## Photos Sample

Take a look at a sample [Photos](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Photos) project to get started.

![Photos](http://www.cosmicmind.com/motion/projects/photos.gif)

* [Photos Sample](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Photos)

### Who is Motion for?

Motion is designed for beginner to expert developers. For beginners, you will be exposed to very powerful APIs that would take time and experience to develop on your own, and experts will appreciate the time saved by using Motion.

### What you will learn

You will learn how to use Motion with a general introduction to fundamental concepts and easy to use code snippets.

# Transitions

Motion transitions a source view to a destination view using a linking identifier property named `motionIdentifier`.

| Match | Translate | Rotate | Arc | Scale |
|:---:|:---:|:---:|:---:|:---:|
| ![Match](http://www.cosmicmind.com/motion/transitions_identifier/match.gif) |  ![Translate](http://www.cosmicmind.com/motion/transitions_identifier/translate.gif) | ![Rotate](http://www.cosmicmind.com/motion/transitions_identifier/rotate.gif) | ![Arc](http://www.cosmicmind.com/motion/transitions_identifier/arc.gif) | ![Scale](http://www.cosmicmind.com/motion/transitions_identifier/scale.gif) |

### Example Usage

An example of transitioning from one view controller to another with transitions:

#### View Controller 1

```swift
greyView.motionIdentifier = ""foo""
orangeView.motionIdentifier = ""bar""
```

#### View Controller 2

```swift
isMotionEnabled = true
greyView.motionIdentifier = ""foo""
orangeView.motionIdentifier = ""bar""
orangeView.transition(.translate(x: -100))
```

The above code snippet tells the source views in `view controller 1` to link to the destination views in `view controller 2` using the `motionIdentifier`. Animations may be added to views during a transition using the **transition** method. The *transition* method accepts MotionTransition structs that configure the view's animation.

* [MotionTransition API](https://cosmicmind.gitbooks.io/motion/content/motion_transition_api.html)
* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/TransitionsWithIdentifier)

## UINavigationController, UITabBarController, and UIViewController Transitions

Motion offers default transitions that may be used by UINavigationControllers, UITabBarControllers, and presenting UIViewControllers.

| Push | Slide | ZoomSlide | Cover | Page | Fade | Zoom |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| ![Push](http://www.cosmicmind.com/motion/transitions/push.gif)  | ![Slide](http://www.cosmicmind.com/motion/transitions/slide.gif)| ![Zoom Slide](http://www.cosmicmind.com/motion/transitions/zoom_slide.gif) | ![Cover](http://www.cosmicmind.com/motion/transitions/cover.gif) | ![Page](http://www.cosmicmind.com/motion/transitions/page_in.gif) | ![Fade](http://www.cosmicmind.com/motion/transitions/fade.gif) | ![Zoom](http://www.cosmicmind.com/motion/transitions/zoom.gif)|

### Example Usage

An example of transitioning from one view controller to another using a UINavigationController with a zoom transition:

#### UINavigationController

```swift
class AppNavigationController: UINavigationController {
    open override func viewDidLoad() {
        super.viewDidLoad()
        isMotionEnabled = true
        motionNavigationTransitionType = .zoom
    }
}
```

To add an automatic reverse transition, use `autoReverse`.

```swift
motionNavigationTransitionType = .autoReverse(presenting: .zoom)
```

* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Transitions)

# Animations

Motion provides the building blocks necessary to create stunning animations without much effort. Motion's animation API will make maintenance a breeze and changes even easier. To create an animation, use the **animate** method of a view or layer and pass in a list of MotionAnimation structs. MotionAnimation structs are configurable values that describe how to animate a property or group of properties.

| Background Color | Corner Radius | Fade | Rotate | Size | Spring |
|:---:|:---:|:---:|:---:|:---:|:---:|
| ![Background Color](http://www.cosmicmind.com/motion/animations/background_color.gif) | ![Corner Radius](http://www.cosmicmind.com/motion/animations/corner_radius.gif) | ![Fade](http://www.cosmicmind.com/motion/animations/fade.gif) | ![Rotate](http://www.cosmicmind.com/motion/animations/rotate.gif) | ![Size](http://www.cosmicmind.com/motion/animations/size.gif) | ![Spring](http://www.cosmicmind.com/motion/animations/spring.gif) |

| Border Color & Border Width | Depth | Position | Scale | Spin | Translate |
|:---:|:---:|:---:|:---:|:---:|:---:|
|![Border Color & Border Width](http://www.cosmicmind.com/motion/animations/border_color.gif) | ![Depth](http://www.cosmicmind.com/motion/animations/depth.gif) | ![Position](http://www.cosmicmind.com/motion/animations/position.gif) | ![Scale](http://www.cosmicmind.com/motion/animations/scale.gif) | ![Spin](http://www.cosmicmind.com/motion/animations/spin.gif) | ![Translate](http://www.cosmicmind.com/motion/animations/translate.gif) |

### Example Usage

```swift
let box = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))
box.backgroundColor = .blue

box.animate(.background(color: .red), .rotate(180), .delay(1))
```

In the above code example, a box view is created with a width of 100, height of 100, and an initial background color of blue. Following the general creation of the view, the _Motion animate_ method is passed _MotionAnimation structs_ that tell the view to animate to a red background color and rotate 180 degrees after a delay of 1 second. That's pretty much the general idea of creating animations.

* [MotionAnimation API](https://cosmicmind.gitbooks.io/motion/content/motion_animation_api.html)
* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Animations)

## Requirements

* iOS 8.0+
* Xcode 8.0+

## Communication

- If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind). (Tag 'cosmicmind')
- If you'd like to **ask a general question**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind).
- If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.
- If you **have a feature request**, open an issue.
- If you **want to contribute**, submit a pull request.

## Installation

> **Embedded frameworks require a minimum deployment target of iOS 8.**
> - [Download Motion](https://github.com/CosmicMind/Motion/archive/master.zip)

## CocoaPods

[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:

```bash
$ gem install cocoapods
```

To integrate Motion's core features into your Xcode project using CocoaPods, specify it in your `Podfile`:

```ruby
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '8.0'
use_frameworks!

pod 'Motion', '~> 3.1.0'
```

Then, run the following command:

```bash
$ pod install
```

## Carthage

Carthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.

You can install Carthage with Homebrew using the following command:

```bash
$ brew update
$ brew install carthage
```
To integrate Motion into your Xcode project using Carthage, specify it in your Cartfile:

```bash
github ""CosmicMind/Motion""
```

Run `carthage update` to build the framework and drag the built `Motion.framework` into your Xcode project.

## Change Log

Motion is a growing project and will encounter changes throughout its development. It is recommended that the [Change Log](https://github.com/CosmicMind/Motion/blob/master/CHANGELOG.md) be reviewed prior to updating versions.

## License

The MIT License (MIT)

Copyright (C) 2019, CosmicMind, Inc. <http://cosmicmind.com>.
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
","Motion is a library used to create beautiful animations and transitions for
views, layers, and view controllers. It is designed for beginner to expert
developers. For beginners, you will be exposed to very powerful APIs that would
take time and experience to develop on your own, and experts will appreciate the
time saved."
3426,"An NLP library for building bots, with entity extraction, sentiment analysis, automatic language identify, and so more","![NLPjs logo](screenshots/nlplogo.gif)

# NLP.js

[![](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml/badge.svg?branch=master)](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml)
[![Coverage Status](https://coveralls.io/repos/github/axa-group/nlp.js/badge.svg?branch=master)](https://coveralls.io/github/axa-group/nlp.js?branch=master)
[![NPM version](https://img.shields.io/npm/v/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![NPM downloads](https://img.shields.io/npm/dm/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=alert_status)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=security_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)

*If you're looking for the version 3 docs, you can find them here* [Version 3](docs/v3/README.md)

""NLP.js"" is a general natural language utility for nodejs. Currently supporting:

- Guess the language of a phrase
- Fast _Levenshtein_ distance of two strings
- Search the best substring of a string with less _Levenshtein_ distance to a given pattern.
- Get stemmers and tokenizers for several languages.
- Sentiment Analysis for phrases (with negation support).
- Named Entity Recognition and management, multi-language support, and acceptance of similar strings, so the introduced text does not need to be exact.
- Natural Language Processing Classifier, to classify an utterance into intents.
- NLP Manager: a tool able to manage several languages, the Named Entities for each language, the utterances, and intents for the training of the classifier, and for a given utterance return the entity extraction, the intent classification and the sentiment analysis. Also, it is able to maintain a Natural Language Generation Manager for the answers.
- 40 languages natively supported, 104 languages supported with BERT integration
- Any other language is supported through tokenization, even fantasy languages

![Hybrid bot](screenshots/hybridbot.gif)

## New in version 4`!`

Version 4 is very different from previous versions. Before this version, NLP.js was a monolithic library. The big changes:

- Now the library is split into small independent packages.
- So every language has its own package
- It provides a plugin system, so you can provide your own plugins or replace the existing ones.
- It provides a container system for the plugins, settings for the plugins and also pipelines
- A pipeline is code defining how the plugins interact. Usually it is linear: there is an input into the plugin, and this generates the input for the next one. As an example, the preparation of a utterance (the process to convert the utterance to a hashmap of stemmed features) is now a pipeline like this: `normalize -> tokenize -> removeStopwords -> stem -> arrToObj`
- There is a simple compiler for the pipelines, but they can also be built using a modified version of javascript and python (compilers are also included as plugins, so other languages can be added as a plugin).
- NLP.js now includes connectors, a connector is understood to be something that has at least 2 methods: `hear` and `say`. Examples of connectors included: Console Connector, Microsoft Bot Framework Connector and a Direct Line Offline Connector (this one allows you to build a web chatbot using the Microsoft Webchat, but without having to deploy anything in Azure).
- Some plugins can be registered by language, so for different languages different plugins will be used. Also some plugins, like NLU, can be registered not only by language but also by domain (a functional set of intents that can be trained separately)
- As an example of per-language/domain plugins, a Microsoft LUIS NLU plugin is provided. You can configure your chatbot to use the NLU from NLP.js for some languages/domains, and LUIS for other languages/domains.
- Having plugins and pipelines makes it possible to write chatbots by only modifying the configuration and the pipelines file, without modifying the code.

### TABLE OF CONTENTS

<!--ts-->

- [Installation](#installation)
- [QuickStart](docs/v4/quickstart.md)
  - [Install the library](docs/v4/quickstart.md#install-the-library)
  - [Create the code](docs/v4/quickstart.md#create-the-code)
  - [Extracting the corpus into a file](docs/v4/quickstart.md#extracting-the-corpus-into-a-file)
  - [Extracting the configuration into a file](docs/v4/quickstart.md#extracting-the-configuration-into-a-file)
  - [Creating your first pipeline](docs/v4/quickstart.md#creating-your-first-pipeline)
  - [Console Connector](docs/v4/quickstart.md#adding-your-first-connector)
  - [Extending your bot with the pipeline](docs/v4/quickstart.md#extending-your-bot-with-the-pipeline)
  - [Adding multiple languages](docs/v4/quickstart.md#adding-multilanguage)
  - [Adding API and WebChat](docs/v4/quickstart.md#adding-api-and-webchat)
  - [Using Microsoft Bot Framework](docs/v4/quickstart.md#using-microsoft-bot-framework)
  - [Recognizing the bot name and the channel](docs/v4/quickstart.md#recognizing-the-bot-name-and-the-channel)
  - [One bot per connector](docs/v4/quickstart.md#one-bot-per-connector)
  - [Different port for Microsoft Bot Framework and Webchat](docs/v4/quickstart.md#different-port-for-microsoft-bot-framework-and-webchat)
  - [Adding logic to an intent](docs/v4/quickstart.md#adding-logic-to-an-intent)
  - [Mini FAQ](docs/v4/mini-faq.md)
- [Web and React Native](docs/v4/webandreact.md)
  - [Preparing to generate a bundle](docs/v4/webandreact.md#preparing-to-generate-a-bundle)
  - [Your first web NLP](docs/v4/webandreact.md#your-first-web-nlp)
  - [Creating a distributable version](docs/v4/webandreact.md#creating-a-distributable-version)
  - [Load corpus from URL](docs/v4/webandreact.md#load-corpus-from-url)
- [QnA](docs/v4/qna.md)
  - [Install the library and the qna plugin](docs/v4/qna.md#install-the-library-and-the-qna-plugin)
  - [Train and test a QnA file](docs/v4/qna.md#train-and-test-a-qna-file)
  - [Extracting the configuration into a file](docs/v4/qna.md#extracting-the-configuration-into-a-file)
  - [Exposing the bot with a Web and API](docs/v4/qna.md#exposing-the-bot-with-a-web-and-api)
- [NER Quickstart](docs/v4/ner-quickstart.md)
  - [Install the needed packages](docs/v4/ner-quickstart.md#install-the-needed-packages)
  - [Create the conf.json](docs/v4/ner-quickstart.md#create-the-confjson)
  - [Create the corpus.json](docs/v4/ner-quickstart.md#create-the-corpusjson)
  - [Create the heros.json](docs/v4/ner-quickstart.md#create-the-herosjson)
  - [Create the index.js](docs/v4/ner-quickstart.md#create-the-indexjs)
  - [Start the application](docs/v4/ner-quickstart.md#start-the-application)
  - [Stored context](docs/v4/ner-quickstart.md#stored-context)
- [NeuralNetwork](docs/v4/neural.md)
  - [Introduction](docs/v4/neural.md#introduction)
  - [Installing](docs/v4/neural.md#installing)
  - [Corpus Format](docs/v4/neural.md#corpus-format)
  - [Example of use](docs/v4/neural.md#example-of-use)
  - [Exporting trained model to JSON and importing](docs/v4/neural.md#exporting-trained-model-to-json-and-importing)
  - [Options](docs/v4/neural.md#options)
- [Logger](docs/v4/logger.md)
  - [Introduction](docs/v4/logger.md#introduction)
  - [Default logger in @nlpjs/core](docs/v4/logger.md#default-logger-in-nlpjscore)
  - [Default logger in @nlpjs/basic](docs/v4/logger.md#default-logger-in-nlpjsbasic)
  - [Adding your own logger to the container](docs/v4/logger.md#adding-your-own-logger-to-the-container)
- [@nlpjs/emoji](docs/v4/emoji.md)
  - [Introduction](docs/v4/emoji.md#introduction)
  - [Installing](docs/v4/emoji.md#installing)
  - [Example of use](docs/v4/emoji.md#example-of-use)
- [@nlpjs/console-connector](docs/v4/console-connector.md)
  - [Installation](docs/v4/console-connector.md#installation)
  - [Example of use inside NLP.js](docs/v4/console-connector.md#example-of-use-inside-nlpjs)
  - [Example of use of the package](docs/v4/console-connector.md#example-of-use-of-the-package)
  - [Example of use with @nlpjs/basic](docs/v4/console-connector.md#example-of-use-with-nlpjsbasic)
- [@nlpjs/similarity](docs/v4/similarity.md)
  - [Installation](docs/v4/similarity.md#installation)
  - [leven](docs/v4/similarity.md#leven)
  - [similarity](docs/v4/similarity.md#similarity)
  - [SpellCheck](docs/v4/similarity.md#spellcheck)
  - [SpellCheck trained with words trained from a text](docs/v4/similarity.md#spellcheck-trained-with-words-trained-from-a-text)
- [@nlpjs/nlu](docs/v4/nlu.md)
  - [Installation](docs/v4/nlu.md#installation)
  - [NluNeural](docs/v4/nlu.md#nluneural)
  - [DomainManager](docs/v4/nlu.md#domainmanager)
  - [NluManager](docs/v4/nlu.md#nlumanager)
- [React Native](#react-native)
- [Example of use](#example-of-use)
- [False Positives](#false-positives)
- [Log Training Progress](#log-training-progress)
- [Benchmarking](docs/v3/benchmarking.md)
- [Language Support](docs/v4/language-support.md)
  - [Supported languages](docs/v4/language-support.md#supported-languages)
  - [Sentiment Analysis](docs/v4/language-support.md#sentiment-analysis)
  - [Comparision with other NLP products](docs/v4/language-support.md#comparision-with-other-nlp-products)
  - [Example with several languages](docs/v4/language-support.md#example-with-several-languages)
- [Language Guesser](docs/v3/language-guesser.md)
- [Similar Search](docs/v3/similar-search.md)
- [NLU](docs/v3/nlu-manager.md)
  - [NLU Manager](docs/v3/nlu-manager.md)
  - [Brain NLU](docs/v3/brain-nlu.md)
  - [Bayes NLU](docs/v3/bayes-nlu.md)
  - [Binary Relevance NLU](docs/v3/binary-relevance-nlu.md)
  - [Logistic Regression NLU](docs/v3/logistic-regression-nlu.md)
- [NER Manager](docs/v4/ner-manager.md)
  - [Enum Named Entities](docs/v4/ner-manager.md#enum-entities)
  - [Regular Expression Named Entities](docs/v4/ner-manager.md#regex-entities)
  - [Trim Named Entities](docs/v4/ner-manager.md#trim-entities)
  - [Utterances with duplicated Entities](docs/v4/ner-manager.md#enum-entities)
- [Integration with Duckling](docs/v3/builtin-duckling.md)
  - [Language support](docs/v3/builtin-duckling.md#language-support)
  - [How to integrate with duckling](docs/v3/builtin-duckling.md#how-to-integrate-with-duckling)
  - [Email Extraction](docs/v3/builtin-duckling.md#email-extraction)
  - [Phone Number Extraction](docs/v3/builtin-duckling.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-duckling.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-duckling.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-duckling.md#ordinal-extraction)
  - [Dimension Extraction](docs/v3/builtin-duckling.md#dimension-extraction)
  - [Quantity Extraction](docs/v3/builtin-duckling.md#quantity-extraction)
  - [Amount of Money Extraction](docs/v3/builtin-duckling.md#amount-of-money-extraction)
  - [Date Extraction](docs/v3/builtin-duckling.md#date-extraction)
- [Builtin Entity Extraction](docs/v3/builtin-entity-extraction.md)
  - [Email Extraction](docs/v3/builtin-entity-extraction.md#email-extraction)
  - [IP Extraction](docs/v3/builtin-entity-extraction.md#ip-extraction)
  - [Hashtag Extraction](docs/v3/builtin-entity-extraction.md#hashtag-extraction)
  - [Phone Number Extraction](docs/v3/builtin-entity-extraction.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-entity-extraction.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-entity-extraction.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-entity-extraction.md#ordinal-extraction)
  - [Percentage Extraction](docs/v3/builtin-entity-extraction.md#percentage-extraction)
  - [Age Extraction](docs/v3/builtin-entity-extraction.md#age-extraction)
  - [Currency Extraction](docs/v3/builtin-entity-extraction.md#currency-extraction)
  - [Date Extraction](docs/v3/builtin-entity-extraction.md#date-extraction)
  - [Duration Extraction](docs/v3/builtin-entity-extraction.md#duration-extraction)
- [Sentiment Analysis](docs/v3/sentiment-analysis.md)
- [NLP Manager](docs/v4/nlp-manager.md)
  - [Load/Save](docs/v4/nlp-manager.md#loadsave)
  - [Import/Export](docs/v4/nlp-manager.md#importexport)
  - [Context](docs/v4/nlp-manager.md#context)
  - [Intent Logic (Actions, Pipelines)](docs/v4/nlp-intent-logics.md)
- [Slot Filling](docs/v4/slot-filling.md)
- [Loading from Excel](docs/v3/loading-from-excel.md)
- [Microsoft Bot Framework](docs/v3/microsoft-bot-framework.md)
  - [Introduction](docs/v3/microsoft-bot-framework.md#introduction)
  - [Example of use](docs/v3/microsoft-bot-framework.md#example-of-use)
  - [Recognizer and Slot filling](docs/v3/microsoft-bot-framework.md#recognizer-and-slot-filling)
- Languages
  - [English](https://github.com/axa-group/nlp.js/blob/master/packages/lang-en/README.md)
  - [Indonesian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-id/README.md)
  - [Italian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-it/README.md)
  - [Spanish](https://github.com/axa-group/nlp.js/blob/master/packages/lang-es/README.md)
- [Contributing](#contributing)
- [Contributors](#contributors)
- [Code of Conduct](#code-of-conduct)
- [Who is behind it](#who-is-behind-it)
- [License](#license)
  <!--te-->

## Installation

If you're looking to use NLP.js in your Node application, you can install via NPM like so:

```bash
    npm install node-nlp
```

## React Native

There is a version of NLP.js that works in React Native, so you can build chatbots that can be trained and executed on the mobile even without the internet. You can install it via NPM:

```bash
    npm install node-nlp-rn
```

Some limitations:

- No Chinese
- The Japanese stemmer is not the complete one
- No Excel import
- No loading from a file, or saving to a file, but it can still import from JSON and export to JSON.

## Example of use

You can see a great example of use in the folder [`/examples/02-qna-classic`](https://github.com/axa-group/nlp.js/tree/master/examples/02-qna-classic). This example is able to train the bot and save the model to a file, so when the bot is started again, the model is loaded instead of being trained again.

You can start to build your NLP from scratch with a few lines:

```javascript
const { NlpManager } = require('node-nlp');

const manager = new NlpManager({ languages: ['en'], forceNER: true });
// Adds the utterances and intents for the NLP
manager.addDocument('en', 'goodbye for now', 'greetings.bye');
manager.addDocument('en', 'bye bye take care', 'greetings.bye');
manager.addDocument('en', 'okay see you later', 'greetings.bye');
manager.addDocument('en', 'bye for now', 'greetings.bye');
manager.addDocument('en', 'i must go', 'greetings.bye');
manager.addDocument('en', 'hello', 'greetings.hello');
manager.addDocument('en', 'hi', 'greetings.hello');
manager.addDocument('en', 'howdy', 'greetings.hello');

// Train also the NLG
manager.addAnswer('en', 'greetings.bye', 'Till next time');
manager.addAnswer('en', 'greetings.bye', 'see you soon!');
manager.addAnswer('en', 'greetings.hello', 'Hey there!');
manager.addAnswer('en', 'greetings.hello', 'Greetings!');

// Train and save the model.
(async() => {
    await manager.train();
    manager.save();
    const response = await manager.process('en', 'I should go now');
    console.log(response);
})();
```

This produces the following result in a console:

```bash
{ utterance: 'I should go now',
  locale: 'en',
  languageGuessed: false,
  localeIso2: 'en',
  language: 'English',
  domain: 'default',
  classifications:
   [ { label: 'greetings.bye', value: 0.698219120207268 },
     { label: 'None', value: 0.30178087979273216 },
     { label: 'greetings.hello', value: 0 } ],
  intent: 'greetings.bye',
  score: 0.698219120207268,
  entities:
   [ { start: 12,
       end: 14,
       len: 3,
       accuracy: 0.95,
       sourceText: 'now',
       utteranceText: 'now',
       entity: 'datetime',
       resolution: [Object] } ],
  sentiment:
   { score: 1,
     comparative: 0.25,
     vote: 'positive',
     numWords: 4,
     numHits: 2,
     type: 'senticon',
     language: 'en' },
  actions: [],
  srcAnswer: 'Till next time',
  answer: 'Till next time' }
```

## False Positives

By default, the neural network tries to avoid false positives. To achieve that, one of the internal processes is that words never seen by the network are represented as a feature that gives some weight to the `None` intent. So, if you try the previous example with ""_I have to go_"" it will return the `None` intent because 2 of the 4 words have never been seen while training.
If you don't want to avoid those false positives, and you feel more comfortable with classifications into the intents that you declare, then you can disable this behavior by setting the `useNoneFeature` to false:

```javascript
const manager = new NlpManager({ languages: ['en'], nlu: { useNoneFeature: false } });
```

## Log Training Progress

You can also add a log progress, so you can trace what is happening during the training.
You can log the progress to the console:

```javascript
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: true } });
```

Or you can provide your own log function:

```javascript
const logfn = (status, time) => console.log(status, time);
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: logfn } });
```

## Contributing

You can read the guide for how to contribute at [Contributing](CONTRIBUTING.md).

## Contributors

[![Contributors](https://contributors-img.firebaseapp.com/image?repo=axa-group/nlp.js)](https://github.com/axa-group/nlp.js/graphs/contributors)

Made with [contributors-img](https://contributors-img.firebaseapp.com).

## Code of Conduct

You can read the Code of Conduct at [Code of Conduct](CODE_OF_CONDUCT.md).

## Who is behind it`?`

This project is developed by AXA Group Operations Spain S.A.

If you need to contact us, you can do it at the email opensource@axa.com

## License

Copyright (c) AXA Group Operations Spain S.A.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
""Software""), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
","""NLP.js"" is a general natural language utility for nodejs. 40 languages natively
supported, 104 languages supported with BERT integration. New in version 4 is a
monolithic library into a package system. It provides a plugin system for the
container for the plugins."
1009,A browser API to prevent DOM-Based Cross Site Scripting in modern web applications.,"![npm bundle size](https://img.shields.io/bundlephobia/minzip/trusted-types.svg)
![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/npm/trusted-types.svg)
![GitHub issues](https://img.shields.io/github/issues/w3c/trusted-types.svg)
![npm](https://img.shields.io/npm/v/trusted-types.svg)
[![BrowserStack Status](https://www.browserstack.com/automate/badge.svg?badge_key=eGZQNXU1U09vZjkrZzYzU3YrQ2FsbUpheGczR0VmMTZUSjBydnNjd1pKTT0tLTZPMWVJTnU1UHJvYjFCb0pHQmlsaXc9PQ%3d%3d--295829245abf0dd0cd150f9ca4fe3198da38747b)](https://www.browserstack.com/automate/public-build/eGZQNXU1U09vZjkrZzYzU3YrQ2FsbUpheGczR0VmMTZUSjBydnNjd1pKTT0tLTZPMWVJTnU1UHJvYjFCb0pHQmlsaXc9PQ%3d%3d--295829245abf0dd0cd150f9ca4fe3198da38747b)

# Trusted Types

First time here? This is a repository hosting the Trusted Types specification draft and the polyfill code. You might want to check out other resources about Trusted Types:

 * [Introduction for web developers](https://web.dev/trusted-types/) - API description with examples.
 * [Explainer](explainer.md) - introductory explainer (what problem is the API solving?).
 * [Specification draft](https://w3c.github.io/trusted-types/dist/spec/) - a more comprehensive and formalized description of the Trusted Types API.
 * [Browser Support](https://caniuse.com/trusted-types) - The API is available natively in browsers based on Chromium version 83 and up. 

## Polyfill

This repository contains a polyfill implementation that allows you to use the API in all web browsers. The compiled versions are stored in [`dist` directory](dist/).

### Browsers
The ES5 / ES6 builds can be loaded directly in the browsers. There are two variants of the browser polyfill - **api_only** (light) and **full**. The *api_only* variant defines the API, so you can create policies and types. *Full* version also enables the type enforcement in the DOM, based on the CSP policy it infers from the current document (see [src/polyfill/full.js](src/polyfill/full.js)).

```html
<!-- API only -->
<script src=""https://w3c.github.io/webappsec-trusted-types/dist/es5/trustedtypes.api_only.build.js""></script>
<script>
     const p = trustedTypes.createPolicy('foo', ...)
     document.body.innerHTML = p.createHTML('foo'); // works
     document.body.innerHTML = 'foo'; // but this one works too (no enforcement).
</script>
```

```html
<!-- Full -->
<script src=""https://w3c.github.io/webappsec-trusted-types/dist/es5/trustedtypes.build.js"" data-csp=""trusted-types foo bar; require-trusted-types-for 'script'""></script>
<script>
    trustedTypes.createPolicy('foo', ...);
    trustedTypes.createPolicy('unknown', ...); // throws
    document.body.innerHTML = 'foo'; // throws
</script>
```

### NodeJS

Polyfill is published as an npm package [trusted-types](https://www.npmjs.com/package/trusted-types):

```sh
$ npm install trusted-types
```

The polyfill supports both CommonJS and ES Modules.

```javascript
const tt = require('trusted-types'); // or import { trustedTypes } from 'trusted-types'
tt.createPolicy(...);
```

### Tinyfill

Due to the way the API is designed, it's possible to polyfill the most important
API surface (`trustedTypes.createPolicy` function) with the following snippet:

```javascript
if(typeof trustedTypes == 'undefined')trustedTypes={createPolicy:(n, rules) => rules};
```

It does not enable the enforcement, but allows the creation of policies that
return string values instead of Trusted Types in non-supporting browsers. Since
the injection sinks in those browsers accept strings, the values will be accepted
unless the policy throws an error. This tinyfill code allows most applications
to work in both Trusted-Type-enforcing and a legacy environment.

## Building

To build the polyfill yourself (Java required):

```sh
$ git clone https://github.com/w3c/webappsec-trusted-types/
$ cd trusted-types
$ npm install
$ npm run build
```

## Demo
To see the polyfill in action, visit the [demo page](https://w3c.github.io/trusted-types/demo/).

## Testing
It can be tested by running:
```sh
$ npm test
```
The polyfill can also be run against the [web platform test suite](https://github.com/w3c/web-platform-tests), but that requires small patches to the suite - see [tests/platform-tests/platform-tests-runner.sh](tests/platform-tests/platform-tests-runner.sh).

Cross-browser testing provided by BrowserStack.

<a href=""https://www.browserstack.com"">
  <img height=""70"" src=""assets/browserstack-logo.svg"" alt=""BrowserStack"">
</a>

# Contributing

See [CONTRIBUTING](CONTRIBUTING.md).

# Questions?

Our [wiki](https://github.com/w3c/trusted-types/wiki) or the [specification](https://w3c.github.io/trusted-types/dist/spec/) may already contain an answer
to your question. If not, please [contact us](https://github.com/w3c/trusted-types/wiki/Contact)!
","The Trusted Types API is available in Chromium version 83 and up. There are two
variants of the browser polyfill - **api_only** (light) and **full**. The *api_
only* variant defines the API, so you can create policies and types."
957,Cloudburst Nukkit - Nuclear-Powered Minecraft: Bedrock Edition Server Software,"![nukkit](.github/images/banner.png)

[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](LICENSE)
[![Build Status](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/badge/icon)](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/)
![Tests](https://img.shields.io/jenkins/t/https/ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master.svg)
[![Discord](https://img.shields.io/discord/393465748535640064.svg)](https://discord.gg/5PzMkyK)

Introduction
-------------

Nukkit is nuclear-powered server software for Minecraft: Pocket Edition.
It has a few key advantages over other server software:

* Written in Java, Nukkit is faster and more stable.
* Having a friendly structure, it's easy to contribute to Nukkit's development and rewrite plugins from other platforms into Nukkit plugins.

Nukkit is **under improvement** yet, we welcome contributions.

Links
--------------------

* __[News](https://nukkitx.com)__
* __[Forums](https://nukkitx.com/forums)__
* __[Discord](https://discord.gg/5PzMkyK)__
* __[Download](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master)__
* __[Plugins](https://nukkitx.com/resources/categories/nukkit-plugins.1)__
* __[Wiki](https://nukkitx.com/wiki/nukkit)__

Build JAR file
-------------
- `git clone https://github.com/CloudburstMC/Nukkit`
- `cd Nukkit`
- `git submodule update --init`
- `chmod +x mvnw`
- `./mvnw clean package`

The compiled JAR can be found in the `target/` directory.

Running
-------------
Simply run `java -jar nukkit-1.0-SNAPSHOT.jar`.

Plugin API
-------------
Information on Nukkit's API can be found at the [wiki](https://nukkitx.com/wiki/nukkit/).

Docker
-------------

Running Nukkit in [Docker](https://www.docker.com/) (17.05+ or higher).

Build image from the source,

```
docker build -t nukkit .
```

Run once to generate the `nukkit-data` volume, default settings, and choose language,

```
docker run -it -p 19132:19132 -v nukkit-data:/data nukkit
```
Docker Compose
-------------

Use [docker-compose](https://docs.docker.com/compose/overview/) to start server on port `19132` and with `nukkit-data` volume,

```
docker-compose up -d
```

Kubernetes & Helm
-------------

Validate the chart:

`helm lint charts/nukkit`

Dry run and print out rendered YAML:

`helm install --dry-run --debug nukkit charts/nukkit`

Install the chart:

`helm install nukkit charts/nukkit`

Or, with some different values:

```
helm install nukkit \
  --set image.tag=""arm64"" \
  --set service.type=""LoadBalancer"" \
    charts/nukkit
```

Or, the same but with a custom values from a file:

```
helm install nukkit \
  -f helm-values.local.yaml \
    charts/nukkit
```

Upgrade the chart:

`helm upgrade nukkit charts/nukkit`

Testing after deployment:

`helm test nukkit`

Completely remove the chart:

`helm uninstall nukkit`


Contributing
------------
Please read the [CONTRIBUTING](.github/CONTRIBUTING.md) guide before submitting any issue. Issues with insufficient information or in the wrong format will be closed and will not be reviewed.
","Nukkit is nuclear-powered server software for Minecraft: Pocket Edition. Written
in Java, it's faster and more stable than other server software. Easy to
contribute to Nukkit's development and rewrite plugins from other platforms into
Nuk Kit plugins. NukKit is **under improvement** yet, we welcome contributions."
1856,A suite of tools to assist with reviewing Open Source Software dependencies.,"![OSS Review Toolkit Logo](./logos/ort.png)

&nbsp;

[![Slack][1]][2]

[![Wrapper Validation][3]][4] [![Static Analysis][5]][6]

[![Build and Test][7]][8] [![JitPack build status][9]][10] [![Code coverage][11]][12]

[![TODOs][13]][14] [![REUSE status][15]][16] [![CII][17]][18]

[1]: https://img.shields.io/badge/Join_us_on_Slack!-ort--talk-blue.svg?longCache=true&logo=slack
[2]: https://join.slack.com/t/ort-talk/shared_invite/zt-1c7yi4sj6-mk7R1fAa6ZdW5MQ6DfAVRg
[3]: https://github.com/oss-review-toolkit/ort/actions/workflows/wrapper-validation.yml/badge.svg
[4]: https://github.com/oss-review-toolkit/ort/actions/workflows/wrapper-validation.yml
[5]: https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml/badge.svg
[6]: https://github.com/oss-review-toolkit/ort/actions/workflows/static-analysis.yml
[7]: https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml/badge.svg
[8]: https://github.com/oss-review-toolkit/ort/actions/workflows/build-and-test.yml
[9]: https://jitpack.io/v/oss-review-toolkit/ort.svg
[10]: https://jitpack.io/#oss-review-toolkit/ort
[11]: https://codecov.io/gh/oss-review-toolkit/ort/branch/main/graph/badge.svg?token=QD2tCSUTVN
[12]: https://app.codecov.io/gh/oss-review-toolkit/ort
[13]: https://badgen.net/https/api.tickgit.com/badgen/github.com/oss-review-toolkit/ort
[14]: https://www.tickgit.com/browse?repo=github.com/oss-review-toolkit/ort
[15]: https://api.reuse.software/badge/github.com/oss-review-toolkit/ort
[16]: https://api.reuse.software/info/github.com/oss-review-toolkit/ort
[17]: https://bestpractices.coreinfrastructure.org/projects/4618/badge
[18]: https://bestpractices.coreinfrastructure.org/projects/4618

# Introduction

The OSS Review Toolkit (ORT) aims to assist with the tasks that commonly need to be performed in the context of license
compliance checks, especially for (but not limited to) Free and Open Source Software dependencies.

It does so by orchestrating a _highly customizable_ pipeline of tools that _abstract away_ the underlying services.
These tools are implemented as libraries (for programmatic use) and exposed via a command line interface (for scripted
use):

* [_Analyzer_](#analyzer) - determines the dependencies of projects and their metadata, abstracting which package
  managers or build systems are actually being used.
* [_Downloader_](#downloader) - fetches all source code of the projects and their dependencies, abstracting which
  Version Control System (VCS) or other means are used to retrieve the source code.
* [_Scanner_](#scanner) - uses configured source code scanners to detect license / copyright findings, abstracting
  the type of scanner.
* [_Advisor_](#advisor) - retrieves security advisories for used dependencies from configured vulnerability data 
  services.
* [_Evaluator_](#evaluator) - evaluates custom policy rules along with custom license classifications against the data
  gathered in preceding stages and returns a list of policy violations, e.g. to flag license findings.
* [_Reporter_](#reporter) - presents results in various formats such as visual reports, Open Source notices or
  Bill-Of-Materials (BOMs) to easily identify dependencies, licenses, copyrights or policy rule violations.
* [_Notifier_](./notifier) - sends result notifications via different channels (like
  [emails](./examples/notifications/src/main/resources/example.notifications.kts) and / or JIRA tickets).

Also see the [list of related tools](#related-tools) that help with running ORT. 

# Installation

## From binaries

Preliminary binary artifacts for ORT are currently available via
[JitPack](https://jitpack.io/#oss-review-toolkit/ort). Please note that due to limitations with the JitPack build
environment, the reporter is not able to create the Web App report.

## From sources

Install the following basic prerequisites:

* Git (any recent version will do).

Then clone this repository. If you intend to run tests, you need to clone with submodules by running
`git clone --recurse-submodules`. If you have already cloned non-recursively, you can initialize submodules afterwards
by running `git submodule update --init --recursive`.

### Build using Docker

Install the following basic prerequisites:

* Docker 18.09 or later (and ensure its daemon is running).
* Enable [BuildKit](https://docs.docker.com/develop/develop-images/build_enhancements/#to-enable-buildkit-builds) for 
  Docker.

Change into the directory with ORT's source code and run `docker build -t ort .`. Alternatively, use the script at
`scripts/docker_build.sh` which also sets the ORT version from the Git revision.

### Build natively

Install these additional prerequisites:

* Java Development Kit (JDK) version 11 or later; also remember to set the `JAVA_HOME` environment variable accordingly.

Change into the directory with ORT's source code and run `./gradlew installDist` (on the first run this will bootstrap
Gradle and download all required dependencies).

## Basic usage

Depending on how ORT was installed, it can be run in the following ways:

- If the binary was downloaded from JitPack, use

      java -jar ort.jar --help

- If the Docker image was built, use

      docker run ort --help

  You can find further hints for using ORT with Docker in the [documentation](./docs/hints-for-use-with-docker.md).

- If the ORT distribution was built from sources, use

      ./cli/build/install/ort/bin/ort --help

- If running directly from sources via Gradle, use

      ./gradlew cli:run --args=""--help""

  Note that in this case the working directory used by ORT is that of the `cli` project, not the directory `gradlew` is
  located in (see https://github.com/gradle/gradle/issues/6074).

For simplicity of the following usage examples, the above ORT invocations are unified to just `ort --help`.

# Running the tools

First, make sure that the locale of your system is set to `en_US.UTF-8` as using other locales might lead to issues with
parsing the output of some external tools.

Then, let ORT check whether all required external tools are available by running

    ort requirements

and install any missing tools or add compatible versions as indicated.

Finally, ORT tools like the _analyzer_ can be run like

    ort --info analyze -f JSON -i /project -o /project/ort/analyzer

Just the like top-level `ort` command, the subcommands for all tools provide a `--help` option for detailed usage help.
Use it like `ort analyze --help`.

Please see [Getting Started](./docs/getting-started.md) for an introduction to the individual tools.

## Running on CI

A basic ORT pipeline (using the _analyzer_, _scanner_ and _reporter_) can easily be run on
[Jenkins CI](https://jenkins.io/) by using the [Jenkinsfile](./integrations/jenkins/Jenkinsfile) in a (declarative)
[pipeline](https://jenkins.io/doc/book/pipeline/) job. Please see the [Jenkinsfile](./integrations/jenkins/Jenkinsfile)
itself for documentation of the required Jenkins plugins. The job accepts various parameters that are translated to ORT
command line arguments. Additionally, one can trigger a downstream job which e.g. further processes scan results. Note
that it is the downstream job's responsibility to copy any artifacts it needs from the upstream job.

## Configuration

### Environment variables

ORT supports several environment variables that influence its behavior:

| Name              | Default value          | Purpose                                                  |
|-------------------|------------------------|----------------------------------------------------------|
| ORT_DATA_DIR      | `~/.ort`               | All data, like caches, archives, storages (read & write) |
| ORT_CONFIG_DIR    | `$ORT_DATA_DIR/config` | Configuration files, see below (read only)               |
| ORT_HTTP_USERNAME | Empty (n/a)            | Generic username to use for HTTP(S) downloads            |
| ORT_HTTP_PASSWORD | Empty (n/a)            | Generic password to use for HTTP(S) downloads            |
| http_proxy        | Empty (n/a)            | Proxy to use for HTTP downloads                          |
| https_proxy       | Empty (n/a)            | Proxy to use for HTTPS downloads                         |

### Configuration files

ORT looks for its configuration files in the directory pointed to by the `ORT_CONFIG_DIR` environment variable. If this
variable is not set, it defaults to the `config` directory below the directory pointed to by the `ORT_DATA_DIR`
environment variable, which in turn defaults to the `.ort` directory below the current user's home directory.

The following provides an overview of the various configuration files that can be used to customize ORT behavior:

#### [ORT configuration file](./model/src/main/resources/reference.yml)

The main configuration file for the operation of ORT. This configuration is maintained by an administrator who manages
the ORT instance. In contrast to the configuration files in the following, this file rarely changes once ORT is
operational.

| Format | Scope  | Default location             |
|--------|--------|------------------------------|
| YAML   | Global | `$ORT_CONFIG_DIR/config.yml` |

The [reference configuration file](./model/src/main/resources/reference.yml) gives a good impression about the content
of the main ORT configuration file. It consists of sections related to different subcomponents of ORT. The meaning
of these sections and the properties they can contain is described together with the corresponding subcomponents.

While the file is rather static, there are means to override configuration options for a specific run of ORT or to
customize the configuration to a specific environment. The following options are supported, in order of precedence:

* Properties can be defined via environment variables by using the full property path as the variable name.
  For instance, one can override the Postgres schema by setting 
  `ort.scanner.storages.postgres.connection.schema=test_schema`. The variable's name is case-sensitive.
  Some programs like Bash do not support dots in variable names. For this case, the dots can be
  replaced by double underscores, i.e., the above example is turned into 
  `ort__scanner__storages__postgres__connection__schema=test_schema`.
* In addition to that, one can override the values of properties on the command line using the `-P` option. The option
  expects a key-value pair. Again, the key must define the full path to the property to be overridden, e.g.
  `-P ort.scanner.storages.postgres.connection.schema=test_schema`. The `-P` option can be repeated on the command
  line to override multiple properties.
* Properties in the configuration file can reference environment variables using the syntax `${VAR}`.
  This is especially useful to reference dynamic or sensitive data. As an example, the credentials for the
  Postgres database used as scan results storage could be defined in the `POSTGRES_USERNAME` and `POSTGRES_PASSWORD`
  environment variables. The configuration file can then reference these values as follows:

  ```yaml
  postgres:
    connection:
      url: ""jdbc:postgresql://your-postgresql-server:5444/your-database""
      username: ${POSTGRES_USERNAME}
      password: ${POSTGRES_PASSWORD}
  ```

To print the active configuration use:

```bash
ort config --show-active
```

#### [Copyright garbage file](./docs/config-file-copyright-garbage-yml.md)

A list of copyright statements that are considered garbage, for example statements that were incorrectly classified as
copyrights by the scanner.

| Format      | Scope  | Default location                        |
|-------------|--------|-----------------------------------------|
| YAML / JSON | Global | `$ORT_CONFIG_DIR/copyright-garbage.yml` |

#### [Curations file](./docs/config-file-curations-yml.md)

A file to correct invalid or missing package metadata, and to set the concluded license for packages.

| Format      | Scope  | Default location                |
|-------------|--------|---------------------------------|
| YAML / JSON | Global | `$ORT_CONFIG_DIR/curations.yml` |

#### [Custom license texts dir](./docs/dir-custom-license-texts.md)

A directory that contains license texts which are not provided by ORT.

| Format | Scope  | Default location                        |
|--------|--------|-----------------------------------------|
| Text   | Global | `$ORT_CONFIG_DIR/custom-license-texts/` |

#### [How to fix text provider script](./docs/how-to-fix-text-provider-kts.md)

A Kotlin script that enables the injection of how-to-fix texts in Markdown format for ORT issues into the reports.

| Format        | Scope  | Default location                               |
|---------------|--------|------------------------------------------------|
| Kotlin script | Global | `$ORT_CONFIG_DIR/how-to-fix-text-provider.kts` |

#### [License classifications file](docs/config-file-license-classifications-yml.md)

A file that contains user-defined categorization of licenses.

| Format      | Scope  | Default location                              |
|-------------|--------|-----------------------------------------------|
| YAML / JSON | Global | `$ORT_CONFIG_DIR/license-classifications.yml` |

#### [Resolution file](./docs/config-file-resolutions-yml.md)

Configurations to resolve any issues or rule violations by providing a mandatory reason, and an optional comment to
justify the resolution on a global scale.

| Format      | Scope  | Default location                  |
|-------------|--------|-----------------------------------|
| YAML / JSON | Global | `$ORT_CONFIG_DIR/resolutions.yml` |

#### [Repository configuration file](./docs/config-file-ort-yml.md)

A configuration file, usually stored in the project's repository, for license finding curations, exclusions, and issues
or rule violations resolutions in the context of the repository.

| Format      | Scope                | Default location                |
|-------------|----------------------|---------------------------------|
| YAML / JSON | Repository (project) | `[analyzer-input-dir]/.ort.yml` |

#### [Package configuration file / directory](./docs/config-file-package-configuration-yml.md)

A single file or a directory with multiple files containing configurations to set provenance-specific path excludes and
license finding curations for dependency packages to address issues found within a scan result. `helper-cli`'s
[`package-config create` command](./helper-cli/src/main/kotlin/commands/packageconfig/CreateCommand.kt)
can be used to populate a directory with template package configuration files.

| Format      | Scope                | Default location                          |
|-------------|----------------------|-------------------------------------------|
| YAML / JSON | Package (dependency) | `$ORT_CONFIG_DIR/package-configurations/` |

#### [Policy rules file](./docs/file-rules-kts.md)

The file containing any policy rule implementations to be used with the _evaluator_.

| Format              | Scope     | Default location                      |
|---------------------|-----------|---------------------------------------|
| Kotlin script (DSL) | Evaluator | `$ORT_CONFIG_DIR/evaluator.rules.kts` |

### Protecting environment variables

In order to do its analysis, ORT invokes a number of external tools, such as package managers or scanners. Especially
when interacting with package managers to obtain the dependencies of the analyzed project, this can lead to the
execution of code in build scripts from potentially unknown sources. A possible risk in this constellation is that
untrusted code could read sensitive information from environment variables used for the ORT configuration, such as
database connection strings or service credentials. This is because the environment variables of a process are by
default propagated to the child processes spawned by it.

To reduce this risk, ORT filters out certain environment variables when it runs external tools in child processes.
This filter mechanism can be configured via the following properties in the
[ORT configuration file](./model/src/main/resources/reference.yml):

| Property | Description |
|----------|-------------|
| deniedProcessEnvironmentVariablesSubstrings | A list of substrings that identify variables containing sensitive information. All variables that contain at least one of these strings (ignoring case) are not propagated to child processes. The default for this property contains strings like ""PASS"", ""PWD"", or ""TOKEN"", which are typically used to reference credentials. |
| allowedProcessEnvironmentVariableNames | This is a list of variable names that are explicitly allowed to be passed to child processes - even if they contain a substring listed in `deniedProcessEnvironmentVariablesSubstrings`. Via this property variables required by external tools, e.g. credentials for repositories needed by package managers, can be passed through. Here, entries must match variables names exactly and case-sensitively. |

This mechanism offers a certain level of security without enforcing an excessive amount of configuration, which would
be needed for instance to define an explicit allow list. With the two configuration properties even corner cases can be
defined:

* In order to disable filtering of environment variables completely, set the `deniedProcessEnvironmentVariablesSubstrings` property to a single string that is certainly not contained in any environment variable, such as ""This is for sure not contained in a variable name"".
* To prevent that any environment variable is passed to a child process, substrings can be configured in `deniedProcessEnvironmentVariablesSubstrings` that match all variables, for instance one string for each letter of the alphabet.

# Details on the tools

<a name=""analyzer""></a>

[![Analyzer](./logos/analyzer.png)](./analyzer/src/main/kotlin)

The _analyzer_ is a Software Composition Analysis (SCA) tool that determines the dependencies of software projects
inside the specified input directory (`-i`). It does so by querying the detected package managers; **no modifications**
to your existing project source code, like applying build system plugins, are necessary for that to work. The tree of
transitive dependencies per project is written out as part of an
[OrtResult](https://github.com/oss-review-toolkit/ort/blob/main/model/src/main/kotlin/OrtResult.kt) in YAML (or
JSON, see `-f`) format to a file named `analyzer-result.yml` in the specified output directory (`-o`). The output file
exactly documents the status quo of all package-related metadata. It can be further processed or manually edited before
passing it to one of the other tools.

Currently, the following package managers (grouped by the programming language they are most commonly used with) are
supported:

* C / C++
  * [Conan](https://conan.io/)
  * Also see: [SPDX documents](#analyzer-for-spdx-documents)
* Dart / Flutter
  * [Pub](https://pub.dev/)
* Go
  * [dep](https://golang.github.io/dep/)
  * [Glide](https://github.com/Masterminds/glide)
  * [Godep](https://github.com/tools/godep)
  * [GoMod](https://github.com/golang/go/wiki/Modules)
* Haskell
  * [Stack](https://haskellstack.org/)
* Java
  * [Gradle](https://gradle.org/)
  * [Maven](https://maven.apache.org/) (limitations:
    [default profile only](https://github.com/oss-review-toolkit/ort/issues/1774))
* JavaScript / Node.js
  * [Bower](https://bower.io/)
  * [NPM](https://www.npmjs.com/) (limitations:
    [no peer dependencies](https://github.com/oss-review-toolkit/ort/issues/95))
  * [PNPM](https://pnpm.io/) (limitations:
    [no peer dependencies](https://github.com/oss-review-toolkit/ort/issues/95))
  * [Yarn 1](https://classic.yarnpkg.com/)
  * [Yarn 2+](https://next.yarnpkg.com/)
* .NET
  * [DotNet](https://docs.microsoft.com/en-us/dotnet/core/tools/) (limitations:
    [no floating versions / ranges](https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146),
    [no target framework](https://github.com/oss-review-toolkit/ort/issues/4083))
  * [NuGet](https://www.nuget.org/) (limitations:
    [no floating versions / ranges](https://github.com/oss-review-toolkit/ort/pull/1303#issue-253860146),
    [no target framework](https://github.com/oss-review-toolkit/ort/issues/4083))
* Objective-C / Swift
  * [Carthage](https://github.com/Carthage/Carthage) (limitation:
    [no `cartfile.private`](https://github.com/oss-review-toolkit/ort/issues/3774))
  * [CocoaPods](https://github.com/CocoaPods/CocoaPods) (limitations:
    [no custom source repositories](https://github.com/oss-review-toolkit/ort/issues/4188))
* PHP
  * [Composer](https://getcomposer.org/)
* Python
  * [PIP](https://pip.pypa.io/)
  * [Pipenv](https://pipenv.pypa.io/en/latest/)
  * [Poetry](https://python-poetry.org/)
* Ruby
  * [Bundler](https://bundler.io/) (limitations:
    [restricted to the version available on the host](https://github.com/oss-review-toolkit/ort/issues/1308))
* Rust
  * [Cargo](https://doc.rust-lang.org/cargo/)
* Scala
  * [SBT](https://www.scala-sbt.org/)
* Unmanaged
  * This is a special ""package manager"" that manages all files that cannot be associated to any of the other package
    managers.

<a name=""analyzer-for-spdx-documents""></a>

If another package manager that is not part of the list above is used (or no package manager at all), the generic
fallback to [SPDX documents](https://spdx.dev/specifications/) can be leveraged to describe
[projects](./analyzer/src/funTest/assets/projects/synthetic/spdx/inline-packages/project-xyz.spdx.yml) or
[packages](./analyzer/src/funTest/assets/projects/synthetic/spdx/libs/curl/package.spdx.yml).

<a name=""downloader"">&nbsp;</a>

[![Downloader](./logos/downloader.png)](./downloader/src/main/kotlin)

Taking an ORT result file with an _analyzer_ result as the input (`-i`), the _downloader_ retrieves the source code of
all contained packages to the specified output directory (`-o`). The _downloader_ takes care of things like normalizing
URLs and using the [appropriate VCS tool](./downloader/src/main/kotlin/vcs) to check out source code from version
control.

Currently, the following Version Control Systems (VCS) are supported:

* [CVS](https://en.wikipedia.org/wiki/Concurrent_Versions_System)
* [Git](https://git-scm.com/)
* [Git-Repo](https://source.android.com/setup/develop/repo)
* [Mercurial](https://www.mercurial-scm.org/)
* [Subversion](https://subversion.apache.org/)

<a name=""scanner"">&nbsp;</a>

[![Scanner](./logos/scanner.png)](./scanner/src/main/kotlin)

This tool wraps underlying license / copyright scanners with a common API so all supported scanners can be used in the
same way to easily run them and compare their results. If passed an ORT result file with an analyzer result (`-i`), the
_scanner_ will automatically download the sources of the dependencies via the _downloader_ and scan them afterwards.

We recommend to use ORT with one of the following scanners as their integration has been thoroughly tested (in
alphabetical order):

* FossID
* [ScanCode](https://github.com/nexB/scancode-toolkit)

Additionally, the following reference implementations exist (in alphabetical order):

* [Askalono](https://github.com/amzn/askalono)
* [lc](https://github.com/boyter/lc)
* [Licensee](https://github.com/benbalter/licensee)
* [SCANOSS](https://www.scanoss.com/)

For a comparison of some of these, see this
[Bachelor Thesis](https://osr.cs.fau.de/2019/08/07/final-thesis-a-comparison-study-of-open-source-license-crawler/).

## Storage Backends

In order to not download or scan any previously scanned sources again, or to reuse scan results generated via other
services, the _scanner_ can be configured to use so-called storage backends. Before processing a package, it checks
whether compatible scan results are already available in one of the storages declared; if this is the case, they
are fetched and reused. Otherwise, the package's source code is downloaded and scanned. Afterwards, the new scan
results can be put into a storage for later reuse.

This reuse of scan results can actually happen on a per-repository (`type: ""PROVENANCE_BASED""`) or per-package
(`type: ""PACKAGE_BASED""`) basis. For all storages based on `FileBasedStorage` or `PostgresStorage`, the scanner wrapper
groups packages by their provenance before scanning. This ensures that a certain revision of a VCS repository is only
scanned once, and the results are shared for all packages that are provided by this repository. In the case of
repositories that provide a lot of packages, this can bring a significant performance improvement.

It is possible to configure multiple storages to read scan results from or to write scan results to. For reading,
the declaration order in the configuration is important, as the scanner queries the storages in this order and uses
the first matching result. This allows a fine-grained control over the sources, from which existing scan results are
loaded. For instance, you can specify that the scanner checks first whether results for a specific package are
available in a local storage on the file system. If this is not the case, it can look up the package in a Postgres
database. If this does not yield any results either, a service like [ClearlyDefined](https://clearlydefined.io) can be
queried. Only if all of these steps fail, the scanner has to actually process the package.

When storing a newly generated scan result the scanner invokes all the storages declared as writers. The storage
operation is considered successful if all writer storages could successfully persist the scan result.

The configuration of storage backends is located in the [ORT configuration file](#ort-configuration-file). (For the
general structure of this file and the set of options available refer to the
[reference configuration](./model/src/main/resources/reference.yml).) The file has a section named _storages_ that
lists all the storage backends and assigns them a name. Each storage backend is of a specific type and needs to be
configured with type-specific properties. The different types of storage backends supported by ORT are described below.

After the declaration of the storage backends, the configuration file has to specify which ones of them the
scanner should use for looking up existing scan results or to store new results. This is done in two list properties
named _storageReaders_ and _storageWriters_. The lists reference the names of the storage backends declared in the
_storages_ section. The scanner invokes the storage backends in the order they appear in the lists; so for readers,
this defines a priority for look-up operations. Each storage backend can act as a reader; however, some types do not
support updates and thus cannot serve as writers. If a storage backend is referenced both as reader and writer, the
scanner creates only a single instance of this storage class.

The following subsections describe the different storage backend implementations supported by ORT. Note that the name of
a storage entry (like `fileBasedStorage`) can be freely chosen. That name is then used to refer to the storage from the
`storageReaders` and `storageWriters` sections.

### Local File Storage

By default, the _scanner_ stores scan results on the local file system in the current user's home directory (i.e.
`~/.ort/scanner/scan-results`) for later reuse. Settings like the storage directory and the compression flag can be
customized in the ORT configuration file (`-c`) with a respective storage configuration:

```yaml
ort:
  scanner:
    storages:
      fileBasedStorage:
        backend:
          localFileStorage:
            directory: ""/tmp/ort/scan-results""
            compression: false

    storageReaders: [""fileBasedStorage""]
    storageWriters: [""fileBasedStorage""]
```

### HTTP Storage

Any HTTP file server can be used to store scan results. Custom headers can be configured to provide authentication
credentials. For example, to use Artifactory to store scan results, use the following configuration:

```yaml
ort:
  scanner:
    storages:
      artifactoryStorage:
        backend:
          httpFileStorage:
            url: ""https://artifactory.domain.com/artifactory/repository/scan-results""
            headers:
              X-JFrog-Art-Api: ""api-token""
              
    storageReaders: [""artifactoryStorage""]
    storageWriters: [""artifactoryStorage""]
```

### PostgreSQL Storage

To use PostgreSQL for storing scan results you need at least version 9.4, create a database with the `client_encoding`
set to `UTF8`, and a configuration like the following:

```yaml
ort:
  scanner:
    storages:
      postgresStorage:
        connection:
          url: ""jdbc:postgresql://example.com:5444/database""
          schema: ""public""
          username: ""username""
          password: ""password""
          sslmode: ""verify-full""

    storageReaders: [""postgresStorage""]
    storageWriters: [""postgresStorage""]
```

The database needs to exist. If the schema is set to something else than the default of `public`, it needs to exist and
be accessible by the configured username.

The _scanner_ will itself create a table called `scan_results` and
store the data in a [jsonb](https://www.postgresql.org/docs/current/datatype-json.html) column.

If you do not want to use SSL set the `sslmode` to `disable`, other possible values are explained in the
[documentation](https://jdbc.postgresql.org/documentation/ssl/#configuring-the-client). For other supported
configuration options see [ScanStorageConfiguration.kt](./model/src/main/kotlin/config/ScanStorageConfiguration.kt).

### ClearlyDefined Storage

[ClearlyDefined](https://clearlydefined.io) is a service offering curated metadata for Open Source components. This
includes scan results that can be used by ORT's _scanner_ tool (if they have been generated by a compatible scanner
version with a suitable configuration). This storage backend queries the ClearlyDefined service for scan results of the
packages to be processed. It is read-only; so it will not upload any new scan results to ClearlyDefined. In the
configuration the URL of the ClearlyDefined service needs to be set:

```yaml
ort:
  scanner:
    storages:
      clearlyDefined:
        serverUrl: ""https://api.clearlydefined.io""

    storageReaders: [""clearlyDefined""]
```

<a name=""advisor"">&nbsp;</a>

[![Advisor](./logos/advisor.png)](./advisor/src/main/kotlin)

The _advisor_ retrieves security advisories from configured services. It requires the analyzer result as an input. For
all the packages identified by the analyzer, it queries the services configured for known security vulnerabilities. The
vulnerabilities returned by these services are then stored in the output result file together with additional
information like the source of the data and a severity (if available).

Multiple providers for security advisories are available. The providers require specific configuration in the
[ORT configuration file](./model/src/main/resources/reference.yml), which needs to be placed in the _advisor_
section. When executing the advisor the providers to enable are selected with the `--advisors` option (or its short
alias `-a`); here a comma-separated list with provider IDs is expected. The following sections describe the providers
supported by the advisor:

## NexusIQ

A security data provider that queries [Nexus IQ Server](https://help.sonatype.com/iqserver). In the configuration,
the URL where Nexus IQ Server is running and the credentials to authenticate need to be provided:

```yaml
ort:
  advisor:
    nexusIq:
      serverUrl: ""https://nexusiq.ossreviewtoolkit.org""
      username: myUser
      password: myPassword
```

To enable this provider, pass `-a NexusIQ` on the command line.

## OSS Index

This vulnerability provider does not require any further configuration as it uses the public service at
https://ossindex.sonatype.org/. Before using this provider, please ensure to comply with its
[Terms of Service](https://ossindex.sonatype.org/tos).

To enable this provider, pass `-a OssIndex` on the command line.

## VulnerableCode

This provider obtains information about security vulnerabilities from a
[VulnerableCode](https://github.com/nexB/vulnerablecode) instance. The configuration is limited to the server URL, as
authentication is not required:

```yaml
ort:
  advisor:
    vulnerableCode:
      serverUrl: ""http://localhost:8000""
```

To enable this provider, pass `-a VulnerableCode` on the command line.

## OSV

This provider obtains information about security vulnerabilities from Google [OSV](https://osv.dev/), a distributed
vulnerability database for Open Source. The database aggregates data from different sources for various ecosystems. The
configuration is optional and limited to overriding the server URL.

```yaml
ort:
  advisor:
    osv:
      serverUrl: ""https://api-staging.osv.dev""
```

To enable this provider, pass `-a OSV` on the command line.

<a name=""evaluator"">&nbsp;</a>

[![Evaluator](./logos/evaluator.png)](./evaluator/src/main/kotlin)

The _evaluator_ is used to perform custom license policy checks on scan results. The rules to check against are
implemented as Kotlin scripts with a dedicated DSL. See
[example.rules.kts](./examples/evaluator-rules/src/main/resources/example.rules.kts) for an example rules script. The
script is wrapped into a minimal [evaluator-rules](./examples/evaluator-rules) project which enables auto-completion.

<a name=""reporter"">&nbsp;</a>

[![Reporter](./logos/reporter.png)](./reporter/src/main/kotlin)

The _reporter_ generates a wide variety of documents in different formats from ORT result files. Currently, the
following formats are supported (reporter names are case-insensitive):

* [AsciiDoc Template](docs/reporters/asciidoc-templates.md) (`-f AsciiDocTemplate`)
  * Content customizable with [Apache Freemarker](https://freemarker.apache.org/) templates and
    [AsciiDoc](https://asciidoc.org/)
  * PDF style customizable with Asciidoctor
    [PDF themes](https://docs.asciidoctor.org/pdf-converter/latest/theme/)
  * Supports multiple AsciiDoc backends:
    * PDF (`-f PdfTemplate`)
    * HTML (`-f HtmlTemplate`)
    * XHTML (`-f XHtmlTemplate`)
    * DocBook (`-f DocBookTemplate`)
    * Man page (`-f ManPageTemplate`)
    * AsciiDoc, without any further conversion beyond template processing (`-f AdocTemplate`)
* [ctrlX AUTOMATION](https://apps.boschrexroth.com/microsites/ctrlx-automation/) platform
  [FOSS information](https://github.com/boschrexroth/json-schema/tree/master/ctrlx-automation/ctrlx-core/apps/fossinfo)
  (`-f CtrlXAutomation`)
* [CycloneDX](https://cyclonedx.org/) BOM (`-f CycloneDx`)
* [Excel](https://en.wikipedia.org/wiki/Microsoft_Excel) sheet (`-f Excel`)
* FossID report download (HTML, SPDX, and Excel types)
* [GitLabLicenseModel](https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#artifactsreportslicense_scanning-ultimate)
  (`-f GitLabLicenseModel`)
  * There is a [tutorial video](https://youtu.be/dNmH_kYJ34g) by @xlgmokha
* [NOTICE](https://infra.apache.org/licensing-howto.html) file in two variants
  * List license texts and copyrights by package (`-f NoticeTemplate`)
  * Summarize all license texts and copyrights (`-f NoticeTemplate -O NoticeTemplate=template.id=summary`)
  * Customizable with [Apache Freemarker](https://freemarker.apache.org/) templates
* Opossum input that can be visualized and edited in the [OpossumUI](https://github.com/opossum-tool/opossumUI)
  (`-f Opossum`)
* [SPDX Document](https://spdx.dev/specifications/), version 2.2 (`-f SpdxDocument`)
* Static HTML (`-f StaticHtml`)
* Web App (`-f WebApp`)
  * Also see the [EvaluatedModelReporter](reporter/src/main/kotlin/reporters/evaluatedmodel/EvaluatedModelReporter.kt)
    (`-f EvaluatedModel`) which is the JSON / YAML format used by the Web App report that is also suitable for custom
    post-processing.

# System requirements

ORT is being continuously used on Linux, Windows and macOS by the
[core development team](https://github.com/orgs/oss-review-toolkit/people), so these operating systems are
considered to be well-supported.

To run the ORT binaries (also see [Installation from binaries](#from-binaries)) at least Java 11 is required. Memory and
CPU requirements vary depending on the size and type of project(s) to analyze / scan, but the general recommendation is
to configure Java with 8 GiB of memory (`-Xmx=8g`) and to use a CPU with at least 4 cores.

If ORT requires external tools in order to analyze a project, these tools are listed by the `ort requirements` command.
If a package manager is not list listed there, support for it is integrated directly into ORT and does not require any
external tools to be installed.

# Development

ORT is written in [Kotlin](https://kotlinlang.org/) and uses [Gradle](https://gradle.org/) as the build system, with
[Kotlin script](https://docs.gradle.org/current/userguide/kotlin_dsl.html) instead of Groovy as the DSL.

When developing on the command line, use the committed
[Gradle wrapper](https://docs.gradle.org/current/userguide/gradle_wrapper.html) to bootstrap Gradle in the configured
version and execute any given tasks. The most important tasks for this project are:

| Task        | Purpose                                                           |
|-------------|-------------------------------------------------------------------|
| assemble    | Build the JAR artifacts for all projects                          |
| detekt      | Run static code analysis on all projects                          |
| test        | Run unit tests for all projects                                   |
| funTest     | Run functional tests for all projects                             |
| installDist | Build all projects and install the start scripts for distribution |

All contributions need to pass the `detekt`, `test` and `funTest` checks before they can be merged.

For IDE development we recommend the [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download/) which
can directly import the Gradle build files. After cloning the project's source code recursively, simply run IDEA and use
the following steps to import the project.

1. From the wizard dialog: Select *Import Project*.

   From a running IDEA instance: Select *File* -> *New* -> *Project from Existing Sources...*

2. Browse to ORT's source code directory and select either the `build.gradle.kts` or the `settings.gradle.kts` file.

3. In the *Import Project from Gradle* dialog select *Use auto-import* and leave all other settings at their defaults.

## Debugging

To set up a basic run configuration for debugging, navigate to `OrtMain.kt` in the `cli` module and look for the
`fun main(args: Array<String>)` function. In the gutter next to it, a green ""Play"" icon should be displayed. Click on it
and select `Run 'OrtMainKt'` to run the entry point, which implicitly creates a run configuration. Double-check that
running ORT without any arguments will simply show the command line help in IDEA's *Run* tool window. Finally, edit the
created run configuration to your needs, e.g. by adding an argument and options to run a specific ORT sub-command.

## Testing

For running tests and individual test cases from the IDE, the
[kotest plugin](https://plugins.jetbrains.com/plugin/14080-kotest) needs to be installed. Afterwards tests can be run
via the green ""Play"" icon from the gutter as described above.

# Related Tools

## ORT Config Repository

A [repository](https://github.com/oss-review-toolkit/ort-config) with exemplary ORT configuration files.

## ORT Workbench

The [ORT Workbench](https://github.com/oss-review-toolkit/ort-workbench) is an ORT result file viewer developed by the
ORT core team. It can be used as an alternative to creating a [report](#reporter) to review the ORT output. 

![Screenshot](https://github.com/oss-review-toolkit/ort-workbench/raw/main/assets/screenshot.png)

## ORT GitHub Action

A [GitHub Action](https://github.com/oss-review-toolkit/ort-ci-github-action) to run ORT for your GitHub repositories. 

## ORT GitLab Pipeline

A [GitLab Pipeline](https://github.com/oss-review-toolkit/ort-gitlab-ci) to run ORT for your GitLab repositories.

## ORTHW

A [bash script](https://github.com/oss-review-toolkit/orthw) that helps to simplify and speed up common tasks performed
when processing ORT results.

# Want to Help or have Questions?

All contributions are welcome. If you are interested in contributing, please read our
[contributing guide](https://github.com/oss-review-toolkit/.github/blob/main/CONTRIBUTING.md), and to get quick answers
to any of your questions we recommend you
[join our Slack community][2].

# License

Copyright (C) 2017-2023 [The ORT Project Authors](./NOTICE).

See the [LICENSE](./LICENSE) file in the root of this project for license details.

OSS Review Toolkit (ORT) is a [Linux Foundation project](https://www.linuxfoundation.org) and part of
[ACT](https://automatecompliance.org/).
","The OSS Review Toolkit (ORT) aims to assist with the tasks that commonly need to
be performed in the context of licensecompliance checks. It does so by
orchestrating a highly customizable pipeline of tools that abstract away the
underlying services. These tools are implemented as libraries (for programmatic
use) and exposed via a command line interface (for scripted use) ORT can be run
in the following ways: via JitPack, Docker, or directly from sources. You can
find further hints for ORT with Docker in the [documentation] below."
3199,Data Science Roadmap from A to Z,"![photo_2022-04-20_03-18-03](https://user-images.githubusercontent.com/92026137/164127639-38317783-8c5e-4b85-acf5-3d6bd6dbf9c0.jpg)
<h2>&emsp;&emsp;&emsp;&emsp; DATA SCIENCE ROADMAP :pirate_flag: 2023 </h2>
 
### Data Science Roadmap for anyone interested in how to break into the field!

<h4><i>This repository is intended to provide a free Self-Learning Roadmap to learn the field of Data Science.  I provide some of the best free resources.</i></h4><br>

&emsp;&emsp;[Our Previous Roadmap](https://github.com/Seif-Mohamed1/DataScience-Squad) ♥️<br>
&emsp;&emsp; :warning:	<b>*Before we start,*</b> :warning:
#### If you Dont know What`s Data Science or Projects Life Cycle (starting from Business Understanding to Deployment) or Which Programming Language you should go for or Job Descriptions or the required Soft & Hard Skills needed for this field or Data Science Applications or the Most Common Mistakes, then<br>
### :pushpin:**[This Video](https://www.youtube.com/watch?v=5zRvq7CG6Zw&t=5s) is for you (Highly Recommended :heavy_check_mark:)**


<h2>Data Science vs Data Analytics vs Data Engineering - What's the Difference?</h2><br>
  
![aaa](https://user-images.githubusercontent.com/92026137/163718013-30b3af7b-5b3c-4a08-a54e-1c81b994a5f6.png)

<h4><i>These terms are wrongly used interchangably among people. There are distinct differences:</i></h4>

| :small_orange_diamond:	**Data Science**        | :small_orange_diamond:	**Data Analytics**           | :small_orange_diamond:	**Data Engineering**           |
| ------------- | --------------------- | -------------------- |
|<h5>Is a multidisciplinary field that focuses on looking at raw and structured data sets and providing potential actionable insights. The field of Data Science looks at ensuring we are asking the right questions as opposed to finding exact answers.  Data Scientist require skillsets that are centered on Computer Science, Mathematics, and Statistics.  Data Scientist use several unique techniques to analyze data such as machine learning, trends, linear regressions, and predictive modeling.  The tools Data Scientist use to apply these techniques include Python and R.      </h5>|<h5> Focuses on looking at existing data sets and creating solutions to capture data, process data, and finally organize data to draw actionable insights. This field looks at finding general process, business, and engineering improvements we can make based on questions we don't know the answers to.  Data Analytics require skillsets that are centered on Statistics, Mathematics, and high level understanding of Computer Science. It involves data cleaning, data visualization, and simple modeling.  Common Data Analytic tools used include Microsoft Power Bi, Tableau, and SQL.  </h5>|<h5> Focuses on creating the correct infrastructure and tools required to support the business.  Data Engineers look at what are the optimal ways to store and extract data and involves writing scripts and building data warehouses.  Data Engineering require skillsets that are centered on Software Engineering, Computer Science and high level Data Science.  The tools Data Engineers utilize are mainly Python, Java, Scala, Hadoop, and Spark. </h5>|

# Prepare your workspace
<details><summary> <h3>Tip :one:	: Pick one and stick to it. (:file_folder:Click)</h3>
</summary>
<br>
  
[Anaconda](https://www.anaconda.com/products/distribution): It’s a tool kit that fulfills all your necessities in writing and running code. From Powershell prompt to Jupyter Notebook and PyCharm, even R Studio (if interested to try R)

![a](https://user-images.githubusercontent.com/92026137/163717819-4689c927-6022-47da-b204-169693bfa397.png)


[Atom](https://atom.io/packages/ide-python): A more advanced Python interface, highly recommended by experts. <br />
[Google Colab](https://colab.research.google.com/notebooks/intro.ipynb): It’s like a Jupyter Notebook but in the cloud. You don’t need to install anything locally. All the important libraries are already installed. For example NumPy, Pandas, Matplotlib, and Sci-kit Learn <br />
[PyCharm](https://www.jetbrains.com/): PyCharm is another excellent IDE that enables you to integrate with libraries such as NumPy and Matplotlib, allowing you to work with array viewers and interactive plots. <br />
[Thonny](https://thonny.org/): Thonny is an IDE for teaching and learning programming. Thonny is equipped with a debugger, and supports code completion, and highlights syntax errors.</details>
Most learning platforms have integrated code exercises where you don’t need to install anything locally. But to learn it right, you should have an IDE installed on your local machine. Suggestions will be a marketplace with many options and few improvements from one platform to another.

### Tip :two:	: Focus on one course at least.
### Tip :three: : Don’t chase certifications.
### Tip :four: : Don’t rush for ML without having a good background in programming & maths.


## This track is divided into 3 phases :arrow_down:	:

#### &emsp; 1. Beginner: you get a basic understanding of data analysis, tools and techniques.
#### &emsp; 2. Intermediate: dive deeper in more complex topics of ML, Math and data engineering.
#### &emsp; 3. Advanced: where we learn more advanced Math, DL and Deployment.

:bell: For Data Camp courses, github student pack gives 3 free months. Google how to get it.<br> <i>if you already used it, do not hesitate to contact us to have an account with free access.:hibiscus:</i>
  

## Legend
* :video_camera: Video Content
* :closed_book: Online Article Content / Book
### :bulb: Roadmap Explanation :arrow_forward: [Youtube Video](https://youtu.be/HbIPJuvzRLk) :movie_camera:

***

## :beginner: Beginner :beginner:

[Algorithms Book](https://github.com/cjbt/Free-Algorithm-Books/blob/master/book/Grokking%20Algorithms%20-%20An%20illustrated%20guide%20for%20programmers%20and%20other%20curious%20people.pdf) <i>Every piece of code could be called an algorithm, but this book covers the
more interesting bits.</i><br>
[Specializations (data structures-algorithms)](https://www.coursera.org/specializations/data-structures-algorithms)

**1. Descriptive Stats.** <br>
&emsp;&emsp;&emsp;:video_camera: [Intro to descriptive statistics](https://www.udacity.com/course/intro-to-descriptive-statistics--ud827)<br>
&emsp;&emsp;&emsp;:closed_book: [Online statistics education](http://onlinestatbook.com/Online_Statistics_Education.pdf)<br>
&emsp;&emsp;&emsp;:closed_book: Intro to descriptive statistics [Article1](https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Fdescriptive-statistics-f2beeaf7a8df) & [Article2](https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Fintro-to-descriptive-statistics-252e9c464ac9)<br>
&emsp;&emsp;&emsp;:video_camera: [Arabic Course](https://www.youtube.com/watch?v=d5jh5mmwcKI&list=PLY99ZSsxRyJiu6kb4WRRpeEFqK1pAr-EO)<br>
&emsp;&emsp;&emsp;:video_camera: [Intro to Inferential Statistics](https://www.udacity.com/course/intro-to-inferential-statistics--ud201)++<br>
&emsp;&emsp;&emsp;:closed_book: [Practical Statistics for Data Scientists](https://github.com/Moataz-Elmesmary/Data-Science-Roadmap/blob/main/Practical%20Statistics%20for%20Data%20Scientists.pdf)<br>

**2. Probability**<br>
&emsp;&emsp;&emsp;:video_camera: [Khan Academy](https://www.khanacademy.org/math/statistics-probability/probability-library)<br>
&emsp;&emsp;&emsp;:video_camera: [Arabic Course](https://www.youtube.com/playlist?list=PL158D091D26F47358)<br>
&emsp;&emsp;&emsp;:closed_book: [Introduction to Probability](https://drive.google.com/file/d/15Y0oFNHQRls1qvQNvO3DFLJVhIZvUjTD/view?usp=sharing)<br>

**3. Python**<br>
        &emsp;&emsp;&emsp;:video_camera: [Introduction to Python Programming](https://www.udacity.com/course/introduction-to-python--ud1110)<br>
        &emsp;&emsp;&emsp;:video_camera: [OOP](https://learn.datacamp.com/courses/object-oriented-programming-in-python)<br>
        &emsp;&emsp;&emsp;:video_camera: Arabic - [Hassouna](https://www.youtube.com/watch?v=MxYLqE3Ils8&list=PLHIfW1KZRIfnM9y0sQRwjVz2-IwvnEJep) | [Elzero](https://www.youtube.com/watch?v=mvZHDpCHphk&list=PLDoPjvoNmBAyE_gei5d18qkfIe-Z8mocs)<br>
        &emsp;&emsp;&emsp;:video_camera: [Python Full Course - FreeCodeCamp on YouTube](https://www.youtube.com/watch?v=rfscVS0vtbw)<br>
        &emsp;&emsp;&emsp;:closed_book: [Intro to Python for CS and Data Science](https://drive.google.com/file/d/1rXkYFjw1iKbXCra_B4Ykm0AMRgo6v93w/view?fbclid=IwAR2lg9omGaAsG3g1ZhHQHja8_uxkZ7QddnOUSxfoceRXShU1V_bl4V63xCQ)<br>
        &emsp;&emsp;&emsp;[more in OOP](https://www.futurelearn.com/courses/object-oriented-principles)<br>
**4. Pandas**<br>
        &emsp;&emsp;&emsp;:video_camera: [Corey Schafer-Youtube](https://www.youtube.com/watch?v=ZyhVh-qRZPA&list=PL-osiE80TeTsWmV9i9c58mdDCSskIFdDS)<br>
        &emsp;&emsp;&emsp;:closed_book: [Kaggle](https://www.kaggle.com/learn/pandas)<br>
        &emsp;&emsp;&emsp;:closed_book: [Docs](https://pandas.pydata.org/pandas-docs/version/0.15/tutorials.html)<br>
        &emsp;&emsp;&emsp;:video_camera: [Data School-Youtube](https://www.youtube.com/watch?v=yzIMircGU5I&list=PL5-da3qGB5ICCsgW1MxlZ0Hq8LL5U3u9y&index=1)<br>
        &emsp;&emsp;&emsp;:video_camera: [Arabic Course](https://www.youtube.com/watch?v=3ISW655DemU&list=PLvLvlVqNQGHCb2_ygmr1DQOMOv0yXp84F)<br>
**5. Numpy**<br>
        &emsp;&emsp;&emsp;:closed_book: [Kaggle](https://www.kaggle.com/legendadnan/numpy-tutorial-for-beginners-data-science)<br>
        &emsp;&emsp;&emsp;:video_camera: [Arabic Course](https://www.youtube.com/watch?v=5-5CrLmf2vk&list=PLIA_seGogbkGDYq-dnVCsELEIq_7HK7Ca)<br>
        &emsp;&emsp;&emsp;:closed_book: [Tutorial](http://cs231n.github.io/python-numpy-tutorial/)<br>
        &emsp;&emsp;&emsp;:closed_book: [Docs](https://numpy.org/doc/1.18/user/quickstart.html)<br>
**6. Scipy**<br>
        &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://cs231n.github.io/python-numpy-tutorial/#scipy)<br>
        &emsp;&emsp;&emsp;:closed_book: [Docs](https://docs.scipy.org/doc/scipy/reference/tutorial/general.html)<br>
**7. Data Cleaning**: One of the **MOST** important skills that you need to master to become a good data scientist, you need to practice on many datasets to master it.<br>
        &emsp;&emsp;&emsp;[Read this](https://towardsdatascience.com/the-ultimate-guide-to-data-cleaning-3969843991d4)<br>
        &emsp;&emsp;&emsp;:video_camera: [Course 1](https://www.datacamp.com/courses/cleaning-data-in-python)<br>
        &emsp;&emsp;&emsp;:closed_book: [Notebook1](https://www.kaggle.com/bandiatindra/telecom-churn-prediction)<br/>
        &emsp;&emsp;&emsp;:closed_book: [Notebook2](https://drive.google.com/drive/folders/1OQAEQ8rC4j6oBP7AyDU4bKpPr8sSStJI?fbclid=IwAR2dSrbyoZLM-Wm57yEYy8L8PmpPV9hqXdkNf-pURJC5C5xCz7UJB4YpJ7M)<br/>
        &emsp;&emsp;&emsp;:closed_book: [Notebook3](https://www.kaggle.com/ashishg21/data-cleaning-and-some-analysis-shoe-prices)<br>
        &emsp;&emsp;&emsp;:closed_book: [Kaggle Data cleaning](https://www.kaggle.com/learn/data-cleaning)<br>
**8. Data Visualization** :bar_chart:	<br>
        &emsp;&emsp;&emsp;:video_camera: [Introduction to Data Visualization with Matplotlib](https://app.datacamp.com/learn/courses/introduction-to-data-visualization-with-matplotlib?fbclid=IwAR1OrJSdZ2LVD_c1o3d-_1I7Nhq8OZ3pzTu4010E_XWEmMc0KYsTosz8CIU) or<br>
        &emsp;&emsp;&emsp;:video_camera: [ Corey Schafer - Playlist on Youtube](https://www.youtube.com/watch?v=UO98lJQ3QGI&list=PL-osiE80TeTvipOqomVEeZ1HRrcEvtZB_) or<br>
        &emsp;&emsp;&emsp;:video_camera: [sentdex - Playlist on YouTube](https://www.youtube.com/watch?v=q7Bo_J8x_dw&list=PLQVvvaa0QuDfefDfXb9Yf0la1fPDKluPF)<br>
        &emsp;&emsp;&emsp;:closed_book: [Kaggle to Data Visualization with Seaborn](https://www.kaggle.com/learn/data-visualization)<br>
        &emsp;&emsp;&emsp;:video_camera: [Playlist-Youtube](https://www.youtube.com/watch?v=z7ZINBk8EUk&list=PL998lXKj66MpNd0_XkEXwzTGPxY2jYM2d)<br>
        &emsp;&emsp;&emsp;:video_camera: [Course1: Intro to Data Visualization with Seaborn](https://learn.datacamp.com/courses/introduction-to-data-visualization-with-seaborn)<br>
        &emsp;&emsp;&emsp;:video_camera: [Course2: Intermediate Data Visualization with Seaborn
](https://learn.datacamp.com/courses/intermediate-data-visualization-with-seaborn)<br>
        &emsp;&emsp;&emsp;:video_camera: [Course3: Understanding and Visualizing with Python](https://www.coursera.org/learn/understanding-visualization-data)<br>

**9. EDA**
Note: it's already mentioned in the above probability course <br>
        &emsp;&emsp;&emsp;:video_camera: [DataCamp-EDA in Python](https://learn.datacamp.com/courses/exploratory-data-analysis-in-python) <br>
        &emsp;&emsp;&emsp;:video_camera: [IBM-EDA for Machine Learning](https://www.coursera.org/learn/ibm-exploratory-data-analysis-for-machine-learning) <br>

**10. Dashboards**<br>
 &emsp;*Tableau*<br>
        &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://www.datacamp.com/community/tutorials/data-visualisation-tableau)<br>
        &emsp;&emsp;&emsp;:video_camera: [docs](https://www.tableau.com/learn/training/20201)<br>
        &emsp;&emsp;&emsp;:video_camera: [course](https://learn.datacamp.com/courses/introduction-to-tableau)<br>
&emsp;*Power BI*<br>
        &emsp;&emsp;&emsp;:video_camera: [Power BI Desktop - Coursera](https://www.coursera.orghttps://powerbi.microsoft.com/en-us/learning//projects/power-bi-desktop)<br>
        &emsp;&emsp;&emsp;:video_camera: [Power BI training](https://powerbi.microsoft.com/en-us/learning/)<br>
        &emsp;&emsp;&emsp;:video_camera: [Arabic - Youtube](https://www.youtube.com/watch?v=ykvAWKML9Gk&list=PLof3yw6ZFPFhV75Ptf-5Q88bgUtLOBvOw)<br>



**11. SQL and DB**<br>
         &emsp;&emsp;&emsp;:video_camera: SQL for Data Analysis ([simplilearn](https://www.simplilearn.com/free-online-course-to-learn-sql-basics-skillup) or [Udacity](https://www.udacity.com/course/sql-for-data-analysis--ud198))<br>
         &emsp;&emsp;&emsp;:video_camera: [Intro to SQL](https://learn.datacamp.com/courses/introduction-to-sql) **or** [IBM (SQL for Data Science)](https://www.coursera.org/learn/sql-data-science)<br>
         &emsp;&emsp;&emsp;:video_camera: [Intro to Relational Databases in SQL](https://learn.datacamp.com/courses/introduction-to-relational-databases-in-sql)<br>
         &emsp;&emsp;&emsp;:video_camera: [Arabic Course](https://www.youtube.com/watch?v=B7evUQGmN6M&list=PLfM2wZNebA2zROxUcAbGxNrpVZncsF3oD)<br>
         &emsp;&emsp;&emsp;:video_camera: [Joining Data in SQL](https://www.datacamp.com/courses/joining-data-in-postgresql)<br>
         &emsp;&emsp;&emsp;:pencil: Practice [HackerRank](https://www.hackerrank.com/domains/sql) & [DataLemur](https://datalemur.com/)

**12. Python Regular Expression**<br>
        &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://www.datacamp.com/community/tutorials/python-regular-expression-tutorial)<br>
**13. Time Series Analysis**<br>
         &emsp;&emsp;&emsp;:video_camera: [Track](https://learn.datacamp.com/skill-tracks/time-series-with-python)<br>
         &emsp;&emsp;&emsp;:closed_book: [Book](https://www.oreilly.com/library/view/practical-time-series/9781492041641/?fbclid=IwAR20cq7hAdWf6voOd61u-pNzZCHvB0rZhT_BUoGTAXxPBhhi82p8BhxLEsI)<br>
         &emsp;&emsp;&emsp;:closed_book: [fbprohet](https://facebook.github.io/prophet/docs/quick_start.html)<br>
         &emsp;&emsp;&emsp;:video_camera: Arabic Source [Video1](https://www.youtube.com/watch?v=TvhaHPq6xLU&list=TLPQMjYwNzIwMjEPGXX6392WJA&index=1) & [Video2](https://www.youtube.com/watch?v=mipF7mRVpk0&list=TLPQMjYwNzIwMjEPGXX6392WJA&index=2)<br>
  
<h4><i>At The end of Beginner phase apply all what you've learned on a project.</i></h4>

***


## :beginner: Intermediate :beginner:

**1. Math for ML**: consists of Linear Algebra, Calculus and PCA. <br>
:video_camera: [Specialization](https://www.coursera.org/specializations/mathematics-machine-learning)<br>
:video_camera: [Mathematics for Machine Learning - Most of the needed basics](https://www.youtube.com/watch?v=vLJcduC4lBM&list=PLcQCwsZDEzFmlSc6levE3UV9rZ8yY-D_7)<br><br>
:small_blue_diamond:Linear Algebra<br>
         &emsp;&emsp;&emsp;:video_camera: [Khan Academy - Linear Algebra](https://www.khanacademy.org/math/linear-algebra)<br>
         &emsp;&emsp;&emsp;:video_camera: [Mathematics for Machine Learning: Linear Algebra](https://www.coursera.org/learn/linear-algebra-machine-learning)<br>
         &emsp;&emsp;&emsp;:video_camera: [3Blue1Brown - Essence of Linear Algebra](https://www.3blue1brown.com/topics/linear-algebra)<br>
:small_blue_diamond:Calculus<br>
         &emsp;&emsp;&emsp;:video_camera: [Multivariate Calculus - Coursera](https://www.coursera.org/learn/multivariate-calculus-machine-learning?fbclid=IwAR243aoz0jxs4iUn539pnjSQliXtr7Y5QAsvgeRTietZT_tkyoRU3b6Sq1o)<br>
         &emsp;&emsp;&emsp;:video_camera: [Essence of calculus - Youtube](https://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr)<br>
:small_blue_diamond:PCA<br>
         &emsp;&emsp;&emsp;:video_camera: [PCA - Coursera](https://www.coursera.org/learn/pca-machine-learning)<br>


**2. Machine Learning**<br>
         &emsp;&emsp;&emsp;:video_camera: [Coursera - Old Course by Andrew Ng (Octave/Matlab)](https://www.coursera.org/learn/machine-learning)<br>
         &emsp;&emsp;&emsp;:video_camera: [Coursera Andrew`s new ML Specialization (Python)](https://www.coursera.org/specializations/machine-learning-introduction?_hsenc=p2ANqtz-_R9x3Nm07uCw6YAw9VpCpdjRdfaUFyxdOcvgDljRt7j_NXiahN1plnI_Ob9jn0jSNipuE_Y08llrfPSt_1P7EBvj4LuImpBTKG3bsR6Z9bzjzBoRY&_hsmi=216611333&action=enroll&utm_campaign=mls-launch-2022&utm_content=216613012&utm_medium=email&utm_source=hs_email#courses)<br>
         &emsp;&emsp;&emsp;:video_camera: [Machine Learning Stanford Full Course on YouTube by Andrew](https://www.youtube.com/watch?v=PPLop4L2eGk&list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN)<br>
         &emsp;&emsp;&emsp;:video_camera: [CS480/680 Intro to Machine Learning - Spring 2019 - University of Waterloo](https://www.youtube.com/playlist?list=PLdAoL1zKcqTW-uzoSVBNEecKHsnug_M0k)<br>
         &emsp;&emsp;&emsp;:video_camera: [SYDE 522 – Machine Intelligence (Winter 2018, University of Waterloo)](https://www.youtube.com/playlist?list=PL4upCU5bnihwCX93Gv6AQnKmVMwx4AZoT)<br>
         &emsp;&emsp;&emsp;:video_camera: [Introduction to Machine Learning Course - Udacity](https://www.udacity.com/course/intro-to-machine-learning--ud120)<br>
         &emsp;&emsp;&emsp;:video_camera: [Hesham Asem - Arabic content](https://www.youtube.com/c/HeshamAsem/playlists)<br>
         &emsp;&emsp;&emsp;:video_camera: [IBM ML with Python](https://www.coursera.org/learn/machine-learning-with-python)<br>
         &emsp;&emsp;&emsp;:video_camera: [Machine Learning From Scratch - YouTube (Python Engineer)](https://www.youtube.com/watch?v=ngLyX54e1LU&list=PLqnslRFeH2Upcrywf-u2etjdxxkL8nl7E)<br>
         &emsp;&emsp;&emsp;:closed_book: Hands On ML ([1st](https://drive.google.com/file/d/1uro1p6SlYolSkF0fbFKau0pOQ9ENZqny/view?usp=sharing) & [2nd](https://drive.google.com/file/d/1rS95FTNfiVG4WjGnPjd73GqrmEKey4N1/view?usp=sharing) & [3rd](https://drive.google.com/file/d/11VeqPJw8s9SC9Ru7IVeQhiTyV_9TliOE/view?usp=sharing)) Editions | example code '[Notebooks](https://github.com/ageron/handson-ml?fbclid=IwAR3s31KlwkLKyrEwuEd4UMOcvHN1Q9Z2LLGzPg5vP4UKSwjriHxU0uO405c)'<br>
         &emsp;&emsp;&emsp;:video_camera: [ML Algorithms in Practice](https://www.coursera.org/specializations/machine-learning-algorithms-real-world?utm_medium=email&utm_source=marketing&utm_campaign=A39CcMUuEempyReieZALEQ)<br>
         &emsp;&emsp;&emsp;:video_camera: [ML scientist](https://learn.datacamp.com/career-tracks/machine-learning-scientist-with-python?version=1)<br>
         &emsp;&emsp;&emsp;:video_camera: [Project](https://www.coursera.org/learn/applied-data-science-capstone)<br>

**3. Web Scraping/APIs**<br>
         &emsp;&emsp;&emsp;:video_camera: [course](https://learn.datacamp.com/courses/web-scraping-with-python)<br>
         &emsp;&emsp;&emsp;:closed_book: [intro2](https://www.dataquest.io/blog/web-scraping-tutorial-python/)<br>
         &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://realpython.com/beautiful-soup-web-scraper-python/)<br>
         &emsp;&emsp;&emsp;:closed_book: [Book for both topics](https://b-ok.africa/book/3515980/5d50aa)<br>
APIs <br>
         &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://www.dataquest.io/blog/python-api-tutorial/)<br>
         &emsp;&emsp;&emsp;:closed_book: [Article](https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Fhow-to-pull-data-from-an-api-using-python-requests-edcc8d6441b1)<br>
         &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://rapidapi.com/blog/how-to-use-an-api-with-python/)<br>
**4. Stats.**<br>
         &emsp;&emsp;&emsp;:closed_book: [This stats - Book](https://b-ok.africa/book/2737548/7659e9)<br>
         &emsp;&emsp;&emsp;:closed_book: [Think Bayes - Book](https://b-ok.africa/book/2737587/ab97d5)<br>
**5. Advanced SQL**<br>
         &emsp;&emsp;&emsp;:video_camera: [More advanced SQL](https://www.coursera.org/lecture/data-driven-astronomy/more-advanced-sql-GDmo5)<br>
         &emsp;&emsp;&emsp;:video_camera: [Joining Data in SQL](https://learn.datacamp.com/courses/joining-data-in-postgresql)<br>

**7. Feature Engineering**<br>
         &emsp;&emsp;&emsp;:closed_book: [Tutorial](https://www.kaggle.com/learn/feature-engineering)<br>
         &emsp;&emsp;&emsp;:closed_book: [Article](https://www.medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Ffeature-engineering-for-machine-learning-3a5e293a5114)<br>
         &emsp;&emsp;&emsp;:closed_book: [Book](https://drive.google.com/file/d/1BkJYO0tqMYptTWUDQ7X0vd2aygohHRm8/view?usp=sharing)<br>
**8. interpet Shapley-based explanations of ML models.**<br/>
        &emsp;&emsp;&emsp;:closed_book: [SHAP](https://shap.readthedocs.io/en/latest/)<br/>
        &emsp;&emsp;&emsp;:closed_book: [Kaggle ML explainability](https://www.kaggle.com/learn/machine-learning-explainability)<br/>
<h4><i>After finishing this level apply to 2 or 3 good sized projects.</i></h4>

<i>Read this book, please</i> :open_book: [Introduction to Statistical Learning with Applications in R](https://github.com/Moataz-Elmesmary/Data-Science-Roadmap/blob/main/Introduction%20to%20Statistical%20Learning%20with%20Applications%20in%20R.pdf) بقولك اقرأه<br>
***
## :beginner: Advanced :beginner:

**1. Deep Learning** <br>
        &emsp;&emsp;&emsp;:video_camera: [Deep Learning Fundamentals](https://www.youtube.com/playlist?list=PLZbbT5o_s2xq7LwI2y8_QtvuXZedL6tQU)<br>
        &emsp;&emsp;&emsp;:video_camera: [Introduction to
Deep Learning - MIT](http://introtodeeplearning.com/?fbclid=IwAR35rIygYlCn84DV7mlHvdvs4sMUm2D6RLYVwFpp2nT2t1Zj1GGy3QAWQvQ)<br>
        &emsp;&emsp;&emsp;:video_camera: [Specialization](https://www.coursera.org/specializations/deep-learning)<br>
        &emsp;&emsp;&emsp;:closed_book: [Dive into Deep Learning (En)](https://d2l.ai/d2l-en.pdf?fbclid=IwAR0sVdA8VFYpNZCpYZHgo_kl_HYrjcjDfjEka26D8xRWAhbhh6mmSNIXg3U) | (Ar) version :arrow_right:[Part1](https://drive.google.com/file/d/1SrmT_r8dNK42IqyS0gwXtbLCZbk5G8eu/view?fbclid=IwAR1Xcf8PNKkPJMg0uHRE1QyIW4_BMxISIdoB8pPaepw38njhaIf04MYM218) & [Part2](https://drive.google.com/file/d/1UqEu0amRfAvJD0L1HosIn3UJi0FkNemU/view?fbclid=IwAR1og8pkWr1gT3jdUwqikCZVrOCpyrm0x6ZRL63Kitwhki35pazHdo_ScJI) <br>
        &emsp;&emsp;&emsp;:video_camera: [Deep Learning UC Berkely](https://www.youtube.com/playlist?list=PLZSO_6-bSqHQHBCoGaObUljoXAyyqhpFW)<br>
        &emsp;&emsp;&emsp;:closed_book: [github of Dive into DL](https://github.com/d2l-ai/d2l-en?fbclid=IwAR0QN35b-NHHWq_zKISA1cbI063aRqqoKqR_0e3cpnT5h58GkcNbCIJs3iw)<br>
        &emsp;&emsp;&emsp;:video_camera: [Stanford Lecture - Convolutional Neural Networks for Visual Recognition](https://www.youtube.com/watch?v=vT1JzLTH4G4&list=PL3FW7Lu3i5JvHM8ljYj-zLfQRF3EO8sYv)<br>
        &emsp;&emsp;&emsp;:video_camera: [University of Waterloo - ML / DL](https://www.youtube.com/playlist?list=PLdAoL1zKcqTW-uzoSVBNEecKHsnug_M0k)<br>


**2. Tensorflow**<br>
        &emsp;&emsp;&emsp;:video_camera: [Specialization](https://www.coursera.org/specializations/tensorflow-in-practice)<br>
        &emsp;&emsp;&emsp;:video_camera: [Youtube](https://www.youtube.com/playlist?list=PLZbbT5o_s2xrwRnXk_yCPtnqqo4_u2YGL)<br>
        &emsp;&emsp;&emsp; [fast.ai's Deep Learning Courses](https://www.fast.ai/)<br> 
 ###### <i>TensorFlow beats PyTorch in visualization capabilities and deploying trained models. Go for PyTorch if you want flexibility, debugging capabilities, and short training duration.</i>

**3. PyTorch**<br>
        &emsp;&emsp;&emsp;:video_camera: [PyTorch (UC Berkeley - Youtube) - Lec3 (The 5 parts)](https://www.youtube.com/playlist?list=PLZbbT5o_s2xrwRnXk_yCPtnqqo4_u2YGL)<br>
        &emsp;&emsp;&emsp;:video_camera: [PyTorch - Dr. Data Science - Youtube](https://www.youtube.com/watch?v=vVQs4h6HUvA&list=PLLeO8f6PhlKb_FAC7qxOBtxT9-8EPDAqk)<br>
        &emsp;&emsp;&emsp;:video_camera: [PyTorch Course (2022) - Youtube](https://www.youtube.com/watch?v=v43SlgBcZ5Y&list=PLkdGijFCNuVk9fO1IMfdV1Igob0FUHhkB)<br>
        &emsp;&emsp;&emsp;:closed_book: [Deep Learning With Pytorch](https://drive.google.com/file/d/1-KG_ufeg7zw2iLgG5RrJSFpyonLwulgF/view?usp=sharing)<br>

**4. Advanced Data Science**<br>
        &emsp;&emsp;&emsp;:video_camera: [Advanced Data Science with IBM Specialization](https://www.coursera.org/specializations/advanced-data-science-ibm)<br>
        
**5. NLP** <br>
        &emsp;&emsp;&emsp;:video_camera: [Specialization](https://www.coursera.org/specializations/natural-language-processing)<br>
        &emsp;&emsp;&emsp;:video_camera: [Arabic - Ahmed El Sallab](https://www.youtube.com/playlist?list=PLxmZ0b-n395VxzEUL8-Dy257zSqYZe4yU)<br>
        &emsp;&emsp;&emsp;:video_camera: [Introduction to Natural Language Processing in Python](https://www.datacamp.com/courses/natural-language-processing-fundamentals-in-python)<br>

**6. Inferential Statistics** <br>
        &emsp;&emsp;&emsp;:video_camera: [Specialization, 2nd & 3rd courses](https://www.coursera.org/specializations/statistics-with-python)<br>
        &emsp;&emsp;&emsp;:video_camera: [course](https://www.coursera.org/learn/statistical-inferences)<br>
**7. Bayesian Statistics**<br>
        &emsp;&emsp;&emsp;:video_camera: [1 - From Concept to Data Analysis](https://www.coursera.org/learn/bayesian-statistics)<br>
        &emsp;&emsp;&emsp;:video_camera: [2 - Techniques and Models](https://www.coursera.org/learn/mcmc-bayesian-statistics)<br>
        &emsp;&emsp;&emsp;:video_camera: [3 - Mixture Models](https://www.coursera.org/learn/mixture-models)<br>
**8. Model Deployment** <br>
        &emsp;&emsp;&emsp;:closed_book: [Flask tutorial](https://towardsdatascience.com/deploying-a-deep-learning-model-using-flask-3ec166ef59fb)<br>
        &emsp;&emsp;&emsp;:video_camera: [TensorFlow: Data and Deployment Specialization](https://www.coursera.org/specializations/tensorflow-data-and-deployment)<br>
        &emsp;&emsp;&emsp;:video_camera: [Deploy Models with TensorFlow Serving and Flask](https://www.coursera.org/projects/deploy-models-tensorflow-serving-flask)<br>
        &emsp;&emsp;&emsp;:video_camera: [How to Deploy a Machine Learning Model to Google Cloud - Daniel Bourke](https://www.youtube.com/watch?v=fw6NMQrYc6w)<br>
        &emsp;&emsp;&emsp;if you`re intersted in more deployment methods, search for (_FastAPI - Heroku - chitra_)<br>

**9. Probabilistic Graphical Models** <br>       
        &emsp;&emsp;&emsp;:video_camera: [Specialization](https://www.coursera.org/specializations/probabilistic-graphical-models)<br>
***

**Tasks and Projects will be added soon.** :hourglass_flowing_sand:	<br><br>
***

### :pushpin: Common Tools :arrow_heading_down:<br>
&emsp;&emsp;&emsp;[Anaconda](https://learn.datacamp.com/courses/conda-essentials)<br>
&emsp;&emsp;&emsp;[Git](https://git-scm.com/book/en/v2)<br>
&emsp;&emsp;&emsp;[Course - Udacity](https://www.udacity.com/course/version-control-with-git--ud123)<br>
&emsp;&emsp;&emsp;[Arabic - Youtube](https://www.youtube.com/watch?v=Q6G-J54vgKc)<br>

        
### :pushpin: **More Books ~ [:pushpin: Check This!](https://drive.google.com/drive/folders/1iW7IPrVUqsHumgXUMH_rgeBLpJjRDCmJ?usp=sharing)** 	<br>
 &emsp;&emsp;:atom::atom::atom::atom::atom:<br>
  &emsp;&emsp;&emsp;:closed_book: [:fire:	<b>65</b> Free Important Books :fire:](https://techgrabyte.com/springer-released-65-machine-learning-data-science-books-free/?fbclid=IwAR3x9Mfd4FSrBo_y2F92cAghhZ8851qv3wQ1R_u87s70MZTDtKeG5yn7Hts)<br>
        &emsp;&emsp;&emsp;:closed_book: [Mathematics for Machine Learning ](https://mml-book.github.io/)<br>
        &emsp;&emsp;&emsp;:closed_book: [An Introduction to Statistical Learning](https://www.statlearning.com/)<br>
        &emsp;&emsp;&emsp;:closed_book: [Understanding Machine Learning: From Theory to Algorithms ](https://www.cs.huji.ac.il/w~shais/UnderstandingMachineLearning/copy.html)<br>
        &emsp;&emsp;&emsp;:closed_book: [Probabilistic Machine Learning: An Introduction](https://probml.github.io/pml-book/book1.html)<br>
        &emsp;&emsp;&emsp;:closed_book: [storytelling with data](https://drive.google.com/file/d/1OQu6ZWImGnHbuI_WJOLPdSvKWCABSWMH/view?usp=sharing) Important data visualization guide.<br>
        
***
<details>
<summary> <h3> :pushpin:  <b>Collection of the best Cheat sheets</b></h3></summary>

1. [Importing Data](https://lnkd.in/e3jnyTEi)

2. Pandas

&emsp;&emsp; - [(1)](https://lnkd.in/eiXuBbWh_)
&emsp;&emsp; - [(2)](https://lnkd.in/e8PKwQQQ)
&emsp;&emsp; - [(3)](https://lnkd.in/ewQfqe8q)

3. [Matplotlib](https://lnkd.in/ejxbW8ak)

4. [Seaborn](https://lnkd.in/ejhxUp2K)

5. [Probability](https://lnkd.in/e4Jxx6xP)

6. [Supervised Learning](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/cheatsheet-supervised-learning.pdf)

7. [Unsupervised Learning](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/cheatsheet-unsupervised-learning.pdf)

8. [Deep Learning](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/cheatsheet-deep-learning.pdf)

9. [Machine Learning Tips and Tricks](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/cheatsheet-machine-learning-tips-and-tricks.pdf)

10. [Probabilities and Statistics](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/refresher-probabilities-statistics.pdf)

11. [Comprehensive Stanford Master Cheat Sheet](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/super-cheatsheet-machine-learning.pdf)

12. [Linear Algebra and Calculus](https://github.com/afshinea/stanford-cs-229-machine-learning/blob/master/en/refresher-algebra-calculus.pdf)

13. [Data Science Cheat Sheet](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/PythonForDataScience.pdf)

14. [Keras Cheat Sheet](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Keras_Cheat_Sheet_Python.pdf)

15. [Deep Learning with Keras Cheat Sheet](https://github.com/rstudio/cheatsheets/raw/master/keras.pdf)

16. [Visual Guide to Neural Network Infrastructures](http://www.asimovinstitute.org/wp-content/uploads/2016/09/neuralnetworks.png)

17. [Skicit-Learn Python Cheat Sheet](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Scikit_Learn_Cheat_Sheet_Python.pdf)

18. [Scikit-learn Cheat Sheet: Choosing the Right Estimator](https://scikit-learn.org/stable/tutorial/machine_learning_map/)

19. [Tensorflow Cheat Sheet](https://github.com/kailashahirwar/cheatsheets-ai/blob/master/PDFs/Tensorflow.pdf)

20. [Machine Learning Test Cheat Sheet](https://www.cheatography.com/lulu-0012/cheat-sheets/test-ml/pdf/)</details> 
***

### The best way to practice is to take part in competitions.:trophy: :trophy:	<br>
**Competitions will make you even more proficient in Data Science.**<br>
When we talk about top data science competitions, [**Kaggle**](https://www.kaggle.com/) is one of the most popular platforms for data science. Kaggle has a lot of competitions where you can participate according to your knowledge level.<br>

**You can also check these platforms for data science competitions-**<br>
        - [Driven Data](https://www.drivendata.org/competitions/)<br>
        - [Codalab](https://competitions.codalab.org/)<br>
        - [Iron Viz](https://www.tableau.com/community/iron-viz)<br>
        - [Topcoder](https://www.topcoder.com/challenges)<br>
        - [CrowdANALYTIX Community](https://www.crowdanalytix.com/community)<br>
        - [Bitgrit](https://bitgrit.net/)<br>

        
***
<b> :notebook: Data Science Interview Questions: </b> :arrow_forward:
&emsp; - [(1)](https://github.com/youssefHosni/Data-Science-Interview-Questions)
&emsp;- [(2)](https://github.com/alexeygrigorev/data-science-interviews)
&emsp;- [(3)](https://github.com/rbhatia46/Data-Science-Interview-Resources)
&emsp;- [(4)](https://github.com/iamtodor/data-science-interview-questions-and-answers)
&emsp;- [(5)](https://github.com/milaan9/DataScience_Interview_Questions)
&emsp;- [(6) Arabic Podcast](https://www.youtube.com/watch?v=YjloQOreudk):headphones:<br>
&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;- [(7) 30 days of interview preparation](https://github.com/Moataz-Elmesmary/Data-Science-Roadmap/blob/main/30%20days%20of%20interview%20preparation.pdf):book:	

***
:pushpin:	**Data Analysis Recommendations.**<br>
        &emsp;&emsp;&emsp; Books (:closed_book: [The Data Analysis Workshop](https://drive.google.com/file/d/1BjKsffA2SCY0jY8OIIzgQgM0ZS7E9v_v/view?fbclid=IwAR2_GBlrX7VYoo8WCRO9R2qqrYEqtytoGrObxy1QHWcQ7sRaFjRLb0GmuxM) &
        &emsp;:closed_book: [Head First Data Analysis](https://drive.google.com/file/d/1HXHkwrgsSJLYSeB6I0wPUXIGGnm2-HQ6/view?fbclid=IwAR27M-dlPN6o0YuZg3bXH6_DP9L2fBhkKDEkChvO4SPG-SXfkxrzuoGP5RM))<br>
        &emsp;&emsp;&emsp; [FWD - (The 3 Levels)](https://egfwd.com/?fbclid=IwAR1phYmHHgi0L4E9nOPZcSfAdHWsDs9EvBh3dJgO6gXN4B1A-nV8vspGggs)<br>
        &emsp;&emsp;&emsp; [Google Data Analytics Professional Certificate](https://www.coursera.org/professional-certificates/google-data-analytics)<br>
        &emsp;&emsp;&emsp; [IBM Data Analyst Professional Certificate](https://www.coursera.org/professional-certificates/ibm-data-analyst?fbclid=IwAR1IajEEe2yydVWRt3hbj4qLioXP6oR-fdbw8f1kHAVpAXSA4Z8Eww1Y-fs)<br>
        &emsp;&emsp;&emsp;*Note: A good knowledge & projects in just [Excel](https://www.instagram.com/p/Cea-aa4PSfa/), SQL & Power BI / Tableau can bring you great opportunities*<br>

  
:pushpin:	**[Data Engineering](https://youtu.be/qWru-b6m030) Recommendations.**<br>
        &emsp;&emsp;&emsp; [Roadmap 1](https://www.educba.com/data-engineer-roadmap/)<br> 
        &emsp;&emsp;&emsp; [Roadmap 2](https://github.com/datastacktv/data-engineer-roadmap)<br>
        &emsp;&emsp;&emsp; [IBM Data Engineering Professional Certificate](https://www.coursera.org/professional-certificates/ibm-data-engineer)<br>
***
<details><summary>:file_folder: <h4>CV / Resumes :memo: </h4>
</summary>
  
- [Common mistakes by Yehia Arafa Mostafa](https://www.facebook.com/yehia.arafa.mostafa/posts/110086229517000)<br>
- [CV Tips by Omar Yasser](https://medium.com/@oyaraouf/cv-tips-5faaec55ec07)<br>
- [This Is What A GOOD Resume Should Look Like by careercup](https://www.careercup.com/resume)<br>
- After you have made your beta-version resume, check those [reviews from Mostafa Nageeb](https://www.facebook.com/story.php?story_fbid=2928705840553931&id=445112032246670)<br>
- [After Graduation by Yasser Alaa](https://www.linkedin.com/feed/update/urn:li:activity:6964595411839799296/)<br>
- [How to make Data Science Resume](https://enhancv.com/resume-examples/data-scientist/)<br>
- [Data Science Resume Guide](https://www.beamjobs.com/resumes/data-science-resume-example-guide)<br>
- Resume/CV building for Data Jobs (Arabic)<br>
&emsp;&emsp;:video_camera:[Video 1](https://www.youtube.com/watch?v=R0hsJiNxdDE)<br>
&emsp;&emsp;:video_camera:[Video 2](https://www.youtube.com/watch?v=CrTO0hrC-zQ)
</details>
  
***
:pushpin: [<b><i>Data & AI Companies in Egypt</i></b>](https://trello.com/b/u4HH9Anu/data-ai-jobs-in-egypt) &emsp; - &emsp; [<i>AI/ML Driven Companies In Egypt</i>](https://github.com/harryadel/AI-ML-Driven-Companies-In-Egypt)
*** 
## Contact Me :iphone:	 <br>
  
<a href=""https://www.facebook.com/MoatazElmesmary/"" title=""Facebook""><img src=""https://img.shields.io/badge/Facebook-%234267B2?style=flat&logo=Facebook&logoColor=white""/></a>
<a href=""https://twitter.com/MoatazElmesmary"" title=""twitter""><img src=""https://img.shields.io/twitter/url?label=twitter&style=social&url=https%3A%2F%2Fimg.shields.io%2Ftwitter%2F%3Flabel%3Dtwitter%26style%3Dsocial""/></a>
<a href=""https://www.linkedin.com/in/MoatazElmesmary/"" title=""LinkedIn""><img src=""https://img.shields.io/badge/LinkedIn-%230177B5?style=flat&logo=linkedin&logoColor=white""/></a>
  

","This repository is intended to provide a free Self-Learning Roadmap to learn the
field of Data Science. Data Science is a multidisciplinary field that focuses on
looking at raw and structured data sets and providing potential actionable
insights. Data Analytics require skillsets that are centered on Statistics,
Mathematics, and high level understanding of Computer Science."
2001,"Next-generation ORM for Node.js & TypeScript | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB","![Prisma](https://i.imgur.com/h6UIYTu.png)

<div align=""center"">
  <h1>Prisma</h1>
  <a href=""https://www.npmjs.com/package/prisma""><img src=""https://img.shields.io/npm/v/prisma.svg?style=flat"" /></a>
  <a href=""https://github.com/prisma/prisma/blob/main/CONTRIBUTING.md""><img src=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg"" /></a>
  <a href=""https://github.com/prisma/prisma/blob/main/LICENSE""><img src=""https://img.shields.io/badge/license-Apache%202-blue"" /></a>
  <a href=""https://slack.prisma.io/""><img src=""https://img.shields.io/badge/chat-on%20slack-blue.svg"" /></a>
  <br />
  <br />
  <a href=""https://www.prisma.io/docs/getting-started/quickstart"">Quickstart</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://www.prisma.io/"">Website</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://www.prisma.io/docs/"">Docs</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://github.com/prisma/prisma-examples/"">Examples</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://www.prisma.io/blog"">Blog</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://slack.prisma.io/"">Slack</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://twitter.com/prisma"">Twitter</a>
  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>
  <a href=""https://github.com/prisma/prisma1"">Prisma 1</a>
  <br />
  <hr />
</div>

## What is Prisma?

Prisma is a **next-generation ORM** that consists of these tools:

- [**Prisma Client**](https://www.prisma.io/docs/concepts/components/prisma-client): Auto-generated and type-safe query builder for Node.js & TypeScript
- [**Prisma Migrate**](https://www.prisma.io/docs/concepts/components/prisma-migrate): Declarative data modeling & migration system
- [**Prisma Studio**](https://github.com/prisma/studio): GUI to view and edit data in your database

Prisma Client can be used in _any_ Node.js or TypeScript backend application (including serverless applications and microservices). This can be a [REST API](https://www.prisma.io/docs/understand-prisma/prisma-in-your-stack/rest), a [GraphQL API](https://www.prisma.io/docs/understand-prisma/prisma-in-your-stack/graphql), a gRPC API, or anything else that needs a database.

> **Are you looking for Prisma 1? The Prisma 1 repository has been renamed to [`prisma/prisma1`](https://github.com/prisma/prisma1)**.

## Getting started

The fastest way to get started with Prisma is by following the [**Quickstart (5 min)**](https://www.prisma.io/docs/getting-started/quickstart-typescript).

The Quickstart is based on a preconfigured SQLite database. You can also get started with your own database (PostgreSQL and MySQL) by following one of these guides:

- [Add Prisma to an existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project-typescript-postgres)
- [Set up a new project with Prisma from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch-typescript-postgres)

## How does Prisma work

This section provides a high-level overview of how Prisma works and its most important technical components. For a more thorough introduction, visit the [Prisma documentation](https://www.prisma.io/docs/).

### The Prisma schema

Every project that uses a tool from the Prisma toolkit starts with a [Prisma schema file](https://www.prisma.io/docs/concepts/components/prisma-schema). The Prisma schema allows developers to define their _application models_ in an intuitive data modeling language. It also contains the connection to a database and defines a _generator_:

```prisma
// Data source
datasource db {
  provider = ""postgresql""
  url      = env(""DATABASE_URL"")
}

// Generator
generator client {
  provider = ""prisma-client-js""
}

// Data model
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields:  [authorId], references: [id])
  authorId  Int?
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}
```

In this schema, you configure three things:

- **Data source**: Specifies your database connection (via an environment variable)
- **Generator**: Indicates that you want to generate Prisma Client
- **Data model**: Defines your application models

---

### The Prisma data model

On this page, the focus is on the data model. You can learn more about [Data sources](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/data-sources) and [Generators](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/generators) on the respective docs pages.

#### Functions of Prisma models

The data model is a collection of [models](https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-models). A model has two major functions:

- Represent a table in the underlying database
- Provide the foundation for the queries in the Prisma Client API

#### Getting a data model

There are two major workflows for ""getting"" a data model into your Prisma schema:

- Generate the data model from [introspecting](https://www.prisma.io/docs/concepts/components/introspection) a database
- Manually writing the data model and mapping it to the database with [Prisma Migrate](https://www.prisma.io/docs/concepts/components/prisma-migrate)

Once the data model is defined, you can [generate Prisma Client](https://www.prisma.io/docs/concepts/components/prisma-client/generating-prisma-client) which will expose CRUD and more queries for the defined models. If you're using TypeScript, you'll get full type-safety for all queries (even when only retrieving the subsets of a model's fields).

---

### Accessing your database with Prisma Client

#### Generating Prisma Client

The first step when using Prisma Client is installing its npm package:

```
npm install @prisma/client
```

Note that the installation of this package invokes the `prisma generate` command which reads your Prisma schema and _generates_ the Prisma Client code. The code will be located in `node_modules/.prisma/client`, which is exported by `node_modules/@prisma/client/index.d.ts`.

After you change your data model, you'll need to manually re-generate Prisma Client to ensure the code inside `node_modules/.prisma/client` get updated:

```
npx prisma generate
```

Refer to the documentation for more information about [""generating the Prisma client""](https://www.prisma.io/docs/concepts/components/prisma-client/generating-prisma-client).

#### Using Prisma Client to send queries to your database

Once the Prisma Client is generated, you can import it in your code and send queries to your database. This is what the setup code looks like.

##### Import and instantiate Prisma Client

You can import and instantiate Prisma Client as follows:

```ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()
```

or

```js
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()
```

Now you can start sending queries via the generated Prisma Client API, here are few sample queries. Note that all Prisma Client queries return _plain old JavaScript objects_.

Learn more about the available operations in the [Prisma Client docs](https://www.prisma.io/docs/concepts/components/prisma-client) or watch this [demo video](https://www.youtube.com/watch?v=LggrE5kJ75I&list=PLn2e1F9Rfr6k9PnR_figWOcSHgc_erDr5&index=4) (2 min).

##### Retrieve all `User` records from the database

```ts
// Run inside `async` function
const allUsers = await prisma.user.findMany()
```

##### Include the `posts` relation on each returned `User` object

```ts
// Run inside `async` function
const allUsers = await prisma.user.findMany({
  include: { posts: true },
})
```

##### Filter all `Post` records that contain `""prisma""`

```ts
// Run inside `async` function
const filteredPosts = await prisma.post.findMany({
  where: {
    OR: [{ title: { contains: 'prisma' } }, { content: { contains: 'prisma' } }],
  },
})
```

##### Create a new `User` and a new `Post` record in the same query

```ts
// Run inside `async` function
const user = await prisma.user.create({
  data: {
    name: 'Alice',
    email: 'alice@prisma.io',
    posts: {
      create: { title: 'Join us for Prisma Day 2021' },
    },
  },
})
```

##### Update an existing `Post` record

```ts
// Run inside `async` function
const post = await prisma.post.update({
  where: { id: 42 },
  data: { published: true },
})
```

#### Usage with TypeScript

Note that when using TypeScript, the result of this query will be _statically typed_ so that you can't accidentally access a property that doesn't exist (and any typos are caught at compile-time). Learn more about leveraging Prisma Client's generated types on the [Advanced usage of generated types](https://www.prisma.io/docs/concepts/components/prisma-client/advanced-usage-of-generated-types) page in the docs.

## Community

Prisma has a large and supportive [community](https://www.prisma.io/community) of enthusiastic application developers. You can join us on [Slack](https://slack.prisma.io) and here on [GitHub](https://github.com/prisma/prisma/discussions).

## Security

If you have a security issue to report, please contact us at [security@prisma.io](mailto:security@prisma.io?subject=[GitHub]%20Prisma%202%20Security%20Report%20).

## Support

### Ask a question about Prisma

You can ask questions and initiate [discussions](https://github.com/prisma/prisma/discussions/) about Prisma-related topics in the `prisma` repository on GitHub.

👉 [**Ask a question**](https://github.com/prisma/prisma/discussions/new)

### Create a bug report for Prisma

If you see an error message or run into an issue, please make sure to create a bug report! You can find [best practices for creating bug reports](https://www.prisma.io/docs/support/creating-bug-reports) (like including additional debugging output) in the docs.

👉 [**Create bug report**](https://github.com/prisma/prisma/issues/new?assignees=&labels=&template=bug_report.md&title=)

### Submit a feature request

If Prisma currently doesn't have a certain feature, be sure to check out the [roadmap](https://www.prisma.io/docs/more/roadmap) to see if this is already planned for the future.

If the feature on the roadmap is linked to a GitHub issue, please make sure to leave a +1 on the issue and ideally a comment with your thoughts about the feature!

👉 [**Submit feature request**](https://github.com/prisma/prisma/issues/new?assignees=&labels=&template=feature_request.md&title=)

## Contributing

Refer to our [contribution guidelines](https://github.com/prisma/prisma/blob/main/CONTRIBUTING.md) and [Code of Conduct for contributors](https://github.com/prisma/prisma/blob/main/CODE_OF_CONDUCT.md).

## Build Status

- Prisma Tests Status:  
  [![Build status](https://badge.buildkite.com/590e1981074b70961362481ad8319a831b44a38c5d468d6408.svg?branch=main)](https://buildkite.com/prisma/prisma2-test)
- Ecosystem Tests Status:  
  [![Actions Status](https://github.com/prisma/ecosystem-tests/workflows/test/badge.svg)](https://github.com/prisma/ecosystem-tests/actions)
","Prisma is a next-generation ORM that consists of these tools: Client, Studio and
Migrate. Client can be used in _any_ Node.js or TypeScript backend application
(including serverless applications and microservices) Prisma's Quickstart is
based on a pre-configured SQLite database."
2275,"Repository for ""Introduction to Artificial Neural Networks and Deep Learning: A Practical Guide with Applications in Python""","![Python 3.6](https://img.shields.io/badge/Python-3.6-blue.svg)
![License](https://img.shields.io/badge/Code%20License-MIT-blue.svg)
[![Mailing List](https://img.shields.io/badge/-Mailing%20List-lightgrey.svg)](https://groups.google.com/forum/#!forum/ann-and-dl-book)

# Introduction to Artificial Neural Networks and Deep Learning: A Practical Guide with Applications in Python

Repository for the book *Introduction to Artificial Neural Networks and Deep Learning: A Practical Guide with Applications in Python*.

---

**Deep learning is not just the talk of the town among tech folks. Deep learning allows us to tackle complex problems, training artificial neural networks to recognize complex patterns for image and speech recognition. In this book, we'll continue where we left off in [*Python Machine Learning*](https://github.com/rasbt/python-machine-learning-book) and implement deep learning algorithms in [PyTorch](https://pytorch.org).**

---

- This repository will contain the instructions, code examples, and solutions for the *Hands-On* and *Exercise* portions of each chapter.

- PDF and ebook versions of the book will be available from [Leanpub](https://leanpub.com/ann-and-deeplearning).

[![Deep Learning Book](images/ann-and-deeplearning-cover.jpg)](https://leanpub.com/ann-and-deeplearning)


ISBN-10: [TBA]  
ISBN-13: [TBA]  
Paperback: est. 2018  

---

## Manuscripts / Early Access Drafts

- 01 - Introduction

- 02 - The Perceptron 

- 03 - Optimizing Cost Functions with Gradient Descent

- 04 - Logistic Regression and Softmax Regression

- 05 - From Softmax Regression to Multilayer Perceptrons

- 06 - Cross Validation and Performance Metrics

- 07 - Regularization in Neural Networks

- 08 - Learning Rates and Weight Initialization

- 09 - Convolutional Neural Networks

- 10 - Recurrent Neural Networks

- 11 - Autoencoders

- 12 - General Adverserial Neural Networks

- 13 - Deep Generative Models

- 14 - Reinforcement Learning

#### Supporting Material

- Appendix A: Mathematical Notation [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_a_math_notation.pdf)]

- Appendix B: Algebra Basics [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_b_algebra.pdf)]

- Appendix C: Linear Algebra Essentials

- Appendix D: Calculus and Differentiation Primer [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_d_calculus.pdf)]

- Appendix E: Probability Theory Overview

- Appendix F: Notational Conventions Reference

- Appendix G: Python Setup

- Appendix H: Introduction to NumPy [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_numpy-intro.pdf)] [[Code Notebook](code/appendix_h_numpy-intro/appendix_numpy-intro.ipynb)]

- Appendix I: PyTorch Basics 

- Appendix I (alt.): TensorFlow Basics [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_g_tensorflow.pdf)] [[Code Notebook](code/_old-material/appendix_tensorflow-basics/appendix_tensorflow-basics.ipynb)]

- Appendix J: Cloud Computing [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_cloud-computing.pdf)]

#### Model Zoo

- **[Model Zoo: A collection of standalone TensorFlow and PyTorch models in Jupyter Notebooks](https://github.com/rasbt/deeplearning-models)**

  

---

## About the Book

Machine learning has become a central part of our life — as consumers, customers, and hopefully as researchers and practitioners! I appreciate all the nice feedback that you sent me about [*Python Machine Learning*](https://github.com/rasbt/python-machine-learning-book), and I am so happy to hear that you found it so useful as a learning guide, helping you with your business applications and research projects. I have received many emails since its release. Also, in these very emails, you were asking me about a possible prequel or sequel.

Initially, I was inclined to write more about the ""math"" parts, which can be a real hurdle for almost everyone without (or even with) a math major in college. Initially, I thought that writing a book about ""machine learning math"" was a cool thing to do. Now, I have ~15 chapters worth of notes about pre-calculus, calculus, linear algebra, statistics, and probability theory. However, I eventually came to a conclusion that there were too many other math books out there, already! Most of them are far better and more comprehensive and accurate than my potential ~500-page introduction to the topics that I had in store. After all, I think that the real motivation for learning and understanding a subject comes from being excited about it in the first place; if you are passionate about machine learning and you stumble upon the chain rule in calculus, you wouldn't have any problems to find a trusted resource via your favorite search engine these days.

So, instead of writing that ""prequel,"" let me write about something that's built upon the concepts that I introduced in the later chapters of [*Python Machine Learning*](https://github.com/rasbt/python-machine-learning-book) -- algorithms for deep learning. After we coded a multi-layer perceptron (a certain kind of feedforward artificial neural network) from scratch, we took a brief look at some Python libraries for implementing deep learning algorithms, and I introduced convolutional and recurrent neural networks on a conceptual level.

In this book, I want to continue where I left off and want to implement deep neural networks and algorithms for deep learning algorithms from scratch, using Python, NumPy, and SciPy throughout this educational journey. In addition to the vanilla Python science-stack, we will implement these algorithms in [TensorFlow](https://www.tensorflow.org), highly performant yet very accessible deep learning library for implementing and applying deep learning to real-world problems.

## License

### Code

All code in this repository (including the code examples in Jupyter Notebooks) is open source content, released under the [MIT software license](LICENSE). In short, the permissive MIT license allows you to do anything with the code with proper attribution and without warranty; please check the MIT [LICENSE](LICENSE) notice for further details.

### Text and Graphics

All non-code content and creative work in this repository, including text and graphics, is under exclusive copyright by the author, Sebastian Raschka. Unless noted otherwise, text content shared in this repository is intended for personal use only. You may use, modify, or share short text passages of this work with proper attribution to the author. However, if you are planning to modify and/or share substantial portions of this book for other writings, such as blog posts, magazine article, or teaching material, contact the author for permission.

Figures and graphics marked by a *Creative Commons Attribution-ShareAlike 4.0 International* are free to share under the respective license terms (as listed in the *Creative Commons Attribution-ShareAlike 4.0 International* section in the [LICENSE](LICENSE) file) and proper attribution.


## Acknowledgements

I would like to give my special thanks to the readers, who caught various typos and errors and offered suggestions for clarifying my writing.

- Appendix A: Artem Sobolev, Ryan Sun
- Appendix B: Brett Miller, Ryan Sun
- Appendix D: Marcel Blattner, Ignacio Campabadal, Ryan Sun
- Appendix F: Guillermo Moncecchi‏, Ged Ridgway
- Appendix H: Brett Miller
","Deep learning is not just the talk of the town among tech folks. Deep learning
allows us to tackle complex problems, training artificial neural networks to
recognize complex patterns for image and speech recognition. In this book, we'll
continue where we left off in [Python Machine Learning*] and implement deep
learning algorithms in [PyTorch] This repository will contain the instructions,
code examples, and solutions for the *Hands-On* and *Exercise* portions of each
chapter. PDF and ebook versions of the book will be available from
[Leanpub](https://leanpub.com/ann-and-deeplearning)"
1347,🎉 A list of awesome things related to Quasar,"![Quasar Framework logo](https://cdn.quasar.dev/logo/svg/quasar-logo-awesome.svg)


## Awesome Quasar [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

> A list of awesome things related to Quasar

- [Resources](#resources)
    - [Official Resources](#official-resources)
    - [External Resources](#external-resources)
    - [Official Community](#official-community)
    - [Local Communities](#local-communities)
    - [Tutorials](#tutorials)
      - [Video Tutorials](#video-tutorials)
      - [Articles](#articles)
- [Community App Extensions](#community-app-extensions)
- [Other Community Components and Tools](#other-community-components-and-tools)
- [Projects Using Quasar](#projects-using-quasar)

# Resources

### Official Resources

- [Official Documentation](https://quasar.dev)
- [Quasar GitHub Repo](https://github.com/quasarframework/quasar)
- [Quasar Release Notes](https://github.com/quasarframework/quasar/releases)
- [Official Blog](https://blog.quasar.dev/)
- [Official Video Tutorials](https://quasar.dev/video-tutorials)

### External Resources
> These resources have not been created by Quasar Team, nor do we maintain them or financially benefit from them.

- Video tutorial @Udemy on ""Quasar Framework: Cross-Platform VueJS Vuex & Firebase Apps"": [https://dannys.link/quasar](https://dannys.link/quasar)
- Video tutorial @Udemy on ""Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex)"": [https://www.udemy.com/vuejs-2-the-complete-guide/](https://www.udemy.com/vuejs-2-the-complete-guide/)

### Official Community

- [Official Facebook](https://www.facebook.com/QuasarFramework)
- [Official Twitter](https://twitter.com/quasarframework)
- [Official Chat Room - Discord](https://chat.quasar.dev)
- [Official Forum](https://forum.quasar.dev/)

### Local Communities
> These communities are not maintained by Quasar Team.

- [Quasar Brazil - Telegram Channel](https://t.me/quasarframeworkbrasil) - *Similar with #brazil channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Russia - Telegram Channel](https://t.me/quasar_ru) - *Similar with #russkiy channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Spain - Telegram Channel](https://t.me/quasarframework_es) - *Similar with #spanish channel at [Official Discord](https://chat.quasar.dev)*

### Tutorials

#### Video Tutorials

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [YouTube](https://www.youtube.com/playlist?list=PLBjvYfV_TvwJlOctQ49KiOrxrFwJGqAdr)| Introduction to the Quasar Framework | v0.17.18 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=iml3hDVboHk&t=287s)| Quasar Framework: Create a Vue js app & deploy to web, mobile app & desktop app in 30 minutes! | v0.17.20 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0&index=1)| Quasar Framework V1 Course Preview: Create a Real-World, Cross-Platform App | v1.0.0-beta.19 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) | [YouTube](https://www.youtube.com/watch?v=wTaV4qXyzOg) | Building a multiplatform application with Quasar Framework. (pt-br) | v1.0.5 |
| [Program With Eric](https://www.youtube.com/channel/UCshZ3rdoCLjDYuTR_RBubzw) | [YouTube serie](https://www.youtube.com/watch?v=C-v262YhYvw&list=PL-lxoPS_1OXXBGVdJuBkjCn3qZPYeyoYD) | Quasar Vue.js Tutorial | |
| [Tobias Mesquita](https://dev.to/tobymosque) | [Medium](https://dev.to/quasar/quasar-ssr-using-cookies-with-other-libs-services-4nkl) | Quasar - SSR and using cookies ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube](https://www.youtube.com/watch?v=fj1yog9KB3Q&list=PLAiDzIdBfy8gw5EKbHpNRYBZlpN4yQT4o) | Quasar Framework: Icons & Splashscreens for Web, iOS, Android, Mac & WIndows apps Instantly! ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0) | Quasar Framework: Vue.js Cross Platform App ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=Kfg789g_UTg&list=PLAiDzIdBfy8iZTjdu3mjNglucWadtLG1v) |Quasar Framework: Vue.js Chat App - with Vuex & Firebase (for Web, Mobile & Desktop) ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=JucCBZfeKqM&list=PLAiDzIdBfy8jwqO1vJkWvBWFA0dwD7K_O) | Quasar Framework: Animated Winner Picker App! ||
| [Andre Madarang](https://www.youtube.com/channel/UCtb40EQj2inp8zuaQlLx3iQ) | [YouTube](https://www.youtube.com/watch?v=Ud8jS3VlVHw) | Quasar Framework for Vue.js ||
| [codeguru](https://www.youtube.com/channel/UCyNpa6WDH4i2lEznoju1lMg) | [YouTube serie](https://www.youtube.com/watch?v=qxn7VdC8iCI&list=PLAl8os33KyOVpzfYznpguV_5euzKJ626V) | Quasar framework - Building production web app using GraphQL, AWS Amplify, and Quasar ||
| [Impeccable Ninja](https://www.youtube.com/channel/UC9Vn7Ye-wJmH97IqPHIcSig) | [YouTube](https://www.youtube.com/watch?v=GVOsLNgS2Gg&feature=youtu.be) | Sign and align Cordova apps created with Vue and Quasar ||
| [Patrick Monteiro](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | [YouTube serie](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | Quasar Framwork 1.0 course(pt-br) | v1.x |

Do not forget to watch official [video tutorials](https://quasar.dev/video-tutorials).

#### Articles

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [hawkeye64](https://github.com/hawkeye64) | [Medium](https://medium.com/quasar-framework/building-an-electron-file-explorer-with-quasar-and-vue-7bf94f1bbf6), [github](https://github.com/hawkeye64/electron-quasar-file-explorer) | Building an Electron File Explorer with Quasar (and Vue) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Article](http://viladosilicio.com.br/testes-e2e-com-cypress-no-quasar-framework)| E2E Test with Cypress in the Quasar Framework(pt-br) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) (pt-br) and [William Comnisky](https://github.com/wcomnisky/quasar-hello-auth) (en) | [website (en)](https://wcomnisky.github.io/quasar-hello-auth/) | Quasar Framework with Social Login using Hello.js | v1.0.3 |
| [Navicstein Rotciv](https://dev.to/navicsteinr) | [dev.to](https://dev.to/navicsteinr/deploying-an-app-from-gitlab-to-heroku-using-the-quasar-framework-and-sailsjs-3d00) | Deploying an app from Gitlab to Heroku using the Quasar framework and Sailsjs ||
| [Jeff Galbraith](https://dev.to/hawkeye64) | [dev.to](https://dev.to/quasar/publish-your-quasar-spa-on-github-io-with-history-mode-20h2) | Publish your Quasar SPA on Github.io with History Mode ||
| [Xkonti](https://xkonti.tech) | [Article](https://xkonti.tech/blog/quasar-framework-with-typescript/), [dev.to](https://dev.to/xkonti/creating-quasar-framework-project-with-typescript-support-m9b) | Creating Quasar Framework project with Typescript support ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-4ffecaf33933) | Adding Charts in Quasar ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-using-umd-unified-module-definition-fc2015648b3a) | Adding Charts in Quasar using UMD (Unified Module Definition) ||
| [nothingismagick](https://dev.to/nothingismagick) | [Medium](https://dev.to/tauri/use-sass-variables-in-javascript-583o) | Use Sass Variables in Javascript  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/12097067.html) | Quasar BEX preview guide (Chinese)  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/11980595.html) | Deploy Quasar SSR combine with pm2 and Nginx for proxy (Chinese)  ||
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-embedded-google-maps-to-your-application-432605cdbeac) | Add Embedded Google Maps to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-recurring-rules-for-calendar-dates-to-your-application-401e39b56b2f) | Add Recurring Rules for Calendar Dates to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-dynamic-forms-to-your-vue-app-609de4005a2b) | Add Dynamic Forms to Your Vue App | ^1.13.0 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Medium](https://medium.com/building-kovi/criando-um-pwa-com-framework-vue-js-e-quasar-6b7e1fbc743d) | Criando um PWA com Vue.js e Quasar(pt-br) | v1.x |
| [Joel Olawanle](https://github.com/olawanlejoel) | [Smashing Magazine](https://www.smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/) | An Introduction To Quasar Framework: Building Cross-Platform Applications ||

Do not forget to read the official [blog](https://blog.quasar.dev/).

# Community App Extensions

| Name | Description |
| --- | --- |
| [qmodeltd](https://www.npmjs.com/package/quasar-app-extension-qmodeltd) | QModelTd is an UI app extension for Quasar that simplifies the usage of editable or selectable QTd |
| [remote-dev-tools](https://github.com/bloodf/quasar-remote-dev-tools) | Vue remote devtools for Cordova and Electron apps made with Quasar |
| [alpaca-forms](https://github.com/221B-io/quasar-alpaca-form-builder#readme) | Alpaca form builder built for Quasar |
| [draggable](https://github.com/mesqueeb/quasar-app-extension-draggable) | A Quasar extension that makes elements draggable and movable with keyboard. |
| [swipe-to-close](https://github.com/mesqueeb/quasar-app-extension-swipe-to-close/) | A Quasar Framework app extension that allows you to close dialogs by swiping. |
| [qdatetimepicker](https://github.com/TobyMosque/app-extension-qdatetimepicker#readme) | QDatetimePicker for Quasar |
| [qribbon](https://github.com/webnoob/app-extension-qribbon) | Customisable ribbons with a component builder. Allows ribbons at the top, corners, bottom etc. |
| [http-authentication](https://github.com/stefanvanherwijnen/quasar-app-extension-http-authentication) | HTTP authentication using the Vuex store with basic login, registration and password reset pages. |
| [system-environment-variables](https://github.com/marcorivm/quasar-app-extension-system-environment-variables) | Loading of system environment variables for deploying on CI environment. |
| [easy-forms](https://quasar-easy-forms.web.app) | A component to easily generate (Quasar) forms by only defining a ""schema"" object. |
| [easy-tables](https://quasar-easy-tables.web.app) | A component to easily generate (Quasar) tables by only defining a ""schema"" object. (based on the same schema as `easy-forms`) |
| [vuelidate-rules](https://github.com/cuatromedios/quasar-app-extension-vuelidate-rules) | A Quasar Framework app extension that allows you to use [Vuelidate](https://vuelidate.js.org/) methods as **internal** Quasar rules in fields of a form |
| [QGrid](https://github.com/pratik227/quasar-qgrid) | QGrid is a Quasar App Extension. It allows you to filter data for each column, Drag and Drop Rows and also allows you to filter data using header filters. |
| [QHierarchy](https://github.com/pratik227/quasar-qhierarchy) | QHierarchy is a Quasar App Extension. It allows you to display data in hierarchy structure on your page. |
| [QDraggableTree](https://github.com/mayank091193/quasar-draggable-tree) | QDraggableTree is a Quasar Framework app extension that allows you to drag and drop the nodes in the Quasar QTree |
| [APIWrapper](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper) | An out of the box API client that wrap [axios](https://github.com/axios/axios) with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency...|
| Quasar Tiptap | [github](https://github.com/donotebase/quasar-tiptap), [demo](https://donotebase.github.io/quasar-tiptap) | A modern WYSIWYG rich-text editor built on top of tiptap and Quasar Framework for Vue.js. | v1.9.14 |
| [QFilterConfigurator](https://github.com/heartbeatLV/app-extension-q-filter-configurator) | An easy filter viewer | v1.0.7 |
| [QDatePicker](https://github.com/heartbeatLV/app-extension-q-date-picker) | A date selector (single/period) with the comparison functionality | v1.0.0-rc.1 |
| [QsSelect](https://github.com/heartbeatLV/app-extension-qs-select) | A searchable QSelect with which accepts an url | v0.4.2 |
| [QGoogleMap](https://github.com/mayur091193/q-google-map) , [Docs and Examples](https://q-google-map.netlify.app/) | QGoogleMap(q-google-map) - Quasar app extension to integrate Google Maps | v1.13.2 |
| [QWidgets](https://github.com/mayank091193/quasar-widgets) , [Docs and Examples](https://quasar-widgets.netlify.app/#/docs) | QWidgets(q-widgets) - An awesome set of beautiful Widgets made with love using Quasar Framework and Vue.js! | v1.1.0 |
| [QStatistic](https://github.com/Junvary/quasar-app-extension-qstatistic) | QStatistic allows you to display data statistically. |
| [QCascader](https://github.com/Junvary/quasar-app-extension-qcascader) | QCascader can be used to display and select tree structured data. |

# Other Community Components and Tools
> For older Quasar versions or not supplied through a Quasar App Extension

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [github](https://github.com/mayur091193/readme-pro), [demo](https://readmepro.netlify.app/) | An easy and simple way to generate readme written in quasar framework  |  v2.7.7 |
| Quasar Echarts Example | [github](https://github.com/pratik227/quasar-echarts), [demo](https://quasar-echarts-v5.netlify.app/) | Project using Quasar framework and Echarts 📊 📈 📉 |  v1.15.0 |
| Quasar Geolocation Example | [github](https://github.com/tomers/quasar-geolocation-example), [demo](https://quasar-geolocation-example.surge.sh/) | Sample app to demonstrate usage of geolocation with Quasar Framework | v1.9.8 |
| Quasar 3D Model | [github](https://github.com/patrickmonteiro/quasar-3d-model), [demo](http://quasar3d.surge.sh/) | Sample application with a 3D file renderer (.stl, .obj, .json, .dae, .ply, .gltf) | v1.1.2 |
| Quasar Apex Charts | [github](https://github.com/patrickmonteiro/quasar-apexcharts), [demo](https://quasar-apexcharts.surge.sh) | Project using Quasar framework and ApexCharts 📊 📈 📉 | v1.1.2 |
| Quasar Barcode Reader | [github](https://github.com/patrickmonteiro/quasar-barcode-reader), [demo](https://quasar-barcode-reader.surge.sh/#/) | Base code for a code reader application:   EAN, CODE 128, CODE 39, EAN 8, UPC-A, UPC-C, I2of5, 2of5, CODE 93 e CODABAR with QuaggaJS and Quasar Framework(no dependency on cordova) | v1.1.2 |
| Quasar QRCode Reader | [github](https://github.com/patrickmonteiro/quasar-qrcode-reader), [demo](https://quasar-qrcode-reader.surge.sh/#/) | A simple Javascript-only QRCode generator and reader (no dependency on cordova). Great for web and PWA solutions. | v1.0.6 |
| Quasar Speech API | [github](https://github.com/patrickmonteiro/quasar-speech-api), [demo](https://quasarspeechapi.surge.sh/#/) | Example project using Speech Web API to transcribe speech into text and synthesize text into speech. | v1.0.6 |
| QInputEx Component | [github](https://github.com/snowyu/qinputex) | The Advance Input Component for Quasar is used as single-line input box for date, time, password, color, select etc. | v1.0.0-beta.1 |
| Quasar Snippets | [github](https://github.com/Abdelaziz18003/vscode-quasar-snippets), [Marketplace](https://marketplace.visualstudio.com/items?itemName=abdelaziz18003.quasar-snippets) | Quasar components' snippets for VSCode that can increase your productivity working on Quasar projects. | v0.17.x |
| Quasar Steem Beneficiaries | [github](https://github.com/irelandscape/qv-steem-beneficiaries)<br/>[npm](https://www.npmjs.com/package/qv-steem-beneficiaries) | A Quasar/Vue component for easily adding beneficiaries support to your Steem dapp. | v0.17.16 |
| Quasar calendar | [github](https://github.com/stormseed/quasar-calendar) | A full calendar display in multiple formats that accepts event data and display it in month, week, multi-day, single day and agenda views | v0.15.6 |
| Laqu-l | [github](https://github.com/laqul/laqul/) | A complete starter kit that allows you create amazing apps that look native thanks to the Quasar Framework. Powered by an API developed in Laravel Framework using the easy GraphQL queries language. And ready to use the Google Firebase features. | v0.15.10 |
| Quasar Cloud | [github](https://github.com/mstaack/quasar-cloud-demo) | An online file manager project (like dropbox) showing usage of axios, vuex, validation, authentication | v0.15.10 |
| Quasar Oh-my-zsh | [github](https://github.com/sajt/oh-my-zsh) | A plugin for Oh-my-zsh | v1.0.0 |
| APIWrapper | [github](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper), [npm](https://www.npmjs.com/package/api-client-wrapper) | A package designed to wrap up the most common features of an api client implementation, with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency... | v1 |
| Quasar DevOps | [github](https://github.com/Qoyyuum/quasar-devops) | A repo dedicated to CI/CD for Quasar Framework | v1 |
| Starter kit | [github](https://github.com/MilosPaunovic/quasar-v1-starter) | Starter kit for quickly lifting your project from the ground up; includes public pages (Login, Register, Reset Password) with Cypress testing setup, Router & VUEX are present with a lot more helpful stuff implemented. | v1 |

# Projects Using Quasar

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [Github](https://github.com/mayur091193/readme-pro), [Website](https://readmepro.netlify.app/) | Readme Pro is an open-source readme and github profile generator written in Quasar Framework | v2.7.7 |
| Quasar Admin Premium  | [website](https://quasar-admin-premium.netlify.app/) | Beautiful premium Quasar admin template for Vue 3 | v2.7.1 |
| Tomatodo  | [github](https://github.com/emingenc/tomatodo),[website](https://tomatodo.web.app/),[android](https://play.google.com/store/apps/details?id=com.emdiapps.tomatodo)  | Pomodoro app that rewards with luck wheel after pomodoro sessions | v2.0.0 |
| GreaterWMS | [github](https://github.com/Singosgu/GreaterWMS),[website](https://production.56yhz.com/#/) | Open Source Warehouse Management System | v2.1.0 |
| Gobazar.uz | [website](https://gobazar.uz) | The first big e-commerce website made with Vue.js/Quasar | v1 |
| Jump Park | [ios](https://apps.apple.com/us/app/jump-park-%D0%BF%D0%B0%D1%80%D0%BA-%D1%81-%D0%B1%D0%B0%D1%82%D1%83%D1%82%D0%B0%D0%BC%D0%B8/id1563315885), [android](https://play.google.com/store/apps/details?id=org.bazumax.jumppark.app) | Take control gym membership for admin, and clients can see info. The first production mobile app using Quasar v2. | v2.0.0-beta.12 |
| Quasar Gaming Template | [github](https://github.com/pratik227/quasar-gaming), [website](https://quasar-gaming.netlify.app/) | Free Quasar Gaming Template based on Vue js and Quasar Framework. | v1.12.12 |
| Kudos - Company profile template | [github](https://github.com/mayank091193/vue-quasar-company-profile-website), [website](https://quasar-company-profile-template.netlify.app/) | Free template for company profile made using Quasar Framework and Vue.js! It is a fully responsive template which you can use for your company or may be for your own portfolio website. | v1.9.15 |
| Expense Tracker | [github](https://github.com/rbretecher/expense-tracker), [website](https://expense-tracker-demo-42250.firebaseapp.com) | A simple application to track expenses and split bills. | v1 |
| Quasar Scrum | [github](https://github.com/mayank091193/quasar-scrum), [website](https://quasar-scrum.netlify.com/) | A Free Quasar Scrum Template : Agile process framework for managing complex tasks | v1.9.12 |
| Quasar Admin | [github](https://github.com/pratik227/quasar-admin), [website](https://quasar-admin-demo.netlify.com/) | A Free and beautiful Quasar Admin template | v1.9.3 |
| Quasar Shopping | [github](https://github.com/mayur091193/quasar-shopping), [website](https://quasar-shopping.netlify.com) | Free and Open source eCommerce UI template written in Vue.js/Quasar | v1.9.3 |
| Quasar CRM Admin | [github](https://github.com/mayank091193/quasar-admin-crm), [website](https://quasar-admin-crm-template.netlify.com/) | A free and beautiful Quasar template for CRM needs. | v1.8.5 |
| Personal website template | [github](https://github.com/mayank091193/mayank-profile), [website](https://mayank-patel.netlify.app/#/) | Free template for personal website | v1.9.15 |
| Quasar Typescript Admin Template| [github](https://github.com/dirkhe1051931999/quasar-typescript-admin-template) | 💫 💫 template for quasar admin with typescript 🌝 🌝 support pwa,electron,spa,Ionic | v0.0.1 |
| Alighieri | [github](https://github.com/zuck/alighieri/), [website](https://zuck.github.io/alighieri) | A distraction-free writer tool | v1.15.4 |
| P.volve | [website](https://my.pvolve.com) | [Video workout subscription](https://my.pvolve.com/preview), [landing pages](https://my.pvolve.com/offer/subway), also includes weight tracking, photo upload, etc. for subscribers | v0.15.9 |
| Brotheld | [android](https://play.google.com/store/apps/details?id=de.sopamo.brotheld), [ios](https://itunes.apple.com/de/app/brotheld/id1193619132?l=de&ls=1&mt=8) | Brotheld (Bread Hero), a german app for hobby bakers | v0.14 |
| MyClinic | [android](https://play.google.com/store/apps/details?id=today.myclinic.mobileapp&hl=en), [ios](https://itunes.apple.com/us/app/myclinic/id1311703491?ls=1&mt=8) | Application for displaying and managing medical clinic examination room status | v0.14 |
| Weacast | [github](https://github.com/weacast/weacast), [website](https://weacast.github.io/weacast-docs/) | Open source platform to gather, expose and make use of weather forecast data | v0.13.10 |
| CryptoPrice | [github](https://github.com/lmfresneda/crypto-price), [android](https://play.google.com/store/apps/details?id=com.es.cryptoprice) | An app to inform us of price (USD & EUR) of the main crypto-coins | v0.14.4 |
| Quran App | [website](https://quran-lite.firebaseapp.com), [android](https://play.google.com/store/apps/details?id=rashidnk.quran) | Quran Lite with English translation | v0.14.4 |
| SHUhelper | [github](https://github.com/shuopensourcecommunity/SHUhelper), [website](https://www.shuhelper.cn)| Open source university online community and toolkits | v0.14.7 |
| 2018 Quarterly Tax Estimator | [android](https://play.google.com/store/apps/details?id=com.codingfriend.quarterlytaxes), [iOS](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1360874746?ls=1&mt=8), [Mac App Store](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1342826706?ls=1&mt=12) | Estimates quarterly taxes and taxes to save per paycheck | v0.14 |
| Go2See | [website](https://m.go2see.ru) | Russian online travel service | v0.14.7 |
| Guitar Workshop | [website](https://guitarworkshop.digital) | E-commerce shop, library, streaming video player, real time chat | v0.15.9 |
| Karrot (Foodsaving Worldwide) | [github](https://github.com/yunity/karrot-frontend), [website](https://karrot.world) | A web-app to support foodsaving groups worldwide, with the goal to save our common resources as much as possible | v1.14.6 |
| onvif-nvt-snapshot-vue-sample | [github](https://github.com/hawkeye64/onvif-nvt-snapshot-vue-sample) | An onvif-nvt (package) sample project for snapshots and PTZ using Vue 2.5 and Quasar 0.14.7 | v0.14.7 |
| Finca Report | [website/android/ios](https://fincareport.com/) | Sistema de informacion para el cultivo de palma africana| v0.15.3 |
| SoFoot | [android](https://play.google.com/store/apps/details?id=com.sofoot), [ios](https://itunes.apple.com/fr/app/so-foot/id591043947?mt=8) | SO FOOT is an iOS & Android mobile football news application, seen differently. With original and offbeat content, the app is based on real time and smart content feed to make it simple and accessible with a scroll. | v0.14.7 |
| PaintTubeTV | [website](https://painttube.tv) | Shop, library, streaming video player, real time chat | v0.15.9 |
| MyBibou | [android](https://play.google.com/store/apps/details?id=io.benovea.mybibou&hl=fr), [ios](https://itunes.apple.com/fr/app/mybibou/id1319283569) | MyBibou is an iOS & Android mobile application that simplifies the life of parents for successful family outings. The app geolocates users on a map and give them relevant information based on their needs and situation. | v0.14.7 |
| Budgex | [pwa](https://budgex-e481b.firebaseapp.com) | Budget and expense tracker | v0.15.1 |
| Booly | [website](https://boolyapp.com/) | A people-matching tool | v0.14.6 |
| Takista | [android](https://play.google.com/store/apps/details?id=io.sergiuneagu.taskista), [github](https://github.com/sergiuwd/Taskista) | To Do Lists Manager | v0.13.4 |
| Blinga! | [website](https://app.blinga.club/), [android](https://play.google.com/store/apps/details?id=club.blinga.app), [ios](https://itunes.apple.com/us/app/blinga/id1219393599?l=pt&ls=1&mt=8) | A points program and guide for selling products and services in cities. | v0.14.0 |
| Charging Stations | [github](https://github.com/nestebe/charging-stations-tracker) | Charging stations viewer hybrid app | v0.14 |
| Carpool 3D | [website](https://carpol.picktype.com/v/truck) | Carpool 3D Truck | v0.14.7 |
| The Amusing Development | [website](https://portfolio-site-78a03.firebaseapp.com) | Portfolio website | v0.14.7 |
| Habot | [github](https://github.com/ghys/habot) | A chatbot for openHAB using machine-learning natural language processing from OpenNLP | v0.14.6 |
| TMdb | [website](https://codingstones.github.io/tmdb-quasar/#/popular_films), [github](https://github.com/codingstones/tmdb-quasar) | Quasar app with The Movie DB catalog | v0.14.7 |
| Take Action | [android](https://play.google.com/store/apps/details?id=com.stephensuess.takeaction), [ios](https://itunes.apple.com/us/app/takeaction-me/id1276844461) | v0.14.5 ||
| Voting Daap | [github](https://github.com/Vishwas1/voting-daap-2017) | E-voting | v0.14 |
| Kanttum | [website](https://app.kanttum.com/) | Teacher training without complication | v0.14.8 |
| Stock Scanner | [github](https://github.com/vikramIde/stock_scan1) | Working Demo of Barcode/QR code scanner using VueJs+Quasar+Cordova | v0.13.4 |
| ShockPro | [ios](https://itunes.apple.com/us/app/shockpro/id1244901518?mt=8) | Maintenance Interval Tracking | v0.12 |
| My Spells | [website](http://myspells.netlify.com/) | 5e Personal Spellbook | v0.13.9 |
| Tigris | [github](https://github.com/jogral/tigris-desktop-ui) | Micro-learning for professionals | v0.13 |
| Pilgrim and Wanderer's Songbook | [android](https://play.google.com/store/apps/details?id=com.maxprog.songbooks), [ios](https://itunes.apple.com/pl/app/%C5%9Bpiewnik-pielgrzyma-w%C4%99drowca/id1364666898?l=pl&mt=8) | Mobile Application Songbooks has been created for one of the biggest Protestant Church. | v0.15.12 |
| dockJob | [github](https://github.com/rmetcalf9/dockJob), [docker hub](https://hub.docker.com/r/metcarob/dockjob/) | Job scheduler with a web UI - designed to run inside a container. | v0.15.5 |
| Your Daily Walk | [website](https://yourdailywalk.com/) | Subscription ecommerce, workout video calendar, streaming video player, real time chat | v0.15.9 |
| Chronocross | [android](https://play.google.com/store/apps/details?id=org.yevlabs.chronocross) | Productivity tool that combines Pomodoro Technique and Eisenhower Matrix. | v0.15.10 |
| Jornal Pelicano | [android](https://play.google.com/store/apps/details?id=com.cordova.jornalpelicano&hl=pt) | Mobile application for a Navy Web Journal | v0.14.1 |
| Vuenote | [github](https://github.com/ExNG/vuenote) | Vuenote is the simplest note app. | v0.15.10 |
| Sifà | [pwa](https://sifapp.com) | Social platform for buyer groups | v0.15.10 |
| Realworld Conduit | [github](https://github.com/geoidesic/realworld-quasar/) | Medium.com clone | v0.15.10 |
| vue-quasar-admin | [website](http://jaycewu.coding.me/vue-quasar-admin),[github](https://github.com/wjkang/vue-quasar-admin) | admin-dashboard | v0.15.14 |
| letsbutterfly(tm) | [pwa](https://app.letsbutterfly.com) | Real estate platform in your pocket. https://letsbutterfly.com | v0.15.10 |
| quasar-documentation++ | [github](https://github.com/slowaways/quasar-documentation-pp) | All-in-one Quasar Documentation | v0.16.0 |
| Dolphin Note | [website](https://www.donote.info) | A Simple and Elegant markdown note application. | v0.15.14 |
| Quicknote | [website](https://quick.donote.info) | A Simple and Elegant markdown quicknote DApp. | v0.15.14 |
| T9N Manager | [website](http://t9n.ist) | Translation manager for developers | v0.16.0 |
| Kicktrack | [website](https://kicktrack.app), [Android](https://play.google.com/store/apps/details?id=kicktrack.app), [iOS](https://itunes.apple.com/us/app/kicktrack/id1397163195?mt=8) | Foosball score keeper | v0.16.0 |
| Musical Data | [website](https://musicaldata.com) | Access Spotify's data of your favorite music. | v0.16.0 |
| Nebide | [website](https://nebide.block2100.com) | Cross-platform Nebulas smart contract IDE. | v0.16.0 |
| Nick Zuccarelli | [website](https://nickzuccarelli.com.au) | A portfolio website for Nick Zuccarelli (a.k.a: me!) | v0.16.0 |
| jQuizzer | [android](https://play.google.com/store/apps/details?id=org.yevlabs.jquizzer) | Simple Java 8 Quiz / Trainer App | v0.16.0 |
| SA Email Builder | [website](https://emailbuilder.top) | Email template builder responsive v10 | v2.0.4 |
| Boid.com | [website](https://www.boid.com) | A blockchain based social computing platform. Homepage and web/electron app are pure Quasar. | v0.16.4 |
| Dappos Ethereum POS | [github](https://github.com/Dappos/Dappos), [website](http://dappos.app) | A Point of Sale (POS) app like Square! For Ethereum payments. Open in a Mobile wallet and receive customer's payments with an intuitive UI. | v0.17 |
| INTI | [website](https://byinti.com) | Online white-label ticketing system with CRM and custom Applications | Latest |
| Fastient | [PWA](https://fastient.com) | A journaling and stats tracking application for extended fasts. | v0.17.10 |
| Squync | [SPA](https://www.squync.com) | Music library. | v0.14 |
| CidadeMOB | [pwa](https://m.cidademob.com.br/), [android](https://play.google.com/store/apps/details?id=br.com.cidademob), [ios](https://itunes.apple.com/br/app/cidademob/id1154262726?l=en&mt=8) | (Brazil) Application that offers services of the city hall for citizens | v0.17.13 |
| GH Follower | [android](https://play.google.com/store/apps/details?id=com.eladcohen.ghfollower) | Simple app to get push notifications on a GitHub repository new release | v0.17.5 |
| Omnia Livestream | [SPA](https://omnia-app.org) | Free & affordable livestream provider for churches and ministries. Livestream to your website, Facebook, and YouTube, worldwide CDN, and Auto-Archiving.  | v0.15.14 |
| Romi | [PWA](https://romionline.com), [Android](https://play.google.com/store/apps/details?id=com.romionline) | eCommerce applications | v0.17.9 |
| Just Go Vote! | [website/PWA](https://justgovote.org), [ios](https://itunes.apple.com/us/app/just-go-vote/id1414331023), [android](https://play.google.com/store/apps/details?id=com.stephensuess.gotv.app) | App makes it easier for people to vote, and encourages them to do so in the upcoming mid-terms. | v0.17.17 |
| StemQ | [stemq.io](https://stemq.io) | Questions and Answers app dedicated to STEM topics and rewarding contributors with [Steem](https://www.steem.com) cryptocurrency. | v0.17.16 |
| Tenpin Toolkit | [iOS](https://itunes.apple.com/app/apple-store/id1390556454?pt=119111623&mt=8), [Android](https://play.google.com/store/apps/details?id=com.tenpintoolkit.app) | App featuring a collection of tools to help tenpin bowlers and coaches develop their skills and improve their games. | v0.17.17 |
| Trainero.com | [website](https://trainero.com), [iOS](https://itunes.apple.com/fi/app/trainerocomtrainerapp/id1439762339), [android](https://play.google.com/store/apps/details?id=com.trainero.app_trainer) | All-in-one App for a Personal Trainer with +35000 users world-wide | v0.17.18 |
| HyperSign | [Youtube](https://www.youtube.com/watch?v=Slhwunm4oT0), [GitHub](https://github.com/vikramIde/hypersign-mobile) | Hypersign is a cryptography based SingleSignOn Solution that enables users to securely access [Web/Blockchain/Federated] applications without providing their access credentials [usernames and passwords]. | v0.13 |
| schild.report | [github](https://github.com/hmt/schild.report), [German article](https://gist.github.com/hmt/391e5614189f9a4df34e0e1e9571bbd3) | This electron app is a report generator that works with schild data (German student administration)| v0.17.18 |
| P4wnP1_aloa | [website](https://github.com/mame82/P4wnP1_aloa) | Pentesting Framework for the Rapsberry Pi Zero W | v0.17.16 |
| CineMatch | [website](https://cine-match.com), [iOS](https://itunes.apple.com/jp/app/cinematch/id1448631386?l=en&mt=8), [android](https://play.google.com/store/apps/details?id=com.lucaban.cinematch) | A list app to organise films, tv shows and make shared watchlists! | v1-beta.15 |
| RankUp | [website](https://rankup.gg) | RankUp is a website that allows you to find teammates on cooperative and competitive video games like Overwatch or Rainbow Six Siege (more to come), build your team, and stay updated about video game news | v0.17.19 |
| Email Snippets | [mac](https://itunes.apple.com/us/app/email-snippets/id1439319487?mt=12), [ios](https://itunes.apple.com/us/app/email-snippets/id1442836840?mt=8) | Replying to the same emails over and over again? Do it in a snip with Email Snippets! Just choose your snippet to copy it to your clipboard, then paste into your Email app. | v0.17.20 |
| Counter Calculator | [ios](https://itunes.apple.com/us/app/counter-calculator-clicker/id1446418542?mt=8) | Need a counter / tally app that also lets you do those difficult calculations? Counter Calculator is the app for you! | v0.17.20 |
| Map Marker Generator | [website](https://map-marker-generator.firebaseapp.com/) | A Free Online Tool To Generate Custom Map Icons On The Fly | v0.17.19 |
| spoonacular | [website](https://spoonacular.com), [Android](https://play.google.com/store/apps/details?id=app.com.spoonacular), [iOS](https://itunes.apple.com/us/app/spoonacular-food-companion/id1406527413) | spoonacular food companion, meal planner, and shopping list | v0.17.20 |
| +Economicas | [Android](https://play.google.com/store/apps/details?id=buromar.maseconomicas), [iOS](https://itunes.apple.com/us/app/economicas/id1415417683) | An unofficial student made app for public univeristy students from the [Faculty of Economic Sciences, University of Buenos Aires, Argentina.](https://www.economicas.uba.ar/) | v0.16.4 |
| +FADU | [Android](https://play.google.com/store/apps/details?id=io.masfadu), [iOS](https://itunes.apple.com/ar/app/fadu/id1358520979) | An unofficial student made app for public univeristy students from the [Faculty of Architecture, Design and Urbanism, University of Buenos Aires, Argentina.](http://www.fadu.uba.ar/) | v0.17.9 |
| Monocle Reader | [website](https://monoclereader.com/) | A modern and elegant RSS Reader. Feedly meets Pocket. | v0.17.23 |
| Blue Moon Camera and Machine | [website](https://bluemooncamera.com/) | Custom E-Commerce with realtime POS system inventory integration via API. | v0.17.22 |
| NotaCL Note-taking like chat messages | [Android](https://play.google.com/store/apps/details?id=com.jaeven.notaclPro) | Note taking with multiple chat rooms with different colors. | 1.0.0-beta.2 |
| Johnson Lai's Portfolio | [pwa](https://wenghan.me?q=github) | Portfolio Website for Johnson Lai. | 1.0.0-beta.11 |
| mempal | [website](https://mempal.io) | An app that helps you to remember everything you read and learn. | v0.17.20 |
| Agency «Day & Night» | [website](http://www.rent-poltava.com.ua/) | Apartment agency. | v1.0.0-beta |
| Kawal Pemilu (PILPRES) | [android](https://play.google.com/store/apps/details?id=org.sholeh.kawalpemilu&rdid=org.sholeh.kawalpemilu) | Election Guard In Indonesia. | v1.0.0-beta.17 |
| Cashier | [app](http://cashier.alensiljak.ml/), [source](https://gitlab.com/alensiljak/cashier) | An app for creating ledger/hledger transactions | 1.0.0.beta24 |
| Exorcism | [github](https://github.com/siamx/exorcism) | Desktop wallpaper manager | 1.0.0-rc.6 |
| SunEngine | [github](https://github.com/sunengine/SunEngine), [website](https://sunengine.site) | CMS+ site engine with blog, articles and forum functionalities. Asp.Net Core on server side. | 1.2.x+ |
| Timesheet | [github](https://github.com/valasek/timesheet), [website](http://timesheet.simplesw.net:8080/) | Self-hosted application to manage project reporting. Golang, Gin used on server. | 1.9.2 |
| Havidea | [website](https://havidea.ru) | Social network for creative people. | 1.0.0-rc.5 |
| Stelace Heroes Platform | [github](https://github.com/stelace/heroes-platform-demo), [website](https://heroes.demo.stelace.com/s) | Open-source template featuring [Stelace platform runner](https://stelace.com) with Quasar UI and super heroes in NYC. | 1.0.0 |
| Gas Station Gamblers: California Scratchers | [Android](https://play.google.com/store/apps/details?id=com.dizyx.scratchermathcalifornia), [website](https://gsg.dizyx.com) | The smartest way to pick a California Scratcher! | 1.0.0-beta26 |
| issue blog | [github](https://github.com/ttop5/issue-blog), [website](https://ttop5.net/issue-blog) | A blog tool powered by GitHub issues.  | 1.0.0 |
| 61 Financial App | [Android](https://play.google.com/store/apps/details?id=au.com.sixonefinancial.app), [iOS](https://apps.apple.com/au/app/61-financial/id1467327628) | A replica of [61 Financial Web App](https://61financial.com.au) | v1 |
| Vugify | [github](https://github.com/Blaconix/vugify), [website](https://vugify.now.sh/) | Convert Vue HTML syntax to Pug. | v1.0.0 |
| Prokarman Free Resume Builder | [Website](https://prokarman.com/resume-builder) | A free resume builder to craft resumes for your dream job | v1 |
| Yawik Application Form | [gitlab](https://gitlab.com/yawik/applicationform), [website](https://form.yawik.org) | Application Form which can be used to apply for job postings | v2 (patched) |
| Yawik Jobwizard | [gitlab](https://gitlab.com/yawik/jobwizard), [website](https://yawik.gitlab.io/jobwizard) | Jobad generator with Google Jobs JSON-LD. Can authenticate against a keycloak | v2.1 (patched) |
| Content Hub | [Website](https://contenthub.cloud) | Spread the word about your business everywhere online and track your impact. | v1 |
| Gistor | [github](https://github.com/mallgroup/mal-gistor), [website](https://gistlike.pro) | Powerful UI for your Gist snippets stored on GitHub. | v1.2.x |
| Privy | [github](https://github.com/Poeticode/Privy), [Android](https://play.google.com/store/apps/details?id=com.silentsilas.pr1vy) | An educational crypto-toolkit that steps through the math for password security, RSA keypair generation, and hashing algorithms. | 1.0.0-beta.17 |
| LandHo | [gitlab](https://gitlab.com/riot.ai/landho), [PWA](https://landho.app) | Securely maintain your own search history across multiple search engines. | 1.0.0 |
| Webby | [gitlab](https://gitlab.com/riot.ai/w3b3), [PWA](https://heywebby.app) | Discover a better internet.  Find and favorite Blockstack dapps | 1.2.1 |
| Neolink | [website](http://poltava.neolink.com.ua/) | Online store. | v1 |
| Growth Journal | [website](https://growthjournal.app), [Android](https://play.google.com/store/apps/details?id=growthjournal.app), Web | Growth Journal: Become a better you. | 1.2.6|
| KetoShare | [Android](https://play.google.com/store/apps/details?id=com.customautosys.ketoshare), [website](https://customautosys.com/ketoshare) | A recipe and eatery sharing app for the Ketogenic dieting community, especially in Singapore. | v1.11.1 |
| Vertical Kit | [PWA](https://www.vertical-kit.com/en/) | Climbing Ropes catalog. Find your perfect rope. | 1.5.4 |
| MicroIoT Studio | [github](https://github.com/MicroIoT/studio), [website](https://www.microiot.top) | MicroIoT Platform web UI management tool | v1.5.0 |
| Simulstore | [website](https://www.simulstore.com) | Simulstore is an Industrial AppStore. Tools for Engineering Calculations and Digital Twin Applications | v1.5.5 |
| Api Doc | [github](https://github.com/joaomede/Api-Doc) | An open source Crud API documenter | v1.5.11 |
| SAM9000 APM | [PWA](https://www.sam9000.com) | Project Management, File Sharing, Document and Email Management AI Powered | v1.5+ |
| Learn music theory with Sonid | [WEB](https://sonid.app), [iOS](https://apps.apple.com/us/app/sonid/id1490221762?ls=1), [Android](https://play.google.com/store/apps/details?id=org.stroopwafel.music.app) | Easily learn music theory in a fun a structured manner! | v1.5+ |
| Quacker | [github](https://github.com/farwish/quacker) | Browser Extension to clean website ADs | v1.0.0+ |
| Poker2win | [github](https://github.com/poker2win), [SPA](https://poker2win.github.io) | Ethereum Dapp poker game for bet, i18n support | v1.6.0+ |
| Dashblocks Template | [github](https://github.com/slanatech/dashblocks-template), [website](https://slanatech.github.io/dashblocks-template) | A Free and Open Source Quasar Material Admin Template focusing on beautiful Dashboards and In-App Analytics | v1 |
| Github Method | [github](https://github.com/cartovarc/github-method), [website](https://github-method.web.app/) | Cool habit tracker based on Github concept | v1 |
| Afterman | [github](https://github.com/itsalb3rt/afterman) | Create beutiful docs in markdown and HTML from postman collection | v1 |
| Offso | [SSR](https://www.offso.com) | Beautiful search application user interface | v1.9.0+ |
| DevHelper | [website](https://tool.offso.com) | Online tool and software helper for dev | v2.0 |
| Fotrino | [github](https://github.com/michaelmolino/fotrino-frontend), [website](https://www.fotrino.com) | Photo gallery | v1.11.1 |
| coin-monitor | [github](https://github.com/coin-monitor), [SPA](https://coin-monitor.github.io) | Cryptocurrency market quant user interface | v1.11.3+ |
| @winwin/hexo-editor | [github](https://github.com/YuJianghao/winwin-hexo-editor), [website](https://yujianghao.github.io/winwin-hexo-editor/) [demo](http://hexoeditor.demo.yujianghao.cn/)| An online editor for Hexo blog. | v1.8.6 |
| The COVID-19 Game | [Android](https://play.google.com/store/apps/details?id=com.customautosys.covidgame), [Website](https://customautosys.com/covidgame), [Snap](https://snapcraft.io/covidgame), [Firefox](https://addons.mozilla.org/en-US/firefox/addon/the-covid-19-game) | Fight the COVID-19 infection with your white blood cells! | v1.11.3 |
| Groovechat.fm | [website](https://groovechat.fm/) | A collaborative listening app for Spotify, alowing several people to listen to a playlist at the same time. | v1.11.3 |
| Custom Automated Systems Pte Ltd website | [Website](https://customautosys.com) | Custom Automated Systems Pte Ltd website | v1.11.3 |
| Basehop Deployments | [Website](https://www.basehop.co.za) | Zero Downtime PHP application deployment | v1.12.0+ |
| Al-Dig (Al-Quran Digital app) | [github](https://github.com/sm-alfariz/aldig) | Al-Quran Digital with Indonesian translation (for now) | v1.0.0+ |
| Qodo | [github](https://github.com/vycoder/qodo) | An open-source productivity app. Demonstrate how and what it's like to build multi-platform apps using Quasar | v1.9.4 |
| Odoo In Vue | [github](https://gitlab.com/sylnsr/odoo-in-vue) | Get up to speed quickly when building a Vue / Quasar app for your Odoo backend | v1.12+ |
| Tabulo | [Website](https://tabulo.app) | The virtual replacement for whiteboards | v1.13.2+ |
| Skinosis App | [PWA](https://app.skinosis.com), [Android](https://play.google.com/store/apps/details?id=com.skinosis.app) | Skinosis is a one-on-one skin diagnosis and cosultaion app | v1.0.0+ |
| Skinosis App Landing Website | [PWA](https://skinosis.com) | Landing website for Skinosis App | v1.0.0+ |
| Whoops Monitor | [PWA](https://github.com/whoopsmonitor/whoopsmonitor) | A monitoring tool that gives you clarity over your application landscape. | v1.0.0 |
| Agile Visitors | [Github](https://github.com/itsalb3rt/agile-visitors),[Web](https://agile-visitors.netlify.app/) | Application for registering employee entries with the possibility of generating reports, validating and storing users with minimal effort. | v1.14.0 |
| Project Management Application | [Web](http://giovannicosenza.free.fr/) | Project Management Application to track billable hours and budget spent across all projects. Automatic margin calculation and chart generation for reporting. | v1 |
| mipa | [Github](https://github.com/collective-change/mipa), [PWA](https://mipa.collective-change.org/) | A strategic coordination app from [collective-change.org](https://collective-change.org/) to help the world achieve sustainablility by 2030. | v1.14.7 |
| Neeto-Vue | [Github](https://github.com/TankNee/Neeto-Vue) | Yet another awesome wiz note client that was built by Quasar Framework and Electron. | v1.15.0 |
| CreateVidio | [github](https://github.com/newflight-co/createvid), [website](https://createvid.io) | Dynamic cloud-based video generation. | v1 |
| Tutlo | [website](https://tutlo.ir) | Tutlo is online learning platform using BigBlueButton. | v1.14.2 |
| OIPIPE | [website](https://oipipe.com/) | Online Wholesale store. | v1.15.4 |
| KeeperRx | [Website](https://www.keeperrx.com), [PWA](https://app.keeperrx.com) | Take control of your medical life!  Create medical profiles for the entire family. | 1.14.7 (as of 20210324) |
| SINTASI | [Website](https://www.sintasi.com), [SPA](https://app.sintasi.com) | Dashboard for Clinic management system. | v1.15.7 |
| Mission | [github](https://github.com/mission-poss), [SPA](https://mission-poss.github.io) | Mission of small games | v1.11.3+ |
| Coloban | [Web/PWA](https://app.coloban.com), [Android](https://play.google.com/store/apps/details?id=org.cordova.coloban.app), [Windows/MacOS](https://www.coloban.com/download) | Collaborative task manager + Messsenger: Chat and calls to teammates, TODOs on the fly during conversation, Kanban, Calendar, Gantt, Eisenhower Offline mode, Multiplatform and many more! | v2|
| Dadadash | [GitHub](https://github.com/daptin/dadadash) | Office suite with file browser, document editor, spreadsheet editor, calendar and data tables with CRUDX API's ready to deploy | v1.0.0 |
| BlogToNFT | [website](https://blogtonft.com/) | BlogToNFT is for all the writers/bloggers who wish to create their own NFT. At BlogToNFT a blogger/writer will have to prove their ownership and after adding details they can easily publish NFT straightaway into the Blockchain which is also visible on opensea | v1.0.0 |
| Hesabdaram | [website](https://landing.hesabdaram.ir) | Hesabdaram is an accounting social network | v2.7.0 |
| Supplier Of Bamachoub | [website](https://supplier.bamachoub.com) | Management panel and seller panel of Bamachob market website | v2.7.5 |
| gin-quasar-admin | [Github](https://github.com/Junvary/gin-quasar-admin), [Website](http://81.68.159.232/) | A full-featured management system based on Quasar2,Vue3,Go,Gin,Gorm. | v2.10.1 |
","Quasar Framework is a free, open-source, cross-platform VueJS, Vuex and Firebase
app framework. Quasar can be downloaded from GitHub or from the official Quasar
website. It can be used to create a web, mobile and desktop app in 30 minutes or
less."
1558,"a free (libre) open source, mobile OS for Ethereum","![Status - A Browser, Messenger, and gateway to the decentralized world of Ethereum](https://status.im/img/status-github-banner@2x.png?v=1.1 ""Status - A Browser, Messenger, and gateway to the decentralised world of Ethereum"")
[![Build Status](https://saucelabs.com/buildstatus/jarrad-status)](https://saucelabs.com/beta/builds/50ccf11ec1a44d88b6eb989929e5789f)

# Status - a Mobile Ethereum Operating System

Join us in creating a browser, messenger, and gateway to a decentralized world. Status is a free (libre) open source mobile client targeting Android & iOS built entirely on [Ethereum](https://ethereum.org/) technologies. That's right, no middle men and `go-ethereum` running directly on your device.

[![Getting started with Status](https://i.imgur.com/C0aZZEL.jpg)](https://www.youtube.com/watch?v=oDCSEmS9c3o ""Getting started with Status"")


## Why?

We believe in a medium of pure free trade, economies with fair, permission-less access and a world without intermediaries. We want to create policies that can exist between friends or scale globally, we want to communicate securely and be uninhibited by legacy systems.   

We want to take responsibility for our data, the way we conduct ourselves privately and promote this way of life to a mass audience.

We want deep insights into our own economies so we can make informed, data-driven decisions on how to make our lives better. The Ethereum blockchain, Smart Contracts, Swarm and Whisper provides us a path forward.  

If this interests you, **help us make Status a reality** - anyone can contribute and we need everyone at any skill level to participate.

## How to Contribute?

Go straight to the [wiki](https://wiki.status.im) or [join our Slack](http://slack.status.im) or choose what interests you:

- **Developer**  
Developers are the heart of software and to keep Status beating we need all the help we can get! If you're looking to code in ClojureScript or Golang then Status is the project for you! We use React Native and there is even some Java/Objective-C too!  
Want to learn more about it? Start by reading our [Developer Introduction](http://wiki.status.im/contributing/development/introduction/) which guides you through the technology stack and and start browsing [beginner issues](https://github.com/status-im/status-react/issues?q=is%3Aopen+is%3Aissue+label%3Abeginner). Then you can read how to [Build Status](http://wiki.status.im/contributing/development/building-status/), which talks about managing project dependencies, coding guidelines and testing procedures.  

- **Community Management**  
Metcalfe's law states that the value of a network is proportional to the square of the number of connected users of the system - without community Status is meaningless. We're looking to create a positive, fun environment to explore new ideas, experiment and grow the Status community. Building a community takes alot of work but the people you'll meet and long lasting relationships you form will be well worth it, check out our [Community Development Guide](https://wiki.status.im/community/how-to-grow-our-community/)

- **Specification / Documentation**  
John Dewey once said ""Education is not preparation for life; education is life *itself* "". Developers & Designers need guidance and it all starts from documentation and specifications. Our software is only as good as its documentation, head over to our [wiki](https://wiki.status.im) and see how you can improve what we have.

- **Blog Writing**  
Content is King, keeping our blog up to date and informing the community of news helps keep everyone on the same page. [Jump on our Slack](http://slack.status.im) and discuss with Carl how you can contribute.

- **Marketing**  
In this day and age attention is limited, we need all the help we can get to find people who are interested in Status, whether that is paid user acquisition, public relations or hype building, check out our [Community Outreach and Marketing Guide](http://wiki.status.im/contributing/outreach/) to see how you can spread the word.

- **Testers**  
It's bug hunting season! Status is currently in Alpha and there are sure to be a bunch of education, [grab your fresh copy of Status](http://wiki.status.im/contributing/development/building-status/) and shake your phone to submit bug reports, or start browsing our [Github Issues](http://github.com/status-im/status-react/issues). Every bug you find brings Status closer to stable, usable software for everyone to enjoy!

- **Security**  
Status is a visual interface to make permanent changes on the Blockchain, it handles crypto-tokens that have real value and allows 3rd party code execution. Security is paramount to its success. You are given permission to break Status as hard as you can, as long as you share your findings with the community!

- **Design & User Experience**  
It's all about that sex appeal, we want cryptocurrencies to be easy and fun to use, ugly software doesn't help adoption. [Check out our designs](http://wiki.status.im/contributing/design-guidelines/) and show us how to make them better!

- **Evangelism**  
Help us spread the word! Tell a friend *right now*, in fact tell **everyone** - yell from a mountain if you have to, every person counts!

## Give me Binaries!

Currently the fastest way to get your hands on a binary is to join our Early Access by submitting your email on our [website](https://status.im) or by [building it yourself](https://wiki.status.im/contributing/development/building-status/).

// TODO GPlay, TestFlight Instructions & FDroid

## Core Contributors

<img src=""https://status.im/img/new-site/jarrad.png"" width=""80px""></img>
Jarrad ([@jarradh](https://github.com/jarradh)) - Cofounder and Thought Leader.
 
<img src=""https://status.im/img/new-site/carl.png"" width=""80px""></img>
Carl ([@carlbennetts](https://github.com/carlbennetts)) - Cofounder and Communications & Marketing.
 
<img src=""https://status.im/img/new-site/roman.png"" width=""80px""></img>
Roman ([@rasom](https://github.com/rasom)) - Clojure and project lead.

<img src=""https://status.im/img/new-site/alexander.png"" width=""80px""></img>
Alexander ([@alwx](https://github.com/alwx)) - Clojure ninja!

<img src=""https://status.im/img/new-site/andrey.png"" width=""80px""></img>
Andrey ([@flexsurfer](https://github.com/flexsurfer)) - Clojure.

<img src=""https://status.im/img/new-site/gustavo.png"" width=""80px""></img>
Gustavo ([@GustavoNunes](https://github.com/GustavoNunes)) - Clojure.

<img src=""https://status.im/img/new-site/victor.png"" width=""80px""></img>
Victor ([@farazdagi](https://github.com/farazdagi)) - Golang one-man-army.

<img src=""https://status.im/img/new-site/andrei.png"" width=""80px""></img>
Andrei ([@andmironov](https://github.com/andmironov)) - Visual design and user experience conjurer.

Special thanks to [@adrian-tiberius](https://github.com/adrian-tiberius).
Without the dedication of these fine gentleman, Status would not exist.

## Contact us

Feel free to email us at [support@status.im](mailto:support@status.im) or better yet, [join our Slack](http://slack.status.im).

Got a feature request or suggestion, download Status and shake your phone, failing that search our [Github Issues](http://github.com/status-im/status-react/issues).

## License

Licensed under the [Mozilla Public License v2.0](https://github.com/status-im/status-react/blob/develop/LICENSE.md)
","Status is a free (libre) open source mobile client targeting Android & iOS built
entirely on [Ethereum](https://ethereum.org/) technologies. We believe in a
medium of pure free trade, economies with fair, permission-less access and a
world without intermediaries. We use React Native and there is even some
Java/Objective-C too!"
1692,"🎨 Powerful theme/skin manager for iOS 9+ 主题/换肤, 暗色模式","![SwiftTheme](https://raw.githubusercontent.com/wxxsw/SwiftThemeResources/master/Screenshots/logo.png)

<p align=""center"">
<a href=""#introduction"">Introduction</a> -
<a href=""#demos"">Demos</a> -
<a href=""#installation"">Installation</a> -
<a href=""#documents"">Documents</a> -
<a href=""#faq"">FAQ</a> -
<a href=""#contribution"">Contribution</a> -
<a href=""README_CN.md"">中文文档</a>
</p>

<p align=""center"">
<a href=""https://developer.apple.com/swift""><img src=""https://img.shields.io/badge/language-swift5-f48041.svg?style=flat""></a>
<a href=""http://cocoadocs.org/docsets/SwiftTheme""><img src=""https://img.shields.io/cocoapods/v/SwiftTheme.svg?style=flat""></a>
<a href=""https://github.com/Carthage/Carthage""><img src=""https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat""></a>
<a href=""https://developer.apple.com/ios""><img src=""https://img.shields.io/badge/platform-iOS%209%2B | tvOS%209%2B-blue.svg?style=flat""></a>
<a href=""https://github.com/wxxsw/SwiftTheme/blob/master/LICENSE""><img src=""http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat""></a>
</p>

## Screenshot

![](https://github.com/wxxsw/SwiftThemeResources/blob/master/Screenshots/switch.gif)

> Running：open `SwiftTheme.xcworkspace`, run target `PlistDemo`

## Introduction
### The Beginning Of The Story

As part of our project requirement, we need to add night mode to our app. It's not as simple as just changing brightness or alpha on the top-level view—in fact, it needs an entirely new interface: different colors, different alpha, different image cuts. More accurately, ""night mode"" is a theme/skinning feature that can switch between bright theme and dark themes.

So how do we achieve this? Maybe we can set a global variable that represents the currently selected theme, and use different background colors or image cuts based on the variable during the controller's initialization. But then how do we deal with views that have already been initialized? Yes, we could use notifications to change their colors or image cuts, but this leads to controllers unnecessarily full of notification register/unregister, if...else and UI updating code. Worse, if you forget to unregister the notifications, your app may crash.

After some consideration, we put forward higher requirements on the task: create a simple and reusable themes/skinning framework, here as you see.

### Goals

Make SwiftTheme a simple, powerful, high-performance, extensible themes/skinning framework. Provide a unified solution for iOS.

## Demos


### Index Mode

Vary background color of UIView according to the theme setting:

```swift
view.theme_backgroundColor = [""#FFF"", ""#000""]
```

Vary text color of UILabel and UIButton:

```swift
label.theme_textColor = [""#000"", ""#FFF""]
button.theme_setTitleColor([""#000"", ""#FFF""], forState: .Normal)
```

Vary image of UIImageView:

```swift
imageView.theme_image = [""day"", ""night""]

// It's ok by using UIImage instances if you don't want to use image names.
imageView.theme_image = ThemeImagePicker(images: image1, image2)
```

A miracle happens after you execute the single line of code below!

```swift
// these numbers represent the parameters' index. 
// eg. ""view.theme_backgroundColor = [""#FFF"", ""#000""]"", index 0 represents ""#FFF"", index 1 represents ""#000""
ThemeManager.setTheme(index: isNight ? 1 : 0)
```

Get current theme index.

```swift
ThemeManager.currentThemeIndex	// Readonly
```

> Index mode is a fast way for the situation: a few themes, but not many, no need to download more new themes.

Notice About Literal:

```swift
// Wrong example:
let colors = [""#FFF"", ""#000""]
view.theme_backgroundColor = colors

// You should write like this:
view.theme_backgroundColor = [""#FFF"", ""#000""]
// or this:
let colorPickers: ThemeColorPicker = [""#FFF"", ""#000""]
view.theme_backgroundColor = colorPickers
```

> Because theme_backgroundColor accepts an argument of type ThemeColorPicker，not Array. Nevertheless, ""view.theme_backgroundColor = [""#FFF"", ""#000""]"" does the same as initializing an instance of ThemeColorPicker by ""Literal"" and passing it to the theme_backgroundColor.



### Plist/JSON Mode
You may want to make your app download and install an indefinite number of themes. To fulfill this requirement, we provide plist mode. Simply put, you write configuration info such as colors, image cuts and so on, in a plist file. Then, you can use their keys in the logic code. So, the plist file and the resource files are used to constitute a theme package.

Usage demo of plist mode.

```swift
view.theme_backgroundColor = ""Global.backgroundColor""
imageView.theme_image = ""SelectedThemeCell.iconImage""
```
> Similar with the index mode. Only the specific parameters become keys. And as such, we give it the extension ability.


The plist file name is the first paramter of the switching method. In this example, the plist file and other resource files are in the application bundle. It's also ok if they are in sandbox.

```swift
ThemeManager.setTheme(plistName: ""Red"", path: .mainBundle)
```

> plist mode allow you install more themes without modifying logic code. So, you can add the feature that, downloading and installing themes for your app.

the screenshots of the plist and image files we used above:

![](https://github.com/wxxsw/SwiftThemeResources/blob/master/Screenshots/1.pic.jpg)
![](https://github.com/wxxsw/SwiftThemeResources/blob/master/Screenshots/2.pic.jpg)

### Objective-C

Fully compatible with Objective-C, usage demo:

```objective-c
lbl.theme_backgroundColor = [ThemeColorPicker pickerWithColors:@[@""#FAF9F9"", @""#E2E2E2""]];
```

### Features
- [x] Written in Swift
- [x] Fully compatible with Objective-C
- [x] Based on runtime
- [x] Simple integration
- [x] Extension property prefix with ""theme_*"", friendly with IDE auto-completion
- [x] Support UIAppearance
- [x] Index mode, fast integration
- [x] Plist mode, extend infinite themes
- [x] Friendly error logs
- [x] Strongly typed ThemePicker, detect errors during compilling
- [x] Complete demos


## Installation

#### CocoaPods
```swift
pod 'SwiftTheme'
use_frameworks!
```

#### Carthage
```swift
github ""wxxsw/SwiftTheme""
```

#### Swift Package Manager

1. Select `Xcode -> File -> Swift Packages -> Add Package Dependency...` 
2. Enter `https://github.com/wxxsw/SwiftTheme`.
3. Click `Next`, then select the version, complete.

#### Source files
Copy all the files in ""Sources"" folder into your project

## Documents

Note：`①` usage of index mode `②` usage of plist mode

### *Basic Usage*
***

#### Configure Appearance

SwiftTheme provides new properties for views, they all beigin with `theme_`. Such as `theme_backgroundColor` corresponds `backgroundColor`.

```swift
①
view.theme_backgroundColor = ThemeColorPicker(colors: ""#FFF"", ""#000"")
view.theme_image = ThemeImagePicker(names: ""day"", ""night"")
②
view.theme_backgroundColor = ThemeColorPicker(keyPath: ""SomeColorKeyPath"")
view.theme_image = ThemeImagePicker(keyPath: ""SomeImageKeyPath"")
```
> Different type of properties receive different type of Pickers. Thus, IDE will warn you if you pass a wrong parameter.

#### Switch Themes

When you switch themes, all the `theme_` properties you set will update with animation. Usage:

```swift
①
ThemeManager.setTheme(index: 0) // ThemePickers will use the first parameter, eg. ""#FFF"" ""day""
ThemeManager.setTheme(index: 1) // ThemePickers will use the second parameter, eg. ""#000"" ""night""
②
// use ""day.plist"" in the appllication bundle as the theme configuration file. 
// In this mode, SwiftTheme will find the resource files in the appllication bundle.
ThemeManager.setTheme(plistName: ""day"", path: .mainBundle)
// use ""night.plist"" in the sandbox as the theme configuration file, ""someURL"" is its file path. 
// In this mode, SwiftTheme will find the resource files in the same path.
ThemeManager.setTheme(plistName: ""night"", path: .sandbox(someURL))
// use a dictionary as the theme configuration, but find resource files in the sandbox.(Not recommend)
ThemeManager.setTheme(dict: dict, path: .sandbox(someURL))
```

#### Custom Behaviors

SwiftTheme posts a notification named `ThemeUpdateNotification` when theme changes, you can observe this notification anywhere and do whatever you want:
```swift
NotificationCenter.default.addObserver(
	self, 
	selector: #selector(doSomethingMethod),
	name: NSNotification.Name(rawValue: ThemeUpdateNotification), 
	object: nil
)
```
```objective-c
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(doSomethingMethod) name:@""ThemeUpdateNotification"" object:nil];
```

### *Now Supported Properties*
***

> Child classes inherit the properties from their super class, such as UILabel have theme_alpha inherited from UIView. These properties will not be list in child classes below.

##### UIView
- var theme_alpha: ThemeCGFloatPicker?
- var theme_backgroundColor: ThemeColorPicker?
- var theme_tintColor: ThemeColorPicker?

##### UIApplication
- func theme_setStatusBarStyle(picker: ThemeStatusBarStylePicker, animated: Bool)

##### UIBarButtonItem
- var theme_tintColor: ThemeColorPicker?

##### UILabel
- var theme_font: ThemeFontPicker?
- var theme_textColor: ThemeColorPicker?
- var theme_textAttributes: ThemeStringAttributesPicker?
- var theme_highlightedTextColor: ThemeColorPicker?
- var theme_shadowColor: ThemeColorPicker?

##### UINavigationBar
- var theme_barStyle: ThemeBarStylePicker?
- var theme_barTintColor: ThemeColorPicker?
- var theme_titleTextAttributes: ThemeDictionaryPicker?

##### UITabBar
- var theme_barStyle: ThemeBarStylePicker?
- var theme_barTintColor: ThemeColorPicker?

##### UITableView
- var theme_separatorColor: ThemeColorPicker?

##### UITextField
- var theme_font: ThemeFontPicker?
- var theme_keyboardAppearance: ThemeKeyboardAppearancePicker?
- var theme_textColor: ThemeColorPicker?
- var theme_placeholderAttributes: ThemeDictionaryPicker?

##### UITextView
- var theme_font: ThemeFontPicker?
- var theme_textColor: ThemeColorPicker?

##### UIToolbar
- var theme_barStyle: ThemeBarStylePicker?
- var theme_barTintColor: ThemeColorPicker?

##### UISegmentedControl
- var theme_selectedSegmentTintColor: ThemeColorPicker?
- func theme_setTitleTextAttributes(_ picker: ThemeStringAttributesPicker?, forState state: UIControl.State)

##### UISwitch
- var theme_onTintColor: ThemeColorPicker?
- var theme_thumbTintColor: ThemeColorPicker?

##### UISlider
- var theme_thumbTintColor: ThemeColorPicker?
- var theme_minimumTrackTintColor: ThemeColorPicker?
- var theme_maximumTrackTintColor: ThemeColorPicker?

##### UISearchBar
- var theme_barStyle: ThemeBarStylePicker?
- var theme_barTintColor: ThemeColorPicker?

##### UIProgressView
- var theme_progressTintColor: ThemeColorPicker?
- var theme_trackTintColor: ThemeColorPicker?

##### UIPageControl
- var theme_pageIndicatorTintColor: ThemeColorPicker?
- var theme_currentPageIndicatorTintColor: ThemeColorPicker?

##### UIImageView
- var theme_image: ThemeImagePicker?

##### UIActivityIndicatorView
- var theme_activityIndicatorViewStyle: ThemeActivityIndicatorViewStylePicker?

##### UIButton
- func theme_setImage(picker: ThemeImagePicker?, forState state: UIControlState)
- func theme_setBackgroundImage(picker: ThemeImagePicker?, forState state: UIControlState)
- func theme_setTitleColor(picker: ThemeColorPicker?, forState state: UIControlState)
- func theme_setAttributedTitle(picker: ThemeAttributedStringPicker?, forState state: UIControlState)

##### CALayer
- var theme_backgroundColor: ThemeCGColorPicker?
- var theme_borderWidth: ThemeCGFloatPicker?
- var theme_borderColor: ThemeCGColorPicker?
- var theme_shadowColor: ThemeCGColorPicker?

##### CATextLayer
- var theme_foregroundColor: ThemeCGColorPicker?

##### CAGradientLayer
- var theme_colors: ThemeAnyPicker?

##### UIRefreshControl
- var theme_titleAttributes: ThemeDictionaryPicker?

##### UIVisualEffectView
- var theme_effect: ThemeVisualEffectPicker?

### *Picker*
***

#### ThemeColorPicker
```swift
// supported formats:
// ""#ffcc00""		RGB
// ""#ffcc00dd""		RGBA
// ""#FFF""			RGB in short
// ""#013E""			RGBA in short
①
ThemeColorPicker(colors: ""#FFFFFF"", ""#000"")
ThemeColorPicker(colors: UIColor.red, UIColor.blue)
ThemeColorPicker.pickerWithColors([""#FFFFFF"", ""#000""])
ThemeColorPicker.pickerWithUIColors([UIColor.red, UIColor.blue])
②
ThemeColorPicker(keyPath: ""someStringKeyPath"")
ThemeColorPicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeImagePicker
```swift
①
ThemeImagePicker(names: ""image1"", ""image2"")
ThemeImagePicker.pickerWithNames([""image1"", ""image2""])
ThemeImagePicker(images: UIImage(named: ""image1"")!, UIImage(named: ""image2"")!)
ThemeImagePicker.pickerWithImages([UIImage(named: ""image1"")!, UIImage(named: ""image2"")!])
②
ThemeImagePicker(keyPath: ""someStringKeyPath"")
ThemeImagePicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeCGFloatPicker
```swift
①
ThemeCGFloatPicker(floats: 1.0, 0.7)
ThemeCGFloatPicker.pickerWithFloats([1.0, 0.7])
②
ThemeCGFloatPicker(keyPath: ""someNumberKeyPath"")
ThemeCGFloatPicker.pickerWithKeyPath(""someNumberKeyPath"")
```

#### ThemeCGColorPicker
```swift
①
ThemeCGColorPicker(colors: ""#FFFFFF"", ""#000"")
ThemeCGColorPicker(colors: UIColor.red, UIColor.blue)
ThemeCGColorPicker(colors: UIColor.red.cgColor, UIColor.blue.cgColor)
ThemeCGColorPicker.pickerWithColors([""#FFFFFF"", ""#000""])
ThemeCGColorPicker.pickerWithUIColors([UIColor.blue, UIColor.red])
②
ThemeCGColorPicker(keyPath: ""someStringKeyPath"")
ThemeCGColorPicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeFontPicker
```swift
①
ThemeFontPicker(fonts: UIFont.systemFont(ofSize: 10), UIFont.systemFont(ofSize: 11))
ThemeFontPicker.pickerWithFonts([UIFont.systemFont(ofSize: 10), UIFont.systemFont(ofSize: 11)])
②
// name the key you like, but the available values format like this: ""PingFangSC-Regular,16""
ThemeFontPicker(keyPath: ""someStringKeyPath"")
ThemeFontPicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeDictionaryPicker
```swift
①
ThemeDictionaryPicker(dicts: [""key"": ""value""], [""key"": ""value""])
ThemeDictionaryPicker.pickerWithDicts([[""key"": ""value""], [""key"": ""value""]])
②
ThemeDictionaryPicker(keyPath: ""someStringKeyPath"") { (Any?) -> [String: AnyObject]? in ... }
```

#### ThemeStringAttributesPicker
```swift
①
ThemeStringAttributesPicker([""key"": ""value""], [""key"": ""value""])
ThemeStringAttributesPicker.pickerWithAttributes([NSAttributedStringKey.font: UIFont.systemFont(ofSize: 16)])
②
ThemeStringAttributesPicker(keyPath: ""someStringKeyPath"") { (Any?) -> [NSAttributedString.Key: Any]? in ... }
```

#### ThemeAttributedStringPicker
```swift
①
ThemeAttributedStringPicker(NSAttributedString(...), NSAttributedString(...))
ThemeAttributedStringPicker.pickerWithAttributedStrings([NSAttributedString(...)])
②
ThemeAttributedStringPicker(keyPath: ""someStringKeyPath"") { (Any?) -> NSAttributedString? in ... }
```

#### ThemeBarStylePicker
```swift
①
ThemeBarStylePicker(styles: .default, .black)
ThemeBarStylePicker.pickerWithStyles([.default, .black])
ThemeBarStylePicker.pickerWithStringStyles([""default"", ""black""])
②
// name the key you like, but the available values are ""default"" and ""black""
ThemeBarStylePicker(keyPath: ""someStringKeyPath"")
ThemeBarStylePicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeStatusBarStylePicker
```swift
①
ThemeStatusBarStylePicker(styles: .default, .lightContent, .darkContent)
ThemeStatusBarStylePicker.pickerWithStyles([.default, .lightContent, .darkContent])
ThemeStatusBarStylePicker.pickerWithStringStyles([""default"", ""lightContent"", ""darkContent""])
②
// name the key you like, but the available values are ""default"", ""lightContent"" and ""darkContent""
ThemeStatusBarStylePicker(keyPath: ""someStringKeyPath"")
ThemeStatusBarStylePicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeKeyboardAppearancePicker
```swift
①
ThemeKeyboardAppearancePicker(styles: .default, .dark, .light)
ThemeKeyboardAppearancePicker.pickerWithStyles([.default, .dark, .light])
ThemeKeyboardAppearancePicker.pickerWithStringStyles([""default"", ""dark"", ""light""])
②
// name the key you like, but the available values are ""default"", ""dark"" and ""light""
ThemeKeyboardAppearancePicker(keyPath: ""someStringKeyPath"")
ThemeKeyboardAppearancePicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeActivityIndicatorViewStylePicker
```swift
①
ThemeActivityIndicatorViewStylePicker(styles: .whiteLarge, .white, .gray)
ThemeActivityIndicatorViewStylePicker.pickerWithStyles([.whiteLarge, .white, .gray])
ThemeActivityIndicatorViewStylePicker.pickerWithStringStyles([""whiteLarge"", ""white"", ""gray""])
②
// name the key you like, but the available values are ""whiteLarge"", ""white"" and ""gray""
ThemeActivityIndicatorViewStylePicker(keyPath: ""someStringKeyPath"")
ThemeActivityIndicatorViewStylePicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeVisualEffectPicker
```swift
①
ThemeVisualEffectPicker(effects: UIBlurEffect(style: .light), UIBlurEffect(style: .dark))
ThemeVisualEffectPicker.pickerWithEffects([UIBlurEffect(style: .light), UIBlurEffect(style: .dark)])
ThemeVisualEffectPicker.pickerWithStringEffects([""light"", ""dark"", ""extralight"", ""prominent"", ""regular""])
②
// name the key you like, but the available values are ""light"", ""dark"", ""extralight"", ""prominent"" and ""regular""
ThemeVisualEffectPicker(keyPath: ""someStringKeyPath"")
ThemeVisualEffectPicker.pickerWithKeyPath(""someStringKeyPath"")
```

#### ThemeAnyPicker
```swift
①
ThemeAnyPicker(anys: 0, ""123"", UIColor.red)
ThemeAnyPicker.pickerWithAnys([0, ""123"", UIColor.red])
②
ThemeAnyPicker(keyPath: ""someStringKeyPath"")
ThemeAnyPicker.pickerWithKeyPath(""someStringKeyPath"")
```

### *More*

Download this project and find more. There are four demo targets:

- `Demo` shows how to use index mode and how to save the last selection of themes and other general usages.
- `PlistDemo` shows how to use plist mode and how to download themes that packaged in zip files.
- `JsonDemo` is like `PlistDemo`, but use `json`.
- `OCDemo` is `Demo`'s Objective-C version.
- `TVOSDemo` is used to test tvos compatibility.

## FAQ

1.  Why doesn't theme_setStatusBarStyle work as expected?

    In your app's `Info.plist` you will need to set `View Controller-based status bar appearence` to `NO`.
    
2.  Can I manually cancel the theme of a property?

    Sure, just make it `nil`—example: `view.theme_backgroundColor = nil`.

## Contribution

### Issue
If you find a bug or need a help, you can [create a issue](https://github.com/wxxsw/SwiftTheme/issues/new)


### Pull Request
We are happy to accept pull requests :D. But please make sure it's needed by most developers and make it simple to use. If you are not sure, create an issue and we can discuss it before you get to coding.

### Contributors
[Gesen](https://github.com/wxxsw), [Zhoujun](https://github.com/shannonchou), [Kevin Cramer](https://github.com/kcramer)


## Lisence

The MIT License (MIT)
","""Night mode"" is a theme/skinning feature that can switch between bright theme
and dark themes. It's not as simple as just changing brightness or alpha on the
top-level view. Instead, it needs an entirely new interface: different colors,
different alpha, different image cuts. To fulfill this requirement, we provide
plist mode. Simply put, you write configuration info such as colors, image cuts
and so on, in a plist file. Then, you can use their keys in the logic code."
1343,"TagSpaces is an offline, open source, document manager with tagging support","![tagspaces logo](https://raw.github.com/tagspaces/tagspaces/master/app/assets/icons/96x96.png)

[![Join the chat at https://gitter.im/tagspaces/tagspaces](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tagspaces/tagspaces?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Github All Releases](https://img.shields.io/github/downloads/tagspaces/tagspaces/total.svg)]()

**TagSpaces** is a free, no vendor lock-in, open source application for organizing, annotating and managing local files with the help of tags. It features advanced note taking functionalities and some capabilities of to-do apps. The application is available for Windows, Linux, Mac OS and Android. We provide a web clipper extension for Firefox, Edge and Chrome for easy collecting of online content in the form of local files.

![tagspaces-screenshot ubuntu v4 0](https://user-images.githubusercontent.com/1249777/139649315-7d5b40cc-5c18-450a-8de8-414c26adad1e.png)

More information about can be found from the following sources:

- [Website](https://www.tagspaces.org/) - official web site of the project.
- [Blog](https://www.tagspaces.org/blog/) for news about TagSpaces
- [Documentation](https://docs.tagspaces.org/) for our latest generated documentation
- [Video Introduction](https://www.youtube.com/embed/CJ2hYU6U-C8) - This is a short video presenting the main concepts of the application. It is made from a pretty old application version but it is still valid for the most of the use cases.
- [Issues Tracker](https://github.com/tagspaces/tagspaces/issues) for developer support requests

## Downloads

You can find the latest release of TagSpaces in the Github [release section](https://github.com/tagspaces/tagspaces/releases/)

A full list of the changes is available in the [changelog](CHANGELOG.md)

## Main Features

- **File and folder management** - TagSpaces provides a convenient user interface for browsing, viewing and man files and folders.
- **File tagging** - The application supports two ways for tagging files. The default one embeds the tags directly in the name of the file, the other one uses a so called sidecar files for persisting the tags.
- **Searching** - The search functionality supports fuzzy functionality and can filter your locations for files and folders containing one or more tags
- **Browser for local content** - TagSpaces can be used just as browser for your local photos or navigation thought your local ebook library
- **Media player** - It supports playing for common audio and video files types and has integrated basic media player functionalities.
- **No-Cloud:** TagSpaces is running completely offline and serverless on your laptop, desktop or tablet and does not require an internet connection and any kind of online registration or service provider.
- **Note Taking** - you can create and edit notes in plain text, markdown and html file formats
- **To-Do Management** - with the help of the build in HTML editor you are able to create simple todo lists in every HTML file.
- **Cross-platform:** TagSpaces runs on Windows, Linux, Mac and Android
- **Web Clipper** for saving web pages and screenshots from your browsers is also available as extension for [Firefox](https://addons.mozilla.org/en-US/firefox/addon/tagspaces/) and [Chrome](https://chrome.google.com/webstore/detail/tagspaces-web-clipper/ldalmgifdlgpiiadeccbcjojljeanhjk).

## Infos for developers

The core of TagSpaces starting from version 3 is built with [react.js](https://reactjs.org/) and the great [material-ui](https://material-ui.com/) framework.

The native Windows, Linux and Mac OS versions of TagSpaces are built with [Electron](https://electron.atom.io/). Electron is an app runtime based on Chromium and node.js. In order to combine it with react we have used the [electron-react-boilerplate](https://github.com/chentsulin/electron-react-boilerplate).

## Repository Directory Structure

    ./app................ contains the application core
    ./app/locales........ contains the language files needed for the application internationalization
    ./app/node_modules... contains the TagSpaces extension modules
    ./cordova............ contains the code needed for running the Android version
    ./dll................ contains the files needed for live reload in development mode
    ./internals.......... contains files needed for supporting Flow and Eslint
    ./node_modules....... after npm install, you will find here the external dependencies of the application
    ./resources.......... contains images and other files needed for the application building
    ./scripts............ contains js script needed for the npm tasks
    ./test............... contains unit and e2e tests of the app
    ./web................ contains assets needed for the web version of the app

## How to run TagSpaces from the source code?

In order to run TagSpaces on your Windows, Mac OS or Linux from the source code published here, you will need the following prerequisites:

- [node.js](https://nodejs.org/)
- [npm](https://www.npmjs.com/)
- [git](http://git-scm.org/)

Get the TagSpaces source code by cloning its repository:

    $ git clone https://github.com/tagspaces/tagspaces.git

Go to the folder where the code was cloned to and select the branch you want to test. Use the **master** branch for the last officially released version or the branch **develop** for a kind of a nightly build, containing the changes we are preparing for the next release of the application.

Switch to the folder where you have cloned the repository:

    $ cd tagspaces

Change to the branch with the name **develop**:

    $ git checkout develop

and install the project dependencies:

    $ npm install

The last command will automatically build the application with webpack. Now it is time to install all the TagSpaces extensions:

    $ npm run install-ext-node

Starting from v4 of the application, a web service is running locally as a separate process. The web service is responsible for the search index creation and the generation of the thumbnails for most of the images formats. A key is required in order for the main application to communicate with the web server. It should be defined in the `.env` file located in `app` folder. This is an example for an .env file.

    KEY=a_custom_key

Having a custom key, ensures that another instance of TagSpaces will not communicate with the web service of the initial instance, since it is always running on the same port.

Now you are ready and can build and start (bs) the application with:

    $ npm run bs

If you want to try the development mode, you can start it by:

    $ npm run dev

This will start a development server in background, which watches for changes in background and refreshes the application automatically once you have done some changes in the source code.

## Package for Windows, Linux and macOS

Building of the packages can be accomplished with the integrated npm scripts:

```bash
$ npm run package-win

$ npm run package-linux

$ npm run package-mac

$ npm run package-mac-arm64
```

The commands will create packages for Windows, Linux, Mac OS and Mac OS with the M1 processor respectively. Do not forget to run the `npm run build` script before packaging.

## Package the Android

Building of the packages for Android can be accomplished with the integrated npm scripts:

```bash
$ npm run version-meta

$ npm run prepare-cordova

$ npm run package-android
```

## Start the web version locally

For developing purposes and local tests, the web version of the app can be started with the following npm command:

    $ npm run run-web

## Running Tests

To run tests, run the following command

```bash
npm run test-unit

npm run test-e2e-electron

npm run test-e2e-web
```

## Developing viewer and editor for TagSpaces

TagSpaces can be easily extended with the help of extensions. Currently we use the extensions for supporting the opening and editing of different file types in the application. More information about this topic can be found on the [extension page](https://www.tagspaces.org/extensions/) of our website.

## Contribute

TagSpaces is an open source software, and as such, the code is publicly available on GitHub, and forking is particularly recommended! Still, contribution must be done following some guidelines.
Contributor License Agreement

The CLA is an agreement commonly used in major open source project, which aims at protecting all parties implied by a contribution: the contributor, the main code author, and above all, the community. The CLA model we have chosen basically tells the following: the contribution’s copyright is shared between the contributor and the main author. This means each party can do whatever she want in term of relicensing with this contributed piece of code. This is important, because, if in the future, the author wants to change the license in something more in favor of the community, a singular contributor cannot block the process.

The Contributor License Agreement can be signed online on the following [CLA form](https://www.tagspaces.org/contribute/).

## Localisation

TagSpaces is currently available in more than 20 languages. You can help the translation of this application in your language by joining the translation teams on [Transifex](https://www.transifex.com/tagspaces/tagspaces/).

## Ideas and Suggestion

If you have ideas or suggestions on how we can improve our application, you can check the following [Trello board](https://trello.com/b/TGeG5bi9/tagspaces-ideas). Here you will find numerous ideas already proposed by other users. If you want to post something new, please follow [this link](https://trello.com/c/mG97iOqo/19-how-to-use-this-board-and-add-new-ideas)

## Support and Bugs

If you are having troubles using TagSpaces or have found a bug please [open a ticket](https://github.com/tagspaces/tagspaces/issues) on GitHub.

## Known issues

- TagSpaces is not suitable for searching in locations containing more than 100000 files.

## Feeds

- Subscribe to RSS feed updates for the [tagspaces blog](http://tagspaces.org/blog/feed.xml)
- Subscribe to RSS feed updates for the [master branch](https://github.com/tagspaces/tagspaces/commits/master.atom)

## License

This project is dual-licensed under the [AGPL](LICENSE.txt) (GNU Affero General Public License) Version 3 for FOSS projects and under a commercial license for independent software vendors and resellers. If you want to modify this application under different conditions, feel free to contact us.
","TagSpaces is a free, no vendor lock-in, open source application for organizing,
annotating and managing local files with the help of tags. It features advanced
note taking functionalities and some capabilities of to-do apps. The application
is available for Windows, Linux, Mac OS and Android."
1410,JSON API (jsonapi.org) package for Laravel applications.,"![Tests](https://github.com/cloudcreativity/laravel-json-api/workflows/Tests/badge.svg)

# cloudcreativity/laravel-json-api

## Status

**DO NOT USE THIS PACKAGE FOR NEW PROJECTS - USE [laravel-json-api/laravel](https://github.com/laravel-json-api/laravel)
INSTEAD.**

This package has now been rewritten, substantially improved and released as the `laravel-json-api/laravel` package.
Documentation for the new version is available on our new website [laraveljsonapi.io](https://laraveljsonapi.io) and the
code is now developed under the
[Laravel JSON:API Github organisation.](https://github.com/laravel-json-api)

The `cloudcreativity/laravel-json-api` package is now considered to be the *legacy* package. As we know it is in use in
a lot of production applications, it will continue to receive bug fixes and updates for new Laravel versions. However,
it is no longer supported for new features.

If you are starting a new project, you MUST use the
[new package `laravel-json-api/laravel`.](https://github.com/laravel-json-api/laravel)

## Introduction

Build feature-rich and standards-compliant APIs in Laravel.

This package provides all the capabilities you need to add [JSON API](http://jsonapi.org)
compliant APIs to your application. Extensive support for the specification, including:

- Fetching resources
- Fetching relationships
- Inclusion of related resources (compound documents)
- Sparse fieldsets.
- Sorting.
- Pagination.
- Filtering
- Creating resources.
- Updating resources.
- Updating relationships.
- Deleting resources.
- Validation of:
  - JSON API documents; and
  - Query parameters.

The following additional features are also supported:

- Full support for Eloquent resources, with features such as:
  - Automatic eager loading when including related resources.
  - Easy relationship end-points.
  - Soft-deleting and restoring Eloquent resources.
  - Page and cursor based pagination.
- Asynchronous processing.
- Support multiple media-types within your API.
- Generators for all the classes you need to add a resource to your API.

### What is JSON API?

From [jsonapi.org](http://jsonapi.org)

> If you've ever argued with your team about the way your JSON responses should be formatted, JSON API is your
> anti-bikeshedding weapon.
>
> By following shared conventions, you can increase productivity, take advantage of generalized tooling, and focus on
> what matters: your application. Clients built around JSON API are able to take advantage of its features around
> efficiently caching responses, sometimes eliminating network requests entirely.

For full information on the spec, plus examples, see [http://jsonapi.org](http://jsonapi.org).

## Documentation

Full package documentation is available on
[Read the Docs](http://laravel-json-api.readthedocs.io/en/latest/).

## Slack

Join the Laravel JSON:API community on
[Slack.](https://join.slack.com/t/laraveljsonapi/shared_invite/zt-e3oi2r4y-8nkmhzpKnPQViaXrkPJHtQ)

## Laravel Versions

| Laravel | This Package |
| --- | --- |
| `^9.0` | `^4.0` |
| `^8.0` | `^3.0|^4.0` |
| `^7.0` | `^2.0` |
| `^6.0` | `^1.7` |
| `5.8.*` | `^1.7` |
| `5.7.*` | `^1.0` |
| `5.6.*` | `^1.0` |
| `5.5.*` | `^1.0` |

Make sure you consult the [Upgrade Guide](http://laravel-json-api.readthedocs.io/en/latest/upgrade/)
when upgrading between major or pre-release versions.

## License

Apache License (Version 2.0). Please see [License File](LICENSE) for more information.

## Installation

Installation is via `composer`. See the documentation for complete instructions.

## Contributing

Contributions are absolutely welcome. Ideally submit a pull request, even more ideally with unit tests. Please note the
following:

- **Bug Fixes** - submit a pull request against the `master` branch.
- **Enhancements / New Features** - submit a pull request against the `develop` branch.

We recommend submitting an issue before taking the time to put together a pull request.
","This package provides all the capabilities you need to add [JSON API]compliant
APIs to your application. Extensive support for the specification, including:
Fetching resources, fetching relationships, and sorting fieldsets. Full support
for Eloquent resources, with features such as: Automatic eager loading when
including related resources. Support multiple media-types within your API, and
Generators for all the classes you need for adding a resource to your API. Join
the Laravel JSON:API community on Slack."
538,"The extensible bootloader for embedded system with application engine, write once, run everywhere.","![xboot-logo](developments/logo/xboot-logo.svg)

***

# XBOOT简介([English Version](README.md#xboot-introduction))

```
       _                   _                     
 _  _ | |___ _____ _____ _| |_                   
\ \/ /|  _  |  _  |  _  |_   _|  (C) 2007-2022   
 )  ( | |_| | |_| | |_| | | |____JIANJUN.JIANG__ 
/_/\_\|_____|_____|_____| |_____________________|
```
操作一个GPIO，需要仔细对照芯片手册，好繁琐；每换一个主控芯片，所有工作从头来过；想开发个现代点支持各种动效的UI，发现几乎是不可能的事情；各种协议栈有如天书一样，阅读都困难，何谈编写；虚拟机技术很流行，功能很强大，想自己移植个，可是困难重重；还是放开自己吧，让XBOOT来替你解决这些问题。XBOOT不仅仅是一款功能强大、可移植性强、代码复用率高的嵌入式系统bootloader，而且还是一款SOC片上系统应用软件执行引擎，无需复杂的操作系统，APP上电直接执行。一次编写，到处运行，不仅仅是个口号，而且还是XBOOT存在的唯一原因。一些基本特性，简单列举如下：
* 支持文件系统
* 支持lua虚拟机
* 支持各种协议栈
* 支持矢量图形库，矢量字体
* 支持各种现代GUI控件，以及动效
* 多平台支持
* 各种总线驱动，UART，I2C，SPI等等
* 各种设备驱动，GPIO，PWM，IRQ，CLK，LED，BUZZER，VIBRATOR，WATCHDOG，RNG，FRAMEBUFFER，RTC等
* 支持用lua编写应用软件，包含高等级API,可直接操作各种硬件抽象接口
* 应用软件平台无关，一次编写，到处运行

![linux-sandbox-game-2048](docs/_images/linux-sandbox-game-2048.gif)

# 文档及开发工具
* [Xboot文档](https://xboot.github.io/xboot)
* [交叉工具链](http://pan.baidu.com/s/1dDtssIt)
* [Eclipse集成开发环境](http://pan.baidu.com/s/1i3ImG0d)

# 编译源码
Makefile中有两个变量在编译时需要传递，一个是交叉工具链，另一个是具体的硬件平台

| 变量            | 说明                          |
| ------------- | --------------------------- |
| CROSS_COMPILE | 指定交叉工具链                     |
| PLATFORM      | 指定硬件平台，由两部分组成，`arch`及`mach` |

* ## Realview平台，qemu-system-arm模拟器

```shell
make clean
make CROSS_COMPILE=/path/to/arm-none-linux-gnueabihf- PLATFORM=arm32-realview
```

* ## X86_64位linux系统下的sandbox

sandbox依赖与SDL2库，在编译前需要安装libsdl2-dev，以ubuntu系统为例:
```shell
sudo apt-get install libsdl2-dev
```
```shell
make clean
make CROSS_COMPILE="""" PLATFORM=x64-sandbox
```

# 讨论组，大佬聚集，请踊跃加入
XBOOT官方QQ群：[658250248](https://jq.qq.com/?_wv=1027&k=5BOkXYO) (2000人)


***
# Xboot Introduction
It very tedious that we need careful read soc datasheet when operate GPIO on soc.We always repeat working when changed the soc.its almost almost impossible to We want develop a UI that support all kinds of magic motion.Stacks of protocols are like heavenly books ,it Reading is very hard , How do we program? Virtual machine technology is very popular and it function is powerful,but it very difficult to transplant it.so we build the Xboot.it can help us deal with these problems.
XBOOT is not only a powerful, portable, and highly reusable, embedded system bootloader,but also on a piece of SOC system application software execution engine, without complex operating system, electricity directly executed on the APP。""Once written, running everywhere."" It not just a slogan,but also the only reason for the existence of XBOOT. What's on the XBOOT?

- Support file systems
- Support lua virtual machine
- Support many protocol stacks
- Support graphics library, and vector font
- Supports a modern GUI, and animations
- Multi-platform support
- Bus drivers, UART, I2C, SPI and so on
- Device drivers, GPIO, PWM, IRQ, CLK, LED, BUZZER, VIBRATOR, WATCHDOG, RNG, FRAMEBUFFER, RTC, etc.
- Support application using lua, which include high-level API, can operate a variety of hardware abstract interface directly
- Application software platform has nothing to do, write once, run everywhere

# Documents and Development Tools
* [Xboot Documents](https://xboot.github.io/xboot)
* [Cross Toolchains](http://pan.baidu.com/s/1dDtssIt)
* [Eclipse Integrated Development Environment](http://pan.baidu.com/s/1i3ImG0d)

# Compile The Source Code
Makefile have two variables need to pass, one is cross toolchain, the other is a specific hardware platform

| variable      | Description                              |
| ------------- | ---------------------------------------- |
| CROSS_COMPILE | The specical cross toolchain             |
| PLATFORM      | The hardware platform, have two parts, `arch` and `mach` |

* ## Realview Platform，qemu-system-arm Emulator

```shell
make clean
make CROSS_COMPILE=/path/to/arm-none-linux-gnueabihf- PLATFORM=arm32-realview
```

* ## Linux Sandbox On X86_64

The sandbox depends on the SDL2 library, you need to install libsdl2-dev before compile, as an example at the ubuntu system:

```shell
sudo apt-get install libsdl2-dev
```
```shell
make clean
make CROSS_COMPILE="""" PLATFORM=x64-sandbox
```

# Discussion Group, Many Big Brother, Please Join Us
XBOOT Official Tencent QQ Group: [658250248](https://jq.qq.com/?_wv=1027&k=5BOkXYO) (2000 people)

","summarize:![xboot-logo](developments/logo/x Bootloader) (C) 2007-2022    ( | |_|
|._|, | |-| | | |____JIANJUN.JIANG__) ( C) 2012-2014   ‘‘’  “”  ’’ ‘.’” ’.”’.
‘'”. ’'’ '’: ‘The Bootloader’, ‘XBootloader.loader.bootloader.title’,.
‘xBootloader”, ’"
2141,"A comprehensive, easy-to-follow ebook to learn everything from the basics of JavaScript to ES2022. Read more on my blog https://inspiredwebdev.com or buy it here https://www.amazon.com/dp/B09FNNVY1Y?ref=inspiredwebde-20. Get the course here https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=BqmB","[![](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://www.paypal.me/albertomontalesi)
[![](https://img.shields.io/badge/Follow-Medium-green.svg)](https://medium.com/@labby92)
[![Twitter](https://img.shields.io/twitter/url/https/github.com/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook.svg?style=social)](https://twitter.com/intent/tweet?text=Wow:&url=https%3A%2F%2Fgithub.com%2FAlbertoMontalesi%2FJavaScript-es6-and-beyond-ebook)

[![GitHub stars](https://img.shields.io/github/stars/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook.svg)](https://github.com/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook/stargazers)
[![GitHub forks](https://img.shields.io/github/forks/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook.svg)](https://github.com/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook/network)
[![Github All Releases](https://img.shields.io/github/downloads/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook/total.svg)](https://github.com/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook)

[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/AlbertoMontalesi/JavaScript-es6-and-beyond-ebook/pulls)

# [The Complete Guide to Modern JavaScript ](https://leanpub.com/completeguidetomodernjavascript2020)

## Learn everything from the basics of JavaScript to the new ES2022 features. Practice with more than 50 quizzes and dive into the basics of TypeScript.

[![book-cover](/assets/banner.jpg)](http://bit.ly/2VV2LbX)

## Who is this book for?

This book is aimed to developer of every level, from beginner to advanced, who want to improve their `JavaScript` skills and get up to date with all the upgraded done to the language specification since 2015.

This book is **not** for total beginners, it does **cover** the basics of programming in general and albeit providing an introduction to `JavaScript` I would recommend that you take it only if you have at least a basic understanding of the language.

&nbsp;

## 5th Edition is out

Included a new chapter detailing all the new features introduced by ES2022

## Free vs Paid Version

The Paid version gives you access to:

- all the core chapters available on Github
- introduction to JavaScript section
- introduction to TypeScript section
- 50+ quizzes
- epub/mobi/pdf version
- paperback version (both color and black and white version available)

&nbsp;

## Where to buy it

You can get the course based on this book on:

- [Leanpub](https://leanpub.com/c/completeguidetomodernjavascript)
- [Educative](https://www.educative.io/courses/complete-guide-to-modern-javascript?aff=BqmB) or get the complete path to become a front end develop [here](https://www.educative.io/path/become-front-end-developer?aff=BqmB)

You get the ebook on Amazon, Leanpub and other stores, check the following link to find your local amazon store:

- Play Store [Ebook](https://play.google.com/store/books/details/Alberto_Montalesi_The_Complete_Guide_to_Modern_Jav?id=avqrDwAAQBAJ)
- Leanpub: [Ebook](https://leanpub.com/completeguidetomodernjavascript2020)
- Amazon: [Paperback](https://www.amazon.com/dp/B09FNNVY1Y?ref=inspiredwebde-20)

If you enjoyed the book please leave a review to support me and help other buyers.

You can also read my articles on my blog [here](https://www.inspiredwebdev.com/).

&nbsp;

## About me

My name is Alberto Montalesi, I am from Italy and I am working in Vietnam as a Software Developer creating enterprise software.

My passion for programming started late in life, in 2016 at the age of 24 after a bachelor's degree in Law.

My path to become a self-taught software developer has not been easy, but it's definitely something I would do again.

You can read my story on Medium at this link: https://medium.freecodecamp.org/my-journey-from-esl-teacher-to-software-developer-35cc998a6ec0

Writing a book that can help other aspiring developers fills me with pride as I know very well how hard it can be to find the motivation and the resources to continue studying and improving your skill.

Apart from programming, my other passions include photography, traveling and gaming.

&nbsp;

## Get in touch

If you want to get in touch for any type of collaboration or discussion you can find me on:

- [InspiredWebDev](https://inspiredwebdev.com) my personal blog https://inspiredwebdev.com
- [DevTo](https://dev.to/albertomontalesi) at https://dev.to/albertomontalesi
- [Medium](https://medium.com/@labby92) at https://medium.com/@labby92
- [Github](https://github.com/AlbertoMontalesi) at https://github.com/AlbertoMontalesi

&nbsp;

## Contributions & Donations

Any contributions you make are of book greatly appreciated.

If you enjoy my content and you want to donate a cup of coffee to me, you can do so at [https://www.paypal.me/albertomontalesi](https://www.paypal.me/albertomontalesi) or [here](https://ko-fi.com/albertomontalesi).

## License

<a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-nd/3.0/""><img alt=""Creative Commons License"" style=""border-width:0"" src=""https://i.creativecommons.org/l/by-nc-nd/3.0/88x31.png"" /></a><br />This work is licensed under a <a rel=""license"" href=""http://creativecommons.org/licenses/by-nc-nd/3.0/"">Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License</a>.
","Learn everything from the basics of JavaScript to the new ES2022 features.
Practice with more than 50 quizzes and dive into the Basics of TypeScript. You
can get the course based on this book
on:Leanpub.com/c/completeguidetomodernjavascript2020."
132,Chaos Monkey for Spring Boot,"[![Apache License 2](https://img.shields.io/github/license/codecentric/chaos-monkey-spring-boot)](https://www.apache.org/licenses/LICENSE-2.0.txt)
[![Build Status](https://github.com/codecentric/chaos-monkey-spring-boot/workflows/Chaos%20Monkey%20Build/badge.svg)](https://github.com/codecentric/chaos-monkey-spring-boot/actions?query=workflow%3A%22Chaos+Monkey+Build%22)
[![codecov](https://codecov.io/gh/codecentric/chaos-monkey-spring-boot/branch/main/graph/badge.svg)](https://codecov.io/gh/codecentric/chaos-monkey-spring-boot)
[![Maven Central](https://maven-badges.herokuapp.com/maven-central/de.codecentric/chaos-monkey-spring-boot/badge.svg)](https://maven-badges.herokuapp.com/maven-central/de.codecentric/chaos-monkey-spring-boot/)
[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](CODE_OF_CONDUCT.adoc)

[![Open in Gitpod](https://img.shields.io/badge/Open%20with-Gitpod-908a85?logo=gitpod)](https://gitpod.io/#https://github.com/codecentric/chaos-monkey-spring-boot)
[![VS Code DevContainer](https://img.shields.io/static/v1?label=VS+Code&message=DevContainer&logo=visualstudiocode&color=007ACC&logoColor=007ACC&labelColor=2C2C32)](https://open.vscode.dev/microsoft/vscode)


# Chaos Monkey for Spring Boot
### inspired by Chaos Engineering at Netflix

<p align=""center"">
  <img src=""docs/images/sb-chaos-monkey-logo.png"">
</p>

This project provides a Chaos Monkey for Spring Boot applications and will try to attack your running Spring Boot App.

>Everything from getting started to advanced usage is explained in the [Documentation for Chaos Monkey for Spring Boot](https://codecentric.github.io/chaos-monkey-spring-boot/latest/) 

## Introduction
If you're not familiar with the principles of chaos engineering yet, check out this blog post and enter the world of chaos engineering.

<a href=""https://blog.codecentric.de/en/2018/07/chaos-engineering/"" target=""_blank""><img src=""https://pbs.twimg.com/media/DhaRNO7XUAAi00i.jpg"" 
alt=""Chaos Engineering – withstanding turbulent conditions in production"" width=""260"" height=""155"" border=""10"" /></a><br>

Get familiar with the Chaos Monkey for Spring Boot in the following video, <a href=""https://goo.gl/r2Tmig"" target=""_blank"">available on YouTube</a>:

<a href=""https://goo.gl/r2Tmig"" target=""_blank""><img src=""https://i.ytimg.com/vi/7sQiIR9qCdA/maxresdefault.jpg"" 
alt=""Chaos Monkey for Spring Boot"" width=""260"" height=""155"" border=""10"" /></a><br>

## What is the goal of Chaos Monkey?

Inspired by [PRINCIPLES OF CHAOS ENGINEERING](https://principlesofchaos.org/), with a focus on [Spring Boot](https://projects.spring.io/spring-boot/), Chaos Monkey wants to test applications better and especially during operation.

After writing many unit and integration tests, a code coverage from 70% to 80%, this unpleasant feeling remains, how our baby behaves in production?

Many questions remain unanswered:

- Will our fallbacks work?
- How does the application behave with network latency?
- What if one of our services breaks down?
- Service Discovery works, but is our Client-Side-Load-Balancing also working?

As you can see, there are many more questions and open topics you have to deal with.

That was the start of Chaos Monkey for Spring Boot.

### How does it work?
If Spring Boot Chaos Monkey is on your classpath and activated with profile name `chaos-monkey`, it will automatically hook into your application. 

Now you can activate [watchers](https://codecentric.github.io/chaos-monkey-spring-boot/latest/#watchers), which look for classes to [assault](https://codecentric.github.io/chaos-monkey-spring-boot/latest/#assaults). There are also [runtime assaults](https://codecentric.github.io/chaos-monkey-spring-boot/latest/#runtime-assaults), which attack your whole application.

<p align=""center"">
  <img class=""imgborder s1"" width=""90%"" src=""docs/images/sb-chaos-monkey-architecture.png"">
</p>

## Be social and communicative!
If you start to implement Chaos Engineering at your company, then you must be a very social and communicative person. Why? Because you will get to know many of your colleagues personally in a very short time when your chaos experiments strike.

### Check your resilience
Are your services already resilient and can handle failures? Don´t start a chaos experiment if not!

### Implement active application monitoring
Check your monitoring and check if you can see the overall state of your system. There are many great tools out there to get a pleasant feeling about your entire system.

### Define steady states
Define a metric to check a steady state of your service and of course your entire system. Start small with a service that is not critical.

### Do not start in production
Of course, you can start in production, but keep in mind...

> The best place on earth is...production!<br>
> *Josh Long*

...so let's keep production as the best place on earth and look for our first experiences on another stage. If all goes well, and you're confident, run it in production.

## Documentation
[Documentation](https://codecentric.github.io/chaos-monkey-spring-boot/latest/)

## Help

We are using GitHub issues to track bugs, improvements and new features (for more information see [Contributions](#contributions)). If you have a general question on how to use Chaos Monkey for Spring Boot, please ask on Stack Overflow using the tag [`#spring-boot-chaos-monkey`](https://stackoverflow.com/questions/tagged/spring-boot-chaos-monkey).

## Contributions 
Chaos Monkey is open source and welcomes contributions from everyone. The [contribution guideline](https://github.com/codecentric/chaos-monkey-spring-boot/blob/main/CONTRIBUTING.adoc) is where you should begin in order to best understand how to contribute to this project. 



## Releases
[Releases](https://github.com/codecentric/chaos-monkey-spring-boot/releases)
","Chaos Monkey for Spring Boot aims to test applications better and especially
during operation. It is based on the principles of chaos engineering. The best
place on earth is...production! If you're not familiar with chaos engineering
yet, check out this blog post and enter the world of chaos Engineering. If you
start to implement Chaos Engineering at your company, then you must be a very
social and communicative person. There are many great tools out there to get a
pleasant feeling about your entire system. Start small with a service that is
not critical and run it in production."
1357,Some helper classes for writing functional tests in Symfony,"[![Build Status](https://github.com/liip/LiipFunctionalTestBundle/actions/workflows/tests.yml/badge.svg)](https://github.com/liip/LiipFunctionalTestBundle/actions/workflows/tests.yml)
[![Latest Stable Version](https://poser.pugx.org/liip/functional-test-bundle/v/stable)](https://packagist.org/packages/liip/functional-test-bundle)
[![Latest Unstable Version](https://poser.pugx.org/liip/functional-test-bundle/v/unstable)](https://packagist.org/packages/liip/functional-test-bundle)
[![Scrutinizer Code Quality][Scrutinizer image]
![Scrutinizer][Scrutinizer Coverage Image]][Scrutinizer]

Introduction
============

This Bundle provides base classes for functional tests.
It also provides a DI aware mock builder for unit tests.

Documentation
------------

* [Installation](doc/installation.md)
* [Basic usage](doc/basic.md)
* [Command test](doc/command.md)
* [Logged client](doc/logged.md)
* [Query counter](doc/query.md)
* [Examples](doc/examples.md)
* [Caveats](doc/caveats.md)

To run tests in parallel:
* [Fastest](doc/fastest.md)

[Travis Master]: https://travis-ci.org/liip/LiipFunctionalTestBundle
[Travis Master image]: https://travis-ci.org/liip/LiipFunctionalTestBundle.svg?branch=master
[Scrutinizer]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/?branch=master
[Scrutinizer image]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/badges/quality-score.png?b=master
[Scrutinizer Coverage image]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/badges/coverage.png?b=master
","This Bundle provides base classes for functional tests. It also provides a DI
aware mock builder for unit tests. To run tests in parallel: [Fastest, Fastest,
Logged client, Query counter, Caveats, Coverage Image, Scrutinizer]"
978,Kata Containers version 1.x runtime (for version 2.x see https://github.com/kata-containers/kata-containers).,"[![Build Status](https://travis-ci.org/kata-containers/runtime.svg?branch=master)](https://travis-ci.org/kata-containers/runtime)
[![Build Status](http://jenkins.katacontainers.io/job/kata-containers-runtime-ubuntu-18-04-master/badge/icon)](http://jenkins.katacontainers.io/job/kata-containers-runtime-ubuntu-18-04-master/)
[![Go Report Card](https://goreportcard.com/badge/github.com/kata-containers/runtime)](https://goreportcard.com/report/github.com/kata-containers/runtime)
[![GoDoc](https://godoc.org/github.com/kata-containers/runtime?status.svg)](https://godoc.org/github.com/kata-containers/runtime)

# Runtime

This repository contains the runtime for the
[Kata Containers](https://github.com/kata-containers) project.

For details of the other Kata Containers repositories, see the
[repository summary](https://github.com/kata-containers/kata-containers).

* [Introduction](#introduction)
* [License](#license)
* [Platform support](#platform-support)
    * [Hardware requirements](#hardware-requirements)
* [Download and install](#download-and-install)
* [Quick start for developers](#quick-start-for-developers)
* [Architecture overview](#architecture-overview)
* [Configuration](#configuration)
* [Logging](#logging)
    * [Kata OCI](#kata-oci)
    * [Kata containerd shimv2](#kata-containerd-shimv2)
* [Debugging](#debugging)
* [Limitations](#limitations)
* [Community](#community)
    * [Contact](#contact)
* [Further information](#further-information)
* [Additional packages](#additional-packages)

## Introduction

`kata-runtime`, referred to as ""the runtime"", is the Command-Line Interface
(CLI) part of the Kata Containers runtime component. It leverages the
[virtcontainers](virtcontainers)
package to provide a high-performance standards-compliant runtime that creates
hardware-virtualized [Linux](https://www.kernel.org/) containers running on Linux hosts.

The runtime is
[OCI](https://github.com/opencontainers/runtime-spec)-compatible,
[CRI-O](https://github.com/cri-o/cri-o)-compatible, and
[Containerd](https://github.com/containerd/containerd)-compatible,
 allowing it
to work seamlessly with both Docker and Kubernetes respectively.

## License

The code is licensed under an Apache 2.0 license.

See [the license file](LICENSE) for further details.

## Platform support

Kata Containers currently works on systems supporting the following
technologies:

- [Intel](https://www.intel.com) VT-x technology.
- [ARM](https://www.arm.com) Hyp mode (virtualization extension).
- [IBM](https://www.ibm.com) Power Systems.
- [IBM](https://www.ibm.com) Z mainframes.
### Hardware requirements

The runtime has a built-in command to determine if your host system is capable
of running and creating a Kata Container:

```bash
$ kata-runtime kata-check
```

> **Note:**
>
> - By default, only a brief success / failure message is printed.
> If more details are needed, the `--verbose` flag can be used to display the
> list of all the checks performed.
>
> - `root` permission is needed to check if the system is capable of running
> Kata containers. In this case, additional checks are performed (e.g., if another
> incompatible hypervisor is running).

## Download and install

[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-black.svg)](https://snapcraft.io/kata-containers)

See the [installation guides](https://github.com/kata-containers/documentation/tree/master/install/README.md)
available for various operating systems.

## Quick start for developers

See the
[developer guide](https://github.com/kata-containers/documentation/blob/master/Developer-Guide.md).

## Architecture overview

See the [architecture overview](https://github.com/kata-containers/documentation/blob/master/design/architecture.md)
for details on the Kata Containers design.

## Configuration

The runtime uses a TOML format configuration file called `configuration.toml`.
The file contains comments explaining all options.

> **Note:**
>
> The initial values in the configuration file provide a good default configuration.
> You may need to modify this file to optimise or tailor your system, or if you have
> specific requirements.

Since the runtime supports a
[stateless system](https://clearlinux.org/about),
it checks for this configuration file in multiple locations, two of which are
built in to the runtime. The default location is
`/usr/share/defaults/kata-containers/configuration.toml` for a standard
system. However, if `/etc/kata-containers/configuration.toml` exists, this
takes priority.

The below command lists the full paths to the configuration files that the
runtime attempts to load. The first path that exists will be used:

```bash
$ kata-runtime --kata-show-default-config-paths
```

Aside from the built-in locations, it is possible to specify the path to a
custom configuration file using the `--kata-config` option:

```bash
$ kata-runtime --kata-config=/some/where/configuration.toml ...
```

The runtime will log the full path to the configuration file it is using. See
the [logging](#logging) section for further details.

To see details of your systems runtime environment (including the location of
the configuration file being used), run:

```bash
$ kata-runtime kata-env
```

## Logging

For detailed information and analysis on obtaining logs for other system
components, see the documentation for the
[`kata-log-parser`](https://github.com/kata-containers/tests/tree/master/cmd/log-parser)
tool.

For runtime logs, see the following sections for the CRI-O and containerd shimv2 based runtimes.

### Kata OCI

The Kata OCI runtime (including when used with CRI-O), provides `--log=` and `--log-format=` options.
However, the runtime also always logs to the system log (`syslog` or `journald`).

To view runtime log output:

```bash
$ sudo journalctl -t kata-runtime
```

### Kata containerd shimv2

The Kata containerd shimv2 runtime logs through `containerd`, and its logs will be sent
to wherever the `containerd` logs are directed. However, the
shimv2 runtime also always logs to the system log (`syslog` or `journald`) under the
identifier name of `kata`.

To view the `shimv2` runtime log output:

```bash
$ sudo journalctl -t kata
```

## Debugging

See the
[debugging section of the developer guide](https://github.com/kata-containers/documentation/blob/master/Developer-Guide.md#troubleshoot-kata-containers).

## Limitations

See the
[limitations file](https://github.com/kata-containers/documentation/blob/master/Limitations.md)
for further details.

## Community

See [the community repository](https://github.com/kata-containers/community).

### Contact

See [how to reach the community](https://github.com/kata-containers/community/blob/master/CONTRIBUTING.md#contact).

## Further information

See the
[project table of contents](https://github.com/kata-containers/kata-containers)
and the
[documentation repository](https://github.com/kata-containers/documentation).

## Additional packages

For details of the other packages contained in this repository, see the
[package documentation](pkg).
","Kata Containers is an open-source container orchestration tool. It works with
Docker and Kubernetes. The code is licensed under an Apache 2.0 license. It is
available for various operating systems. It has a built-in command to determine
if your host system is capable of running and creating a Kata Container. It uses
a TOML format configuration file called `configuration.toml`. The default
location is for a standard system, but it can be customised."
1073,"ARCHIVED: Contains historical course materials/Homework materials for the FREE MOOC course on ""Creative Applications of Deep Learning w/ Tensorflow"" #CADL","[![Build Status](https://travis-ci.org/pkmital/CADL.svg?branch=master)](https://travis-ci.org/pkmital/CADL) [![Slack Channel](https://cadl.herokuapp.com/badge.svg)](https://cadl.herokuapp.com)

# <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>

This repository contains lecture transcripts and homework assignments as Jupyter Notebooks for the first of three <a href=""https://www.kadenze.com/partners/kadenze-academy"">Kadenze Academy</a> courses on <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>.  It also contains a python package containing all the code developed during all three courses.

**COURSE 1: Creative Applications of Deep Learning with TensorFlow I**  
Session 1: Introduction to TensorFlow  
Session 2: Training A Network W/ TensorFlow  
Session 3: Unsupervised And Supervised Learning  
Session 4: Visualizing And Hallucinating Representations  
Session 5: Generative Models  

**COURSE 2: Creative Applications of Deep Learning with TensorFlow II**  
Session 1: Cloud Computing, GPUs, Deploying  
Session 2: Mixture Density Networks  
Session 3: Modeling Attention with RNNs, DRAW  
Session 4: Image-to-Image Translation with GANs  

**COURSE 3: Creative Applications of Deep Learning with TensorFlow III**  
Session 1: Modeling Music and Art: Google Brain’s Magenta Lab  
Session 2: Modeling Language: Natural Language Processing  
Session 3: Autoregressive Image Modeling w/ PixelCNN  
Session 4: Modeling Audio w/ Wavenet and NSynth  

# Github Contents Overview

| | Session | Description | Transcript | Homework |
| --- | --- | --- | --- | --- |
| Python Package | **[pycadl](https://github.com/pkmital/pycadl)** | Python package required for courses 2 and 3 | N/A | N/A |
|Installation| **[Installation](#installation-preliminaries)** | Setting up Python/Notebook and necessary libraries. | N/A | N/A |
|Preliminaries| **[Preliminaries with Python](session-0)** | Basics of working with Python and images. | N/A | N/A |
|1| **[Computing with Tensorflow](session-1)** | Working with a small dataset of images.  Dataset preprocessing.  Tensorflow basics.  Sorting/organizing a dataset. | [lecture-1.ipynb](session-1/lecture-1.ipynb) [Colab](https://colab.research.google.com/notebook#fileId=1bjXwBG0AqGcFbSP5pjjL1A981mBhhN0f) | [session-1.ipynb](session-1/session-1.ipynb) |
|2| **[Basics of Neural Networks](session-2)** | Learn how to create a Neural Network.  Learn to use a neural network to paint an image.  Apply creative thinking to the inputs, outputs, and definition of a network. | [lecture-2.ipynb](session-2/lecture-2.ipynb) | [session-2.ipynb](session-2/session-2.ipynb) |
|3| **[Unsupervised and Supervised Learning](session-3)** | Build an autoencoder.  Extend it with convolution, denoising, and variational layers.  Build a deep classification network.  Apply softmax and onehot encodings to classify audio using a Deep Convolutional Network. | [lecture-3.ipynb](session-3/lecture-3.ipynb) | [session-3.ipynb](session-3/session-3.ipynb) |
|4| **[Visualizing Representations](session-4)** | Visualize backpropped gradients, use them to create Deep Dream, extend Deep Dream w/ regularization.  Stylize images or synthesize new images with painterly or hallucinated aesthetics of another image. | [lecture-4.ipynb](session-4/lecture-4.ipynb) | [session-4.ipynb](session-4/session-4.ipynb) |
|5| **[Generative Models](session-5)** | Build a Generative Adversarial Network and extend it with a Variational Autoencoder.  Use the latent space of this network to perform latent arithmetic.  Build a character level Recurrent Neural Network using LSTMs.  Understand different ways of inferring with Recurrent Networks.  | [lecture-5.ipynb](session-5/lecture-5.ipynb) | [session-5-part-1.ipynb](session-5/session-5-part-1.ipynb), [session-5-part-2.ipynb](session-5/session-5-part-2.ipynb) |

<a name=""installation-preliminaries""></a>
# Installation Preliminaries

<!-- MarkdownTOC autolink=true autoanchor=true bracket=round -->

- [Quickstart Guide](#quickstart-guide)
    - [Method 1: pip Install](#method-1-pip-install)
    - [Method 2: Docker Installation](#method-2-docker-installation)
- [What is Notebook?](#what-is-notebook)
- [Docker Toolbox](#docker-toolbox)
- [Jupyter Notebook](#jupyter-notebook)
    - [OSX/Linux](#osxlinux)
    - [Windows/Docker Containers](#windowsdocker-containers)
- [Navigating to Notebook](#navigating-to-notebook)
- [Installing Python Packages](#installing-python-packages)
    - [Ubuntu/Linux 64-bit for Python 3.4](#ubuntulinux-64-bit-for-python-34)
    - [Ubuntu/Linux 64-bit for Python 3.5](#ubuntulinux-64-bit-for-python-35)
    - [OSX for Python 3.4 or Python 3.5](#osx-for-python-34-or-python-35)
    - [Other Linux/OSX varieties](#other-linuxosx-varieties)
- [CUDA/GPU instructions](#cudagpu-instructions)
- [Testing it](#testing-it)
- [CUDA/GPU instructions for MacOS](#cudagpu-instructions-for-macos)
- [Troubleshooting](#troubleshooting)
    - [ImportError: No module named 'tensorflow'](#importerror-no-module-named-tensorflow)
    - [AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'](#attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C)
    - [GPU-related issues](#gpu-related-issues)
    - [Protobuf library related issues](#protobuf-library-related-issues)
    - [Cannot import name 'descriptor'](#cannot-import-name-descriptor)
    - [Can't find setup.py](#cant-find-setuppy)
    - [SSLError: SSL_VERIFY_FAILED](#sslerror-sslverifyfailed)
    - [Jupyter Notebook Kernel is always busy \(Windows\)](#jupyter-notebook-kernel-is-always-busy-windows)
    - [Something Else!](#something-else)

<!-- /MarkdownTOC -->

The first course makes heavy usage of Jupyter Notebook.  This will be necessary for submitting the homeworks and interacting with the guided session notebooks I will provide for each assignment.  Follow along this guide and we'll see how to obtain all of the necessary libraries that we'll be using.  By the end of this, you'll have installed Jupyter Notebook, NumPy, SciPy, and Matplotlib.  While many of these libraries aren't necessary for performing the Deep Learning which we'll get to in later lectures, they are incredibly useful for manipulating data on your computer, preparing data for learning, and exploring results.

<a name=""quickstart-guide""></a>
## Quickstart Guide

**Please skip this section and read the rest of this readme if you are unfamiliar w/ Jupyter Notebook or installing Python libraries.  This section is only for advanced users who want to get started quickly.**

There are two ways to get started.  You can use a native pip installation or use Docker.  There is a quickstart guide for both methods below.  If you have trouble with these, then please skip to the more in depth guides below these sections.

<a name=""method-1-pip-install""></a>
### Method 1: pip Install

For those of you that are proficient w/ Python programming, you'll need Python 3.4+ and the latest TensorFlow which you can install via pip, e.g.:

```bash
$ pip install tensorflow
```

or w/ CUDA as:

```bash
$ pip install tensorflow-gpu
```

<a name=""method-2-docker-installation""></a>
### Method 2: Docker Installation

If you want a controlled environment w/ all dependencies installed for you, and are proficient w/ Docker and Jupyter, you can get started w/ this repo like so:

```bash
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
$ cd CADL
$ docker build -t cadl .
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl /bin/bash
```

Note that you can skip the build step and download from docker hub instead like so:

```bash
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf pkmital/cadl /bin/bash
```

Be sure to replace ""session-1"" with whichever session you are working on, e.g. ""session-2"", ""session-3""...  This will give you a bash prompt with the files for each session:

```bash
root@39c4441bcde8:/notebooks# ls
README.md  lecture-1.ipynb  libs  session-1.ipynb  tests
```

Which you can use to launch jupyter like so:

```bash
root@39c4441bcde8:/notebooks# jupyter notebook --allow-root
[I 01:45:27.712 NotebookApp] [nb_conda_kernels] enabled, 2 kernels found
[I 01:45:27.715 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 01:45:27.729 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[I 01:45:27.799 NotebookApp] [nb_anacondacloud] enabled
[I 01:45:27.802 NotebookApp] [nb_conda] enabled
[I 01:45:27.856 NotebookApp] ✓ nbpresent HTML export ENABLED
[W 01:45:27.856 NotebookApp] ✗ nbpresent PDF export DISABLED: No module named 'nbbrowserpdf'
[I 01:45:27.858 NotebookApp] Serving notebooks from local directory: /notebooks
[I 01:45:27.858 NotebookApp] 0 active kernels
[I 01:45:27.858 NotebookApp] The Jupyter Notebook is running at: http://[all ip addresses on your system]:8888/?token=dd68eeffd8f227dd789327c981d16b24631866e909bd6469
[I 01:45:27.858 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Jupyter should then be running if you navigate Google Chrome (suggested!) to ""http://localhost:8888"".  If you navigate to the session-1.ipynb file, you will see the homework, or to ""lecture-1.ipynb"", to find the lecture transcripts.  The same goes for every other session.

If you need to relaunch the docker image again, you can write:

```bash
$ cd
$ cd CADL
$ docker start -i tf
```

If you want to use a GPU version, and have a Linux machine, and have an NVIDIA GPU, you can use [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) (this only works for Linux machines! for non-Linux machines that want to use GPU, please follow the expanded directions below, or the quickstart pip installation above):

```bash
$ wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb
$ sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb
$ nvidia-docker build -t cadl-gpu -f Dockerfile-gpu .
$ nvidia-docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl-gpu /bin/bash 
$ nvidia-docker start -i tf
```

If you had any trouble w/ this setup then please go through the rest of this document which provides much more in depth details.


<a name=""what-is-notebook""></a>
## What is Notebook?

Jupyter Notebook, previously called ""iPython Notebook"" prior to version 4.0, is a way of interacting with Python code using a web browser.  It is a very useful instructional tool that we will be using for all of our homework assignments.  Notebooks have the file extensions ""ipynb"" which are abbreviations of ""iPython Notebook"".  Some websites such as [nbviewer.ipython.org](http://nbviewer.ipython.org) or [www.github.com](http://www.github.com) can view `.ipynb` files directly as rendered HTML.  However, these are not *interactive* versions of the notebook, meaning, they are not running the python kernel which evaluates/interacts with the code.  So the notebook is just a static version of the code contained inside of it.

In order to interact with notebook and start coding, you will need to launch Terminal (for Mac and Linux users).  For Windows users, or for anyone having any problems with the Linux/Mac instructions, please follow the next section on [Docker Toolbox](#docker-toolbox) very closely!  If you are not a Windows user, please first try skipping over the next section and use the installation instructions in [Jupyter Notebook](#jupyter-notebook) before trying Docker as this solution will be much faster than running Docker.

<a name=""docker-toolbox""></a>
## Docker Toolbox

Currently, Windows users can only install Tensorflow via [pip using a 64-bit Python 3.5 environment](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation-on-windows) or using Docker, as outlined below.

The easiest way to get up an running on any type of system is to use Docker.  Docker is a way of managing a ""virtual"" Linux machine on your computer which will aid the creation a machine capable of running Tensorflow.  First, please download and install the Docker Toolbox:

https://www.docker.com/products/docker-toolbox

Linux users can install docker using their favorite package manager.

For OSX and Windows users, you'll then need to run the ""Docker Quickstart Terminal"" which will launch a Terminal environment running on a virtual Linux machine on your computer. A virtual machine is basically an emulation of another machine. This is important because we'll use this machine to run Linux and install all of the necessary libraries for running Tensorflow.

Note for Windows users, if you have trouble launching the Docker Quickstart Terminal because you have ""Hyper-V"", please instead try using https://docs.docker.com/docker-for-windows/.  Then launch the newly installed ""Docker CLI"" program.

Once the Terminal is launched, either via Docker CLI or Docker Quickstart Terminal, run the following command (ignoring the `$` sign at the beginning of each line, which just denote that each line is a terminal command that you should type out exactly and then hit ENTER afterwards):

```shell
$ cd
$ docker-machine ip
```

If you are using Docker Toolbox, you should see your virtual machine's IP address as a result of the last command.  This is the location of your virtual machine.  <b>NOTE THIS IP ADDRESS</b>, as we'll need it in a second.  If you are using ""Docker for Windows"" instead, then you won't need this IP as we'll just use ""localhost"".

This next command will move to your ""home"" directory.  We'll then ""clone"" the github repo.  This will download everything for the course using ""git"".  If you have trouble w/ this step, make sure you have installed [git](https://git-scm.com/downloads).

```shell
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
```

We'll now print out what the full path to that directory is.  PLEASE NOTE DOWN THIS DIRECTORY.  This is where everything will happen, and I'll explain that in a minute.

```shell
$ echo /$(pwd)/CADL
```

Now run the following command, which will download everything we need to run tensorflow, python, and jupyter notebook (again, ignore the ""$"" at the beginning of the line only)!

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

What this is doing is:
    * Running the docker image [pkmital/cadl](https://hub.docker.com/r/pkmital/cadl/)
    * --name is giving it a shorthand name of ""tf""
    * -v is mirroring the directory ""/$(pwd)/CADL"" to the virtual machine's directory of ""/notebooks""
    * -p is forwarding ports from the virtual machine to your local machine so that you can access the virtual machine's port
    * -it is running it as an interactive process

You will want to put files inside the ""/notebooks"" directory *only*.  If you place files on the virtual machine outside of the ""/notebooks"" directory, which is the SAME as the ""CADL"" directory on your local machine, they will *not* be saved.  We are using Docker to mirror the ""CADL"" directory on a virtual machine which has everything necessary for us to code in Python and Tensorflow.  _Whatever is in that directory will be mirrored on the virtual machine's directory under `/notebooks`._

You can also try running the docker run command with any other directory. For instance:

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /Users/YOURUSERNAME/Desktop:/notebooks --name tf pkmital/cadl
```

Which would mean that your Desktop is where you can move files around so that on the virtual machine, you can interact with them under the `/notebooks`directory.

For OSX users, if you are installing Docker because you had installation problems using Anaconda and pip, you would instead write the following command (note the missing slash):

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v $(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

When you want to start this machine, you will launch the Docker Quickstart Terminal and then write:

```shell
$ cd
$ docker start -i tf
```

Notice that the command prompt will now be `#` instead of `$`.  You should have a new folder ""tensorflow"" inside your Home directory.  This directory will be empty to begin with.  Please make sure you do everything inside this directory only or else any files you make on your virtual machine WILL BE ERASED once it is shutdown!  When you clone the CADL repository, or expand the zip file downloads contents inside this directory via your Windows machine (it will be in your Home directory under a folder ""cadl""), then you will be able to access it via your Docker instance.

For instance, after running the `docker start -i tf` command, try going into the directory `/notebooks`:

```shell
# cd /notebooks
```

<a name=""jupyter-notebook""></a>
## Jupyter Notebook

<a name=""osxlinux""></a>
### OSX/Linux

Note: Windows/Docker users should scroll past this section to [""Windows/Docker""](#windows-docker-containers).  For OSX/Linux users, the easiest way to ensure you have Python 3.4 or higher and Jupter Notebook is to install Anaconda for Python 3.5 located here:

[OSX](https://docs.continuum.io/anaconda/install#anaconda-for-os-x-command-line-install) or [Linux](https://docs.continuum.io/anaconda/install#linux-install)

Make sure you restart your Terminal after you install Anaconda as there are some PATH variables that have to be set.

Then run the following:

```shell
$ curl https://bootstrap.pypa.io/ez_setup.py -o - | python
```

If you already have conda, but only have Python 2, you can very easily [add a new environment w/ Python 3](http://conda.pydata.org/docs/py2or3.html#create-a-python-3-5-environment) and switch back and forth as needed.  Or if you do not have Anaconda, but have a system based install, I'd really recommend either using Anaconda or [pyenv](https://github.com/yyuu/pyenv) to help you manage both python installations.

With Anaconda installed, you will have python and the package ""ipython[notebook]"", along with a ton of other very useful packages such as numpy, matplotlib, scikit-learn, scikit-image, and many others.

With everything installed, restart your Terminal application (on OSX, you can use Spotlight to find the Terminal application), and then navigate to the directory containing the ""ipynb"", or ""iPython Notebook"" file, by ""cd'ing"" (pronounced, see-dee-ing), into that directory.  This involves typing the command: ""cd some_directory"".  Once inside the directory of the notebook file, you will then type: ""jupyter notebook"".  If this command does not work, it means you do not have notebook installed!  Try installed anaconda as above, restart your Terminal application, or manually install notebook like so (ignore the ""$"" signs which just denote that this is a Terminal command that you should type out exactly and then hit ENTER!):

```shell
$ pip3 install ipython[notebook]
$ jupyter notebook
```

If you run into issues that say something such as:

```
[W 20:37:40.543 NotebookApp] Kernel not found: None
```

Then please try first running:

```shell
$ ipython3 kernel install
```

<a name=""windows-docker-containers"">
<a name=""windowsdocker-containers""></a>
### Windows/Docker Containers

For users running firewalls, you must make sure you have an exception as per [Jupyter Notebooks Firewall Instructions](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#firewall-setup) otherwise you may not be able to interact with the notebook.  Namely, you will need to allow connections from 127.0.0.1 (localhost) on ports from 49152 to 65535.  Once inside your Docker container as outlined above, you can now launch notebook like so:

```shell
$ cd /notebooks
$ jupyter notebook &
```

Note on Virtual versus Windows Directories:

This is tricky to grasp, mostly because I didn't explain it. Docker is ""virtual"" computer running inside your computer. It has its own filesystem and its own directories. So you can't reference your Windows machine's directories inside this machine. When you first ran docker (e.g. `$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/tensorflow:/notebooks --name tf pkmital/cadl`) it included as part of its command: `-v /$(pwd)/tensorflow:/notebooks`. What that was doing is ""mirroring"" a directory on your Windows machine inside your Virtual machine. So whatever was in your Windows machine under the directory `/$(pwd)/tensorflow` would appear in the Virtual machine under `/notebooks`. That Windows directory is likely `/Users/<YOURUSERNAME>/tensorflow`. So _ONLY_ inside that directory, create it if it doesn't exist, should you put files in order to access it on the Virtual machine.

So let's say your Username was ""pkmital"". Then your home directory would be `/Users/pkmital`, and you would have mirrored `/Users/pkmital/tensorflow` on your Windows Machine to the Virtual machine under `/notebook`. Now let's say I create a directory `/Users/pkmital/tensorflow/images` on my Windows Machine, and then put a bunch of png files in there. I will then see them in my Virtual machine under `/notebook/images`.  If I put the CADL repository inside `/Users/pkmital/tensorflow`, then I should have `/Users/pkmital/tensorflow/CADL/session-1/session-1.ipynb` and on the Virtual machine, it will be in `/notebooks/CADL/session-1/session-1.ipynb` - From this notebook, running on the virtual machine, accessed with Jupyter Notebook, I would access my images like so:

```python
import os
os.listdir('../../images')
```

<a name=""navigating-to-notebook""></a>
## Navigating to Notebook

After running ""jupyter notebook &"", you should see a message similar to:

```shell
root@182bd64f27d2:~# jupyter notebook &
[I 21:15:33.647 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 21:15:33.712 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[W 21:15:33.713 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using authentication. This is highly insecure and not recommended.
[I 21:15:33.720 NotebookApp] Serving notebooks from local directory: /root
[I 21:15:33.721 NotebookApp] 0 active kernels
[I 21:15:33.721 NotebookApp] The IPython Notebook is running at: http://[all ip addresses on your system]:8888/
[I 21:15:33.721 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Don't worry if the IP address or command prompt look different.  Note where it says: `The IPython Notebook is running at`.  If you are running Docker (Windows users), this is where we need that IP address.  For OSX/Linux users, we'll use ""localhost"" so don't worry about this.  Now open up Chrome/Safari/Firefox whatever browser you like, and then navigate to:

http://localhost:8888

or for Windows users:

http://ADDRESS:8888

where ADDRESS is the ip address you should have noted down before. For instance, on my machine, I would visit the website:

http://192.168.99.100:8888

This will launch the Jupyter Notebook where you will be able to interact with the homework assignments!

<a name=""installing-python-packages""></a>
## Installing Python Packages

Packages are libraries or useful extensions to the standard python libraries.  In this course, we'll be using a few including Tensorflow, NumPy, MatPlotLib, SciPy, SciKit-Image, and SciKit-Learn.  Windows users will already have these libraries since the Docker container includes these.  However, if you needed to, you can install these using ""pip"", which is the python package manager.  OSX/Linux users should follow these steps just to be sure they have the latest versions of these packages. In Python 3.4 and higher, `pip` comes with any standard python installation.  In order to use `pip`, first make sure you are using the correct version.  One way to do this is check which pip you are running:

```shell
$ which pip
$ which pip3
```

Use which `pip` points to the install path that makes the most sense (e.g. Anaconda for OSX users for some reason does not symlink pip3 to the python3 pip, and instead points to the system version of python3).

Then you'll write:

```shell
$ pip3 install -U pip setuptools
```

To make sure you have an up to date pip, then:

```shell
$ pip3 install some_package
```

To get the necessary libraries:

```shell
$ pip3 install ""scikit-image>=0.11.3"" ""numpy>=1.11.0"" ""matplotlib>=1.5.1"" ""scikit-learn>=0.17""
```

This should get you all of the libraries we need for the course, EXCEPT for tensorflow.  Tensorflow is a special case, but can be `pip` installed in much the same way by pointing pip to the github repo corresponding to your OS like so.

<a name=""ubuntulinux-64-bit-for-python-34""></a>
### Ubuntu/Linux 64-bit for Python 3.4

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp34-cp34m-linux_x86_64.whl
```

<a name=""ubuntulinux-64-bit-for-python-35""></a>
### Ubuntu/Linux 64-bit for Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp35-cp35m-linux_x86_64.whl
```

<a name=""osx-for-python-34-or-python-35""></a>
### OSX for Python 3.4 or Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0rc1-py3-none-any.whl
```

<a name=""other-linuxosx-varieties""></a>
### Other Linux/OSX varieties

You can pip install Tensorflow for most OSX/Linux setups including those that are making use of NVIDIA GPUs and CUDA using one the packages listed on this link:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation

If you are having trouble with pip installation, try looking here first: [Common Installation Problems](https://github.com/tensorflow/tensorflow/blob/37451589519d15207448dc2d9b1c0309de15d8db/tensorflow/g3doc/get_started/os_setup.md#common-problems).  Failing that, reach out to us on the forums, or else you may want to instead run a Docker instance as outlined in the Windows instructions above: [Setting up a Docker Container](#docker-toolbox).

<a name=""cudagpu-instructions""></a>
## CUDA/GPU instructions

Note that I have not provided instructions on getting setup w/ CUDA as it is beyond the scope of this course!  If you are interested in using GPU acceleration, I highly recommend using Ubuntu Linux and setting up a machine on [Nimbix](https://www.nimbix.net) or [Amazon EC2](https://aws.amazon.com/ec2/
) using the instructions here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#optional-install-cuda-gpus-on-linux.  If you're using Nimbix, you can skip the install process as there is already a machine pre-installed w/ Tensorflow.  Similarly, for Amazon EC2, there are many existing ""images"" of machines that have Tensorflow already installed.


<a name=""testing-it""></a>
## Testing it

To confirm it worked, try running:

```shell
$ python3 -c 'import tensorflow as tf; print(tf.__version__)'
```

You should see 1.0.0 printed, depending on which version you have installed.


<a name=""cudagpu-instructions-for-macos""></a>
## CUDA/GPU instructions for MacOS

When your Mac is equipped with a NVidia graphics card, you can use the GPU for computing with Tensorflow. GPU enabled computing is not supported for Macs with ATI or Intel graphics cards. 

If you have a previous cpu installation of tensorflow, uninstall it first:

```
$ pip3 uninstall tensorflow
```

Using homebrew, install the following packages:

```
$ brew install coreutils
$ brew tap caskroom/cask
$ brew cask install cuda
```
Once you have the CUDA Toolkit installed you will need to setup the required environment variables by adding the 
following to your `~/.profile`:
```
export CUDA_HOME=/usr/local/cuda
export DYLD_LIBRARY_PATH=""$DYLD_LIBRARY_PATH:$CUDA_HOME/lib""
export PATH=""$CUDA_HOME/bin:$PATH""
```
Tensorflow needs the library libcuda.1.dylib, so we have to create an additional symbolic link:
```
sudo ln -sf /usr/local/cuda/lib/libcuda.dylib /usr/local/cuda/lib/libcuda.1.dylib
```
Finally, you will also want to install the **CUDA Deep Neural Network** (cuDNN v5) library which currently requires an 
[_Accelerated Computing Developer Program_](https://developer.nvidia.com/cudnn) account. Once you have it downloaded 
locally, you can unzip and move the header and libraries to your local CUDA Toolkit folder:
```
$ sudo mv include/cudnn.h /Developer/NVIDIA/CUDA-8.0/include/
$ sudo mv lib/libcudnn* /Developer/NVIDIA/CUDA-8.0/lib
$ sudo ln -s /Developer/NVIDIA/CUDA-8.0/lib/libcudnn* /usr/local/cuda/lib/
```
Then, finally, install tensorflow with GPU support with:
```
$ pip3 install --ignore-installed --upgrade tensorflow-gpu
```

According to the instructions of the TensorFlow website, this should work. However, on MacOS 10.11 (El Capitan) and 
above, the environment variable `DYLD_LIBRARY_PATH` is ignored, resulting in an error in the interactive python console 
and JetBrains PyCharm IDE. The dynamic library `libcudart.8.0.dylib` fails to load. This
is due to a new protection meganism in MacOS 10.11 and higher. El Capitan ships with a new OS X feature: System 
Integrity Protection (SIP), also known as “rootless” mode. This reduces the attack surface for malware that relies on 
modifying system files by preventing any user, whether with system administrator (“root”) privileges or not from 
modifying a number of operating system directories and files.

**Warning:** The point of SIP is to prevent malware and other unwanted modifications into system files. Consider whether 
or not you want to dispense with this protection.
Follow these steps to disable SIP:

* Restart your Mac.
* Before OS X starts up, hold down Command-R and keep it held down until you see an Apple icon and a progress bar. Release. This boots you into Recovery.
* From the Utilities menu, select Terminal.
* At the prompt type exactly the following and then press Return: `csrutil disable`
* Terminal should display a message that SIP was disabled.
* From the  menu, select Restart.

You can re-enable SIP by following the above steps, but using `csrutil enable` instead.



<a name=""troubleshooting""></a>
## Troubleshooting

<a name=""importerror-no-module-named-tensorflow""></a>
### ImportError: No module named 'tensorflow'

You may have different versions of Python installed.  You can troubleshoot this by looking at the output of:

```shell
$ which python3
$ which pip3
$ python3 --version
$ pip3 --version
$ which python
$ which pip
$ python --version
$ pip --version
```

You may simply need to install tensorflow using `pip` instead of `pip3` and/or use `python` instead of `python3`, assuming they point to a version of python which is Python 3 or higher.

<a name=""attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C""></a>
### AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'

You could be running python inside a directory that contains the folder ""tensorflow"".  Try running python inside a different directory.


<a name=""gpu-related-issues""></a>
### GPU-related issues

If you encounter the following when trying to run a TensorFlow program:

```python
ImportError: libcudart.so.7.0: cannot open shared object file: No such file or directory
```

Make sure you followed the GPU installation [instructions](#optional-install-cuda-gpus-on-linux).
If you built from source, and you left the Cuda or cuDNN version empty, try specifying them
explicitly.

<a name=""protobuf-library-related-issues""></a>
### Protobuf library related issues

TensorFlow pip package depends on protobuf pip package version
3.0.0b2. Protobuf's pip package downloaded from [PyPI](https://pypi.python.org)
(when running `pip install protobuf`) is a Python only library, that has
Python implementations of proto serialization/deserialization which can be 10x-50x
slower than the C++ implementation. Protobuf also supports a binary extension
for the Python package that contains fast C++ based proto parsing. This
extension is not available in the standard Python only PIP package. We have
created a custom binary pip package for protobuf that contains the binary
extension. Follow these instructions to install the custom binary protobuf pip
package :

```bash
# Ubuntu/Linux 64-bit:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp27-none-linux_x86_64.whl

# Mac OS X:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp27-none-any.whl
```

and for Python 3 :

```bash
# Ubuntu/Linux 64-bit:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp34-none-linux_x86_64.whl

# Mac OS X:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp35-none-any.whl
```

Install the above package _after_ you have installed TensorFlow via pip, as the
standard `pip install tensorflow` would install the python only pip package. The
above pip package will over-write the existing protobuf package.
Note that the binary pip package already has support for protobuf larger than
64MB, that should fix errors such as these :

```bash
[libprotobuf ERROR google/protobuf/src/google/protobuf/io/coded_stream.cc:207] A
protocol message was rejected because it was too big (more than 67108864 bytes).
To increase the limit (or to disable these warnings), see
CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.

```

<a name=""cannot-import-name-descriptor""></a>
### Cannot import name 'descriptor'

```python
ImportError: Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/dist-packages/tensorflow/core/framework/graph_pb2.py"", line 6, in <module>
    from google.protobuf import descriptor as _descriptor
ImportError: cannot import name 'descriptor'
```

If you the above error when upgrading to a newer version of TensorFlow, try
uninstalling both TensorFlow and protobuf (if installed) and re-installing
TensorFlow (which will also install the correct protobuf dependency).

<a name=""cant-find-setuppy""></a>
### Can't find setup.py

If, during `pip install`, you encounter an error like:

```bash
...
IOError: [Errno 2] No such file or directory: '/tmp/pip-o6Tpui-build/setup.py'
```

Solution: upgrade your version of pip:

```bash
pip install --upgrade pip
```

This may require `sudo`, depending on how pip is installed.

<a name=""sslerror-sslverifyfailed""></a>
### SSLError: SSL_VERIFY_FAILED

If, during pip install from a URL, you encounter an error like:

```bash
...
SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed
```

Solution: Download the wheel manually via curl or wget, and pip install locally.

<a name=""jupyter-notebook-kernel-is-always-busy-windows""></a>
### Jupyter Notebook Kernel is always busy (Windows)
If your have installed Docker Toolbox on Windows but your jupyter notebook doesn't run properly (the notebook kernel keeps busy all the time when you open any file) then you might need to try different browsers (One guy tried Edge and it solved his problem after struggling for long time on Chrome/Firefox).

And you should also enable port forwarding by:

1. Open VirtualBox
2. Click on your default docker image.
3. Click Settings.
4. Click Network.
5. Click forward port.
6. Add a new rule named jupyter with host ip=127.0.0.1 and host/guess port=8888
7. Now you should be able to browse your notebook app via localhost:8888 (instead of having to browse 192.168.xx.xx:8888)

<a name=""something-else""></a>
### Something Else!

Post on the [Forums](https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow-i/forums?sort=recent_activity) or check on the Tensorflow [README](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation)
","This repository contains lecture transcripts and homework assignments as Jupyter
Notebooks for the first of three Kadenze Academy courses. It also contains a
python package containing all the code developed during all three courses. The
courses are: Creative Applications of Deep Learning with TensorFlow I, II and
III."
166,QuickCheck for Swift,"[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)
[![Build Status](https://travis-ci.org/typelift/SwiftCheck.svg?branch=master)](https://travis-ci.org/typelift/SwiftCheck)
[![Gitter chat](https://badges.gitter.im/DPVN/chat.png)](https://gitter.im/typelift/general?utm_source=share-link&utm_medium=link&utm_campaign=share-link)
 
 
SwiftCheck
==========

QuickCheck for Swift.

For those already familiar with the Haskell library, check out the source.  For
everybody else, see the [Tutorial Playground](Tutorial.playground) for a
beginner-level introduction to the major concepts and use-cases of this library.
 
Introduction
============

SwiftCheck is a testing library that automatically generates random data for 
testing of program properties.  A property is a particular facet of an algorithm
or data structure that must be invariant under a given set of input data,
basically an `XCTAssert` on steroids.  Where before all we could do was define
methods prefixed by `test` and assert, SwiftCheck allows program properties and 
tests to be treated like *data*.

To define a program property the `forAll` quantifier is used with a type
signature like `(A, B, C, ... Z) -> Testable where A : Arbitrary, B : Arbitrary ...
Z : Arbitrary`.  SwiftCheck implements the `Arbitrary` protocol for most Swift 
Standard Library types and implements the `Testable` protocol for `Bool` and 
several other related types.  For example, if we wanted to test the property 
that every Integer is equal to itself, we would express it as such:

```swift
func testAll() {
    // 'property' notation allows us to name our tests.  This becomes important
    // when they fail and SwiftCheck reports it in the console.
    property(""Integer Equality is Reflexive"") <- forAll { (i : Int) in
        return i == i
    }
}
```

For a less contrived example, here is a program property that tests whether
Array identity holds under double reversal:

```swift
property(""The reverse of the reverse of an array is that array"") <- forAll { (xs : [Int]) in
    // This property is using a number of SwiftCheck's more interesting 
    // features.  `^&&^` is the conjunction operator for properties that turns
    // both properties into a larger property that only holds when both sub-properties
    // hold.  `<?>` is the labelling operator allowing us to name each sub-part
    // in output generated by SwiftCheck.  For example, this property reports:
    //
    // *** Passed 100 tests
    // (100% , Right identity, Left identity)
    return
        (xs.reversed().reversed() == xs) <?> ""Left identity""
        ^&&^
        (xs == xs.reversed().reversed()) <?> ""Right identity""
}
```

Because SwiftCheck doesn't require tests to return `Bool`, just `Testable`, we
can produce tests for complex properties with ease:

```swift
property(""Shrunken lists of integers always contain [] or [0]"") <- forAll { (l : [Int]) in
    // Here we use the Implication Operator `==>` to define a precondition for
    // this test.  If the precondition fails the test is discarded.  If it holds
    // the test proceeds.
    return (!l.isEmpty && l != [0]) ==> {
        let ls = self.shrinkArbitrary(l)
        return (ls.filter({ $0 == [] || $0 == [0] }).count >= 1)
    }
}
```

Properties can even depend on other properties:

```swift
property(""Gen.one(of:) multiple generators picks only given generators"") <- forAll { (n1 : Int, n2 : Int) in
    let g1 = Gen.pure(n1)
    let g2 = Gen.pure(n2)
    // Here we give `forAll` an explicit generator.  Before SwiftCheck was using
    // the types of variables involved in the property to create an implicit
    // Generator behind the scenes.
    return forAll(Gen.one(of: [g1, g2])) { $0 == n1 || $0 == n2 }
}
```

All you have to figure out is what to test.  SwiftCheck will handle the rest.  

Shrinking
=========
 
What makes QuickCheck unique is the notion of *shrinking* test cases.  When fuzz
testing with arbitrary data, rather than simply halt on a failing test, SwiftCheck
will begin whittling the data that causes the test to fail down to a minimal
counterexample.

For example, the following function uses the Sieve of Eratosthenes to generate
a list of primes less than some n:

```swift
/// The Sieve of Eratosthenes:
///
/// To find all the prime numbers less than or equal to a given integer n:
///    - let l = [2...n]
///    - let p = 2
///    - for i in [(2 * p) through n by p] {
///          mark l[i]
///      }
///    - Remaining indices of unmarked numbers are primes
func sieve(_ n : Int) -> [Int] {
    if n <= 1 {
        return []
    }

    var marked : [Bool] = (0...n).map { _ in false }
    marked[0] = true
    marked[1] = true

    for p in 2..<n {
        for i in stride(from: 2 * p, to: n, by: p) {
            marked[i] = true
        }
    }

    var primes : [Int] = []
    for (t, i) in zip(marked, 0...n) {
        if !t {
            primes.append(i)
        }
    }
    return primes
}

/// Short and sweet check if a number is prime by enumerating from 2...⌈√(x)⌉ and checking 
/// for a nonzero modulus.
func isPrime(n : Int) -> Bool {
    if n == 0 || n == 1 {
        return false
    } else if n == 2 {
        return true
    }
    
    let max = Int(ceil(sqrt(Double(n))))
    for i in 2...max {
        if n % i == 0 {
            return false
        }
    }
    return true
}

```

We would like to test whether our sieve works properly, so we run it through 
SwiftCheck with the following property:

```swift
import SwiftCheck

property(""All Prime"") <- forAll { (n : Int) in
    return sieve(n).filter(isPrime) == sieve(n)
}
```

Which produces the following in our testing log:

```
Test Case '-[SwiftCheckTests.PrimeSpec testAll]' started.
*** Failed! Falsifiable (after 10 tests):
4
```

Indicating that our sieve has failed on the input number 4.  A quick look back
at the comments describing the sieve reveals the mistake immediately:

```diff
- for i in stride(from: 2 * p, to: n, by: p) {
+ for i in stride(from: 2 * p, through: n, by: p) {
```

Running SwiftCheck again reports a successful sieve of all 100 random cases:

```
*** Passed 100 tests
```

Custom Types
============

SwiftCheck implements random generation for most of the types in the Swift 
Standard Library. Any custom types that wish to take part in testing must 
conform to the included `Arbitrary` protocol.  For the majority of types, this
means providing a custom means of generating random data and shrinking down to 
an empty array. 

For example:

```swift
import SwiftCheck
 
public struct ArbitraryFoo {
    let x : Int
    let y : Int

    public var description : String {
        return ""Arbitrary Foo!""
    }
}

extension ArbitraryFoo : Arbitrary {
    public static var arbitrary : Gen<ArbitraryFoo> {
        return Gen<(Int, Int)>.zip(Int.arbitrary, Int.arbitrary).map(ArbitraryFoo.init)
    }
}

class SimpleSpec : XCTestCase {
    func testAll() {
        property(""ArbitraryFoo Properties are Reflexive"") <- forAll { (i : ArbitraryFoo) in
            return i.x == i.x && i.y == i.y
        }
    }
}
```

There's also a `Gen.compose` method which allows you to procedurally compose 
values from multiple generators to construct instances of a type:

``` swift
public static var arbitrary : Gen<MyClass> {
    return Gen<MyClass>.compose { c in
        return MyClass(
            // Use the nullary method to get an `arbitrary` value.
            a: c.generate(),

            // or pass a custom generator
            b: c.generate(Bool.suchThat { $0 == false }),

            // .. and so on, for as many values and types as you need.
            c: c.generate(), ...
        )
    }
}
```

`Gen.compose` can also be used with types that can only be customized with setters:

``` swift
public struct ArbitraryMutableFoo : Arbitrary {
    var a: Int8
    var b: Int16
    
    public init() {
        a = 0
        b = 0
    }
    
    public static var arbitrary: Gen<ArbitraryMutableFoo> {
        return Gen.compose { c in
            var foo = ArbitraryMutableFoo()
            foo.a = c.generate()
            foo.b = c.generate()
            return foo
        }
    }
}
```

For everything else, SwiftCheck defines a number of combinators to make working
with custom generators as simple as possible:

```swift
let onlyEven = Int.arbitrary.suchThat { $0 % 2 == 0 }

let vowels = Gen.fromElements(of: [ ""A"", ""E"", ""I"", ""O"", ""U"" ])

let randomHexValue = Gen<UInt>.choose((0, 15))

let uppers = Gen<Character>.fromElements(in: ""A""...""Z"")
let lowers = Gen<Character>.fromElements(in: ""a""...""z"")
let numbers = Gen<Character>.fromElements(in: ""0""...""9"")
 
/// This generator will generate `.none` 1/4 of the time and an arbitrary
/// `.some` 3/4 of the time
let weightedOptionals = Gen<Int?>.frequency([
    (1, Gen<Int?>.pure(nil)),
    (3, Int.arbitrary.map(Optional.some))
])
```
 
For instances of many complex or ""real world"" generators, see 
[`ComplexSpec.swift`](Tests/SwiftCheckTests/ComplexSpec.swift).

System Requirements
===================

SwiftCheck supports OS X 10.9+ and iOS 7.0+.

Setup
=====

SwiftCheck can be included one of two ways:
 
**Using The Swift Package Manager**

- Add SwiftCheck to your `Package.swift` file's dependencies section:

```swift
.package(url: ""https://github.com/typelift/SwiftCheck.git"", from: ""0.8.1"")
```
 
**Using Carthage**

- Add SwiftCheck to your Cartfile
- Run `carthage update`
- Drag the relevant copy of SwiftCheck into your project.
- Expand the Link Binary With Libraries phase
- Click the + and add SwiftCheck
- Click the + at the top left corner to add a Copy Files build phase
- Set the directory to `Frameworks`
- Click the + and add SwiftCheck

**Using CocoaPods**

- Add [our Pod](https://cocoapods.org/pods/SwiftCheck) to your podfile.
- Run `$ pod install` in your project directory.
 
**Framework**

- Drag SwiftCheck.xcodeproj into your project tree
  as a subproject
- Under your project's Build Phases, expand Target Dependencies
- Click the + and add SwiftCheck
- Expand the Link Binary With Libraries phase
- Click the + and add SwiftCheck
- Click the + at the top left corner to add a Copy Files build phase
- Set the directory to Frameworks
- Click the + and add SwiftCheck

License
=======

SwiftCheck is released under the MIT license.
","SwiftCheck is a testing library that automatically generates random data for
testing of program properties. A property is a particular facet of an algorithm
or data structure that must be invariant under a given set of input data.
SwiftCheck implements the `Arbitrary` protocol for most Swift types and the
`Testable' protocol for other types."
92,Multi-platform transparent client-side encryption of your files in the cloud,"[![cryptomator](cryptomator.png)](https://cryptomator.org/)

[![Build](https://github.com/cryptomator/cryptomator/workflows/Build/badge.svg)](https://github.com/cryptomator/cryptomator/actions?query=workflow%3ABuild)
[![Known Vulnerabilities](https://snyk.io/test/github/cryptomator/cryptomator/badge.svg)](https://snyk.io/test/github/cryptomator/cryptomator)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=cryptomator_cryptomator&metric=alert_status)](https://sonarcloud.io/dashboard?id=cryptomator_cryptomator)
[![Twitter](https://img.shields.io/badge/twitter-@Cryptomator-blue.svg?style=flat)](http://twitter.com/Cryptomator)
[![Crowdin](https://badges.crowdin.net/cryptomator/localized.svg)](https://translate.cryptomator.org/)
[![Latest Release](https://img.shields.io/github/release/cryptomator/cryptomator.svg)](https://github.com/cryptomator/cryptomator/releases/latest)
[![Community](https://img.shields.io/badge/help-Community-orange.svg)](https://community.cryptomator.org)

## Supporting Cryptomator

Cryptomator is provided free of charge as an open-source project despite the high development effort and is therefore dependent on donations. If you are also interested in further development, we offer you the opportunity to support us:

- [One-time or recurring donation via Cryptomator's website.](https://cryptomator.org/#donate)
- [Become a sponsor via Cryptomator's sponsors website.](https://cryptomator.org/sponsors/)

### Gold Sponsors

<table>
  <tbody>
    <tr>
      <td><a href=""https://www.gee-whiz.de/""><img src=""https://cryptomator.org/img/sponsors/geewhiz.svg"" alt=""gee-whiz"" height=""80""></a></td>
      <td><a href=""https://proxy-hub.com/""><img src=""https://cryptomator.org/img/sponsors/proxyhub.svg"" alt=""Proxy-Hub"" height=""80""></a></td>
    </tr>
  </tbody>
</table>

### Silver Sponsors

<table>
  <tbody>
    <tr>
      <td><a href=""https://mowcapital.com/""><img src=""https://cryptomator.org/img/sponsors/mowcapital.svg"" alt=""Mow Capital"" height=""40""></a></td>
      <td><a href=""https://www.easeus.com/""><img src=""https://cryptomator.org/img/sponsors/easeus.png"" alt=""EaseUS"" height=""40""></a></td>
    </tr>
  </tbody>
</table>

### Special Shoutout

Continuous integration hosting for ARM64 builds is provided by [MacStadium](https://www.macstadium.com/opensource).

<a href=""https://www.macstadium.com/opensource""><img src=""https://uploads-ssl.webflow.com/5ac3c046c82724970fc60918/5c019d917bba312af7553b49_MacStadium-developerlogo.png"" alt=""MacStadium"" height=""100""></a>

---

## Introduction

Cryptomator offers multi-platform transparent client-side encryption of your files in the cloud.

Download native binaries of Cryptomator on [cryptomator.org](https://cryptomator.org/) or clone and build Cryptomator using Maven (instructions below).

## Features

- Works with Dropbox, Google Drive, OneDrive, MEGA, pCloud, ownCloud, Nextcloud and any other cloud storage service which synchronizes with a local directory
- Open Source means: No backdoors, control is better than trust
- Client-side: No accounts, no data shared with any online service
- Totally transparent: Just work on the virtual drive as if it were a USB flash drive
- AES encryption with 256-bit key length
- File names get encrypted
- Folder structure gets obfuscated
- Use as many vaults in your Dropbox as you want, each having individual passwords
- Four thousand commits for the security of your data!! :tada:

### Privacy

- 256-bit keys (unlimited strength policy bundled with native binaries)
- Scrypt key derivation
- Cryptographically secure random numbers for salts, IVs and the masterkey of course
- Sensitive data is wiped from the heap asap
- Lightweight: [Complexity kills security](https://www.schneier.com/essays/archives/1999/11/a_plea_for_simplicit.html)

### Consistency

- HMAC over file contents to recognize changed ciphertext before decryption
- I/O operations are transactional and atomic, if the filesystems support it
- Each file contains all information needed for decryption (except for the key of course), no common metadata means no [SPOF](http://en.wikipedia.org/wiki/Single_point_of_failure)

### Security Architecture

For more information on the security details visit [cryptomator.org](https://docs.cryptomator.org/en/latest/security/architecture/).

## Building

### Dependencies

* JDK 19 (e.g. temurin)
* Maven 3

### Run Maven

```
mvn clean install
# or mvn clean install -Pwin
# or mvn clean install -Pmac
# or mvn clean install -Plinux
```

This will build all the jars and bundle them together with their OS-specific dependencies under `target`. This can now be used to build native packages.

## License

This project is dual-licensed under the GPLv3 for FOSS projects as well as a commercial license for independent software vendors and resellers. If you want to modify this application under different conditions, feel free to contact our support team.
","Cryptomator offers multi-platform transparent client-side encryption of your
files in the cloud. Works with Dropbox, MEGA, pCloud, ownCloud, Nextcloud and
any other cloud storage service which synchronizes with a local directory.
256-bit keys (unlimited strength policy bundled with native binaries) Scrypt
random numbers for salts, IVs and the masterkey of course. Sensitive data is
wiped from the heap asap. Four thousand commits for the security of your data."
1344,":electron: Build cross platform desktop apps with ASP.NET Core (Razor Pages, MVC, Blazor).","[![Electron.NET Logo](https://github.com/ElectronNET/Electron.NET/blob/master/assets/images/electron.net-logo.png)](https://github.com/ElectronNET/Electron.NET)

[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net)


AppVeyor (Win/Linux): [![Build status](https://ci.appveyor.com/api/projects/status/q95h4xt14papwi05/branch/master?svg=true)](https://ci.appveyor.com/project/robertmuehsig/electron-net/branch/master)

* Checkout AppVeyor Artifacts: Contains the WebApp sample built for Windows & Linux!

Travis-CI (Win/macOS/Linux): [![Build Status](https://travis-ci.org/ElectronNET/Electron.NET.svg?branch=master)](https://travis-ci.org/ElectronNET/Electron.NET)

Build cross platform desktop apps with .NET 5 and ASP.NET NET Core (Razor Pages, MVC), Blazor. 

Electron.NET is a __wrapper__ around a ""normal"" Electron application with an embedded ASP.NET Core application. Via our Electron.NET IPC bridge we can invoke Electron APIs from .NET.

The CLI extensions hosts our toolset to build and start Electron.NET applications.

## Wait - you host a .NET Core app inside Electron? Why?

Well... there are lots of different approaches how to get a X-plat desktop app running. We thought it would be nice for .NET devs to use the ASP.NET Core environment and just embed it inside a pretty robust X-plat enviroment called Electron. Porting Electron to .NET is not a goal of this project, at least we don't have any clue how to do it. We just combine ASP.NET Core & Electron. 

## 📦 NuGet:

* API [![NuGet](https://img.shields.io/nuget/v/ElectronNET.API.svg?style=flat-square)](https://www.nuget.org/packages/ElectronNET.API/) 
* CLI [![NuGet](https://img.shields.io/nuget/v/ElectronNET.CLI.svg?style=flat-square)](https://www.nuget.org/packages/ElectronNET.CLI/)

## 🛠 Requirements to run:

The current Electron.NET CLI builds Windows/macOS/Linux binaries. Our API multi-targets .NET 5 & .NET6, so our minimum base OS is the same as [.NET 5](https://github.com/dotnet/core/blob/master/release-notes/5.0/5.0-supported-os.md) or [.NET 6](https://github.com/dotnet/core/blob/main/release-notes/6.0/supported-os.md).

Also you should have installed:

* npm [contained in nodejs](https://nodejs.org)

## 💬 Community

[![Gitter](https://badges.gitter.im/ElectronNET/community.svg)](https://gitter.im/ElectronNET/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)

## 🙏 Donate

We do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://donorbox.org/electron-net). Donation can be used to increase some issue priority. Thank you!

[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net)

## 👩‍🏫 Usage

To activate and communicate with the ""native"" (sort of native...) Electron API include the [ElectronNET.API NuGet package](https://www.nuget.org/packages/ElectronNET.API/) in your ASP.NET Core app.

````
PM> Install-Package ElectronNET.API
````
### Program.cs

You start Electron.NET up with an `UseElectron` WebHostBuilder-Extension. 

```csharp
public static IHostBuilder CreateHostBuilder(string[] args) =>
    Host.CreateDefaultBuilder(args)
        .ConfigureWebHostDefaults(webBuilder =>
        {
            webBuilder.UseElectron(args);
            webBuilder.UseStartup<Startup>();
        });
```

### Startup.cs

Open the Electron Window in the Startup.cs file: 

```csharp
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    ...

    // Open the Electron-Window here
    Task.Run(async () => await Electron.WindowManager.CreateWindowAsync());
}
```

## 🚀 Start the Application

To start the application make sure you have installed the ""[ElectronNET.CLI](https://www.nuget.org/packages/ElectronNET.CLI/)"" packages as global tool:

```
dotnet tool install ElectronNET.CLI -g
```

At the first time, you need an Electron.NET project initialization. Type the following command in your ASP.NET Core folder:

```
electronize init
```

* Now a electronnet.manifest.json should appear in your ASP.NET Core project
* Now run the following:

```
electronize start
```

### Note
> Only the first electronize start is slow. The next will go on faster.

## 🔭 Develop Electron.NET apps using a file watcher

The file watcher is included with version 8.31.1 of Electron.NET. For example, a file change can trigger compilation, test execution, or deployment. The Electron.NET window will automatically refresh and new code changes will be visible more quickly. The following Electron.NET CLI command is required:

```
electronize start /watch
```

### Note
> Only the first electronize start is slow. The next will go on faster.

## 🐞 Debug

Start your Electron.NET application with the Electron.NET CLI command. In Visual Studio attach to your running application instance. Go in the __Debug__ Menu and click on __Attach to Process...__. Sort by your projectname on the right and select it on the list.


## 📔 Usage of the Electron-API

A complete documentation will follow. Until then take a look in the source code of the sample application:  
[Electron.NET API Demos](https://github.com/ElectronNET/electron.net-api-demos)  

In this YouTube video, we show you how you can create a new project, use the Electron.NET API, debug a application and build an executable desktop app for Windows: [Electron.NET - Getting Started](https://www.youtube.com/watch?v=nuM6AojRFHk)  
  
## ⛏ Build

Here you need the Electron.NET CLI as well. Type the following command in your ASP.NET Core folder:

```
electronize build /target win
```

There are additional platforms available:

```
electronize build /target win
electronize build /target osx
electronize build /target osx-arm64
electronize build /target linux
```

Those four ""default"" targets will produce packages for those platforms.

Note that the `osx-arm64` build requires that the project target `net6.0`. `osx-arm64` is for Apple Silicon Macs.

For certain NuGet packages or certain scenarios you may want to build a pure x86 application. To support those things you can define the desired [.NET Core runtime](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog), the [electron platform](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#platform) and [electron architecture](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#arch) like this:

```
electronize build /target custom ""win7-x86;win32"" /electron-arch ia32 
```

### Additional DotNet Publish Flags

For certain scenarios additional `dotnet publish` arguments may be required. To add additional publish flags use the `/dotnet-publish` flag and add any additional publish flags after. For example if you want to skip the default nuget restore you can do that like this:

```
electronize build /target osx /dotnet-publish --no-restore
```

#### Self-Contained 
> `--self-contained` is enabled by default, to disable use `--no-self-contained` or `--self-contained false`

#### Ignored Flags
> `-r|--runtime`, `-o|--output`, `-c|--configuration`, `--interactive` &amp; `-h|--help` are ignored by design


The end result should be an electron app under your __/bin/desktop__ folder.

### Note
> macOS builds can't be created on Windows machines because they require symlinks that aren't supported on Windows (per [this Electron issue](https://github.com/electron-userland/electron-packager/issues/71)). macOS builds can be produced on either Linux or macOS machines.

## 👨‍💻 Authors

* **Gregor Biswanger** - (Microsoft MVP, Intel Black Belt and Intel Software Innovator) is a freelance lecturer, consultant, trainer, author and speaker. He is a consultant for large and medium-sized companies, organizations and agencies for software architecture, web- and cross-platform development. You can find Gregor often on the road attending or speaking at international conferences. - [Cross-Platform-Blog](http://www.cross-platform-blog.com) - Twitter [@BFreakout](https://www.twitter.com/BFreakout)  
* **Robert Muehsig** - Software Developer - from Dresden, Germany, now living & working in Switzerland. Microsoft MVP & Web Geek. - [codeinside Blog](https://blog.codeinside.eu) - Twitter [@robert0muehsig](https://twitter.com/robert0muehsig)  
  
See also the list of [contributors](https://github.com/ElectronNET/Electron.NET/graphs/contributors) who participated in this project.
  
  
## 🙋‍♀️🙋‍♂ Contributing
Feel free to submit a pull request if you find any bugs (to see a list of active issues, visit the [Issues section](https://github.com/ElectronNET/Electron.NET/issues).
Please make sure all commits are properly documented.

## 🧪 Working with this Repo

This video provides an introduction to development for Electron.NET: [Electron.NET - Contributing Getting Started](https://youtu.be/Po-saU_Z6Ws)  
  
This repository consists of the main parts (API & CLI) and it's own ""playground"" ASP.NET Core application. Both main parts produce local NuGet packages, that are versioned with 99.0.0. The first thing you will need is to run one of the buildAll scripts (.cmd for Windows, the other for macOS/Linux).

If you look for pure __[demo projects](https://github.com/ElectronNET)__ checkout the other repositories. 

The problem working with this repository is, that NuGet has a pretty aggressive cache, see [here for further information](https://github.com/ElectronNET/Electron.NET/wiki).

## 🙏 Donate

We do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://donorbox.org/electron-net). Donation can be used to increase some issue priority. Thank you!

[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net)

## 🎉 License
MIT-licensed

**Enjoy!**

## 📝 Important notes

### ElectronNET.API & ElectronNET.CLI Version 13.5.1

Make sure you also have the new Electron.NET API & CLI 13.5.1 version.

```
dotnet tool update ElectronNET.CLI -g
```

 This now uses [electron-builder](https://www.electron.build/configuration/configuration) and the necessary configuration to build is made in the **electron.manifest.json** file (on the build part). In addition, own Electron.NET configurations are stored (on the root). Please make sure that your **electron.manifest.json** file has the following new structure:

```
{
  ""executable"": ""{{executable}}"",
  ""splashscreen"": {
    ""imageFile"": """"
  },
  ""name"": ""{{executable}}"",
  ""author"": """",
  ""singleInstance"": false,
  ""build"": {
    ""appId"": ""com.{{executable}}.app"",
    ""productName"": ""{{executable}}"",
    ""copyright"": ""Copyright © 2020"",
    ""buildVersion"": ""1.0.0"",
    ""compression"": ""maximum"",
    ""directories"": {
      ""output"": ""../../../bin/Desktop""
    },
    ""extraResources"": [
      {
        ""from"": ""./bin"",
        ""to"": ""bin"",
        ""filter"": [""**/*""]
      }
    ],
    ""files"": [
      {
        ""from"": ""./ElectronHostHook/node_modules"",
        ""to"": ""ElectronHostHook/node_modules"",
        ""filter"": [""**/*""]
      },
      ""**/*""
    ]
  }
}
```

### ElectronNET.CLI Version 0.0.9

In the Version 0.0.9 the CLI was not a global tool and needed to be registred like this in the .csproj:

```
<ItemGroup>
     <DotNetCliToolReference Include=""ElectronNET.CLI"" Version=""0.0.9"" />
</ItemGroup>
```

After you edited the .csproj-file, you need to restore your NuGet packages within your Project. Run the following command in your ASP.NET Core folder:

```
dotnet restore
```


If you still use this version you will need to invoke it like this:

```
electronize ...
```

### Node Integration
Electron.NET requires Node Integration to be enabled for IPC to function.  If you are not using the IPC functionality you can disable Node Integration like so:

```csharp
WebPreferences wp = new WebPreferences();
wp.NodeIntegration = false;
BrowserWindowOptions browserWindowOptions = new BrowserWindowOptions
{
    WebPreferences = wp
}

```

### Dependency Injection

ElectronNET.Api can be added to your DI container within the Startup class. All of the modules available in Electron will be added as Singletons.

```csharp
using ElectronNET.API;

public void ConfigureServices(IServiceCollection services)
{
    services.AddElectron()
}
```
","Electron.NET combines ASP.NET Core with an embedded Electron application. Via
our Electron IPC bridge we can invoke Electron APIs from.NET. Our API multi-
targets.NET 5 &.NET6, so our minimum base OS is the same as 5.0 or 6."
3157,"12 weeks, 26 lessons, 52 quizzes, classic Machine Learning for all","[![GitHub license](https://img.shields.io/github/license/microsoft/ML-For-Beginners.svg)](https://github.com/microsoft/ML-For-Beginners/blob/master/LICENSE)
[![GitHub contributors](https://img.shields.io/github/contributors/microsoft/ML-For-Beginners.svg)](https://GitHub.com/microsoft/ML-For-Beginners/graphs/contributors/)
[![GitHub issues](https://img.shields.io/github/issues/microsoft/ML-For-Beginners.svg)](https://GitHub.com/microsoft/ML-For-Beginners/issues/)
[![GitHub pull-requests](https://img.shields.io/github/issues-pr/microsoft/ML-For-Beginners.svg)](https://GitHub.com/microsoft/ML-For-Beginners/pulls/)
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)

[![GitHub watchers](https://img.shields.io/github/watchers/microsoft/ML-For-Beginners.svg?style=social&label=Watch)](https://GitHub.com/microsoft/ML-For-Beginners/watchers/)
[![GitHub forks](https://img.shields.io/github/forks/microsoft/ML-For-Beginners.svg?style=social&label=Fork)](https://GitHub.com/microsoft/ML-For-Beginners/network/)
[![GitHub stars](https://img.shields.io/github/stars/microsoft/ML-For-Beginners.svg?style=social&label=Star)](https://GitHub.com/microsoft/ML-For-Beginners/stargazers/)

# Machine Learning for Beginners - A Curriculum

> 🌍 Travel around the world as we explore Machine Learning by means of world cultures 🌍

Azure Cloud Advocates at Microsoft are pleased to offer a 12-week, 26-lesson curriculum all about **Machine Learning**. In this curriculum, you will learn about what is sometimes called **classic machine learning**, using primarily Scikit-learn as a library and avoiding deep learning, which is covered in our forthcoming 'AI for Beginners' curriculum. Pair these lessons with our ['Data Science for Beginners' curriculum](https://aka.ms/datascience-beginners), as well!

Travel with us around the world as we apply these classic techniques to data from many areas of the world. Each lesson includes pre- and post-lesson quizzes, written instructions to complete the lesson, a solution, an assignment, and more. Our project-based pedagogy allows you to learn while building, a proven way for new skills to 'stick'.

**✍️ Hearty thanks to our authors** Jen Looper, Stephen Howell, Francesca Lazzeri, Tomomi Imura, Cassie Breviu, Dmitry Soshnikov, Chris Noring, Anirban Mukherjee, Ornella Altunyan, and Amy Boyd

**🎨 Thanks as well to our illustrators** Tomomi Imura, Dasani Madipalli, and Jen Looper

**🙏 Special thanks 🙏 to our Microsoft Student Ambassador authors, reviewers, and content contributors**, notably Rishit Dagli, Muhammad Sakib Khan Inan, Rohan Raj, Alexandru Petrescu, Abhishek Jaiswal, Nawrin Tabassum, Ioan Samuila, and Snigdha Agarwal

**🤩 Extra gratitude to Microsoft Student Ambassador Eric Wanjau for our R lessons!**

---

# Getting Started

**[Students](https://aka.ms/student-page)**, to use this curriculum, fork the entire repo to your own GitHub account and complete the exercises on your own or with a group:

- Start with a pre-lecture quiz.
- Read the lecture and complete the activities, pausing and reflecting at each knowledge check.
- Try to create the projects by comprehending the lessons rather than running the solution code; however that code is available in the `/solution` folders in each project-oriented lesson.
- Take the post-lecture quiz.
- Complete the challenge.
- Complete the assignment.
- After completing a lesson group, visit the [Discussion Board](https://github.com/microsoft/ML-For-Beginners/discussions) and ""learn out loud"" by filling out the appropriate PAT rubric. A 'PAT' is a Progress Assessment Tool that is a rubric you fill out to further your learning. You can also react to other PATs so we can learn together.

> For further study, we recommend following these [Microsoft Learn](https://docs.microsoft.com/en-us/users/jenlooper-2911/collections/k7o7tg1gp306q4?WT.mc_id=academic-77952-leestott) modules and learning paths.

**Teachers**, we have [included some suggestions](for-teachers.md) on how to use this curriculum.

---

## Meet the Team

[![Promo video](ml.gif)](https://youtu.be/Tj1XWrDSYJU ""Promo video"")

**Gif by** [Mohit Jaisal](https://linkedin.com/in/mohitjaisal)

> 🎥 Click the image above for a video about the project and the folks who created it!

---

## Pedagogy

We have chosen two pedagogical tenets while building this curriculum: ensuring that it is hands-on **project-based** and that it includes **frequent quizzes**. In addition, this curriculum has a common **theme** to give it cohesion.

By ensuring that the content aligns with projects, the process is made more engaging for students and retention of concepts will be augmented. In addition, a low-stakes quiz before a class sets the intention of the student towards learning a topic, while a second quiz after class ensures further retention. This curriculum was designed to be flexible and fun and can be taken in whole or in part. The projects start small and become increasingly complex by the end of the 12-week cycle. This curriculum also includes a postscript on real-world applications of ML, which can be used as extra credit or as a basis for discussion.

> Find our [Code of Conduct](CODE_OF_CONDUCT.md), [Contributing](CONTRIBUTING.md), and [Translation](TRANSLATIONS.md) guidelines. We welcome your constructive feedback!

## Each lesson includes:

- optional sketchnote
- optional supplemental video
- pre-lecture warmup quiz
- written lesson
- for project-based lessons, step-by-step guides on how to build the project
- knowledge checks
- a challenge
- supplemental reading
- assignment
- post-lecture quiz

> **A note about languages**: These lessons are primarily written in Python, but many are also available in R. To complete an R lesson, go to the `/solution` folder and look for R lessons. They include an .rmd extension that represents an **R Markdown** file which can be simply defined as an embedding of `code chunks` (of R or other languages) and a `YAML header` (that guides how to format outputs such as PDF) in a `Markdown document`. As such, it serves as an exemplary authoring framework for data science since it allows you to combine your code, its output, and your thoughts by allowing you to write them down in Markdown. Moreover, R Markdown documents can be rendered to output formats such as PDF, HTML, or Word.

> **A note about quizzes**: All quizzes are contained [in this app](https://gray-sand-07a10f403.1.azurestaticapps.net/), for 52 total quizzes of three questions each. They are linked from within the lessons but the quiz app can be run locally; follow the instruction in the `quiz-app` folder.

| Lesson Number |                             Topic                              |                   Lesson Grouping                   | Learning Objectives                                                                                                             |                                                              Linked Lesson                                                               |                        Author                        |
| :-----------: | :------------------------------------------------------------: | :-------------------------------------------------: | ------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------: |
|      01       |                Introduction to machine learning                |      [Introduction](1-Introduction/README.md)       | Learn the basic concepts behind machine learning                                                                                |                                             [Lesson](1-Introduction/1-intro-to-ML/README.md)                                             |                       Muhammad                       |
|      02       |                The History of machine learning                 |      [Introduction](1-Introduction/README.md)       | Learn the history underlying this field                                                                                         |                                            [Lesson](1-Introduction/2-history-of-ML/README.md)                                            |                     Jen and Amy                      |
|      03       |                 Fairness and machine learning                  |      [Introduction](1-Introduction/README.md)       | What are the important philosophical issues around fairness that students should consider when building and applying ML models? |                                              [Lesson](1-Introduction/3-fairness/README.md)                                               |                        Tomomi                        |
|      04       |                Techniques for machine learning                 |      [Introduction](1-Introduction/README.md)       | What techniques do ML researchers use to build ML models?                                                                       |                                          [Lesson](1-Introduction/4-techniques-of-ML/README.md)                                           |                    Chris and Jen                     |
|      05       |                   Introduction to regression                   |        [Regression](2-Regression/README.md)         | Get started with Python and Scikit-learn for regression models                                                                  |         <ul><li>[Python](2-Regression/1-Tools/README.md)</li><li>[R](2-Regression/1-Tools/solution/R/lesson_1-R.ipynb)</li></ul>         |      <ul><li>Jen</li><li>Eric Wanjau</li></ul>       |
|      06       |                North American pumpkin prices 🎃                |        [Regression](2-Regression/README.md)         | Visualize and clean data in preparation for ML                                                                                  |          <ul><li>[Python](2-Regression/2-Data/README.md)</li><li>[R](2-Regression/2-Data/solution/R/lesson_2-R.ipynb)</li></ul>          |      <ul><li>Jen</li><li>Eric Wanjau</li></ul>       |
|      07       |                North American pumpkin prices 🎃                |        [Regression](2-Regression/README.md)         | Build linear and polynomial regression models                                                                                   |        <ul><li>[Python](2-Regression/3-Linear/README.md)</li><li>[R](2-Regression/3-Linear/solution/R/lesson_3-R.ipynb)</li></ul>        |      <ul><li>Jen and Dmitry</li><li>Eric Wanjau</li></ul>       |
|      08       |                North American pumpkin prices 🎃                |        [Regression](2-Regression/README.md)         | Build a logistic regression model                                                                                               |     <ul><li>[Python](2-Regression/4-Logistic/README.md) </li><li>[R](2-Regression/4-Logistic/solution/R/lesson_4-R.ipynb)</li></ul>      |      <ul><li>Jen</li><li>Eric Wanjau</li></ul>       |
|      09       |                          A Web App 🔌                          |           [Web App](3-Web-App/README.md)            | Build a web app to use your trained model                                                                                       |                                                 [Python](3-Web-App/1-Web-App/README.md)                                                  |                         Jen                          |
|      10       |                 Introduction to classification                 |    [Classification](4-Classification/README.md)     | Clean, prep, and visualize your data; introduction to classification                                                            | <ul><li> [Python](4-Classification/1-Introduction/README.md) </li><li>[R](4-Classification/1-Introduction/solution/R/lesson_10-R.ipynb)  | <ul><li>Jen and Cassie</li><li>Eric Wanjau</li></ul> |
|      11       |             Delicious Asian and Indian cuisines 🍜             |    [Classification](4-Classification/README.md)     | Introduction to classifiers                                                                                                     | <ul><li> [Python](4-Classification/2-Classifiers-1/README.md)</li><li>[R](4-Classification/2-Classifiers-1/solution/R/lesson_11-R.ipynb) | <ul><li>Jen and Cassie</li><li>Eric Wanjau</li></ul> |
|      12       |             Delicious Asian and Indian cuisines 🍜             |    [Classification](4-Classification/README.md)     | More classifiers                                                                                                                | <ul><li> [Python](4-Classification/3-Classifiers-2/README.md)</li><li>[R](4-Classification/3-Classifiers-2/solution/R/lesson_12-R.ipynb) | <ul><li>Jen and Cassie</li><li>Eric Wanjau</li></ul> |
|      13       |             Delicious Asian and Indian cuisines 🍜             |    [Classification](4-Classification/README.md)     | Build a recommender web app using your model                                                                                    |                                              [Python](4-Classification/4-Applied/README.md)                                              |                         Jen                          |
|      14       |                   Introduction to clustering                   |        [Clustering](5-Clustering/README.md)         | Clean, prep, and visualize your data; Introduction to clustering                                                                |         <ul><li> [Python](5-Clustering/1-Visualize/README.md)</li><li>[R](5-Clustering/1-Visualize/solution/R/lesson_14-R.ipynb)         |      <ul><li>Jen</li><li>Eric Wanjau</li></ul>       |
|      15       |              Exploring Nigerian Musical Tastes 🎧              |        [Clustering](5-Clustering/README.md)         | Explore the K-Means clustering method                                                                                           |           <ul><li> [Python](5-Clustering/2-K-Means/README.md)</li><li>[R](5-Clustering/2-K-Means/solution/R/lesson_15-R.ipynb)           |      <ul><li>Jen</li><li>Eric Wanjau</li></ul>       |
|      16       |        Introduction to natural language processing ☕️         |   [Natural language processing](6-NLP/README.md)    | Learn the basics about NLP by building a simple bot                                                                             |                                             [Python](6-NLP/1-Introduction-to-NLP/README.md)                                              |                       Stephen                        |
|      17       |                      Common NLP Tasks ☕️                      |   [Natural language processing](6-NLP/README.md)    | Deepen your NLP knowledge by understanding common tasks required when dealing with language structures                          |                                                    [Python](6-NLP/2-Tasks/README.md)                                                     |                       Stephen                        |
|      18       |             Translation and sentiment analysis ♥️              |   [Natural language processing](6-NLP/README.md)    | Translation and sentiment analysis with Jane Austen                                                                             |                                            [Python](6-NLP/3-Translation-Sentiment/README.md)                                             |                       Stephen                        |
|      19       |                  Romantic hotels of Europe ♥️                  |   [Natural language processing](6-NLP/README.md)    | Sentiment analysis with hotel reviews 1                                                                                         |                                               [Python](6-NLP/4-Hotel-Reviews-1/README.md)                                                |                       Stephen                        |
|      20       |                  Romantic hotels of Europe ♥️                  |   [Natural language processing](6-NLP/README.md)    | Sentiment analysis with hotel reviews 2                                                                                         |                                               [Python](6-NLP/5-Hotel-Reviews-2/README.md)                                                |                       Stephen                        |
|      21       |            Introduction to time series forecasting             |        [Time series](7-TimeSeries/README.md)        | Introduction to time series forecasting                                                                                         |                                             [Python](7-TimeSeries/1-Introduction/README.md)                                              |                      Francesca                       |
|      22       | ⚡️ World Power Usage ⚡️ - time series forecasting with ARIMA |        [Time series](7-TimeSeries/README.md)        | Time series forecasting with ARIMA                                                                                              |                                                 [Python](7-TimeSeries/2-ARIMA/README.md)                                                 |                      Francesca                       |
|      23       |  ⚡️ World Power Usage ⚡️ - time series forecasting with SVR  |        [Time series](7-TimeSeries/README.md)        | Time series forecasting with Support Vector Regressor                                                                           |                                                  [Python](7-TimeSeries/3-SVR/README.md)                                                  |                       Anirban                        |
|      24       |             Introduction to reinforcement learning             | [Reinforcement learning](8-Reinforcement/README.md) | Introduction to reinforcement learning with Q-Learning                                                                          |                                             [Python](8-Reinforcement/1-QLearning/README.md)                                              |                        Dmitry                        |
|      25       |                 Help Peter avoid the wolf! 🐺                  | [Reinforcement learning](8-Reinforcement/README.md) | Reinforcement learning Gym                                                                                                      |                                                [Python](8-Reinforcement/2-Gym/README.md)                                                 |                        Dmitry                        |
|  Postscript   |            Real-World ML scenarios and applications            |      [ML in the Wild](9-Real-World/README.md)       | Interesting and revealing real-world applications of classical ML                                                               |                                             [Lesson](9-Real-World/1-Applications/README.md)                                              |                         Team                         |

## Offline access

You can run this documentation offline by using [Docsify](https://docsify.js.org/#/). Fork this repo, [install Docsify](https://docsify.js.org/#/quickstart) on your local machine, and then in the root folder of this repo, type `docsify serve`. The website will be served on port 3000 on your localhost: `localhost:3000`.

## PDFs

Find a pdf of the curriculum with links [here](https://microsoft.github.io/ML-For-Beginners/pdf/readme.pdf).

## Help Wanted!

Would you like to contribute a translation? Please read our [translation guidelines](TRANSLATIONS.md) and add a templated issue to manage the workload [here](https://github.com/microsoft/ML-For-Beginners/issues).

## Other Curricula

Our team produces other curricula! Check out:

- [Web Dev for Beginners](https://aka.ms/webdev-beginners)
- [IoT for Beginners](https://aka.ms/iot-beginners)
- [Data Science for Beginners](https://aka.ms/datascience-beginners)
- [AI for Beginners](https://aka.ms/ai-beginners)
","Machine Learning for Beginners is a 12-week, 26-lesson curriculum all about
**Machine Learning** In this curriculum, you will learn about what is sometimes
called **classic machine learning, using primarily Scikit-learn as a library and
avoiding deep learning. Each lesson includes pre- and post-lessons quizzes,
written instructions to complete the lesson, a solution, an assignment and more."
2895,Ever® Demand™ - Open-Source Commerce Platform for On-Demand Economy and Digital Marketplaces,"[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/ever-co/ever-demand)
[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ever)
[![Gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/ever-co/ever?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
[![Get help on Codementor](https://cdn.codementor.io/badges/get_help_github.svg)](https://www.codementor.io/evereq?utm_source=github&utm_medium=button&utm_term=evereq&utm_campaign=github)

# Open-Source Commerce Platform for On-Demand Economy and Digital Marketplaces

[Ever® Demand™](https://ever.co) is an Open-Source, Real-Time, Reactive, **On-Demand** Commerce Platform built with [TypeScript](http://www.typescriptlang.org).

You are welcome to check more information about the platform at our official website - **<https://ever.co>**.

![overview](https://docs.ever.co/docs/assets/overview_small.png)

## Demos

**Demos are not available at the moment as we are moving to Kubernetes and showdown old demo server!**

<!---

-   [Admin Website](http://demo.ever.co:4200), use admin user email: `admin@ever.co`, password: `admin`
-   [Shopping Mobile App](http://demo.ever.co:4201)
-   [Merchant Ionic Tablet App](http://demo.ever.co:4202)
-   [Carrier Mobile App](http://demo.ever.co:4203)
-   [Shopping Website](http://demo.ever.co:3000)

-->

## Features

-   Modern & Open Platform for **On-Demand Economy** and **Digital Marketplaces**
-   Supports Single-Store and Multi-Store / Multi-Vendor / Peer-to-Peer Marketplaces
-   Everything Reactive, Real-Time and Blazing Fast!
-   Headless Commerce framework, which allows different implementations of store-fronts, Admin UIs and client apps. It exposes rich GraphQL, REST and WS APIs.
-   Mobile ordering App for customers to make On-Demand orders (Hybrid / PWA, iOS and Android using Ionic / Ionic Native)
-   Carrier (Driver) Mobile App for deliveries by carriers, drivers or service providers (iOS and Android using Ionic / Ionic Native)
-   Customizing Shopping e-commerce Website for customers to make in-browser On-Demand purchases of food, goods or services
-   Merchant Tablet App for Stores/Merchants/Warehouses to manage & track orders, organize deliveries, etc.
-   Admin Website used to manage all platform features and settings in the single Web-based interface
-   Multi-language and culture settings across Platform (i18N)
-   Products Catalogs (global and per Merchant) with Multiple Product Images
-   Inventory/Stock Management and Real-time Order Management/Processing across the Platform
-   Deliveries/Shipping management and processing across Platform (shipping with real-time location tracking for On-Demand orders)
-   Real-Time discounts, promotions and products/services availability updates
-   Customers registration, Guest Checkouts, Invitations (optional)
-   Gateway and Payment Processing (currently supported Payments Gateway - [Stripe](https://stripe.com))
-   Plugins / Extensions / Custom Fields (WIP)

## Planned Features

-   Tax Calculations
-   Third-party Shipping providers integrations
-   Users Roles / Permissions across Platform
-   Large products catalogs with products variants, facets and full-text search

You can also track feature requests from the community in the [separate repo](https://github.com/ever-co/feature-requests/issues).

### Disclaimer

_A word of caution_: We are in α (alpha), i.e. Ever® Platform™ is very much under development (work in progress, WIP).  
Expect _lots_ of changes and some :bug: and please be nice! :stuck_out_tongue_winking_eye:

## Technology Stack and Requirements

-   [TypeScript](https://www.typescriptlang.org) language
-   [NodeJs](https://nodejs.org) / [NestJs](https://github.com/nestjs/nest)
-   [Ionic](https://ionicframework.com) (version 5) for Shopping Mobile App, Carrier Mobile App and Merchant Tablet App
-   Shopping Website developed with [Angular](https://angular.io) (version 9.1) using [Angular Starter](https://github.com/gdi2290/angular-starter)
-   Admin Website developed with [Angular](https://angular.io) (version 9.1) using [ngx-admin](https://github.com/akveo/ngx-admin)
-   Headless Commerce framework (Backend APIs/Server) developed using [Nest](https://github.com/nestjs/nest) with heavy use of our own Pyro module. Supports GraphQL, REST and WS Real-Time APIs (WebSockets using [Socket.io](https://socket.io) library)
-   [RxJS](http://reactivex.io/rxjs) library used heavy in every part of the Platform
-   [InversifyJS](http://inversify.io) used for Inversion Control / Dependency Injection in most parts of the Platform. On the Backend/API we also use DI provided by [Nest](https://github.com/nestjs/nest)
-   [MongoDB](https://www.mongodb.com) Database used with [Mongoose](https://mongoosejs.com) ORM (supported MongoDB version >= 3.2; we recommend version >=4)
-   We have ongoing effort (WIP) to add support for other databases using [TypeORM](https://github.com/typeorm/typeorm) and [Prisma](https://github.com/prisma/prisma). Following additional DBs will be fully supported: MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server and Oracle.
-   For production, we integrate and recommend to use [PM2](https://github.com/Unitech/pm2)

#### See also README.md and CREDITS.md files in relevant folders for lists of libraries and software included in the Platform, information about licenses and other details.

## Documentation

Please refer to our official [Platform Documentation](https://docs.ever.co) and to our [Wiki](https://github.com/ever-co/ever-demand/wiki) (WIP).

For a quick overview of each project in the Platform (Server, Admin, Shops, etc.), you can search for README.md file in the root of the projects folders. For example, see [./backend/api/README.md](backend/api/README.md) for Server (Backend) related overview.

## Getting Started

We follow [Gitflow Workflow](https://nvie.com/posts/a-successful-git-branching-model), so the [`develop` branch](https://github.com/ever-co/ever-demand/tree/develop) may be in an unstable or even broken state during development. Please use [releases](https://github.com/ever-co/ever/releases) or [`master` branch](https://github.com/ever-co/ever-demand/tree/master) instead of the `develop` branch in order to get more stable code.

### Clone Repo

Clone the Ever Platform Git repo:

```
git clone https://github.com/ever-co/ever-demand.git
```

**IMPORTANT NOTE:**

-   if you want to use develop branch (unstable, but latest development) clone using `--branch develop` (our default branch).
-   if you want to use release branch (more stable) clone using `--branch master`.

### Yarn

Currently, we are using `Yarn` (instead of `npm`), so make sure you have latest Yarn version installed before running Ever Platform:

```
npm install -g yarn@latest
```

### Quick installation

After git repo cloned, just run following command to install/bootstrap all dependencies:

```
yarn bootstrap
```

Above command install required packages in all Platform projects using Lerna.

Note: if above command fails for any reason, you can try to install required packages manually by running `yarn` inside every sub-folder of `packages` folder with 'package.json' file

### Build

You can build all projects in Ever Platform using single command below:

```
yarn build:all
```

Note: the parallel build available using `yarn build` command

### Lerna (manual installation)

We are using [Lerna](https://github.com/lerna/lerna) for mono-repo management.
You need to run the following command from the working folder where you cloned Ever git repo, which install Lerna together with other packages:

```
yarn
```

You may instead install Lerna globally:

```
npm install lerna@latest -g
```

Now, after Lerna installed (locally or globally), you need to Bootstrap all dependencies manually:

```
yarn lerna bootstrap
```

The command above install all required packages for every sub-project of the Ever Platform.

Note: if above command fails for any reason, you can try to install required packages manually by running `yarn` inside every sub-folder with 'package.json' file.

After Lerna bootstrap everything you need to run build for all projects as described above in the ""Build"" section.

### MongoDB

Ever platform configured to use MongoDB by default and assume you have MongoDB service running and accepting connections on the default `localhost:27017`. Please see relevant section in our [documentation](https://github.com/ever-co/ever-demand/wiki/MongoDB).

### Platform Configuration

See relevant section in our [documentation](https://github.com/ever-co/ever-demand/wiki/Ever-Platform-Configuration).

### Run Platform Projects

After you build everything (`yarn build:all`, described above), each project from Ever Platform could be started by single command from this list:

-   Run API server `yarn run:server`
-   Run Admin Website `yarn run:admin` and open http://localhost:4200
-   Run Shopping Mobile App `yarn run:shopmobile` and open http://localhost:4201
-   Run Merchant Ionic Tablet App `yarn run:merchant` and open http://localhost:4202
-   Run Carrier Mobile app `yarn run:carrier` and open http://localhost:4203
-   Run Shopping Website `yarn run:shopweb` and open http://localhost:3000

Note 1: it is important to build shared / common platform modules (`yarn build:common` or `yarn build:all`) before running the Platform Core (API) or Apps

Note 2: during development you can run server with `yarn run:server:dev` to enable watch on TS files changes

Note 3: on the first run, API Server (Backend) creates MongoDB local database `ever_development` with the following (default) Admin user

-   email: `admin@ever.co`
-   password: `admin`

You can use credentials above to login into Platform Admin App.

Note 3: in order to be able to run every project, you need to make sure everything builds, see section ""Build"" above.

## Metrics

According to [cloc](https://github.com/AlDanial/cloc) project, Ever Platform today has more than 120K lines of TypeScript, GraphQL, HTML / CSS and other code files. You can get more details in the relevant section of our [documentation](https://github.com/ever-co/ever-demand/wiki/Metrics).

## Contribute

-   Please give us :star: on Github, it **helps**!
-   You are more than welcome to submit feature requests in the [separate repo](https://github.com/ever-co/feature-requests/issues)
-   Pull requests are always welcome! Please base pull requests against the _develop_ branch and follow the [contributing guide](.github/CONTRIBUTING.md).

## Contributors

View full list of our [contributors](https://github.com/ever-co/ever-demand/graphs/contributors).

## Contact Us

-   [Ever.co Website Contact Us page](https://ever.co/contacts)
-   [Discord Chat](https://discord.gg/msqRJ4w)
-   [Slack Community](https://join.slack.com/t/everplatform/shared_invite/enQtNzc2NzI1OTgwMjQwLTBkODI3OTU2ZDI1YTQwNWE3OGExYWUwYjE5NThkMjRiYjA0NmFiNzZhYWUzNWViNWI4Nzg2YTc3MzY2MjY0YzU)
-   [Spectrum Community](https://spectrum.chat/ever)
-   [Gitter Chat](https://gitter.im/ever-co/ever)
-   [CodeMentor](https://www.codementor.io/evereq)
-   [Telegram](https://t.me/everplatform)
-   For business inquiries: <mailto:ever@ever.co>
-   Please report security vulnerabilities to <mailto:security@ever.co>
-   [Ever Platform @ Twitter](https://twitter.com/everplatform)
-   [Ever Platform @ Facebook](https://www.facebook.com/everplatform)

## Security

Ever Platform follows good security practices, but 100% security cannot be guaranteed in any software!  
Ever Platform is provided AS IS without any warranty. Use at your own risk!  
See more details in the [LICENSE.md](LICENSE.md).

In a production setup, all client-side to server-side (backend, APIs) communications should be encrypted using HTTPS/WSS/SSL (REST APIs, GraphQL endpoint, Socket.io WebSockets, etc.).

If you discover any issue regarding security, please disclose the information responsibly by sending an email to <mailto:security@ever.co> or on [![huntr](https://cdn.huntr.dev/huntr_security_badge_mono.svg)](https://huntr.dev) and not by creating a GitHub issue.

## License

We support the open-source community. If you're building awesome non-profit/open-source projects, we're happy to help and will provide (subject to [acceptance criteria](https://github.com/ever-co/ever-demand/wiki/Free-license-and-hosting-for-Non-profit-and-Open-Source-projects)) Ever Demand Enterprise edition license and free hosting option! Feel free to contact us at <mailto:ever@ever.co> to make a request. More details explained in our [Wiki](https://github.com/ever-co/ever-demand/wiki/Free-license-and-hosting-for-Non-profit-and-Open-Source-projects).

This software is available under following licenses:

-   [Ever® Demand™ Platform Community Edition](https://github.com/ever-co/ever-demand/blob/master/LICENSE.md#ever-platform-community-edition-license)
-   [Ever® Demand™ Platform Small Business](https://github.com/ever-co/ever-demand/blob/master/LICENSE.md#ever-platform-small-business-license)
-   [Ever® Demand™ Platform Enterprise](https://github.com/ever-co/ever-demand/blob/master/LICENSE.md#ever-platform-enterprise-license)

#### The default Ever® Demand™ Platform license, without a valid Ever® Demand™ Platform Enterprise or Ever® Demand™ Platform Small Business License agreement, is the Ever® Demand™ Platform Community Edition License.

#### Please see [LICENSE.md](LICENSE.md) for more information on licenses. You can also [compare our offering](https://ever.co/compare-ever/#compare).

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fever-co%2Fever.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fever-co%2Fever?ref=badge_large)

## Trademarks

**Ever**® is a registered trademark of [Ever Co. LTD](https://ever.co).  
**Ever® Demand™**, **Ever® Gauzy™** and **Ever® OpenSaaS™**  are all trademarks of [Ever Co. LTD](https://ever.co).

The trademarks may only be used with the written permission of Ever Co. LTD. and may not be used to promote or otherwise market competitive products or services.

All other brand and product names are trademarks, registered trademarks or service marks of their respective holders.

#### Copyright © 2016-present, Ever Co. LTD. All rights reserved.

![visitors](https://visitor-badge.laobi.icu/badge?page_id=ever-co.ever-platform)
[![huntr](https://cdn.huntr.dev/huntr_security_badge_mono.svg)](https://huntr.dev)
[![Circle CI](https://circleci.com/gh/ever-co/ever-demand.svg?style=svg)](https://circleci.com/gh/ever-co/ever-demand)
[![codecov](https://codecov.io/gh/ever-co/ever-demand/branch/master/graph/badge.svg)](https://codecov.io/gh/ever-co/ever-demand)
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e7b2b38660f44963989ac9d49ae76d4d)](https://www.codacy.com/app/Ever/ever?utm_source=github.com&utm_medium=referral&utm_content=ever-co/ever&utm_campaign=Badge_Grade)
[![DeepScan grade](https://deepscan.io/api/teams/3293/projects/4849/branches/38566/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=3293&pid=4849&bid=38566)
[![Known Vulnerabilities](https://snyk.io/test/github/ever-co/ever-demand/badge.svg)](https://snyk.io/test/github/ever-co/ever-demand)
[![Total alerts](https://img.shields.io/lgtm/alerts/g/ever-co/ever-demand.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ever-co/ever-demand/alerts/)
[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/ever-co/ever-demand.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ever-co/ever-demand/context:javascript)
[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fever-co%2Fever-demand.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fever-co%2Fever-demand?ref=badge_shield)
[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lernajs.io)
[![Crowdin](https://badges.crowdin.net/e/581540ddcc7c1cf42a50d0e0a6a3d7f7/localized.svg)](https://ever.crowdin.com/ever)

## P.S.
- If you are running any business or doing freelance, check our new project [Gauzy](https://github.com/ever-co/ever-gauzy) - Open Business Management Platform
- [We are Hiring: remote TypeScript / NestJS / Angular developers](https://github.com/ever-co/jobs#available-positions)
","Ever Demand is an Open-Source, Real-Time, Reactive, **On-Demand** Commerce
Platform built with TypeScript. It exposes rich GraphQL, REST and WS APIs. It is
a modern & Open Platform for On-Demand Economy and Digital Marketplaces."
3395,"Network recon framework. Build your own, self-hosted and fully-controlled alternatives to Shodan / ZoomEye / Censys and GreyNoise, run your Passive DNS service, collect and analyse network intelligence from your sensors, and much more!","[![Join the chat at Gitter](https://badges.gitter.im/ivre/ivre.svg)](https://gitter.im/ivre/ivre)
[![Follow on Twitter](https://img.shields.io/twitter/follow/IvreRocks.svg?logo=twitter)](https://twitter.com/IvreRocks)
![Follow on Mastodon](https://img.shields.io/mastodon/follow/109349639355238149?domain=https%3A%2F%2Finfosec.exchange&style=social)
[![GitHub stars](https://img.shields.io/github/stars/ivre/ivre?style=social)](https://github.com/ivre/ivre)
[![PyPI downloads](https://pepy.tech/badge/ivre)](https://pypi.org/project/ivre/)
[![Docker pulls](https://img.shields.io/docker/pulls/ivre/web)](https://hub.docker.com/u/ivre/)

[![MongoDB tests](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/?branch=master)
[![Elasticsearch tests](https://github.com/ivre/ivre/actions/workflows/elastic.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/elastic.yml/?branch=master)
[![PostgreSQL tests](https://github.com/ivre/ivre/actions/workflows/postgres.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/postgres.yml/?branch=master)
[![TinyDB tests](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/?branch=master)
[![SQLite tests](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/?branch=master)
[![Maxmind tests](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/?branch=master)
[![Linting tests](https://github.com/ivre/ivre/actions/workflows/linting.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/linting/mongodb.yml/?branch=master)
[![Documentation Status](https://readthedocs.org/projects/ivre/badge/?version=latest)](https://doc.ivre.rocks/en/latest/?badge=latest)

# IVRE #

<img align=""right"" src=""https://ivre.rocks/logo.png"" alt=""Logo""/> IVRE
(Instrument de veille sur les réseaux extérieurs) or DRUNK (Dynamic
Recon of UNKnown networks) is a network recon framework, including
tools for passive and active recon. IVRE can use data from:

- Passive tools:
  - [Zeek](https://zeek.org/)
  - [Argus](http://qosient.com/argus/)
  - [Nfdump](https://github.com/phaag/nfdump)
  - [p0f](https://lcamtuf.coredump.cx/p0f3/)
  - [airodump-ng](https://www.aircrack-ng.org/)
- Active tools:
  - [Nmap](https://nmap.org/)
  - [Masscan](https://github.com/robertdavidgraham/masscan)
  - [ZGrab2](https://github.com/zmap/zgrab2)
  - [ZDNS](https://github.com/zmap/zdns)
  - [Nuclei](https://nuclei.projectdiscovery.io/)
  - [httpx](https://github.com/projectdiscovery/httpx)
  - [dnsx](https://github.com/projectdiscovery/dnsx)
  - [tlsx](https://github.com/projectdiscovery/tlsx)
  - [Dismap](https://github.com/zhzyker/dismap/)

The advertising slogans are:

-   (in French): IVRE, il scanne Internet.
-   (in English): Know the networks, get DRUNK!
-   (in Latin): Nunc est bibendum.

The names IVRE and DRUNK have been chosen as a tribute to ""Le
Taullier"".

## Overview ##

You can have a look at the [project homepage](https://ivre.rocks/),
the
**[screenshot gallery](https://doc.ivre.rocks/en/latest/overview/screenshots.html)**,
and the
[quick video introduction](https://www.youtube.com/watch?v=GBu5QMq6ewY)
for an overview of the Web interface.

We have a **demonstration instance**, just [contact us](#contact) to
get an access.

A few
**[blog posts](http://pierre.droids-corp.org/blog/html/tags/ivre.html)**
have been written to show some features of IVRE.

## Documentation ##

[IVRE's documentation](https://doc.ivre.rocks/) is hosted by Read The
Docs, based on files from the [doc/](doc/) directory of the
repository.

On an IVRE web server, the `doc/*` files are available, rendered,
under `/doc/`.

On a system with IVRE installed, you can use a `--help` option with
most IVRE CLI tools, and `help(ivre.module)` with most IVRE Python
sub-modules.

## License ##

IVRE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

IVRE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
[along with IVRE](doc/license.rst). If not, see
[the gnu.org web site](http://www.gnu.org/licenses/).

## Support ##

Try `--help` for the CLI tools, `help()` under Python and the ""HELP""
button in the web interface.

Have a look at the
[FAQ](https://doc.ivre.rocks/en/latest/overview/faq.html)!

Feel free to contact the author and offer him a beer if you need help!

If you don't like beer, a good scotch or any other good alcoholic
beverage will do (it is the author's unalienable right to decide
whether a beverage is good or not).

## Contributing ##

Code contributions (pull-requests) are of course welcome!

The project needs scan results and capture files that can be provided
as examples. If you can contribute some samples, or if you want to
contribute some samples and would need some help to do so, or if you
can provide a server to run scans, please contact the author.

## Contact ##

For both support and contribution, the
[repository](https://github.com/ivre/ivre) on Github should be
used: feel free to create a new issue or a pull request!

You can also join the
[Gitter conversation](https://gitter.im/ivre/ivre) (that is the
preferred way to get in touch for questions), or use the e-mail `dev`
on the domain `ivre.rocks`.

## Talking about IVRE ##

### Research ###

If you are using IVRE in you research, please cite it as follows:

IVRE contributors. *IVRE, a network recon framework*.
[https://github.com/ivre/ivre](https://github.com/ivre/ivre),
2011-2022.

Here is the appropriate bibtex entry:

    @MISC{ivre,
        title = {{IVRE}, a network recon framework},
        author={IVRE contributors},
        url = {https://ivre.rocks/},
        howpublished = {\url{https://github.com/ivre/ivre/}},
        year = {2011--2022},
    }

### Technical documents & blog posts ###

You can mention ""IVRE, a network recon framework"", together with the
project homepage, [https://ivre.rocks/](https://ivre.rocks/) and/or
the repository,
[https://github.com/ivre/ivre](https://github.com/ivre/ivre).

On twitter, you can follow and/or mention
[@IvreRocks](https://twitter.com/IvreRocks).
","IvreRocks is a network recon recon recon- framework for passive and active data-
driven tools. You can use it to build, test, and share your data with others.
Use the badges to help you stay on top of the latest news."
1503,A data aware UI components library for building realtime maps,"[![Join the chat at https://gitter.im/appbaseio/reactivemaps](https://badges.gitter.im/appbaseio/reactivemaps.svg)](https://gitter.im/appbaseio/reactivemaps?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) ![Build Status Image](https://img.shields.io/badge/build-passing-brightgreen.svg) [![Code Climate](https://codeclimate.com/github/appbaseio/reactivemaps/badges/gpa.svg)](https://codeclimate.com/github/appbaseio/reactivemaps)

A React components library for building maps that update in realtime.

![](https://i.imgur.com/PqRqJDz.png)

## TOC

1. **[Reactive Maps: Intro](#1-reactive-maps-intro)**   
2. **[Features](#2-features)**  
3. **[Component Playground](#3-component-playground)**
4. **[Live Examples](#4-live-examples)**  
5. **[Installation](#5-installation)**
6. **[Getting Started](#6-getting-started)**  
7. **[Docs Manual](#7-docs-manual)**
8. **[Developing Locally](#8-developing-locally)**  
9. **[Acknowledgements](#9-acknowledgements)**

<br>

## 1. Reactive Maps: Intro

Reactivemaps is a React based components library for building realtime maps. It is built on top of the appbase.io realtime DB service and ships with 20+ components for Lists, Dropdowns, Numeric Range, Sliders, Data Search, Places Search, Distance Slider and Dropdowns, Calendars, Feeds and Maps.

The library is conceptually divided into two parts:  

1. Sensor components and
2. Actuator components.

Each sensor component is purpose built for applying a specific filter on the data. For example:

* A `SingleList` sensor component applies an exact match filter based on the selected item.
* A `RangeSlider` component applies a numeric range query based on the values selected from the UI.

One or more sensor components can be configured to create a combined query context to render the results via an actuator.

**ReactiveMaps** comes with two actuators: `ReactiveMap` and `ReactiveList`. The former displays the filtered data from individual sensor components on a map interface while latter displays the filtered data on a simple list interface.

## 2. Features

### Design

* The sensor / actuator design pattern allows creating complex UIs where any number of sensors can be chained together to reactively update an actuator (or even multiple actuators).
* The library handles the transformation of the UI interactions into database queries. You only need to include the components and associate each with a DB field.
* Built in live updates - Actuators can be set to update results even when the underlying data changes in the DB.
* Comes with a cleanly namespaced styles API that allows extending the existing component styles without hassle.
* Built in `light` and `dark` UI themes. 


### Ease of Use

* [Can be installed with NPM](https://opensource.appbase.io/reactive-manual/getting-started/maps-installation.html),
* Can be run in browser without including any NPM or bundlers (gulp, webpack, etc.), see a demo [here](https://github.com/appbaseio-apps/reactivemaps-starter-app#try-in-browser-without-npm),
* Works out of the box with Materialize CSS and comes with a polyfill CSS for Bootstrap. Compatibility for other frameworks can be added too.


## 3. Component Playground

Try the live component playground at [playground](https://opensource.appbase.io/reactivemaps/playground). Look out for the knobs section in the playground part of the stories to tweak each prop and see the udpates.


## 4. Live Examples

A set of examples inspired by real world apps built with the ReactiveMaps library.

- [examples/now](https://opensource.appbase.io/reactivemaps/examples/now) - A checkins based discovery experience.
- [examples/meetupblast](https://opensource.appbase.io/reactivemaps/examples/meetupblast/) - A live feed of meetup RSVPs displayed on a map.
- [examples/heatmap](https://opensource.appbase.io/reactivemaps/examples/heatmap/) - A hetmap example using polygons on a map.
- [examples/earthquake](https://opensource.appbase.io/reactivemaps/examples/earthquake/) - A historical visualization of earthquake data across the globe.
- [examples/transport](https://opensource.appbase.io/reactivemaps/examples/transport/) - A simulated transport example of buses in San Francisco.
- [examples/events](https://opensource.appbase.io/reactivemaps/examples/events/) - An example of the events exposed by the library.

You can check all of them on the [examples page](https://opensource.appbase.io/reactivemaps/examples/).

## 5. Installation

Follow the installation guide from the official docs [here](https://opensource.appbase.io/reactive-manual/getting-started/installation.html).

You can try out the library live without any installation via the [interactive tutorial](https://opensource.appbase.io/reactivemaps/onboarding/).

## 6. Getting Started

Follow the getting started guide to build a Hello Maps! app from the official docs [here](https://opensource.appbase.io/reactive-manual/getting-started/maps-start.html).


## 7. Docs Manual

The official docs for the library are at [https://opensource.appbase.io/reactive-manual/](https://opensource.appbase.io/reactive-manual/).

The components are divided into two sections:
* Generic UI components are at [https://opensource.appbase.io/reactive-manual/basic-components/](https://opensource.appbase.io/reactive-manual/basic-components/).
* Map based UI components are at [https://opensource.appbase.io/reactive-manual/map-components/](https://opensource.appbase.io/reactive-manual/map-components/).
* Each component's styles API is mentioned in a separate **CSS Styles API** section. See here for [SingleList](https://opensource.appbase.io/reactive-manual/basic-components/singlelist.html#styles).
* You can read more about the Styles API here - https://opensource.appbase.io/reactive-manual/advanced/StyleGuide.html.


## 8. Developing Locally

```
git clone https://github.com/appbaseio/reactivemaps
npm install
```

Start the development server on port `8012`.

```
npm start
```

Examples can be accessed at [https://localhost:8012/examples](https://localhost:8012/examples).  

You can also start the component playground on port `9009` with

```
npm run storybook
```

By adding the `manual` submodule, you can access the docs locally.

```
git submodule init
cd manual && git submodule update
```

Once added, the docs manual can be accessed at [http://localhost:8012/manual](http://localhost:8012/manual).

## 9. Acknowledgements

Cross-browser testing supported via [BrowserStack ![](https://i.imgur.com/yeYJhJJ.png)](https://browserstack.com).
","Reactive Maps is a React based components library for building realtime maps. It
is built on top of the appbase.io realtime DB service and ships with 20+
components for Lists, Dropdowns, Numeric Range, Sliders, Data Search, Places
Search, Distance Slider and Dropdowns."
2414,The Hypersistence Utils library (previously known as Hibernate Types) gives you Spring and Hibernate utilities that can help you get the most out of your data access layer.,"[![License](https://img.shields.io/github/license/vladmihalcea/hypersistence-utils.svg)](https://raw.githubusercontent.com/vladmihalcea/hypersistence-utils/master/LICENSE)
[![Maven Central](https://img.shields.io/maven-central/v/io.hypersistence/hypersistence-utils-parent.svg)](https://central.sonatype.dev/search?q=io.hypersistence)
[![JavaDoc](http://javadoc.io/badge/io.hypersistence/hypersistence-utils-hibernate-55.svg)](http://www.javadoc.io/doc/io.hypersistence/hypersistence-utils-hibernate-55)

### Migrating to version 3

The project name was changed from Hibernate Types to Hypersistence Utils because the scope
of the project is much broader now, offering Spring utilities as well.

For this reason, when migrating from the Hibernate Types 2.x to Hypersistence Utils 3.x,
you will need to follow these steps:

1. First, you will need to change your Maven or Gradle dependency as illustrated by the [Installation Guide](#installation-guide).
2. Second, you will need to change the package name from `com.vladmihalcea.hibernate` to `io.hypersistence.utils.hibernate`.
3. Third, you will need to change the package name from `com.vladmihalcea.spring` to `io.hypersistence.utils.spring`.

That's it!

### Introduction

The Hypersistence Utils project gives you general-purpose utilities for both Spring and Hibernate. 

The main advantage of this project is that it supports a broad range of Hibernate versions, spanning from **Hibernate ORM 6.1** to **6.0**, **5.6**, **5.5**, **5.4**, **5.3**, **5.2**, **5.1**, and Hibernate **5**.

### Installation Guide

Depending on the Hibernate version you are using, you need to add the following dependency:

#### Hibernate 6.1 and 6.0

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-60</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.6 and 5.5

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-55</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.4, 5.3 and 5.2

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-52</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.1 and 5.0

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-5</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Optional Maven Dependencies

The Hypersistence Utils project defines a list of optional dependencies that you will have to declare explicitly in your project in order to use them.

The reason why all these dependencies are optional, like Guava, Jackson, or PostgreSQL JDBC Driver, is because not all projects may need them.

More, the dependency version is extremely important because, from time to time, security issues may be discovered that get fixed in newer versions.

> So, relying on this library to supply you with the dependency versions is a very dangerous thing to do. 
> 
> For instance, there have been [65 security issues discovered in the Jackson Data Bind library](https://www.cvedetails.com/vulnerability-list/vendor_id-15866/product_id-42991/Fasterxml-Jackson-databind.html) this project is heavily relying on. 
> 
> To avoid risking security issues, you need to take the responsibility of constantly upgrading all the dependencies that you are using along with the Hypersistence Utils library.

##### JSON Optional Maven Dependencies

If you are using JSON Types, then you might be interested in setting the following dependencies based on your Hibernate version:

###### Hibernate 6.1 and 6.0

````xml
<dependency>
    <groupId>com.fasterxml.jackson.module</groupId>
    <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>
    <version>${jackson-module-jakarta-xmlbind-annotation}</version>
</dependency>
````

###### Hibernate 5.6, 5.5, 5.4, 5.3, and 5.2

````xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>${jackson-databind.version}</version>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.module</groupId>
    <artifactId>jackson-module-jaxb-annotations</artifactId>
    <version>${jackson-module-jaxb-annotation}</version>
</dependency>
````

###### Hibernate 5.1, 5.0

````xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>${jackson.version}</version>
</dependency>
````

##### Guava Optional Maven Dependency

If you are mapping a `Range` using Guava, then you have to provide the Guava dependency explicitly:

````xml
<dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>${guava.version}</version>
</dependency>
````

##### Java Money and Currency API Optional Maven Dependency

If you are mapping a `MonetaryAmount`, then you have to provide the Moneta dependency explicitly:

````xml
<dependency>
    <groupId>org.javamoney</groupId>
    <artifactId>moneta</artifactId>
    <version>${moneta.version}</version>
    <type>pom</type>
</dependency>
````

##### PostgreSQL Optional Maven Dependency

If you are mapping a PostgreSQL-specific column type (e.g., `inet`, `hstore`, `array`, `interval`), then you have to provide the PostgreSQL dependency explicitly:

````xml
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>${postgresql.version}</version>
</dependency>
````

### Features

#### JSON 

##### Generic JSON Type

The `JsonType` allows you to map JSON column types, no matter if you're using Oracle,
SQL Server, PostgreSQL or MySQL.

###### Hibernate 6

If you're using Hibernate 6, you can map any JSON column to `Map`, `List`, POJO, `String`, or `JsonNode` entity property:

````java
@Type(JsonType.class)
private Map<String, String> properties = new HashMap<>();
````

###### Hibernate 5

If you're using Hibernate 5, you can either provide the fully-qualified name of the Hibernate Type:

````
@Type(type = ""io.hypersistence.utils.hibernate.type.json.JsonType"")
````

Or, you can add the following mapping to your `package-info.java` class in the same package where your JPA entities are located:

````java
@TypeDef(
    name = ""json"", typeClass = JsonType.class
)
package io.hypersistence.optimizer;

import io.hypersistence.utils.hibernate.type.json.JsonType;
import org.hibernate.annotations.TypeDef;
````

And later, you can map the `Map`, `List`, POJO, `String`, or `JsonNode` entity properties to JSON columns like this:

````java
@Type(type = ""json"")
private Map<String, String> properties = new HashMap<>();
````

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

##### Best Practices

> When mapping a JSON column type to a `POJO`, `List<POJO>` or `Map<String, POJO>`, you need to make sure that the `POJO` type overrides the default `equals` and `hashCode` methods and implements them according to the JSON object content. 
> 
> Otherwise, the Hibernate dirty checking mechanism may trigger unexpected UPDATE statements. Check out the [#134 issue for more details](https://github.com/vladmihalcea/hypersistence-utils/issues/138).

##### Database-specific JSON types

###### Oracle

When using Oracle, you have several options:

- you can use the generic `JsonType` that can work with the `JSON`, `VARCHAR`, or `BLOB` column types,
as long as you hint the column type using the `columnDefinition` attribute of the JPA `@Column` annotation.
- you can use the `JsonStringType` to map a `VARCHAR2` column type storing JSON.
- you can use the `JsonBlobType` to map a `BLOB` column type storing JSON.

For more details, check out [this article](https://vladmihalcea.com/oracle-json-jpa-hibernate/).

###### SQL Server

When using SQL Server, you can use the generic `JsonType` or the `JsonStringType` to map an `NVARCHAR` column type storing JSON.

For more details, check out [this article](https://vladmihalcea.com/sql-server-json-hibernate/).

###### PostgreSQL

When using PostgreSQL, you can use the generic `JsonType` or the `JsonBinaryType` to map both `jsonb` and `json` column types.

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

###### MySQL

When using MySQL, you can use the generic `JsonType` or the `JsonStringType` to map the `json` column type.

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

##### JSON mapping examples

* [How to map a POJO to a JSON column using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/)
* [How to map a String JPA property to a JSON column using Hibernate](https://vladmihalcea.com/map-string-jpa-property-json-column-hibernate/)
* [How to map a Jackson `JsonNode` to a JSON column](https://vladmihalcea.com/how-to-store-schema-less-eav-entity-attribute-value-data-using-json-and-hibernate/)
* [How to map JSON collections using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-collections-using-jpa-and-hibernate/)
* [How to map a Java Map entity property as a JSON column with JPA and Hibernate](https://vladmihalcea.com/java-map-json-jpa-hibernate/)
* [How to map Java Records to JSON columns using Hibernate](https://vladmihalcea.com/java-records-json-hibernate/)
* [How to map polymorphic JSON objects with JPA and Hibernate](https://vladmihalcea.com/polymorphic-json-objects-hibernate/)
* [How to encrypt and decrypt JSON properties with JPA and Hibernate](https://vladmihalcea.com/encrypt-decrypt-json-jpa/)
* [Why you should use Hibernate Dynamic Update for JSON properties](https://vladmihalcea.com/hibernate-dynamic-update-json-properties/)
* [How to map Oracle JSON columns using JPA and Hibernate](https://vladmihalcea.com/oracle-json-jpa-hibernate/)
* [How to map SQL Server JSON columns using JPA and Hibernate](https://vladmihalcea.com/sql-server-json-hibernate/)
* [How to customize the Jackson ObjectMapper used by Hypersistence Utils](https://vladmihalcea.com/hibernate-types-customize-jackson-objectmapper/)
* [How to customize the JSON Serializer used by Hypersistence Utils](https://vladmihalcea.com/how-to-customize-the-json-serializer-used-by-hibernate-types/)
* [How to fix the Hibernate `No Dialect mapping for JDBC type: 1111` issue when mixing JSON types with native SQL queries](https://vladmihalcea.com/hibernate-no-dialect-mapping-for-jdbc-type/)
* [How to fix the `column is of type jsonb but expression is of type record` or `bytea` issue](https://vladmihalcea.com/jpa-query-setparameter-hibernate/)

#### ARRAY 

* [How to map a PostgreSQL ARRAY to a Java `List` with JPA and Hibernate](https://vladmihalcea.com/postgresql-array-java-list/)
* [How to map the PostgreSQL ARRAY to Java Arrays with JPA and Hibernate](https://vladmihalcea.com/how-to-map-java-and-sql-arrays-with-jpa-and-hibernate/)
* [Multidimensional array mapping with JPA and Hibernate](https://vladmihalcea.com/multidimensional-array-jpa-hibernate/)
* [How to map the HSQLDB ARRAY type with JPA and Hibernate](https://vladmihalcea.com/hibernate-hsqldb-array-type/)

#### PostgreSQL Types (e.g. ENUM, INET, HSTORE, RANGE)

* [Java Enum to PostgreSQL Enum Type](https://vladmihalcea.com/the-best-way-to-map-an-enum-type-with-jpa-and-hibernate/)
* [How to map the PostgreSQL Inet type with JPA and Hibernate](https://vladmihalcea.com/postgresql-inet-type-hibernate/)
* [How to map a PostgreSQL HStore entity property with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-hstore-jpa-entity-property-hibernate/)
* [How to map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate](https://vladmihalcea.com/map-postgresql-enum-array-jpa-entity-property-hibernate/)
* [How to map a PostgreSQL Range column type with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-range-column-type-jpa-hibernate/)
* [How to map a PostgreSQL Interval to a Java `Duration` with Hibernate](https://vladmihalcea.com/map-postgresql-interval-java-duration-hibernate/)

#### Generic Types

* [The best way to map `MonetaryAmount` with JPA and Hibernate](https://vladmihalcea.com/monetaryamount-jpa-hibernate/)
* [How to map `java.time.YearMonth` to DATE or INTEGER column](https://vladmihalcea.com/java-yearmonth-jpa-hibernate/)
* [How to map `java.time.Year` and `java.time.Month` with JPA and Hibernate](https://vladmihalcea.com/java-time-year-month-jpa-hibernate/)
* [`Character` to nullable CHAR column](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)
* [`ImmutableType` utility to simplify `UserType` implementations](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)

#### Utilities

##### Spring

* [The awesome BaseJpaRepository](https://vladmihalcea.com/basejparepository-hypersistence-utils/)
* [The best Spring Data JpaRepository](https://vladmihalcea.com/best-spring-data-jparepository/)
* [The Spring Data `findAll` Anti-Pattern](https://vladmihalcea.com/spring-data-findall-anti-pattern/)
* [The Spring `@Retry` annotation to automaticlaly retry on failure](https://vladmihalcea.com/optimistic-locking-retry-with-jpa/)

###### BaseJpaRepository

The `BaseJpaRepository` is a much better alternative to the default Spring Data `JpaRepository` because it does not provide a `findAll` method or a `save` method that makes no sense in JPA terminology.

To use the `BaseJpaRepository` utility, make sure that you provide the `repositoryBaseClass` attribute in the `@EnableJpaRepositories` configuration to reference the `BaseJpaRepositoryImpl` from the Hypersistence Utils project:

````java
@Configuration
@EnableJpaRepositories(
    value = ""your.repository.package"",
    repositoryBaseClass = BaseJpaRepositoryImpl.class
)
public class JpaConfiguration {
    ...
}
````

The `your.repository.package` is the Java package of your Spring repositories.

###### HibernateRepository

While the `BaseJpaRepository` is to be preferred, in case you need to use the default `JpaRepository`, then you can at least extend the `HibernateRepository` as well to deprecate the methods that may cause problems.

To use the `HibernateRepository`, make sure that you include the `io.hypersistence.utils.spring.repository` package in your `@EnableJpaRepositories` configuration:

````java
@Configuration
@EnableJpaRepositories(
    value = {
        ""io.hypersistence.utils.spring.repository"",
        ""your.repository.package"",
        ...
    }
)
public class JpaConfiguration {
    ...
}
````

The `your.repository.package` is the Java package of your Spring repositories.

##### Identifier Generators

* [`BatchSequenceGenerator` - Hibernate Batch Sequence Generator](https://vladmihalcea.com/hibernate-batch-sequence-generator/)

##### Naming Strategy

* [`CamelCaseToSnakeCaseNamingStrategy` - How to map camelCase properties to snake_case column names with Hibernate](https://vladmihalcea.com/map-camel-case-properties-snake-case-column-names-hibernate/)

##### DTO Projection and ResultTransformer

* [`ClassImportIntegrator` - How to write a compact DTO projection query with JPA](https://vladmihalcea.com/dto-projection-jpa-query/)
* [`ListResultTransformer` - The best way to use a Hibernate ResultTransformer](https://vladmihalcea.com/hibernate-resulttransformer/)
* [`MapResultTransformer` - How to return a Map result from a JPA or Hibernate query](https://vladmihalcea.com/jpa-query-map-result/)

##### SQL Statement Count Validator

* [`SQLStatementCountValidator` - How to detect the Hibernate N+1 query problem during testing](https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/)

### Requirements

* Java version supported by the Hibernate ORM version you are using.
* SLF4J
* Jackson Databind

### Issue management

If you have an issue, then there are two ways to address it.

#### Option 1: Providing your own fix

Since this project is open-source, you have the ability to fix any issue you bump into.
Therefore, when dealing with a problem, this is what you need to do:

1. Provide a replicating test case using the existing test cases as a template
2. Provide a fix proposal
3. Send a Pull Request with the fix proposal and the test case

#### Option 2: Paid support

If you don't have the time to provide a fix, then I can fix your issue via [consulting](https://vladmihalcea.com/consulting/). If you're in a hurry, this is going to be your best option.

### Are you struggling with application performance issues?

<a href=""https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://vladmihalcea.com/wp-content/uploads/2019/03/Hypersistence-Optimizer-300x250.jpg"" alt=""Hypersistence Optimizer"">
</a>

Imagine having a tool that can automatically detect if you are using JPA and Hibernate properly. No more performance issues, no more having to spend countless hours trying to figure out why your application is barely crawling.

Imagine discovering early during the development cycle that you are using suboptimal mappings and entity relationships or that you are missing performance-related settings. 

More, with Hypersistence Optimizer, you can detect all such issues during testing and make sure you don't deploy to production a change that will affect data access layer performance.

[Hypersistence Optimizer](https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) is the tool you've been long waiting for!

#### Training

If you are interested in on-site training, I can offer you my [High-Performance Java Persistence training](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes),
which can be adapted to one, two or three days of sessions. For more details, check out [my website](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### Consulting

If you want me to review your application and provide insight into how you can optimize it to run faster, 
then check out my [consulting page](https://vladmihalcea.com/consulting/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### High-Performance Java Persistence Video Courses

If you want the fastest way to learn how to speed up a Java database application, then you should definitely enroll in [my High-Performance Java Persistence video courses](https://vladmihalcea.com/courses/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### High-Performance Java Persistence Book

Or, if you prefer reading books, you are going to love my [High-Performance Java Persistence book](https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) as well.

<a href=""https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_h200.jpg"" alt=""High-Performance Java Persistence book"">
</a>

<a href=""https://vladmihalcea.com/courses?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_Video_Vertical_h200.jpg"" alt=""High-Performance Java Persistence video course"">
</a>

#### Contributing Guide

The project uses [Maven Toolchains](https://maven.apache.org/guides/mini/guide-using-toolchains.html) as different modules are compiled and tested using different Java versions. Hypersistence Utils 6 requires Java 17 while the other modules are compiled with either Java 1.8 or 1.6.

To see how to configure Maven Toolchains, check out [this article](https://vladmihalcea.com/maven-and-java-multi-version-modules/).

The project uses various database systems for integration testing, and you can configure the JDBC connection settings using the 
`DatasourceProvider` instances (e.g., `PostgreSQLDataSourceProvider`), and the project uses Testcontainers to bootstrap a Docker container
with the required Oracle, SQL Server, PostgreSQL, or MySQL instance on demand. 

> If you are a regular contributor, it's advisable to set up the required database locally or use the Docker Compose configuration provided in the `docker` folder,
> as bootstrapping the containers on demand is slower, and your tests are going to take longer to run.

If you want to fix an issue or add support for a new feature, please provide the associated integration test case that proves the improvement is working as expected.

","The Hypersistence Utils project gives you general-purpose utilities for both
Spring and Hibernate. The main advantage of this project is that it supports a
broad range of HiberNate versions. The dependency version is extremely important
because, from time to time, security issues may be discovered that get fixed in
newer versions. For instance, there have been [65 security issues discovered in
the Jackson Data Bind library]. To avoid risking security issues, you need to
take the responsibility of constantly upgrading all the dependencies that you
are using."
1278,"ActiveJ is an alternative Java platform built from the ground up. ActiveJ redefines core, web and high-load programming in Java, providing simplicity, maximum performance and scalability","[![Maven Central](https://img.shields.io/maven-central/v/io.activej/activej)](https://mvnrepository.com/artifact/io.activej)
[![GitHub](https://img.shields.io/github/license/activej/activej)](https://github.com/activej/activej/blob/master/LICENSE)

## Introduction

[ActiveJ](https://activej.io) is a modern Java platform built from the ground up.
It is designed to be self-sufficient (no third-party dependencies), simple, lightweight and provides competitive performance.
ActiveJ consists of a range of libraries, from dependency injection and high-performance
asynchronous I/O (inspired by Node.js), to application servers and big data solutions. You can use ActiveJ to build scalable
web applications, distributed systems and use it for high-load data processing.

## ActiveJ components

ActiveJ consists of several modules, which can be logically grouped into the following categories :

* **Async.io** - High-performance asynchronous IO with the efficient event loop, NIO, promises, streaming, and CSP.
  Alternative to Netty, RxJava, Akka, and others. ([Promise](https://activej.io/async-io/promise),
  [Eventloop](https://activej.io/async-io/eventloop), [Net](https://activej.io/async-io/net),
  [CSP](https://activej.io/async-io/csp), [Datastream](https://activej.io/async-io/datastream))
* **HTTP** - High-performance HTTP server and client with WebSocket support. It can be used as a simple web server or as an
  application server. Alternative to other conventional HTTP clients and servers. ([HTTP](https://activej.io/http))
* **ActiveJ Inject** - Lightweight library for dependency injection. Optimized for fast application start-up and
  performance at runtime. Supports annotation-based component wiring as well as reflection-free
  wiring. ([ActiveJ Inject](https://activej.io/inject))
* **Boot** - Production-ready tools for running and monitoring an ActiveJ application. Concurrent control of services lifecycle 
  based on their dependencies. Various service monitoring utilities with JMX and Zabbix support. ([Launcher](https://activej.io/boot/launcher),
  [Service Graph](https://activej.io/boot/servicegraph), [JMX](https://github.com/activej/activej/tree/master/boot-jmx),
  [Triggers](https://github.com/activej/activej/tree/master/boot-triggers))
* **Bytecode manipulation**
    * **ActiveJ Codegen** - Dynamic bytecode generator for classes and methods on top of [ObjectWeb ASM](https://asm.ow2.io/)
      library. Abstracts the complexity of direct bytecode manipulation and allows you to create custom classes on the fly
      using Lisp-like AST expressions. ([ActiveJ Codegen](https://activej.io/codegen))
    * **ActiveJ Serializer** - [Fast](https://github.com/activej/jvm-serializers) and space-efficient serializers created with bytecode engineering.
      Introduces schema-free approach for best performance. ([ActiveJ Serializer](https://activej.io/serializer))
    * **ActiveJ Specializer** - Innovative technology to improve class performance at runtime by automatically
      converting class instances into specialized static classes and class instance fields into baked-in static
      fields. Provides a wide variety of JVM optimizations for static classes that are impossible otherwise: dead code
      elimination, aggressive inlining of methods and static
      constants. ([ActiveJ Specializer](https://activej.io/specializer))
* **Cloud components**
    * **ActiveJ FS** - Asynchronous abstraction over the file system for building efficient, scalable local or remote file
      storages that support data redundancy, rebalancing, and resharding.
      ([ActiveJ FS](https://activej.io/fs))
    * **ActiveJ RPC** - High-performance binary client-server protocol. Allows building distributed, sharded, and
      fault-tolerant microservice applications. ([ActiveJ RPC](https://activej.io/rpc))
    * Various extra services:
      [ActiveJ CRDT](https://github.com/activej/activej/tree/master/extra/cloud-crdt),
      [Redis client](https://github.com/activej/activej/tree/master/extra/cloud-redis),
      [Memcache](https://github.com/activej/activej/tree/master/extra/cloud-memcache),
      [OLAP Cube](https://github.com/activej/activej/tree/master/extra/cloud-lsmt-cube),
      [Dataflow](https://github.com/activej/activej/tree/master/extra/cloud-dataflow)

## Quick start

Paste this snippet into your terminal...

```
mvn archetype:generate -DarchetypeGroupId=io.activej -DarchetypeArtifactId=archetype-http -DarchetypeVersion=5.5-rc1
```

... and open the project in your favorite IDE. Then build the application and run it. Open your browser
on [localhost:8080](http://localhost:8080)
to see the ""Hello World"" message.

#### Full-featured embedded web application server with Dependency Injection:

```java
public final class HttpHelloWorldExample extends HttpServerLauncher {
	@Provides
	AsyncServlet servlet() {
		return request -> HttpResponse.ok200().withPlainText(""Hello, World!"");
	}

	public static void main(String[] args) throws Exception {
		Launcher launcher = new HttpHelloWorldExample();
		launcher.launch(args);
	}
}
```

Some technical details about the example above:

- *The JAR file size is only 1.4 MB. By comparison, the minimum size of a Spring web application is about 17 MB*.
- *The cold start time is 0.65 sec.*
- *The [ActiveJ Inject](https://activej.io/inject) DI library used is 5.5 times faster than Guice and hundreds
  of times faster than Spring.*

To learn more about ActiveJ, please visit https://activej.io or follow our
5-minute [getting-started guide](https://activej.io/tutorials/getting-started).

Examples of using the ActiveJ platform and all ActiveJ libraries can be found
in the [`examples`](https://github.com/activej/activej/tree/master/examples) module.

**Release notes for ActiveJ can be found [here](https://activej.io/blog)**","ActiveJ is a modern Java platform built from the ground up. It is designed to be
self-sufficient (no third-party dependencies), simple, lightweight and provides
competitive performance. It consists of a range of libraries, from dependency
injection and high-performance asynchronous I/O (inspired by Node.js), to
application servers and big data solutions. You can use ActiveJ to build
scalable web applications, distributed systems and use it for high-load data
processing. It can be used as a simple web server or as an application server."
2017,A type-safe typescript SQL query builder,"[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://stand-with-ukraine.pp.ua)

[![Discord](https://img.shields.io/discord/890118421587578920)](https://discord.gg/xyBJ3GwvAm)
[![Tests](https://github.com/koskimas/kysely/actions/workflows/test.yml/badge.svg)](https://github.com/koskimas/kysely)

# [Kysely](https://koskimas.github.io/kysely/index.html)

Kysely (pronounce “Key-Seh-Lee”) is a type-safe and autocompletion-friendly typescript SQL query builder. Inspired by
[knex](http://knexjs.org/). Mainly developed for [node.js](https://nodejs.org/en/) but also runs on [deno](https://deno.land/)
and in the browser.

![](https://github.com/koskimas/kysely/blob/master/assets/demo.gif)

Kysely makes sure you only refer to tables and columns that are visible to the part of the query
you're writing. The result type only has the selected columns with correct types and aliases. As an
added bonus you get autocompletion for all that stuff.

As shown in the gif above, through the pure magic of modern typescript, Kysely is even able to parse
the alias given to `pet.name` and add the `pet_name` column to the result row type. Kysely is able to infer
column names, aliases and types from selected subqueries, joined subqueries, `with` statements and pretty
much anything you can think of.

Of course there are cases where things cannot be typed at compile time, and Kysely offers escape
hatches for these situations. See the [sql template tag](https://koskimas.github.io/kysely/interfaces/Sql.html) 
and the [DynamicModule](https://koskimas.github.io/kysely/classes/DynamicModule.html#ref) for more info.

All API documentation is written in the typing files and you can simply `cmd-click` on the module, class
or method you're using to see it. The same documentation is also hosted [here](https://github.com/koskimas/kysely).

If you start using Kysely and can't find something you'd want to use, please open an issue or join our
[discord server](https://discord.gg/xyBJ3GwvAm).

You can find a more thorough introduction [here](https://www.jakso.me/blog/kysely-a-type-safe-sql-query-builder-for-typescript).

# Table of contents

- [Installation](#installation)
    - [3rd party dialects](#3rd-party-dialects)
- [Minimal example](#minimal-example)
- [Playground](#playground)
- [Generating types](#generating-types)
- [Query examples](#query-examples)
  - [Select queries](#select-queries)
    - [Stream select query results](#stream-select-query-results)
  - [Update queries](#update-queries)
  - [Insert queries](#insert-queries)
  - [Delete queries](#delete-queries)
- [Recipes](#recipes)
- [Migrations](#migrations)
    - [PostgreSQL migration example](#postgresql-migration-example)
    - [MySQL migration example](#mysql-migration-example)
- [Deno](#deno)
- [Browser](#browser)
- [Why not just contribute to knex](#why-not-just-contribute-to-knex)

# Installation

Kysely currently works on PostgreSQL, MySQL and SQLite. You can install it using:

```
# PostgreSQL
npm install kysely pg

# MySQL
npm install kysely mysql2

# SQLite
npm install kysely better-sqlite3
```

More dialects will be added soon. Kysely also has a simple interface
for [3rd party dialects](https://koskimas.github.io/kysely/interfaces/Dialect.html).

### 3rd party dialects

 - [AWS Data API](https://github.com/serverless-stack/kysely-data-api)
 - [PlanetScale Serverless Driver](https://github.com/depot/kysely-planetscale)
 - [SingleStore Data API](https://github.com/igalklebanov/kysely-singlestore)
 - [D1](https://github.com/aidenwallis/kysely-d1)
 - [SurrealDB](https://github.com/igalklebanov/kysely-surrealdb)

# Minimal example

All you need to do is define an interface for each table in the database and pass those
interfaces to the `Kysely` constructor:

```ts
import { Pool } from 'pg'
import {
  Kysely,
  PostgresDialect,
  Generated,
  ColumnType,
  Selectable,
  Insertable,
  Updateable,
} from 'kysely'

interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>

  first_name: string
  gender: 'male' | 'female' | 'other'

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  modified_at: ColumnType<Date, string | undefined, never>
}

interface PetTable {
  id: Generated<number>
  name: string
  owner_id: number
  species: 'dog' | 'cat'
}

interface MovieTable {
  id: Generated<string>
  stars: number
}

// Keys of this interface are table names.
interface Database {
  person: PersonTable
  pet: PetTable
  movie: MovieTable
}

// You'd create one of these when you start your app.
const db = new Kysely<Database>({
  // Use MysqlDialect for MySQL and SqliteDialect for SQLite.
  dialect: new PostgresDialect({
    pool: new Pool({
      host: 'localhost',
      database: 'kysely_test'
    })
  })
})

async function demo() {
  const { id } = await db
    .insertInto('person')
    .values({ first_name: 'Jennifer', gender: 'female' })
    .returning('id')
    .executeTakeFirstOrThrow()

  await db
    .insertInto('pet')
    .values({ name: 'Catto', species: 'cat', owner_id: id })
    .execute()

  const person = await db
    .selectFrom('person')
    .innerJoin('pet', 'pet.owner_id', 'person.id')
    .select(['first_name', 'pet.name as pet_name'])
    .where('person.id', '=', id)
    .executeTakeFirst()

  if (person) {
    person.pet_name
  }
}
```

```ts
// You can extract the select, insert and update interfaces like this
// if you want (you don't need to):
type Person = Selectable<PersonTable>
type InsertablePerson = Insertable<PersonTable>
type UpdateablePerson = Updateable<PersonTable>
```

# Playground

[@wirekang](https://github.com/wirekang) has created a [playground for Kysely](https://wirekang.github.io/kysely-playground/?p=f&i=-NLp3n_P5fyeQKMQda8n). You can use to quickly test stuff out and for creating code examples for your issues, PRs and discord messages.

# Generating types

If you want to generate the table types automatically from the database schema please
check out [this awesome project](https://github.com/RobinBlomberg/kysely-codegen).

# Query examples

## Select queries

You can find examples of select queries in the documentation of the 
[select method](https://koskimas.github.io/kysely/classes/SelectQueryBuilder.html#select) and
the [where method](https://koskimas.github.io/kysely/classes/SelectQueryBuilder.html#where)
among other places.

### Stream select query results

*Currently only supported by `postgres` and `mysql` dialects.*

```ts
import { Pool } from 'pg'
// or `import * as Cursor from 'pg-cursor'` depending on your tsconfig
import Cursor from 'pg-cursor'
import { Kysely, PostgresDialect } from 'kysely'

const db = new Kysely<Database>({
  // PostgresDialect requires the Cursor dependency
  dialect: new PostgresDialect({
    pool: new Pool({
      host: 'localhost',
      database: 'kysely_test'
    }),
    cursor: Cursor
  }),
  // MysqlDialect doesn't require any special configuration
})

async function demo() {
  for await (const adult of db.selectFrom('person')
    .selectAll()
    .where('age', '>', 18)
    .stream()
  ) {
    console.log(`Hello ${adult.first_name}!`)

    if (adult.first_name === 'John') {
      // After this line the db connection is released and no more
      // rows are streamed from the database to the client
      break;
    }
  }
}
```

## Update queries

See the [set method](https://koskimas.github.io/kysely/classes/UpdateQueryBuilder.html#set) and the
[updateTable method](https://koskimas.github.io/kysely/classes/Kysely.html#updateTable)
documentation.

## Insert queries

See the [values method](https://koskimas.github.io/kysely/classes/InsertQueryBuilder.html#values) and the
[insertInto method](https://koskimas.github.io/kysely/classes/Kysely.html#insertInto)
documentation.

## Delete queries

See the [deleteFrom method](https://koskimas.github.io/kysely/classes/Kysely.html#deleteFrom)
documentation.

# Recipes

The [recipes](https://github.com/koskimas/kysely/tree/master/recipes) folder contains a bunch of small tutorials
or ""recipes"" for common use cases.

* [Conditional selects](https://github.com/koskimas/kysely/tree/master/recipes/conditional-selects.md)
* [Deduplicate joins](https://github.com/koskimas/kysely/tree/master/recipes/deduplicate-joins.md)
* [Extending kysely](https://github.com/koskimas/kysely/tree/master/recipes/extending-kysely.md)
* [Raw SQL](https://github.com/koskimas/kysely/tree/master/recipes/raw-sql.md)
* [Schemas](https://github.com/koskimas/kysely/tree/master/recipes/schemas.md)
* [Dealing with the `Type instantiation is excessively deep and possibly infinite` error](https://github.com/koskimas/kysely/tree/master/recipes/excessively-deep-types.md)

# Migrations

Migration files should look like this:

```ts
import { Kysely } from 'kysely'

export async function up(db: Kysely<any>): Promise<void> {
  // Migration code
}

export async function down(db: Kysely<any>): Promise<void> {
  // Migration code
}
```

The `up` function is called when you update your database schema to the next version and `down`
when you go back to previous version. The only argument for the functions is an instance of
`Kysely<any>`. It's important to use `Kysely<any>` and not `Kysely<YourDatabase>`. 

Migrations should never depend on the current code of your app because they need to work even when the app
changes. Migrations need to be ""frozen in time"".

The migrations can use the [Kysely.schema](https://koskimas.github.io/kysely/classes/SchemaModule.html)
module to modify the schema. Migrations can also run normal queries to modify data.

Execution order of the migrations is the alpabetical order of their names. An excellent way to name your
migrations is to prefix them with an ISO 8601 date string. A date prefix works well in large teams
where multiple team members may add migrations at the same time in parallel commits without knowing
about the other migrations.

You don't need to store your migrations as separate files if you don't want to. You can easily
implement your own [MigrationProvider](https://koskimas.github.io/kysely/interfaces/MigrationProvider.html)
and give it to the [Migrator](https://koskimas.github.io/kysely/classes/Migrator.html) class
when you instantiate one.

### PostgreSQL migration example

```ts
import { Kysely, sql } from 'kysely'

export async function up(db: Kysely<any>): Promise<void> {
  await db.schema
    .createTable('person')
    .addColumn('id', 'serial', (col) => col.primaryKey())
    .addColumn('first_name', 'varchar', (col) => col.notNull())
    .addColumn('last_name', 'varchar')
    .addColumn('gender', 'varchar(50)', (col) => col.notNull())
    .addColumn('created_at', 'timestamp', (col) => col.defaultTo(sql`now()`).notNull())
    .execute()

  await db.schema
    .createTable('pet')
    .addColumn('id', 'serial', (col) => col.primaryKey())
    .addColumn('name', 'varchar', (col) => col.notNull().unique())
    .addColumn('owner_id', 'integer', (col) =>
      col.references('person.id').onDelete('cascade').notNull()
    )
    .addColumn('species', 'varchar', (col) => col.notNull())
    .execute()

  await db.schema
    .createIndex('pet_owner_id_index')
    .on('pet')
    .column('owner_id')
    .execute()
}

export async function down(db: Kysely<any>): Promise<void> {
  await db.schema.dropTable('pet').execute()
  await db.schema.dropTable('person').execute()
}
```

### MySQL migration example

```ts
import { Kysely } from 'kysely'

export async function up(db: Kysely<any>): Promise<void> {
  await db.schema
    .createTable('person')
    .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey())
    .addColumn('first_name', 'varchar(255)', (col) => col.notNull())
    .addColumn('last_name', 'varchar(255)')
    .addColumn('gender', 'varchar(50)', (col) => col.notNull())
    .execute()

  await db.schema
    .createTable('pet')
    .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey())
    .addColumn('name', 'varchar(255)', (col) => col.notNull().unique())
    .addColumn('owner_id', 'integer', (col) => col.notNull())
    .addColumn('species', 'varchar(255)', (col) => col.notNull())
    .addForeignKeyConstraint(
      'pet_owner_id_fk', ['owner_id'], 'person', ['id'],
      (cb) => cb.onDelete('cascade')
    )
    .execute()

  await db.schema
    .createIndex('pet_owner_id_index')
    .on('pet')
    .column('owner_id')
    .execute()
}

export async function down(db: Kysely<any>): Promise<void> {
  await db.schema.dropTable('pet').execute()
  await db.schema.dropTable('person').execute()
}
```

You can then use

```ts
const migrator = new Migrator(migratorConfig);
await migrator.migrateToLatest(pathToMigrationsFolder)
```

to run all migrations that have not yet been run. See the
[Migrator](https://koskimas.github.io/kysely/classes/Migrator.html)
class's documentation for more info.

Kysely doesn't have a CLI for running migrations and probably never will. This is because Kysely's
migrations are also written in typescript. To run the migrations, you need to first build the
typescript code into javascript. A CLI would cause confusion over which migrations are being
run, the typescript ones or the javascript ones. If we added support for both, the CLI would 
need to depend on a typescript compiler, which most production environments don't (and shouldn't)
have. You will probably want to add a simple migration script to your projects like this:

```ts
import * as path from 'path'
import { Pool } from 'pg'
import { promises as fs } from 'fs'
import {
  Kysely,
  Migrator,
  PostgresDialect,
  FileMigrationProvider
} from 'kysely'

async function migrateToLatest() {
  const db = new Kysely<Database>({
    dialect: new PostgresDialect({
      pool: new Pool({
        host: 'localhost',
        database: 'kysely_test',
      })
    }),
  })

  const migrator = new Migrator({
    db,
    provider: new FileMigrationProvider({
      fs,
      path,
      migrationFolder: 'some/path/to/migrations',
    })
  })

  const { error, results } = await migrator.migrateToLatest()

  results?.forEach((it) => {
    if (it.status === 'Success') {
      console.log(`migration ""${it.migrationName}"" was executed successfully`)
    } else if (it.status === 'Error') {
      console.error(`failed to execute migration ""${it.migrationName}""`)
    }
  })

  if (error) {
    console.error('failed to migrate')
    console.error(error)
    process.exit(1)
  }

  await db.destroy()
}

migrateToLatest()
```

The migration methods use a lock on the database level and parallel calls are executed serially.
This means that you can safely call `migrateToLatest` and other migration methods from multiple
server instances simultaneously and the migrations are guaranteed to only be executed once. The
locks are also automatically released if the migration process crashes or the connection to the
database fails.

# Deno

Kysely doesn't include drivers for deno, but you can still use Kysely as a query builder
or implement your own driver:

```ts
// We use jsdeliver to get Kysely from npm.
import {
  DummyDriver,
  Generated,
  Kysely,
  PostgresAdapter,
  PostgresIntrospector,
  PostgresQueryCompiler,
} from 'https://cdn.jsdelivr.net/npm/kysely/dist/esm/index.js'

interface Person {
  id: Generated<number>
  first_name: string
  last_name: string | null
}

interface Database {
  person: Person
}

const db = new Kysely<Database>({
  dialect: {
    createAdapter() {
      return new PostgresAdapter()
    },
    createDriver() {
      // You need a driver to be able to execute queries. In this example
      // we use the dummy driver that never does anything.
      return new DummyDriver()
    },
    createIntrospector(db: Kysely<unknown>) {
      return new PostgresIntrospector(db)
    },
    createQueryCompiler() {
      return new PostgresQueryCompiler()
    },
  },
})

const query = db.selectFrom('person').select('id')
const sql = query.compile()

console.log(sql.sql)
```

# Browser

Kysely also runs in the browser:

```ts
import {
  Kysely,
  Generated,
  DummyDriver,
  SqliteAdapter,
  SqliteIntrospector,
  SqliteQueryCompiler,
} from 'kysely'

interface Person {
  id: Generated<number>
  first_name: string
  last_name: string | null
}

interface Database {
  person: Person
}

const db = new Kysely<Database>({
  dialect: {
    createAdapter() {
      return new SqliteAdapter()
    },
    createDriver() {
      return new DummyDriver()
    },
    createIntrospector(db: Kysely<unknown>) {
      return new SqliteIntrospector(db)
    },
    createQueryCompiler() {
      return new SqliteQueryCompiler()
    },
  },
})

window.addEventListener('load', () => {
  const sql = db.selectFrom('person').select('id').compile()

  const result = document.createElement('span')
  result.id = 'result'
  result.innerHTML = sql.sql

  document.body.appendChild(result)
})
```

# Why not just contribute to knex

Kysely is very similar to knex, but it also attempts to fix things that I personally find not-so-good
in knex. Bringing the type system and the changes to knex would mean very significant breaking changes
that aren't possible at this point of the project. Knex was also originally written for javascript and
the typescript typings were added afterwards. That always leads to compromises in the types. Designing
a library for typescript from the ground up produces much better and simpler types.

# How to contribute to Kysely

See [CONTRIBUTING.md](./CONTRIBUTING.md).
","Kysely (pronounce “Key-Seh-Lee”) is a type-safe and autocompletion-friendly
typescript SQL query builder. Inspired by knex, it runs on node.js but also runs
on [deno] and in the browser."
209,Rich is a Python library for rich text and beautiful formatting in the terminal.,"[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)


Rich is a Python library for _rich_ text and beautiful formatting in the terminal.

The [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

For a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).

See what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibility

Rich works with Linux, OSX, and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.7 or later.

Rich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.

## Installing

Install with `pip` or your favorite PyPI package manager.

```sh
python -m pip install rich
```

Run the following to test Rich output on your terminal:

```sh
python -m rich
```

## Rich Print

To effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:

```python
from rich import print

print(""Hello, [bold magenta]World[/bold magenta]!"", "":vampire:"", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Using the Console

For more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.

```python
from rich.console import Console

console = Console()
```

The Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:

```python
console.print(""Hello"", ""World!"")
```

As you might expect, this will print `""Hello World!""` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.

There are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:

```python
console.print(""Hello"", ""World!"", style=""bold red"")
```

The output will be something like the following:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

That's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:

```python
console.print(""Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i]."")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

You can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.

## Rich Inspect

Rich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.

```python
>>> my_list = [""foo"", ""bar""]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

See the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.

# Rich Library

Rich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.

Click the following headings for details:

<details>
<summary>Log</summary>

The Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.

```python
from rich.console import Console
console = Console()

test_data = [
    {""jsonrpc"": ""2.0"", ""method"": ""sum"", ""params"": [None, 1, 2, 4, False, True], ""id"": ""1"",},
    {""jsonrpc"": ""2.0"", ""method"": ""notify_hello"", ""params"": [7]},
    {""jsonrpc"": ""2.0"", ""method"": ""subtract"", ""params"": [42, 23], ""id"": ""2""},
]

def test_log():
    enabled = False
    context = {
        ""foo"": ""bar"",
    }
    movies = [""Deadpool"", ""Rise of the Skywalker""]
    console.log(""Hello from"", console, ""!"")
    console.log(test_data, log_locals=True)


test_log()
```

The above produces the following output:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Note the `log_locals` argument, which outputs a table containing the local variables where the log method was called.

The log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.

</details>
<details>
<summary>Logging Handler</summary>

You can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

To insert an emoji in to console output place the name between two colons. Here's an example:

```python
>>> console.print("":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:"")
😃 🧛 💩 👍 🦝
```

Please use this feature wisely.

</details>

<details>
<summary>Tables</summary>

Rich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

The animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.

Here's a simpler table example:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style=""bold magenta"")
table.add_column(""Date"", style=""dim"", width=12)
table.add_column(""Title"")
table.add_column(""Production Budget"", justify=""right"")
table.add_column(""Box Office"", justify=""right"")
table.add_row(
    ""Dec 20, 2019"", ""Star Wars: The Rise of Skywalker"", ""$275,000,000"", ""$375,126,118""
)
table.add_row(
    ""May 25, 2018"",
    ""[red]Solo[/red]: A Star Wars Story"",
    ""$275,000,000"",
    ""$393,151,347"",
)
table.add_row(
    ""Dec 15, 2017"",
    ""Star Wars Ep. VIII: The Last Jedi"",
    ""$262,000,000"",
    ""[bold]$1,332,539,889[/bold]"",
)

console.print(table)
```

This produces the following output:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Note that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).

The `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

Rich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.

For basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

It's not much harder to add multiple progress bars. Here's an example taken from the docs:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

The columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

To try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.

</details>

<details>
<summary>Status</summary>

For situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f""task {n}"" for n in range(1, 11)]

with console.status(""[bold green]Working on tasks..."") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f""{task} complete"")
```

This generates the following output in the terminal.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

The spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:

```
python -m rich.spinner
```

The above command generates the following output in the terminal:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.

The labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:

```
python -m rich.tree
```

This generates the following output:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

See the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.

</details>

<details>
<summary>Columns</summary>

Rich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

The following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.

To render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open(""README.md"") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

This will produce output something like the following:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

Rich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """"""Iterate and generate a tuple with a flag for first and last value.""""""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, ""python"", theme=""monokai"", line_numbers=True)
console = Console()
console.print(syntax)
```

This will produce the following output:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.

Here's what it looks like on OSX (similar on Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

All Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.

# Rich CLI


See also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

See also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.

![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)

# Projects using Rich

For some examples of projects using Rich, see the [Rich Gallery](https://www.textualize.io/rich/gallery) on [Textualize.io](https://www.textualize.io).

Would you like to add your own project to the gallery? You can! Follow [these instructions](https://www.textualize.io/gallery-instructions).

<!-- This is a test, no need to translate -->
","Rich is a Python library for the Rich API. It makes it easy to add color and
style to Rich output. Rich can also render pretty tables, progress bars,
markdown and tracebacks out of the source code, highlighted in the box and more."
2583,Rich is a Python library for rich text and beautiful formatting in the terminal.,"[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)

[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)
[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)
[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)
[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)

![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)

[English readme](https://github.com/textualize/rich/blob/master/README.md)
 • [简体中文 readme](https://github.com/textualize/rich/blob/master/README.cn.md)
 • [正體中文 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)
 • [Lengua española readme](https://github.com/textualize/rich/blob/master/README.es.md)
 • [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)
 • [Läs på svenska](https://github.com/textualize/rich/blob/master/README.sv.md)
 • [日本語 readme](https://github.com/textualize/rich/blob/master/README.ja.md)
 • [한국어 readme](https://github.com/textualize/rich/blob/master/README.kr.md)
 • [Français readme](https://github.com/textualize/rich/blob/master/README.fr.md)
 • [Schwizerdütsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)
 • [हिन्दी readme](https://github.com/textualize/rich/blob/master/README.hi.md)
 • [Português brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)
 • [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)
 • [Русский readme](https://github.com/textualize/rich/blob/master/README.ru.md)
 • [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)
 • [فارسی readme](https://github.com/textualize/rich/blob/master/README.fa.md)
 • [Türkçe readme](https://github.com/textualize/rich/blob/master/README.tr.md)


Rich is a Python library for _rich_ text and beautiful formatting in the terminal.

The [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.

![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)

For a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).

See what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).

## Compatibility

Rich works with Linux, OSX, and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.7 or later.

Rich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.

## Installing

Install with `pip` or your favorite PyPI package manager.

```sh
python -m pip install rich
```

Run the following to test Rich output on your terminal:

```sh
python -m rich
```

## Rich Print

To effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:

```python
from rich import print

print(""Hello, [bold magenta]World[/bold magenta]!"", "":vampire:"", locals())
```

![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)

## Rich REPL

Rich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.

```python
>>> from rich import pretty
>>> pretty.install()
```

![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)

## Using the Console

For more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.

```python
from rich.console import Console

console = Console()
```

The Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:

```python
console.print(""Hello"", ""World!"")
```

As you might expect, this will print `""Hello World!""` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.

There are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:

```python
console.print(""Hello"", ""World!"", style=""bold red"")
```

The output will be something like the following:

![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)

That's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:

```python
console.print(""Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i]."")
```

![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)

You can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.

## Rich Inspect

Rich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.

```python
>>> my_list = [""foo"", ""bar""]
>>> from rich import inspect
>>> inspect(my_list, methods=True)
```

![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)

See the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.

# Rich Library

Rich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.

Click the following headings for details:

<details>
<summary>Log</summary>

The Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.

```python
from rich.console import Console
console = Console()

test_data = [
    {""jsonrpc"": ""2.0"", ""method"": ""sum"", ""params"": [None, 1, 2, 4, False, True], ""id"": ""1"",},
    {""jsonrpc"": ""2.0"", ""method"": ""notify_hello"", ""params"": [7]},
    {""jsonrpc"": ""2.0"", ""method"": ""subtract"", ""params"": [42, 23], ""id"": ""2""},
]

def test_log():
    enabled = False
    context = {
        ""foo"": ""bar"",
    }
    movies = [""Deadpool"", ""Rise of the Skywalker""]
    console.log(""Hello from"", console, ""!"")
    console.log(test_data, log_locals=True)


test_log()
```

The above produces the following output:

![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)

Note the `log_locals` argument, which outputs a table containing the local variables where the log method was called.

The log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.

</details>
<details>
<summary>Logging Handler</summary>

You can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:

![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)

</details>

<details>
<summary>Emoji</summary>

To insert an emoji in to console output place the name between two colons. Here's an example:

```python
>>> console.print("":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:"")
😃 🧛 💩 👍 🦝
```

Please use this feature wisely.

</details>

<details>
<summary>Tables</summary>

Rich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.

![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)

The animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.

Here's a simpler table example:

```python
from rich.console import Console
from rich.table import Table

console = Console()

table = Table(show_header=True, header_style=""bold magenta"")
table.add_column(""Date"", style=""dim"", width=12)
table.add_column(""Title"")
table.add_column(""Production Budget"", justify=""right"")
table.add_column(""Box Office"", justify=""right"")
table.add_row(
    ""Dec 20, 2019"", ""Star Wars: The Rise of Skywalker"", ""$275,000,000"", ""$375,126,118""
)
table.add_row(
    ""May 25, 2018"",
    ""[red]Solo[/red]: A Star Wars Story"",
    ""$275,000,000"",
    ""$393,151,347"",
)
table.add_row(
    ""Dec 15, 2017"",
    ""Star Wars Ep. VIII: The Last Jedi"",
    ""$262,000,000"",
    ""[bold]$1,332,539,889[/bold]"",
)

console.print(table)
```

This produces the following output:

![table](https://github.com/textualize/rich/raw/master/imgs/table.png)

Note that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).

The `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:

![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)

</details>

<details>
<summary>Progress Bars</summary>

Rich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.

For basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:

```python
from rich.progress import track

for step in track(range(100)):
    do_step(step)
```

It's not much harder to add multiple progress bars. Here's an example taken from the docs:

![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)

The columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:

![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)

To try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.

</details>

<details>
<summary>Status</summary>

For situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:

```python
from time import sleep
from rich.console import Console

console = Console()
tasks = [f""task {n}"" for n in range(1, 11)]

with console.status(""[bold green]Working on tasks..."") as status:
    while tasks:
        task = tasks.pop(0)
        sleep(1)
        console.log(f""{task} complete"")
```

This generates the following output in the terminal.

![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)

The spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:

```
python -m rich.spinner
```

The above command generates the following output in the terminal:

![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)

</details>

<details>
<summary>Tree</summary>

Rich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.

The labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:

```
python -m rich.tree
```

This generates the following output:

![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)

See the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.

</details>

<details>
<summary>Columns</summary>

Rich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:

```python
import os
import sys

from rich import print
from rich.columns import Columns

directory = os.listdir(sys.argv[1])
print(Columns(directory))
```

The following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:

![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)

</details>

<details>
<summary>Markdown</summary>

Rich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.

To render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:

```python
from rich.console import Console
from rich.markdown import Markdown

console = Console()
with open(""README.md"") as readme:
    markdown = Markdown(readme.read())
console.print(markdown)
```

This will produce output something like the following:

![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)

</details>

<details>
<summary>Syntax Highlighting</summary>

Rich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:

```python
from rich.console import Console
from rich.syntax import Syntax

my_code = '''
def iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:
    """"""Iterate and generate a tuple with a flag for first and last value.""""""
    iter_values = iter(values)
    try:
        previous_value = next(iter_values)
    except StopIteration:
        return
    first = True
    for value in iter_values:
        yield first, False, previous_value
        first = False
        previous_value = value
    yield first, True, previous_value
'''
syntax = Syntax(my_code, ""python"", theme=""monokai"", line_numbers=True)
console = Console()
console.print(syntax)
```

This will produce the following output:

![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)

</details>

<details>
<summary>Tracebacks</summary>

Rich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.

Here's what it looks like on OSX (similar on Linux):

![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)

</details>

All Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.

# Rich CLI


See also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.


![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)

# Textual

See also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.

![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)

# Projects using Rich

For some examples of projects using Rich, see the [Rich Gallery](https://www.textualize.io/rich/gallery) on [Textualize.io](https://www.textualize.io).

Would you like to add your own project to the gallery? You can! Follow [these instructions](https://www.textualize.io/gallery-instructions).

<!-- This is a test, no need to translate -->
","Rich is a Python library for the Rich API. It makes it easy to add color and
style to Rich output. Rich can also render pretty tables, progress bars,
markdown and tracebacks out of the source code, highlighted in the box and more."
1460,React Hooks for Data Fetching,"[![SWR](https://assets.vercel.com/image/upload/v1572289618/swr/banner.png)](https://swr.vercel.app)

<p align=""center"">
  <a aria-label=""Vercel logo"" href=""https://vercel.com"">
    <img src=""https://badgen.net/badge/icon/Made%20by%20Vercel?icon=zeit&label&color=black&labelColor=black"">
  </a>
  <br/>
  <a aria-label=""NPM version"" href=""https://www.npmjs.com/package/swr"">
    <img alt="""" src=""https://badgen.net/npm/v/swr"">
  </a>
  <a aria-label=""Package size"" href=""https://bundlephobia.com/result?p=swr"">
    <img alt="""" src=""https://badgen.net/bundlephobia/minzip/swr"">
  </a>
  <a aria-label=""License"" href=""https://github.com/vercel/swr/blob/main/LICENSE"">
    <img alt="""" src=""https://badgen.net/npm/license/swr"">
  </a>
</p>

## Introduction

SWR is a React Hooks library for data fetching.

The name “**SWR**” is derived from `stale-while-revalidate`, a cache invalidation strategy popularized by [HTTP RFC 5861](https://tools.ietf.org/html/rfc5861).
**SWR** first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again.

With just one hook, you can significantly simplify the data fetching logic in your project. And it also covered in all aspects of speed, correctness, and stability to help you build better experiences:

- **Fast**, **lightweight** and **reusable** data fetching
- Transport and protocol agnostic
- Built-in **cache** and request deduplication
- **Real-time** experience
- Revalidation on focus
- Revalidation on network recovery
- Polling
- Pagination and scroll position recovery
- SSR and SSG
- Local mutation (Optimistic UI)
- Built-in smart error retry
- TypeScript
- React Suspense
- React Native

...and a lot more.

With SWR, components will get **a stream of data updates constantly and automatically**. Thus, the UI will be always **fast** and **reactive**.

---

**View full documentation and examples on [swr.vercel.app](https://swr.vercel.app).**

<br/>

## Quick Start

```js
import useSWR from 'swr'

function Profile() {
  const { data, error } = useSWR('/api/user', fetcher)

  if (error) return <div>failed to load</div>
  if (!data) return <div>loading...</div>
  return <div>hello {data.name}!</div>
}
```

In this example, the React Hook `useSWR` accepts a `key` and a `fetcher` function.
The `key` is a unique identifier of the request, normally the URL of the API. And the `fetcher` accepts
`key` as its parameter and returns the data asynchronously.

`useSWR` also returns 2 values: `data` and `error`. When the request (fetcher) is not yet finished,
`data` will be `undefined`. And when we get a response, it sets `data` and `error` based on the result
of `fetcher` and rerenders the component.

Note that `fetcher` can be any asynchronous function, you can use your favourite data-fetching
library to handle that part.

---

**View full documentation and examples on [swr.vercel.app](https://swr.vercel.app).**

<br/>

## Authors

This library is created by the team behind [Next.js](https://nextjs.org), with contributions from our community:

- Shu Ding ([@shuding\_](https://twitter.com/shuding_)) - [Vercel](https://vercel.com)
- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [Vercel](https://vercel.com)
- Joe Haddad ([@timer150](https://twitter.com/timer150)) - [Vercel](https://vercel.com)
- Paco Coursey ([@pacocoursey](https://twitter.com/pacocoursey)) - [Vercel](https://vercel.com)

[Contributors](https://github.com/vercel/swr/graphs/contributors)

Thanks to Ryan Chen for providing the awesome `swr` npm package name!

<br/>

## License

The MIT License.
","SwR is a React Hooks library for data fetching. It uses a cache invalidation
strategy popularized by [HTTP RFC 5861] SWR first returns the data from cache
(stale), then sends the request (revalidate), and finally comes with the up-to-
date data again. With just one hook, you can significantly simplify the data-
fetching logic in your project. It also covered in all aspects of speed,
correctness, and stability to help you build better experiences."
1176,🤖 Telegram Bot API PHP SDK. Lets you build Telegram Bots easily! Supports Laravel out of the box.,"[![Telegram Bot API PHP SDK](https://user-images.githubusercontent.com/1915268/75023827-7879f780-54be-11ea-98c1-436a14e7e633.png)][link-repo]

<p align=""center"">
<a href=""https://phpchat.co""><img src=""https://img.shields.io/badge/Slack-PHP%20Chat-5c6aaa.svg?logo=slack&labelColor=4A154B&style=for-the-badge"" alt=""Join PHP Chat""/></a>
<a href=""https://t.me/PHPChatCo""><img src=""https://img.shields.io/badge/Chat-on%20Telegram-2CA5E0.svg?logo=telegram&style=for-the-badge"" alt=""Chat on Telegram""/></a>
<a href=""https://github.com/irazasyed/telegram-bot-sdk/actions""><img src=""https://img.shields.io/github/workflow/status/irazasyed/telegram-bot-sdk/CI.svg?style=for-the-badge"" alt=""Build Status""/></a>
<a href=""https://github.com/irazasyed/telegram-bot-sdk/releases""><img src=""https://img.shields.io/github/release/irazasyed/telegram-bot-sdk.svg?style=for-the-badge"" alt=""Latest Version""/></a>
<a href=""https://packagist.org/packages/irazasyed/telegram-bot-sdk""><img src=""https://img.shields.io/packagist/dt/irazasyed/telegram-bot-sdk.svg?style=for-the-badge"" alt=""Total Downloads""/></a>
</p>

Telegram Bot API - PHP SDK
==========================

> Telegram Bot PHP SDK lets you develop Telegram Bots in PHP easily! Supports Laravel out of the box.
>
> [Telegram Bot API][link-telegram-bot-api] is an HTTP-based interface created for developers keen on building bots for Telegram.
> 
> To learn more about the Telegram Bot API, please consult the [Introduction to Bots][link-telegram-bot-api] and [Bot FAQ](https://core.telegram.org/bots/faq) on official Telegram site.
>
> To get started writing your bots using this SDK, Please refer the [documentation][link-docs].

## Documentation

Documentation for the SDK can be found on the [website][link-docs].

## Are You Using Telegram Bot SDK?

If you're using this SDK to build your Telegram Bots, We'd love to know and share the bot with the world. Tell us about it - **[here][link-sdk-users]**

Check out the [Who's Using Telegram Bot SDK][link-sdk-users] wiki page to know more about what people have been building with this SDK.

## Additional information

Any issues, feedback, suggestions or questions please use issue tracker [here][link-issues].

## Contributing

Thank you for considering contributing to the project. Please review the [CONTRIBUTING](https://telegram-bot-sdk.readme.io/docs/contributing) guidelines before submitting any pull requests.

## Credits

- [Syed Irfaq R.][link-author]
- [All Contributors][link-contributors]

## Disclaimer

This project and its author is neither associated, nor affiliated with [Telegram](https://telegram.org/) in anyway.
See License section for more details.

## License

This project is released under the [BSD 3-Clause][link-license] License.

[link-author]: https://github.com/irazasyed
[link-repo]: https://github.com/irazasyed/telegram-bot-sdk
[link-issues]: https://github.com/irazasyed/telegram-bot-sdk/issues
[link-contributors]: https://github.com/irazasyed/telegram-bot-sdk/contributors
[link-docs]: https://telegram-bot-sdk.readme.io/docs
[link-license]: https://github.com/irazasyed/telegram-bot-sdk/blob/master/LICENSE
[link-sdk-users]: https://github.com/irazasyed/telegram-bot-sdk/wiki/Who's-Using-Telegram-Bot-SDK%3F
[link-telegram-bot-api]: https://core.telegram.org/bots

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Firazasyed%2Ftelegram-bot-sdk.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Firazasyed%2Ftelegram-bot-sdk?ref=badge_large)
","Telegram Bot API is an HTTP-based interface created for developers keen on
building bots for Telegram. It lets you develop Telegram Bots in PHP easily!
Supports Laravel out of the box. It is released under the [Clause-Clause]
License."
3353,Community-based GPL-licensed network monitoring system,"[![Test Status](https://github.com/librenms/librenms/actions/workflows/test.yml/badge.svg?branch=master&event=push)](https://github.com/librenms/librenms/actions/workflows/test.yml?query=event%3Apush+branch%3Amaster)

Introduction
------------

LibreNMS is an auto-discovering PHP/MySQL/SNMP based network monitoring
which includes support for a wide range of network hardware and operating
systems including Cisco, Linux, FreeBSD, Juniper, Brocade, Foundry, HP and
many more.

We intend LibreNMS to be a viable project and community that:
- encourages contribution,
- focuses on the needs of its users, and
- offers a welcoming, friendly environment for everyone.

The [Debian Social Contract][10] will be the basis of our priority system,
and mutual respect is the basis of our behavior towards others.


Documentation
-------------

Documentation can be found in the [doc directory][5] or [docs.librenms.org][16], including instructions
for installing and contributing.


Participating
-------------

You can participate in the project by:
- Talking to us on [Discord][4] or [Twitter][3].
- Joining the [LibreNMS Community](https://community.librenms.org)
- Improving the [documentation][5].
- Cloning the [repository][2] and filing [pull requests][19] on GitHub.
- [Bug Reports](https://community.librenms.org) on our Community Forums
- See [CONTRIBUTING][15] for more details.


VM image
--------

You can try LibreNMS by downloading a VM image.  Currently, a Ubuntu-based
image is supplied and has been tested with [VirtualBox][8].

Download one of the [VirtualBox images][11] we have available, documentation is provided which details
login credentials and setup details.

License
-------

Copyright (C) 2006-2012 Adam Armstrong <adama@memetic.org>

Copyright (C) 2013-2022 by individual LibreNMS contributors

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.

[LICENSE.txt][14] contains a copy of the full GPLv3 licensing conditions.

The following additional license conditions apply to LibreNMS (a GPL
exception):

  As a special exception, you have permission to link or otherwise combine
  LibreNMS with the included copies of the following third-party software,
  and distribute modified versions, as long as you follow the requirements
  of the GNU GPL v3 in regard to all of the remaining software (comprising
  LibreNMS).

  Please see [Acknowledgements][17]

[2]: https://github.com/librenms/librenms ""Main LibreNMS GitHub repo""
[3]: https://twitter.com/librenms ""@LibreNMS on Twitter""
[4]: https://discord.gg/librenms ""Discord LibreNMS Server""
[5]: https://github.com/librenms/librenms/tree/master/doc/
[8]: https://www.virtualbox.org/ ""VirtualBox""
[10]: http://www.debian.org/social_contract ""Debian project social contract""
[11]: https://www.librenms.org/#downloads
[14]: https://github.com/librenms/librenms/tree/master/LICENSE.txt
[15]: https://docs.librenms.org/General/Contributing/
[16]: https://docs.librenms.org/
[17]: https://docs.librenms.org/General/Acknowledgement/
[19]: https://github.com/librenms/librenms/pulls


## Backers

Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/librenms#backer)]

<a href=""https://opencollective.com/librenms/backer/0/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/0/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/1/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/1/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/2/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/2/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/3/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/3/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/4/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/4/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/5/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/5/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/6/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/6/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/7/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/7/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/8/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/8/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/9/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/9/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/10/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/10/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/11/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/11/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/12/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/12/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/13/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/13/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/14/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/14/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/15/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/15/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/16/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/16/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/17/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/17/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/18/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/18/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/19/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/19/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/20/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/20/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/21/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/21/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/22/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/22/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/23/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/23/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/24/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/24/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/25/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/25/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/26/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/26/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/27/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/27/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/28/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/28/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/29/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/29/avatar.svg""></a>


## Sponsors

Become a sponsor and get your logo on our README on GitHub with a link to your site. [[Become a sponsor](https://opencollective.com/librenms#sponsor)]

<a href=""https://opencollective.com/librenms/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/0/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/1/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/2/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/3/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/4/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/5/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/6/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/7/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/8/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/9/avatar.svg""></a>


","LibreNMS is an auto-discovering PHP/MySQL/SNMP based network monitoring. It
includes support for a wide range of network hardware and operating systems. It
is free software under the terms of the GNU General Public License as published
by the Free Software Foundation."
612,Build your Chromium OS for Raspberry Pi 3B/3B+/4B and Pi400,"[<img src=""https://img.shields.io/endpoint?url=https://openfyde-referral-badge-njwdjt8vwpnb.runkit.sh/"">](https://github.com/openFyde/overlay-rpi4-openfyde) 

[<img src=""https://img.shields.io/endpoint?style=flat&color=fedcba&url=https://telegram-badge-t2fuv4m3rno2.runkit.sh/?url=https://t.me/hi_fydeos"">](https://t.me/hi_fydeos)

<br>

# TL;DR: (in FAQ format)

<details>
  <summary>What's this, is this FydeOS?</summary>
  <br>
  
We get it, it's confusing. There are `Chromium OS for Raspberry Pi`, `openFyde` that happens to boot on Raspberry Pi and `FydeOS for You - Raspberry Pi 400`, these are different releases.
  
This project is about **Chromium OS for Raspberry Pi**, not FydeOS for You - Raspberry Pi 400, also not openFyde. This project aims to only ship vanilla Chromium OS developed by Google and the Chromium Authors, ported to the world's favourite single-board computer - the Raspberry Pi platform.
  
The next question gives detailed differences between these confusing terms.
</details>


<details>
  <summary>What's the difference between Chromium OS, Chrome OS, openFyde and FydeOS?</summary>
  <br>
  
  - Chromium OS is an open-source project, used primarily by developers, with code that is available for anyone to checkout, modify, and build.
  - Google Chrome OS is the Google product that OEMs ship on Chromebooks for general consumer use.
  - openFyde is a downstream fork of the Chromium OS, with modifications and enhancements developed by Fyde Innovations. It's an open-source initiative sharing a similar series of relaxed licenses as per the Chromium OS upstream.
  - FydeOS is similar to Google Chrome OS, it's a commercial-grade operating system product developed and maintained by Fyde Innovations, based on openFyde and Chromium OS.
  
  Some specific differences:

  - These OS projects fundamentally share the same code base, but Google Chrome OS has some additional firmware features, including verified boot and easy recovery, which require corresponding hardware changes and thus also don't work out of the box in Chromium OS builds.
  - Google Chrome OS / ""FydeOS for You"" runs on specially optimised hardware to get enhanced performance and security.
  - Chromium OS and openFyde images do not auto-update by default (so that changes you may have made to the code are not blown away), whereas Google Chrome OS / FydeOS seamlessly auto-updates so that users have the latest and greatest features and fixes.
  - Google Chrome OS / FydeOS includes some proprietary/commercial/licensed packages which are not included in the Chromium OS project.
  - In consequence of the above, Google Chrome OS / FydeOS supports the Android subsystem, while Chromium OS and openFyde do not.
  - Google Chrome OS has a green/yellow/red logo, Chromium OS has a blue/bluer/bluest logo, openFyde has a logo that looks like ⭕️ and the logo FydeOS is only textural.

</details>


<details>
  <summary>Can I build Chromium OS? Can I build FydeOS?</summary>
  <br>
  
   - Yes you can build Chromium OS, in fact, this project is all about building your own Chromium OS for Raspberry Pi as well as offering pre-built images using the provided build artefacts.
   - No you can't build FydeOS - the same reason that you can't build Google Chrome OS.
   - You can build openFyde too, more information about openFyde is available on its [project website](https://openfyde.io/).
</details>


<details>
  <summary>I don't want to be bothered with the technicalities, where are the download links?</summary>
  <br>
  
   - To download pre-built Chromium OS for Raspberry Pi, head over to [releases](https://github.com/FydeOS/chromium_os-raspberry_pi/releases) tab, you will find all historical releases as well as important release notes. Please do read the release note!
   - To download FydeOS for You - Raspberry Pi 400, please use the [Download](https://fydeos.com/download) page of the FydeOS official site.
</details>


<details>
  <summary>Where to get help?</summary>
  <br>
  
  You are welcome to open an issue in this project if:
   - You've read the entire developer guide and even watched the [build demonstration video](https://youtu.be/og4wzzIfGA0), and then you are attempting to build Chromium OS but have encountered problems
   - You believe your copy of the Chromium OS for Raspberry Pi isn't functioning correctly as it should be

  Your issues will likely get closed if:
   - You are asking about FydeOS for You - Raspberry Pi 400: for this please use [FydeOS Community](http://community.fydeos.com/) or join [Official FydeOS Telegram Group](http://t.me/hi_fydeos)
   - You are asking for generic features/bugs about Chromium OS / Chrome OS itself: for this please use [chromium-os-dev Google Group](https://groups.google.com/a/chromium.org/g/chromium-os-dev) or report bugs to [CRBUGS](https://bugs.chromium.org/)
   - You are asking about issues about a 3rd-party app, a non-standard peripheral device or a special setup that does not benefit the general community
</details>



<br><br>

# Table of contents (for cool kids)

<!-- TOC -->

- [Introduction](#introduction)
- [System requirement](#system-requirement)
- [Prepare the system](#prepare-the-system)
- [Get Chromium OS source code](#get-chromium-os-source-code)
- [Setup Raspberry Pi overlay](#setup-raspberry-pi-overlay)
- [Setup local chromium source](#setup-local-chromium-source)
- [Build Chromium OS for Raspberry Pi](#build-chromium-os-for-raspberry-pi)
- [Boot Raspberry Pi from the image](#boot-raspberry-pi-from-the-image)
- [Video demonstration of the build process](#video-demonstration-of-the-build-process)
- [More information](#more-information)
- [About us](#about-us)
  <!-- /TOC -->


<br>

# Introduction

This document describes how to build and run Google [Chromium OS](https://www.chromium.org/chromium-os) on Raspberry Pi 3B, 3B+, 4B and the Pi 400 personal computer kit(Pi400 hereafter), from its source code and the board overlay hosted in this repository.

These overlays and the document has been tested against Raspberry Pi 3B, 3B+, 4B and Pi400 by the FydeOS team. It **will not work** on an earlier version of the Raspberry Pi line-up.

### Goal of this project

* To provide a usable Chromium OS pre-built image that everybody can download and use that offers a similar experience to Chrome OS 
* To provide an open-source code base that everybody can use to build and improve Chromium OS on Raspberry Pi.
* This project does not aim to provide support for Chromium OS itself. If you find bugs and glitches, please report to [crbugs](https://bugs.chromium.org/p/chromium/issues/list); if you have further queries regarding Chromium OS, please revert to one of the official Chromium related [Google groups](https://www.chromium.org/developers/technical-discussion-groups).


### About this repository

The code and document in this repository are the results of works by the people of the FydeOS team. We previously worked on this overlay internally and released a few disk images for Raspberry Pi to the public. Now we open this to the public.


### Branches and tags in this repository


 - **branches**

    - `main` - the default branch of this project. It has been tested against our current release version. You are welcome to test it with future releases and send feedback and/or PRs.
    - `r<revision>` - branches for specific Chromium OS revision, it could be served for archiving purposes or used as a development branch for future (non-stable) code.


 - **tags**

     - When we do release a prebuilt image, the commit would be tagged with a release number corresponding to the repo manifest. For example, if the repo manifest release is `rrelease-R102-14695.B`, then our release tag would be `r102`.
     - Often we will be doing more than one release for each repo manifest release number, so we will append a meaningful string to the tag name to identify such. For example: `r102-hardware_acceleration`


### Typography Conventions

Shell Commands are shown with different labels to indicate whether they apply to 

 - your build computer (the computer on which you're doing development)
 - the chroot (Chromium OS SDK) on your build computer
 - your Chromium OS computer (the device on which you run the images you build)


| Label     | Commands                                   |
| --------- | ------------------------------------------ |
| (outside) | on your build computer, outside the chroot |
| (inside)  | inside the chroot on your build computer   |


<br>

# System requirement

* An x86_64 system to perform the build. 64-bit hardware and OS are a must. The Chromium OS is a very large project, building from the source from scratch usually takes hours to over 10 hours, depending on the system configuration.
  * CPU: we recommend using a 4-core or higher processor. The Chromium OS build process runs in parallel so more cores can help shorten build time dramatically.

  * Memory: we recommend at least 16GB, plus enough swap space because for this project you will need to build Chromium from source code. Linking Chromium required between 8GB and 28GB of RAM as of March 2017, so you will run into massive swapping or OOM if you have less memory. However, if you are not building your copy of Chromium, the RAM requirements will be substantially lower at a cost of losing some of the key features provided by this project.

  * Disk: at least 100GB of free space, 200GB or more is recommended. SSD could noticeably shorten the build time as there are many gigabytes of files that need to be written to and read from the disk.

  * Network: total source code downloading will be over 10GB. Fast and stable Internet access is going to be very helpful.

* An x86_64 Linux OS, it is called the host OS later in this doc. The Chromium OS build process utilises chroot to isolate the built environment from the host OS. So theoretically any modern Linux system should work. However, only limited Linux distros are tested by the Chromium OS team and the FydeOS team. Linux versions that are known to work:

  * Ubuntu 18.04 LTS
  * Ubuntu 20.04 LTS 
  * Gentoo Linux

* A non-root user account with sudo access. The build process should be run by this user, not the root user. The user needs to have _sudo_ access. For simplicity and convenience password-less sudo could be set for this user.


<br>

# Prepare the system

### Install necessary tools

Git and curl as the essential tools that need to be installed in the host OS, you will also need Python3 for most of the scripting work in the build process.

```bash
(outside)
sudo apt-get install git-core gitk git-gui curl lvm2 thin-provisioning-tools \
     python-pkg-resources python-virtualenv python-oauth2client xz-utils \
     python3.6

# If Python 3.5 is the default, switch it to Python 3.6.
python3 --version
# If above version says 3.5, you'll need to run:
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2
sudo update-alternatives --config python3
```

This command also installs git's graphical front end (`git gui`) and revision history browser (`gitk`).


### Install Google depot_tools

The depot_tools is a software package of scripts, provided by Google, to manage source code checkouts and code reviews. We need it to fetch the Chromium OS source code.

```bash
(outside)
$ sudo mkdir -p /usr/local/repo
$ sudo chmod 777 /usr/local/repo
$ cd /usr/local/repo
$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

```

Then add depot_tools directory to PATH and set up proper umask for the user who is going to perform the build. Add below lines to the file `~/.bash_profile` of that user. Or if you are using a different shell, handle that accordingly.

```bash
(outside)
export PATH=/usr/local/repo/depot_tools:$PATH
umask 022
```

Then re-login to make the above changes take effect.


### Configure git

Better configure git now or it may complain in some operations later.

```bash
(outside)
$ git config --global user.email ""you@email.address""
$ git config --global user.name ""Your Name""
```

<br>

# Get Chromium OS source code

### Create directory structure

The directory structure described here is a recommendation based on the best practice in the FydeOS team. You may host the files differently as you wish.

```bash
(outside)
# This is the directory to hold Chromium OS source code， aka cros-sdk
$ mkdir -p /path/to/cros-pi
```

If you are building a different release, make sure you use the actual directory name on your system, the name here mentioned is just an example.


### Fetch Chromium OS source code

First, you need to find out the reference name of the release you would like to build, by visiting this page [https://chromium.googlesource.com/chromiumos/manifest.git](https://chromium.googlesource.com/chromiumos/manifest.git):

You will see a list of Git commit IDs and its name in the form of `refs/heads/release-Rxx-xxxx.B`. That `release-Rxx-XXXX.B` link is what you need for fetching the code of that specific Chromium OS release. For example, [release-R102-14695.B](https://chromium.googlesource.com/chromiumos/manifest.git/+/refs/heads/release-R102-14695.B) for release r102.

Now run these commands to fetch the source code. Find and use a different release name if you would like to build a different release.

```bash
(outside)
#Assuming you understand what /path/to means. If not, replace it with '~'
$ cd /path/to/cros-pi

$ repo init -u https://chromium.googlesource.com/chromiumos/manifest.git --repo-url https://chromium.googlesource.com/external/repo.git -b release-R102-14695.B

# Raise this number if you have a fast internet connection
$ repo sync -j8
```

Fetching Chromium OS source code may take 20 to more than 40 minutes depending on your connection speed, around 10GB of data will need to be downloaded primarily from googlesource.com, it'd be helpful if you have a decent internet speed to reach Google's server.



### Request for Google API key

If you would like to login into the Chromium OS GUI by using your Google account, you will need to request for Google API key and include them in the disk image you build. Since the only authentication mechanism included in Chromium OS is Google ID, you probably will need this or you will only be able to log in as a guest user.

Apply for Google API on the Google website per [this document](http://www.chromium.org/developers/how-tos/api-keys). After acquiring the client ID, client secret and API key, put them in ```~/.googleapikeys``` file as in the below format.

```
'google_api_key': 'your api key',
'google_default_client_id': 'your client id',
'google_default_client_secret': 'your client secret',
```

Then the Chromium OS build script will read the necessary information from this file automatically, and the image you build will allow Google ID login.


<br>

# Setup Raspberry Pi overlay

Now fetch this overlay and also create symlinks in the designated place.

```bash
(outside)
$ cd /path/to/overlays
$ git clone https://github.com/fydeos/chromium_os-raspberry_pi.git .

$ cd /path/to/cros-pi/src/overlays
$ ln -s /path/to/overlays/* .
```

By now, your `cros-pi/src/overlays` directory should have included symbolic links for:

- `project-cros-pi`
- `baseboard-rpi3`
- `overlay-rpi3`
- `overlay-rpi4`
- `chipset-bcm2837`


<br>

# Setup local chromium source

It's recommended to build Chromium browser on your local setup so that your Chromium OS for Raspberry Pi could benefit from the additional functionalities like kiosk mode, you will also have the option to incorporate your modifications. If you wish to do so, you need to prepare the necessary files before entering the cros_sdk.

As far as this project is concerned, the chromium source that we use to build our releases can be found in the [chromium-raspberry_pi](https://github.com/FydeOS/chromium-raspberry_pi) project. You may also choose to use Google's vanilla chromium repository which can be found [here](https://chromium.googlesource.com/chromium/src.git/).

Note that we use a much simpler way to manage releases, with our [chromium-raspberry_pi](https://github.com/FydeOS/chromium-raspberry_pi) project you need to select the correct branch corresponding to the [repo manifest](#fetch-chromium-os-source-code) you used in the previous step to sync your Chromium OS code. For example, if you are building r102, you will then need to look out for ""`chromium-m102`"" branch under [chromium-raspberry_pi](https://github.com/FydeOS/chromium-raspberry_pi). The letter ""m"" stands for ""milestone"" and it correlates to the release number for Chromium OS(r102 in this case). Choosing an unmatched chromium milestone branch and Chromium OS repo will probably result in endless build errors.

With Google's repository, you need to choose a correct release tag rather than a branch. For example, if you are building r102, you can browse all existing chromium release tags on [this page](https://chromium.googlesource.com/chromium/src.git/) and deduce that the latest tag on your desired milestone version. At the point where this was written, this would be [102.0.5005.90](https://chromium.googlesource.com/chromium/src.git/+/refs/tags/102.0.5005.90).

Having understood the above, now create a directory parallel to your Chromium OS repo to house the chromium source:

```bash
(outside)
$ mkdir chromium-pi
$ cd chromium-pi
$ mkdir src
$ cd src
```

Now clone the desired chromium project:

```bash
(outside)
# use our chromium repo
$ git clone git@github.com:FydeOS/chromium-raspberry_pi.git .

# use google's vanilla chromium
$ git clone https://chromium.googlesource.com/chromium/src.git . 
```

Note that chromium is an absolute **HUGE** project, cloning the entire repo will require ~22GB of disk space and will require about 2 hours to complete even if you have a decent internet speed.

Then choose the correct branch/tag

```bash
(outside)
#with our chromium repo
$ git checkout chromium-m102

#with Google's repo and you wish to build for r102
$ git checkout 102.0.5005.90
```

Now you need to create a config file known to gclient for syncing the chromium dependencies:

```bash
(outside)
$ cd ..
# now you should be in /path/to/chromium-pi
$ touch .gclient
```

The .gclient file should have the following content, note that you should replace the correct branch name with the `url` field (in this example we use `chromium-m102`) you may also replace the `url` value to Google's per your setup.

```
solutions = [{'custom_deps': {},
  'custom_vars': {},
  'deps_file': '.DEPS.git',
  'managed': False,
  'name': 'src',
  'url': 'git@github.com:FydeOS/chromium-raspberry_pi.git@refs/remotes/origin/chromium-m102'}]
target_os = ['chromeos']
```

Now you can start syncing:

```bash
(outside)
$ gclient sync
```

Note, due to an existing issue with WebRTC, during syncing you may encounter a git related error complaining fetch failure(if you do not see such error, you can safely ignore this and move on). A temporary fix is to manually edit the `src/third_party/webrtc/.git/config` file under the WebRTC folder:

```
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote ""origin""]
        url = https://webrtc.googlesource.com/src.git
        fetch = +refs/heads/*:refs/remotes/origin/*
        fetch = +refs/branch-heads/*:refs/remotes/branch-heads/*
[branch ""master""]
        remote = origin
        merge = refs/heads/master
```

Once gclient sync is completed, the chromium source folder is now fully set up.


<br>

# Build Chromium OS for Raspberry Pi

### Create the chroot

As mentioned above, a chroot environment will be used to run the actual build process and some other related tasks. To create the chroot environment, run the below commands.

```
(outside)
$ cd /path/to/cros-pi
$ cros_sdk
```

If you wish to build your chromium and you have to follow the steps to set it up, you need to specify it when entering the cros_sdk by:


```bash
(outside)
$ cd /path/to/cros-pi
$ cros_sdk --chrome-root /path/to/your/chromium-pi #absolute path needed
```


It may take 10 to over 30 minutes depending on your internet connection speed and disk i/o speed. Once finished, it will enter into the chroot. The shell prompt string looks like below so it is very easy to tell whether you are currently in the chroot or not.

```
(inside)
(release-R102-14695.B/(xxxxxx...)) <user>@<host> ~/trunk/src/scripts $
```

The chroot environment is located under the `/path/to/cros-pi/chroot` directory.

Let's exit from the chroot first as we need to do some customisation before moving on. Type `exit` or `ctrl + d` to exit from the chroot shell.

Usually, the chroot only needs to be created once and can be used to build a board many times or build different boards. It very rarely needs to be removed/re-created.


### Delete the chroot

If you would like to remove the chroot and re-create it from scratch, don't delete the `chroot` directory directly. As there could be directories from the host OS bind mounted in the chroot, an `rm chroot` command could remove files from your host OS undesirably.

The correct way to remove the chroot is by using the below commands.

```bash
(outside)
$ cd /path/to/cros-pi
$ cros_sdk --delete
```


### Setup bind mount directories for chroot

Programs running inside the chroot will not be able to access files outside of the chroot. One way to circumvent this is to bind-mount those files into a directory inside the chroot.

When entering the Chromium OS chroot environment, a file named `.local_mounts` will be checked and directories listed in it will be bind-mounted inside the chroot. All we need to do is to create this file in the right place and put the necessary contents in, by using the below command.

```bash
(outside)
$ echo ""/path/to/overlays"" > /path/to/cros-pi/src/scripts/.local_mounts
```

Now, after entering the chroot, a `/path/to/overlays` directory will exist in the chroot and its content is the same as the `/path/to/overlays` directory in the host OS, as it is bind-mounted from the host OS.

If we don't do this, the `/path/to/cros-pi/src/overlays/overlay-rpi4` symbolic link will not be accessible, as the top directory (`/path/to/overlays`) it points to doesn't exist in the chroot.


### Enter the chroot

Now we can enter the chroot.

```bash
(outside)
$ cd /path/to/cros-pi
$ cros_sdk
```

It is the same command used to create the chroot. It creates the chroot if one does not exist and enters the chroot if there is already one.

And we can check whether the above `.local_mounts` setup was done correctly. 

```bash
(inside)
$ ls /path/to/overlays/             # You should be able to see the same content as in the host OS.
$ ls ../overlays/overlay-rpi4/      # You should be able to see the content of this repo.
```

Move on if it works well. If not, check and make sure you set up `.local_mounts` correctly.


### Set password for the chronos user

The chronos user is used to log into the command line interface of Chromium OS, via ssh, local console or the shell in crosh interface. It is recommended that a password is set for this user so you can log in as this user and also can do `sudo` in the Chromium OS command line, for advanced tasks.

To set a password for the chronos user, run the below command.

```bash
(inside)
$ ./set_shared_user_password.sh
```

Type in a password when prompted. If you would like to change the password, simply run the command again.

The password is encrypted and saved in the file `/etc/shared_user_passwd.txt` in the chroot. You only need to set it once and it will be used for all the images you build unless you re-create the chroot.


### Setup Raspberry Pi board

In the Chromium OS terminology, a board refers to a class of computer platforms with distinct hardware configurations. The board will be used as a target in the process of building software packages and disk images for that specific computer platform.

There are many boards in the Chromium OS code base. They are either development platforms or real selling hardware products running Chrome OS, such as Chromebooks you can buy from many vendors.

The Chromium OS project utilises the Portage package management system from Gentoo Linux. Each board lives in its own ""overlay"", which holds distinct build configuration, system configurations, collection of software packages, system services, disk image customisation etc. for that board.

In our case here, we created a board named ""rpi4"" which refers to the Raspberry Pi 4B. We call the overlay ""overlay-rpi4"" and all its files are hosted in this repository.

To build Chromium OS for a board, the first thing is to initialise the board from its overlay.

**Beginning from release 86 and onwards, we have done some efforts to add Raspberry Pi 3B/3B+ support to the Raspberry Pi 4B overlay. In the following steps, we will be using the rpi4 board as an example, the resulting image will also likely work on both Raspberry Pi 3B/3B+.**

```bash
(inside)
$ setup_board --board=rpi4
```

Again, it may take 10 to over 30 minutes depending on the speed of your internet connection and disk i/o.

Once it's done, a directory structure for the ""rpi4"" board will be created under `/build/rpi4` of the chroot.


### Re-initialise the board

It is usually not necessary to re-initialise the board as what you have already built will be lost, and you will have to spend hours rebuilding all packages from scratch. But if you need to do so, just re-run the same setup_board command with the `---force` option.

```bash
(inside)
$ setup_board --board=rpi4 --force
```

The `--force` option will remove the existing board directory `/build/rpi4` and re-create it from scratch.


### Build packages

Now it is time to build all software packages for the rpi4 board.

```bash
(inside)
$ ./build_packages --board=rpi4 --nowithautotest 
# Append ""--nowithautotest"" to speed up the build process by skipping some tests
```

It may take hours depending on your processor power, your memory size, your disk speed and the quality of your internet connection. Here are some examples for you to adjust your expectation: 

- On a decent machine with 4 cores 8 threads, 16GB memory, files on regular HDD, and 100Mb broadband, it takes about 5 to 6 hours for the command to finish.
- On a Workstation-grade server with AMD Threadripper 3990x CPU with 64-core 128-thread, 128GB memory and 300Mb broadband, it takes 44mins for the command to finish.


### Things to note

- **What is happening now**

  The `build_packages` script acts as an entry point to initialise a series of processes aiming to compile all the necessary software packages from source code and build them together forming Chromium OS as a whole. During the process there are a few required dependencies will be fetched and cloned from GitHub, so please do ensure a decent internet connection to github.com.


- **When interrupted**

  The build process is incremental. If it gets interrupted for any reason, you can always re-run the same `build_packages` command and it will resume the build instead of rebuilding from scratch.

- **Read the output**

  The `build_packages` command throws out a lot of information on the console. Fortunately, that information is very well organised.

  - <span style=""color:red"">Red text</span>: these are error messages and very likely will cause the build process to break.
  - <span style=""color:green"">Green text</span>: these are useful messages printed by the build script itself. They are useful when debugging problem.
  - White text: these are regular information that mostly is printed by the commands called in the build script. They provide more details about the build process and thus are also useful for debugging.

- **Read the logs**

  The `build_packages` script spends most of its airtime on running the `emerge` commands, to build, install and pack those hundreds of software packages required by the overlay. The `emerge` command is from the Portage system of Gentoo Linux.

  The `emerge` command saves the output of its building, installation and packing process into log files. These files are extremely useful if there is a failure when building packages. Those log files are located under the `/build/rpi4/tmp/portage/logs` directory of the chroot. They are plain text files so can be viewed right from your command-line interface.


### Build the disk image

After the build_packages command is finished successfully, you can start building the disk image.

```bash
(inside)
$ ./build_image --board=rpi4 --noenable_rootfs_verification
# Append --noenable_rootfs_verification flag to enable root file system read/write on the built image
```

It may take 10 to 30 minutes, mainly depending on the speed of your disk. It will be much faster on SSD than on HDD.


### Find your image

After the command finished successfully, you will have disk images generated, saved under `/mnt/host/source/src/build/images/rpi4/` directory in the chroot, or `/path/to/cros-pi/src/build/images/rpi4` in the host OS. These two are the same directory, just bind mounted in the chroot.

Each invocation of the build_image command will create a directory named similar to `R102-XXXX.XXX.<date time>-a1` under above directory. There is a symlink named `latest` under the above directory, that always points to the image directory of the last successful build.

The disk image is usually named `chromiumos_image.bin`, under the abovementioned directory. So full path to the latest image is

```
/mnt/host/source/src/build/images/rpi4/latest/chromiumos_image.bin
```

in the chroot, and

```
/path/to/cros-pi/src/build/images/rpi4/latest/chromiumos_image.bin
```

in the host OS.


<br>

# Boot Raspberry Pi from the image

The Raspberry Pi boots from the SD card so we need to write the previously generated disk image onto the SD card. An SD card of at least 8GB capacity is required.


### Write the disk image to an SD card

There are two usual ways to write the Chromium OS disk image to an SD card. You can copy the image out to another Windows/macOS/Linux system and write it using your favourite GUI/CLI application. It is the same as writing other Linux images for Raspberry Pi, so will not be explained here.

Another Chromium OS-specific way is by using the `cros` command in the chroot.


### Write the image by using the `cros` command

First, plug the SD card into the box used to build the image and has the chroot. Then run the below command.

```
(inside)
$ cros flash usb:// rpi4/latest
```

This asks to write the latest disk image to USB removable media. A list of USB removable media will be presented, with the index number prefixed. You can select which USB drive to write to by typing in the index number when prompted.



### Boot from the SD card

After the disk image is successfully written to the SD card, plug it into the Raspberry Pi and boot it as usual. After a few seconds, you will see a Chromium logo, later on, it will boot into GUI mode and the first time setup screen (OOBE) will pop up for you to configure the system and log in.


<br>

# Video demonstration of the build process

<https://youtu.be/og4wzzIfGA0>


<br>

# More information

[Chromium OS Developer Guide](http://www.chromium.org/chromium-os/developer-guide). This is the official source of how to build Chromium OS.

[openFyde](https://openfyde.io), the open-sourced version of FydeOS.

[The FydeOS website](https://fydeos.io), our home.

[FydeOS official Telegram group](https://t.me/hi_fydeos), to say hi and get help.


<br>

# About us

Fyde began with a vision where all applications and services we use today will be living in the Cloud. We believed that with the ever-advancing browser platform technology and web frontend performances, it’s not surprising that most things we do today with the internet can be done through a single browser window. We are stepping into an era where installable apps will soon become history. FydeOS is our answer to this new era of computing.

FydeOS is a simple, secure, fast and productive operating system. Based on the open-source Chromium Project that also powers the well-known Google Chromebooks. FydeOS inherits most of the benefits that Chromebooks have but is also bundled with our enhancements and new features. We have turned FydeOS into a more open platform, users will no longer be forced to rely on Google services and have the freedom to choose whichever services they prefer. We have also made FydeOS run on a wider range of hardware platforms ranging from x86 PCs and ARM-based single board computers, providing endless possibilities and potentials of how FydeOS can be used and applied.
","This document describes how to build and run Google [Chromium
OS](https://www.chromium.org/chromium-os) on Raspberry Pi 3B, 3B+, 4B and the Pi
400 personal computer kit(Pi400 hereafter) The code and document in this
repository are the results of works by the people of the FydeOS team. You are
welcome to test it with future releases and send feedback and/or PRs. The
Chromium OS build process runs in parallel so more cores can help shorten build
time dramatically."
1534,"Angular testing library for mocking components, directives, pipes, services and facilitating TestBed setup","[<img src=""https://img.shields.io/gitter/room/help-me-mom/ng-mocks"" alt=""chat on gitter"" width=""90"" height=""20"" />](https://gitter.im/ng-mocks/community)
[<img src=""https://img.shields.io/npm/v/ng-mocks"" alt=""npm version"" width=""88"" height=""20"" />](https://www.npmjs.com/package/ng-mocks)
[<img src=""https://img.shields.io/circleci/build/github/help-me-mom/ng-mocks/master"" alt=""build status"" width=""88"" height=""20"" />](https://app.circleci.com/pipelines/github/help-me-mom/ng-mocks?branch=master)
[<img src=""https://img.shields.io/coveralls/github/help-me-mom/ng-mocks/master"" alt=""coverage status"" width=""104"" height=""20"" />](https://coveralls.io/github/help-me-mom/ng-mocks?branch=master)

# Mock components, services and more out of annoying dependencies for simplification of Angular testing

`ng-mocks` facilitates **Angular testing** and helps to:

- **mock Components**, Directives, Pipes, Modules, Services and Tokens
- reduce boilerplate in tests
- access declarations via simple interface

The current version of the library **has been tested** and **can be used** with:

| Angular | ng-mocks | Jasmine | Jest | Ivy |
| ------: | :------: | :-----: | :--: | :-: |
|      15 |  latest  |   yes   | yes  | yes |
|      14 |  latest  |   yes   | yes  | yes |
|      13 |  latest  |   yes   | yes  | yes |
|      12 |  latest  |   yes   | yes  | yes |
|      11 |  latest  |   yes   | yes  | yes |
|      10 |  latest  |   yes   | yes  | yes |
|       9 |  latest  |   yes   | yes  | yes |
|       8 |  latest  |   yes   | yes  |     |
|       7 |  latest  |   yes   | yes  |     |
|       6 |  latest  |   yes   | yes  |     |
|       5 |  latest  |   yes   | yes  |     |

## Important links

- **[Documentation with examples of Angular testing](https://ng-mocks.sudo.eu)**
- [CHANGELOG](https://github.com/help-me-mom/ng-mocks/blob/master/CHANGELOG.md)
- [GitHub repo](https://github.com/help-me-mom/ng-mocks)
- [NPM package](https://www.npmjs.com/package/ng-mocks)

* Live [example on StackBlitz](https://stackblitz.com/github/help-me-mom/ng-mocks-sandbox?file=src/test.spec.ts)
* Live [example on CodeSandbox](https://codesandbox.io/s/github/help-me-mom/ng-mocks-sandbox?file=/src/test.spec.ts)

- [chat on gitter](https://gitter.im/ng-mocks/community)
- **[ask a question on Stackoverflow](https://stackoverflow.com/questions/ask?tags=ng-mocks%20angular%20testing%20mocking)**
- [report an issue on GitHub](https://github.com/help-me-mom/ng-mocks/issues)

## Very short introduction

Global configuration for mocks in `src/test.ts`.
In case of jest, `src/setup-jest.ts` / `src/test-setup.ts` should be used.

```ts title=""src/test.ts""
// All methods in mock declarations and providers
// will be automatically spied on their creation.
// https://ng-mocks.sudo.eu/extra/auto-spy
ngMocks.autoSpy('jasmine'); // or jest

// ngMocks.defaultMock helps to customize mocks
// globally. Therefore, we can avoid copy-pasting
// among tests.
// https://ng-mocks.sudo.eu/api/ngMocks/defaultMock
ngMocks.defaultMock(AuthService, () => ({
  isLoggedIn$: EMPTY,
  currentUser$: EMPTY,
}));
```

An example of a spec for a profile edit component.

```ts title=""src/profile.component.spec.ts""
// Let's imagine that there is a ProfileComponent
// and it has 3 text fields: email, firstName,
// lastName, and a user can edit them.
// In the following test suite, we would like to
// cover behavior of the component.
describe('profile:builder', () => {
  // Helps to reset customizations after each test.
  MockInstance.scope();

  // Let's configure TestBed via MockBuilder.
  // The code below says to mock everything in
  // ProfileModule except ProfileComponent and
  // ReactiveFormsModule.
  beforeEach(() => {
    // The result of MockBuilder should be returned.
    // https://ng-mocks.sudo.eu/api/MockBuilder
    return MockBuilder(
      ProfileComponent,
      ProfileModule,
    ).keep(ReactiveFormsModule);
    // // or old fashion way
    // return TestBed.configureTestingModule({
    //   imports: [
    //     MockModule(SharedModule), // mock
    //     ReactiveFormsModule, // real
    //   ],
    //   declarations: [
    //     ProfileComponent, // real
    //     MockPipe(CurrencyPipe), // mock
    //     MockDirective(HoverDirective), // mock
    //   ],
    //   providers: [
    //     MockProvider(AuthService), // mock
    //   ],
    // }).compileComponents();
  });

  // A test to ensure that ProfileComponent
  // can be created.
  it('should be created', () => {
    // MockRender is an advanced version of
    // TestBed.createComponent.
    // It respects all lifecycle hooks,
    // onPush change detection, and creates a
    // wrapper component with a template like
    // <app-root ...allInputs></profile>
    // and renders it.
    // It also respects all lifecycle hooks.
    // https://ng-mocks.sudo.eu/api/MockRender
    const fixture = MockRender(ProfileComponent);

    expect(
      fixture.point.componentInstance,
    ).toEqual(assertion.any(ProfileComponent));
  });

  // A test to ensure that the component listens
  // on ctrl+s hotkey.
  it('saves on ctrl+s hot key', () => {
    // A fake profile.
    const profile = {
      email: 'test2@email.com',
      firstName: 'testFirst2',
      lastName: 'testLast2',
    };

    // A spy to track save calls.
    // MockInstance helps to configure mock
    // providers, declarations and modules
    // before their initialization and usage.
    // https://ng-mocks.sudo.eu/api/MockInstance
    const spySave = MockInstance(
      StorageService,
      'save',
      jasmine.createSpy(), // or jest.fn()
    );

    // Renders <profile [profile]=""params.profile"">
    // </profile>.
    // https://ng-mocks.sudo.eu/api/MockRender
    const { point } = MockRender(
      ProfileComponent,
      { profile }, // bindings
    );

    // Let's change the value of the form control
    // for email addresses with a random value.
    // ngMocks.change finds a related control
    // value accessor and updates it properly.
    // https://ng-mocks.sudo.eu/api/ngMocks/change
    ngMocks.change(
      '[name=email]', // css selector
      'test3@em.ail', // an email address
    );

    // Let's ensure that nothing has been called.
    expect(spySave).not.toHaveBeenCalled();

    // Let's assume that there is a host listener
    // for a keyboard combination of ctrl+s,
    // and we want to trigger it.
    // ngMocks.trigger helps to emit events via
    // simple interface.
    // https://ng-mocks.sudo.eu/api/ngMocks/trigger
    ngMocks.trigger(point, 'keyup.control.s');

    // The spy should be called with the user
    // and the random email address.
    expect(spySave).toHaveBeenCalledWith({
      email: 'test3@em.ail',
      firstName: profile.firstName,
      lastName: profile.lastName,
    });
  });
});
```

Profit.

## Extra

If you like `ng-mocks`, please support it:

- [with a star on GitHub](https://github.com/help-me-mom/ng-mocks)
- [with a tweet](https://twitter.com/intent/tweet?text=Check%20ng-mocks%20package%20%23angular%20%23testing%20%23mocking&url=https%3A%2F%2Fgithub.com%2Fike18t%2Fng-mocks)

Thank you!

P.S. Feel free to [contact us](https://ng-mocks.sudo.eu/need-help) if you need help.
","ng-mocks is a tool to mock components, services and more out of annoying
dependencies for simplification of Angular testing. The current version of the
library **has been tested** and can be used with: Jasmine, Jest, Ivy, Ivy and
Jasmine."
2271,"The fastai book, published as Jupyter Notebooks","[English](./README.md) / [Spanish](./README_es.md) / [Korean](./README_ko.md) / [Chinese](./README_zh.md) / [Bengali](./README_bn.md) / [Indonesian](./README_id.md) / [Italian](./README_it.md) / [Portuguese](./README_pt.md) / [Vietnamese](./README_vn.md)

# The fastai book

These notebooks cover an introduction to deep learning, [fastai](https://docs.fast.ai/), and [PyTorch](https://pytorch.org/). fastai is a layered API for deep learning; for more information, see [the fastai paper](https://www.mdpi.com/2078-2489/11/2/108). Everything in this repo is copyright Jeremy Howard and Sylvain Gugger, 2020 onwards. A selection of chapters is available to [read online here](https://fastai.github.io/fastbook2e/).

The notebooks in this repo are used for [a MOOC](https://course.fast.ai) and form the basis of [this book](https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527), which is currently available for purchase. It does not have the same GPL restrictions that are on this repository.

The code in the notebooks and python `.py` files is covered by the GPL v3 license; see the LICENSE file for details. The remainder (including all markdown cells in the notebooks and other prose) is not licensed for any redistribution or change of format or medium, other than making copies of the notebooks or forking this repo for your own private use. No commercial or broadcast use is allowed. We are making these materials freely available to help you learn deep learning, so please respect our copyright and these restrictions.

If you see someone hosting a copy of these materials somewhere else, please let them know that their actions are not allowed and may lead to legal action. Moreover, they would be hurting the community because we're not likely to release additional materials in this way if people ignore our copyright.

## Colab

Instead of cloning this repo and opening it on your machine, you can read and work with the notebooks using [Google Colab](https://research.google.com/colaboratory/). This is the recommended approach for folks who are just getting started -- there's no need to set up a Python development environment on your own machine, since you can just work directly in your web-browser.

You can open any chapter of the book in Colab by clicking on one of these links: [Introduction to Jupyter](https://colab.research.google.com/github/fastai/fastbook/blob/master/app_jupyter.ipynb) | [Chapter 1, Intro](https://colab.research.google.com/github/fastai/fastbook/blob/master/01_intro.ipynb) | [Chapter 2, Production](https://colab.research.google.com/github/fastai/fastbook/blob/master/02_production.ipynb) | [Chapter 3, Ethics](https://colab.research.google.com/github/fastai/fastbook/blob/master/03_ethics.ipynb) | [Chapter 4, MNIST Basics](https://colab.research.google.com/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb) | [Chapter 5, Pet Breeds](https://colab.research.google.com/github/fastai/fastbook/blob/master/05_pet_breeds.ipynb) | [Chapter 6, Multi-Category](https://colab.research.google.com/github/fastai/fastbook/blob/master/06_multicat.ipynb) | [Chapter 7, Sizing and TTA](https://colab.research.google.com/github/fastai/fastbook/blob/master/07_sizing_and_tta.ipynb) | [Chapter 8, Collab](https://colab.research.google.com/github/fastai/fastbook/blob/master/08_collab.ipynb) | [Chapter 9, Tabular](https://colab.research.google.com/github/fastai/fastbook/blob/master/09_tabular.ipynb) | [Chapter 10, NLP](https://colab.research.google.com/github/fastai/fastbook/blob/master/10_nlp.ipynb) | [Chapter 11, Mid-Level API](https://colab.research.google.com/github/fastai/fastbook/blob/master/11_midlevel_data.ipynb) | [Chapter 12, NLP Deep-Dive](https://colab.research.google.com/github/fastai/fastbook/blob/master/12_nlp_dive.ipynb) | [Chapter 13, Convolutions](https://colab.research.google.com/github/fastai/fastbook/blob/master/13_convolutions.ipynb) | [Chapter 14, Resnet](https://colab.research.google.com/github/fastai/fastbook/blob/master/14_resnet.ipynb) | [Chapter 15, Arch Details](https://colab.research.google.com/github/fastai/fastbook/blob/master/15_arch_details.ipynb) | [Chapter 16, Optimizers and Callbacks](https://colab.research.google.com/github/fastai/fastbook/blob/master/16_accel_sgd.ipynb) | [Chapter 17, Foundations](https://colab.research.google.com/github/fastai/fastbook/blob/master/17_foundations.ipynb) | [Chapter 18, GradCAM](https://colab.research.google.com/github/fastai/fastbook/blob/master/18_CAM.ipynb) | [Chapter 19, Learner](https://colab.research.google.com/github/fastai/fastbook/blob/master/19_learner.ipynb) | [Chapter 20, conclusion](https://colab.research.google.com/github/fastai/fastbook/blob/master/20_conclusion.ipynb)


## Contributions

If you make any pull requests to this repo, then you are assigning copyright of that work to Jeremy Howard and Sylvain Gugger. (Additionally, if you are making small edits to spelling or text, please specify the name of the file and a very brief description of what you're fixing. It's difficult for reviewers to know which corrections have already been made. Thank you.)

## Citations

If you wish to cite the book, you may use the following:

```
@book{howard2020deep,
title={Deep Learning for Coders with Fastai and Pytorch: AI Applications Without a PhD},
author={Howard, J. and Gugger, S.},
isbn={9781492045526},
url={https://books.google.no/books?id=xd6LxgEACAAJ},
year={2020},
publisher={O'Reilly Media, Incorporated}
}
```

","The fastai book covers an introduction to deep learning. The code in the
notebooks and python `.py` files is covered by the GPL v3 license; see the
LICENSE file for details. Everything in this repo is copyright Jeremy Howard and
Sylvain Gugger, 2020 onwards. No commercial or broadcast use is allowed."
1309,Java wrapper for the popular chat & VOIP service: Discord https://discord.com,"[maven-central]: https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue
[jitpack]: https://img.shields.io/badge/Snapshots-JitPack-blue
[download]: #download
[discord-invite]: https://discord.gg/0hMr4ce0tIl3SLv5
[migration]: https://jda.wiki/introduction/migration-v3-v4/
[jenkins]: https://ci.dv8tion.net/job/JDA5
[license]: https://github.com/DV8FromTheWorld/JDA/tree/master/LICENSE
[faq]: https://jda.wiki/introduction/faq/
[troubleshooting]: https://jda.wiki/using-jda/troubleshooting/
[discord-shield]: https://discord.com/api/guilds/125227483518861312/widget.png
[faq-shield]: https://img.shields.io/badge/Wiki-FAQ-blue.svg
[troubleshooting-shield]: https://img.shields.io/badge/Wiki-Troubleshooting-darkgreen.svg
[jenkins-shield]: https://img.shields.io/badge/Download-Jenkins-purple.svg
[license-shield]: https://img.shields.io/badge/License-Apache%202.0-white.svg
[migration-shield]: https://img.shields.io/badge/Wiki-Migrating%20from%20V3-darkgreen.svg

<img align=""right"" src=""https://github.com/DV8FromTheWorld/JDA/blob/assets/assets/readme/logo.png?raw=true"" height=""200"" width=""200"">

[ ![maven-central][] ][download]
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)
[ ![jenkins-shield][] ][jenkins]
[ ![license-shield][] ][license]

[ ![discord-shield][] ][discord-invite]
[ ![faq-shield] ][faq]
[ ![troubleshooting-shield] ][troubleshooting]
[ ![migration-shield][] ][migration]


# JDA (Java Discord API)

JDA strives to provide a clean and full wrapping of the Discord REST api and its Websocket-Events for Java.
This library is a helpful tool that provides the functionality to create a discord bot in java.

## Summary

Due to official statements made by the Discord developers we will no longer support unofficial features. These features
are undocumented API endpoints or protocols that are not available to bot-accounts.

_Please see the [Discord docs](https://discord.com/developers/docs/reference) for more information about bot accounts._

1. [Introduction](#creating-the-jda-object)
2. [Sharding](#sharding-a-bot)
3. [Entity Lifetimes](#entity-lifetimes)
4. [Download](#download)
5. [Documentation](#documentation)
6. [Support](#getting-help)
7. [Extensions And Plugins](#third-party-recommendations)
8. [Contributing](#contributing-to-jda)
9. [Dependencies](#dependencies)
10. [Other Libraries](#related-projects)

## UserBots and SelfBots

Discord is currently prohibiting creation and usage of automated client accounts (AccountType.CLIENT).
We have officially dropped support for client login as of version **4.2.0**!
Note that JDA is not a good tool to build a custom discord client as it loads all servers/guilds on startup unlike
a client which does this via lazy loading instead.
If you need a bot, use a bot account from the [Application Dashboard](https://discord.com/developers/applications).

[Read More](https://support.discord.com/hc/en-us/articles/115002192352-Automated-user-accounts-self-bots-)

## Creating the JDA Object

Creating the JDA Object is done via the JDABuilder class. After setting the token and other options via setters,
the JDA Object is then created by calling the `build()` method. When `build()` returns,
JDA might not have finished starting up. However, you can use `awaitReady()`
on the JDA object to ensure that the entire cache is loaded before proceeding.
Note that this method is blocking and will cause the thread to sleep until startup has completed.

**Example**:

```java
JDA jda = JDABuilder.createDefault(""token"").build();
```

### Configuration

Both the `JDABuilder` and the `DefaultShardManagerBuilder` allow a set of configurations to improve the experience.

**Example**:

```java
public static void main(String[] args) {
    JDABuilder builder = JDABuilder.createDefault(args[0]);
    
    // Disable parts of the cache
    builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);
    // Enable the bulk delete event
    builder.setBulkDeleteSplittingEnabled(false);
    // Set activity (like ""playing Something"")
    builder.setActivity(Activity.watching(""TV""));
    
    builder.build();
}
```

> See [JDABuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/JDABuilder.html)
  and [DefaultShardManagerBuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html)

You can configure the memory usage by changing enabled `CacheFlags` on the `JDABuilder`.
Additionally, you can change the handling of member/user cache by setting either a `ChunkingFilter`, disabling **intents**, or changing the **member cache policy**.

```java
public void configureMemoryUsage(JDABuilder builder) {
    // Disable cache for member activities (streaming/games/spotify)
    builder.disableCache(CacheFlag.ACTIVITY);

    // Only cache members who are either in a voice channel or owner of the guild
    builder.setMemberCachePolicy(MemberCachePolicy.VOICE.or(MemberCachePolicy.OWNER));

    // Disable member chunking on startup
    builder.setChunkingFilter(ChunkingFilter.NONE);

    // Disable presence updates and typing events
    builder.disableIntents(GatewayIntent.GUILD_PRESENCE, GatewayIntent.GUILD_MESSAGE_TYPING);

    // Consider guilds with more than 50 members as ""large"". 
    // Large guilds will only provide online members in their setup and thus reduce bandwidth if chunking is disabled.
    builder.setLargeThreshold(50);
}
```

### Listening to Events

The event system in JDA is configured through a hierarchy of classes/interfaces.
We offer two implementations for the `IEventManager`:

- **InterfacedEventManager** which uses an `EventListener` interface and the `ListenerAdapter` abstract class
- **AnnotatedEventManager** which uses the `@SubscribeEvent` annotation that can be applied to methods

By default the **InterfacedEventManager** is used.
Since you can create your own implementation of `IEventManager` this is a very versatile and configurable system.
If the aforementioned implementations don't suit your use-case you can simply create a custom implementation and
configure it on the `JDABuilder` with `setEventManager(...)`.

#### Examples:

**Using EventListener**:

```java
public class ReadyListener implements EventListener
{
    public static void main(String[] args)
            throws InterruptedException
    {
        // Note: It is important to register your ReadyListener before building
        JDA jda = JDABuilder.createDefault(""token"")
            .addEventListeners(new ReadyListener())
            .build();

        // optionally block until JDA is ready
        jda.awaitReady();
    }

    @Override
    public void onEvent(GenericEvent event)
    {
        if (event instanceof ReadyEvent)
            System.out.println(""API is ready!"");
    }
}
```

**Using ListenerAdapter**:

```java
public class MessageListener extends ListenerAdapter
{
    public static void main(String[] args)
    {
        JDA jda = JDABuilder.createDefault(""token"")
                .enableIntents(GatewayIntent.MESSAGE_CONTENT) // enables explicit access to message.getContentDisplay()
                .build();
        //You can also add event listeners to the already built JDA instance
        // Note that some events may not be received if the listener is added after calling build()
        // This includes events such as the ReadyEvent
        jda.addEventListener(new MessageListener());
    }

    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        if (event.isFromType(ChannelType.PRIVATE))
        {
            System.out.printf(""[PM] %s: %s\n"", event.getAuthor().getName(),
                                    event.getMessage().getContentDisplay());
        }
        else
        {
            System.out.printf(""[%s][%s] %s: %s\n"", event.getGuild().getName(),
                        event.getTextChannel().getName(), event.getMember().getEffectiveName(),
                        event.getMessage().getContentDisplay());
        }
    }
}
```

**Slash-Commands**:

```java
public class Bot extends ListenerAdapter
{
    public static void main(String[] args)
    {
        if (args.length < 1) {
            System.out.println(""You have to provide a token as first argument!"");
            System.exit(1);
        }
        // args[0] would be the token (using an environment variable or config file is preferred for security)
        // We don't need any intents for this bot. Slash commands work without any intents!
        JDA jda = JDABuilder.createLight(args[0], Collections.emptyList())
            .addEventListeners(new Bot())
            .setActivity(Activity.playing(""Type /ping""))
            .build();

        // Sets the global command list to the provided commands (removing all others)
        jda.updateCommands().addCommands(
            Commands.slash(""ping"", ""Calculate ping of the bot""),
            Commands.slash(""ban"", ""Ban a user from the server"")
                    .setDefaultPermissions(DefaultMemberPermissions.enabledFor(Permission.BAN_MEMBERS)) // only usable with ban permissions
                    .setGuildOnly(true) // Ban command only works inside a guild
                    .addOption(OptionType.USER, ""user"", ""The user to ban"", true) // required option of type user (target to ban)
                    .addOption(OptionType.STRING, ""reason"", ""The ban reason"") // optional reason
        ).queue();
    }
    
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event)
    {
        // make sure we handle the right command
        switch (event.getName()) {
            case ""ping"":
                long time = System.currentTimeMillis();
                event.reply(""Pong!"").setEphemeral(true) // reply or acknowledge
                     .flatMap(v ->
                          event.getHook().editOriginalFormat(""Pong: %d ms"", System.currentTimeMillis() - time) // then edit original
                     ).queue(); // Queue both reply and edit
                break;
            case ""ban"":
                // double check permissions, don't trust discord on this!
                if (!event.getMember().hasPermission(Permission.BAN_MEMBERS)) {
                    event.reply(""You cannot ban members! Nice try ;)"").setEphemeral(true).queue();
                    break;
                }
                User target = event.getOption(""user"", OptionMapping::getUser);
                // optionally check for member information
                Member member = event.getOption(""user"", OptionMapping::getMember);
                if (!event.getMember().canInteract(member)) {
                    event.reply(""You cannot ban this user."").setEphemeral(true).queue();
                    break;
                }
                // Before starting our ban request, tell the user we received the command
                // This sends a ""Bot is thinking..."" message which is later edited once we finished
                event.deferReply().queue();
                String reason = event.getOption(""reason"", OptionMapping::getAsString);
                AuditableRestAction<Void> action = event.getGuild().ban(target, 0); // Start building our ban request
                if (reason != null) // reason is optional
                    action = action.reason(reason); // set the reason for the ban in the audit logs and ban log
                action.queue(v -> {
                    // Edit the thinking message with our response on success
                    event.getHook().editOriginal(""**"" + target.getAsTag() + ""** was banned by **"" + event.getUser().getAsTag() + ""**!"").queue();
                }, error -> {
                    // Tell the user we encountered some error
                    event.getHook().editOriginal(""Some error occurred, try again!"").queue();
                    error.printStackTrace();
                });
        }
    }
}
```

### RestAction

Through [RestAction](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html) we provide request handling with
 
 - [callbacks](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#queue%28java.util.function.Consumer%29)
 - [promises](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#submit%28%29)
 - and [sync](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#complete%28%29)

and it is up to the user to decide which pattern to utilize.
It can be combined with reactive libraries such as [reactor-core](https://github.com/reactor/reactor-core) due to being lazy.

The RestAction interface also supports a number of operators to avoid callback hell:

- [`map`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#map%28java.util.function.Function%29)
    Convert the result of the `RestAction` to a different value
- [`flatMap`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#flatMap%28java.util.function.Function%29)
    Chain another `RestAction` on the result
- [`delay`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#delay%28java.time.Duration%29)
    Delay the element of the previous step

**Example**:

```java
public RestAction<Void> selfDestruct(MessageChannel channel, String content) {
    return channel.sendMessage(""The following message will destroy itself in 1 minute!"")
        .delay(10, SECONDS, scheduler) // edit 10 seconds later
        .flatMap((it) -> it.editMessage(content))
        .delay(1, MINUTES, scheduler) // delete 1 minute later
        .flatMap(Message::delete);
}
```

### More Examples

We provide a small set of Examples in the [Example Directory](https://github.com/DV8FromTheWorld/JDA/tree/master/src/examples/java).

<!--
TODO: Find good examples
- [JDA Butler](https://github.com/Almighty-Alpaca/JDA-Butler)

[And many more!](https://github.com/search?q=JDA+discord+bot&type=Repositories&utf8=%E2%9C%93)
-->

## Sharding a Bot

Discord allows Bot-accounts to share load across sessions by limiting them to a fraction of the total connected Guilds/Servers of the bot.
<br>This can be done using **sharding** which will limit JDA to only a certain amount of Guilds/Servers including events and entities.
Sharding will limit the amount of Guilds/Channels/Users visible to the JDA session so it is recommended to have some kind of elevated management to
access information of other shards.

To use sharding in JDA you will need to use `JDABuilder.useSharding(int shardId, int shardTotal)`. The **shardId** is 0-based which means the first shard
has the ID 0. The **shardTotal** is the total amount of shards (not 0-based) which can be seen similar to the length of an array, the last shard has the ID of
`shardTotal - 1`.

The [`SessionController`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/utils/SessionController.html) is a tool of the JDABuilder
that allows to control state and behaviour between shards (sessions). When using multiple builders to build shards you have to create one instance
of this controller and add the same instance to each builder: `builder.setSessionController(controller)`

Since version **3.4.0** JDA provides a `ShardManager` which automates this building process.

### Example Sharding - Using JDABuilder

```java
public static void main(String[] args) throws Exception
{
    JDABuilder shardBuilder = JDABuilder.createDefault(args[0]);
    //register your listeners here using shardBuilder.addEventListeners(...)
    shardBuilder.addEventListeners(new MessageListener());
    for (int i = 0; i < 10; i++)
    {
        shardBuilder.useSharding(i, 10)
                    .build();
    }
}
```

> When the `useSharding` method is invoked for the first time, the builder automatically sets a SessionController internally (if none is present)

### Example Sharding - Using DefaultShardManager
```java
public static void main(String[] args) throws Exception
{
    DefaultShardManagerBuilder builder = DefaultShardManagerBuilder.createDefault(args[0]);
    builder.addEventListeners(new MessageListener());
    builder.build();
}
```

## Entity Lifetimes

An **Entity** is the term used to describe types such as **GuildChannel**/**Message**/**User** and other entities that Discord provides.
Instances of these entities are created and deleted by JDA when Discord instructs it. This means the lifetime depends on signals provided by the Discord API which are used to create/update/delete entities.
This is done through Gateway Events known as ""dispatches"" that are handled by the JDA WebSocket handlers.
When Discord instructs JDA to delete entities, they are simply removed from the JDA cache and lose their references.
Once that happens, nothing in JDA interacts or updates the instances of those entities, and they become useless.
Discord may instruct to delete these entities randomly for cache synchronization with the API.

**It is not recommended to store _any_ of these entities for a longer period of time!**
Instead of keeping (e.g.) a `User` instance in some field, an ID should be used. With the ID of a user,
you can use `getUserById(id)` to get and keep the user reference in a local variable (see below).

### Entity Updates

When an entity is updated through its manager, they will send a request to the Discord API which will update the state
of the entity. The success of this request **does not** imply the entity has been updated yet. All entities are updated
by the aforementioned **Gateway Events** which means you cannot rely on the cache being updated yet once the
execution of a RestAction has completed. Some requests rely on the cache being updated to correctly update the entity.
An example of this is updating roles of a member which overrides all roles of the member by sending a list of the
new set of roles. This is done by first checking the current cache, the roles the member has right now, and appending
or removing the requested roles. If the cache has not yet been updated by an event, this will result in unexpected behavior.

### Entity Deletion

Discord may request that a client (the JDA session) invalidates its entire cache. When this happens, JDA will
remove all of its current entities and reconnect the session. This is signaled through the `ReconnectEvent`.
When entities are removed from the JDA cache, they lose access to the encapsulating entities. For instance,
a channel loses access to its guild. Once that happens, they are unable to make any API requests through RestAction
and instead throw an `IllegalStateException`. It is **highly recommended** to only keep references to entities
by storing their **id** and using the respective `get...ById(id)` method when needed.

#### Example

```java
public class UserLogger extends ListenerAdapter 
{
    private final long userId;
    
    public UserLogger(User user)
    {
        this.userId = user.getIdLong();
    }
    
    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        User author = event.getAuthor();
        Message message = event.getMessage();
        if (author.getIdLong() == userId)
        {
            // Print the message of the user
            System.out.println(author.getAsTag() + "": "" + message.getContentDisplay());
        }
    }
    
    @Override
    public void onGuildJoin(GuildJoinEvent event)
    {
        JDA api = event.getJDA();
        User user = api.getUserById(userId); // Acquire a reference to the User instance through the id
        user.openPrivateChannel().queue((channel) ->
        {
            // Send a private message to the user
            channel.sendMessageFormat(""I have joined a new guild: **%s**"", event.getGuild().getName()).queue();
        });
    }
}
```

## Download

[ ![maven-central][] ](https://mvnrepository.com/artifact/net.dv8tion/JDA/latest)
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)

Latest Release: [GitHub Release](https://github.com/DV8FromTheWorld/JDA/releases/latest) <br>

Be sure to replace the **VERSION** key below with the one of the versions shown above! For snapshots, please use the instructions provided by [JitPack](https://jitpack.io/#DV8FromTheWorld/JDA).

**Maven**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
</dependency>
```

**Maven without Audio**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
    <exclusions>
        <exclusion>
            <groupId>club.minnced</groupId>
            <artifactId>opus-java</artifactId>
        </exclusion>
    </exclusions>
</dependency>
```

**Gradle**
```gradle
repositories {
    mavenCentral()
}

dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"")
}
```

**Gradle without Audio**
```gradle
dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"") {
        exclude module: 'opus-java'
    }
}
```

The snapshot builds are only available via JitPack and require adding the JitPack resolver, you need to specify specific commits to access those builds.
Stable releases are published to [maven-central](https://mvnrepository.com/artifact/net.dv8tion/JDA).

If you do not need any opus de-/encoding done by JDA (voice receive/send with PCM) you can exclude `opus-java` entirely.
This can be done if you only send audio with an `AudioSendHandler` which only sends opus (`isOpus() = true`). (See [lavaplayer](https://github.com/sedmelluq/lavaplayer))

If you want to use a custom opus library you can provide the absolute path to `OpusLibrary.loadFrom(String)` before using
the audio api of JDA. This works without `opus-java-natives` as it only requires `opus-java-api`.
<br>_For this setup you should only exclude `opus-java-natives` as `opus-java-api` is a requirement for en-/decoding._

See [opus-java](https://github.com/discord-java/opus-java)

### Logging Framework - SLF4J

JDA is using [SLF4J](https://www.slf4j.org/) to log its messages.

That means you should add some SLF4J implementation to your build path in addition to JDA.
If no implementation is found, following message will be printed to the console on startup:
```
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
```

JDA currently provides a fallback Logger in case that no SLF4J implementation is present.
We strongly recommend to use one though, as that can improve speed and allows you to customize the Logger as well as log to files

There is a guide for logback-classic available in our wiki: [Logging Setup](https://jda.wiki/setup/logging/)

## Documentation

Docs can be found on the [Jenkins][jenkins] or directly [here](https://ci.dv8tion.net/job/JDA5/javadoc/)
<br>A simple Wiki can also be found at [jda.wiki](https://jda.wiki/)

### Annotations

We use a number of annotations to indicate future plans for implemented functionality such as new features of
the Discord API.

- [Incubating](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/Incubating.java)
    <br>This annotation is used to indicate that functionality may change in the future. Often used when a new feature is added.
- [ReplaceWith](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java)
    <br>Paired with `@Deprecated` this is used to inform you how the new code-fragment is supposed to look once the hereby annotated functionality is removed.
- [ForRemoval](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ForRemoval.java)
    <br>Paired with `@Deprecated` this indicates that we plan to entirely remove the hereby annotated functionality in the future.
- [DeprecatedSince](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java)
    <br>Paired with `@Deprecated` this specifies when a feature was marked as deprecated.

[Sources](https://github.com/DV8FromTheWorld/JDA/tree/master/src/main/java/net/dv8tion/jda/annotations)

## Getting Help

For general troubleshooting you can visit our wiki [Troubleshooting][troubleshooting] and [FAQ][faq].
<br>If you need help, or just want to talk with the JDA or other Devs, you can join the [Official JDA Discord Guild][discord-invite].

Alternatively you can also join the [Unofficial Discord API Guild](https://discord.gg/discord-api).
Once you joined, you can find JDA-specific help in the `#java_jda` channel.

For guides and setup help you can also take a look at the [wiki](https://jda.wiki/)
<br>Especially interesting are the [Getting Started](https://jda.wiki/introduction/jda/)
and [Setup](https://jda.wiki/setup/intellij/) Pages.

## Third Party Recommendations

### [LavaPlayer](https://github.com/sedmelluq/lavaplayer)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>LavaPlayer is the most popular library used by Music Bots created in Java.
It is highly compatible with JDA and Discord4J and allows to play audio from
Youtube, Soundcloud, Twitch, Bandcamp and [more providers](https://github.com/sedmelluq/lavaplayer#supported-formats).
<br>The library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.

It is recommended to read the [Usage](https://github.com/sedmelluq/lavaplayer#usage) section of LavaPlayer
to understand a proper implementation.
<br>Sedmelluq provided a demo in his repository which presents an example implementation for JDA:
https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda

### [Lavalink](https://github.com/freyacodes/Lavalink)

Maintained by [Freya Arbjerg](https://github.com/freyacodes).

Lavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind,
and allows streaming music via many servers. It supports most of Lavaplayer's features.

Lavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer.
If you plan on serving music on a smaller scale with JDA it is often preferable to just use Lavaplayer directly
as it is easier.

[Lavalink-Client](https://github.com/FredBoat/Lavalink-Client) is the official Lavalink client for JDA.


### [jda-nas](https://github.com/sedmelluq/jda-nas)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>Provides a native implementation for the JDA Audio Send-System to avoid GC pauses.

Note that this send system creates an extra UDP-Client which causes audio receive to no longer function properly
since discord identifies the sending UDP-Client as the receiver.

```java
JDABuilder builder = JDABuilder.createDefault(BOT_TOKEN)
    .setAudioSendFactory(new NativeAudioSendFactory());
```

### [jda-ktx](https://github.com/MinnDevelopment/jda-ktx)

Created and maintained by [MinnDevelopment](https://github.com/MinnDevelopment).
<br>Provides [Kotlin](https://kotlinlang.org/) extensions for **RestAction** and events that provide a more idiomatic Kotlin experience.

```kotlin
fun main() {
    val jda = light(BOT_TOKEN)
    
    jda.onCommand(""ping"") { event ->
        val time = measureTime {
            event.reply(""Pong!"").await() // suspending
        }.inWholeMilliseconds

        event.hook.editOriginal(""Pong: $time ms"").queue()
    }
}
```

There is a number of examples available in the [README](https://github.com/MinnDevelopment/jda-ktx/#jda-ktx).

------

More can be found in our github organization: [JDA-Applications](https://github.com/JDA-Applications)

## Contributing to JDA

If you want to contribute to JDA, make sure to base your branch off of our **development** branch (or a feature-branch)
and create your PR into that **same** branch. **We will be rejecting any PRs between branches or into release branches!**
It is very possible that your change might already be in development or you missed something.

More information can be found at the wiki page [Contributing](https://github.com/DV8FromTheWorld/JDA/wiki/5\)-Contributing)

### Deprecation Policy

When a feature is introduced to replace or enhance existing functionality we might deprecate old functionality.

A deprecated method/class usually has a replacement mentioned in its documentation which should be switched to. Deprecated
functionality might or might not exist in the next minor release. (Hint: The minor version is the `MM` of `XX.MM.RR` in our version format)

It is possible that some features are deprecated without replacement, in this case the functionality is no longer supported by either the JDA structure
due to fundamental changes (for example automation of a feature) or due to Discord API changes that cause it to be removed.

We highly recommend discontinuing usage of deprecated functionality and update by going through each minor release instead of jumping.
For instance, when updating from version 3.3.0 to version 3.5.1 you should do the following:

- Update to `3.4.RR` and check for deprecation, replace
- Update to `3.5.1` and check for deprecation, replace

The `RR` in version `3.4.RR` should be replaced by the latest version that was published for `3.4`, you can find out which the latest
version was by looking at the [release page](https://github.com/DV8FromTheWorld/JDA/releases)

## Dependencies:

This project requires **Java 8+**.<br>
All dependencies are managed automatically by Gradle.
 * NV Websocket Client
   * Version: **2.14**
   * [Github](https://github.com/TakahikoKawasaki/nv-websocket-client)
 * OkHttp
   * Version: **4.10.0**
   * [Github](https://github.com/square/okhttp)
 * Apache Commons Collections4
   * Version: **4.4**
   * [Website](https://commons.apache.org/proper/commons-collections)
 * jackson
   * Version: **2.14.1**
   * [Github](https://github.com/FasterXML/jackson)
 * Trove4j
   * Version: **3.0.3**
   * [BitBucket](https://bitbucket.org/trove4j/trove)
 * slf4j-api
   * Version: **1.7.36**
   * [Website](https://www.slf4j.org/)
 * opus-java (optional)
   * Version: **1.1.1**
   * [GitHub](https://github.com/discord-java/opus-java)

## Related Projects

- [Discord4J](https://github.com/Discord4J/Discord4J)
- [Discord.NET](https://github.com/discord-net/Discord.Net)
- [discord.py](https://github.com/Rapptz/discord.py)
- [serenity](https://github.com/serenity-rs/serenity)

**See also:** [Discord API Community Libraries](https://github.com/apacheli/discord-api-libs)
","Discord is currently prohibiting creation and usage of client client accounts.
JDA strives to provide a clean and full wrapping of the Discord REST api and its
Websocket-Events for Java. We will no longer support unofficial features that
are not available to bot-accounts."
298,Java wrapper for the popular chat & VOIP service: Discord https://discord.com,"[maven-central]: https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue
[jitpack]: https://img.shields.io/badge/Snapshots-JitPack-blue
[download]: #download
[discord-invite]: https://discord.gg/0hMr4ce0tIl3SLv5
[migration]: https://jda.wiki/introduction/migration-v3-v4/
[jenkins]: https://ci.dv8tion.net/job/JDA5
[license]: https://github.com/DV8FromTheWorld/JDA/tree/master/LICENSE
[faq]: https://jda.wiki/introduction/faq/
[troubleshooting]: https://jda.wiki/using-jda/troubleshooting/
[discord-shield]: https://discord.com/api/guilds/125227483518861312/widget.png
[faq-shield]: https://img.shields.io/badge/Wiki-FAQ-blue.svg
[troubleshooting-shield]: https://img.shields.io/badge/Wiki-Troubleshooting-darkgreen.svg
[jenkins-shield]: https://img.shields.io/badge/Download-Jenkins-purple.svg
[license-shield]: https://img.shields.io/badge/License-Apache%202.0-white.svg
[migration-shield]: https://img.shields.io/badge/Wiki-Migrating%20from%20V3-darkgreen.svg

<img align=""right"" src=""https://github.com/DV8FromTheWorld/JDA/blob/assets/assets/readme/logo.png?raw=true"" height=""200"" width=""200"">

[ ![maven-central][] ][download]
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)
[ ![jenkins-shield][] ][jenkins]
[ ![license-shield][] ][license]

[ ![discord-shield][] ][discord-invite]
[ ![faq-shield] ][faq]
[ ![troubleshooting-shield] ][troubleshooting]
[ ![migration-shield][] ][migration]


# JDA (Java Discord API)

JDA strives to provide a clean and full wrapping of the Discord REST api and its Websocket-Events for Java.
This library is a helpful tool that provides the functionality to create a discord bot in java.

## Summary

Due to official statements made by the Discord developers we will no longer support unofficial features. These features
are undocumented API endpoints or protocols that are not available to bot-accounts.

_Please see the [Discord docs](https://discord.com/developers/docs/reference) for more information about bot accounts._

1. [Introduction](#creating-the-jda-object)
2. [Sharding](#sharding-a-bot)
3. [Entity Lifetimes](#entity-lifetimes)
4. [Download](#download)
5. [Documentation](#documentation)
6. [Support](#getting-help)
7. [Extensions And Plugins](#third-party-recommendations)
8. [Contributing](#contributing-to-jda)
9. [Dependencies](#dependencies)
10. [Other Libraries](#related-projects)

## UserBots and SelfBots

Discord is currently prohibiting creation and usage of automated client accounts (AccountType.CLIENT).
We have officially dropped support for client login as of version **4.2.0**!
Note that JDA is not a good tool to build a custom discord client as it loads all servers/guilds on startup unlike
a client which does this via lazy loading instead.
If you need a bot, use a bot account from the [Application Dashboard](https://discord.com/developers/applications).

[Read More](https://support.discord.com/hc/en-us/articles/115002192352-Automated-user-accounts-self-bots-)

## Creating the JDA Object

Creating the JDA Object is done via the JDABuilder class. After setting the token and other options via setters,
the JDA Object is then created by calling the `build()` method. When `build()` returns,
JDA might not have finished starting up. However, you can use `awaitReady()`
on the JDA object to ensure that the entire cache is loaded before proceeding.
Note that this method is blocking and will cause the thread to sleep until startup has completed.

**Example**:

```java
JDA jda = JDABuilder.createDefault(""token"").build();
```

### Configuration

Both the `JDABuilder` and the `DefaultShardManagerBuilder` allow a set of configurations to improve the experience.

**Example**:

```java
public static void main(String[] args) {
    JDABuilder builder = JDABuilder.createDefault(args[0]);
    
    // Disable parts of the cache
    builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);
    // Enable the bulk delete event
    builder.setBulkDeleteSplittingEnabled(false);
    // Set activity (like ""playing Something"")
    builder.setActivity(Activity.watching(""TV""));
    
    builder.build();
}
```

> See [JDABuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/JDABuilder.html)
  and [DefaultShardManagerBuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html)

You can configure the memory usage by changing enabled `CacheFlags` on the `JDABuilder`.
Additionally, you can change the handling of member/user cache by setting either a `ChunkingFilter`, disabling **intents**, or changing the **member cache policy**.

```java
public void configureMemoryUsage(JDABuilder builder) {
    // Disable cache for member activities (streaming/games/spotify)
    builder.disableCache(CacheFlag.ACTIVITY);

    // Only cache members who are either in a voice channel or owner of the guild
    builder.setMemberCachePolicy(MemberCachePolicy.VOICE.or(MemberCachePolicy.OWNER));

    // Disable member chunking on startup
    builder.setChunkingFilter(ChunkingFilter.NONE);

    // Disable presence updates and typing events
    builder.disableIntents(GatewayIntent.GUILD_PRESENCE, GatewayIntent.GUILD_MESSAGE_TYPING);

    // Consider guilds with more than 50 members as ""large"". 
    // Large guilds will only provide online members in their setup and thus reduce bandwidth if chunking is disabled.
    builder.setLargeThreshold(50);
}
```

### Listening to Events

The event system in JDA is configured through a hierarchy of classes/interfaces.
We offer two implementations for the `IEventManager`:

- **InterfacedEventManager** which uses an `EventListener` interface and the `ListenerAdapter` abstract class
- **AnnotatedEventManager** which uses the `@SubscribeEvent` annotation that can be applied to methods

By default the **InterfacedEventManager** is used.
Since you can create your own implementation of `IEventManager` this is a very versatile and configurable system.
If the aforementioned implementations don't suit your use-case you can simply create a custom implementation and
configure it on the `JDABuilder` with `setEventManager(...)`.

#### Examples:

**Using EventListener**:

```java
public class ReadyListener implements EventListener
{
    public static void main(String[] args)
            throws InterruptedException
    {
        // Note: It is important to register your ReadyListener before building
        JDA jda = JDABuilder.createDefault(""token"")
            .addEventListeners(new ReadyListener())
            .build();

        // optionally block until JDA is ready
        jda.awaitReady();
    }

    @Override
    public void onEvent(GenericEvent event)
    {
        if (event instanceof ReadyEvent)
            System.out.println(""API is ready!"");
    }
}
```

**Using ListenerAdapter**:

```java
public class MessageListener extends ListenerAdapter
{
    public static void main(String[] args)
    {
        JDA jda = JDABuilder.createDefault(""token"")
                .enableIntents(GatewayIntent.MESSAGE_CONTENT) // enables explicit access to message.getContentDisplay()
                .build();
        //You can also add event listeners to the already built JDA instance
        // Note that some events may not be received if the listener is added after calling build()
        // This includes events such as the ReadyEvent
        jda.addEventListener(new MessageListener());
    }

    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        if (event.isFromType(ChannelType.PRIVATE))
        {
            System.out.printf(""[PM] %s: %s\n"", event.getAuthor().getName(),
                                    event.getMessage().getContentDisplay());
        }
        else
        {
            System.out.printf(""[%s][%s] %s: %s\n"", event.getGuild().getName(),
                        event.getTextChannel().getName(), event.getMember().getEffectiveName(),
                        event.getMessage().getContentDisplay());
        }
    }
}
```

**Slash-Commands**:

```java
public class Bot extends ListenerAdapter
{
    public static void main(String[] args)
    {
        if (args.length < 1) {
            System.out.println(""You have to provide a token as first argument!"");
            System.exit(1);
        }
        // args[0] would be the token (using an environment variable or config file is preferred for security)
        // We don't need any intents for this bot. Slash commands work without any intents!
        JDA jda = JDABuilder.createLight(args[0], Collections.emptyList())
            .addEventListeners(new Bot())
            .setActivity(Activity.playing(""Type /ping""))
            .build();

        // Sets the global command list to the provided commands (removing all others)
        jda.updateCommands().addCommands(
            Commands.slash(""ping"", ""Calculate ping of the bot""),
            Commands.slash(""ban"", ""Ban a user from the server"")
                    .setDefaultPermissions(DefaultMemberPermissions.enabledFor(Permission.BAN_MEMBERS)) // only usable with ban permissions
                    .setGuildOnly(true) // Ban command only works inside a guild
                    .addOption(OptionType.USER, ""user"", ""The user to ban"", true) // required option of type user (target to ban)
                    .addOption(OptionType.STRING, ""reason"", ""The ban reason"") // optional reason
        ).queue();
    }
    
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event)
    {
        // make sure we handle the right command
        switch (event.getName()) {
            case ""ping"":
                long time = System.currentTimeMillis();
                event.reply(""Pong!"").setEphemeral(true) // reply or acknowledge
                     .flatMap(v ->
                          event.getHook().editOriginalFormat(""Pong: %d ms"", System.currentTimeMillis() - time) // then edit original
                     ).queue(); // Queue both reply and edit
                break;
            case ""ban"":
                // double check permissions, don't trust discord on this!
                if (!event.getMember().hasPermission(Permission.BAN_MEMBERS)) {
                    event.reply(""You cannot ban members! Nice try ;)"").setEphemeral(true).queue();
                    break;
                }
                User target = event.getOption(""user"", OptionMapping::getUser);
                // optionally check for member information
                Member member = event.getOption(""user"", OptionMapping::getMember);
                if (!event.getMember().canInteract(member)) {
                    event.reply(""You cannot ban this user."").setEphemeral(true).queue();
                    break;
                }
                // Before starting our ban request, tell the user we received the command
                // This sends a ""Bot is thinking..."" message which is later edited once we finished
                event.deferReply().queue();
                String reason = event.getOption(""reason"", OptionMapping::getAsString);
                AuditableRestAction<Void> action = event.getGuild().ban(target, 0); // Start building our ban request
                if (reason != null) // reason is optional
                    action = action.reason(reason); // set the reason for the ban in the audit logs and ban log
                action.queue(v -> {
                    // Edit the thinking message with our response on success
                    event.getHook().editOriginal(""**"" + target.getAsTag() + ""** was banned by **"" + event.getUser().getAsTag() + ""**!"").queue();
                }, error -> {
                    // Tell the user we encountered some error
                    event.getHook().editOriginal(""Some error occurred, try again!"").queue();
                    error.printStackTrace();
                });
        }
    }
}
```

### RestAction

Through [RestAction](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html) we provide request handling with
 
 - [callbacks](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#queue%28java.util.function.Consumer%29)
 - [promises](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#submit%28%29)
 - and [sync](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#complete%28%29)

and it is up to the user to decide which pattern to utilize.
It can be combined with reactive libraries such as [reactor-core](https://github.com/reactor/reactor-core) due to being lazy.

The RestAction interface also supports a number of operators to avoid callback hell:

- [`map`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#map%28java.util.function.Function%29)
    Convert the result of the `RestAction` to a different value
- [`flatMap`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#flatMap%28java.util.function.Function%29)
    Chain another `RestAction` on the result
- [`delay`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#delay%28java.time.Duration%29)
    Delay the element of the previous step

**Example**:

```java
public RestAction<Void> selfDestruct(MessageChannel channel, String content) {
    return channel.sendMessage(""The following message will destroy itself in 1 minute!"")
        .delay(10, SECONDS, scheduler) // edit 10 seconds later
        .flatMap((it) -> it.editMessage(content))
        .delay(1, MINUTES, scheduler) // delete 1 minute later
        .flatMap(Message::delete);
}
```

### More Examples

We provide a small set of Examples in the [Example Directory](https://github.com/DV8FromTheWorld/JDA/tree/master/src/examples/java).

<!--
TODO: Find good examples
- [JDA Butler](https://github.com/Almighty-Alpaca/JDA-Butler)

[And many more!](https://github.com/search?q=JDA+discord+bot&type=Repositories&utf8=%E2%9C%93)
-->

## Sharding a Bot

Discord allows Bot-accounts to share load across sessions by limiting them to a fraction of the total connected Guilds/Servers of the bot.
<br>This can be done using **sharding** which will limit JDA to only a certain amount of Guilds/Servers including events and entities.
Sharding will limit the amount of Guilds/Channels/Users visible to the JDA session so it is recommended to have some kind of elevated management to
access information of other shards.

To use sharding in JDA you will need to use `JDABuilder.useSharding(int shardId, int shardTotal)`. The **shardId** is 0-based which means the first shard
has the ID 0. The **shardTotal** is the total amount of shards (not 0-based) which can be seen similar to the length of an array, the last shard has the ID of
`shardTotal - 1`.

The [`SessionController`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/utils/SessionController.html) is a tool of the JDABuilder
that allows to control state and behaviour between shards (sessions). When using multiple builders to build shards you have to create one instance
of this controller and add the same instance to each builder: `builder.setSessionController(controller)`

Since version **3.4.0** JDA provides a `ShardManager` which automates this building process.

### Example Sharding - Using JDABuilder

```java
public static void main(String[] args) throws Exception
{
    JDABuilder shardBuilder = JDABuilder.createDefault(args[0]);
    //register your listeners here using shardBuilder.addEventListeners(...)
    shardBuilder.addEventListeners(new MessageListener());
    for (int i = 0; i < 10; i++)
    {
        shardBuilder.useSharding(i, 10)
                    .build();
    }
}
```

> When the `useSharding` method is invoked for the first time, the builder automatically sets a SessionController internally (if none is present)

### Example Sharding - Using DefaultShardManager
```java
public static void main(String[] args) throws Exception
{
    DefaultShardManagerBuilder builder = DefaultShardManagerBuilder.createDefault(args[0]);
    builder.addEventListeners(new MessageListener());
    builder.build();
}
```

## Entity Lifetimes

An **Entity** is the term used to describe types such as **GuildChannel**/**Message**/**User** and other entities that Discord provides.
Instances of these entities are created and deleted by JDA when Discord instructs it. This means the lifetime depends on signals provided by the Discord API which are used to create/update/delete entities.
This is done through Gateway Events known as ""dispatches"" that are handled by the JDA WebSocket handlers.
When Discord instructs JDA to delete entities, they are simply removed from the JDA cache and lose their references.
Once that happens, nothing in JDA interacts or updates the instances of those entities, and they become useless.
Discord may instruct to delete these entities randomly for cache synchronization with the API.

**It is not recommended to store _any_ of these entities for a longer period of time!**
Instead of keeping (e.g.) a `User` instance in some field, an ID should be used. With the ID of a user,
you can use `getUserById(id)` to get and keep the user reference in a local variable (see below).

### Entity Updates

When an entity is updated through its manager, they will send a request to the Discord API which will update the state
of the entity. The success of this request **does not** imply the entity has been updated yet. All entities are updated
by the aforementioned **Gateway Events** which means you cannot rely on the cache being updated yet once the
execution of a RestAction has completed. Some requests rely on the cache being updated to correctly update the entity.
An example of this is updating roles of a member which overrides all roles of the member by sending a list of the
new set of roles. This is done by first checking the current cache, the roles the member has right now, and appending
or removing the requested roles. If the cache has not yet been updated by an event, this will result in unexpected behavior.

### Entity Deletion

Discord may request that a client (the JDA session) invalidates its entire cache. When this happens, JDA will
remove all of its current entities and reconnect the session. This is signaled through the `ReconnectEvent`.
When entities are removed from the JDA cache, they lose access to the encapsulating entities. For instance,
a channel loses access to its guild. Once that happens, they are unable to make any API requests through RestAction
and instead throw an `IllegalStateException`. It is **highly recommended** to only keep references to entities
by storing their **id** and using the respective `get...ById(id)` method when needed.

#### Example

```java
public class UserLogger extends ListenerAdapter 
{
    private final long userId;
    
    public UserLogger(User user)
    {
        this.userId = user.getIdLong();
    }
    
    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        User author = event.getAuthor();
        Message message = event.getMessage();
        if (author.getIdLong() == userId)
        {
            // Print the message of the user
            System.out.println(author.getAsTag() + "": "" + message.getContentDisplay());
        }
    }
    
    @Override
    public void onGuildJoin(GuildJoinEvent event)
    {
        JDA api = event.getJDA();
        User user = api.getUserById(userId); // Acquire a reference to the User instance through the id
        user.openPrivateChannel().queue((channel) ->
        {
            // Send a private message to the user
            channel.sendMessageFormat(""I have joined a new guild: **%s**"", event.getGuild().getName()).queue();
        });
    }
}
```

## Download

[ ![maven-central][] ](https://mvnrepository.com/artifact/net.dv8tion/JDA/latest)
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)

Latest Release: [GitHub Release](https://github.com/DV8FromTheWorld/JDA/releases/latest) <br>

Be sure to replace the **VERSION** key below with the one of the versions shown above! For snapshots, please use the instructions provided by [JitPack](https://jitpack.io/#DV8FromTheWorld/JDA).

**Maven**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
</dependency>
```

**Maven without Audio**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
    <exclusions>
        <exclusion>
            <groupId>club.minnced</groupId>
            <artifactId>opus-java</artifactId>
        </exclusion>
    </exclusions>
</dependency>
```

**Gradle**
```gradle
repositories {
    mavenCentral()
}

dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"")
}
```

**Gradle without Audio**
```gradle
dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"") {
        exclude module: 'opus-java'
    }
}
```

The snapshot builds are only available via JitPack and require adding the JitPack resolver, you need to specify specific commits to access those builds.
Stable releases are published to [maven-central](https://mvnrepository.com/artifact/net.dv8tion/JDA).

If you do not need any opus de-/encoding done by JDA (voice receive/send with PCM) you can exclude `opus-java` entirely.
This can be done if you only send audio with an `AudioSendHandler` which only sends opus (`isOpus() = true`). (See [lavaplayer](https://github.com/sedmelluq/lavaplayer))

If you want to use a custom opus library you can provide the absolute path to `OpusLibrary.loadFrom(String)` before using
the audio api of JDA. This works without `opus-java-natives` as it only requires `opus-java-api`.
<br>_For this setup you should only exclude `opus-java-natives` as `opus-java-api` is a requirement for en-/decoding._

See [opus-java](https://github.com/discord-java/opus-java)

### Logging Framework - SLF4J

JDA is using [SLF4J](https://www.slf4j.org/) to log its messages.

That means you should add some SLF4J implementation to your build path in addition to JDA.
If no implementation is found, following message will be printed to the console on startup:
```
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
```

JDA currently provides a fallback Logger in case that no SLF4J implementation is present.
We strongly recommend to use one though, as that can improve speed and allows you to customize the Logger as well as log to files

There is a guide for logback-classic available in our wiki: [Logging Setup](https://jda.wiki/setup/logging/)

## Documentation

Docs can be found on the [Jenkins][jenkins] or directly [here](https://ci.dv8tion.net/job/JDA5/javadoc/)
<br>A simple Wiki can also be found at [jda.wiki](https://jda.wiki/)

### Annotations

We use a number of annotations to indicate future plans for implemented functionality such as new features of
the Discord API.

- [Incubating](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/Incubating.java)
    <br>This annotation is used to indicate that functionality may change in the future. Often used when a new feature is added.
- [ReplaceWith](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java)
    <br>Paired with `@Deprecated` this is used to inform you how the new code-fragment is supposed to look once the hereby annotated functionality is removed.
- [ForRemoval](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ForRemoval.java)
    <br>Paired with `@Deprecated` this indicates that we plan to entirely remove the hereby annotated functionality in the future.
- [DeprecatedSince](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java)
    <br>Paired with `@Deprecated` this specifies when a feature was marked as deprecated.

[Sources](https://github.com/DV8FromTheWorld/JDA/tree/master/src/main/java/net/dv8tion/jda/annotations)

## Getting Help

For general troubleshooting you can visit our wiki [Troubleshooting][troubleshooting] and [FAQ][faq].
<br>If you need help, or just want to talk with the JDA or other Devs, you can join the [Official JDA Discord Guild][discord-invite].

Alternatively you can also join the [Unofficial Discord API Guild](https://discord.gg/discord-api).
Once you joined, you can find JDA-specific help in the `#java_jda` channel.

For guides and setup help you can also take a look at the [wiki](https://jda.wiki/)
<br>Especially interesting are the [Getting Started](https://jda.wiki/introduction/jda/)
and [Setup](https://jda.wiki/setup/intellij/) Pages.

## Third Party Recommendations

### [LavaPlayer](https://github.com/sedmelluq/lavaplayer)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>LavaPlayer is the most popular library used by Music Bots created in Java.
It is highly compatible with JDA and Discord4J and allows to play audio from
Youtube, Soundcloud, Twitch, Bandcamp and [more providers](https://github.com/sedmelluq/lavaplayer#supported-formats).
<br>The library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.

It is recommended to read the [Usage](https://github.com/sedmelluq/lavaplayer#usage) section of LavaPlayer
to understand a proper implementation.
<br>Sedmelluq provided a demo in his repository which presents an example implementation for JDA:
https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda

### [Lavalink](https://github.com/freyacodes/Lavalink)

Maintained by [Freya Arbjerg](https://github.com/freyacodes).

Lavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind,
and allows streaming music via many servers. It supports most of Lavaplayer's features.

Lavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer.
If you plan on serving music on a smaller scale with JDA it is often preferable to just use Lavaplayer directly
as it is easier.

[Lavalink-Client](https://github.com/FredBoat/Lavalink-Client) is the official Lavalink client for JDA.


### [jda-nas](https://github.com/sedmelluq/jda-nas)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>Provides a native implementation for the JDA Audio Send-System to avoid GC pauses.

Note that this send system creates an extra UDP-Client which causes audio receive to no longer function properly
since discord identifies the sending UDP-Client as the receiver.

```java
JDABuilder builder = JDABuilder.createDefault(BOT_TOKEN)
    .setAudioSendFactory(new NativeAudioSendFactory());
```

### [jda-ktx](https://github.com/MinnDevelopment/jda-ktx)

Created and maintained by [MinnDevelopment](https://github.com/MinnDevelopment).
<br>Provides [Kotlin](https://kotlinlang.org/) extensions for **RestAction** and events that provide a more idiomatic Kotlin experience.

```kotlin
fun main() {
    val jda = light(BOT_TOKEN)
    
    jda.onCommand(""ping"") { event ->
        val time = measureTime {
            event.reply(""Pong!"").await() // suspending
        }.inWholeMilliseconds

        event.hook.editOriginal(""Pong: $time ms"").queue()
    }
}
```

There is a number of examples available in the [README](https://github.com/MinnDevelopment/jda-ktx/#jda-ktx).

------

More can be found in our github organization: [JDA-Applications](https://github.com/JDA-Applications)

## Contributing to JDA

If you want to contribute to JDA, make sure to base your branch off of our **development** branch (or a feature-branch)
and create your PR into that **same** branch. **We will be rejecting any PRs between branches or into release branches!**
It is very possible that your change might already be in development or you missed something.

More information can be found at the wiki page [Contributing](https://github.com/DV8FromTheWorld/JDA/wiki/5\)-Contributing)

### Deprecation Policy

When a feature is introduced to replace or enhance existing functionality we might deprecate old functionality.

A deprecated method/class usually has a replacement mentioned in its documentation which should be switched to. Deprecated
functionality might or might not exist in the next minor release. (Hint: The minor version is the `MM` of `XX.MM.RR` in our version format)

It is possible that some features are deprecated without replacement, in this case the functionality is no longer supported by either the JDA structure
due to fundamental changes (for example automation of a feature) or due to Discord API changes that cause it to be removed.

We highly recommend discontinuing usage of deprecated functionality and update by going through each minor release instead of jumping.
For instance, when updating from version 3.3.0 to version 3.5.1 you should do the following:

- Update to `3.4.RR` and check for deprecation, replace
- Update to `3.5.1` and check for deprecation, replace

The `RR` in version `3.4.RR` should be replaced by the latest version that was published for `3.4`, you can find out which the latest
version was by looking at the [release page](https://github.com/DV8FromTheWorld/JDA/releases)

## Dependencies:

This project requires **Java 8+**.<br>
All dependencies are managed automatically by Gradle.
 * NV Websocket Client
   * Version: **2.14**
   * [Github](https://github.com/TakahikoKawasaki/nv-websocket-client)
 * OkHttp
   * Version: **4.10.0**
   * [Github](https://github.com/square/okhttp)
 * Apache Commons Collections4
   * Version: **4.4**
   * [Website](https://commons.apache.org/proper/commons-collections)
 * jackson
   * Version: **2.14.1**
   * [Github](https://github.com/FasterXML/jackson)
 * Trove4j
   * Version: **3.0.3**
   * [BitBucket](https://bitbucket.org/trove4j/trove)
 * slf4j-api
   * Version: **1.7.36**
   * [Website](https://www.slf4j.org/)
 * opus-java (optional)
   * Version: **1.1.1**
   * [GitHub](https://github.com/discord-java/opus-java)

## Related Projects

- [Discord4J](https://github.com/Discord4J/Discord4J)
- [Discord.NET](https://github.com/discord-net/Discord.Net)
- [discord.py](https://github.com/Rapptz/discord.py)
- [serenity](https://github.com/serenity-rs/serenity)

**See also:** [Discord API Community Libraries](https://github.com/apacheli/discord-api-libs)
","Discord is currently prohibiting creation and usage of client client accounts.
JDA strives to provide a clean and full wrapping of the Discord REST api and its
Websocket-Events for Java. We will no longer support unofficial features that
are not available to bot-accounts."
328,A browser developer tool extension to inspect performance of React components.,"**Looking for maintainers**

# React Performance Devtool

[![Build Status](https://travis-ci.org/nitin42/react-perf-devtool.svg?branch=master)](https://travis-ci.org/nitin42/react-perf-devtool)
![Release Status](https://img.shields.io/badge/status-stable-brightgreen.svg)
![Author](https://img.shields.io/badge/author-Nitin%20Tulswani-lightgrey.svg)
![current-version](https://img.shields.io/badge/version-3.1.8-blue.svg)
![extension](https://img.shields.io/badge/extension-5.3-ff69b4.svg)
[![npm downloads](https://img.shields.io/npm/dt/react-perf-devtool.svg)](https://www.npmjs.com/package/react-perf-devtool)

> A devtool for inspecting the performance of React Components

<br/>

<p align=""center"">
  <img src=""https://i.gyazo.com/332f573872d396e4f665d58e491a8ccd.png"">
</p>

<br/>

## Table of contents

* [Introduction](#introduction)

* [Demo](#demo)
  * [Browser extension](#browser-extension)
  * [Log the measures to console](#log-the-measures-to-a-console)

* [Uses](#uses)

* [Install](#install)

* [Usage](#usage)
  * [Using the browser extension](#using-the-browser-extension)
  * [Printing the measures to console](#printing-the-measures-to-the-console)

* [Description](#description)

* [Phases](#phases)

* [Implementation](#implementation)

* [Contributing](#contributing)

* [License](#license)


## Introduction

**React Performance Devtool** is a browser extension for inspecting the performance of React Components. It statistically examines the performance of React components based on the measures which are collected by React using `window.performance` API.

Along with the browser extension, the measures can also be inspected in a console. See the [usage](#usage) section for more details.

This project started with a purpose of extending the work done by [Will Chen](https://github.com/wwwillchen) on a proposal for React performance table. You can read more about it [here](https://github.com/facebook/react-devtools/issues/801#issuecomment-350919145).

## Demo

### Browser extension

A demo of the extension being used to examine the performance of React components on my website.

<img src=""http://g.recordit.co/m8Yv1RTR6v.gif"">

### Log the measures to a console

Performance measures can also be logged to a console. With every re-render, measures are updated and logged to the console.

<img src=""http://g.recordit.co/YX44uaVr3I.gif"">

## Uses

* Remove or unmount the component instances which are not being used.

* Inspect what is blocking or taking more time after an operation has been started.

* Examine the table and see for which components, you need to write [shouldComponentUpdate](https://reactjs.org/docs/react-component.html#shouldcomponentupdate) lifecycle hook.

* Examine which components are taking more time to load.

## Install

To use this devtool, you'll need to install a npm module which will register a listener (read more about this in [usage](#usage) section) and the browser extension.

**Installing the extension**

The below extensions represent the current stable release.

* [Chrome extension](https://chrome.google.com/webstore/detail/react-performance-devtool/fcombecpigkkfcbfaeikoeegkmkjfbfm)
* [Firefox extension](https://addons.mozilla.org/en-US/firefox/addon/nitin-tulswani/)
* **Standalone app coming soon**

**Installing the npm module**

```
npm install react-perf-devtool
```

A `umd` build is also available via [unpkg](https://www.unpkg.com)

```js
<script crossorigin src=""https://unpkg.com/react-perf-devtool@3.0.8-beta/lib/npm/hook.js""></script>
```

> This extension and package also depends on react. Please make sure you have those installed as well.

> Note - The npm module is important and required to use the devtool. So make sure you've installed it before using the browser extension.

## Usage

This section of the documentation explain the usage of devtool and the API for registering an observer in a React app.

### Browser Compatibility
`react-perf-devtool` relies on the native `window.PerformanceObserver` API that got added in **Chrome v52** and **Firefox v57**. For further information, see the official Mozilla Docs [here](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver#Browser_compatibility).

### Using the browser extension

To use this devtool extension, you'll need to register an observer in your app which will observe a collection of data (performance measures) over a time.

**Register observer**

Registering an observer is very simple and is only one function call away. Let's see how!

```js
const { registerObserver } = require('react-perf-devtool')

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver()
```

You can place this code inside your `index.js` file (recommended) or any other file in your app.

> Note - This should only be used in development mode when you need to inspect the performance of React components. Make sure to remove it when building for production.

Registering an observer hooks an object containing information about the **events** and **performance measures** of React components to the
[window](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) object, which can then be accessed inside the inspected window using [eval()](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/devtools.inspectedWindow/eval).

With every re-render, this object is updated with new measures and events count.
The extension takes care of clearing up the memory and also the cache.

You can also pass an **`option`** object and an optional **`callback`** which receives an argument containing the parsed and aggregated measures

**Using the callback**

An optional callback can also be passed to `registerObserver` which receives parsed measures as its argument.

You can use this callback to inspect the parsed and aggregated measures, or you can integrate it with any other use case. You can also leverage these performance measures using Google Analytics by sending these measures to analytics dashboard . This process is documented [here](https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics).

Example -

```js
const { registerObserver } = require('react-perf-devtool')

function callback(measures) {
  // do something with the measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver({}, callback)
```

After you've registered the observer, start your local development server and go to `http://localhost:3000/`.

> Note - This extension works only for React 16 or above versions of it.

After you've installed the extension successfully, you'll see a tab called **React Performance** in Chrome Developer Tools.

<img src=""./art/tab.png"">

### Printing the measures to the console

The performance measures can also be logged to the console. However, the process of printing the measures is not direct. You'll need to set up a server which will listen the measures. For this, you can use [micro](https://github.com/zeit/micro) by [Zeit](https://zeit.co/) which is a HTTP microservice.

```
npm install --save micro
```


You can pass an **option** object as an argument to `registerObserver` to enable logging and setting up a port number.

**Using the option object**

```js
{
  shouldLog: boolean, // default value: false
  port: number // default value: 8080
  timeout: number // default value: 2000
}
```

You can pass three properties to the **`option`** object, `shouldLog` and `port`.

* `shouldLog` - It takes a **boolean** value. If set to true, measures will be logged to the console.

* `port` - Port number for the server where the measures will be send

* `timeout` - A timeout value to defer the initialisation of the extension.

If your application takes time to load, it's better to defer the initialisation of extension by specifying the timeout value through `timeout` property. This ensures that the extension will load only after your application has properly loaded in the browser so that the updated measures can be rendered. However, you can skip this property if your application is in small size.

**Example**

```js
// index.js file in your React App

const React = require('react')
const ReactDOM = require('react-dom')
const { registerObserver } = require('react-perf-devtool')

const Component = require('./Component') // Some React Component

const options = {
  shouldLog: true,
  port: 8080,
  timeout: 12000 // Load the extension after 12 sec.
}

function callback(measures) {
  // do something with the measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver(options, callback)

ReactDOM.render(<Component />, document.getElementById('root'))
```

```js
// server.js
const { json } = require('micro')

module.exports = async req => {
  console.log(await json(req))
  return 200
}
```

```js
// package.json

{
  ""main"": ""server.js"",
  ""scripts"": {
    ""start-micro"": ""micro -p 8080""
  }
}

```

**Schema of the measures**

Below is the schema of the performance measures that are logged to the console.

```js
{
  componentName, 
  mount: { // Mount time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  render: { // Render time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  update: { // Update time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  unmount: { // Unmount time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  totalTimeSpent, // Total time taken by the component combining all the phases
  percentTimeSpent, // Percent time
  numberOfInstances, // Number of instances of the component

  // Time taken in lifecycle hooks
  componentWillMount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
  componentDidMount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
  componentWillReceiveProps: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  shouldComponentUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentWillUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentDidUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentWillUnmount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
}
```

**components**

You can also inspect the performance of specific components using options through **`components`** property.

<img src=""http://g.recordit.co/sAQGSOrCA7.gif"">

Example -

```js
const options = {
  shouldLog: true,
  port: 3000,
  components: ['App', 'Main'] // Assuming you've these components in your project
}

function callback(measures) {
  // do something with measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver(options, callback)
```

## Description

### Overview section

<p align=""center"">
  <img src=""https://i.gyazo.com/bae8420649749a5be0a2a7e589cdbc65.png"">
</p>

Overview section represents an overview of total time (%) taken by all the components in your application.

### Results section

<p align=""center"">
  <img src=""https://i.gyazo.com/74a96461182539f9866db630ab645719.png"">
</p>

* Time taken by all the components - Shows the time taken by all the components (combining all the phases).

* Time duration for committing changes - Shows the time spent in committing changes. Read more about this [here]()

* Time duration for committing host effects - Shows the time spent in committing host effects i.e committing when a new tree is inserted (update) and no. of host effects (effect count in commit).

* Time duration for calling lifecycle methods - Reports the time duration of calling lifecycle hooks and total no of methods called, when a lifecycle hook schedules a cascading update.

* Total time

### Top section

<p align=""center"">
  <img src=""https://i.gyazo.com/3728c55035bdcdc40b68919fe095e549.png"" />
</p>

**clear** - The clear button clears the measures from the tables and also wipes the results.

**Reload the inspected window** - This button reloads the inspected window and displays the new measures.

**Pending events** - This indicates the pending measures (React performance data).


### Components section

<p align=""center"">
  <img src=""https://i.gyazo.com/ac983b28ac614fb13d980ae681ffd049.png"">
</p>

This section shows the time taken by a component in a phase, number of instances of a component and total time combining all the phases in **ms** and **%**

## Phases

Given below are the different phases for which React measures the performance:

* **React Tree Reconciliation** - In this phase, React renders the root node and creates a work in progress fiber. If there were some cascading updates while reconciling, it will pause any active measurements and will resumed them in a deferred loop. This is caused when a top-level update interrupts the previous render. If an error was thrown during the render phase then it captures the error by finding the nearest error boundary or it uses the root if there is no error boundary.

* **Commit changes** - In this phase, the work that was completed is committed. Also, it checks whether the root node has any side-effect. If it has an effect then add it to the list (read more this list data structure [here](https://github.com/nitin42/Making-a-custom-React-renderer/blob/master/part-one.md)) or commit all the side-effects in the tree. If there is a scheduled update in the current commit, then it gives a warning about ***cascading update in lifecycle hook***. During the commit phase, updates are scheduled in the current commit. Also, updates are scheduled if the phase/stage is not [componentWillMount](https://reactjs.org/docs/react-component.html#componentwillmount) or [componentWillReceiveProps](https://reactjs.org/docs/react-component.html#componentwillreceiveprops).

* **Commit host effects** - Host effects are committed whenever a new tree is inserted. With every new update that is scheduled, total host effects are calculated. This process is done in two phases, the first phase performs all the host node insertions, deletion, update and ref unmounts and the other phase performs all the lifecycle and ref callbacks.

* **Commit lifecycle** - When the first pass was completed while committing the host effects, the work in progress tree became the current tree. So work in progress is current during **componentDidMount/update**. In this phase, all the lifecycles and ref callbacks are committed. **Committing lifecycles happen as a separate pass so that all the placements, updates and deletions in the entire tree have already been invoked**.

## Implementation

In previous version of this devtool, performance metrics were being queried instead of listening for an event type. This required to comment the line inside the `react-dom` package (`react-dom.development.js`) so that these metrics can be captured by this tool.

### Trade-offs
  * Need to update the commonjs react-dom development bundle (commenting the line)
  * No way of sending the measures from the app frame to the console
  * Need to query measures rather than listening to an event once
  * No control on how to inspect the measures for a particular use case (for eg - log only the render and update performance of a component)

But now, with the help of [Performance Observer](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver) API, an observer can be registered to listen to an event of a particular type and get the entries (performance measures). `react-perf-devtool` provides an API on top of the performance observer, a function that registers an observer.

```js
const { registerObserver } = require('react-perf-devtool')

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver()
```

This observer listens to the React performance measurement event.
It hooks an object containing information about the events and performance measures of React components to the window object which can then be accessed inside the inspected window using eval().

With every re-render, this object is updated with new measures and events count. The extension takes care of clearing up the memory and also the cache.

An `option` object and an optional `callback` can also be passed to `registerObserver`. The `option` object is useful when performance measures are to be logged to a console. The `callback` receives parsed and aggregated results (metrics) as its argument which can then be used for analyses.
### Benefits

Calculating and aggregating the results happens inside the app frame and not in the devtool. It has its own benefits.
  * These measures can be send to a server for analyses
  * Measures can be logged to a console
  * Particular measures can be inspected in the console with the help of configuration object (not done with the API for it yet)
  * This also gives control to the developer on how to manage and inspect the measures apart from using the extension

## Todos / Ideas / Improvements

- [x] New UI for devtool
- [x] Make the implementation of measures generator more concrete
- [ ] Add support for older versions of React
- [x] Make the tool more comprehensible

## Contributing

[Read the contributing guide](./CONTRIBUTING.md)

## License

MIT
","React Performance Devtool is a browser extension for inspecting the performance
of React Components. It statistically examines the performance based on the
measures which are collected by React using the `window.performance` API. With
every re-render, measures are updated and logged to the console. To use this
devtool extension, you'll need to register an observer in your app which will
observe a collection of data (performance measures) over a time. For further
information, see the official Mozilla Docs."
3249,Curriculum for learning front-end development during #100DaysOfCode.,"**Note:** this resource is old! I will be archiving this repository by the end of July 2021 as I feel that many of the recommendations here are outdated for learning front-end web development in 2021.

---

<p align=""center"">
  <img alt=""#100DaysOfCode Front-End Development"" src=""https://i.imgur.com/dwYOP0B.jpg"" />
</p>

**Please support this repo by giving it a star ⭐️ at the top of the page and [follow me](https://github.com/nas5w) for more resources!**

Want to learn more about frontend development? Consider:
- signing up for my [free newsletter](https://buttondown.email/devtuts?100DoC) where I periodically send out digestible bits of frontend knowledge!
- subscribing to my [YouTube channel](https://www.youtube.com/c/devtutsco) where I teach JavaScript, Typescript, and React.

---

This is a somewhat opinionated curriculum for learning front-end development during #100DaysOfCode. As it covers a wide range of front-end development topics, it can be thought of as more of a ""survey"" style course rather than a deep dive into any one area. Ideally, your takeaway from completing this curriculum will be some familiarity with each topic and the ability to easily dive deeper in any area in the future when necessary.

This curriculum was influenced significantly by Kamran Ahmed's [Modern Frontend Developer](https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c) roadmap. Please check it out--it is excellent.

**Note**: I know front-end development means a lot of different things to a lot of people! If you're a front-end developer and you think this guide could be improved, please let me know by raising an issue as described in the [Contributing](#contributing) section. Thank you!

# Translations

Thanks to some incredible contributors, this curriculum has been translated into the following languages!

- [Russian русский](/ru) (translation by [@Ibochkarev](https://github.com/Ibochkarev) and [@JonikUl](https://github.com/JonikUl))
- [Chinese 中文](/chinese) (translation by [@simplefeel](https://github.com/simplefeel))
- [Portuguese Português](/portuguese) (translation by [@Zardosh](https://github.com/Zardosh))
- [Polish polski](/polish) (translation by [@mbiesiad](https://github.com/mbiesiad))
- [Malay/Indonesia](/Malay) (translation by [@asyraf-labs](https://github.com/asyraf-labs))
- [Vietnamese Tiếng Việt](/Vietnam) (translation by [@duca7](https://github.com/duca7))
- [Japanese 日本語](/japanese) (translation by [miily8310s](https://github.com/miily8310s))
- [Bangla বাংলা](/bangla) (translation by [mirajus-salehin](https://github.com/mirajus-salehin))

# :calendar: Curriculum

The underlying principle of this repository is [timeboxing](https://en.wikipedia.org/wiki/Timeboxing). If you have spent any amount of time in the past trying to learn web development or a similar skill, you have likely experienced going down a rabbit hole on any one particular topic. This repository aims to assign a certain number of days to each technology and encourages you to move to the next once that number of days is up. 

It is anticipated that everyone is at a different level of proficiency when starting this challenge, and that's okay. Beginner and expert front-end developers alike can benefit from timeboxed practice in each of these areas.

The recommended day-by-day activities are as follows:

- Days 1-8: [HTML](#html)
- Days 9-16: [CSS](#css)
- Days 17-24: [JavaScript Basics](#javascript)
- Days 25-27: [jQuery](#jquery)
- Days 28-33: [Responsive Web Design](#rwd)
- Days 34-36: [Accessibility](#accessibility)
- Days 37-39: [Git](#git)
- Days 40-44: [Node and NPM](#node)
- Days 45-50: [Sass](#sass)
- Days 51-54: [Bootstrap](#bootstrap)
- Day 55: [BEM](#bem)
- Days 57-61: [Gulp](#gulp)
- Days 62-65: [Webpack](#webpack)
- Day 66: [ESLint](#eslint)
- Days 68-83: [React](#react)
- Days 84-89: [Redux](#redux)
- Days 90-94: [Jest](#jest)
- Days 95-97: [TypeScript](#typescript)
- Days 98-100: [NextJS](#nextjs)

# :mag_right: The Details

Below you can find a little information about each topic in the curriculum as well as some ideas/guidance on what to do for each. For inspiration on projects to do alongside this curriculum, see the [Project Ideas section](#project-ideas).

As part of the timeboxing principle, it's okay if you don't get through all of the items in the ""Learning Areas and Ideas"" sections. You should instead focus on getting the most you can out of the number of days assigned to each area and then move on.

<a name=""html""></a>
![HTML](https://i.imgur.com/O0F5XSR.jpg)

Hypertext Markup Language (HTML) is the standard markup language for creating web pages and web applications. With Cascading Style Sheets (CSS) and JavaScript, it forms a triad of cornerstone technologies for the World Wide Web. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. (Source: [Wikipedia](https://en.wikipedia.org/wiki/HTML))

### :bulb: Quick Takeaway

HTML is really the foundation of web development. Even in the javascript-based frameworks, you end up writing HTML in one form or another.

### :book: Learning Areas and Ideas

- Take the [Basic HTML and HTML5 section](https://learn.freecodecamp.org/) on freeCodeCamp.
- HTML page structure
- HTML elements
- Nesting HTML elements
- Semantic markup
- Links / multiple pages
- Images
- Audio/video media
- Forms and form elements
- Create a multi-page website! (See [Project Ideas](#project-ideas) if you need some inspiration).

<a name=""css""></a>
![CSS](https://i.imgur.com/028GOR0.jpg)

Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language like HTML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts. This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file, and reduce complexity and repetition in the structural content. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Cascading_Style_Sheets))

### :bulb: Quick Takeaway

CSS is another essential component of web development. While it is mainly used to style and position HTML elements, it has become increasingly capable of more dynamic tasks (e.g., animations) that would once be handled by javascript.

### :book: Learning Areas and Ideas

- Take the [Basic CSS, CSS flexbox, and CSS grid sections](https://learn.freecodecamp.org/) on freeCodeCamp.
- In-line CSS
- `<style>` tags
- External CSS with `<link>`
- Styling elements
- Selectors
- Floats, clearing floats
- Layouts (grid, flexbox)
- Fonts, custom fonts
- Style the HTML page(s) you made when learning HTML!

<a name=""javascript""></a>
![JavaScript](https://i.imgur.com/oHdD86j.jpg)

JavaScript , often abbreviated as JS, is a high-level, interpreted programming language that conforms to the ECMAScript specification. It is a language that is also characterized as dynamic, weakly typed, prototype-based and multi-paradigm. Alongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web. JavaScript enables interactive web pages and thus is an essential part of web applications. The vast majority of websites use it, and all major web browsers have a dedicated JavaScript engine to execute it. (Source: [Wikipedia](https://en.wikipedia.org/wiki/JavaScript))

### :bulb: Quick Takeaway

JavaScript has become increasingly important in the front-end world. While it was once used mainly to make pages dynamic, it is now the foundation of many front-end frameworks. These frameworks handle a lot of the tasks that were formerly handled by the back-end (e.g., routing and displaying different views).

### :book: Learning Areas and Ideas

- Take the [Basic JavaScript and ES6 sections](https://learn.freecodecamp.org/) on freeCodeCamp.
- Too many language fundamentals to list here!
- `<script>` tag and placement
- Accessing HTML elements
- The event loop, call stack, and event queue
- Prototypal Inheritance
- Reference vs. value
- Add some dynamic elements or logic to your HTML/CSS page(s) developed earlier!

<a name=""jquery""></a>
![jQuery](https://i.imgur.com/m9j02Fo.jpg)

jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript. (Source: [jQuery.com](https://jquery.com/))

### :bulb: Quick Takeaway

After you have spent some time with plain (also called ""vanilla"") javascript, you may find some tasks a bit cumbersome, especially those related to accessing and manipulating HTML elements. For quite a while, jQuery was the go-to library for making these kinds of tasks easier and consistent across different browsers. Nowadays, jQuery isn't necessarily ""mandatory"" learning because of advancements in vanilla javascript, CSS, and newer javascript frameworks (we'll look at frameworks later). Still, it would be beneficial to take a little time to learn some jQuery and apply it to a small project.

### :book: Learning Areas and Ideas

- Take the [jQuery section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Document ready
- Selectors
- Toggle classes
- Animation
- Add or move HTML elements
- Add jQuery to your site!

<a name=""rwd""></a>
![Responsive Web Design](https://i.imgur.com/Bt1zWwq.jpg)

Responsive web design (RWD) is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes. Recent work also considers the viewer proximity as part of the viewing context as an extension for RWD. Content, design and performance are necessary across all devices to ensure usability and satisfaction. A site designed with RWD adapts the layout to the viewing environment by using fluid, proportion-based grids, flexible images, and CSS3 media queries, an extension of the @media rule. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Responsive_web_design))

### :bulb: Quick Takeaway

Responsive web design is all about making web applications look and function properly on all types of device. A quick-and-dirty example would be that a website should look and function properly both in a desktop web browser and on a mobile phone browser. An understanding of responsive design is crucial for any front-end developer!

### :book: Learning Areas and Ideas

- Take the [Responsive Web Design Principles section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Media queries, breakpoints
- Responsive images
- Make your website responsive!
- Use Chrome DevTools to view your site on different devices/viewports.

<a name=""accessibility""></a>
![Accessibility](https://i.imgur.com/ayioMQw.jpg)

Web accessibility is the inclusive practice of ensuring there are no barriers that prevent interaction with, or access to, websites on the World Wide Web by people with disabilities. When sites are correctly designed, developed and edited, generally all users have equal access to information and functionality. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Web_accessibility))

### :bulb: Quick Takeaway

Accessibility, often written as a11y, is one of the most important topics in front-end web development, yet it seems to often get short shrift. Creating accessible web applications is not only ethically sound, but also makes a lot of business sense considering the additional audience that will be able to view your applications when they are accessible.

### :book: Learning Areas and Ideas

- Take the [Applied Accessibility section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Read some content on [The A11Y Project](https://a11yproject.com/about)
- Review their [checklist](https://a11yproject.com/checklist)
- Update your site(s) for accessibility based on this checklist

<a name=""git""></a>
![Git](https://i.imgur.com/5QoNJqs.jpg)

Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. (Source: [git-scm.com](https://git-scm.com/))

### :bulb: Quick Takeaway

Version/code control is an essential part of any web developer's toolkit. There are a number of different version control systems, but Git is by far the most prevalent at the moment. You can (and should!) use it to track your projects as you learn!

### :book: Learning Areas and Ideas

- [Git Tutorial for Beginners (Video)](https://www.youtube.com/watch?v=HVsySz-h9r4)
- Install git
- Set up a [github](https://github.com) account
- Learn the most-used git commands:
  - init
  - clone
  - add
  - commit
  - push
  - pull
  - merge
  - rebase
- Add your existing projects to github!

<a name=""node""></a>
![Node and NPM](https://i.imgur.com/8ik2alD.jpg)

Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. JavaScript is used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a ""JavaScript everywhere"" paradigm, unifying web application development around a single programming language, rather than different languages for server side and client side scripts. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Node.js))

### :bulb: Quick Takeaway

While Node.js is typically known as a back-end solution, it is used quite frequently to support front-end development. It does this in a number of ways, including things like running build tools, testing, and linting (all to be covered soon!). Node Package Manager (npm) is another great feature of Node and can be used to manage dependencies of your project (i.e., code libraries your project might rely on -- jQuery is an example!).

### :book: Learning Areas and Ideas

- Research node and how it is different than the browser
- Install node (npm comes with it)
- Create a simple javascript file and run it with node
- Use NPM to manage any dependencies in your existing project(s) (e.g., jQuery!)

<a name=""sass""></a>
![Sass](https://i.imgur.com/ZRedLge.jpg)

Sass is an extension of CSS that adds power and elegance to the basic language. It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly, particularly with the help of the Compass style library. (Source: [sass-lang.com](https://sass-lang.com/documentation/file.SASS_REFERENCE.html))

### :bulb: Quick Takeaway

Sass allows you to write CSS in a more programmatic way. If you've done some CSS, you might have noticed that you end up repeating a lot of information--for example, specifying the same color code. In Sass, you can use things like variables, loops, and nesting to reduce redundancy and increase readability. After writing your code in Sass, you can quickly and easily compile it to regular CSS.

### :book: Learning Areas and Ideas

- [Install Sass](https://sass-lang.com/install) globally with npm!
- [Sass Crash Course Video](https://www.youtube.com/watch?v=roywYSEPSvc)
- Follow the [Learn Sass](https://sass-lang.com/guide) tutorial and/or [freeCodeCamp](https://learn.freecodecamp.org/) Sass tutorial.
- Update your existing site to generate your CSS using Sass!

<a name=""bootstrap""></a>
![Bootstrap](https://i.imgur.com/cJ21eH2.jpg)

\* Some alternatives: Foundation, Bulma, Materialize

Bootstrap is a free and open-source front-end framework for developing websites and web applications. It contains HTML and CSS-based design templates for typography, forms, buttons, navigation and other interface components, as well as optional JavaScript extensions. (Source: [Wikipedia](<https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)>))

### :bulb: Quick Takeaway

There are many options for laying out, styling, and making your web application dynamic, but you'll find that starting with a framework helps you tremendously in getting a head start. Bootstrap is one such framework, but it is definitely far from the only option! I recommend getting familiar with one framework like this, but it's far more important to grasp HTML, CSS, and JavaScript fundamentals than it is to get caught up in any one framework.

### :book: Learning Areas and Ideas

- Learn what Bootstrap is and why you would want to use it
- [Bootstrap 4 Crash Course (Video)](https://www.youtube.com/watch?v=hnCmSXCZEpU)
- Complete the Bootstrap section on [freeCodeCamp](https://learn.freecodecamp.org/)
- Refactor your site using bootstrap!

<a name=""bem""></a>
![BEM](https://i.imgur.com/MCvMRQl.jpg)

The Block, Element, Modifier methodology (commonly referred to as BEM) is a popular naming convention for classes in HTML and CSS. Developed by the team at Yandex, its goal is to help developers better understand the relationship between the HTML and CSS in a given project. (Source: [css-tricks.com](https://css-tricks.com/bem-101/))

### :bulb: Quick Takeaway

It's important to know naming and organization systems like BEM exist and why they are used. Do some research here, but at a beginner level I wouldn't recommend devoting too much time to the subject.

### :book: Learning Areas and Ideas

- Read the [BEM introduction](http://getbem.com/introduction/)
- [Why I Use BEM (Video)](https://www.youtube.com/watch?v=SLjHSVwXYq4)
- Create a simple webpage using BEM conventions.

<a name=""gulp""></a>
![Gulp](https://i.imgur.com/KQrByqq.jpg)

Gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something. (Source: [gulpjs.com](https://gulpjs.com/))

### :bulb: Quick Takeaway

In modern front-end development, you'll often find yourself needing to automate tasks like bundling, moving files, and injecting references into HTML files. Gulp is one tool that can help you do these things!

### :book: Learning Areas and Ideas

- Install gulp with npm
- Follow the [gulp for beginners tutorial](https://css-tricks.com/gulp-for-beginners/) on CSS-Tricks
- In your website, set up gulp to:
  - Compile Sass for you
  - Put the generated CSS file in `build` subdirectory
  - Move your web pages to the build directory
  - Inject a reference to your generated CSS file into your web pages

<a name=""webpack""></a>
![Webpack](https://i.imgur.com/0rx82Kl.jpg)

At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles. (Source: [webpack.js.org](https://webpack.js.org/concepts/))

### :bulb: Quick Takeaway

Imagine that you have a large web development project with a number of different developers working on a lot of different tasks. Rather than all working in the same files, you might want to modularize them as much as possible. Webpack helps enable this by letting your team work modularly and then, come time to build the application, Webpack will stick it all together: HTML, CSS/Sass, JavasScript, images, etc. Webpack isn't the only module bundler, but it seems to be the front-runner at the moment.

### :book: Learning Areas and Ideas

- Read [webpack concepts](https://webpack.js.org/concepts/)
- [What is Webpack, How does it work? (Video)](https://www.youtube.com/watch?v=GU-2T7k9NfI)
- [This webpack tutorial](https://hackernoon.com/a-tale-of-webpack-4-and-how-to-finally-configure-it-in-the-right-way-4e94c8e7e5c1)

<a name=""eslint""></a>
![ESLint](https://i.imgur.com/CJb6ZnL.jpg)

ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn’t adhere to certain style guidelines. There are code linters for most programming languages, and compilers sometimes incorporate linting into the compilation process. (Source: [eslint.org](https://eslint.org/docs/about/))

### :bulb: Quick Takeaway

Linting is a fantastic tool for code quality, readability, and consistency. Using a linter will help you catch syntax and formatting mistakes before they go to production. You can run linters manually or include them in your build/deployment process.

### :book: Learning Areas and Ideas

- Install eslint using npm
- [How to Setup VS Code + Prettier + ESLint (Video)](https://www.youtube.com/watch?v=YIvjKId9m2c)
- Lint your JavaScript

<a name=""react""></a>
![React](https://i.imgur.com/uLYz15W.jpg)

\* Some alternatives: Vue, Angular, Ember

React (also known as React.js or ReactJS) is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. Complex React applications usually require the use of additional libraries for state management, routing, and interaction with an API. (source: [Wikipedia](<https://en.wikipedia.org/wiki/React_(JavaScript_library)>))

### :bulb: Quick Takeaway

Front-end JavaScript frameworks are at the forefront of modern front-end development. One important takeaway here is that React, despite being incredibly popular, is only a library for building user interfaces whereas frameworks like Vue and Angular aim to be more full-featured. For example, if you build an application with in React that needs to route to different views, you'll need to bring in something like `react-router`.

### :book: Learning Areas and Ideas

- Take the [React tutorial](https://reactjs.org/tutorial/tutorial.html)
- [Learn React with Mosh](https://www.youtube.com/watch?v=Ke90Tje7VS0)
- Refactor your website as a React app!
- Note: `create-react-app` is a convenient tool to scaffold new React projects.

<a name=""redux""></a>
![Redux](https://i.imgur.com/S9H2Dbp.jpg)

Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. (Source: [redux.js.org](https://redux.js.org/introduction/getting-started))

### :bulb: Quick Takeaway

As you build bigger and bigger front-end applications, you start realizing that it's hard to maintain application state: things like the if the user is logged in, who the user is, and generally what's going on in the application. Redux is a great library that helps you maintain a single source of state on which your application can base its logic.

### :book: Learning Areas and Ideas

- This [Redux video tutorial](https://www.youtube.com/watch?v=93p3LxR9xfM)
- This [Redux video series](https://egghead.io/courses/getting-started-with-redux) by Dan Abramov, creator of Redux
- Take note of the [Redux three principles](https://redux.js.org/introduction/three-principles)
  - Single source of truth
  - State is read-only
  - Changes are made with pure functions
- Add Redux state management to your app!

<a name=""jest""></a>
![Jest](https://i.imgur.com/Cr39axw.jpg)

Jest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more! (Source: [jestjs.io](https://jestjs.io))

### :bulb: Quick Takeaway

It is very important to set up automated testing for your front-end projects. Setting up automated testing will allow you to make future changes with confidence--if you make changes and your tests still pass, you will be fairly comfortable you didn't break any existing functionality. There are too many testing frameworks to list; Jest is simply one of my favorties.

### :book: Learning Areas and Ideas

- Learn [Jest basics](https://jestjs.io/docs/en/getting-started)
- If you used `create-react-app`, [Jest is already configured](https://facebook.github.io/create-react-app/docs/running-tests).
- Add tests to your application!

<a name=""typescript""></a>
![TypeScript](https://i.imgur.com/BZROJNs.jpg)

\* Alternative: Flow

TypeScript is an open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing to the language. TypeScript is designed for development of large applications and transcompiles to JavaScript. As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs. TypeScript may be used to develop JavaScript applications for both client-side and server-side (Node.js) execution. (Source: [Wikipedia](https://en.wikipedia.org/wiki/TypeScript))

### :bulb: Quick Takeaway

JavaScript is dynamically typed. However, it is a common belief that static typing (i.e., specifying variable types, classes, interfaces ahead of time) is both clearer and reduces the likelihood of defects/bugs. Regardless of how you feel on the topic, it's important to at least get a feel for a statically-typed version of JavaScript like TypeScript. Note that TypeScript compiles down to JavaScript so it can be interpreted by browsers (i.e., browsers don't natively interpret TypeScript).

### :book: Learning Areas and Ideas

- [Learn TypeScript in 5 minutes](https://medium.freecodecamp.org/learn-typescript-in-5-minutes-13eda868daeb)
- [Learn TypeScript in 50 minutes (Video)](https://www.youtube.com/watch?v=WBPrJSw7yQA)
- Optionally [create a React app with TypeScript](https://levelup.gitconnected.com/typescript-and-react-using-create-react-app-a-step-by-step-guide-to-setting-up-your-first-app-6deda70843a4)

<a name=""nextjs""></a>
![NextJS](https://i.imgur.com/YNtW38J.jpg)

Next.js is a minimalistic framework for server-rendered React applications. (Source: [Next.js — React Server Side Rendering Done Right](https://hackernoon.com/next-js-react-server-side-rendering-done-right-f9700078a3b6))

### :bulb: Quick Takeaway

Now we're getting advanced! By now you've built a React (or Vue or Angular) application that does quite a bit of work in the browser. For various reasons (e.g., SEO, concerns over client performance), you might actually want your front-end application to be rendered on the server rather than the client. That's where a framework like next.js comes in.

### :book: Learning Areas and Ideas

- Next.js [Getting Started](https://nextjs.org/learn/)
- [Next.js Crash Course (Video)](https://www.youtube.com/watch?v=IkOVe40Sy0U)
- Create a Next.js app or migrate your existing app to Next.js

# But What About X?

This list is supposed to give you broad exposure to the front-end ecosystem, but it's simply impossible to hit on every single topic, not to mention the myriad tools within each area! If you do think I missed something very important, please see the [Contributing](#contributing) section to see how you can help make this guide better.

# Project Ideas

As you progress through #100DaysOfCode, you'll want one or multiple projects to which you can apply your new knowledge. In this section, I attempt to provide a few project ideas that you can use. Alternatively, you're encouraged to come up with your own project ideas as those ideas may interest and motivate you more.

- Beginner ideas:
  - Build a portfolio website
- Intermediate/Advanced ideas:
  - Build a tweet analysis app (If you know back-end and API integration already)
  
# Need Help?

Generally, I have found the following resources invaluable to learning software development:

- Googling the issue
- [StackOverflow](http://www.stackoverflow.com) (There's a good chance your question has already been asked and will be a high-ranking result when googling).
- [Mozilla MDN Web Docs](https://developer.mozilla.org/en-US/)
- [freeCodeCamp](https://www.freecodecamp.org/)
- Local software development Meetups! Most are very friendly to all experience levels.

If you'd like my input on anything, feel free to [connect with me on Twitter](http://www.twitter.com/nas5w) and I'll do my best to try to offer some assistance. If you think there's an issue with the curriculum or have a recommendation, see the [contributing section](#contributing) below.

# Contributing

## Spread the Word

If you appreciate the work done here, you can contribute significantly by spreading the word about this repository, including things like:

- Starring and forking this repository
- Sharing this repository on social media

## Contribute to this Repository

This is a work in progress and I very much appreciate any help in maintaining this knowledge base!

When contributing to this repository, please first discuss the change you wish to make via issue before making a change. Otherwise, it will be very hard to understand your proposal and could potentially result in you putting in a lot of work to a change that won't get merged.

Please note that everyone involved in this project is either trying to learn or trying to help--Please be nice!

## Pull Request Process

1. Create an issue outlining the proposed pull request.
2. Obtain approval from a project owner to make the proposed change.
3. Create the pull request.
","This is a somewhat opinionated curriculum for learning front-end development
during #100DaysOfCode. This curriculum was influenced by Modern Frontend
Developer's roadmap. This repository aims to move to a number of days that move
to the next technology level."
2886,📷  Image Processing Component for React,"**This project is no longer maintained.**

# react-imgpro

[![Build Status](https://travis-ci.org/nitin42/react-imgpro.svg?branch=master)](https://travis-ci.org/nitin42/react-imgpro)
![status](https://img.shields.io/badge/version-1.3.14-brightgreen.svg)
![status](https://img.shields.io/badge/size-13.1KB-brightgreen.svg)
![status](https://img.shields.io/badge/status-stable-brightgreen.svg)
![yarn](https://img.shields.io/badge/yarn-1.9.4-blue.svg)

> Image Processing Component for React

<p align=""center"">
  <img src=""./images/react-impro.png"" height=""200"" width=""200"">
</p>

## Introduction

`react-imgpro` is a image processing component for React. This component process an image with filters supplied as props and returns a [base64](https://en.wikipedia.org/wiki/Base64) image. 

**Example**

```jsx

const mix = {
    color: 'mistyrose',
    amount: 10
}

class App extends React.Component {
  state = { src: '', err: null }
  render() {
    return (
      <ProcessImage
        image='http://365.unsplash.com/assets/paul-jarvis-9530891001e7f4ccfcef9f3d7a2afecd.jpg'
        colors={{
          mix
        }}
        resize={{ width: 500, height: 500, mode: 'bilinear' }}
        processedImage={(src, err) => this.setState({ src, err, })}
      />     
    )
  }
}
```

<p align=""center"">
<img src=""./images/introduction.jpg"" height=""400"" width=""800"">
</p>

## Motivation

<p align=""center"">
  <img src=""https://i.gyazo.com/16f09cba02f9dfeb272cc574f9fbbcff.png"">
</p>

I was working on a project last month which involved a lot of image processing and I'd to rely on third party libraries. But before using them directly, I'd to learn different concepts in gl (shaders) and then try to implement them in React. The difficult part was not learning but it was the verbosity, boilerplate code and redundancy introduced by the libraries in the codebase. It was getting difficult to organise all the things 😞

So I wanted a layer of abstraction which would make it easy to manipulate the colors of the image, applying filters and gl shaders efficiently with ease. And React's component based model was perfect for hiding all the implementation details in a component 😄 

## Demo

<p align=""center"">
  <img src=""http://g.recordit.co/XmhTiP84TD.gif"">
</p>

## Install

```
npm install react-imgpro
```

This also depends on `react` so make sure you've installed it.

OR

The UMD build is also available via [jsDelivr](https://www.jsdelivr.com).

```
<script src=""https://cdn.jsdelivr.net/npm/react@16/umd/react.production.min.js""></script>
<script src=""https://cdn.jsdelivr.net/npm/react-imgpro@1/build/main.js""></script>
```

## Usage

```jsx
import React from 'react';
import ProcessImage from 'react-imgpro';

class App extends React.Component {
  state = {
    src: '',
    err: null
  }
  
  render() {
    return (
      <ProcessImage
        image='http://365.unsplash.com/assets/paul-jarvis-9530891001e7f4ccfcef9f3d7a2afecd.jpg'
        resize={{ width: 500, height: 500 }}
        colors={{
          mix: {
            color: 'mistyrose',
            amount: 20
          }
        }}
        processedImage={(src, err) => this.setState({ src, err})}
      />
    )
  }
}

```

## Documentation

See the detailed documentation [here](./Docs).

## SSR support ?

Yes, `react-imgpro` supports SSR.

## Contributing

[Contributing guide](https://github.com/nitin42/react-imgpro/blob/master/Docs/CONTRIBUTING.MD).

## Extra resources

If you want to use blenders, plugins and perform event based calculations, try [CamanJS](http://camanjs.com/).

## License

MIT

<a href=""https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/react-imgpro"" rel=""nofollow""><img src=""https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/react-imgpro.svg"" style=""width: 888px; height: 68px;"" alt=""Sponsor"" /></a>
","React is a React component for image processing. The UMD build is also available
via [jsDelivr] and [www.jsdelivr.com). The documentation is detailed, see the
documentation documentation for more details. The code is written in C# and C#
with a little bit of JavaScript. It's written in React's component based model
which hides all the implementation details in a component. It also depends on
`react` so make sure you've installed it."
2537,Classic overhead run-and-gun game,"# ![C-Dogs SDL](http://cxong.github.io/cdogs-sdl/images/title.png)

[![Build Status](https://github.com/cxong/cdogs-sdl/workflows/Build/badge.svg)](https://github.com/cxong/cdogs-sdl/actions)
[![Build Status (Windows)](https://ci.appveyor.com/api/projects/status/github/cxong/cdogs-sdl?svg=true)](https://ci.appveyor.com/project/cxong/cdogs-sdl)
[![Github All Releases](https://img.shields.io/github/downloads/cxong/cdogs-sdl/total.svg)](https://github.com/cxong/cdogs-sdl/releases)
[![Release](http://img.shields.io/github/release/cxong/cdogs-sdl.svg)](https://github.com/cxong/cdogs-sdl/releases/latest)
[![Custom campaigns](https://img.shields.io/badge/%F0%9F%94%97-custom%20campaigns-brightgreen)](http://cdogs.morezombies.net/)

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/column.png) Introduction

C-Dogs SDL is a classic overhead run-and-gun game, supporting up to 4 players
in co-op and deathmatch modes. Customize your player, choose from many weapons,
and blast, slide and slash your way through over 100 user-created campaigns.
Have fun!

[Releases and release notes](https://github.com/cxong/cdogs-sdl/releases)

For more information about the original C-Dogs read [`original\_readme.txt`](https://raw.githubusercontent.com/cxong/cdogs-sdl/master/doc/original_readme.txt).

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/folder.png) What is C-Dogs SDL

![Walk cycle](https://github.com/cxong/cxong.github.io/blob/master/_posts/cdogs_walk_cycle_jones.gif)

[C-Dogs](https://en.wikipedia.org/wiki/C-Dogs) is a freeware DOS game made between 1997-2001 by Ronny Wester, who's also known for making Cyberdogs (1994). Although relatively obscure, it was one of the more well-known games of its kind, and built a small following with many fans creating custom campaigns for it. Players loved it for its simple yet addictive gameplay and wicked explosions.

![Explosions](https://github.com/cxong/cdogs-sdl/blob/gh-pages/_posts/shake.gif)

- Internet Archive: http://web.archive.org/web/20050305054405/http://www.orcsoftware.com/~ronny/C-Dogs.html

The story would have ended there had Ronny not been awesome enough to release the source code in 2002. There it was picked up by Jeremy Chin and Lucas Martin-King, who ported the game to SDL and made it available for modern PCs. A few other ports came and went, for systems as varied as BeOS and Wii.

These days the project is maintained by Cong Xu, who along with a few other contributors, have been making the game even better while staying true to the original game's vision. 4-player multiplayer, co-op AI, moddability and new campaigns/maps are just some of the enhancements available.

So what are you waiting for? Download C-Dogs SDL today and have a blast!


## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/barrel_blue.png) Platforms

[![Packaging status](https://repology.org/badge/tiny-repos/cdogs-sdl.svg)](https://repology.org/project/cdogs-sdl/versions)

C-Dogs SDL runs on Windows, Linux and macOS. Other platforms and ports are also available, but may be outdated.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/cd.png) Installation

The easiest way is to [download from **itch.io**](https://congusbongus.itch.io/cdogs-sdl). If you use the itch.io app, your game installation will be updated automatically.

For building on your platform, follow the [getting started wiki](https://github.com/cxong/cdogs-sdl/wiki#getting-started). You will need the SDL2 development libraries installed.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/barrel_skull.png) License

tl;dr: **GPLv2** for code, **CC0/CC-BY/CC-BY-SA** for assets. Significant amounts of **BSD 2-clause** code.

Code is licensed under GPL version 2, with significant portions under BSD 2-clause. The code is free software; you can use, modify and redistribute for any purpose, as long as you follow the GPL and BSD licenses!

Data is licensed under various free terms, including CC0, CC-BY and CC-BY-SA. [The original C-Dogs data is also under CC-BY](https://raw.githubusercontent.com/cxong/cdogs-sdl/master/doc/README_DATA.md). New data is licensed as CC0 if not specified. You are free to use, modify and redistribute these for any purpose, as long as you follow their licenses.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/circuit.png) Contact

If you have any questions, comments, bug reports, patches or anything else related to C-Dogs SDL:

- [Raise an issue](https://github.com/cxong/cdogs-sdl/issues)
- Email: [Cong](<mailto:congusbongus@gmail.com>)
","C-Dogs is a classic overhead run-and-gun game, supporting up to 4 players.
Customize your player, choose from many weapons, blast, slide and slash your way
through over 100 user-created campaigns. The game was made between 1997-2001 by
Ronny Wester, also known for making Cyberdogs (1994)"
3399,Object-based searching.,"# ![Ransack](./docs/static/logo/ransack-h.png ""Ransack"")

[![Build Status](https://github.com/activerecord-hackery/ransack/workflows/test/badge.svg)](https://github.com/activerecord-hackery/ransack/actions)
[![Gem Version](https://badge.fury.io/rb/ransack.svg)](http://badge.fury.io/rb/ransack)
[![Code Climate](https://codeclimate.com/github/activerecord-hackery/ransack/badges/gpa.svg)](https://codeclimate.com/github/activerecord-hackery/ransack)
[![Backers on Open Collective](https://opencollective.com/ransack/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/ransack/sponsors/badge.svg)](#sponsors)

# Introduction

Ransack will help you easily add **searching to your Rails application**, without any additional dependencies.

There are advanced searching solutions around, like ElasticSearch or Algolia. **Ransack** will do the job for many Rails websites, without the need to run additional infrastructure or work in a different language. With Ransack you do it all with standard Ruby and ERB.

Ready to move beyond the basics? Use **advanced features** like i18n and extensive configuration options.

Ransack is supported for Rails 7.0, 6.1 on Ruby 2.7 and later.

## Installation

To install `ransack` and add it to your Gemfile, run

```ruby title='Gemfile'
gem 'ransack'
```

### Bleeding edge

If you would like to use the latest updates not yet published to RubyGems, use the `main` branch:

```ruby title='Gemfile'
gem 'ransack', :github => 'activerecord-hackery/ransack', :branch => 'main'
```

### Documentation

There is [extensive documentation on Ransack](https://activerecord-hackery.github.io/ransack/), which is a [Docusaurus](https://docusaurus.io/) project and run as a GitHub Pages site.

## Issues tracker

* Before filing an issue, please read the [Contributing Guide](CONTRIBUTING.md).
* File an issue if a bug is caused by Ransack, is new (has not already been reported), and _can be reproduced from the information you provide_.
* Please consider adding a branch with a failing spec describing the problem.
* Contributions are welcome. :smiley:
* Please do not use the issue tracker for personal support requests. Stack Overflow or [GitHub Discussions](https://github.com/activerecord-hackery/ransack/discussions) is a better place for that where a wider community can help you!


## Contributions

To support the project:

* Consider supporting us via [Open Collective](https://opencollective.com/ransack/backers/badge.svg)
* Use Ransack in your apps, and let us know if you encounter anything that's
broken or missing. A failing spec to demonstrate the issue is awesome. A pull
request with passing tests is even better!
* Before filing an issue or pull request, be sure to read and follow the
[Contributing Guide](CONTRIBUTING.md).
* Please use Stack Overflow or [GitHub Discussions](https://github.com/activerecord-hackery/ransack/discussions) for questions or discussion not
directly related to bug reports, pull requests, or documentation improvements.
* Spread the word on social media if Ransack's been useful
to you. The more people who are using the project, the quicker we can find and
fix bugs!

## Contributors

Ransack was created by [Ernie Miller](http://twitter.com/erniemiller) and is developed and maintained by:
* [Sean Carroll](https://github.com/scarroll32)
* [Deivid Rodriguez](https://github.com/deivid-rodriguez)
* [Greg Molnar](https://github.com/gregmolnar)
* [A great group of contributors](https://github.com/activerecord-hackery/ransack/graphs/contributors).
- Ransack's logo is designed by [Anıl Kılıç](https://github.com/anilkilic).

Alumni Maintainers
- [Jon Atack](http://twitter.com/jonatack)
- [Ryan Bigg](http://twitter.com/ryanbigg)

This project exists thanks to all the people who contribute. <img src=""https://opencollective.com/ransack/contributors.svg?width=890&button=false"" />


## Backers

Thank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/ransack#backer)]

<a href=""https://opencollective.com/ransack#backers"" target=""_blank""><img src=""https://opencollective.com/ransack/backers.svg?width=890"" /></a>


## Sponsors

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/ransack#sponsor)]

<a href=""https://opencollective.com/ransack/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/0/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/1/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/2/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/3/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/4/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/5/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/6/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/7/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/8/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/9/avatar.svg"" /></a>
","Ransack lets you easily add searching to your Ruby or ERB application. Ransack
is supported for Ruby 7.0, 6.1 on Ruby 2.7 and later. It has advanced features
like i18n and extensive configuration options. There is extensive documentation
on the project's GitHub page. To support the project, consider supporting us via
[Open Collective](https://opencollective.com/ransack/backers/badge) or [GitHub]
Discussions."
885,On the fly syntax checking for GNU Emacs,"# [![Flycheck][logo]](https://www.flycheck.org) #

[![License GPL 3](https://img.shields.io/github/license/flycheck/flycheck.svg)][COPYING]
[![Join the chat](https://img.shields.io/gitter/room/flycheck/flycheck.svg)](https://gitter.im/flycheck/flycheck)
[![MELPA](https://melpa.org/packages/flycheck-badge.svg)](https://melpa.org/#/flycheck)
[![MELPA stable version](http://stable.melpa.org/packages/flycheck-badge.svg)](https://stable.melpa.org/#/flycheck)
[![Build Status](https://img.shields.io/travis/flycheck/flycheck/master.svg)](https://travis-ci.org/flycheck/flycheck)

<https://www.flycheck.org>

Modern on-the-fly syntax checking extension for GNU Emacs.  [Try it][]!

![](https://raw.githubusercontent.com/flycheck/flycheck/master/doc/images/flycheck-annotated.png)

For a more gentle introduction read the [Installation][] instructions and go
through [Quickstart][] guide.

Please ask questions about Flycheck on [Stack Exchange][sx] or in our
[Gitter chat][gitter], and report bugs to our [issue tracker][].

We welcome all kinds of contributions, whether you write patches, open pull
requests, write documentation, help others with Flycheck issues, or just tell
other people about your experiences with Flycheck.  Please take a look at our
[Contributor’s Guide][contrib] for help and guidance about contributing to
Flycheck.

We strive to create a safe, friendly and welcoming environment in the Flycheck
community and have a [Code of Conduct][coc] that defines acceptable and welcome
behaviour as well as sanctions for violations.  All contributors and all
participants are expected to follow it, on Github, Gitter, Emacs.SX or any other
place that’s part of Flycheck’s broader community.

Flycheck is free software: you can redistribute it and/or modify it under the
terms of the [GNU General Public License][copying] as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

Flycheck is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the [GNU General Public License][copying] for more
details.

[COPYING]: https://github.com/flycheck/flycheck/blob/master/COPYING
[manual]: https://www.flycheck.org/en/latest/index.html#the-user-guide
[logo]: https://raw.githubusercontent.com/flycheck/flycheck/master/doc/_static/logo.png
[try it]: https://www.flycheck.org/en/latest/#try-out
[Installation]: https://www.flycheck.org/en/latest/user/installation.html
[Quickstart]: https://www.flycheck.org/en/latest/user/quickstart.html
[sx]: https://emacs.stackexchange.com/questions/tagged/flycheck
[gitter]: https://gitter.im/flycheck/flycheck
[Issue Tracker]: https://github.com/flycheck/flycheck/issues
[contrib]: https://www.flycheck.org/en/latest/contributor/contributing.html
[coc]: https://www.flycheck.org/en/latest/community/conduct.html
","Modern on-the-fly syntax checking extension for GNU Emacs. Free software under
the [GNU General Public License] Flycheck is distributed in the hope that it
will be useful, but without any warranty of MERCHANTABILITY or FITNESS FOR A
PEOPLE'S PARTICULAR PURPOSE."
1048,"aka ""Bayesian Methods for Hackers"": An introduction to Bayesian methods + probabilistic programming with a computation/understanding-first, mathematics-second point of view. All in pure Python ;)  ","# [Bayesian Methods for Hackers](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/)
#### *Using Python and PyMC*


The Bayesian method is the natural approach to inference, yet it is hidden from readers behind chapters of slow, mathematical analysis. The typical text on Bayesian inference involves two to three chapters on probability theory, then enters what Bayesian inference is. Unfortunately, due to mathematical intractability of most Bayesian models, the reader is only shown simple, artificial examples. This can leave the user with a *so-what* feeling about Bayesian inference. In fact, this was the author's own prior opinion.

After some recent success of Bayesian methods in machine-learning competitions, I decided to investigate the subject again. Even with my mathematical background, it took me three straight-days of reading examples and trying to put the pieces together to understand the methods. There was simply not enough literature bridging theory to practice. The problem with my misunderstanding was the disconnect between Bayesian mathematics and probabilistic programming. That being said, I suffered then so the reader would not have to now. This book attempts to bridge the gap.

If Bayesian inference is the destination, then mathematical analysis is a particular path towards it. On the other hand, computing power is cheap enough that we can afford to take an alternate route via probabilistic programming. The latter path is much more useful, as it denies the necessity of mathematical intervention at each step, that is, we remove often-intractable mathematical analysis as a prerequisite to Bayesian inference. Simply put, this latter computational path proceeds via small intermediate jumps from beginning to end, where as the first path proceeds by enormous leaps, often landing far away from our target. Furthermore, without a strong mathematical background, the analysis required by the first path cannot even take place.

*Bayesian Methods for Hackers* is designed as an introduction to Bayesian inference from a computational/understanding-first, and mathematics-second, point of view. Of course as an introductory book, we can only leave it at that: an introductory book. For the mathematically trained, they may cure the curiosity this text generates with other texts designed with mathematical analysis in mind. For the enthusiast with less mathematical background, or one who is not interested in the mathematics but simply the practice of Bayesian methods, this text should be sufficient and entertaining.

The choice of PyMC as the probabilistic programming language is two-fold. As of this writing, there is currently no central resource for examples and explanations in the PyMC universe. The official documentation assumes prior knowledge of Bayesian inference and probabilistic programming. We hope this book encourages users at every level to look at PyMC. Secondly, with recent core developments and popularity of the scientific stack in Python, PyMC is likely to become a core component soon enough.

PyMC does have dependencies to run, namely NumPy and (optionally) SciPy. To not limit the user, the examples in this book will rely only on PyMC, NumPy, SciPy and Matplotlib.


Printed Version by Addison-Wesley
------
<div style=""float: right; margin-left: 30px;""><img title=""Bayesian Methods for Hackersg""style=""float: right;margin-left: 30px;"" src=""http://www-fp.pearsonhighered.com/assets/hip/images/bigcovers/0133902838.jpg"" align=right height = 200 /></div>

**Bayesian Methods for Hackers is now available as a printed book!** You can pick up a copy on [Amazon](http://www.amazon.com/Bayesian-Methods-Hackers-Probabilistic-Addison-Wesley/dp/0133902838). What are the differences between the online version and the printed version?

 - Additional Chapter on Bayesian A/B testing
 - Updated examples
 - Answers to the end of chapter questions
 - Additional explanation, and rewritten sections to aid the reader. 


Contents
------

See the project homepage [here](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/) for examples, too.


The below chapters are rendered via the *nbviewer* at
[nbviewer.jupyter.org/](http://nbviewer.jupyter.org/), and is read-only and rendered in real-time.
Interactive notebooks + examples can be downloaded by cloning! 

### PyMC2

* [**Prologue:**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Prologue/Prologue.ipynb) Why we do it.

* [**Chapter 1: Introduction to Bayesian Methods**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC2.ipynb)
    Introduction to the philosophy and practice of Bayesian methods and answering the question, ""What is probabilistic programming?"" Examples include:
    - Inferring human behaviour changes from text message rates
    
* [**Chapter 2: A little more on PyMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter2_MorePyMC/Ch2_MorePyMC_PyMC2.ipynb)
    We explore modeling Bayesian problems using Python's PyMC library through examples. How do we create Bayesian models? Examples include:
    - Detecting the frequency of cheating students, while avoiding liars
    - Calculating probabilities of the Challenger space-shuttle disaster
    
* [**Chapter 3: Opening the Black Box of MCMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter3_MCMC/Ch3_IntroMCMC_PyMC2.ipynb)
    We discuss how MCMC operates and diagnostic tools. Examples include:
    - Bayesian clustering with mixture models
    
* [**Chapter 4: The Greatest Theorem Never Told**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter4_TheGreatestTheoremNeverTold/Ch4_LawOfLargeNumbers_PyMC2.ipynb)
    We explore an incredibly useful, and dangerous, theorem: The Law of Large Numbers. Examples include:
    - Exploring a Kaggle dataset and the pitfalls of naive analysis
    - How to sort Reddit comments from best to worst (not as easy as you think)
    
* [**Chapter 5: Would you rather lose an arm or a leg?**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter5_LossFunctions/Ch5_LossFunctions_PyMC2.ipynb)
    The introduction of loss functions and their (awesome) use in Bayesian methods.  Examples include:
    - Solving the *Price is Right*'s Showdown
    - Optimizing financial predictions
    - Winning solution to the Kaggle Dark World's competition
    
* [**Chapter 6: Getting our *prior*-ities straight**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter6_Priorities/Ch6_Priors_PyMC2.ipynb)
    Probably the most important chapter. We draw on expert opinions to answer questions. Examples include:
    - Multi-Armed Bandits and the Bayesian Bandit solution.
    - What is the relationship between data sample size and prior?
    - Estimating financial unknowns using expert priors
    
    We explore useful tips to be objective in analysis as well as common pitfalls of priors. 

### PyMC3

* [**Prologue:**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Prologue/Prologue.ipynb) Why we do it.

* [**Chapter 1: Introduction to Bayesian Methods**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC3.ipynb)
    Introduction to the philosophy and practice of Bayesian methods and answering the question, ""What is probabilistic programming?"" Examples include:
    - Inferring human behaviour changes from text message rates
    
* [**Chapter 2: A little more on PyMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter2_MorePyMC/Ch2_MorePyMC_PyMC3.ipynb)
    We explore modeling Bayesian problems using Python's PyMC library through examples. How do we create Bayesian models? Examples include:
    - Detecting the frequency of cheating students, while avoiding liars
    - Calculating probabilities of the Challenger space-shuttle disaster
    
* [**Chapter 3: Opening the Black Box of MCMC**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter3_MCMC/Ch3_IntroMCMC_PyMC3.ipynb)
    We discuss how MCMC operates and diagnostic tools. Examples include:
    - Bayesian clustering with mixture models
    
* [**Chapter 4: The Greatest Theorem Never Told**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter4_TheGreatestTheoremNeverTold/Ch4_LawOfLargeNumbers_PyMC3.ipynb)
    We explore an incredibly useful, and dangerous, theorem: The Law of Large Numbers. Examples include:
    - Exploring a Kaggle dataset and the pitfalls of naive analysis
    - How to sort Reddit comments from best to worst (not as easy as you think)
    
* [**Chapter 5: Would you rather lose an arm or a leg?**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter5_LossFunctions/Ch5_LossFunctions_PyMC3.ipynb)
    The introduction of loss functions and their (awesome) use in Bayesian methods.  Examples include:
    - Solving the *Price is Right*'s Showdown
    - Optimizing financial predictions
    - Winning solution to the Kaggle Dark World's competition
    
* [**Chapter 6: Getting our *prior*-ities straight**](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter6_Priorities/Ch6_Priors_PyMC3.ipynb)
    Probably the most important chapter. We draw on expert opinions to answer questions. Examples include:
    - Multi-Armed Bandits and the Bayesian Bandit solution.
    - What is the relationship between data sample size and prior?
    - Estimating financial unknowns using expert priors
    
    We explore useful tips to be objective in analysis as well as common pitfalls of priors. 



    
**More questions about PyMC?**
Please post your modeling, convergence, or any other PyMC question on [cross-validated](http://stats.stackexchange.com/), the statistics stack-exchange.
    
    
Using the book
-------

The book can be read in three different ways, starting from most recommended to least recommended: 

1. The most recommended option is to clone the repository to download the .ipynb files to your local machine. If you have Jupyter installed, you can view the 
chapters in your browser *plus* edit and run the code provided (and try some practice questions). This is the preferred option to read
this book, though it comes with some dependencies. 
    -  Jupyter is a requirement to view the ipynb files. It can be downloaded [here](http://jupyter.org/). Jupyter notebooks can be run by `(your-virtualenv) ~/path/to/the/book/Chapter1_Introduction $ jupyter notebook`
    -  For Linux users, you should not have a problem installing NumPy, SciPy, Matplotlib and PyMC. For Windows users, check out [pre-compiled versions](http://www.lfd.uci.edu/~gohlke/pythonlibs/) if you have difficulty. 
    -  In the styles/ directory are a number of files (.matplotlirc) that used to make things pretty. These are not only designed for the book, but they offer many improvements over the default settings of matplotlib.
2. The second, preferred, option is to use the nbviewer.jupyter.org site, which display Jupyter notebooks in the browser ([example](http://nbviewer.jupyter.org/urls/raw.github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/master/Chapter1_Introduction/Ch1_Introduction_PyMC2.ipynb)).
The contents are updated synchronously as commits are made to the book. You can use the Contents section above to link to the chapters.
 
3. PDFs are the least-preferred method to read the book, as PDFs are static and non-interactive. If PDFs are desired, they can be created dynamically using the [nbconvert](https://github.com/jupyter/nbconvert) utility.
 

Installation and configuration
------


If you would like to run the Jupyter notebooks locally, (option 1. above), you'll need to install the following:

-  Jupyter is a requirement to view the ipynb files. It can be downloaded [here](http://jupyter.org/install.html) 
- Necessary packages are PyMC, NumPy, SciPy and Matplotlib.   
   -  For Linux/OSX users, you should not have a problem installing the above, [*except for Matplotlib on OSX*](http://www.penandpants.com/2012/02/24/install-python/).
   -  For Windows users, check out [pre-compiled versions](http://www.lfd.uci.edu/~gohlke/pythonlibs/) if you have difficulty. 
   - also recommended, for data-mining exercises, are [PRAW](https://github.com/praw-dev/praw) and [requests](https://github.com/kennethreitz/requests). 
- New to Python or Jupyter, and help with the namespaces? Check out [this answer](http://stackoverflow.com/questions/12987624/confusion-between-numpy-scipy-matplotlib-and-pylab). 

-  In the styles/ directory are a number of files that are customized for the notebook. 
These are not only designed for the book, but they offer many improvements over the 
default settings of matplotlib and the Jupyter notebook. The in notebook style has not been finalized yet.



Development
------

This book has an unusual development design. The content is open-sourced, meaning anyone can be an author. 
Authors submit content or revisions using the GitHub interface. 

### How to contribute

#### What to contribute?

-  The current chapter list is not finalized. If you see something that is missing (MCMC, MAP, Bayesian networks, good prior choices, Potential classes etc.),
feel free to start there. 
-  Cleaning up Python code and making code more PyMC-esque
-  Giving better explanations
-  Spelling/grammar mistakes
-  Suggestions
-  Contributing to the Jupyter notebook styles


#### Commiting

-  All commits are welcome, even if they are minor ;)
-  If you are unfamiliar with Github, you can email me contributions to the email below.

Reviews
------
*these are satirical, but real*

""No, but it looks good"" - [John D. Cook](https://twitter.com/JohnDCook/status/359672133695184896)

""I ... read this book ... I like it!"" - [Andrew Gelman](http://www.andrewgelman.com/2013/07/21/bayes-related)

""This book is a godsend, and a direct refutation to that 'hmph! you don't know maths, piss off!' school of thought...
The publishing model is so unusual. Not only is it open source but it relies on pull requests from anyone in order to progress the book. This is ingenious and heartening"" - [excited Reddit user](http://www.reddit.com/r/Python/comments/1alnal/probabilistic_programming_and_bayesian_methods/)



Contributions and Thanks
-----


Thanks to all our contributing authors, including (in chronological order):

Authors | | | |
--- | --- | --- | ---
[Cameron Davidson-Pilon](http://www.camdp.com) |  [Stef Gibson](http://stefgibson.com) | [Vincent Ohprecio](http://bigsnarf.wordpress.com/) |[Lars Buitinck](https://github.com/larsman)
[Paul Magwene](http://github.com/pmagwene) |  [Matthias Bussonnier](https://github.com/Carreau) | [Jens Rantil](https://github.com/JensRantil) |  [y-p](https://github.com/y-p)
[Ethan Brown](http://www.etano.net/) |  [Jonathan Whitmore](http://jonathanwhitmore.com/) | [Mattia Rigotti](https://github.com/matrig) |  [Colby Lemon](https://github.com/colibius)
[Gustav W Delius](https://github.com/gustavdelius) |  [Matthew Conlen](http://www.mathisonian.com/)  | [Jim Radford](https://github.com/radford) |  [Vannessa Sabino](http://baniverso.com/)
[Thomas Bratt](https://github.com/thomasbratt) |  [Nisan Haramati](https://github.com/nisanharamati) |  [Robert Grant](https://github.com/bgrant) | [Matthew Wampler-Doty](https://github.com/xcthulhu)
[Yaroslav Halchenko](https://github.com/yarikoptic) |  [Alex Garel](https://github.com/alexgarel) | [Oleksandr Lysenko](https://twitter.com/sash_ko) |  [liori](https://github.com/liori)
[ducky427](https://github.com/ducky427) |  [Pablo de Oliveira Castro](https://github.com/pablooliveira) | [sergeyfogelson](https://github.com/sergeyfogelson) |  [Mattia Rigotti](http://neurotheory.columbia.edu/~mrigotti/)
[Matt Bauman](https://github.com/mbauman) | [Andrew Duberstein](http://www.andrewduberstein.com/) | [Carsten Brandt](http://cebe.cc/) |  [Bob Jansen](http://web2docx.com)
 [ugurthemaster](https://github.com/ugurthemaster)   | [William Scott](https://github.com/williamscott)   |  [Min RK](http://twitter.com/minrk)  |  [Bulwersator](https://github.com/Bulwersator)
  [elpres](https://github.com/elpres)  |  [Augusto Hack](https://github.com/hackaugusto)  | [Michael Feldmann](https://github.com/michaf)   | [Youki](https://github.com/Youki)
   [Jens Rantil](http://jensrantil.github.io) |  [Kyle Meyer](http://kyleam.com)  |  [Eric Martin](http://ericmart.in)  | [Inconditus](https://github.com/Inconditus)
 [Kleptine](https://github.com/Kleptine)   |  [Stuart Layton](https://github.com/slayton)  |  [Antonino Ingargiola](https://github.com/tritemio)  |  [vsl9](https://github.com/vsl9)
  [Tom Christie](https://github.com/tom-christie)  |  [bclow](https://github.com/bclow)  |  [Simon Potter](http://sjp.co.nz/)  | [Garth Snyder](https://github.com/GarthSnyder)
 [Daniel Beauchamp](http://twitter.com/pushmatrix)  |  [Philipp Singer](http://www.philippsinger.info)  | [gbenmartin](https://github.com/gbenmartin) | [Peadar Coyle](https://twitter.com/Springcoil)

We would like to thank the Python community for building an amazing architecture. We would like to thank the 
statistics community for building an amazing architecture. 

Similarly, the book is only possible because of the [PyMC](http://github.com/pymc-devs/pymc) library. A big thanks to the core devs of PyMC: Chris Fonnesbeck, Anand Patil, David Huard and John Salvatier.

One final thanks. This book was generated by Jupyter Notebook, a wonderful tool for developing in Python. We thank the IPython/Jupyter 
community for developing the Notebook interface. All Jupyter notebook files are available for download on the GitHub repository. 



#### Contact
Contact the main author, Cam Davidson-Pilon at cam.davidson.pilon@gmail.com or [@cmrndp](https://twitter.com/cmrn_dp)


![Imgur](http://i.imgur.com/Zb79QZb.png)
","Bayesian Methods for Hackers is an introduction to Bayesian inference. The book
is written using Python and the probabilistic programming language PyMC. It is
designed as an introduction from a computational/understanding-first, and
mathematics-second, point of view. The examples will rely only on PyMC, NumPy,
SciPy and Matplotlib."
2828,"Learning to Learn using One-Shot Learning, MAML, Reptile, Meta-SGD and more with Tensorflow","# [Hands-On Meta Learning With Python](https://www.amazon.com/Hands-Meta-Learning-Python-algorithms-ebook/dp/B07KJJHYKF/ref=sr_1_1?ie=UTF8&qid=1543222179&sr=8-1&keywords=meta+learning+hands+on)


###  Learning to Learn using One-Shot Learning, MAML, Reptile, Meta-SGD and more



## About the book
<a target=""_blank"" href=""https://www.amazon.com/Hands-Meta-Learning-Python-algorithms-ebook/dp/B07KJJHYKF/ref=sr_1_1?ie=UTF8&qid=1543222179&sr=8-1&keywords=meta+learning+hands+on"">
  <img src=""https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/Images/hands-on%20meta%20learning%20sudharsan.png"" alt=""Book Cover"" width=""250"" align=""left""/>
</a>

Meta learning is an exciting research trend in machine learning, which enables a model to understand the learning process. Unlike other ML paradigms, with meta learning you can learn from small datasets faster.

Hands-On Meta Learning with Python starts by explaining the fundamentals of meta learning and helps you understand the concept of learning to learn. You will delve into various one-shot learning algorithms, like siamese, prototypical, relation and memory-augmented networks by implementing them in TensorFlow and Keras. As you make your way through the book, you will dive into state-of-the-art meta learning algorithms such as MAML, Reptile, and CAML. You will then explore how to learn quickly with Meta-SGD and discover how you can perform unsupervised learning using meta learning with CACTUs. In the concluding chapters, you will work through recent trends in meta learning such as adversarial meta learning, task agnostic meta learning, and meta imitation learning.

By the end of this book, you will be familiar with state-of-the-art meta learning algorithms and able to enable human-like cognition for your machine learning models.

## Get the book 
<div>
<a target=""_blank"" href=""https://www.oreilly.com/library/view/hands-on-meta-learning/9781789534207/""> 
   <img src=""./Images/Oreilly_safari_logo.png"" alt=""Oreilly Safari"" hieght=150, width=150>
</a>
  
<a target=""_blank"" href=""https://www.amazon.com/Hands-Meta-Learning-Python-algorithms-ebook/dp/B07KJJHYKF"">
  <img src=""./Images/amazon_logo.jpg"" alt=""Amazon"" >
</a>

<a target=""_blank"" href=""https://www.packtpub.com/big-data-and-business-intelligence/hands-meta-learning-python"">
  <img src=""./Images/packt_logo.jpeg"" alt=""Packt"" hieght=150, width=150 >
</a>

<a target=""_blank"" href=""https://books.google.co.in/books?id=yx2CDwAAQBAJ&dq=Hands-On+Meta+Learning+with+Python&source=gbs_navlinks_s"">
  <img src=""./Images/googlebooks_logo.png"" alt=""Google Books"" 
</a>

<a target=""_blank"" href=""https://play.google.com/store/books/details/Sudharsan_Ravichandiran_Hands_On_Meta_Learning_wit?id=yx2CDwAAQBAJ"">
  <img src=""./Images/googleplay_logo.png"" alt=""google"" >
</a>
<br>
</div>

<br>


### Check out my Deep Reinforcement Learning Repo [here.](https://github.com/sudharsan13296/Deep-Reinforcement-Learning-With-Python)

### Awesome Meta Learning  [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sudharsan13296/Awesome-Meta-Learning)


Check the curated list of Meta Learning papers, code, books, blogs, videos, datasets and other resources [here.](https://github.com/sudharsan13296/Awesome-Meta-Learning) 



## Table of contents 

### [1. Introduction to Meta Learning](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/01.%20Introduction%20to%20Meta%20Learning)

* [1.1. What is Meta Learning?](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/01.%20Introduction%20to%20Meta%20Learning/1.1%20What%20is%20Meta%20Learning.ipynb)
* 1.2. Meta Learning and Few-Shot
* 1.3. Types of Meta Learning
* 1.4. Learning to Learn Gradient Descent by Gradient Descent
* 1.5. Optimization As a Model for Few-Shot Learning


### [2. Face and Audio Recognition using Siamese Network](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/02.%20Face%20and%20Audio%20Recognition%20using%20Siamese%20Networks)

* [2.1. What are Siamese Networks?](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/02.%20Face%20and%20Audio%20Recognition%20using%20Siamese%20Networks/2.1.%20What%20are%20Siamese%20Networks%3F.ipynb)
* 2.2. Architecture of Siamese Networks
* 2.3. Applications of Siamese Networks
* [2.4. Face Recognition Using Siamese Networks](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/02.%20Face%20and%20Audio%20Recognition%20using%20Siamese%20Networks/2.4%20Face%20Recognition%20Using%20Siamese%20Network.ipynb)
* [2.5. Audio Recognition Using Siamese Networks](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/02.%20Face%20and%20Audio%20Recognition%20using%20Siamese%20Networks/2.5%20Audio%20Recognition%20using%20Siamese%20Network.ipynb)


### [3. Prototypical Network and its variants](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/03.%20Prototypical%20Networks%20and%20its%20Variants)

* [3.1. Prototypical Network](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/03.%20Prototypical%20Networks%20and%20its%20Variants/3.1%20Prototypical%20Networks.ipynb)
* 3.2. Algorithm of Prototypical Network
* [3.3. Omniglot character set classification using prototypical network](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/03.%20Prototypical%20Networks%20and%20its%20Variants/3.3%20Omniglot%20Character%20set%20classification%20using%20Prototypical%20Network.ipynb)
* 3.4. Gaussian Prototypical Network
* 3.5. Algorithm
* 3.6. Semi prototypical Network


### [4. Relation and Matching Networks Using Tensorflow](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/04.%20Relation%20and%20Matching%20Networks%20Using%20Tensorflow)

* 4.1. Relation Networks
* [4.2. Relation Networks in One-Shot Learning](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/04.%20Relation%20and%20Matching%20Networks%20Using%20Tensorflow/4.2%20Relation%20Networks%20in%20One-Shot%20Learning.ipynb)
* 4.3. Relation Networks in Few-Shot Learning 
* 4.4. Relation Networks in Zero-Shot Learning
* [4.5. Building Relation Networks using Tensorflow](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/04.%20Relation%20and%20Matching%20Networks%20Using%20Tensorflow/4.5%20Building%20Relation%20Network%20Using%20Tensorflow.ipynb)
* [4.6. Matching Networks](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/04.%20Relation%20and%20Matching%20Networks%20Using%20Tensorflow/4.6%20Matching%20Networks.ipynb)
* 4.7. Embedding Functions
* 4.8. Architecture of Matching Networks
* [4.9. Matching Networks in Tensorflow](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/04.%20Relation%20and%20Matching%20Networks%20Using%20Tensorflow/4.9%20Matching%20Networks%20Using%20Tensorflow.ipynb)


### [5. Memory Augmented Networks](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/05.%20Memory%20Augmented%20Networks)

* [5.1. Neural Turing Machine](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/05.%20Memory%20Augmented%20Networks/5.1%20Neural%20Turing%20Machine.ipynb)
* 5.2. Reading and Writing in NTM
* 5.3. Addressing Mechansims
* [5.4. Copy Task using NTM](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/05.%20Memory%20Augmented%20Networks/5.4%20Copy%20Task%20Using%20NTM.ipynb)
* 5.5. Memory Augmented Neural Networks
* 5.6. Reading and Writing in MANN
* [5.7. Building MANN in Tensorflow](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/05.%20Memory%20Augmented%20Networks/5.7%20Building%20MANN%20in%20Tensorflow%20.ipynb)


### [6. MAML and its variants](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/06.%20MAML%20and%20it's%20Variants)

* [6.1. Model Agnostic Meta Learning](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it's%20Variants/6.1%20Model%20Agnostic%20Meta%20Learning.ipynb)
* [6.2. MAML Algorithm](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it's%20Variants/6.2%20MAML%20ALgorithm.ipynb)
* [6.3. MAML in Supervised Learning](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it's%20Variants/6.3%20MAML%20in%20Supervised%20Learning.ipynb)
* 6.4. MAML in Reinforcement Learning
* [6.5. Building MAML from Scratch](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it's%20Variants/6.5%20Building%20MAML%20From%20Scratch.ipynb)
* 6.6. Adversarial Meta Learning
* [6.7. Building ADML from Scratch](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it's%20Variants/6.7%20Building%20ADML%20From%20Scratch.ipynb)
* 6.8. CAML
* 6.9. CAML Algorithm


### [7. Meta-SGD and Reptile Algorithms](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/07.%20Meta-SGD%20and%20Reptile%20Algorithms)

* [7.1. Meta-SGD](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/07.%20Meta-SGD%20and%20Reptile%20Algorithms/7.1%20Meta-SGD.ipynb)
* 7.2. Meta-SGD in Supervised Learning
* 7.3. Meta-SGD in Reinforcement Learning
* [7.4. Building Meta-SGD from Scratch](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/07.%20Meta-SGD%20and%20Reptile%20Algorithms/7.4%20Building%20Meta-SGD%20from%20Scratch.ipynb)
* 7.5. Reptile
* 7.6. Reptile Algorithm
* [7.7. Sine Wave Regression Using Reptile](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/07.%20Meta-SGD%20and%20Reptile%20Algorithms/7.7%20Sine%20wave%20Regression%20Using%20Reptile.ipynb)


### [8. Gradient Agreement as an Optimization Objective](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/08.%20Gradient%20Agreement%20As%20An%20Optimization%20Objective)

* [8.1. Gradient Agreement](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/08.%20Gradient%20Agreement%20As%20An%20Optimization%20Objective/8.1%20Gradient%20Agreement%20as%20an%20Optimization.ipynb)
* 8.2. Weight Calculation
* 8.3. Gradient Agreement Algorithm
* [8.4. Building Gradient Agreement with MAML from scratch](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/08.%20Gradient%20Agreement%20As%20An%20Optimization%20Objective/8.4%20Building%20Gradient%20Agreement%20Algorithm%20with%20MAML.ipynb)


### [9. Recent Advancements and Next Steps](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/tree/master/09.%20Recent%20Advancements%20and%20Next%20Steps)

* 9.1. Task Agnostic Meta Learning
* 9.2. TAML Algorithm
* [9.3. Meta Imitation Learning](https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/09.%20Recent%20Advancements%20and%20Next%20Steps/9.3%20Meta%20Imitation%20Learning.ipynb)
* 9.4. MIL Algorithm
* 9.5. CACTUs
* 9.6. Task Generation using CACTUs
* 9.7. Learning to Learn in the Concept Space 
","Hands-On Meta Learning with Python explains the fundamentals of meta learning
and helps you understand the concept of learning to learn. You will delve into
various one-shot learning algorithms, like siamese, prototypical, relation and
memory-augmented networks by implementing them in TensorFlow and Keras. In the
concluding chapters, you will work through recent trends in meta learning such
as adversarial meta learning, task agnostic metalearning, and meta imitation
learning."
2101,"✨ React patterns, techniques, tips and tricks ✨","# [React Bits](https://vasanthk.gitbooks.io/react-bits)

A compilation of React Patterns, techniques, tips and tricks.

**Gitbook format**: https://vasanthk.gitbooks.io/react-bits

**Github repo**: https://github.com/vasanthk/react-bits

> Your contributions are heartily ♡ welcome. (✿◠‿◠)

> **Translations by community:**
> - 中文版 (Chinese): [react-bits-cn](https://github.com/hateonion/react-bits-CN)
> - 한국어 (Korean): [react-bits-ko](https://github.com/rayleighko/react-bits-ko)


- Design Patterns and Techniques
  - [Conditional in JSX](./patterns/18.conditionals-in-jsx.md)
  - [Async Nature Of setState()](./patterns/19.async-nature-of-setState.md)
  - [Dependency Injection](./patterns/20.dependency-injection.md)
  - [Context Wrapper](./patterns/21.context-wrapper.md)
  - [Event Handlers](./patterns/22.event-handlers.md)
  - [Flux Pattern](./patterns/23.flux-pattern.md)
  - [One Way Data Flow](./patterns/24.one-way-data-flow.md)
  - [Presentational vs Container](./patterns/25.presentational-vs-container.md)
  - [Third Party Integration](./patterns/26.third-party-integration.md)
  - [Passing Function To setState()](./patterns/27.passing-function-to-setState.md)
  - [Decorators](./patterns/28.decorators.md)
  - [Feature Flags](./patterns/29.feature-flags-using-redux.md)
  - [Component Switch](./patterns/30.component-switch.md)
  - [Reaching Into A Component](./patterns/31.reaching-into-a-component.md)
  - [List Components](./patterns/32.list-components.md)
  - [Format Text via Component](./patterns/33.format-text-via-component.md)
  - [Share Tracking Logic](./patterns/34.share-tracking-logic.md)
- Anti-Patterns
  - [Introduction](./anti-patterns/README.md)
  - [Props In Initial State](./anti-patterns/01.props-in-initial-state.md)
  - [findDOMNode()](./anti-patterns/02.findDOMNode.md)
  - [Mixins](./anti-patterns/03.mixins.md)
  - [setState() in componentWillMount()](./anti-patterns/04.setState-in-componentWillMount.md)
  - [Mutating State](./anti-patterns/05.mutating-state.md)
  - [Using Indexes as Key](./anti-patterns/06.using-indexes-as-key.md)
  - [Spreading Props on DOM elements](./anti-patterns/07.spreading-props-dom.md)
- Handling UX Variations
  - [Introduction](./ux-variations/README.md)
  - [Composing UX Variations](./ux-variations/01.composing-variations.md)
  - [Toggle UI Elements](./ux-variations/02.toggle-ui-elements.md)
  - [HOC for Feature Toggles](./ux-variations/03.HOC-feature-toggles.md)
  - [HOC props proxy](./ux-variations/04.HOC-props-proxy.md)
  - [Wrapper Components](./ux-variations/05.wrapper-components.md)
  - [Display Order Variations](./ux-variations/06.display-order-variations.md)
- Perf Tips
  - [Introduction](./perf-tips/README.md)
  - [shouldComponentUpdate() check](./perf-tips/01.shouldComponentUpdate-check.md)
  - [Using Pure Components](./perf-tips/02.pure-component.md)
  - [Using reselect](./perf-tips/03.reselect.md)
- Styling
  - [Introduction](./styling/README.md)
  - [Stateless UI Components](./styling/01.stateless-ui-components.md)
  - [Styles Module](./styling/02.styles-module.md)
  - [Style Functions](./styling/03.style-functions.md)
  - [NPM Modules](./styling/04.using-npm-modules.md)
  - [Base Component](./styling/05.base-component.md)
  - [Layout Component](./styling/06.layout-component.md)
  - [Typography Component](./styling/07.typography-component.md)
  - [HOC for Styling](./styling/08.HOC-for-styling.md)
- Gotchas
  - [Introduction](./gotchas/README.md)
  - [Pure render checks](./gotchas/01.pure-render-checks.md)
  - [Synthetic Events](./gotchas/02.synthetic-events.md)
- [Related Links](./READINGS.md)
","A compilation of React Patterns, techniques, tips and tricks. Your contributions
are heartily ♡ welcome. Translations by community: Chinese, Korean, French,
German, Italian, Spanish, Portuguese, English. The book is available in a
Gitbook format and a GitHub repo."
1957,从零编写游戏引擎教程 Writing a game engine tutorial from scratch,"﻿# [游戏引擎 浅入浅出](https://github.com/ThisisGame/cpp-game-engine-book)

## 项目介绍 README

本书以实际项目开发Timeline，完整介绍一个游戏引擎的所有模块，从最基础的OpenGL环境搭建，到骨骼动画、多线程渲染、阴影实现等等，最后实现一个完整的游戏引擎。

![](imgs/ieg_open_source/book_chapter.gif)

## 章节内容 Chapter

第 1 章介绍游戏引擎框架，以Unity为例，介绍游戏引擎组成。

第 2 章介绍OpenGL开发环境搭建，创建一个OpenGL空窗口来入坑。

第 3 章介绍使用OpenGL绘制三角形、正方形、立方体，来熟悉游戏渲染的最基础元素。

第 4 章介绍Shader的概念，编译链接，以及Shader格式、关键字。

第 5 章介绍贴图格式，从直接读取PNG、JPG渲染，然后介绍GPU所使用的的压缩纹理。

第 6 章介绍索引与缓冲区对象，索引就是多个顶点的下标，使用索引可以复用顶点渲染。而缓冲区则是将顶点数据存储于显存中，不用再每一帧都从内存上传到GPU。

第 7 章介绍引擎自定义的Mesh文件格式以及材质的组成。将原来写死在代码中的顶点数据存储到Mesh文件中，将原来写死在代码中的Shader参数存储到材质中。

第 8 章介绍使用Blender制作模型并编写Python代码导出为Mesh文件。

第 9 章介绍如何实现GameObject-Component模式。

第 10 章介绍什么是相机，以及多相机渲染排序。

第 11 章介绍获取鼠标、键盘输入。

第 12 章介绍如何将Demo代码，拆分为引擎源码与项目源码。

第 13 章介绍使用FreeType对指定字符生成单Alpha通道的纹理并渲染，以及使用顶点色实现彩色文字。

第 14 章介绍基础GUI控件的实现，包括UIImage、UIMask、UIText、UIButton。有了这几个基础，可以实现其他复杂的控件。

第 15 章介绍使用FMOD播放MP3、Wav音乐，以及使用FMOD专业音频编辑器制作音效与解析播放。

第 16 章介绍easy_profiler这个C++性能分析库。

第 17 章介绍使用Sol2这个开源库，将Lua集成到引擎，后续使用C++开发引擎，使用Lua编写测试代码。

第 18 章介绍骨骼动画原理，并介绍使用Blender制作骨骼动画、导出到skeleton_anim文件，在引擎解析。

第 19 章介绍骨骼蒙皮动画，在Blender刷权重，导出到weight文件，在引擎解析，渲染。

第 20 章介绍如何从FBX文件导出Mesh、骨骼动画、权重，实例导出古风少女并渲染。

第 21 章介绍多线程渲染，将OpenGL API放到单独的渲染线程，从主线程发命令到渲染线程，将DrawCall的影响分出去，减轻主线程负担。

第 22 章介绍不定时更新。

## 特性列表 Feature

写这本书的目的是普及游戏引擎基础知识，面向的读者有一定的Unity经验，对引擎某些点感兴趣即可。

每一章节介绍的知识点，都是供入门了解，并没有深挖。

简单、容易上手、短期目标、不枯燥，是这本书的追求的，太复杂的很容易中途放弃，我花了很多时间在这个上。

#### 容易上手

* 每一篇都从入门角度编写，一些名词，能和其他名词关联的我都会尽量关联。
  例如Shader的编译与Link，我用C语言的编译来对比。
  |   |   C语言| Shader|
  |---|---|---|
  |  目标硬件 | CPU  |GPU|
  |编译流程|创建项目|创建GPU程序|
  ||创建编写多个C代码文件|创建编写Shader(顶点Shader和片段Shader)|
  ||把C代码发给编译器|把Shader代码发送到编译器|
  ||编译C代码|编译Shader代码|
  ||添加到链接列表|添加到链接列表|
  ||链接|链接|

* 每一小节开头就贴上了这一节项目地址，把文件夹拖到CLion里面立即可以调试。
  ![](imgs/ieg_open_source/project_dir_line.jpg)
  <br>
* 代码片段开头标注这个代码所在文件以及行数。
  ![](imgs/ieg_open_source/code_file_line.jpg)

#### 内容全面

从最简单的三角形绘制，到骨骼动画渲染、灯光阴影、多线程、物理、寻路AI、音频解析都会进行介绍。

| ![](imgs/opengl_draw_polygon/draw_triangle/draw_triangle.png)  |  ![](imgs/texture_make_beautiful/draw_cube_texture/draw_cube_urban.gif) |  ![](imgs/ieg_open_source/draw_blender_mesh.jpg) |
|---|---|---|
|![](imgs/ieg_open_source/draw_ttf_font_freetype_color.jpg)|![](imgs/ieg_open_source/gui.gif)|![](imgs/ieg_open_source/fbx_skinned_mesh.gif)|


#### 引擎生态

这应该是首次在引擎书里教如何建模、音频编辑。

Blender建模、FMOD、WWise音频制作，我都录制了视频。

其他的Substance、Toolbag插件开发，Renderdoc DrawCall分析都有简单介绍。


| ![](imgs/ieg_open_source/blender_1_hq720.jpg)  |  ![](imgs/ieg_open_source/substance_painter_1_hq720.jpg) | ![](imgs/ieg_open_source/toolbag_1_hq720.jpg)|
|---|---|---|
| ![](imgs/ieg_open_source/fmod_2_hq720.jpg)  |  ![](imgs/ieg_open_source/wwise_1_hq720.jpg) | ![](imgs/ieg_open_source/renderdoc_hq720.jpg)|


#### 短期目标

渲染的模型动画用美女、帅哥、色彩丰富的物体，更有成就感。

有了一定功能后，就会基于现有功能开发一个小游戏，阶段性成就才能长时间坚持。

| ![](imgs/ieg_open_source/hunter_need_head_phone.jpg)  |  ![](imgs/ieg_open_source/empty_960_640.jpg) | ![](imgs/ieg_open_source/empty_960_640.jpg)|
|---|---|---|

## 快速上手 Getting Start

#### 阅读图书

在线阅读：`http://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=Introduction.md`

本地阅读，按照下面步骤：

1. 安装`GitBook`

2. 克隆项目:`git clone https://github.com/ThisisGame/cpp-game-engine-book.git`

3. 双击`gitbook_serve.bat`启动本地GitBook服务器，成功后，打开浏览器访问`http://localhost:4000`，即可阅读。

#### 随书项目调试

1. 安装CLion。
2. 在每小节开头找到CLion项目目录，用CLion打开。

## 常见问题 FAQ

#### 书中讲述的引擎技术适用哪些系统平台？

目前适配Windows与MacOS。

```diff
- 由于Arm版Mac只支持OpenGL Core，所以《6.3 OpenGL Core Profile》之前的章节实例无法在Arm版Mac运行。
```

#### 如何使用VisualStudio开发？

随书实例使用CLion开发，CLion支持Windows与Mac，跨平台不需要额外学习成本。

VisualStudio从2019开始支持CMake项目，所以在Windows上也可以使用VisualStudio2019及以上版本打开随书实例CLion项目。

具体请参考 [2.3 使用VisualStudio开发](https://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=2.%20opengl_dev_env/2.3%20dev_with_visualstudio.md)

## 行为准则 Code Of Conduct

* 引擎使用C++开发，遵从Google C++规范，贡献代码时，需要先熟悉代码风格。
  ![](imgs/ieg_open_source/google_cpp_style.png)
  
* 贡献代码时，请先fork本项目到你的名下，然后修改代码，通过合并请求来提交。
* 目前适配Windows和Mac，同样，你可以在这两个系统上开发。代码提交前，请确保功能在这两个系统上都是正常且一致的。

## 如何加入 How To Join

* 你可以直接打开在线阅读：`http://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=Introduction.md`
* 本书是开源的，你可以fork本项目，然后修改代码，然后提交合并请求。
* 欢迎大家提Issue，反馈遇到的问题。内网可以直接联系我。也可以加入q群(879187705)讨论，得到答案后，更新issue，方便其他人查询。
  
  | ![](imgs/readme/qq_qrcode.png)  |
  |---|


## 团队介绍 Members

* captainchen:作者

## 感谢支持 Thanks

项目使用CLion IDE，使用PVS-Studio作为代码扫描分析工具，感谢其提供的开源许可。

| ![](imgs/readme/pvsstudio.png)  |  ![](imgs/readme/jetbrains-variant-4.png) |
|---|---|
|  PVS-Studio |  JetBrains |


","summarize: ﻿# [ 游戏引 擎 浅入浅出](https://github.com/ThisisGame/cpp-game-engine-book)
README: http://www.thisisgame.org/blog/2013/01/07/how-to-use-open-source-
shader.html."
3122,a cozy nest for your scripts,"# `sd`: my `s`cript `d`irectory

- [Usage](#usage)
- [Installation](#installation)
- [Changelog](#changelog)

Has this ever happened to you?

*Black and white video plays of someone struggling to find a shell script they wrote a year ago and stuffed into their `~/bin` without giving it a very meaningful name.*

Don't you hate it when you can't find the scripts you need, when you need it? Well now there's a better way!

*Color fills the screen. Someone holds `sd` up to the camera, and flashes a winning smile. They've found the script on their first try.*

Introducing `sd`, the script directory for the refined, sophisticated professional. Simply organize your scripts in a logical directory hierarchy, and let `sd` take care of the rest!

    $ tree ~/sd
    /Users/ian/sd
    ├── blog
    │   ├── edit
    │   ├── preview
    │   └── publish
    ├── nix
    │   ├── diff
    │   ├── info
    │   └── sync
    └── tmux
        └── init

And now instead of typing `~/sd/blog/publish`, you can just type `sd blog publish` -- a savings of nearly three whole characters!

But wait! There's more! You'll wonder how you ever lived without `sd`'s best-in-class tab completion:

    $ sd nix <TAB>
    diff  -- prints what will happen if you run sync
    info  -- <package> prints package description
    sync  -- make user environment match ~/dotfiles/user.nix

Simply write a one-line comment in your script, and you'll never be left scratching your head over how you were supposed to call it!

# uhh

Hi okay sorry. [Take a look at this blog post for a real introduction and a fancy asciinema demo of how it works.](https://ianthehenry.com/posts/sd-my-script-directory/)

# Usage

The default behavior for `sd foo bar` is:

- If `~/sd/foo` is an executable file, execute `~/sd/foo bar`.
- If `~/sd/foo/bar` is an executable file, execute it with no arguments.
- If `~/sd/foo/bar` is a directory, this is the same is `sd foo bar --help` (it prints usage information).
- If `~/sd/foo/bar` is a non-executable regular file, this is the same is `sd foo bar --cat` (it just prints the file out).

There are some special flags that are significant to `sd`. If you supply any one of these arguments, `sd` will not invoke your script, and will do something fancier instead.

    $ sd foo bar --help
    $ sd foo bar --new
    $ sd foo bar --edit
    $ sd foo bar --cat
    $ sd foo bar --which
    $ sd foo bar --really

## `--help`

Print the contents of a help file, or generate a help file from comments in a script.

For executables, `sd` looks for a file with the same name but the `.help` extension. For example, `sd nix diff --help` would look for a file called `~/sd/nix/diff.help`, and print it out.

For directories, `sd` looks for a file that's just called `help`. So `sd nix --help` would look for `~/sd/nix/help`.

If there is no help file for an executable, `sd` will print the first comment block in the file instead. `sd` currently only recognizes bash-style `#` comments.

For example:

    $ cat ~/sd/nix/sync

```bash
#!/usr/bin/env bash

# make user environment match ~/dotfiles/user.nix
#
# This will remove any packages you've installed with nix-env
# but have not added to user.nix. To see exactly what this
# will do, run:
#
#     sd nix diff

set -euo pipefail

# maybe this should be configurable
nix-env -irf ~/dotfiles/user.nix
```

That will produce the following help output (note that it only prints the first contiguous comment block):

```
$ sd nix sync --help
make user environment match ~/dotfiles/user.nix

This will remove any packages you've installed with nix-env
but have not added to user.nix. To see exactly what this
will do, run:

    sd nix diff
```

If you run `--help` for a directory, it will also print out a command listing after the help text:

```
$ sd nix --help
nix commands

install    -- <package> use --latest to install from nixpkgs-unstable
shell      -- add gcroots for shell.nix
diff       -- prints what will happen if you run sync
info       -- <package> prints package description
sync       -- make user environment match ~/dotfiles/user.nix
```

## `--new`

Everything to the left of `--new` is considered a command path, and everything to the right of `--new` is considered the command body. For example:

    $ sd foo bar --new echo hi

Will try to create a new command at `~/sd/foo/bar` with an initial contents of `echo hi`.

Actually, to be more precise, it will create this script:

    $ cat ~/sd/foo/bar

```bash
#!/usr/bin/env bash

set -euo pipefail

echo hi
```

Assuming the default template.

If no body is supplied after `--new`, `sd` will open the script for editing.

### custom script templates

You can customize the template used by `--new` by creating a file called `template`, either in `~/sd` or one of its subdirectories.

`sd` will try to find a template by walking recursively up the directory hierarchy. For example, if you run:

```
$ sd foo bar baz --new
```

`sd` will try to find a template at `~/sd/foo/bar/template` first, then fall back to `~/sd/foo/template`, then `~/sd/template`. If it doesn't find any template file, it will use the default bash template shown above.

(There is no need to make your `template` executable -- `sd` will take care of that for you.)

When `--new` is used to create an inline script, that script will always go at the *end* of your template file. There is currently no way to customize this.

## `--cat`

Prints the contents of the script. See `SD_CAT` below.

## `--edit`

Open the script in an editor. See `SD_EDITOR` below.

## `--which`

Prints the path of the script.

## `--really`

Suppress special handling of all of the other special flags. This allows you to pass `--help` or `--new` as arguments to your actual script, instead of being interpreted by `sd`. For example:

    $ sd foo bar --help --really

Will invoke:

    ~/sd/foo/bar --help

The first occurrence of the `--really` argument will be removed from the arguments passed to the script, so if you need to pass a literal `--really`, you must pass it twice to `sd`. For example:

    $ sd foo bar --help --really --really

Will invoke:

    $ ~/sd/foo/bar --help --really

# Context

When a script is invoked, `sd` will set the environment variable `SD` to the directory that the script was found in -- in other words, `$(dirname ""$0"")`.

This makes it slightly more convenient to refer to shared helper files or other scripts relative to the executing script.

# Options

`sd` respects some environment variables:

- `SD_ROOT`: location of the script directory. Defaults to `$HOME/sd`.
- `SD_EDITOR`: used by `sd foo --edit` and `sd foo --new`. Defaults to `$VISUAL`, then `$EDITOR`, then finally falls back to `vi` if neither of those are set.
- `SD_CAT`: program used when printing files, in case you want to use something like [`bat`](https://github.com/sharkdp/bat). Defaults to `cat`.

# Installation

There are two ways to use `sd`:

1. source the `sd` file, which will define the shell function `sd`
2. treat `sd` as a regular executable and put it somewhere on your `PATH`

I prefer to use `sd` as a regular executable, but the function approach is more convenient if you already use a shell plugin manager that knows how to set up `fpath` automatically.

Note that you cannot invoke ""recursive `sd`"" (that is, write scripts that themselves invoke `sd`) if you use the function approach. This includes all of the helper scripts in `sdefaults/` (explained below).

## Installation as a regular script

`sd` is not currently packaged in any package manager that I am aware of, but it should be pretty easy if you want to package it for your distribution. It's just a single script and a single completion file. Until that day:

1. Put the `sd` script somewhere on your `PATH`.
2. Put the `_sd` completion script somewhere on your `fpath`.

I like to symlink `sd` to `~/bin`, which is already on my path. If you've cloned this repo to `~/src/sd`, you can do that by running something like:

    $ ln -s ~/src/sd/sd ~/bin/sd

There isn't really a standard place in your home directory to put completion scripts, so unless you've made your own, you'll probably want to add your clone directly to your `fpath`. You should add that to your `.zshrc` file before the line where you call `compinit`. It should look something like this:

    # ~/.zshrc

    fpath=(~/src/sd $fpath)
    autoload -U compinit
    compinit

If you use a zsh framework like [`oh-my-zsh`](https://github.com/ohmyzsh/ohmyzsh), it probably calls `compinit` for you. In that case, just set your `fpath` before you source the framework's initialization script.

Note that changes you make to your `~/.zshrc` will only take effect for *future* shells you create, so to start enjoying `sd` immediately you'll also want to run these commands in your existing shells:

    $ fpath=(~/src/sd $fpath)
    $ compinit

## Installation as a shell function

You can just source `sd` in your `.zshrc` and set up completion manually (as described below), but `sd` is designed to be compatible with shell plugin managers.

### [Antigen](https://github.com/zsh-users/antigen)

Add this line to your `.zshrc`:

```shell
antigen bundle ianthehenry/sd
```

### [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh):

Clone this repo into your custom plugins directory:

```
$ git clone https://github.com/ianthehenry/sd.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/sd
```

And then add it to the plugins list in your `~/.zshrc` before you source `oh-my-zsh`:

```
plugins+=(sd)
source ""$ZSH/oh-my-zsh.sh""
```

## `sd help command` vs. `sd command --help`

There are some scripts in `sdefaults/` that you can copy into your own `~/sd` if you like. They'll let you type `sd cat foo bar` instead of `sd foo bar --cat` or `sd new foo -- echo hi` instead of `sd foo --new echo hi` (and so on for each of the built-in commands).

These mostly exist for backwards compatibility with an earlier version of `sd`. You don't have to use them if you don't want to. Note that they will not work if you've installed `sd` as a shell function instead of an executable.

# bash/fish autocompletion support

Patrick Jackson contributed [an unofficial fish completion script](https://gist.github.com/patricksjackson/5065e4a9d8e825dafc7824112f17a5e6), which should be usable with some modification (as written it does not respect `SD_ROOT`, but it should act as a very good starting point if you use fish).

Bash doesn't support the fancy completion-with-description feature that is sort of the whole point of `sd`, but there are apparently ways to hack something similar.

# Changelog

## v1.1.0 2022-10-30

- fix a bug where `--help` would print every comment in the script

## v1.0.1 2022-04-17

- better error message if `~/sd` does not exist
- better error message if `~/sd` exists but is not a directory

## v1.0.0 2022-02-27

`sd` is now released under the MIT license. There are no functional changes from the pre-1.0 releases.

## v0.3.0 2022-02-26

- scripts now run with the `SD` environment variable set to the directory they were found in
- autocompletion now completes arguments to commands instead of just commands
    - only completes positional file arguments and the built-in flags (like `--help`)
- `sd` now only forks a subshell when invoked as a function
- `sd` now `exec`s scripts instead of `fork`+`exec`
    - this fixes the rare issue where a long-running script could throw errors when it finished if you were editing the `sd` executable itself while the script was running, because `bash` was trying to execute the ""rest"" of the file and apparently doing so by byte index or something (??)
    - this only affects me

## v0.2.0 2022-02-24

- added per-directory `template` files, to override the `bash` default

## v0.1.1 2021-12-05

- fix a bug where `--new` wouldn't work unless provided with an initial script

## v0.1.0 2021-12-01

- added `--really`
- `dir.help` files are now `dir/help` files

You used to be able to provide a description for a directory called `foo/` by writing a file called `foo.help` as a sibling of that directory.

Now directory help summaries are expected in `foo/help` instead.

This has the sort-of nice effect that `sd foo help` is sometimes similar to `sd foo --help`. Except that the latter also prints out subcommands.
","Introducing `sd, the script directory for the refined, sophisticated
professional. Simply organize your scripts in a logical directory hierarchy, and
let `sd` take care of the rest. You can write a one-line comment in your script,
and you'll never be left scratching your head over how to call it!"
2088,If GraphQL were more like SQL: a query language for any combination of data sources.,"# `trustfall` — How to Query (Almost) Everything

This repository contains the `trustfall` query engine, which can be used to query any data source
or combination of data sources: databases, APIs, raw files (JSON, CSV, etc.), git version control,
etc. For a 10min video introduction to the project, see
the [""How to Query (Almost) Everything"" talk](https://www.hytradboi.com/2022/how-to-query-almost-everything)
from the [HYTRADBOI 2022](https://www.hytradboi.com/) conference.

![Terminal recording of running `cargo run --release -- query example_queries/actions_in_repos_with_min_10_hn_pts.ron` in the `demo-hytradboi` demo project. The system returns the first 20 results of the query in 6.36 seconds.""](https://github.com/obi1kenobi/trustfall/raw/main/demo-hytradboi/query-demo.gif)

*Demo showing the execution of the cross-API query: ""Which GitHub Actions are used in projects on the front page of HackerNews with >=10 points?""*

The demo executes the following query across the HackerNews and GitHub APIs and over the YAML-formatted GitHub repository workflow files:
```graphql
{
  HackerNewsTop(max: 200) {
    ... on HackerNewsStory {
      hn_score: score @filter(op: "">="", value: [""$min_score""]) @output

      link {
        ... on GitHubRepository {
          repo_url: url @output

          workflows {
            workflow: name @output
            workflow_path: path @output

            jobs {
              job: name @output

              step {
                ... on GitHubActionsImportedStep {
                  step: name @output
                  action: uses @output
                }
              }
            }
          }
        }
      }
    }
  }
}
```

This demo is part of the [""How to Query (Almost) Everything"" talk](https://www.hytradboi.com/2022/how-to-query-almost-everything)
from the [HYTRADBOI 2022](https://www.hytradboi.com/) conference.
Instructions for running the demo are available together with the source code
in the `demo-hytradboi` directory:
[link](https://github.com/obi1kenobi/trustfall/tree/main/demo-hytradboi).

For a brief overview of the query language and an example of using it to query APIs, check the
`demo-hackernews` directory for a simpler demo only querying the HackerNews APIs: [link](https://github.com/obi1kenobi/trustfall/tree/main/demo-hackernews).

Python bindings are available, and are built automatically on every change to the engine; the most recent version may be downloaded [here](https://github.com/obi1kenobi/trustfall/releases). A getting started guide for Python is
forthcoming ([tracking issue](https://github.com/obi1kenobi/trustfall/issues/16)); in the meantime,
the best resource is the Python bindings'
[test suite](https://github.com/obi1kenobi/trustfall/blob/main/pytrustfall/pytrustfall/tests/test_execution.py).

## Directory Registry

- `trustfall_core` contains the query engine itself: [link](https://github.com/obi1kenobi/trustfall/tree/main/trustfall_core)
- `pytrustfall` contains `pyo3`-based Python bindings for the `trustfall` engine: [link](https://github.com/obi1kenobi/trustfall/tree/main/pytrustfall)
- `trustfall_wasm` is a WASM build of the `trustfall` engine: [link](https://github.com/obi1kenobi/trustfall/tree/main/trustfall_wasm)
- `demo-hackernews` contains an example use case: querying the HackerNews APIs.
- `demo-hytradboi` contains the demo code from the ""How to Query (Almost) Everything"" talk
  at the [HYTRADBOI 2022](https://www.hytradboi.com/) conference.
- `demo-feeds` is an example implementation querying RSS feeds using Rust and `trustfall`.
- `demo-metar` is an example implementation querying METAR aviation weather reports using Rust
  and `trustfall`.
- `filetests_proc_macro` is a procedural macro used to generate test cases defined by files:
  they ensure that the function under test, when given an input specified by one file,
  produces an output equivalent to the contents of another file.

Copyright 2022-present Predrag Gruevski.

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

The present date is determined by the timestamp of the most recent commit in the repository.
By accessing, and contributing code, comments, or issues to this repository,
you are agreeing that all your contributions may be used, modified, copied, and/or redistributed
under any terms chosen by the original author and/or future maintainers of this project.
","The trustfall query engine can be used to query any data source. For a 10min
video introduction to the project, see the [""How to Query (Almost) Everything""
talk. The system returns the first 20 results of the query in 6.36 seconds."
2612,Predictable state container for JavaScript apps,"# <a href='https://redux.js.org'><img src='https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67' height='60' alt='Redux Logo' aria-label='redux.js.org' /></a>

Redux is a predictable state container for JavaScript apps.
(Not to be confused with a WordPress framework – [Redux Framework](https://redux.io))

It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as [live code editing combined with a time traveling debugger](https://github.com/reduxjs/redux-devtools).

You can use Redux together with [React](https://reactjs.org), or with any other view library.
It is tiny (2kB, including dependencies), and has a rich ecosystem of addons.

![GitHub Workflow Status](https://img.shields.io/github/workflow/status/reduxjs/redux/Tests/master?style=flat-square)
[![npm version](https://img.shields.io/npm/v/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)
[![npm downloads](https://img.shields.io/npm/dm/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)
[![redux channel on discord](https://img.shields.io/badge/discord-%23redux%20%40%20reactiflux-61dafb.svg?style=flat-square)](https://discord.gg/0ZcbPKXt5bZ6au5t)
[![Changelog #187](https://img.shields.io/badge/changelog-%23187-lightgrey.svg?style=flat-square)](https://changelog.com/187)

## Installation

[**Redux Toolkit**](https://redux-toolkit.js.org) is our official recommended approach for writing Redux logic. It wraps around the Redux core, and contains packages and functions that we think are essential for building a Redux app. Redux Toolkit builds in our suggested best practices, simplifies most Redux tasks, prevents common mistakes, and makes it easier to write Redux applications.

```
npm install @reduxjs/toolkit react-redux
```

For the Redux core library by itself:

```
npm install redux
```

For more details, see [the Installation docs page](https://redux.js.org/introduction/installation).

## Documentation

The Redux docs are located at **https://redux.js.org**:

- [Introduction](https://redux.js.org/introduction/getting-started)
- [Tutorials](https://redux.js.org/tutorials/index)
- [Usage Guides](https://redux.js.org/usage/index)
- [FAQ](https://redux.js.org/faq)
- [API Reference](https://redux.js.org/api/api-reference)

## Learn Redux

### Redux Essentials Tutorial

The [**Redux Essentials tutorial**](https://redux.js.org/tutorials/essentials/part-1-overview-concepts) is a ""top-down"" tutorial that teaches ""how to use Redux the right way"", using our latest recommended APIs and best practices. We recommend starting there.

### Redux Fundamentals Tutorial

The [**Redux Fundamentals tutorial**](https://redux.js.org/tutorials/fundamentals/part-1-overview) is a ""bottom-up"" tutorial that teaches ""how Redux works"" from first principles and without any abstractions, and why standard Redux usage patterns exist.

### Additional Tutorials

- The Redux repository contains several example projects demonstrating various aspects of how to use Redux. Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online. See the complete list of examples in the **[Examples page](https://redux.js.org/introduction/examples)**.
- Redux creator Dan Abramov's **free [""Getting Started with Redux"" video series](https://app.egghead.io/playlists/fundamentals-of-redux-course-from-dan-abramov-bd5cc867)** and **[Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux)** video courses on Egghead.io
- Redux maintainer Mark Erikson's **[""Redux Fundamentals"" conference talk](https://blog.isquaredsoftware.com/2018/03/presentation-reactathon-redux-fundamentals/)** and [**""Redux Fundamentals"" workshop slides**](https://blog.isquaredsoftware.com/2018/06/redux-fundamentals-workshop-slides/)
- Dave Ceddia's post [**A Complete React Redux Tutorial for Beginners**](https://daveceddia.com/redux-tutorial/)

### Other Resources

- The **[Redux FAQ](https://redux.js.org/faq)** answers many common questions about how to use Redux, and the **[""Using Redux"" docs section](https://redux.js.org/usage/index)** has information on handling derived data, testing, structuring reducer logic, and reducing boilerplate.
- Redux maintainer Mark Erikson's **[""Practical Redux"" tutorial series](https://blog.isquaredsoftware.com/series/practical-redux/)** demonstrates real-world intermediate and advanced techniques for working with React and Redux (also available as **[an interactive course on Educative.io](https://www.educative.io/collection/5687753853370368/5707702298738688)**).
- The **[React/Redux links list](https://github.com/markerikson/react-redux-links)** has categorized articles on working with [reducers and selectors](https://github.com/markerikson/react-redux-links/blob/master/redux-reducers-selectors.md), [managing side effects](https://github.com/markerikson/react-redux-links/blob/master/redux-side-effects.md), [Redux architecture and best practices](https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md), and more.
- Our community has created thousands of Redux-related libraries, addons, and tools. The **[""Ecosystem"" docs page](https://redux.js.org/introduction/ecosystem)** lists our recommendations, and also there's a complete listing available in the **[Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links)**.

### Help and Discussion

The **[#redux channel](https://discord.gg/0ZcbPKXt5bZ6au5t)** of the **[Reactiflux Discord community](https://www.reactiflux.com)** is our official resource for all questions related to learning and using Redux. Reactiflux is a great place to hang out, ask questions, and learn - please come and join us there!

## Before Proceeding Further

Redux is a valuable tool for organizing your state, but you should also consider whether it's appropriate for your situation. Please don't use Redux just because someone said you should - instead, please take some time to understand the potential benefits and tradeoffs of using it.

Here are some suggestions on when it makes sense to use Redux:

- You have reasonable amounts of data changing over time
- You need a single source of truth for your state
- You find that keeping all your state in a top-level component is no longer sufficient

Yes, these guidelines are subjective and vague, but this is for a good reason. The point at which you should integrate Redux into your application is different for every user and different for every application.

> **For more thoughts on how Redux is meant to be used, please see:**<br>
>
> - **[When (and when not) to reach for Redux](https://changelog.com/posts/when-and-when-not-to-reach-for-redux)**
> - **[You Might Not Need Redux](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367)**<br>
> - **[The Tao of Redux, Part 1 - Implementation and Intent](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/)**<br>
> - **[The Tao of Redux, Part 2 - Practice and Philosophy](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/)**
> - **[Redux FAQ](https://redux.js.org/faq)**

## Developer Experience

Dan Abramov (author of Redux) wrote Redux while working on his React Europe talk called [“Hot Reloading with Time Travel”](https://www.youtube.com/watch?v=xsSnOQynTHs). His goal was to create a state management library with a minimal API but completely predictable behavior. Redux makes it possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer.

## Influences

Redux evolves the ideas of [Flux](https://facebook.github.io/flux/), but avoids its complexity by taking cues from [Elm](https://github.com/evancz/elm-architecture-tutorial/).
Even if you haven't used Flux or Elm, Redux only takes a few minutes to get started with.

## Basic Example

The whole global state of your app is stored in an object tree inside a single _store_.
The only way to change the state tree is to create an _action_, an object describing what happened, and _dispatch_ it to the store.
To specify how state gets updated in response to an action, you write pure _reducer_ functions that calculate a new state based on the old state and the action.

```js
import { createStore } from 'redux'

/**
 * This is a reducer - a function that takes a current state value and an
 * action object describing ""what happened"", and returns a new state value.
 * A reducer's function signature is: (state, action) => newState
 *
 * The Redux state should contain only plain JS objects, arrays, and primitives.
 * The root state value is usually an object.  It's important that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * You can use any conditional logic you want in a reducer. In this example,
 * we use a switch statement, but it's not required.
 */
function counterReducer(state = { value: 0 }, action) {
  switch (action.type) {
    case 'counter/incremented':
      return { value: state.value + 1 }
    case 'counter/decremented':
      return { value: state.value - 1 }
    default:
      return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counterReducer)

// You can use subscribe() to update the UI in response to state changes.
// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.
// There may be additional use cases where it's helpful to subscribe as well.

store.subscribe(() => console.log(store.getState()))

// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'counter/incremented' })
// {value: 1}
store.dispatch({ type: 'counter/incremented' })
// {value: 2}
store.dispatch({ type: 'counter/decremented' })
// {value: 1}
```

Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called _actions_. Then you write a special function called a _reducer_ to decide how every action transforms the entire application's state.

In a typical Redux app, there is just a single store with a single root reducing function. As your app grows, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components.

This architecture might seem like a lot for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action.

### Redux Toolkit Example

Redux Toolkit simplifies the process of writing Redux logic and setting up the store. With Redux Toolkit, that same logic looks like:

```js
import { createSlice, configureStore } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    incremented: state => {
      // Redux Toolkit allows us to write ""mutating"" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a ""draft state"" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decremented: state => {
      state.value -= 1
    }
  }
})

export const { incremented, decremented } = counterSlice.actions

const store = configureStore({
  reducer: counterSlice.reducer
})

// Can still subscribe to the store
store.subscribe(() => console.log(store.getState()))

// Still pass action objects to `dispatch`, but they're created for us
store.dispatch(incremented())
// {value: 1}
store.dispatch(incremented())
// {value: 2}
store.dispatch(decremented())
// {value: 1}
```

Redux Toolkit allows us to write shorter logic that's easier to read, while still following the same Redux behavior and data flow.

## Examples

Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online.

- [**Counter Vanilla**](https://redux.js.org/introduction/examples#counter-vanilla): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter-vanilla)
- [**Counter**](https://redux.js.org/introduction/examples#counter): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/counter)
- [**Todos**](https://redux.js.org/introduction/examples#todos): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos)
- [**Todos with Undo**](https://redux.js.org/introduction/examples#todos-with-undo): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos-with-undo) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos-with-undo)
- [**TodoMVC**](https://redux.js.org/introduction/examples#todomvc): [Source](https://github.com/reduxjs/redux/tree/master/examples/todomvc) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todomvc)
- [**Shopping Cart**](https://redux.js.org/introduction/examples#shopping-cart): [Source](https://github.com/reduxjs/redux/tree/master/examples/shopping-cart) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/shopping-cart)
- [**Tree View**](https://redux.js.org/introduction/examples#tree-view): [Source](https://github.com/reduxjs/redux/tree/master/examples/tree-view) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/tree-view)
- [**Async**](https://redux.js.org/introduction/examples#async): [Source](https://github.com/reduxjs/redux/tree/master/examples/async) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/async)
- [**Universal**](https://redux.js.org/introduction/examples#universal): [Source](https://github.com/reduxjs/redux/tree/master/examples/universal)
- [**Real World**](https://redux.js.org/introduction/examples#real-world): [Source](https://github.com/reduxjs/redux/tree/master/examples/real-world) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/real-world)

## Testimonials

> [“Love what you're doing with Redux”](https://twitter.com/jingc/status/616608251463909376)
> Jing Chen, creator of Flux

> [“I asked for comments on Redux in FB's internal JS discussion group, and it was universally praised. Really awesome work.”](https://twitter.com/fisherwebdev/status/616286955693682688)
> Bill Fisher, author of Flux documentation

> [“It's cool that you are inventing a better Flux by not doing Flux at all.”](https://twitter.com/andrestaltz/status/616271392930201604)
> André Staltz, creator of Cycle

## Thanks

- [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial) for a great intro to modeling state updates with reducers;
- [Turning the database inside-out](https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/) for blowing my mind;
- [Developing ClojureScript with Figwheel](https://www.youtube.com/watch?v=j-kj2qwJa_E) for convincing me that re-evaluation should “just work”;
- [Webpack](https://webpack.js.org/concepts/hot-module-replacement/) for Hot Module Replacement;
- [Flummox](https://github.com/acdlite/flummox) for teaching me to approach Flux without boilerplate or singletons;
- [disto](https://github.com/threepointone/disto) for a proof of concept of hot reloadable Stores;
- [NuclearJS](https://github.com/optimizely/nuclear-js) for proving this architecture can be performant;
- [Om](https://github.com/omcljs/om) for popularizing the idea of a single state atom;
- [Cycle](https://github.com/cyclejs/cycle-core) for showing how often a function is the best tool;
- [React](https://github.com/facebook/react) for the pragmatic innovation.

Special thanks to [Jamie Paton](https://jdpaton.github.io) for handing over the `redux` NPM package name.

## Logo

You can find the official logo [on GitHub](https://github.com/reduxjs/redux/tree/master/logo).

## Change Log

This project adheres to [Semantic Versioning](https://semver.org/).
Every release, along with the migration instructions, is documented on the GitHub [Releases](https://github.com/reduxjs/redux/releases) page.

## Patrons

The work on Redux was [funded by the community](https://www.patreon.com/reactdx).
Meet some of the outstanding companies that made it possible:

- [Webflow](https://github.com/webflow)
- [Ximedes](https://www.ximedes.com/)

[See the full list of Redux patrons](PATRONS.md), as well as the always-growing list of [people and companies that use Redux](https://github.com/reduxjs/redux/issues/310).

## License

[MIT](LICENSE.md)
","Redux is a predictable state container for JavaScript apps. It helps you write
applications that behave consistently, run in different environments (client,
server, and native), and are easy to test. You can use Redux together with
[React](https://reactjs.org), or with any other view library."
902,Rapid spam filtering system.,"# <a href=""https://rspamd.com""><img src=""https://rspamd.com/img/rspamd_logo_black.png"" alt=""Rspamd"" width=""220px""/></a>

[![DroneCI](https://ci.rspamd.com/api/badges/rspamd/rspamd/status.svg)](https://ci.rspamd.com/rspamd/rspamd)


## Introduction

[Rspamd](https://rspamd.com) is an advanced spam filtering system and email processing framework that allows evaluation of messages by a number of
rules including regular expressions, statistical analysis and custom services
such as URL black lists. Each message is analysed by Rspamd and given a verdict that might be used by MTA for further processing (e.g. to reject a message, or add a special header indicating spam) along with other information, such as possible DKIM signature or modifications suggested for a message.

Rspamd can act as a [Milter](https://en.wikipedia.org/wiki/Milter) allowing direct interaction with popular MTA systems, such as Postfix or Sendmail.

Rspamd is designed to process hundreds of messages per second simultaneously, and provides a number of
useful features including a comprehensive [Lua API](https://rspamd.com/doc/lua/) that allows access to messages processing in various aspects as well as [asynchronous](https://rspamd.com/doc/lua/sync_async.html) network API to access external resources, such as DNS, HTTP or even generic TCP/UDP services.


## Getting Started

A good starting point to study how to install and configure Rspamd is [the quick start guide](https://rspamd.com/doc/quickstart.html).

Rspamd is [packaged](https://rspamd.com/downloads.html) for the major Linux distributions, and is also available via [FreeBSD ports](https://freshports.org/mail/rspamd), NetBSD [pkgsrc](https://pkgsrc.org) and [OpenBSD ports](http://openports.se/mail/rspamd).

We advice to use packages provided by Rspamd project if available for your OS instead of packages that might be provided by some Linux distributives, as they are usually out of date and does not provide the desired spam filtering quality nor supported by Rspamd project.

## Spam filtering features

Rspamd is shipped with various spam filtering modules and features enabled just out of the box.
The full list of built-in modules could be found in the [Rspamd documentation](https://rspamd.com/doc/modules/).

If that is not enough, Rspamd provides an extensive [Lua API](https://rspamd.com/doc/lua/) to write your own rules and plugins: <https://rspamd.com/doc/tutorials/writing_rules.html>

## License

This project is licensed under the Apache 2.0 License - see the [LICENSE.md](LICENSE.md) file for details

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on the process for submitting pull requests to us.

Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in `rspamd` by you, as defined in the APACHE 2.0 license, shall be licensed as above, without any additional terms or conditions.

## Authors

* **Vsevolod Stakhov** - [vstakhov](https://github.com/vstakhov)

See also the list of [contributors](AUTHORS.md) who participated in this project.


## References

* Home site: <https://rspamd.com>
* Development: <https://github.com/rspamd/rspamd>
* Site repository: <https://github.com/rspamd/rspamd.com>
","Rspamd is an advanced spam filtering system and email processing framework. It
allows evaluation of messages by a number of regular expressions, statistical
analysis and custom services such as URL black lists. Each message is analysed
by Rspamd and given a verdict that might be used by MTA for further processing
(e.g. to reject a message, or add a special header indicating spam) along with
other information, such as possible DKIM signature or modifications suggested
for a message. It can act as a [Milter] allowing direct interaction with popular
MTA systems, like Postfix or Sendmail."
2944,Github repo with tutorials to fine tune transformers for diff NLP tasks,"﻿# <h1 align=""center"">PyTorch Transformers Tutorials </h1>

<p align=""center"">
<img alt=""Transformer Tutorials"" src=""meta/banner.png"">
</p>

<p align=""center"">
<a href=""https://github.com/abhimishra91/transformers-tutorials/issues""><img alt=""GitHub issues"" src=""https://img.shields.io/github/issues/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/network""><img alt=""GitHub forks"" src=""https://img.shields.io/github/forks/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/stargazers""><img alt=""Github Stars"" src=""https://img.shields.io/github/stars/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/blob/master/LICENSE""><img alt=""GitHub license"" src=""https://img.shields.io/github/license/abhimishra91/transformers-tutorials""></a>


### Introduction

The field of **NLP** was revolutionized in the year 2018 by introduction of **BERT** and his **Transformer** friends(RoBerta, XLM etc.).

These novel transformer based neural network architectures and new ways to training a neural network on natural language data introduced transfer learning to NLP problems. Transfer learning had been giving out state of the art results in the Computer Vision domain for a few years now and introduction of transformer models for NLP brought about the same paradigm change in NLP.

Companies like [Google](https://github.com/google-research/bert) and [Facebook](https://github.com/pytorch/fairseq/tree/master/examples/roberta) trained their neural networks on large swathes of Natural Language Data to grasp the intricacies of language thereby generating a  Language model. Finally these models were fine tuned to specific domain dataset to achieve state of the art results for a specific problem statement. They also published these trained models to open source community. The community members were now able to fine tune these models to their specific use cases.

[Hugging Face](https://github.com/huggingface) made it easier for community to access and fine tune these models using their Python Package: [Transformers](https://github.com/huggingface/transformers). 

### Motivation
Despite these amazing technological advancements applying these solutions to business problems is still a challenge given the niche knowledge required to understand and apply these method on specific problem statements. Hence, In the following tutorials i will be demonstrating how a user can leverage technologies along with some other python tools to fine tune these Language models to specific type of tasks. 

Before i proceed i will like to mention the following groups for the fantastic work they are doing and sharing which have made these notebooks and tutorials possible:

Please review these amazing sources of information and subscribe to their channels/sources.
 - [Hugging Face Team](https://huggingface.co/)
 - Abhishek Thakur for his amazing [Youtube videos](https://www.youtube.com/user/abhisheksvnit)

The problem statements that i will be working with are:

| Notebook |Github Link |Colab Link|Kaggle Kernel|
|--|--|--|--|
|Text Classification: Multi-Class| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb) |[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multiclass-classification-ipynb)|
|Text Classification: Multi-Label| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multi-label-classification)|
|Sentiment Classification **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_sentiment/runs/1zwn4gbg?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)||
|Named Entity Recognition: **with TPU processing!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-ner)|
|Question Answering||||
|Summary Writing: **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_summarization?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-summarization-t5/output)|



### Directory Structure

 1. `data`: This folder contains all the toy data used for fine tuning. 
 2. `utils`: This folder will contain any miscellaneous script used to prepare for the fine tuning.
 3. `models`: Folder to save all the artifacts post fine tuning. 

### Further Watching/Reading

I will try to cover the practical and implementation aspects of fine tuning of these language models on various NLP tasks. You can improve your knowledge on this topic by reading/watching the following resources.


 - Watching
	 - [Introduction in Simple terms](https://www.youtube.com/watch?v=gcHkxP9adiM)
	 - [Transfer Learning in NLP](https://www.youtube.com/watch?v=0T_Qr4qBrqc)
	 - [BERT Research Series from ChrisMcCormickAI](https://www.youtube.com/playlist?list=PLam9sigHPGwOBuH4_4fr-XvDbe5uneaf6)

- Reading
	 - [Transformers Documentation](https://huggingface.co/transformers/)
	 - [Pytorch Documentation](https://pytorch.org/docs/stable/index.html)
	 - [Google AI Blog](https://ai.googleblog.com/)
","The field of **NLP** was revolutionized in the year 2018 by introduction of
**BERT** and his **Transformer** friends(RoBerta, XLM etc.) These novel
transformer based neural network architectures and new ways to training a neural
network on natural language data introduced transfer learning to NLP problems.
In the following tutorials i will be demonstrating how a user can leverage
technologies along with some other python tools to fine tune these Language
models to specific type of tasks.Please review these amazing sources of
information and subscribe to their channels/sources."
3012,a repo for awesome front-end resources,"# 👋 Introduction

A collection of (awe)some resources, mostly focused on front-end web development.
You can find a list of all the resources in [here](https://fe-resources.vercel.app).

## Table of Contents

- [👋 Introduction](#-introduction)
  - [Table of Contents](#table-of-contents)
  - [Resources](#resources)
    - [Introduction](#introduction)
    - [API](#api)
    - [CSS](#css)
    - [Data Structures and Algorithms](#data-structures-and-algorithms)
    - [Design](#design)
    - [Frontend Resources](#frontend-resources)
    - [Git / Github](#git--github)
    - [HTML](#html)
    - [JavaScript](#javascript)
    - [React](#react)
    - [TypeScript](#typescript)
  - [Website](#website)
    - [Installation](#installation)
    - [Local Development](#local-development)
    - [Build](#build)
  - [Contributing](#contributing)
  - [License](#license)
  - [Contributors](#contributors)

## Resources

### [Introduction](./docs/intro.md)

### API

- [Public API's](./docs/api/api.md)

### CSS

- [Architectures / Methodologies](./docs/css/architectures-methodologies.md)
- [Articles](./docs/css/articles.md)
- [CSS in JS](./docs/css/css-in-js.md)
- [Design Systems](./docs/css/design-systems.md)
- [Generators](./docs/css/generators.md)
- [Videos](./docs/css/videos.md)
- [Websites](./docs/css/websites.md)

### Data Structures and Algorithms

- [Books](./docs/data-structures-and-algorithms/books.md)
- [Challenges](./docs/data-structures-and-algorithms/challenges.md)
- [Websites](./docs/data-structures-and-algorithms/websites.md)

### Design

- [Articles](./docs/design/articles.md)
- [Books](./docs/design/books.md)
- [Colors](./docs/design/colors.md)
- [Design Systems](./docs/design/design-systems.md)
- [Fonts](./docs/design/fonts.md)
- [Icons](./docs/design/icons.md)
- [Optimization Tools](./docs/design/optimization-tools.md)
- [Stock Photos](./docs/design/stock-photos.md)
- [Tools](./docs/design/tools.md)
- [Typography](./docs/design/typography.md)
- [Websites](./docs/design/websites.md)

### Frontend Resources

- [Articles](./docs/frontend-resources/articles.md)
- [Blogs](./docs/frontend-resources/blogs.md)
- [Books](./docs/frontend-resources/books.md)
- [Challenges](./docs/frontend-resources/challenges.md)
- [Discord Communities](./docs/frontend-resources/discord.md)
- [Documentations](./docs/frontend-resources/documentations.md)
- [Games](./docs/frontend-resources/games.md)
- [Interactive Practices](./docs/frontend-resources/interactive-practices.md)
- [Mixed Content](./docs/frontend-resources/mixed.md)
- [Newsletters](./docs/frontend-resources/newsletters.md)
- [Online Cirriculums](./docs/frontend-resources/online-cirriculums.md)
- [Podcasts](./docs/frontend-resources/podcasts.md)
- [Roadmaps](./docs/frontend-resources/roadmaps.md)
- [Subreddits](./docs/frontend-resources/subreddits.md)
- [Surveys](./docs/frontend-resources/surveys.md)
- [Tools](./docs/frontend-resources/tools.md)
- [Websites](./docs/frontend-resources/websites.md)
- [Youtube Channels](./docs/frontend-resources/youtube-channels.md)

### Git / Github

- [Courses](./docs/git-github/courses.md)
- [Tools](./docs/git-github/tools.md)
- [Videos](./docs/git-github/videos.md)
- [Websites](./docs/git-github/websites.md)

### HTML

- [Accessibility](./docs/html/accessibility.md)
- [Articles](./docs/html/articles.md)
- [Checklists](./docs/html/checklists.md)
- [Tools](./docs/html/tools.md)

### JavaScript

- [Articles](./docs/javascript/articles.md)
- [Books](./docs/javascript/books.md)
- [Courses / Practices](./docs/javascript/courses-practices.md)
- [Talks](./docs/javascript/talks.md)
- [Tools](./docs/javascript/tools.md)
- [Websites](./docs/javascript/websites.md)

### React

- [Articles](./docs/react/articles.md)
- [Frameworks](./docs/react/frameworks.md)
- [Hooks](./docs/react/hooks.md)
- [State Management](./docs/react/state-management.md)
- [Tools](./docs/react/tools.md)
- [Videos](./docs/react/videos.md)

### TypeScript

- [Articles](./docs/typescript/articles.md)
- [Challenges](./docs/typescript/challenges.md)
- [Courses](./docs/typescript/courses.md)
- [Tools](./docs/typescript/tools.md)

## Website

This website is built using [Docusaurus 2](https://docusaurus.io/), a modern static website generator.

### Installation

```
$ yarn
```

### Local Development

```
$ yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

### Build

```
$ yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

## Contributing

If you have any front-end resources that you would like to share, please feel free to open a pull request with your additions. Please make sure to follow the formatting of the existing resources and to add your resource to the appropriate section.

## License

This repository is licensed under the MIT License. See LICENSE for more information.

## Contributors

<a href=""https://github.com/aycanogut/front-end-resources/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=aycanogut/front-end-resources"" />
</a>
","A collection of (awe)some resources, mostly focused on front-end web
development. You can find a list of all the resources in [here](https://fe-
resources.vercel.app). Table of Contents: [#-introduction] #-table-of-contents:
[Table of Contents]"
2314,"(IROS 2020, ECCVW 2020) Official Python Implementation for ""3D Multi-Object Tracking: A Baseline and New Evaluation Metrics""","# AB3DMOT

<b>3D Multi-Object Tracking: A Baseline and New Evaluation Metrics (IROS 2020, ECCVW 2020)</b>

This repository contains the official python implementation for our full paper at IROS 2020 ""[3D Multi-Object Tracking: A Baseline and New Evaluation Metrics](http://www.xinshuoweng.com/papers/AB3DMOT/proceeding.pdf)"" and short paper ""[AB3DMOT: A Baseline for 3D Multi-Object Tracking and New Evaluation Metrics](http://www.xinshuoweng.com/papers/AB3DMOT_eccvw/camera_ready.pdf)"" at ECCVW 2020. Our project website and video demos are [here](http://www.xinshuoweng.com/projects/AB3DMOT/). If you find our paper or code useful, please cite our papers:

```
@article{Weng2020_AB3DMOT, 
author = {Weng, Xinshuo and Wang, Jianren and Held, David and Kitani, Kris}, 
journal = {IROS}, 
title = {{3D Multi-Object Tracking: A Baseline and New Evaluation Metrics}}, 
year = {2020} 
}
```
```
@article{Weng2020_AB3DMOT_eccvw, 
author = {Weng, Xinshuo and Wang, Jianren and Held, David and Kitani, Kris}, 
journal = {ECCVW}, 
title = {{AB3DMOT: A Baseline for 3D Multi-Object Tracking and New Evaluation Metrics}}, 
year = {2020} 
}
```

<img align=""center"" width=""100%"" src=""https://github.com/xinshuoweng/AB3DMOT/blob/master/main1.gif"">
<img align=""center"" width=""100%"" src=""https://github.com/xinshuoweng/AB3DMOT/blob/master/main2.gif"">

## Overview

- [News](#news)
- [Introduction](#introduction)
- [Installation](#installation)
- [Quick Demo on KITTI](#quick-demo-on-kitti)
- [Benchmarking](#benchmarking)
- [Acknowledgement](#acknowledgement)

## News

- Feb. 27, 2022: Added support to the nuScenes dataset and updated README
- Feb. 26, 2022: Refactored code libraries and signficantly improved performance on KITTI 3D MOT
- Aug. 06, 2020: Extend abstract (one oral) accepted at two ECCV workshops: [WiCV](https://sites.google.com/view/wicvworkshop-eccv2020/), [PAD](https://sites.google.com/view/pad2020/accepted-papers?authuser=0)
- Jul. 05, 2020: 2D MOT results on KITTI for all three categories released
- Jul. 04, 2020: Code modularized and a minor bug in KITTI evaluation for DontCare objects fixed
- Jun. 30, 2020: Paper accepted at IROS 2020
- Jan. 10, 2020: New metrics sAMOTA added and results updated
- Aug. 21, 2019: Python 3 supported
- Aug. 21, 2019: 3D MOT results on KITTI ""Pedestrian"" and ""Cyclist"" categories released
- Aug. 19, 2019: A minor bug in orientation correction fixed
- Jul. 9, 2019: Code and 3D MOT results on KITTI ""Car"" category released, support Python 2 only

## Introduction

3D multi-object tracking (MOT) is an essential component technology for many real-time applications such as autonomous driving or assistive robotics. However, recent works for 3D MOT tend to focus more on developing accurate systems giving less regard to computational cost and system complexity. In contrast, this work proposes a simple yet accurate real-time baseline 3D MOT system. We use an off-the-shelf 3D object detector to obtain oriented 3D bounding boxes from the LiDAR point cloud. Then, a combination of 3D Kalman filter and Hungarian algorithm is used for state estimation and data association. Although our baseline system is a straightforward combination of standard methods, we obtain the state-of-the-art results. To evaluate our baseline system, we propose a new 3D MOT extension to the official KITTI 2D MOT evaluation along with two new metrics. Our proposed baseline method for 3D MOT establishes new state-of-the-art performance on 3D MOT for KITTI, improving the 3D MOTA from 72.23 of prior art to 76.47. Surprisingly, by projecting our 3D tracking results to the 2D image plane and compare against published 2D MOT methods, our system places 2nd on the official KITTI leaderboard. Also, our proposed 3D MOT method runs at a rate of 214.7 FPS, 65 times faster than the state-of-the-art 2D MOT system. 

## Installation

Please follow carefully our provided [installation instructions](docs/INSTALL.md), to avoid errors when running the code.

## Quick Demo on KITTI

To quickly get a sense of our method's performance on the KITTI dataset, one can run the following command after installation of the code. This step does not require you to download any dataset (a small set of data is already included in this code repository).

```
python3 main.py --dataset KITTI --split val --det_name pointrcnn
python3 scripts/post_processing/trk_conf_threshold.py --dataset KITTI --result_sha pointrcnn_val_H1
python3 scripts/post_processing/visualization.py --result_sha pointrcnn_val_H1_thres --split val
```

## Benchmarking

We provide instructions (inference, evaluation and visualization) for reproducing our method's performance on various supported datasets ([KITTI](docs/KITTI.md), [nuScenes](docs/nuScenes.md)) for benchmarking purposes. 

### Acknowledgement

The idea of this method is inspired by ""[SORT](https://github.com/abewley/sort)""","This work proposes a simple yet accurate real-time baseline 3D MOT system. We
use an off-the-shelf 3D object detector to obtain oriented 3D bounding boxes
from the LiDAR point cloud. Then, a combination of 3D Kalman filter and
Hungarian algorithm is used for state estimation and data association. Although
our baseline system is a straightforward combination of standard methods, we
obtain the state-of theart results. Surprisingly, by projecting our 3D tracking
results to the 2D image plane and compare against published 2D MOT methods, our
system places 2nd on the official KITTI leaderboard."
2763,Algorithms used in Competitive Programming,"# ACM-ICPC Algorithms

### Introduction to ACM-ICPC
ACM International Collegiate Programming Contest (abbreviated as ACM-ICPC or ICPC) is an annual multi-tiered competitive programming competition among the universities of the world.

Alternately, we can say that the [International Collegiate Programming Contest](https://en.wikipedia.org/wiki/ACM_International_Collegiate_Programming_Contest) is an algorithmic programming contest for college students.
- Teams of three, representing their university, work to solve real-world problems, fostering collaboration, creativity, innovation, and the ability to perform under pressure.
- Through training and competition, teams challenge each other to raise the bar on what could be done.
- Quite simply, it is the oldest, largest, and most prestigious programming contest in the world.

### Purpose of ACM-ICPC Algorithms
ACM-ICPC Algorithms is a collection of important algorithms and data structures used to solve questions in this worldwide olympiad. It aims to provide solutions in various languages as per [ICPC 2018 WF](https://icpc.baylor.edu/worldfinals/programming-environment), including:
-  C
-  C++
-  Java
-  Python (2 & 3)
-  Kotlin
##### For more information, visit: **Official Website of [ICPC](https://icpc.baylor.edu/)**

#### If you wish to contribute, please refer to [the contributor guidelines](https://github.com/matthewsamuel95/ACM-ICPC-Algorithms/blob/master/CONTRIBUTING.md).

**Table of Contents :**

* [Breadth First Search](/BFS)
* [Branch And Bound](/Branch%20and%20Bound)
  * [0/1 Knapsack](/Branch%20and%20Bound/0_1%20Knapsack)
* [Binary Search Tree](/BST)
* [Backtracking](/BackTracking)
   * [Hamilton Path](/BackTracking/Hamilton%20Path)
   * [Knights Tour](/BackTracking/KnightsTour)
   * [NQueens](/BackTracking/NQueens)
   * [Rat In A Maze](/BackTracking/RatInAMaze)
   * [Sudoku Algorithm](/BackTracking/SudokuAlgorithm)
* [Depth First Search](/DFS)
* [Bit Manipulation](/BitManipulation)
   * [Checking Power of 2](/BitManipulation/Checking_power_of_2)
   * [Nth Magic No](/BitManipulation/Nth_magic_number)
   * [Set kth Bit](/BitManipulation/Set_kth_bit)
   * [Sparse Number](/BitManipulation/Sparse_number)
   * [Count Ones](/BitManipulation/count_ones)
   * [Divide Integers](/BitManipulation/divide_integers)
   * [Even Odd](/BitManipulation/even_odd)
   * [Print Subsets](/BitManipulation/print_subsets)
   * [Reverse Bits](/BitManipulation/reverse_bits)
   * [Single Number](/BitManipulation/single_number)
   * [Swap Bits](/BitManipulation/swap_bits)
* [Data Structures](/Data%20Structures)
   * [Disjoint Set](/Data%20Structures/disjointset)
   * [Doubly Linked List](/Data%20Structures/DoublyLinkedList)
   * [Fenwick Tree](/Data%20Structures/Fenwick_tree)
   * [LCA](/Data%20Structures/LCA)
   * [Linked List](/Data%20Structures/Linked%20List)
   * [Queue](/Data%20Structures/Queue)
   * [Queue From Stack Or Stack From Queue](/Data%20Structures/QueueFromStack_StackFromQueue)
   * [Red Black Tree](/Data%20Structures/Red%20Black%20Tree)
   * [Singly Linked List](/Data%20Structures/SinglyLinkedList)
   * [Stack](/Data%20Structures/Stack)
   * [Segment Tree](/Data%20Structures/Segment%20Tree)
   * [Treap](/Data%20Structures/Treap)
   * [Trie](/Data%20Structures/Trie)
* [Dynamic Programming](/DP)
   * [Coin Change](/DP/Coin%20Change%20Problem)
   * [Collect Maximum Points](/DP/Collect_Max_Points)
   * [Edit Distance](/DP/EditDistance)
   * [Egg Dropping Puzzle](/DP/Egg%20Dropping%20Puzzle)
   * [Fibonacci Series](/DP/Fibonacci)
   * [Floyd Warshall Algorithm](/DP/Floyd%20Warshall%20Algorithm)
   * [Game Of Sum](/DP/game_of_sum)
   * [Knapsack](/DP/Knapsack)
   * [Longest Palindrome Substring](/DP/Longest%20Palindrome%20Substring)
   * [Longest Common Increasing Subsequence](/DP/LCIS)
   * [Longest Common Subsequence](/DP/LongestCommonSubsequence)
   * [Longest Increasing Subsequence](/DP/LongestIncreasingSubsequence)
   * [Longest Repeated Subsequence](/DP/Longest%20Repeated%20Subsequence)
   * [Matrix Chain Multiplication](/DP/MatrixChain_multiplication)
   * [Max Sum Increasing Subsequence](/DP/Maximum%20Sum%20Increasing%20Subsequence)
   * [Minimum Path Sum](/DP/MinimumPathSum)
   * [Number Of Islands](/DP/NumberOfIslands)
   * [Partition Problem](/DP/PartitionProblem)
   * [Print Neatly](/DP/PrintNeatly)
   * [Recursive Staircase Problem](/DP/Recursive_Staircase_Problem)
   * [Shortest Uncommon Subsequence](/DP/ShortestUncommonSubsequence)
   * [Subset Sum](/DP/subset%20sum%20problem)
   * [Longest Bitonic SubSequence](/DP/LongestBitonicSubseq)
   * [Tiling Problem](/DP/Tiling%20Problem)
* [Graph Algorithms](/Graph)
   * [Articulation Points](/Graph/Articulation_points)
   * [Bellman Ford SSSP](/Graph/BellmanFordSSSP)
   * [Bridges](/Graph/bridges)
   * [Centroid Decomposition](/Graph/Centroid%20Decomposition)
   * [Detect Cycle](/Graph/Detect_Cycle)
   * [Dials Algorithm](/Graph/DialsAlgorithm)
   * [Dijkstras SPT](/Graph/DijkstrasSPT)
   * [Euler Path](/Graph/EulerPath)
   * [Floyd Warshall](/Graph/FloydWarshall)
   * [Graph Coloring](/Graph/Graph_m_Coloring)
   * [Johnson's Algorithm](/Graph/Johnson'sAlgorithm)
   * [Kruskal MST](/Graph/KruskalsMST)
   * [Prims MST](/Graph/PrimsMST)
   * [Sack](/Graph/Sack)
   * [SPFA SSSP](/Graph/SPFA%20SSSP)
   * [Targan SCC](/Graph/TarganSCC)
   * [Topo Sort](/Graph/TopoSort)
   * [Fenwick Tree](/Graph/FenwickTree)
   * [Weighted Quick Union](/Graph/Weighted_Quick_Union)
* [Greedy Algorithms](/Greedy)
   * [Activity Selection](/Greedy/ActivitySelection)
   * [Containership](/Greedy/ContainerShip)
   * [Equalizing Bit Strings](/Greedy/EqualizingBitStrings)
   * [Gas Station](/Greedy/Gas%20Station)
   * [Greedy Graph Coloring](/Greedy/Greedy_Graph_Coloring)
   * [Huffman Coding](/Greedy/Huffman%20coding)
   * [Knapsack](/Greedy/Knapsack)
   * [Kruskal's Minimum Spanning Tree](/Greedy/Kruskal’sMinimumSpanningTree)
   * [Maximum Increasing Subarray](/Greedy/MaximumIncreasingSubarray)
   * [Minimum Coins](/Greedy/MinimumCoins)
   * [Odd Sum Subsequence](/Greedy/OddSumSubsequence)
* [Hashing Algorithms](/Hashing)
   * [2 Sum](/Hashing/2_Sum)
   * [3 Sum](/Hashing/3_Sum)
   * [4 Sum](/Hashing/4_Sum)
* [Machine Learning](/MachineLearning)
   * [Perceptron](/MachineLearning/Perceptron)
* [Mathematical Algorithms](/Math)
   * [3 Sum square complexity](/Math/3_Sum_square_complexity)
   * [Factors Of A Given Number](/Math/All%20factors%20of%20a%20given%20Number)
   * [Collatz Conjecture](/Math/collatz_conjecture)
   * [Combinations](/Math/Combinations)
   * [Bézout's Coefficients](/Math/Bézout's%20Coefficients)
   * [Convex Hull](/Math/convexhull)
   * [Euler's Totient Function](/Math/eulers_totient_function)
   * [Factorization](/Math/Factorization)
   * [Factors](/Math/factors)
   * [Fast Exponentiation with Mod](/Math/Fast%20Exponentiation%20with%20Mod)
   * [Floor Square Root](/Math/floor_sqrt)
   * [Greatest Common Divisor](/Math/gcd)
   * [Histogram Area](/Math/histogram_area)
   * [Largest Number Divisible By Three](/Math/largest_number_divisible_by_three)
   * [Last Digit Exp](/Math/last_digit_exp)
   * [Logarithm](/Math/log)
   * [Lowest Common Multiple](/Math/lowest_common_multiple)
   * [Matrix Power](/Math/Matrix_Power)
   * [Max Divisible Number](/Math/max_divisible_num)
   * [Max Sub Rectangle](/Math/max_sub_rectangle)
   * [Max Sub Square](/Math/Max_Sub_Square)
   * [Miller Rabin Primality Test](/Math/miller_rabin_primality_test)
   * [Modular Multiplication Inverse](/Math/modular_multiplicative_inverse)
   * [Next Power of 2](/Math/NextPow2)
   * [Nth Root](/Math/nthRoot)
   * [Pascal Row](/Math/pascal_row)
   * [Power](/Math/Power)
   * [Prime](/Math/Prime)
   * [Randomized Algorithms](/Math/Randomized%20algorithms)
   * [Set](/Math/Set)
   * [Sieve Of Eratosthenes](/Math/sieve_of_eratosthenes)
   * [Square Root](/Math/squareroot)
   * [Subset Sum](/Math/subset_sum)
   * [Sum Of Digits](/Math/sum_of_digits)
   * [Tower Of Hanoi](/Math/TowerofHanoi)
   * [Truncated Square Root](/Math/truncated_square_root)
   * [Calculate And Print All Permutations](/Math/AllPermutations)
   * [Calculate the result of binom(n,p)](/Math/binomial_coefficients)
* [Network Flow](/NetworkFlow)
   * [Dinic](/NetworkFlow/Dinic)
   * [Edmund Karp](/NetworkFlow/EdmundKarp)
   * [Ford Fulkerson](/NetworkFlow/FordFulkerson)
   * [Goldberg Tarjan](/NetworkFlow/GoldbergTarjan)
* [Search Algorithms](/Search)
   * [Binary Search](/Search/BinarySearch)
   * [Fibonacci Search](/Search/FibonacciSearch)
   * [Hashing](/Search/hashing)
   * [Jump Search](/Search/JumpSearch)
   * [Linear Search](/Search/LinearSearch)
   * [Ternary Search](/Search/TernarySearch)
   * [Interpolation Search](/Search/InterpolationSearch)
   * [Exponential Search](/Search/ExponentialSearch)
* [Sorting Algorithms](/Sorting)
   * [BogoSort](/Sorting/BogoSort)
   * [Strand sort](/Sorting/strandsort)
   * [Bubble Sort](/Sorting/Bubble%20Sort)
   * [Bucket Sort](/Sorting/Bucket%20Sort)
   * [Cocktail Shaker Sort](/Sorting/Cocktail%20Shaker%20Sort)
   * [Comb Sort](/Sorting/Comb%20Sort)
   * [Counting Sort](/Sorting/Counting%20Sort)
   * [HeapSort](/Sorting/HeapSort)
   * [Index Sort](/Sorting/Index%20Sort)
   * [Insertion Sort](/Sorting/Insertion%20Sort)
   * [Merge Sort](/Sorting/Merge%20Sort)
   * [Pancake Sorting](/Sorting/Pancake%20Sorting)
   * [Patience Sorting](/Sorting/Patience%20Sorting)
   * [QuickSort](/Sorting/QuickSort)
   * [Radix Sort](/Sorting/Radix%20Sort)
   * [Selection Sort](/Sorting/Selection%20Sort)
   * [ShellSort](/Sorting/ShellSort)
   * [TimSort](/Sorting/TimSort)
   * [Topological Sorting](/Sorting/Topological%20Sorting)
* [String Algorithms](/String)
   * [Anagram](/String/Anagram)
   * [Balanced Parenthesis](/String/Balanced%20Parentheses)
   * [Hamming Distance](/String/Hamming%20distance)
   * [KMP](/String/KMP)
   * [Palindrome](/String/Palindrome)
   * [String Automaton](/String/String%20Automaton)
   * [String Matching](/String/String%20Matching)
   * [Substring](/String/Substring)
   * [Top K Frequent Words](/String/Top_K_Frequent_Words)
   * [Top K Frequent Words In Java](/String/top_k_frequent_words_in_java)
   * [Uncompressing Strings](/String/Uncompressing_Strings)
   * [Parsing Arithmetic](/String/ParsingArithmetic)
* [Geometry 2D](/Geometry%202D)
   * [Lines Intersection](/Geometry%202D/Lines%20Intersection)
","ACM-ICPC Algorithms is a collection of important algorithms and data structures
used to solve questions in this worldwide olympiad. It aims to provide solutions
in various languages as per [ICPC 2018 WF], including C, C++, Java, Python (2 &
3) and Kotlin. If you wish to contribute, please refer to [the contributor guide
lines](https://github.com/matthewsamuel95/ACM/Algorithms/blob/master/CONTRIBUTIN
G.md)."
2129,A list of resources we at flyeralarm use to get new developers up and running,"# Advanced Curriculum For The Software Craftsman

This document is intended as a guidance for new developers joining our teams at [FLYERALARM](https://flyeralarm.com).
Because we think it might help others as well we open-sourced it. If you know something that's missing feel free to send us a Pull-Request.

## Basics

* [How The Web Works](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works)
* [HTTP on Wikipedia](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)
* [What Happens When](https://github.com/alex/what-happens-when/blob/master/README.rst)
* [What to learn next](https://roadmap.sh/)
* [An Introduction To HTTP Basics](https://personal.ntu.edu.sg/ehchua/programming/webprogramming/HTTP_Basics.html)
* [Choosing an HTTP Status Code — Stop Making It Hard](https://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html)
* [TCP/IP Protocol Fundamentals Explained with a Diagram](http://www.thegeekstuff.com/2011/11/tcp-ip-fundamentals)
* [Google Developer Training For The Web](https://developers.google.com/training/web/)
* [Visualising data structures and algorithms through animation](https://visualgo.net/)
* [Algorithms, Data Structures, and Design Patterns for Self-Taught Developers](https://web.archive.org/web/20210625134101/https://antjanus.com/blog/web-development-tutorials/learn-the-unlearned-algorithms-data-structures-and-design-patterns/)
* [HTTP: The Protocol Every Web Developer Must Know](https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177)
* [An Introduction to Networking Terminology, Interfaces, and Protocols](https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols)
* [How Browser Caching Works](https://thesocietea.org/2016/05/how-browser-caching-works/)
* [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets](http://www.joelonsoftware.com/articles/Unicode.html)
* [What Every Programmer Should Know About Memory](https://www.akkadia.org/drepper/cpumemory.pdf)
* [What Every Developer Should Know About Time](https://unix4lyfe.org/time/?v=1)
* [A story about an angry carrot and a floating point fairy](http://blog.ruslans.com/2014/12/a-story-about-angry-carrot-and-floating.html)

## Design And Architecture Of Software

* [Clean Code](https://www.amazon.com/gp/product/0132350882/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0132350882&linkCode=as2&tag=sdrl-20)
* [DesignPatternsPHP](https://github.com/DesignPatternsPHP/DesignPatternsPHP)
* [What's a design pattern?](https://refactoring.guru/design-patterns/what-is-pattern)
* [All the cool kids...](https://www.youtube.com/watch?v=EDXgNA_pXX0)
* [18 must-watch PHP architecture talks](https://www.reddit.com/r/PHP/comments/3kklt5/18_mustwatch_php_architecture_talks_13hrs/)
* [Object Design Style Guide](https://www.manning.com/books/object-design-style-guide)
* [Practical Object-Oriented Design in Ruby](https://www.amazon.de/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?s=books-intl-de&ie=UTF8&qid=1476881380&sr=1-1&keywords=practical+object-oriented+design+in+ruby)
* [Patterns of Enterprise Application Architecture](https://www.amazon.de/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/ref=sr_1_1?ie=UTF8&qid=1476887236&sr=8-1&keywords=patterns+of+enterprise+application+architecture)
* [Domain Driven Design](https://www.amazon.de/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&qid=1476887211&sr=8-1&keywords=domain+driven+design)
* [Introduction to CQRS](http://www.codeproject.com/Articles/555855/Introduction-to-CQRS)
* [CQRS and Event Sourcing](https://www.youtube.com/watch?v=JHGkaShoyNs)
* [Your Code as a Crime Scene](https://pragprog.com/titles/atcrime/your-code-as-a-crime-scene/)
* [Awesome API](https://github.com/Kikobeats/awesome-api)
* [An introduction to APIs](https://zapier.com/learn/apis/)
* [Architectural Katas](http://nealford.com/katas/)

## PHP

* [PHP The Right Way](http://www.phptherightway.com/)
* [PHP The Wrong Way](http://www.phpthewrongway.com/)
* [A response to PHP The Wrong Way](https://medium.com/@jon.lemaitre/a-response-to-php-the-wrong-way-fe7bb253e295)
* [PHP Framework Interoperability Group](http://www.php-fig.org/)
* [PSR - PHP Standard Recommendation](https://en.wikipedia.org/wiki/PHP_Standard_Recommendation)
* [PHP Library Discovery](https://www.youtube.com/watch?v=3kD9t0GVGGY&feature=youtu.be)
* [PHP Logging Basics](https://www.loggly.com/ultimate-guide/php-logging-basics/)
* [Awesome PHP (A curated list of amazingly awesome PHP libraries, resources and shiny things)](https://github.com/ziadoz/awesome-php)
* [Reference - What does this error mean in PHP?](https://stackoverflow.com/questions/12769982/reference-what-does-this-error-mean-in-php)

## Kotlin

* [Resources To Learn Kotlin The Right Way](https://superkotlin.com/resources-learn-kotlin/)
* [Programming Kotlin by Venkat Subramaniam](https://pragprog.com/titles/vskotlin/programming-kotlin/)
* [Awesome Kotlin](https://github.com/KotlinBy/awesome-kotlin)
* [Mastering Kotlin standard functions: run, with, let, also and apply](https://medium.com/@elye.project/mastering-kotlin-standard-functions-run-with-let-also-and-apply-9cd334b0ef84)
* [KotlinConf 2018 - Kotlin Coroutines in Practice by Roman Elizarov](https://www.youtube.com/watch?v=a3agLJQ6vt8)
* [Ktor: Web backend framework for Kotlin. Easy to use, fun and asynchronous.](https://ktor.io)

## JavaScript & Frontend

* [JS for Cats](http://jsforcats.com/)
* [JavaScript for impatient programmers](https://exploringjs.com/impatient-js)
* [You don't know JS](https://github.com/getify/You-Dont-Know-JS)
* [Eloquent Javascript](http://eloquentjavascript.net/)
* [Essential Javascript Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
* [MDN - Mozilla Developer Network](https://developer.mozilla.org/de/)
* [CSS-Tricks](https://css-tricks.com/)
* [Netflix UI Engineers Youtube Channel](https://www.youtube.com/channel/UCGGRRqAjPm6sL3-WGBDnKJA)
* [Don't make me think - Web Usability](https://www.amazon.de/Dont-make-think-Usability-intuitive/dp/3826697057/ref=sr_1_1?ie=UTF8&qid=1476888649&sr=8-1&keywords=dont+make+me+think)

## Tools

* [git](https://git-scm.com/)
* [Atlassian git Tutorials](https://www.atlassian.com/git/tutorials/)
* [Interactive git Cheatsheet](http://ndpsoftware.com/git-cheatsheet.html)
* [Composer - Dependency Manager For PHP](https://getcomposer.org/)
* [Packagist - The PHP Package Repository](https://packagist.org/)
* [Gradle Guide](https://gradle.org/guides/)
* [PHPStan](https://github.com/phpstan/phpstan)
* [PHPUnit](https://phpunit.de/)
* [Introduction to PHP Unit](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/)
* [Twelve Benefits of Writing Unit Tests First](http://sd.jtimothyking.com/2006/07/11/twelve-benefits-of-writing-unit-tests-first/)
* [A Beginner's Guide to npm](https://www.sitepoint.com/beginners-guide-node-package-manager/)

## Environment

* [Basic UNIX commands](http://mally.stanford.edu/~sr/computing/basic-unix.html)
* [Explain Shell - Let it explain you what's going on](http://explainshell.com/)
* [Effective DevOps](http://shop.oreilly.com/product/0636920039846.do)
* [Docker Docs](https://docs.docker.com/)
* [Docker Swarms Introduction](https://docs.docker.com/get-started/part4/)
* [What is Kubernetes](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/)
* [Request routing with Traefik](https://doc.traefik.io/traefik/getting-started/concepts/)
* [How to write Ansible Playbooks](https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks)
* [Ansible Docs](https://docs.ansible.com/)
* [Artifactory User Guide](https://www.jfrog.com/confluence/pages/viewpage.action?pageId=46107472)

## Persistence

* [SQL Performance Explained - Short and useful book about SQL performance for developers](https://www.amazon.de/SQL-Performance-Explained-Entwickler-SQL-Performance/dp/3950307818)
* [Use the index, Luke - a guide to database performance for developers](http://use-the-index-luke.com/)
* [The Little Redis Book](https://github.com/karlseguin/the-little-redis-book)

## Monitoring & Alerting

* [How to monitor system metrics with the TICK stack - Can also be used for gathering business metrics](https://www.digitalocean.com/community/tutorials/how-to-monitor-system-metrics-with-the-tick-stack-on-centos-7)
* [How to setup & use Icinga2](https://www.digitalocean.com/community/tutorials/how-to-monitor-hosts-and-services-with-icinga-on-ubuntu-16-04)
* [Using InfluxDB with Grafana](http://docs.grafana.org/features/datasources/influxdb/)
* [Grafana Docs](http://docs.grafana.org/)
* [InfluxDB Docs](http://docs.influxdata.com/influxdb/v1.6/)

## Apache Kafka

* [Kafka as a Platform: the Ecosystem from the Ground Up](https://www.youtube.com/watch?v=WpfJ86_DYfY)
* [Apache Kafka in a Nutshell](https://medium.com/swlh/apache-kafka-in-a-nutshell-5782b01d9ffb)
* [Why Avro for Kafka Data?](https://www.confluent.de/blog/avro-kafka-data/)
* [Deal with Failure in an Event-Driven System](https://www.confluent.io/blog/using-kafka-merge-purge-to-simplify-kafka-failures/)

## Processes & Culture

* [The Agile Manifesto](http://agilemanifesto.org/)
* [Agile Retrospectives](https://pragprog.com/titles/dlret/agile-retrospectives/)
* [The Phoenix Project](https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592)
* [Team Geek - A Software Developer's Guide to Working Well with Others](https://www.amazon.com/Team-Geek-Software-Developers-Working/dp/1449302440/)

## Information Security

* [OWASP - Open Web Application Security Project](https://www.owasp.org/index.php/Main_Page)
* [A Gentle Introduction to Application Security](https://paragonie.com/blog/2015/08/gentle-introduction-application-security)
* [Juice Shop - A vulnerable web app to play around](https://github.com/bkimminich/juice-shop)

## Best Practices

* [The Best Code is No Code At All](https://blog.codinghorror.com/the-best-code-is-no-code-at-all/)
* [The Pragmatic Programmer](https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/)
* [The Clean Coder](https://www.oreilly.com/library/view/the-clean-coder/9780132542913/)
* [Simple Made Easy](https://www.youtube.com/watch?v=rI8tNMsozo0)
* [A Philosophy of Software Design](https://www.youtube.com/watch?v=bmSAYlu0NcY)
* [Refactoring: Improving the Design of Existing Code](https://www.amazon.com/exec/obidos/ASIN/0201485672/codihorr-20)
* [The full stackoverflow developer](https://www.christianheilmann.com/2015/07/17/the-full-stackoverflow-developer/)
* [Measure anything, measure everything](https://codeascraft.com/2011/02/15/measure-anything-measure-everything/)
* Go to a local user group
* Read open-source code on [GitHub](https://www.github.com)
* Never stop building stuff



On a side note: [We are searching for talented people to join our various teams of developers in multiple locations](https://karriere.flyeralarm.com/jobs)","This document is intended as a guidance for new developers joining our teams at
[FLYERALARM](https://flyeralarm.com). Because we think it might help others as
well we open-sourced it. If you know something that's missing feel free to send
us a Pull-Request."
3375,Canonical actor model implementation for .NET with local + distributed actors in C# and F#.,"# Akka.NET

![Akka.NET logo](docs/shfb/icons/AkkaNetLogo.Normal.png)

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/akkadotnet/akka.net?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) <br/>

**Akka.NET** is a professional-grade port of the popular Java/Scala framework [Akka](http://akka.io) distributed actor framework to .NET.

Akka.NET is a [.NET Foundation](https://dotnetfoundation.org/) project.

![.NET Foundation Logo](docs/images/dotnetfoundationhorizontal.svg)

## Build Status

| Stage                                   | Status                                                                                                                                                                                                                                                                |
|-------------------------------------    |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    |
| Build                                   | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=Windows%20Build)](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                                       |
| NuGet Pack                              | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=NuGet%20Pack)](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                                          |
| .NET Framework Unit Tests               | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Framework%20Unit%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)           |
| .NET Framework MultiNode Tests          | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Framework%20Multi-Node%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)     |
| .NET Core (Windows) Unit Tests          | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Unit%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                |
| .NET Core (Linux) Unit Tests            | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Unit%20Tests%20(Linux))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                  |
| .NET Core (Windows) MultiNode Tests     | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Multi-Node%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)          |
| .NET Core (Linux) MultiNode Tests       |                                                                                                                                                                                                                                                                       |
| Docs                                    | [![Build Status](https://dev.azure.com/petabridge/akkadotnet-tools/_apis/build/status/Akka.NET%20Docs?branchName=dev)](https://dev.azure.com/petabridge/akkadotnet-tools/_build/latest?definitionId=82&branchName=dev)                                                |


### Documentation and resources

#### [Akka.NET Project Site](http://getakka.net)


### Install Akka.NET via NuGet

If you want to include Akka.NET in your project, you can [install it directly from NuGet](https://www.nuget.org/packages/Akka)

To install Akka.NET Distributed Actor Framework, run the following command in the Package Manager Console

```
PM> Install-Package Akka
PM> Install-Package Akka.Remote
```

And if you need F# support:

```
PM> Install-Package Akka.FSharp
```

## Builds
Please see [Building Akka.NET](http://getakka.net/community/building-akka-net.html).

To access nightly Akka.NET builds, please [see the instructions here](http://getakka.net/community/getting-access-to-nightly-builds.html).

## Support
If you need help getting started with Akka.NET, there's a number of great community resources online:

* Subscribe to the Akka.NET project feed on Twitter: https://twitter.com/AkkaDotNet  (@AkkaDotNet)
* Join the Akka.NET project Gitter chat: https://gitter.im/akkadotnet/akka.net
* Ask Akka.NET questions on Stack Overflow: http://stackoverflow.com/questions/tagged/akka.net

If you and your company are interested in getting professional Akka.NET support, you can [contact Petabridge for dedicated Akka.NET support](https://petabridge.com/).
","Akka.NET** is a professional-grade port of the popular Java/Scala framework
[Akka](http://akka.io) distributed actor framework to.NET. It is a [.NET
Foundation](https://dotnetfoundation.org/) project."
739,A distributed knowledge graph store,"# Akutan

[![Build Status](https://travis-ci.com/eBay/akutan.svg?branch=master)](https://travis-ci.com/eBay/akutan)
[![GoDoc](https://godoc.org/github.com/ebay/akutan/src/github.com/ebay/akutan?status.svg)](https://godoc.org/github.com/ebay/akutan/src/github.com/ebay/akutan)

There's a blog post that's a [good introduction to Akutan](https://www.ebayinc.com/stories/blogs/tech/beam-a-distributed-knowledge-graph-store/).

Akutan is a distributed knowledge graph store, sometimes called an RDF store or a
triple store. Knowledge graphs are suitable for modeling data that is highly
interconnected by many types of relationships, like encyclopedic information
about the world. A knowledge graph store enables rich queries on its data, which
can be used to power real-time interfaces, to complement machine learning
applications, and to make sense of new, unstructured information in the context
of the existing knowledge.

How to model your data as a knowledge graph and how to query it will feel a bit
different for people coming from SQL, NoSQL, and property graph stores. In a
knowledge graph, data is represented as a single table of *facts*, where each
fact has a *subject*, *predicate*, and *object*. This representation enables the
store to sift through the data for complex queries and to apply inference rules
that raise the level of abstraction. Here's an example of a tiny graph:

subject         | predicate | object
----------------|-----------|-----------------
`<John_Scalzi>` | `<born>`  | `<Fairfield>`
`<John_Scalzi>` | `<lives>` | `<Bradford>`
`<John_Scalzi>` | `<wrote>` | `<Old_Mans_War>`

To learn about how to represent and query data in Akutan, see
[docs/query.md](docs/query.md).

Akutan is designed to store large graphs that cannot fit on a single server. It's
scalable in how much data it can store and the rate of queries it can execute.
However, Akutan serializes all changes to the graph through a central log, which
fundamentally limits the total rate of change. The rate of change won't improve
with a larger number of servers, but a typical deployment should be able to
handle tens of thousands of changes per second. In exchange for this limitation,
Akutan's architecture is a relatively simple one that enables many features. For
example, Akutan supports transactional updates and historical global snapshots. We
believe this trade-off is suitable for most knowledge graph use cases, which
accumulate large amounts of data but do so at a modest pace. To learn more about
Akutan's architecture and this trade-off, see
[docs/central_log_arch.md](docs/central_log_arch.md).

Akutan isn't ready for production-critical deployments, but it's useful today for
some use cases. We've run a 20-server deployment of Akutan for development
purposes and off-line use cases for about a year, which we've most commonly
loaded with a dataset of about 2.5 billion facts. We believe Akutan's current
capabilities exceed this capacity and scale; we haven't yet pushed Akutan to its
limits. The project has a good architectural foundation on which additional
features can be built and higher performance could be achieved.

Akutan needs more love before it can be used for production-critical deployments.
Much of Akutan's code consists of high-quality, documented, unit-tested modules,
but some areas of the code base are inherited from Akutan's earlier prototype days
and still need attention. In other places, some functionality is lacking before
Akutan could be used as a critical production data store, including deletion of
facts, backup/restore, and automated cluster management. We have filed
GitHub issues for these and a few other things. There are also areas where Akutan
could be improved that wouldn't necessarily block production usage. For example,
Akutan's query language is not quite compatible with Sparql, and its inference
engine is limited.

So, Akutan has a nice foundation and may be useful to some people, but it also
needs additional love. If that's not for you, here are a few alternative
open-source knowledge and property graph stores that you may want to consider
(we have no affiliation with these projects):

- [Blazegraph](https://github.com/blazegraph/database): an RDF store. Supports
  several query languages, including SPARQL and Gremlin. Disk-based,
  single-master, scales out for reads only. Seems unmaintained. Powers
  <https://query.wikidata.org/>.
- [Dgraph](https://github.com/dgraph-io/dgraph): a triple-oriented property
  graph store. GraphQL-like query language, no support for SPARQL. Disk-based,
  scales out.
- [Neo4j](https://github.com/neo4j/neo4j): a property graph store. Cypher query
  language, no support for SPARQL. Single-master, scales out for reads only.
- See also Wikipedia's
  [Comparison of Triplestores](https://en.wikipedia.org/wiki/Comparison_of_triplestores)
  page.

The remainder of this README describes how to get Akutan up and running. Several
documents under the `docs/` directory describe aspects of Akutan in more
detail; see [docs/README.md](docs/README.md) for an overview.

## Installing dependencies and building Akutan

Akutan has the following system dependencies:
 - It's written in [Go](https://golang.org/). You'll need v1.11.5 or newer.
 - Akutan uses [Protocol Buffers](https://developers.google.com/protocol-buffers/)
   extensively to encode messages for [gRPC](https://grpc.io/), the log of data
   changes, and storage on disk. You'll need protobuf version 3. We reccomend
   3.5.2 or later. Note that 3.0.x is the default in many Linux distributions, but
   doesn't work with the Akutan build.
 - Akutan's Disk Views store their facts in [RocksDB](https://rocksdb.org/).

On Mac OS X, these can all be installed via [Homebrew](https://brew.sh/):

	$ brew install golang protobuf rocksdb zstd

On Ubuntu, refer to the files within the [docker/](docker/) directory for
package names to use with `apt-get`.

After cloning the Akutan repository, pull down several Go libraries and additional
Go tools:

	$ make get

Finally, build the project:

	$ make build

## Running Akutan locally

The fastest way to run Akutan locally is to launch the in-memory log store:

	$ bin/plank

Then open another terminal and run:

	$ make run

This will bring up several Akutan servers locally. It starts an API server that
listens on localhost for gRPC requests on port 9987 and for HTTP requests on
port 9988, such as <http://localhost:9988/stats.txt>.

The easiest way to interact with the API server is using `bin/akutan-client`. See
[docs/query.md](docs/query.md) for examples. The API server exposes the
`FactStore` gRPC service defined in
[proto/api/akutan_api.proto](proto/api/akutan_api.proto).

## Deployment concerns

### The log

Earlier, we used `bin/plank` as a log store, but this is unsuitable for real
usage! Plank is in-memory only, isn't replicated, and by default, it only
keeps 1000 entries at a time. It's only meant for development.

Akutan also supports using [Apache Kafka](https://kafka.apache.org/) as its log
store. This is recommended over Plank for any deployment. To use Kafka, follow the
[Kafka quick start](https://kafka.apache.org/quickstart) guide to install
Kafka, start ZooKeeper, and start Kafka. Then create a topic called ""akutan""
(not ""test"" as in the Kafka guide) with `partitions` set to 1. You'll want to
configure Kafka to synchronously write entries to disk.

To use Kafka with Akutan, set the `akutanLog`'s `type` to `kafka` in your Akutan
configuration (default: `local/config.json`), and update the `locator`'s
`addresses` accordingly (Kafka uses port 9092 by default). You'll need to clear
out Akutan's Disk Views' data before restarting the cluster. The Disk Views
by default store their data in $TMPDIR/rocksdb-akutan-diskview-{space}-{partition}
so you can delete them all with `rm -rf $TMPDIR/rocksdb-akutan-diskview*`

### Docker and Kubernetes

This repository includes support for running Akutan inside
[Docker](https://www.docker.com/) and
[Minikube](https://kubernetes.io/docs/setup/minikube/). These environments can
be tedious for development purposes, but they're useful as a step towards a
modern and robust production deployment.

See `cluster/k8s/Minikube.md` file for the steps to build and deploy Akutan
services in `Minikube`. It also includes the steps to build the Docker images.

### Distributed tracing

Akutan generates distributed [OpenTracing](https://opentracing.io/) traces for use
with [Jaeger](https://www.jaegertracing.io/). To try it, follow the
[Jaeger Getting Started Guide](https://www.jaegertracing.io/docs/getting-started/#all-in-one-docker-image)
for running the all-in-one Docker image. The default `make run` is configured to
send traces there, which you can query at <http://localhost:16686>. The Minikube
cluster also includes a Jaeger all-in-one instance.

## Development

### VS Code

You can use whichever editor you'd like, but this repository contains some
configuration for [VS Code](https://code.visualstudio.com/Download). We
suggest the following extensions:
 - [Go](https://marketplace.visualstudio.com/items?itemName=ms-vscode.Go)
 - [Code Spell Checker](https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker)
 - [Rewrap](https://marketplace.visualstudio.com/items?itemName=stkb.rewrap)
 - [vscode-proto3](https://marketplace.visualstudio.com/items?itemName=zxh404.vscode-proto3)
 - [Docker](https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker)

Override the default settings in `.vscode/settings.json` with
[./vscode-settings.json5](./vscode-settings.json5).

### Test targets

The `Makefile` contains various targets related to running tests:

Target       | Description
------------ | -----------
`make test`  | run all the akutan unit tests
`make cover` | run all the akutan unit tests and open the web-based coverage viewer
`make lint`  | run basic code linting
`make vet`   | run all static analysis tests including linting and formatting

## License Information

Copyright 2019 eBay Inc.

Primary authors: Simon Fell, Diego Ongaro, Raymond Kroeker, Sathish Kandasamy

Licensed under the Apache License, Version 2.0 (the ""License""); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at <https://www.apache.org/licenses/LICENSE-2.0>.

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.


----
**Note** the project was renamed to Akutan in July 2019.
","Akutan is a distributed knowledge graph store. It's designed to store large
graphs that cannot fit on a single server. The project has a good architectural
foundation on which additional features can be built. Akutan isn't ready for
production-critical deployments, but it's useful today."
453,"🔥一个高效的多媒体支持操作库，可多方面的简单配置操作相册、拍照、录制、录音等功能。也支持配套使用的展示图片、视频、音频的九宫格功能。 （An efficient multimedia support operation library, can be a variety of simple configuration operation album, photo, recording, recording and other functions.Also support supporting the use of the display of pictures, video, audio of the nine grid function.）","# AlbumCameraRecorder

[![MinSdk](https://img.shields.io/badge/MinSdk-16-blue.svg)](https://developer.android.com/about/versions/android-4.1)
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/LICENSE)

## 目前已经投入到正式项目中使用。
## 有任何建议或者想添加的功能，都可提在Issues

## 中文
一个高效的多媒体支持操作库，可多方面的简单配置操作拍照、相册、录制、录音等功能。

也支持配套使用的展示图片、视频、音频的九宫格功能。


本开源库的部分代码来自[Matisse](https://github.com/zhihu/Matisse).

非常感谢知乎提供的这么棒的开源项目！    

## 特性
 - 支持自定义样式.支持更换里面的相关按钮.
 - 支持相册、录制、录音等多个嵌套功能，并且也可以通过配置只设置显示一个.
 - 丰富的回调接口和调试信息,可利用现有API实现丰富的效果.

## X版本分支
 - [AndroidX库版本](https://github.com/zhongjhATC/AlbumCameraRecorder/tree/androidx).
 
 
## 该分支已经完全弃用，以后只维护X版本了
 - 该分支不支持Android Q版本后的选择图片，如果您的项目SDK版本是28那是完全够用的.
 
 
## 引入

#### Step 1. Add the JitPack repository to your build file

	allprojects {
		repositories {
			...
			maven { url 'https://www.jitpack.io' }
		}
	}
#### Step 2. Add the dependency

	dependencies {
	     implementation 'com.github.zhongjhATC.AlbumCameraRecorder:albumCameraRecorderCommon:1.0.18'        // 公共库，必须使用此库
         implementation 'com.github.zhongjhATC.AlbumCameraRecorder:multilibrary:1.0.18'      // 核心lib，调用显示相册、录屏、录音等
         implementation 'com.github.zhongjhATC.AlbumCameraRecorder:progresslibrary:1.0.18' // 配套使用，主要用于获取数据后进行相关显示，相应的上传进度显示，如果你只需要获取照片录像录音等数据，自行写获取后呈现方式，可以不需要是用这个
	}

## 快照
![](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/Demonstration.gif)
![](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/DemonstrationShowImg.png)



## 市场上常用手机兼容测试
100%通过[兼容测试报告](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/WeTest.md).
![](https://raw.githubusercontent.com/zhongjhATC/AlbumCameraRecorder/master/wetest/5.jpg)

## 使用   
#### 启动多媒体相关功能
 
        // 拍摄有关设置
        CameraSetting cameraSetting = new CameraSetting();
        cameraSetting.mimeTypeSet(MimeType.ofAll());// 支持的类型：图片，视频

        // 相册
        AlbumSetting albumSetting = new AlbumSetting(true)
                .mimeTypeSet(MimeType.ofAll())// 支持的类型：图片，视频
                .countable(true)// 是否显示多选图片的数字
                .addFilter(new GifSizeFilter(320, 320, 5 * Filter.K * Filter.K))// 自定义过滤器
                .originalEnable(true)// 开启原图
                .maxOriginalSize(10); // 最大原图size,仅当originalEnable为true的时候才有效

        // 录音机
        RecorderSetting recorderSetting = new RecorderSetting();

        // 全局
        GlobalSetting globalSetting = MultiMediaSetting.from(MainSimpleActivity.this).choose(MimeType.ofAll());

        if (mBinding.cbAlbum.isChecked())
            // 开启相册功能
            globalSetting.albumSetting(albumSetting);
        if (mBinding.cbCamera.isChecked())
            // 开启拍摄功能
            globalSetting.cameraSetting(cameraSetting);
        if (mBinding.cbRecorder.isChecked())
            // 开启录音功能
            globalSetting.recorderSetting(recorderSetting);

        globalSetting
                .setOnMainListener(errorMessage -> Toast.makeText(MainSimpleActivity.this.getApplicationContext(), ""自定义失败信息：录音已经达到上限"", Toast.LENGTH_LONG).show())
                .allStrategy(new SaveStrategy(true, ""com.zhongjh.cameraapp.fileprovider"", ""AA/test""))// 设置路径和7.0保护路径等等
                .imageEngine(new Glide4Engine())    // for glide-V4
                .maxSelectablePerMediaType(5 - alreadyImageCount, 1 - alreadyVideoCount, 1 - alreadyAudioCount)// 最大10张图片或者最大1个视频
                .forResult(REQUEST_CODE_CHOOSE);

#### 获取相关返回的数据

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode != RESULT_OK)
            return;
        switch (requestCode) {
            case REQUEST_CODE_PREVIEW:
                ```
            case REQUEST_CODE_CHOOSE:
                // 获取类型，根据类型设置不同的事情
                switch (MultiMediaSetting.obtainMultimediaType(data)) {
                    case MultimediaTypes.PICTURE:
                        // 图片
                        List<String> path = MultiMediaSetting.obtainPathResult(data);
                        mBinding.mplImageList.addImagesStartUpload(path);
                        break;
                    case MultimediaTypes.VIDEO:
                        // 录像
                        List<String> videoPath = MultiMediaSetting.obtainPathResult(data);
                        mBinding.mplImageList.addVideoStartUpload(videoPath);
                        break;
                    case MultimediaTypes.AUDIO:
                        // 语音
                        RecordingItem recordingItem = MultiMediaSetting.obtainRecordingItemResult(data);
                        mBinding.mplImageList.addAudioStartUpload(recordingItem.getFilePath(), recordingItem.getLength());
                        break;
                    case MultimediaTypes.BLEND:
                        // 混合类型，意思是图片可能跟录像在一起.
                        mBinding.mplImageList.addImagesStartUpload(MultiMediaSetting.obtainPathResult(data));
                        break;
                }
                break;
        }
    }

#### 如果你需要用到九宫格展览数据，具体可以看[相关代码](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/app/src/main/java/com/zhongjh/cameraapp/MainSeeActivity.java).

#### 相关API,更多API和支持持续丰富加入
 - [调用多媒体的公共配置API](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/multilibrary/src/main/java/com/zhongjh/albumcamerarecorder/settings/api/GlobalSettingApi.java).
 - [调用多媒体的相册配置API](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/multilibrary/src/main/java/com/zhongjh/albumcamerarecorder/settings/api/AlbumSettingApi.java).
 - [调用多媒体的录制配置API](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/multilibrary/src/main/java/com/zhongjh/albumcamerarecorder/settings/api/CameraSettingApi.java).
 - [调用多媒体的录音配置API](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/multilibrary/src/main/java/com/zhongjh/albumcamerarecorder/settings/api/RecorderSettingApi.java).
 - [多媒体UI相关属性配置](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/multilibrary/src/main/res/values/styles.xml)

如果你使用展示的九宫库，那么下面这些api对你也有用
 - [九宫格相关API](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/progresslibrary/src/main/java/com/zhongjh/progresslibrary/api/MaskProgressApi.java).
 - [九宫格相关事件](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/progresslibrary/src/main/java/com/zhongjh/progresslibrary/listener/MaskProgressLayoutListener.java).
 - [九宫格相关属性，配置UI等等](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/progresslibrary/src/main/res/values/attrs.xml)



## 历史更新
从1.0.1版本开始总结的[历史更新](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/UPDATE.md).

## apk直接体验下载
 - 1.0.0版本，跟当前最新代码版本可能会有稍许不同
![](https://github.com/zhongjhATC/AlbumCameraRecorder/blob/master/qrcode.png)

 - 链接下载地址：https://fir.im/s9b6?release_id=5c84dcd3ca87a807f7ef5181&fir_source=%E7%89%88%E6%9C%AC1&fir_campaign=%E7%89%88%E6%9C%AC1

## 喜欢的麻烦在顶部点个star
","summarize: # AlbumCameraRecorder. Add the JitPack repository to your build file.
Add a dependency on Android 4.1 or later. Add an app dependency on Google Play
Services. Finally, test the app with the latest version of Android."
2903,Algebraic graphs,"# Algebraic graphs

[![Hackage version](https://img.shields.io/hackage/v/algebraic-graphs.svg?label=Hackage)](https://hackage.haskell.org/package/algebraic-graphs) [![Build status](https://img.shields.io/github/workflow/status/snowleopard/alga/ci/master.svg)](https://github.com/snowleopard/alga/actions)

**Alga** is a library for algebraic construction and manipulation of graphs in Haskell. See
[this Haskell Symposium paper](https://github.com/snowleopard/alga-paper) and the
corresponding [talk](https://www.youtube.com/watch?v=EdQGLewU-8k) for the motivation
behind the library, the underlying theory and implementation details. There is also a
[Haskell eXchange talk](https://skillsmatter.com/skillscasts/10635-algebraic-graphs),
and a [tutorial](https://nobrakal.github.io/alga-tutorial) by Alexandre Moine.

## Main idea

Consider the following data type, which is defined in the top-level module
[Algebra.Graph](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html)
of the library:

```haskell
data Graph a = Empty | Vertex a | Overlay (Graph a) (Graph a) | Connect (Graph a) (Graph a)
```

We can give the following semantics to the constructors in terms of the pair **(V, E)** of graph *vertices* and *edges*:

* `Empty` constructs the empty graph **(∅, ∅)**.
* `Vertex x` constructs a graph containing a single vertex, i.e. **({x}, ∅)**.
* `Overlay x y` overlays graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey)**.
* `Connect x y` connects graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey ∪ Vx × Vy)**.

Alternatively, we can give an algebraic semantics to the above graph construction primitives by defining the following
type class and specifying a set of laws for its instances (see module [Algebra.Graph.Class](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html)):

```haskell
class Graph g where
    type Vertex g
    empty   :: g
    vertex  :: Vertex g -> g
    overlay :: g -> g -> g
    connect :: g -> g -> g
```

The laws of the type class are remarkably similar to those of a [semiring](https://en.wikipedia.org/wiki/Semiring),
so we use `+` and `*` as convenient shortcuts for `overlay` and `connect`, respectively:

* (`+`, `empty`) is an idempotent commutative monoid.
* (`*`, `empty`) is a monoid.
* `*` distributes over `+`, that is: `x * (y + z) == x * y + x * z` and `(x + y) * z == x * z + y * z`.
* `*` can be decomposed: `x * y * z == x * y + x * z + y * z`.

This algebraic structure corresponds to *unlabelled directed graphs*: every expression represents a graph, and every
graph can be represented by an expression. Other types of graphs (e.g. undirected) can be obtained by modifying the
above set of laws. Algebraic graphs provide a convenient, safe and powerful interface for working with graphs in Haskell,
and allow the application of equational reasoning for proving the correctness of graph algorithms.

To represent *non-empty graphs*, we can drop the `Empty` constructor -- see module
[Algebra.Graph.NonEmpty](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html).

To represent *edge-labelled graphs*, we can switch to the following data type, as
explained in my [Haskell eXchange 2018 talk](https://skillsmatter.com/skillscasts/12361-labelled-algebraic-graphs):

```haskell
data Graph e a = Empty
               | Vertex a
               | Connect e (Graph e a) (Graph e a)
```

Here `e` is the type of edge labels. If `e` is a monoid `(<+>, zero)` then graph overlay can be recovered
as `Connect zero`, and `<+>` corresponds to *parallel composition* of edge labels.

## How fast is the library?

Alga can handle graphs comprising millions of vertices and billions of edges in a matter of seconds, which is fast
enough for many applications. We believe there is a lot of potential for improving the performance of the library, and
this is one of our top priorities. If you come across a performance issue when using the library, please let us know.

Some preliminary benchmarks can be found [here](https://github.com/haskell-perf/graphs).

## Blog posts

The development of the library has been documented in the series of blog posts:
* Introduction: https://blogs.ncl.ac.uk/andreymokhov/an-algebra-of-graphs/
* A few different flavours of the algebra: https://blogs.ncl.ac.uk/andreymokhov/graphs-a-la-carte/
* Graphs in disguise or How to plan you holiday using Haskell: https://blogs.ncl.ac.uk/andreymokhov/graphs-in-disguise/
* Old graphs from new types: https://blogs.ncl.ac.uk/andreymokhov/old-graphs-from-new-types/

## Algebraic graphs in other languages

Algebraic graphs were implemented in a few other languages, including
[Agda](http://github.com/algebraic-graphs/agda),
[F#](https://github.com/algebraic-graphs/fsharp),
[Scala](http://github.com/algebraic-graphs/scala) and
[TypeScript](https://github.com/algebraic-graphs/typescript).
","Alga is a library for algebraic construction and manipulation of graphs in
Haskell. It provides a safe and powerful interface for working with graphs. It
can also be used to prove correctness of graph algorithms. The library is
available on Hackage and GitHub."
654,All Subjects of 42 School,"# All subjects of 42 School (Paris)

__All these subjects are the exclusive property of 42 School.__<br />
Any reproduction, use outside the school context of 42 or without authorization is prohibited and may be treated as copyright infringement.

__If you want to see corrections files for these projects, go [HERE](https://github.com/Binary-Hackers/42_Corrections).__


## Norme 42
- [Norme 2.0.0](https://github.com/BenjaminSouchet/42_Subjects/blob/master/04_Norme/norme_2_0_0.pdf)
- [Norme 2.0.1](https://github.com/BenjaminSouchet/42_Subjects/blob/master/04_Norme/norme_2_0_1.pdf)

## Projects

### Global
- [42 Commandements (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/42_commandements.pdf)
- [Piscine Reloaded (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/piscine_reloaded.pdf)
- [Libft (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/libft.pdf)
- [Fillit (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/fillit.pdf)
- [Get Next Line (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/get_next_line.pdf)

### Unix branch
- [Ft_ls (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_ls.pdf)
- [minishell (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/minishell.pdf)
- [ft_select (Optional Project) (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_select.pdf)
- [21sh (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/21sh.pdf)
- [Taskmaster (Optional Project) (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/taskmaster.pdf)
- [42sh (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/42sh.pdf)
- [Malloc (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/malloc.pdf)
- [ft_script (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_script.pdf)
- [Philosophers (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/philosophers.pdf)
- [Nm-otool (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/nm-otool.pdf)
- [Dr Quine (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/dr_quine.pdf)
- [Famine (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/famine.pdf)
- [LibftASM (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/asm_lib.pdf)
- [Root-me | App-Systeme (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/root_me_app_systeme.pdf)
- [Root-me | Cracking (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/root_me_cracking.pdf)
- [Snow Crash (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/snow_crash.pdf)
- [RainFall (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/Rain-Fall.pdf)
- [strace (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_strace.pdf)
- [GBmu (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/GBmu.pdf)
- [ft_linux (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_linux.pdf)
- [little-penguin-1 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/little_penguin_1.pdf)
- [Process and Memory (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_process_and_mem.pdf)
- [Drivers and Interrupts (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_driver_and_keyboard.pdf)
- [Filesystem (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_filesystem.pdf)
- [KFS-1 (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_1.pdf)
- [KFS-2 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_2.pdf)
- [KFS-3 (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_3.pdf)
- [KFS-4 (T3) _NEW_](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_4.pdf)
- [Woody Woodpacker (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/woody_woodpacker.pdf)
- [ft_p (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_p.pdf)
- [IRC (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_irc.pdf)
- [Matt Daemon (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/Matt_daemon.pdf)
- [Lem-ipc (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lemipc.pdf)
- [Zappy (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/zappy.pdf)
- [ft_ping (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_ping.pdf)
- [ft_traceroute (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_traceroute.pdf)
- [ft_nmap (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_nmap.pdf)

### Algorithmic branch
- [Ft_printf (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/ft_printf.pdf)
- [Push Swap (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/push_swap.pdf)
- [Filler (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/filler.pdf)
- [Lem_in (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/lem-in.pdf)
- [Mod1 (Optional Project) (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/mod1.pdf)
- [Corewar (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/corewar.pdf)
- [Corewar Championship (Optional Project) (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/corewar-championship.pdf)
- [ComputorV1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/computorv1.pdf)
- [Expert System (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/expertsystem.pdf)
- [N-puzzle (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/npuzzle.pdf)
- [Ft_linear_regression (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/ft_linear_regression.pdf)
- [Rubik (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/rubik.pdf)
- [KrpSim (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/krpsim.pdf)
- [Gomoku (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/gomoku.pdf)

### Graphic branch
- [FDF (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/fdf.pdf)
- [Fract'Ol (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/fract_ol.pdf)
- [Wolf3D (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/wolf3d.pdf)
- [RTv1 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/rtv1.pdf)
- [RT (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/rt.pdf)
- [Scop (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/scop.pdf)
- [42run (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/42run.pdf)
- [HumanGL (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/humangl.pdf)
- [Particle System (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/ParticleSystem.pdf)

### Web branch
- [Camagru (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/camagru.pdf)
- [Matcha (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/matcha.pdf)
- [Hypertube (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/hypertube.pdf)
- [Friends with Benefits (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/friends_with_benefits.pdf)
- [Red Tetris (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/red_tetris.pdf)
- [Darkly (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/darkly.pdf)

### OCaml branch
- [H42N42 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/subject.pdf)
- [ft_turing (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/ft_turing.pdf)
- [ft_ality (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/ft_ality.pdf)

### Android / iOS branch
- [Swifty Companion (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/swifty-companion.pdf)
- [Swifty Proteins (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/swifty-protein.pdf)
- [ft_hangouts (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/ft_hangouts.pdf)


### C++ branch
- [Abstract VM (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/abstract-vm.pdf)
- [Nibbler (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/nibbler.pdf)
- [Bomberman (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/bomberman.pdf)

### Unity branch
- [XV (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/08_Unity/XV.pdf)
- [In the Shadows (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/08_Unity/In_the_shadow.pdf)

### Others
- [cloud-1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/cloud-1.pdf)
- [roger-skyline-1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/roger-skyline-1.pdf)
- [roger-skyline-2 (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/roger-skyline-2.pdf)
- [Docker (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/docker.pdf)
- [Projet Libre (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/ProjetLibre.pdf)

## Piscines

- [C (Languages EN & FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/C)
- [C++ (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/CPP)
- [PHP (T1)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/PHP)
- [Python-Django (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Python-Django)
- [Ocaml (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/OCaml)
- [Ruby On Rails (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Ruby_On_Rails)
- [Swift iOS (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/iOS_Swift)
- [Unity (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Unity)

## Rushes

- AlCu (Not Available)
- [Alum1](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/alum1.pdf)
- [Arkanoid](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/arkanoid.pdf)
- [Carnifex (LISP)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/Carniflex.pdf)
- [Cluedo (Prolog)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/cluedo.pdf)
- [Domino](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/Domino.pdf)
- [Factrace](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/factrace.pdf)
- [Hotrace](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/hotrace.pdf)
- [Introduction to iOS](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/sujet_ios.pdf)
- [Introduction to Wordpress](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/wordpress.pdf)
- [LLDB](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/LLDB.pdf)
- [Mexican Standoff](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/mexican_standoff.pdf)
- [Puissance 4](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/puissance4.pdf)
- Rage Against The aPi (Not Available)
- Rush admin sys et réseau 0 (Not Available)
- Rush admin sys et réseau 1 (Not Available)
- [wong_kar_wai (2048)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/wong_kar_wai_2048.pdf)
- [YASL](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/yasl.pdf)

## Exam C Beginner

- [See all subjects (Langs : EN / FR / RO)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/03_Exam_C)

## Others

- [Peer-Evaluation (Langs : EN / FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/05_Others/Peer-Evaluation)
- [Vogsphere Manual (Langs : EN / FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/05_Others/Vogsphere)
","All these subjects are the exclusive property of 42 School. Any reproduction,
use outside the school context of 42 or without authorization is prohibited and
may be treated as copyright infringement. If you want to see corrections files
for these projects, go [HERE](https://github.com/Binary-Hackers/42_Corrections)."
721,A fancy terminal browser for the Gemini protocol.,"# Amfora

<img src=""logo.png"" alt=""amphora logo"" width=""30%"">
<h6>Image modified from: amphora by Alvaro Cabrera from the Noun Project</h6>


[![go reportcard](https://goreportcard.com/badge/github.com/makeworld-the-better-one/amfora)](https://goreportcard.com/report/github.com/makeworld-the-better-one/amfora)
[![license GPLv3](https://img.shields.io/github/license/makeworld-the-better-one/amfora)](https://www.gnu.org/licenses/gpl-3.0.en.html)

<a href=""https://raw.githubusercontent.com/makeworld-the-better-one/amfora/master/demo-large.gif"">
<img src=""demo-large.gif"" alt=""Demo GIF"" width=""80%"">
</a>

###### Recording of v1.0.0

Amfora aims to be the best looking [Gemini](https://geminiquickst.art/) client with the most features... all in the terminal. It does not support Gopher or other non-Web protocols - check out [Bombadillo](http://bombadillo.colorfield.space/) for that.

It also aims to be completely cross platform, with full Windows support. If you're on Windows, I would not recommend using the default terminal software. Use [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701) instead, and make sure it [works with UTF-8](https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal). Note that some of the application colors might not display correctly on Windows, but all functionality will still work.

It fully passes Sean Conman's client torture test, as well as the Egsam one.

## Installation

### Binary

Download a binary from the [releases](https://github.com/makeworld-the-better-one/amfora/releases) page. On Unix-based systems you will have to make the file executable with `chmod +x <filename>`. You can rename the file to just `amfora` for easy access, and move it to `/usr/local/bin/`.

On Windows, make sure you click ""Advanced > Run anyway"" after double-clicking, or something like that.

Unix systems can install the desktop entry file to get Amfora to appear when they search for applications:
```bash
curl -sSL https://raw.githubusercontent.com/makeworld-the-better-one/amfora/master/amfora.desktop -o ~/.local/share/applications/amfora.desktop
update-desktop-database ~/.local/share/applications
```

Make sure to click ""Watch"" in the top right, then ""Custom"" > ""Releases"" to get notified about new releases!


### Linux

<a href=""https://repology.org/project/amfora/versions"">
    <img src=""https://repology.org/badge/vertical-allrepos/amfora.svg"" alt=""Packaging status"" align=""right"">
</a>

Amfora is packaged in many Linux distros. It's also on [Scoop](https://scoop.sh/) for Windows users.

### macOS (Homebrew)

If you use [Homebrew](https://brew.sh/), you can install Amfora with:
```
brew install amfora
```
You can update it with:
```
brew upgrade amfora
```

### macOS (MacPorts)

On macOS, Amfora can also be installed through [MacPorts](https://www.macports.org):
```
sudo port install amfora
```
You can update it with:
```
sudo port selfupdate
sudo port upgrade amfora
```
**NOTE:** this installation source is community-maintained. More information [here](https://ports.macports.org/port/amfora/).

### Termux

If you're using [Termux](https://termux.com/) on Android you can't just run Amfora like normal. After installing Amfora, run `pkg install proot`. Then run `termux-chroot` before running the Amfora binary. You can exit out of the chroot after closing Amfora. See [here](https://stackoverflow.com/q/38959067/7361270) for why this is needed.

### From Source

This section is for advanced users who want to install the latest (possibly unstable) version of Amfora.

<details>
<summary>Click to expand</summary>

**Requirements:**
- Go 1.15 or later
- GNU Make

Please note the Makefile does not intend to support Windows, and so there may be issues.

```shell
git clone https://github.com/makeworld-the-better-one/amfora
cd amfora
# git checkout v1.2.3 # Optionally pin to a specific version instead of the latest commit
make # Might be gmake on macOS
sudo make install # If you want to install the binary for all users
```

Because you installed with the Makefile, running `amfora -v` will tell you exactly what commit the binary was built from.

Arch Linux users can also install the latest commit of Amfora from the AUR. It has the package name `amfora-git`, and is maintained by @lovetocode999

```
yay -S amfora-git
```

MacOS users can also use [Homebrew](https://brew.sh/) to install the latest commit of Amfora:

```
brew install --HEAD amfora
```
You can update it with:
```
brew upgrade --fetch-HEAD amfora
```

</details>


## Features / Roadmap
Features in *italics* are in the master branch, but not in the latest release.

- [x] URL browsing with TOFU and error handling
- [x] Tabbed browsing
- [x] Support ANSI color codes on pages, even for Windows
- [x] Styled page content (headings, links)
- [x] Basic forward/backward history, for each tab
- [x] Input (Status Code 10 & 11)
- [x] Multiple charset support (over 55)
- [x] Built-in search (uses geminispace.info by default)
- [x] Bookmarks
- [x] Download pages and arbitrary data
- [x] Theming
  - Check out the [user contributed themes](https://github.com/makeworld-the-better-one/amfora/tree/master/contrib/themes)!
- [x] Proxying
  - Schemes like Gopher or HTTP can be proxied through a Gemini server
- [x] Client certificate support
  - [ ] Full client certificate UX within the client
    - Create transient and permanent certs within the client, per domain
    - Manage and browse them
    - Similar to [Kristall](https://github.com/MasterQ32/kristall)
    - https://lists.orbitalfox.eu/archives/gemini/2020/001400.html
- [x] Subscriptions
  - Subscribing to RSS, Atom, and [JSON Feeds](https://jsonfeed.org/) are all supported
  - So is subscribing to a page, to know when it changes
- [x] Open non-text files in another application
  - [x] Ability to stream content instead of downloading it first
- [x] *Highlighting of preformatted code blocks that list a language in the alt text*
- [ ] Stream support
- [ ] Table of contents for pages
- [ ] Search in pages with <kbd>Ctrl-F</kbd>
- [ ] Persistent history


## Usage & Configuration
Please see [the wiki](https://github.com/makeworld-the-better-one/amfora/wiki) for an introduction on how to use Amfora and configure it.

## Libraries
Amfora ❤️ open source!

- [cview](https://code.rocketnine.space/tslocum/cview) for the TUI
  - It's a fork of [tview](https://github.com/rivo/tview) with PRs merged and active support
  - It uses [tcell](https://github.com/gdamore/tcell) for low level terminal operations
- [Viper](https://github.com/spf13/viper) for configuration and TOFU storing
- [go-gemini](https://github.com/makeworld-the-better-one/go-gemini), my forked and updated Gemini client/server library
- [progressbar](https://github.com/schollz/progressbar)
- [go-humanize](https://github.com/dustin/go-humanize)
- [gofeed](https://github.com/mmcdole/gofeed)
- [chroma](https://github.com/alecthomas/chroma) for source code syntax highlighting
- [clipboard](https://github.com/atotto/clipboard)
- [termenv](https://github.com/muesli/termenv)

## License
This project is licensed under the GPL v3.0. See the [LICENSE](./LICENSE) file for details.
","Amfora aims to be the best looking [Gemini] client with the most features... all
in the terminal. It does not support Gopher or other non-Web protocols - check
out [Bombadillo](http://bombadillo.colorfield.space/) for that. It's also
completely cross platform, with full Windows support."
2919,This is Andrew NG Coursera Handwritten Notes.,"# Andrew NG Notes Collection

**This is the first course of the deep learning specialization at [Coursera](https://www.coursera.org/specializations/deep-learning) which is moderated by [DeepLearning.ai](http://deeplearning.ai/). The course is taught by Andrew Ng.**

**<Span style=""color:red;"">Andrew NG Machine Learning Notebooks  :</span>**  [**Reading**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Machine%20Learning%20notebooks%20By%20Andrew%20NG)   

**<Span style=""color:red;"">Deep learning Specialization Notes in One pdf :</span>**  [**Reading**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20learning%20by%20AndrewNG%20Tutorial%20%20Notes.pdf)

| **Sr No** | **Article Reading**                                          |
| --------- | :----------------------------------------------------------- |
| **1.**    | **[Neural Network Deep Learning](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md)** |
| **2.**    | **[Improving Deep learning Network](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md)** |
| **3.**    | **[Structure of ML Projects](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md)** |
| **4.**    | **[Convolutions Neural Network](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md)** |
| **5.**    | **[Sequence Models](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md)** |

| Sr. No | MOOC LECTURE LINK                                            |
| ------ | ------------------------------------------------------------ |
| 1.     | [**Machine learning by Andrew-NG**](https://www.youtube.com/playlist?list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN) |
|        | **DEEP LEARNING SERIES**                                     |
| 1.     | [**Neural Network and Deep Learning**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Ec-XTbcX1uRg2_u4xOEky0) |
| 2.     | [**Improving deep neural networks: hyperparameter tuning, regularization and optimization**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Hn0vK8co82zjQtt3T2Nkqc) |
| 3.     | [**Structuring Machine Learning Projects**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6E7jZ9sN_xHwSHOdjUxUW_b) |
| 4.     | [**Convolution Neural Network**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF) |
| 5.     | [**Sequence Models**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6F6wUI9tvS_Gw1vaFAx6rd6) |
| 6.     | [**CS230: Deep Learning \| Autumn 2018**](https://www.youtube.com/playlist?list=PLoROMvodv4rOABXSygHTsbvUz4G_YQhOb ) |

## [**1.Neural Network Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md)   

## ![](https://systweak1.vo.llnwd.net/content/wp/systweakblogsnew/uploads_new/2018/03/hidden-layers-in-network.gif)

* **This Notes Give you brief introduction about :** 
  * [**What is neural network? How it's work?**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#what-is-a-neural-network-nn)
  * [**Supervised Learning using Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#neural-networks-basics)
  * [**Shallow Neural Network Design**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#shallow-neural-networks)
  * [**Deep Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#deep-neural-networks)
*  **Notebooks** :
  * Week1 - [**Introduction to deep learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week1)
  * Week2 - [**Neural Networks Basics**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Logistic%20Regression%20with%20a%20Neural%20Network%20mindset.ipynb)
  * Week3 - [**Shallow neural networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Logistic%20Regression%20with%20a%20Neural%20Network%20mindset.ipynb)
  * Week4 - [**Deep Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Building%20your%20Deep%20Neural%20Network%20-%20Step%20by%20Step.ipynb) 

## [**2 Improving Deep learning Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md)

## ![](https://i.pinimg.com/originals/63/62/8f/63628f546ad55fd31091e23c623cb9f5.gif)



* **This Notes Give you introduction about :** 
  * [**Practical aspects of Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#practical-aspects-of-deep-learning)
  * [**Optimization algorithms**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#optimization-algorithms)
  * [**Hyperparameter tuning, Batch Normalization and Programming Frameworks**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#hyperparameter-tuning-batch-normalization-and-programming-frameworks)
* **Notebooks**:
  * Week1 - [**Practical aspects of Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization)
       - Setting up your Machine Learning Application
    - Regularizing your neural network
    - Setting up your optimization problem
  * Week2 - [**Optimization algorithms**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Optimization%20methods.ipynb)
  * Week3 - [**Hyperparameter tuning, Batch Normalization and Programming Frameworks**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization)

## [**3.Structure ML Projects**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md)

![](https://i.pinimg.com/originals/9b/fa/97/9bfa978a4cf40fe2cdf8c710deb9b6f9.png)



* **In This Notes, you can learn about How to Structure Machine Learning Project:**
  * [**Why ML Structure?**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md#ml-strategy-1)
  * [**Error Analysis**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md#ml-strategy-2)
* **Notebooks:**
  * Week1 - [**Introduction to ML Strategy**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Structuring%20Machine%20Learning%20Projects/Week%201%20Quiz%20-%20Bird%20recognition%20in%20the%20city%20of%20Peacetopia%20(case%20study).md)
       - Setting up your goal
    - Comparing to human-level performance
  * Week2 - [**ML Strategy (2)**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Structuring%20Machine%20Learning%20Projects/Week%202%20Quiz%20-%20Autonomous%20driving%20(case%20study).md)
       - Error Analysis
    - Mismatched training and dev/test set
    - Learning from multiple tasks
    - End-to-end deep learning

## [**4.Convolution Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md)

* **Matrix Multiplication Between Image and Kernel Known as *Convolution Operation***

![](https://i.stack.imgur.com/9OZKF.gif)



![](https://cdn-images-1.medium.com/max/600/1*GdxHFaUDbvTXJreKg3S8SQ.gif)







![](https://www.guru99.com/images/tensorflow/082918_1325_ConvNetConv9.gif)



* **In This Notes, you can learn about Brief architecture CNN:**
  * [**Foundations of CNNs**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#foundations-of-cnns)
  * [**Deep convolutional models: case studies**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#deep-convolutional-models-case-studies)
  * [**Object detection**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#object-detection)
  * [**Special applications: Face recognition & Neural style transfer**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#special-applications-face-recognition--neural-style-transfer)
*  **Notebooks :** 
  * Week1 - [**Foundations of Convolutional Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week1/Convolution%20model%20-%20Step%20by%20Step.ipynb)
  * Week2 - [**Deep convolutional models: case studies**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week2/ResNets/Residual%20Networks.ipynb) 
    - **Papers for read:**  
      - [**ImageNet Classification with Deep Convolutional Neural Networks**](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)
      - [**Very Deep Convolutional Networks For Large-Scale Image Recognition**](https://arxiv.org/pdf/1409.1556.pdf)
  * Week3 - [**Object detection**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week3/Car%20detection%20for%20Autonomous%20Driving/Autonomous%20driving%20application%20-%20Car%20detection.ipynb) 
    - **Papers for read:** 
      - [**You Only Look Once: Unified, Real-Time Object Detection**](https://arxiv.org/pdf/1506.02640.pdf)
      - [**YOLO**](https://arxiv.org/pdf/1612.08242.pdf)
  * Week4 - [**Special applications: Face recognition & Neural style transfer**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4) 
    - **Papers for read:** 
      - [**DeepFace**](https://www.cs.toronto.edu/~ranzato/publications/taigman_cvpr14.pdf) ([**Notebook**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4/Face%20Recognition/Face%20Recognition%20for%20the%20Happy%20House.ipynb))
      - [**FaceNet**](https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf)
      - [**Neural Style Transfer**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4/Neural%20Style%20Transfer/Art%20Generation%20with%20Neural%20Style%20Transfer.ipynb)

## [**5.Sequence Models**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md)

![](https://3.bp.blogspot.com/-3Pbj_dvt0Vo/V-qe-Nl6P5I/AAAAAAAABQc/z0_6WtVWtvARtMk0i9_AtLeyyGyV6AI4wCLcB/s1600/nmt-model-fast.gif)

---

* **Vanila RNN**

  ![](https://cdn-images-1.medium.com/max/880/1*xn5kA92_J5KLaKcP7BMRLA.gif)

* **LSTM**

![](https://cdn-images-1.medium.com/max/880/1*goJVQs-p9kgLODFNyhl9zA.gif)

* **GRU**

![](https://cdn-images-1.medium.com/max/880/1*FpRS0C3EHQnELVaWRvb8bg.gif)

* **In This Section, you can learn about Sequence to Sequence Learning**

  * [**Recurrent Neural Networks**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#recurrent-neural-networks)
  * [**Natural Language Processing & Word Embeddings**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#natural-language-processing--word-embeddings)
  * [**Sequence models & Attention mechanism**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#sequence-models--attention-mechanism)

* **Notebooks:**

  * Week1 - [**Recurrent Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Sequence%20Models/Week1/Building%20a%20Recurrent%20Neural%20Network%20-%20Step%20by%20Step/Building%20a%20Recurrent%20Neural%20Network%20-%20Step%20by%20Step.ipynb)
  * Week2 - [**Natural Language Processing & Word Embeddings**](https://github.com/ashishpatel26/Deep-Learning-Coursera/tree/master/Sequence%20Models/Week2)
  * Week3 - [**Sequence models & Attention mechanism**](https://github.com/ashishpatel26/Deep-Learning-Coursera/tree/master/Sequence%20Models/Week3)

  

**Thanks for Reading....Happy Learning...!!!**
","This is the first course of the deep learning specialization at [Coursera]. It
is moderated by [DeepLearning.ai](http://deeplearning.ai/). The course is taught
by Andrew Ng.summarize: # Andrew NG Notes Collection."
2139,"Curated chronological list of learning resources for Angular, from complete beginner to advanced level","# Angular learning resources

Curated list of learning resources for Angular, from complete beginner to advanced level.
Everything you need to learn in chronological order to become a professional Angular developer.

# ⇒ Prerequisites 

### Javascript:

- [JavaScript ES6 tutorial](https://codeburst.io/es6-tutorial-for-beginners-5f3c4e7960be)
- [Principles of functional programming in JavaScript](https://flaviocopes.com/javascript-functional-programming/)
- [Functional Programming with JavaScript](https://codeburst.io/functional-programming-in-javascript-e57e7e28c0e5)

### TypeScript:

- [Official Documentation](https://www.typescriptlang.org/docs/home.html)
- [Official Handbook](https://www.typescriptlang.org/docs/handbook/basic-types.html)
- [TS deepdive Gitbook by Basarat Syed](https://basarat.gitbooks.io/typescript/)
- [Object Oriented Programming with TypeScript](http://rachelappel.com/write-object-oriented-javascript-with-typescript/)
- [Functional programming with TypeScript](https://vsavkin.com/functional-typescript-316f0e003dc6)


# ⇒ Beginner
- [Getting started official tutorial](https://angular.io/tutorial)
- [Official Docs](https://angular.io)
- [Components & Templates](https://angular.io/guide/displaying-data)
- [Component interaction](https://angular.io/guide/component-interaction)
- [Structural Directives](https://angular.io/guide/structural-directives)
- [Dependency Injection & Services](https://angular.io/guide/architecture-services)
- [Programming Style guide](https://angular.io/guide/styleguide)


# ⇒ Intermediate

### Reactive programming - RxJS:
- [Introduction to RxJS - RxJS Primer](https://www.learnrxjs.io/concepts/rxjs-primer.html)
- [The introduction to reactive programming with RxJS](https://www.learnrxjs.io/)
- [RxJS Video Course](https://www.youtube.com/watch?v=Tux1nhBPl_w)
- [Learn RxJS - Organised API Reference](https://www.learnrxjs.io/)
- [RxMarbles: Interactive diagrams of Rx Observables](http://rxmarbles.com/)
- [RxJS Docs](https://rxjs-dev.firebaseapp.com/)

### Going further with Angular:
- [Managing projects with Angular CLI](https://github.com/angular/angular-cli/wiki)
- [Angular HTTP Client](https://angular.io/guide/http)
- [Reactive Forms](https://angular.io/guide/reactive-forms)
- [Angular Routing & Navigation](https://angular.io/guide/router)
- [Angular Material Component Library](https://material.angular.io/)
- [Nebular Component Library](https://akveo.github.io/nebular/)
- [Testing](https://angular.io/guide/testing)

# ⇒ Advanced

### State management:
- [Simple and powerful state management with only Services and RxJS (for 90% of cases, this method of state management is more than enough)](https://dev.to/avatsaev/simple-state-management-in-angular-with-only-services-and-rxjs-41p8)
- [NGRX - Angular state management library](https://github.com/ngrx/platform)
- [Quick intro to Redux style state management with NGRX](https://www.youtube.com/watch?v=f97ICOaekNU)
- [State management with NGRX tutorial](https://coursetro.com/posts/code/151/Angular-Ngrx-Store-Tutorial---Learn-Angular-State-Management)
- [In depth introduction to NGRX/Redux state management](https://medium.com/@bencabanes/redux-introduction-with-ngrx-part-1-store-application-state-2c47c35376ea)
- [NGRX advanced patterns & techniques](https://blog.nrwl.io/ngrx-patterns-and-techniques-f46126e2b1e5)

#### Alternatives to NGRX:

- [NGXS](https://github.com/ngxs/store)
- [Akita](https://netbasal.gitbook.io/akita/entity-store/blog-posts)

### Dependency injection:
 - [Advanced dependency injection](https://angular.io/guide/dependency-injection-providers)
 - [Dependency inversion](https://netbasal.com/demystifying-the-dependency-inversion-principle-in-angular-a2daca9b05ee)
 
### Angular change detection engine:
- [How change detection works](https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html)


### Perfomance:
- [Performance guide for Angular apps](https://blog.angular.io/3-tips-for-angular-runtime-performance-from-the-real-world-d467fbc8f66e)
- [Optimizing performance in Angular apps](https://netbasal.com/optimizing-the-performance-of-your-angular-application-f222f1c16354)
- [OnPush change detection strategy in details](https://netbasal.com/a-comprehensive-guide-to-angular-onpush-change-detection-strategy-5bac493074a4)

### Angular libraries:

- [Creating Angular libraries with Angular CLI](https://blog.angulartraining.com/create-your-own-libraries-with-angular-cli-7b434600bbb7)
- [Publishing Angular component libraries](https://medium.com/@faxemaxee/building-and-publishing-angular-libraries-using-angular-cli-140057d21101)


# Useful Blogs / Video courses / Youtube Channels / Example apps

<a href=""https://ultimatecourses.com/courses/angular/ref/azero79/"" title=""Ultimate Courses""><img src=""https://ultimatecourses.com/assets/img/banners/ultimate-angular-github.svg"" alt=""Ultimate Courses"" /></a>

- [Angular Udemy video Course from, beginner to Pro level (~$10)](https://www.udemy.com/the-complete-guide-to-angular-2/)
- [Angular Firebase - Quick short tutorials on advanced topics](https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA)
- [Angular MIX - Youtube Channel](https://www.youtube.com/channel/UCnUpEUN4V3iJxoUximdr6Nw/videos)
- [Discover Angular courses](https://bestcourses.io/results?q=angular&size=n_20_n)
- [Todd Motto - Youtube Channel](https://www.youtube.com/channel/UCNtFk-g4CCmXMYL4pYNmoEA/videos)
- [Angular Connect - Youtube Channel](https://www.youtube.com/channel/UCzrskTiT_ObAk3xBkVxMz5g/videos)
- [Free Angular courses from Coursetro - YouTube](http://www.youtube.com/user/designcourse)
- [Todd Motto - Blog](https://toddmotto.com/)
- [Angular Subreddit](https://www.reddit.com/r/Angular2/)
- [Angular In Depth - Advanced understanding of inner workings](https://blog.angularindepth.com/)
- [Netanel Basal - Advanced Practical Tutorials](https://netbasal.com/@NetanelBasal)
- [Full Stack Contacts Book example app (Components, Services, Routing, Http, Forms, Lazy loading, Sockets, NGRX State management, NGRX HTTP+Socket.IO Side Effects management, NGRX Entity management...)](https://github.com/avatsaev/angular-contacts-app-example)





","Curated list of learning resources for Angular, from complete beginner to
advanced level. Everything you need to learn in chronological order to become a
professional Angular developer. Prerequisites: Javascript, TypeScript, Reactive
programming, and State management with NGRX."
1535,Angular with ngRx and experimental ngrx-data helper,"# Angular ngrx-data

> **This repository is now merged with @ngrx into @ngrx/data. You can find the [ngrx/data docs here](https://ngrx.io/guide/data) and the [github repository with ngrx/data in it here](https://github.com/ngrx/platform)**

**Please read the note above**

[![prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://prettier.io/)

## Zero Ngrx Boilerplate

**You may never write an action, reducer, selector, effect, or HTTP dataservice again.**

[_NgRx_](https://github.com/ngrx/platform/blob/master/README.md) helps Angular applications manage shared state in a ""reactive"" style, following the [redux](https://redux.js.org) pattern.

But to use it properly requires _both_ a deep understanding of redux/ngrx _and_ a lot of _boilerplate code_.

_Ngrx-data_ is an _ngrx_ extension that offers a gentle introduction to _ngrx/redux_ without the boilerplate.

> **Try it!** See the [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md) for instructions on adding NgRx and ngrx-data to your app.

<a id=""why""></a>

## Why use _ngrx-data_?

Many applications have substantial _domain models_ with 10s or 100s of [entity types](docs/faq.md/#entity)
such as _Customer_, _Order_, _LineItem_, _Product_, and _User_.

In plain _ngrx_, to create, retrieve, update, and delete (CRUD) data for every entity type is an overwhelming task. You're writing _actions_, _action-creators_, _reducers_, _effects_, _dispatchers_, and _selectors_ as well as the HTTP GET, PUT, POST, and DELETE methods _for each entity type_.

In even a small model, this is a ton of repetitive code to create, maintain, and test.

The _ngrx-data_ library is _one_ way to stay on the _ngrx_ path while radically reducing the ""boilerplate"" necessary to manage entities with _ngrx_.

## It's still _NgRx_

**This is a _library for ngrx_, not an ngrx alternative.**

It's easy to combine standard ngrx with ngrx-data.
It's easy to take control when you need it and hand control back to ngrx-data when you're done.

Every entity has its own actions. Every operation takes its unique journey through the store, reducers, effects, and selectors. You just let _ngrx-data_ create these for you.

You can add custom store properties, actions, reducers, selectors, and effects. You can override any ngrx-data behavior for an individual entity type or for all entities.
You can make your own calls to the server and update the cached entity collections with the results using ngrx-data _cache-only_ actions.

You can see the _ngrx machinery_ at work with the [_redux developer tools_](#redux-dev-tools). You can listen to the flow of actions directly. You can _intercept and override anything_ ... but you only have to intervene where you want to add custom logic.

### Learn about it

For a hands-on experience, try the [QuickStart](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md)
in the tutorial git repo, **[ngrx-data-lab](https://github.com/johnpapa/ngrx-data-lab/)**,
which guides you on the few, simple steps necessary to migrate from a typical service-based Angular app, to an app that manages state with _ngrx-data_.

_This_ **ngrx-data repository** has the main documentation and its own sample app.

The sample app in the `src/client/app/` folder presents an editor for viewing and changing _Heroes_ and _Villains_.

The following _reduced_ extract from that demo illustrates the essential mechanics of configuring and using _ngrx-data_.

You begin with a description of the entity model in a few lines of metadata.

```javascript
// Metadata for the entity model
export const entityMetadata: EntityMetadataMap = {
  Hero: {},
  Villain: {}
};

// Help ngrx-data pluralize entity type names
// because the plural of ""Hero"" is not ""Heros""
export const pluralNames = {
  Hero: 'Heroes' // the plural of Hero
};
```

You register the metadata and plurals with the `ngrx-data` module.

```javascript
@NgModule({
  imports: [
    NgrxDataModule.forRoot({
      entityMetadata: entityMetadata,
      pluralNames: pluralNames
    })
  ]
})
export class EntityStoreModule {}
```

Your component accesses each entity data through an `EntityCollectionService` which you can acquire from the _ngrx_data_ `EntityServices`.

In the following example,
the `HeroesComponent` injects `EntityServices` and asks it for an `EntityCollectionService`
registered under the `Hero` entity name.

The component uses that service to read and save _Hero_ entity data
in a reactive, immutable style, _without reference to any of the ngrx artifacts_.

```javascript
import { EntityCollectionService, EntityServices } from 'ngrx-data';
import { Hero } from '../../core';

@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HeroesComponent implements OnInit {
  heroes$: Observable<Hero[]>;
  heroesService: EntityCollectionService<Hero>;

  constructor(entityServices: EntityServices) {
    this.heroesService = entityServices.getEntityCollectionService('Hero');
    this.heroes$ = this.heroesService.entities$;
  }

  ngOnInit() {
    this.getHeroes();
  }

  getHeroes() {
    this.heroesService.getAll();
  }

  addHero(hero: Hero) {
    this.heroesService.add(hero);
  }

  deleteHero(hero: Hero) {
    this.heroesService.delete(hero.id);
  }

  updateHero(hero: Hero) {
    this.heroesService.update(hero);
  }
}
```

As you explore _ngrx-data_ and its documentation,
you'll learn many extension points and customizations that
tailor the developer experience to your application needs.

## QuickStart

Try the [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md) to experience NgRx and ngrx-data in your app.

<a id=""explore""></a>

## Explore this repository

This repository contains the _ngrx-data_ source code and a
demonstration application (the ""demo app"") that exercises many of the library features.

The key folders in this repository are:

* docs --> the docs for the library and the demo
* lib ---> the ngrx-data library source code that we publish to npm
* src/app ---> the demo app source
* server ---> a node server for remote data access

<a id=""docs-list""></a>

### Learn more in the docs

* [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md)
* [Architecture](docs/architecture.md)
* [Entity Metadata](docs/entity-metadata.md)
* [Entity Collection](docs/entity-collection.md)
* [Entity Collection Service](docs/entity-collection-service.md)
* [Entity Services](docs/entity-services.md)
* [Entity DataService](docs/entity-dataservice.md)
* [Entity Actions](docs/entity-actions.md)
* [Entity Reducer](docs/entity-reducer.md)
* [Entity Change Tracker](docs/entity-change-tracker.md)
* [Saving multiple-entities at once](docs/save-entities.md)
* [Extension Points](docs/extension-points.md)
* [Limitations](docs/limitations.md)
* [FAQ: Frequently Asked Questions](docs/faq.md)

### Install and run

The demo app is based on the Angular CLI. You may want to install the CLI globally if you have not already done so.

```bash
npm install -g @angular/cli
```

Then follow these steps:

1.  Clone this repository

    ```bash
    git clone https://github.com/johnpapa/angular-ngrx-data.git
    cd angular-ngrx-data
    ```

2.  Install the npm packages

    ```bash
    npm install
    ```

3.  Build the `ngrx-data` library

    ```bash
    npm run build-setup
    ```

4.  Serve the CLI-based demo app

    ```bash
    ng serve -o
    ```

Refer to the [troubleshooting](#installation) section if you run into installation issues.

## Run the library tests

The _ngrx-data_ library ships with unit and E2E (end-to-end) tests to validate functionality and guard against regressions.

These tests also demonstrate features of the library that are not covered in the demo app. They're worth reading to discover more advanced techniques.

Run this CLI command to execute the **unit tests** for the library.

```bash
ng test
```

Run the sample app **E2E (end-to-end) tests**.

```bash
npm run e2e
```

We welcome [PRs](https://github.com/johnpapa/angular-ngrx-data/pulls) that add to the tests as well as those that fix bugs and documentation.

Be sure to run these tests before submitting a PR for review.

<a id=""redux-dev-tools""></a>

## Monitor the app with Redux DevTools

The demo app is [configured for monitoring](https://github.com/ngrx/platform/tree/master/docs/store-devtools) with the [Redux DevTools](https://github.com/zalmoxisus/redux-devtools-extension).

Follow these instructions to [install them in your browser](https://github.com/zalmoxisus/redux-devtools-extension) and learn how to use them.

## Debug the library in browser dev tools

When running _tests_, open the browser dev tools, go to the ""Sources"" tab, and look for the library files by name.

> In chrome, type [Command-P] and letters of the file name.

When _running the app_ (e.g., with `ng serve`), the browser dev tools give you TWO choices for a given TypeScript source file, both claiming to be from `.ts`.

The one you want for library and app files ends in `/lib/src/file-name.ts` and `/src/client/app/path/file-name.ts` respectively.

> Hope to solve the _two file_ problem.

## Build the app against the source

The demo app is setup to build and run against the ngPackagr artifacts in `dist/ngrx-data`,
the same artifacts delivered in the npm package.

> Re-build the library `npm run build-lib` or `npm run build-setup` or `npm run build-all`
> to update these artifacts.

This approach, while safe, can be inconvenient when you're evolving the library code because
""Go to definition"" takes you to the `d.ts` files in `dist/ngrx-data` rather than
the source files in `lib/src`.

If you want to ""Go to definition"" to take you to the source files,
make the following **\*temporary changes** to the TypeScript configuration.

1.  **_Replace_** the paths target in the root `tsconfig.json` so that the IDE (e.g., VS Code) looks for `ngrx-data` in `src/lib`.

    ```bash
      ""paths"": {
        ""ngrx-data"": [""lib/src""]
      },
    ```

2.  **_Replace_** _that same setting_ in the config at `src/tsconfig.json`.

3.  **_Replace_** _that same setting_ in `src/client/tsconfig.app.json`.
    Now `ng build` references `src/lib` when it builds the demo app.

> **Remember to _restore the `tsconfig` settings_ when you're done. Do not commit those changes!**

## Use a real database

The demo app queries and saves mock entity data to an in-memory database with the help of the
[Angular In-memory Web API](https://github.com/angular/in-memory-web-api).

The ""Remote Data"" toggle switch in the header switches
to the remote database.

The app fails when you switch to the remote database.

> Notice how the app detects errors and pops up a toast message with the failed _ngrx_ `Action.type`.
>
> The error details are in the browser's console log.

You must first set up a database and launch a web api server that talks to it.

The `src/server` folder has code for a local node web api server, configured for the demo app.

> TODO:
> Explain how to build and run the server.
> Explain how to build and serve the mongo db

## Bad/surplus _npm scripts_

We know there are a great many npm script commands in `package.json`, many (most?) of which don't work.

They're on our list for future cleanup.
Please don't create issues for them
(although PRs that fix them are welcome).

<!--

>TODO: Fix the broken server-oriented commands in package.json

### Create a MongoDb

1. Create a [CosmosDB instance](https://docs.microsoft.com/azure/cosmos-db/tutorial-develop-mongodb-nodejs-part4?WT.mc_id=angularngrxdata-github-jopapa)

### Build and launch the node server

1. Build the Angular app and launch the node server

```bash
???
```

1. Open the browser to <http://localhost:3001>

### Docker

* Install and run [Docker](https://www.docker.com/community-edition)

#### Environment file

Create an empty file named `.env` in the root of the app. We'll fill this in later.

#### Docker Compose with Debugging

Create the Docker image and run it locally. This commands uses `docker-compose` to build the image
and run the container.

This opens port `9229` for debugging.

```bash
npm run docker-debug
open http://localhost:3001
```

Open VS Code, launch the `Docker: Attach to Node` debugging profile

### Optional Database

```bash
NODE_ENV=development

PORT=3001
PUBLICWEB=./publicweb

COSMOSDB_ACCOUNT=your_cosmos_account
COSMOSDB_DB=your_cosmos_db
COSMOSDB_KEY=your_cosmos_key
COSMOSDB_PORT=10255
```

Out of the box you can run the demo with an in memory data service instead of a live database. If you wish to use a database, you can set up a local mongo server or a remote CosmosDB/MongoDB server in the cloud.

1. Configure Cosmos DB server settings

   Copy the contents from `.env.example` into `.env`. Replace the values with your specific configuration. Don't worry, this file is in the `.gitignore` so it won't get pushed to github.

   ```javascript
   NODE_ENV=development

   PORT=3001
   PUBLICWEB=./publicweb

   COSMOSDB_ACCOUNT=your_cosmos_account
   COSMOSDB_DB=your_cosmos_db
   COSMOSDB_KEY=your_cosmos_key
   COSMOSDB_PORT=10255
   ```
-->

## Troubleshooting

### Installation

1.  If you are on Windows and run into this error during `npm install`: _""snyk couldn't patch the specified vulnerabilities because gnu's patch is not available""_, refer to this [issue](https://github.com/linnovate/mean/issues/1711) for the fix. In short, your `Git` installation is not correct or `C:\Program Files\Git\usr\bin` (typically) is not added to your system environment variable `%PATH%`.

## Problems or Suggestions

[Open an issue here](https://github.com/johnpapa/angular-ngrx-data/issues)
","Ngrx-data is an extension to NgRx that offers a gentle introduction to redux and
ngrx without the boilerplate code. It helps Angular applications manage shared
state in a ""reactive"" style, following the [redux](https://redux.org) pattern."
1896,"Icon management for Mobile Apps. Create icons, generate all required sizes, label and annotate. Supports Native, Cordova, React Native, Xamarin and more. Inspired by cordova-icon.","# app-icon

[![npm version](https://badge.fury.io/js/app-icon.svg)](https://badge.fury.io/js/app-icon) [![CircleCI](https://circleci.com/gh/dwmkerr/app-icon.svg?style=shield)](https://circleci.com/gh/dwmkerr/app-icon) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/3e334rknhjbpx555?svg=true)](https://ci.appveyor.com/project/dwmkerr/app-icon) [![codecov](https://codecov.io/gh/dwmkerr/app-icon/branch/master/graph/badge.svg)](https://codecov.io/gh/dwmkerr/app-icon) [![dependencies Status](https://david-dm.org/dwmkerr/app-icon/status.svg)](https://david-dm.org/dwmkerr/app-icon) [![devDependencies Status](https://david-dm.org/dwmkerr/app-icon/dev-status.svg)](https://david-dm.org/dwmkerr/app-icon?type=dev) [![GuardRails badge](https://badges.guardrails.io/dwmkerr/app-icon.svg?token=569f2cc38a148f785f3a38ef0bcf5f5964995d7ca625abfad9956b14bd06ad96&provider=github)](https://dashboard.guardrails.io/default/gh/dwmkerr/app-icon) [![Greenkeeper badge](https://badges.greenkeeper.io/dwmkerr/app-icon.svg)](https://greenkeeper.io/) [![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)

Icon management for Mobile Apps. Create icons, generate all required sizes, label and annotate. Supports Native, Cordova, React Native, Xamarin and more. Inspired by [cordova-icon](https://github.com/AlexDisler/cordova-icon). Node 10 and onwards supported.

<img src=""./assets/banner/banner.png"" width=""614"" alt=""Banner"">

<!-- vim-markdown-toc GFM -->

* [Introduction](#introduction)
* [Installation](#installation)
* [Usage](#usage)
    * [Initialising](#initialising)
    * [Generating Icons](#generating-icons)
    * [Labelling Icons](#labelling-icons)
    * [Adaptive Icons](#adaptive-icons)
* [Developer Guide](#developer-guide)
    * [Initial Setup](#initial-setup)
    * [Running Tests](#running-tests)
    * [Commit Messages](#commit-messages)
    * [Creating a Release](#creating-a-release)
    * [Builds](#builds)
    * [Debugging](#debugging)
* [The Sample Projects](#the-sample-projects)
    * [React Native](#react-native)
    * [Cordova](#cordova)
    * [Native](#native)
* [Compatibility](#compatibility)
* [Troubleshooting](#troubleshooting)
* [License](#license)

<!-- vim-markdown-toc -->

## Introduction

This simple tool allows you to create a single icon in your app project, then create icons of all required sizes from it. It currently works for iOS and Android. You can also add labels to your app icons.

Create a single large `icon.png` at least 192 pixels square, or run `app-icon init` to create this icon, then run:

```bash
# If you are using npm 5.2 onwards...
npx app-icon generate

# ...for older versions of npm
npm install -g app-icon
app-icon generate
```

You can also use the module directly in node:

```js
/**
 * appIcon = {
 *   labelImage(inputFilePath, outputFilePath, topText, bottomText),
 *   generate({ sourceIcon, platforms, search }),
 *   templates: {
 *     'AndroidManifest.icons': {...json file...},
 *     'AppIcon.iconset': {...json file...},
 *   },
 * }
 */
import appIcon from 'app-icon';

Promise.resolve()
  .then(() => appIcon.labelImage('./inputfile.png', './out.png', 'UAT', '0.12.3'))
  .then(() => appIcon.labelImage('./inputfile.png', './out.png', 'UAT')) // Bottom text optional
  .then(() => appIcon.labelImage('./inputfile.png', './out.png', null, '0.12.3')) // Top text optional
  .then(() => appIcon.generate()) // will use all default values
  .then(() => appIcon.generate({
    sourceIcon: './icon.png', // Path of the icon to use
    platforms: 'android,ios', // The platforms to generate icons for (i.e. 'android')
    searchRoot: './',
  }));
```

## Installation

Install with:

```bash
npm install -g app-icon
```

You will need [imagemagick](http://www.imagemagick.org/) installed:

```bash
brew install imagemagick          # OSX
sudo apt-get install imagemagick  # Debian/Ubuntu/etc
sudo yum install imagemagick      # CentOS/etc
```

## Usage

The `app-icon` tool can be used to create a simple template icon, generate icons of all sizes from a template icon, or label icons.

### Initialising

If you do not already have a single icon to use as the main icon for your project, you can create one with the `init` command:

```bash
app-icon init                    # generates an icon named icon.png
```

You can also add a simple label to the icon.

```bash
app-icon init --caption ""App""    # creates an icon with the text 'App'
```

To create template [Adaptive Icons for Android](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive) include the `--adaptive-icons` flag.

### Generating Icons

Add an icon (ideally at least 192x192 pixels) named `icon.png` to your project root (or run `app-icon init`). To automatically generate icons of all sizes for all app projects in the same folder, run:

```bash
app-icon generate
```

If an iOS project is present, then the icon will be copied at all required sizes to:

```
./ios/<ProjectName>/Images.xcassets/AppIcon.appiconset
```

If an Android project is present, then the icon will be copied at all required sizes to:

```
./android/app/src/main/res
```

You can limit the platforms which icons are generated for with the `--platforms` flag, specifying:

```bash
app-icon generate --platforms=ios
app-icon generate --platforms=android,ios
```

By default the tool will generate icons for both platforms.

You can search in specific directories for icons, if the presence of other projects is interfering, just use the `--search` or `-s` parameter:

```bash
app-icon generate -s ./ios -s ./android
```

You can specify the path to the source icon, as well as the folder to search for app projects, just run `app-icon generate -h` to see the options.

### Labelling Icons

Add labels to an icon with the command below:

```bash
app-icon label -i icon.png -o output.png --top UAT --bottom 0.12.3
```

This would produce output like the below image:

![Labelled Icon Image](./assets/label.png)

This is a useful trick when you are creating things like internal QA versions of your app, where you might want to show a version number or other label in the icon itself.

To label adaptive icons, simply run the `label` command against the _foreground_ adaptive icon image.

### Adaptive Icons

Support for [Adaptive Icons for Android](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive) is being introduced. This will happen in stages and should be considered an 'alpha' feature until otherwise noted.

The current goals are:

1. Adaptive Icons are 'opt in' for now, they won't be generated by default
2. Creating or generating adaptive icons is done via the `--adaptive-icons` flag

None of the current commands support the `--adaptive-icons` flag. The `init` command will be the first to bring support, then `generate`. If the feature is working well for users then I will document in detail its usage, until then it is an 'experimental' feature!

There is an excellent guide on developing Adaptive Icons [here](https://medium.com/google-design/designing-adaptive-icons-515af294c783).

To test how adaptive icons will look when animated, swiped, etc, the [Adaptive Icons](https://adapticon.tooo.io/) website by [Marius Claret](https://twitter.com/mariusclaret) is very useful!

Note that Adaptive Icons of *all* supported sizes are generated. However, we also generate the `res/mipmap-anydpi-v26/` adaptive icon. This is a large size icon which Android from v26 onwards will automatically rescale as needed to all other sizes. This technically makes the density specific icons redundant. The reason we generate both is to ensure that after `generate` is run, *all* icons in the project will be consistent.

## Developer Guide

The only dependencies are Node 10 (or above) and Yarn.

Useful commands for development are:

| Command              | Usage                                                                                    |
|----------------------|------------------------------------------------------------------------------------------|
| `npm test`           | Runs the unit tests.                                                                     |
| `npm run test:debug` | Runs the tests in a debugger. Combine with `.only` and `debugger` for ease of debugging. |
| `npm run cov`        | Runs the tests, writing coverage reports to `./artifacts/coverage`.                      |

Currently the linting style is based on [airbnb](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb). Run `npm run lint` to lint the code.

### Initial Setup

Install the dependencies (I recommend [Node Version Manager](https://github.com/creationix/nvm)):

```bash
nvm install 8
nvm use 8
git clone git@github.com:dwmkerr/app-icon.git
cd app-icon
npm install && npm test
```

### Running Tests

Run the tests with:

```bash
npm test
```

Tests are executed with [Mocha](https://mochajs.org/) and coverage is handled by [Istanbul](https://github.com/gotwarlost/istanbul). Coverage reports are written to an `./artifacts` folder.

Note that best practices are to pass Mocha a quoted string with a glob pattern for cross-platform execution of tests (see [Mocha Docs](https://mochajs.org/#the-test-directory)). However for some reason on AppVeyor this doesn't seem to work. Leaving the pattern unquoted works for `cmd` as well as the shell in builds for now. So please be careful if changing the quotes and test on both platforms.

### Commit Messages

[Conventional Commits](https://www.conventionalcommits.org) should be used. This allows the CHANGELOG to be kept up to date automatically, and ensures that semantic versioning can be expected from the library.

### Creating a Release

To create a release.

- Merge your work to master.
- Use `npm run release`.
- Push and deploy `git push --tags && git push && npm publish`

Note that `semantic-version` is used, meaning a changelog is automatically kept up to date, and versioning is handled semantically based on the commit message.

### Builds

Builds are run on CircleCI. You can run the CircleCI build locally with the following command:

```
make circleci
```

The builds use custom docker images which contain the appropriate Node.js runtime, as well as the ImageMagick binaries. These custom images are stored in the `.circleci/images` folder. You can use the `.circleci/images/makefile` makefile to build them, but permissions to push to the `dwmkerr` Docker Hub account are required to publish these images. In general, these should not need to be modified.

### Debugging

The [`debug`](https://www.npmjs.com/package/debug) package is used to support low-level debugging. If you want to see debug messages when running the tool, just set the `DEBUG` environment variable to `app-icon`:

```sh
DEBUG=app-icon app-icon generate --platforms android
```

## The Sample Projects

This project includes some sample apps in the `test` folder, which are used for the tests. You can also run these apps to see the icons produced in action.

### React Native

To run:

```bash
cd ./test/ReactNativeIconTest/
npm install
react-native run-ios
# OR react-native run-android
```

### Cordova

To run:

```bash
cd ./test/CordovaApp/
npm install
cordova run ios
# OR cordova run android
```

### Native

To run the native apps, open the `./test/NativeApp` directory, then open the iOS/Android projects in XCode/AndroidStudio as needed.

## Compatibility

`app-icon` dependds on [ImageMagick](https://www.imagemagick.org/). ImageMagick 6 is installed by default on many Linux distributions, as well as OSX. Some platforms are regularly tested (such as Ubuntu, via CircleCI). Other platforms *may* work but are not tested when I make a release, so your results may vary.

The table below shows the current confirmed compatibility:

| Platform  | `app-icon` | ImageMagick | Status |
|-----------|------------|-------------|--------|
| OSX       | `0.6.x`    | 6, 7        | ✅     |
| Ubuntu 14 | `0.6.x`    | 6           | ✅     |

## Troubleshooting

**Images labelled with `app-icon label` have the text slightly vertically offset**

This seems to be an issue with Imagemagick 6 - try upgrading to 7.

## License

MIT
","The `app-icon` tool allows you to create a single icon in your app project, then
create icons of all required sizes from it. It currently works for iOS and
Android, and you can also add labels to your app icons. To automatically
generate icons for all app projects, run: ```app-Icon generate. If you are using
npm 5.2 onwards, then run: npm install -g app-icon generate. You can also use
the module directly in node."
1248,AppDevKit is an iOS development library that provides developers with useful features to fulfill their everyday iOS app development needs.,"# AppDevKit
[![Build Status](https://travis-ci.org/yahoo/AppDevKit.svg?branch=master)](https://travis-ci.org/yahoo/AppDevKit) 
[![codecov](https://codecov.io/gh/yahoo/AppDevKit/branch/master/graph/badge.svg)](https://codecov.io/gh/yahoo/AppDevKit)
[![CocoaPods](https://img.shields.io/cocoapods/v/AppDevKit.svg?maxAge=2592000?style=flat-square)](https://cocoapods.org/?q=appdevkit)

AppDevKit is an iOS development library that provides developers with useful features to fulfill their everyday iOS app development needs.

Yahoo’s Taiwan based iOS app development team has been using this development kit for the past three years, and we plan future apps to use AppDevKit as well. Our use of this code in many apps helped improve its stability and utility. We find these libraries help address some incompatibility issues found in different iOS versions, and overall make app development easier and our apps operate more consistently. 

AppDevKit has five major parts that include command, user interfaces, animations, image view, and list view support libraries. AppDevKit could be installed by CocoaPods. Please feel welcome to use AppDevKit in your iOS projects as it is licensed under the permissive open source BSD license. 

You can help contribute improvements to this project too. If you have suggestions, corrections, or enhancements, please send us a pull request. If you have questions for the team, you can contact **cfsung@yahooinc.com** directly, or the core team at **app-dev-kit@yahooinc.com**. Thank you for checking this out. 

<img src=""img/AppDevKit-Sticker.png"">

## Usage

### Installation with CocoaPods

The easiest way to leverage AppDevKit is using CocoaPods. Please edit your **Podfile** like this:

<pre>
source 'https://github.com/CocoaPods/Specs.git'  

pod 'AppDevKit'
</pre>

AppDevKit has 5 sub-pods. They're **AppDevCommonKit**, **AppDevUIKit**, **AppDevAnimateKit**, **AppDevImageKit** and **AppDevListViewKit**. If you don't want to install whole package, you could pick sub-library and use CocoaPods to install it. For example:

<pre>
source 'https://github.com/CocoaPods/Specs.git'  

# Only insatll image kit in AppDevKit
pod 'AppDevKit/AppDevImageKit'
</pre>



### Basic Usage
  
  Using this develop kit is very simple. First at all, import it in your any code file or just put it in prefix file (`.pch`). Then you will enjoy this develop kit. 
  
    #import <AppDevKit.h>

### Common Tools

  - **ADKAppUtil** > The foundational tools to support common tasks.
  - **ADKStringHelper** > The string formatter that will generate formatted strings form date, number and etc for you.
  - **ADKCalculatorHelper** > The calculation set including distance, size, width, height, etc.
  - **ADKNibCacheManager** > The manager to cache different instances in memory and keep it as a singleton.
  - **UIView+ADKGetUIViewController** > Supports get any view's UIViewController.
  - **UIColor+ADKHexPresentation** > Supports HEX color format and color shift.
  - **ADKViewExclusiveTouch** > Supports exclusive touch on each sub views.


### UI Tools

  - **UIView+ADKAutoLayoutSupport** > Supports command autolayout features.
  - **UIScrollView+ADKPullToRefreshView** > Supports pull to refresh feature on scrollable view. For example: `UIScrollView`, `UITableView` and `UICollectionView`.
  - **UIScrollView+ADKInfiniteScrollingView** > Supports infinite scrolling feature on scrollable view. For example: `UIScrollView`, `UITableView` and `UICollectionView`.
  - **ADKModalMaskView** > Providing a way to create a modal view for presenting specific view.
  - **ADKGradientView** > Creating a simple linear gradient view with orientations for you.
  - **ADKMultiGradientView** > Creating a complicated linear gradient view with orientations for you.
  - **ADKDashedLineView** > Creates a dashed line around your view.


### Animation Tools

  - **UIView+ADKAnimationMacro** > Gives some simple animation behavior for specific `UIView`.
  

### Image Tools

  - **UIImage+ADKColorReplacement** > Supports color changing / replacement feature on `UIImage`.
  - **UIImage+ADKImageFilter** > Supports image FX, resize, crop, etc. on `UIImage`.
  - **UIImage+ADKDrawingTemplate** > Supports loss less image from a PDF source.


### ListView Tools
  
  - **UICollectionView+ADKOperation** > Supports force stop scrolling in collection view.
  - **ADKNibSizeCalculator** > Provides correct cell size for different devices effectively.
  - **ADKCellDynamicSizeCalculator** > Calculates dynamic cell with and height for `UICollectionViewCell` and `UITableViewCell`.
  - **ADKCollectionViewDynamicSizeCell** > Base `UICollectionViewCell` supports dynamic width and height features.
  - **ADKTableViewDynamicSizeCell** > Base `UITableViewCell` supports dynamic width and height features.


### Camera Tools

  - **ADKCamera** > Allows you to use advanced manual camera features and customize your camera view in few steps.
  - **ADKOpenGLImageView** > It provides an OpenGL ES soltion for rendering a core image on the screen by using GPU.
  - **ADKMetalImageView** > It provides an Metal framework soltion for rendering a core image on the screen by using GPU.
  

### Instruction

  - **Introduction of AppDevKit** > http://www.slideshare.net/anistarsung/appdevkit-for-ios-development
  - **Tutorial materials** > https://github.com/anistarsung/AppDevKitLearning (It includes templates and tutorials that you can use them for training purpose)
  - **Presenting YDevelopKit (AppDevKit) in YMDC 2016** > https://youtu.be/I9QDYDGcn8M
  - **Sample Codes** has been written in AppDevKit project. You can read code to know about ""How to implement these features in your project"". Just use git to clone AppDevKit to your local disk. It should run well with your XCode. 
  - **API Reference Documents** > Please refer the [gh-pages](https://yahoo.github.io/AppDevKit/) in AppDevKit project.
  <img width=""100%"" src=""img/DocScreenShot.png"">

### License

This software is free to use under the Yahoo! Inc. BSD license.
See the [LICENSE] for license text and copyright information.

[LICENSE]: https://github.com/yahoo/AppDevKit/blob/master/LICENSE.md
","AppDevKit is an iOS development library that provides developers with useful
features to fulfill their everyday iOS app development needs. AppDevKit has five
major parts that include command, user interfaces, animations, image view, and
list view support libraries. It is licensed under the permissive open source BSD
license."
709,Automatic container image update for Argo CD,"# Argo CD Image Updater

![Integration tests](https://github.com/argoproj-labs/argocd-image-updater/workflows/Integration%20tests/badge.svg?branch=master&event=push)
[![Documentation Status](https://readthedocs.org/projects/argocd-image-updater/badge/?version=latest)](https://argocd-image-updater.readthedocs.io/en/latest/?badge=latest)
[![codecov](https://codecov.io/gh/argoproj-labs/argocd-image-updater/branch/master/graph/badge.svg)](https://codecov.io/gh/argoproj-labs/argocd-image-updater)
[![Go Report Card](https://goreportcard.com/badge/github.com/argoproj-labs/argocd-image-updater)](https://goreportcard.com/report/github.com/argoproj-labs/argocd-image-updater)

## Introduction

Argo CD Image Updater is a tool to automatically update the container
images of Kubernetes workloads which are managed by Argo CD. In a nutshell,
it will track image versions specified by annotations on the Argo CD
Application resources and update them by setting parameter overrides using
the Argo CD API.

Currently it will only work with applications that are built using *Kustomize*
or *Helm* tooling. Applications built from plain YAML or custom tools are not
supported yet (and maybe never will). 

## Documentation

Read
[the documentation](https://argocd-image-updater.readthedocs.io/en/stable/)
for more information on how to setup and run Argo CD Image Updater and to get
known to it's features and limitations.

Above URL points to the documentation for the current release. If you are
interested in documentation of upcoming features, check out the
[the latest documentation](https://argocd-image-updater.readthedocs.io/en/latest/)
which is up-to-date with the master branch.

## Current status

Argo CD Image Updater is under active development. We would not recommend it
yet for *critical* production workloads, but feel free to give it a spin.

We're very interested in feedback on usability and the user experience as well
as in bug discoveries and enhancement requests.

**Important note:** Until the first stable version (i.e. `v1.0`) is released,
breaking changes between the releases must be expected. We will do our best
to indicate all breaking changes (and how to un-break them) in the
[Changelog](CHANGELOG.md)

## Contributing

You are welcome to contribute to this project by means of raising issues for
bugs, sending & discussing enhancement ideas or by contributing code via pull
requests.

In any case, please be sure that you have read & understood the currently known
design limitations before raising issues.

Also, if you want to contribute code, please make sure that your code

* has its functionality covered by unit tests (coverage goal is 80%),
* is correctly linted,
* is well commented,
* and last but not least is compatible with our license and CLA

Please note that in the current early phase of development, the code base is
a fast moving target and lots of refactoring will happen constantly.

## License

`argocd-image-updater` is open source software, released under the
[Apache 2.0 license](https://www.apache.org/licenses/LICENSE-2.0)

## Things that are planned (roadmap)

The following things are on the roadmap until the `v1.0` release

* [ ] Extend Argo CD functionality to be able to update images for other types
  of applications.

* [x] Extend Argo CD functionality to write back to Git

* [ ] Provide web hook support to trigger update check for a given image

* [x] Use concurrency for updating multiple applications at once

* [x] Improve error handling

* [x] Support for image tags with i.e. Git commit SHAs

For more details, check out the
[v1.0.0 milestone](https://github.com/argoproj-labs/argocd-image-updater/milestone/1)

## Frequently asked questions

**Does it write back the changes to Git?**

We're happy to announce that as of `v0.9.0` and Argo CD `v1.9.0`, Argo CD
Image Updater is able to commit changes to Git. It will not modify your
application's manifests, but instead writes
[Parameter Overrides](https://argoproj.github.io/argo-cd/user-guide/parameters/#store-overrides-in-git)
to the repository.

We think that this is a good compromise between functionality (have everything
in Git) and ease-of-use (minimize conflicts).

**Are there plans to extend functionality beyond Kustomize or Helm?**

Not yet, since we are dependent upon what functionality Argo CD provides for
these types of applications.

**Will it ever be fully integrated with Argo CD?**

In the current form, probably not. If there is community demand for it, let's
see how we can make this happen.

There is [an open proposal](https://github.com/argoproj/argo-cd/issues/7385) to migrate this project into the `argoproj` org (out
of the `argoproj-labs` org) and include it in the installation of Argo CD.
","Argo CD Image Updater is a tool to automatically update the container images of
Kubernetes workloads which are managed by Argo CD. It will only work with
applications that are built using *Kustomize* or *Helm* tooling. We would not
recommend it yet for *critical* production workloads, but feel free to give it a
spin. We're very interested in feedback on usability and the user experience as
well as bug discoveries and enhancement requests. We will do our best to
indicate all breaking changes (and how to un-break them) in the Changelog."
2152,"AriaNg, a modern web frontend making aria2 easier to use.","# AriaNg
[![License](https://img.shields.io/github/license/mayswind/AriaNg.svg?style=flat)](https://github.com/mayswind/AriaNg/blob/master/LICENSE)
[![Lastest Build](https://img.shields.io/circleci/project/github/mayswind/AriaNg.svg?style=flat)](https://circleci.com/gh/mayswind/AriaNg/tree/master)
[![Lastest Release](https://img.shields.io/github/release/mayswind/AriaNg.svg?style=flat)](https://github.com/mayswind/AriaNg/releases)

## Introduction
AriaNg is a modern web frontend making [aria2](https://github.com/aria2/aria2) easier to use. AriaNg is written in pure html & javascript, thus it does not need any compilers or runtime environment. You can just put AriaNg in your web server and open it in your browser. AriaNg uses responsive layout, and supports any desktop or mobile devices.

## Features
1. Pure Html & Javascript, no runtime required
2. Responsive design, supporting desktop and mobile devices
3. User-friendly interface
    * Sort tasks (by name, size, progress, remaining time, download speed, etc.), files, bittorrent peers
    * Search tasks
    * Retry tasks
    * Adjust task order by dragging
    * More information of tasks (health percentage, client information of bt peers, etc.)
    * Filter files by specified file types (videos, audios, pictures, documents, applications, archives, etc.) or file extensions
    * Tree view for multi-directory task
    * Download / upload speed chart for aria2 or single task
    * Full support for aria2 settings
4. Dark theme
5. Url command line api support
6. Download finished notification
7. Multi-languages support
8. Multi aria2 RPC host support
9. Exporting and Importing settings support
10. Less bandwidth usage, only requesting incremental data

## Screenshots
#### Desktop
![AriaNg](https://raw.githubusercontent.com/mayswind/AriaNg-WebSite/master/screenshots/desktop.png)
#### Mobile Device
![AriaNg](https://raw.githubusercontent.com/mayswind/AriaNg-WebSite/master/screenshots/mobile.png)

## Installation
AriaNg now provides three versions, standard version, all-in-one version and [AriaNg Native](https://github.com/mayswind/AriaNg-Native). Standard version is suitable for deployment in the web server, and provides on-demand loading. All-In-One version is suitable for local using, and you can download it and just open the only html file in browser. [AriaNg Native](https://github.com/mayswind/AriaNg-Native) is also suitable for local using, and is no need for browser. 

#### Prebuilt release
Latest Release: [https://github.com/mayswind/AriaNg/releases](https://github.com/mayswind/AriaNg/releases)

Latest Daily Build (Standard Version): [https://github.com/mayswind/AriaNg-DailyBuild/archive/master.zip](https://github.com/mayswind/AriaNg-DailyBuild/archive/master.zip)

#### Building from source
Make sure you have [Node.js](https://nodejs.org/), [NPM](https://www.npmjs.com/) and [Gulp](https://gulpjs.com/) installed. Then download the source code, and follow these steps.

##### Standard Version

    $ npm install
    $ gulp clean build

##### All-In-One Version

    $ npm install
    $ gulp clean build-bundle

The builds will be placed in the dist directory.

#### Usage Notes
Since AriaNg standard version loads language resources asynchronously, you may not open index.html directly on the local file system to run AriaNg. It is recommended that you can use the all-in-one version or deploy AriaNg in a web container or download [AriaNg Native](https://github.com/mayswind/AriaNg-Native) that does not require a browser to run.

## Documents
1. [English](http://ariang.mayswind.net)
2. [Simplified Chinese (简体中文)](http://ariang.mayswind.net/zh_Hans)

## Demo
Please visit [http://ariang.mayswind.net/latest](http://ariang.mayswind.net/latest)

## Third Party Extensions
There are some third-party applications based on AriaNg, so you can use AriaNg in more scenarios or devices. Please visit [Third Party Extensions](http://ariang.mayswind.net/3rd-extensions.html) for more information.

## License
[MIT](https://github.com/mayswind/AriaNg/blob/master/LICENSE)
","AriaNg is a modern web frontend making [aria2] easier to use. It is written in
pure html & javascript, so it does not need any compilers or runtime
environment. AriaNg uses responsive layout, and supports any desktop or mobile
devices. It now provides three versions, standard version, all-in-one version
and [Aria ng Native] First, download the source code, and follow these steps.
Then download the latest Daily Build (Standard Version) and the latest Release
(All-In-One Version)"
2284,"A curated list of Artificial Intelligence (AI) courses, books, video lectures and papers.","# Awesome Artificial Intelligence (AI) [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

A curated list of Artificial Intelligence (AI) courses, books, video lectures and papers.

Contributions most welcome.

![](https://media.giphy.com/media/jeAQYN9FfROX6/giphy.gif)

## Contents

1. [Courses](#courses)
2. [Books](#books)
3. [Programming](#programming)
4. [Philosophy](#philosophy)
5. [Free Content](#free-content)
6. [Code](#code)
7. [Videos](#videos)
8. [Learning](#learning)
9. [Organizations](#organizations)
10. [Journals](#journals)
11. [Competitions](#competitions)
12. [Newsletters](#newsletters)
13. [Misc](#misc)


## Courses
* [CS50’s Intro to Artificial Intelligence](https://cs50.harvard.edu/ai/2020) - This course explores the concepts and algorithms at the foundation of modern artificial intelligence
* [MIT: Intro to Deep Learning](https://introtodeeplearning.com) - A seven day bootcamp designed in MIT to introduce deep learning methods and applications
* [Deep Blueberry: Deep Learning book](https://mithi.github.io/deep-blueberry) - A free five-weekend plan to self-learners to learn the basics of deep-learning architectures like CNNs, LSTMs, RNNs, VAEs, GANs, DQN, A3C and more
* [Spinning Up in Deep Reinforcement Learning](https://spinningup.openai.com/) - A free deep reinforcement learning course by OpenAI
* [MIT Artificial Intelligence Videos](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-034-artificial-intelligence-fall-2010/lecture-videos) - MIT AI Course
* [Grokking Deep Learning in Motion](https://www.manning.com/livevideo/grokking-deep-learning-in-motion?a_aid=algmotion&a_bid=5d7bc0ba) - Beginner's course to learn deep learning and neural networks without frameworks.
* [Intro to Artificial Intelligence](https://www.udacity.com/course/cs271) - Learn the Fundamentals of AI. Course run by Peter Norvig
* [EdX Artificial Intelligence](https://www.edx.org/course/artificial-intelligence-uc-berkeleyx-cs188-1x-0#.VMeIsmSsVkg) - The course will introduce the basic ideas and techniques underlying the design of intelligent computer systems
* [Artificial Intelligence For Robotics](https://www.class-central.com/mooc/319/udacity-artificial-intelligence-for-robotics) - This class will teach you basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics
* [Machine Learning](https://class.coursera.org/ml-008) - Basic machine learning algorithms for supervised and unsupervised learning
* [Deep Learning](https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187) - An Introductory course to the world of Deep Learning using TensorFlow. 
* [Stanford Statistical Learning](http://online.stanford.edu/course/statistical-learning-winter-2014) - Introductory course on machine learning focusing on: linear and polynomial regression, logistic regression and linear discriminant analysis; cross-validation and the bootstrap, model selection and regularization methods (ridge and lasso); nonlinear models, splines and generalized additive models; tree-based methods, random forests and boosting; support-vector machines.
* [Knowledge Based Artificial Intelligence](https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409) - Georgia Tech's course on Artificial Intelligence focussing on Symbolic AI.
* [Deep RL Bootcamp Lectures](https://sites.google.com/view/deep-rl-bootcamp/lectures) - Deep Reinforcement Bootcamp Lectures - August 2017
* [Machine Learning Crash Course By Google](https://developers.google.com/machine-learning/crash-course/ml-intro) Machine Learning Crash Course features a series of lessons with video lectures, real-world case studies, and hands-on practice exercises.
* [Python Class By Google](https://developers.google.com/edu/python/) This is a free class for people with a little bit of programming experience who want to learn Python. The class includes written materials, lecture videos, and lots of code exercises to practice Python coding.
* [Deep Learning Crash Course](https://www.manning.com/livevideo/deep-learning-crash-course) In this liveVideo course, machine learning expert Oliver Zeigermann teaches you the basics of deep learning.
* [Artificial Intelligence: A Modern Approach](http://www.amazon.com/Artificial-Intelligence-Modern-Approach-3rd/dp/0136042597) - Stuart Russell & Peter Norvig
  * Also consider browsing the [list of recommended reading](http://aima.cs.berkeley.edu/books.html), divided by each chapter in ""Artificial Intelligence: A Modern Approach"".
* [Paradigms Of Artificial Intelligence Programming: Case Studies in Common Lisp](http://www.amazon.com/exec/obidos/ASIN/1558601910) - Paradigms of AI Programming is the first text to teach advanced Common Lisp techniques in the context of building major AI systems
* [Reinforcement Learning: An Introduction](http://www.freetechbooks.com/reinforcement-learning-an-introduction-second-edition-draft-t1282.html) - This introductory textbook on reinforcement learning is targeted toward engineers and scientists in artificial intelligence, operations research, neural networks, and control systems, and we hope it will also be of interest to psychologists and neuroscientists.
* [The Cambridge Handbook Of Artificial Intelligence](http://www.amazon.com/Cambridge-Handbook-Artificial-Intelligence/dp/0521691915) - Written for non-specialists, it covers the discipline's foundations, major theories, and principal research areas, plus related topics such as artificial life
* [The Emotion Machine: Commonsense Thinking, Artificial Intelligence, and the Future of the Human Mind ](http://www.amazon.com/gp/product/0743276647) - In this mind-expanding book, scientific pioneer Marvin Minsky continues his groundbreaking research, offering a fascinating new model for how our minds work
* [Artificial Intelligence: A New Synthesis](http://www.amazon.com/Artificial-Intelligence-Synthesis-Nils-Nilsson/dp/1558604677) - Beginning with elementary reactive agents, Nilsson gradually increases their cognitive horsepower to illustrate the most important and lasting ideas in AI
* [On Intelligence](http://www.amazon.com/Jeff-Hawkins/e/B001KHNZ7C/ref=sr_ntt_srch_lnk_11?qid=1435480927&sr=8-11) - Hawkins develops a powerful theory of how the human brain works, explaining why computers are not intelligent and how, based on this new theory, we can finally build intelligent machines. Also audio version available from audible.com
* [How To Create A Mind](http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/ref=pd_sim_14_3?ie=UTF8&refRID=0QY72H7NGRYH79R7S3K7) - Kurzweil discusses how the brain works, how the mind emerges, brain-computer interfaces, and the implications of vastly increasing the powers of our intelligence to address the world’s problems
* [Deep Learning](http://www.deeplearningbook.org/) - Goodfellow, Bengio and Courville's introduction to a broad range of topics in deep learning, covering mathematical and conceptual background, deep learning techniques used in industry, and research perspectives. 
* [The Elements of Statistical Learning: Data Mining, Inference, and Prediction](https://web.stanford.edu/~hastie/ElemStatLearn/) - Hastie and Tibshirani cover a broad range of topics, from supervised learning (prediction) to unsupervised learning including neural networks, support vector machines, classification trees and boosting---the first comprehensive treatment of this topic in any book.
* [Deep Learning and the Game of Go](https://www.manning.com/books/deep-learning-and-the-game-of-go) - Deep Learning and the Game of Go teaches you how to apply the power of deep learning to complex human-flavored reasoning tasks by building a Go-playing AI. After exposing you to the foundations of machine and deep learning, you'll use Python to build a bot and then teach it the rules of the game.
* [Deep Learning for Search](https://www.manning.com/books/deep-learning-for-search) -  Deep Learning for Search teaches you how to leverage neural networks, NLP, and deep learning techniques to improve search performance.
* [Deep Learning with PyTorch](https://www.manning.com/books/deep-learning-with-pytorch) -  PyTorch puts these superpowers in your hands, providing a comfortable Python experience that gets you started quickly and then grows with you as you—and your deep learning skills—become more sophisticated. Deep Learning with PyTorch will make that journey engaging and fun.
* [Deep Reinforcement Learning in Action](https://www.manning.com/books/deep-reinforcement-learning-in-action) -  Deep Reinforcement Learning in Action teaches you the fundamental concepts and terminology of deep reinforcement learning, along with the practical skills and techniques you’ll need to implement it into your own projects.
* [Grokking Deep Reinforcement Learning](https://www.manning.com/books/grokking-deep-reinforcement-learning) -  Grokking Deep Reinforcement Learning introduces this powerful machine learning approach, using examples, illustrations, exercises, and crystal-clear teaching. 
* [Fusion in Action](https://www.manning.com/books/fusion-in-action) -  Fusion in Action teaches you to build a full-featured data analytics pipeline, including document and data search and distributed data clustering.
* [Real-World Natural Language Processing](https://www.manning.com/books/real-world-natural-language-processing) - Early access book on how to create practical NLP applications using Python. 
* [Grokking Machine Learning](https://www.manning.com/books/grokking-machine-learning) - Early access book that introduces the most valuable machine learning techniques.
* [Succeeding with AI](https://www.manning.com/books/succeeding-with-ai) - An introduction to managing successful AI projects and applying AI to real-life situations.
* [Elements of AI (Part 1) - Reaktor/University of Helsinki](https://www.elementsofai.com/) - An Introduction to AI is a free online course for everyone interested in learning what AI is, what is possible (and not possible) with AI, and how it affects our lives – with no complicated math or programming required.
* [Essential Natural Language Processing](https://www.manning.com/books/essential-natural-language-processing) - A hands-on guide to NLP with practical techniques, numerous Python-based examples and real-world case studies.
* [Kaggle's micro courses](https://www.kaggle.com/learn/overview) - A series of micro courses by offering practical and hands-on knowledge ranging from Python to Deep Learning.
* [Transfer Learning for Natural Language Processing](https://www.manning.com/books/transfer-learning-for-natural-language-processing?utm_source=github&utm_medium=organic&utm_campaign=book_azunre_transfer_3_10_20) - A book that gets you up to speed with the relevant ML concepts and then dives into transfer learning for NLP.
* (Stanford Deep Learning Series][https://www.youtube.com/playlist?list=PLoROMvodv4rOABXSygHTsbvUz4G_YQhOb]
* [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg/machinelearning-dg.pdf) - A book for ML developers which introduces the ML concepts & strategies with lots of practical usages.
* [Machine Learning for Humans](https://medium.com/machine-learning-for-humans/why-machine-learning-matters-6164faf1df12) - A series of simple, plain-English explanations accompanied by math, code, and real-world examples.

## Books

* [Machine Learning for Mortals (Mere and Otherwise)](https://www.manning.com/books/machine-learning-for-mortals-mere-and-otherwise) - Early access book that provides basics of machine learning and using R programming language.
* [How Machine Learning Works](https://livebook.manning.com/book/how-machine-learning-works/welcome/v-5) - Mostafa Samir. Early access book that introduces machine learning from both practical and theoretical aspects in a non-threating way. 
* [MachineLearningWithTensorFlow2ed](https://www.manning.com/books/machine-learning-with-tensorflow-second-edition) - a book on general purpose machine learning techniques regression, classification, unsupervised clustering, reinforcement learning, auto encoders, convolutional neural networks, RNNs, LSTMs, using TensorFlow 1.14.1.
* [Serverless Machine Learning](https://www.manning.com/books/serverless-machine-learning-in-action) - a book for machine learning engineers on how to train and deploy machine learning systems on public clouds like AWS, Azure, and GCP, using a code-oriented approach.
* [The Hundred-Page Machine Learning Book](http://themlbook.com/) - all you need to know about Machine Learning in a hundred pages, supervised and unsupervised learning, SVM, neural networks, ensemble methods, gradient descent, cluster analysis and dimensionality reduction, autoencoders and transfer learning, feature engineering and hyperparameter tuning.
* [Trust in Machine Learning](https://www.manning.com/books/trust-in-machine-learning) - a book for experienced data scientists and machine learning engineers on how to make your AI a trustworthy partner. Build machine learning systems that are explainable, robust, transparent, and optimized for fairness.

## Programming

* [Prolog Programming For Artificial Intelligence](http://www.amazon.com/Programming-Artificial-Intelligence-International-Computer/dp/0321417461) - This best-selling guide to Prolog and Artificial Intelligence concentrates on the art of using the basic mechanisms of Prolog to solve interesting AI problems.
* [AI Algorithms, Data Structures and Idioms in Prolog, Lisp and Java](http://www.amazon.co.uk/Algorithms-Data-Structures-Idioms-Prolog/dp/0136070477) - [PDF here](https://pdfs.semanticscholar.org/f5c3/d7dbe4c47e310569a14d2338d0cb3d70a1bb.pdf)
* [Python Tools for Machine Learning](https://www.cbinsights.com/blog/python-tools-machine-learning/)
* [Python for Artificial Intelligence](https://wiki.python.org/moin/PythonForArtificialIntelligence)

## Philosophy

* [Super Intelligence](http://www.audible.co.uk/pd/Non-fiction/Superintelligence-Audiobook/B00LPMA33G) - Superintelligence asks the questions: What happens when machines surpass humans in general intelligence. A really great book.
* [Our Final Invention: Artificial Intelligence And The End Of The Human Era](http://www.audible.co.uk/pd/Non-fiction/Our-Final-Invention-Audiobook/B00KLJMDH8) - Our Final Invention explores the perils of the heedless pursuit of advanced AI. Until now, human intelligence has had no rival. Can we coexist with beings whose intelligence dwarfs our own? And will they allow us to?
* [How to Create a Mind: The Secret of Human Thought Revealed](http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJS/ref=a_search_c4_1_1_srTtl?qid=1422483493&sr=1-1) - Ray Kurzweil, director of engineering at Google, explored the process of reverse-engineering the brain to understand precisely how it works, then applies that knowledge to create vastly intelligent machines.
* [Minds, Brains, And Programs](http://cogprints.org/7150/1/10.1.1.83.5248.pdf) - The 1980 paper by philosopher John Searle that contains the famous 'Chinese Room' thought experiment. Probably the most famous attack on the notion of a Strong AI possessing a 'mind' or a 'consciousness', and interesting reading for those interested in the intersection of AI and philosophy of mind.
* [Gödel, Escher, Bach: An Eternal Golden Braid](http://www.amazon.com/G%C3%B6del-Escher-Bach-Eternal-Golden/dp/0465026567) - Written by Douglas Hofstadter and taglined ""a metaphorical fugue on minds and machines in the spirit of Lewis Carroll"", this wonderful journey into the the fundamental concepts of mathematics,symmetry and intelligence won a Pulitzer Prize for Non-Fiction in 1979. A major theme throughout is the emergence of meaning from seemingly 'meaningless' elements, like 1's and 0's, arranged in special patterns.
* [Life 3.0: Being Human in the Age of Artificial Intelligence](https://www.goodreads.com/book/show/34272565-life-3-0) - Max Tegmark, professor of Physics at MIT, discusses how Artificial Intelligence may affect crime, war, justice, jobs, society and our very sense of being human both in the near and far future.

## Free Content

* [Foundations Of Computational Agents](http://artint.info/html/ArtInt.html) - This book is published by Cambridge University Press, 2010
* [The Quest For Artificial Intelligence](http://ai.stanford.edu/~nilsson/QAI/qai.pdf) - This book traces the history of the subject, from the early dreams of eighteenth-century (and earlier) pioneers to the more successful work of today's AI engineers.
* [Stanford CS229 - Machine Learning](https://see.stanford.edu/Course/CS229) - This course provides a broad introduction to machine learning and statistical pattern recognition.
* [Computers and Thought: A practical Introduction to Artificial Intelligence](http://www.cs.bham.ac.uk/research/projects/poplog/computers-and-thought/) - The book covers computer simulation of human activities, such as problem solving and natural language understanding; computer vision; AI tools and techniques; an introduction to AI programming; symbolic and neural network models of cognition; the nature of mind and intelligence; and the social implications of AI and cognitive science.
* [Society of Mind](http://aurellem.org/society-of-mind/index.html) - Marvin Minsky's seminal work on how our mind works. Lot of Symbolic AI concepts have been derived from this basis.
* [Artificial Intelligence and Molecular Biology](https://web.archive.org/web/20060627060706/http://www.biosino.org/mirror/www.aaai.org/Press/Books/Hunter/hunter-contents.html) - The current volume is an effort to bridge that range of exploration, from nucleotide to abstract concept, in contemporary AI/MB research.
* [Brief Introduction To Educational Implications Of Artificial Intelligence](http://pages.uoregon.edu/moursund/Books/AIBook/index.htm) - This book is designed to help preservice and inservice teachers learn about some of the educational implications of current uses of Artificial Intelligence as an aid to solving problems and accomplishing tasks.
* [Encyclopedia: Computational intelligence](http://www.scholarpedia.org/article/Encyclopedia:Computational_intelligence) - Scholarpedia is a peer-reviewed open-access encyclopedia written and maintained by scholarly experts from around the world.
* [Ethical Artificial Intelligence](http://arxiv.org/abs/1411.1373) - a book by Bill Hibbard that combines several peer reviewed papers and new material to analyze the issues of ethical artificial intelligence.
* [Golden Artificial Intelligence](https://golden.com/wiki/Cluster%3A_Artificial_intelligence) - a cluster of pages on artificial intelligence and machine learning.
* [R2D3](http://www.r2d3.us/) - A website with explanations on topics from Machine Learning to Statistics. All helped with beautiful animated infographics and real life examples. Available in various languages.
* [Modeling Agents with Probabilistic Programs](https://agentmodels.org/) - This book describes and implements models of rational agents for (PO)MDPs and Reinforcement Learning.

## Code

* [ExplainX](https://github.com/explainX/explainx)- ExplainX is a fast, light-weight, and scalable explainable AI framework for data scientists to explain any black-box model to business stakeholders.
* [AIMACode](https://github.com/aimacode) - Source code for ""Artificial Intelligence: A Modern Approach"" in Common Lisp, Java, Python. More to come.
* [FANN](http://leenissen.dk/fann/wp/) - Fast Artificial Neural Network Library, native for C
* [FARGonautica](https://github.com/Alex-Linhares/FARGonautica) - Source code of Douglas Hosftadter's Fluid Concepts and Creative Analogies Ph.D. projects.

## Videos

* [A tutorial on Deep Learning](http://videolectures.net/jul09_hinton_deeplearn)
* [Basics of Computational Reinforcement Learning](http://videolectures.net/rldm2015_littman_computational_reinforcement)
* [Deep Reinforcement Learning](http://videolectures.net/rldm2015_silver_reinforcement_learning)
* [Intelligent agents and paradigms for AI](https://youtu.be/7o2GzSj86e8?t=3457)
* [The Unreasonable Effectiveness Of Deep Learning](https://www.youtube.com/watch?v=sc-KbuZqGkI) - The Director of Facebook's AI Research, Dr. Yann LeCun gives a talk on deep convolutional neural networks and their applications to machine learning and computer vision
* [AWS Machine Learning in Motion](https://www.manning.com/livevideo/aws-machine-learning-in-motion)- This interactive liveVideo course gives you a crash course in using AWS for machine learning, teaching you how to build a fully-working predictive algorithm.
* [Deep Learning with R in Motion](https://www.manning.com/livevideo/deep-learning-with-r-in-motion)-Deep Learning with R in Motion teaches you to apply deep learning to text and images using the powerful Keras library and its R language interface.
* [Grokking Deep Learning in Motion](https://www.manning.com/livevideo/grokking-deep-learning-in-motion)-Grokking Deep Learning in Motion will not just teach you how to use a single library or framework, you’ll actually discover how to build these algorithms completely from scratch!
* [Reinforcement Learning in Motion](https://www.manning.com/livevideo/reinforcement-learning-in-motion) - This liveVideo breaks down key concepts like how RL systems learn, how to sense and process environmental data, and how to build and train AI agents. 

## Learning

* [Deep Learning. Methods And Applications](http://research.microsoft.com/pubs/209355/DeepLearning-NowPublishing-Vol7-SIG-039.pdf) Free book from Microsoft Research
* [Neural Networks And Deep Learning](http://neuralnetworksanddeeplearning.com) - Neural networks and deep learning currently provide the best solutions to many problems in image recognition, speech recognition, and natural language processing. This book will teach you the core concepts behind neural networks and deep learning
* [Machine Learning: A Probabilistic Perspective](http://www.amazon.com/Machine-Learning-Probabilistic-Perspective-Computation/dp/0262018020) - This textbook offers a comprehensive and self-contained introduction to the field of machine learning, based on a unified, probabilistic approach
* [Deep Learning](https://www.deeplearningbook.org) - Yoshua Bengio, Ian Goodfellow and Aaron Courville put together this currently free (and draft version) book on deep learning.  The book is kept up-to-date and covers a wide range of topics in depth (up to and including sequence-to-sequence learning).
* [Getting Started with Deep Learning and Python](http://www.pyimagesearch.com/2014/09/22/getting-started-deep-learning-python/)
* [Machine Learning Mastery](http://machinelearningmastery.com/)
* [Deep Learning.net](https://web.archive.org/web/20201114013453/http://deeplearning.net/) - Aggregation site for DL resources
* [Awesome Machine Learning](https://github.com/josephmisiti/awesome-machine-learning) - Like this Github, but ML-focused
* [FastML](http://fastml.com/)
* [Awesome Deep Learning Resources](https://github.com/guillaume-chevalier/awesome-deep-learning-resources) - Rough list of learning resources for Deep Learning
* [Professional and In-Depth Machine Learning Video Courses](https://freecoursesite.com/?s=Machine+Learning+Data+Science) - A collection of free professional and in depth Machine Learning and Data Science video tutorials and courses
* [Professional and In-Depth Artificial Intelligence Video Courses](https://freecoursesite.com/?s=Artificial+Intelligence) - A collection of free professional and in depth Artificial Intelligence video tutorials and courses
* [Professional and In-Depth Deep Learning Video Courses](https://freecoursesite.com/?s=Deep+Learning) - A collection of free professional and in depth Deep Learning video tutorials and courses
* [Introduction to Machine Learning](https://developers.google.com/machine-learning/crash-course/ml-intro) - Introductory level machine learning crash course
* [Awesome Graph Classification](https://github.com/benedekrozemberczki/awesome-graph-classification) - Learning from graph structured data
* [Awesome Community Detection](https://github.com/benedekrozemberczki/awesome-community-detection) - Clustering graph structured data
* [Awesome Decision Tree Papers](https://github.com/benedekrozemberczki/awesome-decision-tree-papers) - Decision tree papers from machine learning conferences
* [Awesome Gradient Boosting Papers](https://github.com/benedekrozemberczki/awesome-gradient-boosting-papers) - Gradient boosting papers from machine learning conferences
* [Awesome Fraud Detection Papers](https://github.com/benedekrozemberczki/awesome-fraud-detection-papers) - Fraud detection papers from machine learning conferences
* [Awesome Neural Art](https://github.com/crypdick/awesome-neural-art) - Creating art and manipulating images using deep neural networks.

## Organizations

* [IEEE Computational Intelligence Society](http://cis.ieee.org/)
* [Machine Intelligence Research Institute](https://intelligence.org/research-guide/)
* [OpenAI](https://openai.com/about/)
* [Association For The Advancement of Artificial Intelligence](http://www.aaai.org/home.html)
* [Google DeepMind Research](https://deepmind.com/research/)
* [Nvidia Deep Learning](https://developer.nvidia.com/deep-learning)
* [AI Google](https://ai.google/)
* [Facebook AI](https://ai.facebook.com)
* [IBM Research](https://www.research.ibm.com/artificial-intelligence)
* [Microsoft Research](https://www.microsoft.com/en-us/research/research-area/artificial-intelligence/)

## Journals

* [AI & Society](http://www.springer.com/journal/146)
* [AI Communications](http://iospress.metapress.com/openurl.asp?genre=journal&issn=0921-7126)
* [AI Magazine](http://www.aaai.org/Magazine/magazine.php)
* [Annals of Mathematics and Artificial Intelligence](http://www.springer.com/journal/10472)
* [Applicable Algebra in Engineering, Communication and Computing](http://www.springer.com/journal/200)
* [Applied Artificial Intelligence](https://www.tandfonline.com/toc/uaai20/current)
* [Applied Intelligence](http://www.springer.com/journal/10489)
* [Artificial Intelligence for Engineering Design, Analysis and Manufacturing](http://journals.cambridge.org/action/displayJournal?jid=AIE)
* [Artificial Intelligence Review](http://www.springer.com/journal/10462)
* [Artificial Intelligence](http://www.elsevier.com/locate/artint)
* [Automated Software Engineering](http://www.springer.com/journal/10515)
* [Autonomous Agents and Multi-Agent Systems](http://www.springer.com/journal/10458)
* [Computational and Mathematical Organization Theory ](http://www.springer.com/journal/10588)
* [Computational Intelligence](http://www.blackwellpublishing.com/content/BPL_Images/New_Journal_Samples/coin0824-7935~17~4/C.PDF)
* [Electronic Transactions on Artificial Intelligence](https://dblp.org/db/journals/etai/index.html)
* [Evolutionary Intelligence](http://www.springer.com/journal/12065)
* [EXPERT—IEEE Intelligent Systems](http://ieeexplore.ieee.org/servlet/opac?punumber=9670)
* [IEEE Transactions Automation Science and Engineering](http://www.ieee-ras.org/publications/t-ase)
* [Intelligent Industrial Systems](http://www.springer.com/engineering/robotics/journal/40903)
* [International Journal of Intelligent Systems](https://onlinelibrary.wiley.com/journal/1098111x)
* [International Journal on Artificial Intelligence Tools](https://www.worldscientific.com/worldscinet/ijait)
* [Journal of Artificial Intelligence Research](http://www.cs.washington.edu/research/)
* [Journal of Automated Reasoning](http://www.springer.com/journal/10817)
* [Journal of Experimental and Theoretical Artificial Intelligence ](https://www.tandfonline.com/toc/teta20/current)
* [Journal of Intelligent Information Systems ](http://www.springer.com/journal/10844)
* [Journal on Data Semantics ](http://www.springer.com/journal/13740)
* [Knowledge Engineering Review](http://journals.cambridge.org/action/displayJournal?jid=KER)
* [Minds and Machines](http://www.springer.com/journal/11023)
* [Progress in Artificial Intelligence ](http://www.springer.com/journal/13748)


## Competitions

* [MIT Battlecode](https://www.battlecode.org/)
* [AI Challenge](http://aichallenge.org)
* [AI Games](http://theaigames.com)

## Newsletters

* [AI Digest](https://aidigest.net/). A weekly newsletter to keep up to date with AI, machine learning, and data science. [Archive](https://aidigest.net/digests).

## Misc

* [Open Cognition Project](http://wiki.opencog.org/w/The_Open_Cognition_Project) - We're undertaking a serious effort to build a thinking machine
* [AITopics](http://aitopics.org/) - Large aggregation of AI resources
* [AIResources](http://airesources.org/) - Directory of open source software and open access data for the AI research community
* [Artificial Intelligence Subreddit](https://www.reddit.com/r/artificial/)
* [AI Experiments with Google](https://experiments.withgoogle.com/collection/ai)

## License

[![CC0](http://i.creativecommons.org/p/zero/1.0/88x31.png)](http://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [Owain Lewis](http://owainlewis.com) has waived all copyright and related or neighboring rights to this work.
","This is a curated list of Artificial Intelligence (AI) courses, books, video
lectures and papers. The list is organized into categories: Courses, Books,
Programming, Philosophy, Organizations, Competition and Misc. We would like to
hear from you about your favorite courses."
1563,"Making sense of web3 & crypto. Introduction to key concepts and ideas. Rigorous, constructive analysis of key claims pro and con. A look at the deeper hopes and aspirations.","# Awesome critique of crypto/web3

Awesome critique of crypto/web3, etc. Contributions are welcome.

## Critique

### General

* [The problem with NFTs](https://www.youtube.com/watch?v=YQ_xWvX1n9g) - 2022-01-21 - by Dan Olson (Documentary) 📺 [👉 Highly recommended 👈]
  * [Three things Web3 should fix in 2022](https://www.theverge.com/2022/1/28/22906010/web3-nft-internet-history-video-platformer) a response to The Problem with NFTs - 28 Jan 2022
* Stephen Diehl series - https://www.stephendiehl.com/blog.html
  * [The Case Against Crypto](https://www.stephendiehl.com/blog/against-crypto.html) - December 31, 2021
  - [Blockchainism](https://www.stephendiehl.com/blog/blockchainism.html) - December 11, 2021
  - [Web3 is Bullshit](https://www.stephendiehl.com/blog/web3-bullshit.html) - December 4, 2021
  - [The Internet's Casino Boats](https://www.stephendiehl.com/blog/casino-boats.html) - December 1, 2021
  - [The Token Disconnect](https://www.stephendiehl.com/blog/disconnect.html) - November 27, 2021
  - [The Handwavy Technobabble Nothingburger](https://www.stephendiehl.com/blog/nothing-burger.html) - November 24, 2021
  - [Ice-Nine for Markets](https://www.stephendiehl.com/blog/ice-nine.html) - November 23, 2021
  - [The Tinkerbell Griftopia](https://www.stephendiehl.com/blog/tinkerbell.html) - November 19, 2021
  - [Decentralized Woo Hoo](https://www.stephendiehl.com/blog/decentralized-woo.html) - November 16, 2021
  - [The Intellectual Incoherence of Cryptoassets](https://www.stephendiehl.com/blog/crypto-absurd.html) - November 7, 2021
  - [On Unintentional Scams](https://www.stephendiehl.com/blog/crypto-scams.html) - July 23, 2021
  - [How to Destroy Bitcoin](https://www.stephendiehl.com/blog/destroy-bitcoin.html) - July 13, 2021
  - [The Non-Innovation of Cryptocurrency](https://www.stephendiehl.com/blog/non-innovation.html) - July 7, 2021
  - [The Oncoming Ransomware Storm](https://www.stephendiehl.com/blog/ransomware.html) - May 11, 2021
  - [Et tu, Signal?](https://www.stephendiehl.com/blog/signal.html) - April 7, 2021
  - [The Political Case for a Blanket Cryptocurrency Ban](https://www.stephendiehl.com/blog/banbitcoin.html) - March 30, 2021
  - [Bitcoin: The Postmodern Ponzi](https://www.stephendiehl.com/blog/ponzi.html) - February 27, 2021
  - [The Crypto Chernobyl](https://www.stephendiehl.com/blog/chernobyl.html) - February 10, 2021
  - [Gamestop, Bitcoin and the Commoditization of Populist Rage](https://www.stephendiehl.com/blog/gamestop.html) - February 3, 2021
* [Today on Sick Sad World: How The Cryptobros Have Fallen](https://www.jwz.org/blog/2022/01/today-on-sick-sad-world-how-the-cryptobros-have-fallen/) - 2022-01-04 by Jamie Zawinski (legendary coder, co-founder of Mozilla etc.)
* [Web3 First Impressions](https://moxie.org/2022/01/07/web3-first-impressions.html) - 2022-01-07 Moxie Marlinspike, co-founder of Signal etc.
* [Bitcoin, Currencies, and Fragility by Nassim Taleb - 27 Jun 2021](https://arxiv.org/abs/2106.14204) - highly critical paper by author Black Swan etc.
* https://watershed.co.uk/studio/news/2021/12/03/case-against-crypto
* [The European Money and Finance Forum - The encrypted threat: Bitcoin’s social cost and regulatory responses](https://web.archive.org/web/20220107084533/https://www.suerf.org/docx/f_88b3febc5798a734026c82c1012408f5_38771_suerf.pdf) - Jan 2022. A comprehensive study by SUERF - The European Money and Finance Forum that details the net negative effects of bitcoin to society.
* [The Third Web](https://tante.cc/2021/12/17/the-third-web/) - 2021-12-17 - long critical essay including detailed history by [Tante](https://twitter.com/tante)
* [Tante's Web3/NFT FAQ](https://tante.cc/2022/02/09/tantes-blockchain-web3-faq/)
* https://rufuspollock.com/2016/07/02/reflections-on-the-blockchain/ - 2016-07-02 - by Rufus Pollock (mainly a critique of early DAOs and techno-solutionism)
* [Web3 takes trust, too](https://www.bloomberg.com/opinion/articles/2022-01-10/web3-takes-trust-too) - 2022-01-10 by Matt Levine on Bloomberg.com
* [Revolution Now! With Peter Joseph | Bitcoin and Financialization](https://youtu.be/bsghxd1cdeA) - May 21, 2021
* [The Web3 Fraud](https://www.usenix.org/publications/loginonline/web3-fraud) - 2021-12-16 by Nicholas Weaver on usenix.com
* Molly White series - https://blog.mollywhite.net/blockchain/
  * [Blockchain-based systems are not what they say they are](https://blog.mollywhite.net/blockchains-are-not-what-they-say/)
  * [It's not still the early days](https://blog.mollywhite.net/its-not-still-the-early-days/)
  * [Abuse and harassment on the blockchain](https://blog.mollywhite.net/abuse-and-harassment-on-the-blockchain/)
  * [Anonymous cryptocurrency wallets are not so simple](https://blog.mollywhite.net/anonymous-crypto-wallets/)
  * [Cryptocurrency off-ramps, and the pressure towards centralization](https://blog.mollywhite.net/off-ramps/)
  * [Cryptocurrency’s Robinhood effect](https://blog.mollywhite.net/cryptocurrencys-robinhood-effect/)
  * [Abuse on the blockchain – Guest lecture at Stanford University](https://www.youtube.com/watch?v=hXBZ-BXfCSY)
* [Against Web3 and Faux-Decentralization](https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/) - 2021-10-19 by Soatok
* [The technological case against Bitcoin and blockchain](https://lukeplant.me.uk/blog/posts/the-technological-case-against-bitcoin-and-blockchain/) - 2022-03-05 by Luke Plant
* [The Case Against Crypto](https://www.watershed.co.uk/studio/news/2021/12/03/case-against-crypto) - 2021-12-03 by Martin O'Leary
* [The Case Against Bitcoin](https://bariweiss.substack.com/p/the-case-against-bitcoin?s=r) - 2021-05-14 by Michael W. Green. A portfolio manager discusses the case against bitcoin from a financial and geopolitical perspective.
* [The Register: The dark equation of harm versus good means blockchain’s had its day](https://www.theregister.com/2021/12/06/the_dark_equation_of_harm/) - 2021-12-06
* [Blockchains and Cryptocurrencies: Burn It With Fire](https://www.youtube.com/watch?v=xCHab0dNnj4) - 2018-04-20 by Nicholas Weaver 📺 Nicholas Weaver is a staff researcher with the International Computer Science Institute (ICSI) and lecturer in EECS, where he teaches machine structures and computer security. He earned his Ph.D. in computer science from Berkeley in 2003 and joined ICSI to study network security and measurement. ""The entire cryptocurrency and blockchain ecology is rife with frauds, criminalities, and tulip-mania style hype and needs to be properly disposed of into the ashes of history. A “blockchain” is just a horribly inefficient append-only file which costs a literal fortune to secure without actually providing meaningful distributed trust, while cryptocurrencies are provably inferior than actual currencies for legal real world transactions. Beyond the sheer uselessness have emerged a whole host of bad ideas, ranging from the “put a bird^H^H^H^H blockchain on it” hype to unregistered (and mostly fraudulent) securities with “Initial Coin Offerings” to an invitation for massive theft in the form of “smart” contracts.""
* [Ross Anderson et al: Bitcoin Redux: crypto crime, and how to tackle it](https://www.lightbluetouchpaper.org/2018/06/01/bitcoin-redux-crypto-crime-and-how-to-tackle-it/) ([full paper](https://weis2018.econinfosec.org/wp-content/uploads/sites/5/2018/05/WEIS_2018_paper_38.pdf))- 2018-06-01 - Anderson is a Professor of Security Engineering at the University Cambridge. Bitcoin Redux explains what’s going wrong in the world of cryptocurrencies. The bitcoin exchanges are developing into a shadow banking system, which do not give their customers actual bitcoin but rather display a ""balance"" and allow them to transact with others. However if Alice sends Bob a bitcoin, and they’re both customers of the same exchange, it just adjusts their balances rather than doing anything on the blockchain. This is an e-money service, according to European law, but is the law enforced? Not where it matters. We’ve been looking at the details.
  * [Ross Anderson: Why Bitcoin is Not Cash](https://www.youtube.com/watch?v=p9HH_dFcoLc) - 2018-04-10 - 📺 walks through why bitcoin is not cash and the complex legal questions it would need to deal with if it wanted to be.
  * [Ross Anderson: Tracing Stolen Bitcoin](https://www.youtube.com/watch?v=UlLN0QERWBs) - 2018-03-23 - 📺
* [Simon Wardley: A Spoiler for the Future of Bitcoin](https://blog.gardeviance.org/2013/11/a-spoiler-for-future-bitcoin.html) - 2013-11-27 - ""As you can guess, I'm not a fan of bitcoin. If left unchecked then I find it has the potential to undermine the importance of Government which is actually not good for competition and not good for the market. I hope none of the above happens and would rather see bitcoin disappear in a puff of history."" (NB: he predicts massive appreciation in bitcoin and is concerned how it can undermine government and tax revenue.)
* Kai Stinchcombe series that discusses whether blockchain can solve various real world use-cases better than traditional technologies
  - [Kai Stinchcombe: Ten years in, nobody has come up with a use for blockchain](https://hackernoon.com/ten-years-in-nobody-has-come-up-with-a-use-case-for-blockchain-ee98c180100) - 2017-12-23 - ""Each purported use case — from payments to legal documents, from escrow to voting systems—amounts to a set of contortions to add a distributed, encrypted, anonymous ledger where none was needed. What if there isn’t actually any use for a distributed ledger at all? What if, ten years after it was invented, the reason nobody has adopted a distributed ledger at scale is because nobody wants it?""
  - [Kai Stinchcombe: Blockchain is not only crappy technology but a bad vision for the future](https://medium.com/@kaistinchcombe/decentralized-and-trustless-crypto-paradise-is-actually-a-medieval-hellhole-c1ca122efdec) - 2018-05-04 - ""Blockchain is not only crappy technology but a bad vision for the future. Its failure to achieve adoption to date is because systems built on trust, norms, and institutions inherently function better than the type of no-need-for-trusted-parties systems blockchain envisions. That’s permanent: no matter how much blockchain improves it is still headed in the wrong direction.""
* [Cory Doctorow: When crypto-exchanges go broke, you'll lose it all](https://pluralistic.net/2022/02/03/liquidation-preference/#we-live-in-a-society) - 2022-02-03. Why state backed money is a good thing (a feature not a bug).
  > If you've spent much time around cryptocurrency people, you've probably heard a rant or two about ""sound money"" and the need to ""depoliticize money."" This is a foundation of blockchainism: the belief that money is born separate from states, and states invade on the private realm when they ""meddle"" in the money system.
  >
  > There are at least two serious problems with this ideology. First, it's plain wrong on the historical facts. Money did not emerge from barter systems among people. Money was and is a product of state.
  >
  > But even if you stipulate that money didn't originate among private markets there's another serious historical problem with ""sound money."" ... It's this: central banks didn't emerge to usurp the private sector's control over money. Central banks were created because without them, finance was subject to wild, terrifying, ruinous boom/bust cycles. What's more, without a central bank, money was subject to naked political meddling, which central banks (sometimes) moderated.
* Internet pioneer/Silicon Valley legend Tim O'Reilly on Web3:
  - [Why it’s too early to get excited about Web3](https://www.oreilly.com/radar/why-its-too-early-to-get-excited-about-web3/) - 2021-12-13
  - [""Get ready for the crash""](https://www.cbsnews.com/news/cryptocurrency-nft-blockchain-web3-tim-oreilly/) - CBS Money Watch - 2022-02-09
  - [Crypto and NFTs are ""Pretty Serious Speculative Bubble""](https://decrypt.co/92676/internet-guru-tim-oreilly-crypto-nfts-serious-speculative-bubble) - 2022-02-10
* [David Rosenthal: Can We Mitigate Cryptocurrencies' Externalities?](https://blog.dshr.org/2022/02/ee380-talk.html) - 2022-02-09. Having built a decentralized consensus system using Proof-of-Work (http://dx.doi.org/10.1145/945445.945451) the author has the technical knowledge to explain the design faults and limitations of permissionless blockchain systems, as well as highlighting the economic and environmental issues. Summary of critique:
  > * That the externalities I describe don't exist. You'll have a hard time proving that the waste of electricity and hardware, and the crime wave, are imaginary.
  > * That although the externalities do exist, the benefits of decentralization outweigh them. The problem here is that since the systems are not actually decentralized, we get the externalities but don't get the benefits.
  > * That although the externalities do exist, and the systems aren't dencentralized, they're making so much money that we shouldn't worry. The problem here is that the amount of actual money you can get out of a cryptocurrency equals the amount of actual money that has been put in, minus the actual costs of mining. So the big picture is that although there may be winners, in aggregate the system loses money.
  * [Economies of Scale in Peer-to-Peer Networks](https://blog.dshr.org/2014/10/economies-of-scale-in-peer-to-peer.html) - 2014-10-07. Network effects lead to centralization in p2p (e.g. Bitcoin) and no good way to mitigate this.
* [Charlie Stross: Why I want Bitcoin to Die in Fire](https://www.antipope.org/charlie/blog-static/2013/12/why-i-want-bitcoin-to-die-in-a.html) - 2013-12
* [The Maltese Falcon](https://privatebank.jpmorgan.com/content/dam/jpm-wm-aem/global/pb/en/insights/eye-on-the-market/the-maltese-falcoin.pdf) - critique of bitcoin and financial properties of crypto assets from the CIO of JP Morgan bank. 2021-02-10
* [Vivaldi CEO: Why Vivaldi will never create ThinkCoin](https://vivaldi.com/blog/why-vivaldi-will-never-create-thinkcoin/) - 2022-01-13 - Jon von Tetzchner: “if you look beyond the hype, you’ll find nothing more than a pyramid scheme posing as currency.”
* [Centralizing Control: Why Bitcoin is Dangerous](https://salbayat.org/centralizing-control-why-bitcoin-is-dangerous/) - 2022-04-02 - Sal Bayat: “Democratic governance is fundamentally incompatible with existing cryptocurrency systems as they can only represent the interests of those in control of the system.”

### Economists

* Stephanie Kelton [Cryptocurrency and Fiat Money](https://www.youtube.com/watch?v=84wTEf9Acik) - 2017-12-23
* Richard Thaler [Economics Nobel prize winner, Richard Thaler: “The market that looks most like a bubble to me is Bitcoin and its brethren”](https://econews.pt/2018/01/22/economics-nobel-prize-winner-richard-thaler-the-market-that-looks-most-like-a-bubble-to-me-is-bitcoin-and-its-brethren/) - 2018-01-22
* Various ['Only good for drug dealers': More Nobel prize winners snub bitcoin](https://finance.yahoo.com/news/good-drug-dealers-nobel-prize-winners-snub-bitcoin-184903784.html?ref=hackernoon.com) - 2018-04-27
* Robert Shiller [The Old Allure of New Money](https://www.project-syndicate.org/commentary/cryptocurrencies-scientific-narrative-by-robert-j--shiller-2018-05?barrier=accesspay) - 2018-05-21
* Abhijit Banerjee [Nobel Prize Winning Economist Abhijit Banerjee: Is Blockchain the Key to Financial Inclusion?](https://blockchain.news/news/nobel-prize-winning-economist-abhijit-banerjee-is-blockchain-the-key-to-financial-inclusion) - 2020-01-20
* Steve Keen [Cryptocurrencies, Debt, and the Economy: Steve Keen interviewed by Layne Hartsell](http://www.koreaittimes.com/news/articleView.html?idxno=103792) - 2021-02-17
* Amartya Sen [Prannoy Roy's Townhall With Amartya Sen On Economy, Farm Laws: Full Transcript ](https://www.ndtv.com/india-news/prannoy-roys-townhall-with-amartya-sen-on-indian-economy-farm-laws-full-transcript-2385071) - 2021-03-06
* Jeffrey Sachs [Famed economist Jeffrey Sachs rails against Bitcoin: Highly polluting and ‘almost like counterfeiting’](https://fortune.com/2021/03/16/bitcoin-jeffrey-sachs-critiques-btc/) - 2021-03-16
* Paul Krugman [Technobabble, Libertarian Derp and Bitcoin](https://nytimes.com/2021/05/20/opinion/cryptocurrency-bitcoin.html) - 2021-05-20
* Tyler Cowen [What the Crypto Crowd Doesn't Understand About Economics](https://www.bloomberg.com/opinion/articles/2021-06-21/what-the-crypto-crowd-doesn-t-understand-about-economics) - 2021-06-20
* Yanis Varoufakis [What is money, really? And why Bitcoin is not the answer (even if blockchain is brilliant & potentially helpful in democratising money)](https://www.yanisvaroufakis.eu/2021/08/02/what-is-money/)  - 2021-08-02
* Daron Acemoğlu [The Bitcoin Fountainhead](https://www.project-syndicate.org/commentary/bitcoin-an-appealing-distraction-by-daron-acemoglu-2021-10?barrier=accesspay) - 2021-10-05
* Joseph Stiglitz [Nobel Prize Economist Joseph Stiglitz Calls Regulators to Ban Cryptocurrencies](https://deep-resonance.org/2021/10/28/nobel-prize-economist-joseph-stiglitz-calls-regulators-to-ban-cryptocurrencies/) - 2021-10-28
* Richard Thaler [Economics Nobel prize winner, Richard Thaler: “The market that looks most like a bubble to me is Bitcoin and its brethren”](https://econews.pt/2018/01/22/economics-nobel-prize-winner-richard-thaler-the-market-that-looks-most-like-a-bubble-to-me-is-bitcoin-and-its-brethren/) - 2018-01-22
* Yanis Varoufakis [Yanis Varoufakis on Crypto & the Left, and Techno-Feudalism](https://the-crypto-syllabus.com/yanis-varoufakis-on-techno-feudalism/) - 2022-01-26
* Tyler Cowen [The Crypto Crash Strengthens the Case for Crypto](https://www.bloombergquint.com/gadfly/crypto-crash-strengthens-case-for-crypto-s-long-term-future) - 2022-01-27
* Jesse Frederik [Blockchain, the amazing solution for almost nothing](https://thecorrespondent.com/655/blockchain-the-amazing-solution-for-almost-nothing/84495599980-95473476) - 2020-08-21 - ""Blockchain technology is going to change everything: the shipping industry, the financial system, government … in fact, what won’t it change? But enthusiasm for it mainly stems from a lack of knowledge and understanding. The blockchain is a solution in search of a problem.""
* [Vice: ‘Crypto Ruined My Life’: The Mental Health Crisis Hitting Bitcoin Investors](https://www.vice.com/en/article/akvn8z/crypto-bad-for-mental-health) - 2022-02-16 - The stress and anxiety that goes with funneling your life savings into a volatile market is no joke.
* [Ed Zitron: Solutions That Create Problems](https://ez.substack.com/p/solutions-that-create-problems) - 2022-02-22 - [The thing about Web3 is that it is uniquely useless. I have actively searched for an explanation as to why it's the future, what products it would allow us to build, what sort of *good* it would provide, and I cannot even at my most optimistic find a real use case](https://twitter.com/edzitron/status/1495891031979704321)

### Ponzi aspect

* [Financial Times: Why bitcoin is worse than a Madoff-style Ponzi scheme](https://web.archive.org/web/20220113183816/https://www.reddit.com/r/CryptoReality/comments/rm78e3/financial_times_why_bitcoin_is_worse_than_a/) - 2021-12-22. A Ponzi scheme is a zero-sum enterprise. But bitcoin is a negative-sum phenomenon that you can’t even pursue a claim against, argues Robert McCauley. [Original](https://ft.com/content/83a14261-598d-4601-87fc-5dde528b33d0)
* [Seattle Times: Bitcoin is basically a Ponzi scheme](https://seattletimes.com/opinion/bitcoin-is-basically-a-ponzi-scheme/) - 2018-01-30
* [Bitcoin is a Ponzi](https://ic.unicamp.br/~stolfi/bitcoin/2020-12-31-bitcoin-ponzi.html) - 2020-12-13 by Prof Jorge Stolfi
* [Financial Times: Albanian lessons for regulators nervously eyeing the crypto world](https://www.ft.com/content/810367e5-e0b1-4221-b303-f3012a177437) - 2021-07-05 - Albania’s 1990s pyramid scheme debacle highlights risks of regulatory paralysis on the cryptocurrency explosion
  > Once upon a time in Albania, a scrappy, alternative finance industry emerged to take on and eventually supplant a sclerotic, technologically-backward banking system. The lessons from its dramatic collapse remain relevant today. 
  >
  > Essentially, what was initially touted as a post-communist entrepreneurial success story proved to be pyramid schemes of breathtaking proportions. Slick marketing and lofty promises turned an informal, decentralised, crime-facilitating ecosystem into a mainstream mania that sucked in multitudes of people, unchecked by feeble and fitful regulatory warnings.
* [Jacobin: Cryptocurrency Is a Giant Ponzi Scheme](https://jacobinmag.com/2022/01/cryptocurrency-scam-blockchain-bitcoin-economy-decentralization) - 2022-01-21

### Crypto and energy consumption

* [Bitcoin Energy Consumption Index](https://digiconomist.net/bitcoin-energy-consumption)
* [Why Bitcoin Is Bad For The Environment](https://newyorker.com/news/daily-comment/why-bitcoin-is-bad-for-the-environment) - 2021-04-22
* [Energy power usage CryptoArt, ETH, Blockchain spreadsheet](https://docs.google.com/spreadsheets/d/1hzzxMbytOZ1mYl9kLh_SvM6kne6JI_mdCfHIoNapr5M/edit#gid=0)
* [How Do We Solve Bitcoin's Energy Problem?](https://www.theguardian.com/technology/2022/jan/30/how-do-we-solve-bitcoins-carbon-problem) - 2022-01-30

### Scams/frauds

* [People Building ‘Blockchain City’ in Wyoming Scammed by Hackers - Vice](https://www.vice.com/en/article/k7w3am/people-building-blockchain-city-in-wyoming-scammed-by-hackers) - 2022-01-12 - On Monday, CityDAO—the group that bought 40 acres of Wyoming in hopes of ""building a city on the Ethereum blockchain”—announced that its Discord server was hacked and members' funds were successfully stolen as a result.
* [Web3 is going just great](https://web3isgoinggreat.com/) - A timeline of scams related to cryptocurrencies, NFTs, and web3 projects since the beginning of 2021 by Molly White

### DAOs

* [Is The DAO going to be DOA?](https://steemit.com/crypto-news/@dan/is-the-dao-going-to-be-doa) - 2016-05-16 - by Dan Larimer (founder of BitShares and much else). Larimer sets out most of the basic critiques of DAOs as governance innovation extremely well:
  > Fancy technology can obscure our assessment of what is really going on. The DAO solves a single problem: the corrupt trustee or administrator. It replaces voluntary compliance with a corporation’s charter under threat of lawsuit, with automated compliance with software defined rules. This subtle change may be enough to bypass regulatory hurdles facing traditional trustee’s and administrators, but it doesn’t solve most of the problems the regulations were attempting to address.
  >
  > What The DAO doesn’t solve is all of the other problems inherent with any joint venture. These are people problems, economic problems, and political problems. In some sense, The DAO creates many new problems caused by its ridged rules and expensive machine-enforced process for change.
  >
  > The DAO doesn’t solve the “group trap” where by losers subsidize winners. It disempowers the individual actor and forces him to submit to group decision making. It doesn’t make raising money cheaper for companies, it just adds blockchain-enforced bureaucratic and political processes.
* [DAOs and the nature of human collaboration](https://world.hey.com/marin/daos-and-the-nature-of-human-collaboration-be162918) - 2021-08-12 by Marin Petrov. A critique of DAOs and technosolutionism.

### NFTs

Non-fungible tokens.

* [OpenSea, Web3, and Aggregation Theory](https://stratechery.com/2022/opensea-raises-money-bans-nfts-openseas-value-cryptos-aggregators/) - 2022-01-05 - Ben Thompson of Stratechery
* [Brian Eno on NFTs & Automaticism](https://the-crypto-syllabus.com/brian-eno-on-nfts-and-automatism/)
* [Detailed twitter thread by @NFTEthics alleging fraudulent or close to fraudulent behaviour by a major NTF influencer named BeanieMaxi ](https://twitter.com/NFTethics/status/1483051289022017538) - 2022-01-17 ([cached](./assets/Thread by @NFTethics re beaniemaxi.pdf))
* [Jacobin: NFTs Are, Quite Simply, Bullshit](https://jacobinmag.com/2022/01/nfts-fallon-paris-hilton-bored-ape-digital-imagery-commodification) - 2022-01-26

### Specific use cases

* Event ticketing: [NFT tickets — a realistic look at a big trend](https://medium.com/@ticketpark/nft-tickets-a-realistic-look-at-a-big-trend-ae813d6f885d) – 2021-12-14
* NFT games: [“Play-to-earn” and Bullshit Jobs](https://paulbutler.org/2021/play-to-earn-and-bullshit-jobs/) - December 28, 2021 by Paul Butler - An interesting reflexion linking web3's ""Play-to-earn"" concept to David Graeber's [Bullshit Jobs](https://en.wikipedia.org/wiki/Bullshit_Jobs)
* NFT games: [Crypto Games: Report from hell](https://www.youtube.com/watch?v=YHz0xpU5Tu8) - Good video reviewing and discussing crypto games

### Humour

* [Crypto Curious](https://www.youtube.com/watch?v=N8f-BQFo7lw) - South Park on NFTs - 2021-12-21
* [N-FT: Non-Functioning Tower](https://www.nonfunctioningtower.com) - NFT satire - 2022-03-07
* [“a normal person explains cryptocurrency”](https://twitter.com/avalonpenrose/status/1473753174787772418) by Avalon Penrose - 2021-12-22
* [“my crypto friend calls me every day and this is what he sound like”](https://www.youtube.com/watch?v=TUB9jgMuC7U) by Flula - 2021-02-22
* [The Billion-Dollar Bitcoin Scam](https://www.youtube.com/watch?v=YCuGpfMSmck) - Ordinary Things - 2020-05-31 - “What is Bitcoin? Is Bitcoin a scam? And how did Bitcoin become what it is today? Who was the Dread Pirate Roberts and what happened to the Silk Road?”
* [Cryptocurrencies: Last Week Tonight with John Oliver (HBO)](https://www.youtube.com/watch?v=g6iDZspbRMg) - 2018-03-12
* [Don’t Understand Bitcoin? This Man Will Mumble An Explanation At You](https://www.youtube.com/watch?v=4APcgsRdW6w) by ClickHole - 2015-07-7
* [If Cryptocurrency was Honest](https://www.youtube.com/watch?v=GUs5y9leCyA)
* [If NFTs were Honest](https://www.youtube.com/watch?v=sG_v4bb2e4k)
* [Brave New Web](https://medium.com/coinmonks/brave-new-web-7bae50e916eb) - ani utopian Web3 satire by Nikolay Vlasov - 2022-04-10

### Twitter users

Whilst these users may not solely discuss crypto or web3, they do discuss it regularly, and have consistently provided well-written critique.

* https://twitter.com/web3isgreat
* https://twitter.com/ncweaver
* https://twitter.com/molly0xFFF
* https://twitter.com/smdiehl
  - [Crypto Criticism Threads](https://gist.github.com/sdiehl/7706ef44d951a2025fd658d1dd8687af)
* https://twitter.com/rufuspollock
* https://twitter.com/troll_lock
* https://twitter.com/CasPiancey -""Under promise, under deliver"" co-host @cryptocriticpod *opinions are mine, not my employer* odds and ends @protos hold no crypto or crypto stonks
* https://twitter.com/BennettTomlin - I do data science and track down frauds | 74% backed | Co-host @CryptoCriticPod | Writing @fud_letter | Discord: https://discord.gg/YpAUqNkhSC
* https://twitter.com/SilvermanJacob (staff writer New Republic) & https://twitter.com/ben_mckenzie - ""apparently I now write about crypto""
* https://twitter.com/doctorow

### Tether, and other stablecoins

* [Bennett Tomlin: Tether and Bitfinex Introduction](https://bennettftomlin.com/2021/08/08/tether-and-bitfinex-introduction/) - 2021-08-10 - Tether and Bitfinex are two of the most important companies in the cryptocurrency ecosystem. Tether is the largest stablecoin, and the primary driver of volume and liquidity. Bitfinex used to be the largest cryptocurrency exchange, and still is a frequently used exchange. Tether and Bitfinex have an incredibly problematic past and are quite possibly the largest corporate fraud in history.
  * Detailed overview of Tether and Bitfinex and their connection.
* [Tether Papers: This is exactly who acquired 70% of all USDT ever issued](https://protos.com/tether-papers-crypto-stablecoin-usdt-investigation-analysis/) - 2021-11-10
* [Bloomberg: Tether’s Latest Black Eye Is CFTC Fine for Lying About Reserves](https://www.bloomberg.com/news/articles/2021-10-15/tether-bitfinex-to-pay-fines-totaling-42-5-million-cftc-says) - 2021-10-15 - Biggest stablecoin issuer hit with $41 million penalty. Affiliated crypto exchange Bitfinex also fined $1.5 million.
* [Bloomberg: Anyone Seen Tether’s Billions?](https://www.bloomberg.com/news/features/2021-10-07/crypto-mystery-where-s-the-69-billion-backing-the-stablecoin-tether) - 2021-10-07 - A wild search for the U.S. dollars supposedly backing the stablecoin at the center of the global cryptocurrency trade—and in the crosshairs of U.S. regulators and prosecutors. [paywalled] ([cached](./assets/anyone-seen-tethers-billions.pdf))
* [Bloomberg: Tether Fails to Dispel Mystery on Stablecoin’s Crucial Reserves](https://www.bloomberg.com/news/articles/2021-12-03/tether-gives-more-details-on-assets-backing-crypto-stablecoin) - 2021-12-03 - Holding include $30.6 billion in commercial paper and CDs. About $1 billion moved from reverse repo notes to money funds

### Central Bank Digital Currencies

* [Money and Payments: The U.S. Dollar in the Age of Digital Transformation](https://www.federalreserve.gov/publications/money-and-payments-discussion-paper.htm) - provides a high level overview of the current state of central bank and private sector currencies in the US, and identifies risks and challenges with the implementation of a central bank digital currency. From the paper summary: ""The paper summarizes the current state of the domestic payments system and discusses the different types of digital payment methods and assets that have emerged in recent years, including stablecoins and other cryptocurrencies. It concludes by examining the potential benefits and risks of a CBDC, and identifies specific policy considerations.""

### Trading/Market Microstructure/Security Risks

* [Quantifying Blockchain Extractable Value: How dark is the forest?](https://arxiv.org/abs/2101.05511) - Qin et al., 2021. Technical paper characterizing and quantifying miner extracted value on Ethereum's DeFi smart contracts.
* [High-Frequency Trading on Decentralized On-Chain Exchanges](https://arxiv.org/abs/2009.14021) - Zhou et al., 2020. Technical paper detailing the ""front-running"" that occurs on Ethereum.
* [An Anatomy of Bitcoin Price Manipulation](https://www.singlelunch.com/2022/01/09/an-anatomy-of-bitcoin-price-manipulation/) - Matt Ranger, 2022. Speculative analysis of centralized cryptocurrency exchange market data to support a price manipulation hypothesis.

### Former bitcoin enthusiasts turned skeptics

* [Money corrupts; bitcoin corrupts absolutely.](https://www.cynicusrex.com/file/cryptocultscience.html) by Angelino Desmet - 12-03-2021
* [I wish I never bought bitcoin.](https://www.cynicusrex.com/file/greed.html) by Angelino Desmet - 01-06-2020

### Religious skeptical angles

#### Buddhist

* [Sujato Bhikkhu on Crypto](https://www.youtube.com/watch?v=CA_cfLqIkA0) by Sujato Bhikkhu. A monk explains why crypto is incompatible with the teachings of the Buddha from both moral and spiritual dimensions.

#### Christian

* [The Christian case against Bitcoin and blockchain]( https://lukeplant.me.uk/blog/posts/the-christian-case-against-bitcoin-and-blockchain/) by Luke Plant, A reading of bitcoin philosophy and cult like phenomenon from a biblical perspective 2021-03-2022.
* [What you should know about Bitcoin](https://www.thegospelcoalition.org/article/faqs-know-bitcoin/) by Joe Carter. A well-researched, accurate introduction to Bitcoin from a Christian perspective, 2017-12-27.
* [Ask the Economist: Should a Christian Invest in Bitcoin?](https://www.thegospelcoalition.org/article/christian-invest-bitcoin/) by Greg Phelan, 2021-10-27.

---

## What is blockchain, web3, etc.

Best intros/overviews of blockchain, crypto, web3, etc.

* [On Blockchain and Trust](https://www.schneier.com/blog/archives/2019/02/blockchain_and_.html) - February 12, 2019 by Bruce Schneier. The article also appeared on wired.com as [There's No Good Reason to Trust Blockchain Technology](https://www.wired.com/story/theres-no-good-reason-to-trust-blockchain-technology/).
- [The Myth of Decentralization and Lies about Web 2.0](https://www.emilygorcenski.com/post/the-myth-of-decentralization-and-lies-about-web-2.0/) - 2022-01-07 by Emily Gorcenski
* http://kernel.community - A custom web3 educational community with free learning resources at https://kernel.community/en/learn/

---

## Iron-manning the pro arguments

Here we collect the best theses for why blockchain/crypto“currency”/web3 is supposedly important/interesting/world-changing.

### Bitcoin

* [Bitcoin for the Open-Minded Skeptic](https://www.matthuang.com/bitcoin_for_the_open_minded_skeptic) - May 2020 - by [[people/Matt Huang]]. Note: more an argument for why Bitcoin will ""make it"" than any argument why that is socially valuable (or not).
* [7 Things To Read About Bitcoin (For Institutional Investors)](https://www.paradigm.xyz/2020/05/7-things-to-read-about-bitcoin-for-institutional-investors/) - May 2020 - by [[people/Matt Huang]]

### General

* [JumpCrypto Crypto Reading List (on Github)](https://github.com/JumpCrypto/crypto-reading-list)

### Web3

* [Sean Bonner: Why Web3](https://blog.seanbonner.com/2021/10/26/why-web3/) - 2021-10-26 - by Sean Bonner. ""Web3 upends the power structures we’ve grown accustomed to and puts artists and creators back into the drivers seat…Web3 offers a future where people are in charge of their own identities, not beholden to the whims of data hoarding corporations. People control their own accounts, own their own futures…So if you are asking “Why Web3?” The answer is simple. Web3 is the future.""

### Fat protocols

From https://www.usv.com/writing/2016/08/fat-protocols/

> The previous generation of shared protocols (TCP/IP, HTTP, SMTP, etc.) produced immeasurable amounts of value, but most of it got captured and re-aggregated on top at the applications layer, largely in the form of data (think Google, Facebook and so on). The Internet stack, in terms of how value is distributed, is composed of “thin” protocols and “fat” applications.
>
> This relationship between protocols and applications is reversed in the blockchain application stack. Value concentrates at the shared protocol layer and only a fraction of that value is distributed along at the applications layer. It’s a stack with “fat” protocols and “thin” applications.

* [Crypto Tokens and the Coming Age of Protocol Innovation](https://continuations.com/post/148098927445/crypto-tokens-and-the-age-of-protocol-innovation) - 2016-07-28 - by Albert Wenger at USV. Move about incentivizing investment in the protocols
* [Fat Protocols](https://www.usv.com/writing/2016/08/fat-protocols/) - Aug 2016 - Joel Monegro at USV - more about incentivizing adoption

### Fairer governance

Can support more democratic, distributed governance, e.g. cooperatives (somehow). Can save Democracy.

* [If I Only had a Heart: a DisCO Manifesto](https://disco.coop/manifesto/) - Dec 2019 - A joint publication by DisCO.coop, the Transnational Institute and Guerrilla Media Collective. ""Value Sovereignty, Care Work, Commons and Distributed Cooperative Organizations. The DisCO Manifesto is a deep dive into the world of Distributed Cooperative Organizations. Over its 80 colorful pages, you will read about how DisCOs are a P2P/Commons, cooperative and Feminist Economic alternative to Decentralized Autonomous Organizations (DAOs). The DisCO Manifesto also includes some background on topics like blockchain, AI, the commons, feminism, cooperatives, cyberpunk, and more.""
* [Wired: The Father of Web3 Wants You to Trust Less](https://www.wired.com/story/web3-gavin-wood-interview/) - 2021-11-29 - Gavin Wood, who coined the term Web3 in 2014, believes decentralized technologies are the only hope of preserving liberal democracy.

### Fairer Economy

* [Li Jin on the future of the creator economy](https://www.economist.com/the-world-ahead/2021/11/08/li-jin-on-the-future-of-the-creator-economy) - Shared ownership and control of online platforms is the way forward (via crypto)
  * Note: we probably all want that wonderful outcome it's just that crypto is neither necessary nor likely to get us there. See https://rufuspollock.com/fixing-facebook/

## Reference

History of speculation, manias, etc.

* Devil Take the Hindmost: A History of Financial Speculation by Edward Chancellor (1998)
* [Manias, Panics, and. Crashes. A History of Financial Crises](https://delong.typepad.com/manias.pdf) by by CP Kindleberger (1978)

## Inbox

This is a section for links that haven't yet been reviewed and/or allocated to a particular section.

* https://the-crypto-syllabus.com/web3-a-map-in-search-of-territory/ - Jan 2022 - by Evgeny Morozov
* [Proof of Work vs Proof of Stake, and the Stablecoin Centralization Problem](https://www.lynalden.com/proof-of-stake/) - good overview of PoW vs PoS and the complexity/problems PoS adds. Second half of the article expounds on how ""any smart contract blockchain that relies heavily on DeFi for its use case, can have the outcome of its hard forks significantly determined by centralized stablecoin custodians."" Long article and could fit under multiple headings here.
* https://www.reddit.com/r/anticryptocurrency/ - reddit with a significant number of links
* https://www.profgalloway.com/web3/ - 2022-01-15 - Prof Scott Galloway @ NYU. Unequal, focused on getting rich, facilitating crime, centralized
* [Cryptoeconomics as a Limitation on Governance](https://osf.io/wzf85/?view_only=a10581ae9a804aa197ac39ebbba05766) - 2021-11-11 - Nathan Schneider, University of Colorado Boulder
* [Financial Times: Matt Damon’s crypto ad is more than just cringeworthy](https://www.ft.com/content/3fac474e-aa34-439a-8bdb-32b576fe2687) (paywall)
* [Francesca Bria on Decentralisation, Sovereignty, and Web3](https://the-crypto-syllabus.com/francesca-bria-on-decentralisation/)
* [Booming NFT art market plagued by 'mind-blowing' fraud](https://news.trust.org/item/20220118122426-mv9tu/)

Pros

* [BanklessDAO: State of the DAOs #7: Social Tokens and the Future of Work](https://banklessdao.substack.com/p/state-of-the-daos-7-social-tokens) - 2022-01-13
* [Scanning the European Ecosystem of Distributed Ledger Technologies for Social and Public Good](https://publications.jrc.ec.europa.eu/repository/handle/JRC121675) - Oct 2020 - by Samer Hassan and colleagues
  * Twitter thread: https://twitter.com/samerP2P/status/1317123399295041541

### Other suggestions

* New topic concerning the psychological harm, such as: gambling, greed, cultism, etc.
","Awesome critique of crypto/web3, etc. Contributions are welcome. Submissions can
be made in the comments section below or on the Web3 Impressions blog. The next
installment of the Stephen Diehl series will be published on 28 Jan 2022."
397,Awesome Frida - A curated list of Frida resources http://www.frida.re/ (https://github.com/frida/frida),"# Awesome Frida [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

A curated list of awesome projects, libraries, and tools powered by Frida.

## What is Frida?

Frida is [Greasemonkey](https://en.wikipedia.org/wiki/Greasemonkey) for native apps, or, put in more technical terms, it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript into native apps that run on Windows, Mac, Linux, iOS and Android.

Frida is an open source software.

More info [here](http://www.frida.re/).

## Table of Contents

<!-- MarkdownTOC depth=4 -->
- [Libraries](#libraries)
- [Projects](#projects)
- [Talks & Papers](#talks-and-papers)
- [Powered by Frida](#frida-powered-by)
- [Videos](#videos)
- [Blog posts](#blogs)
- [Community](#community)

<!-- /MarkdownTOC -->

<a name=""libraries"" />

## Libraries
* [frida-android-hooks](https://github.com/antojoseph/frida-android-hooks) - Hook method calls in Android
* [FridaAndroidTracer](https://github.com/Piasy/FridaAndroidTracer) - A runnable jar that generate Javascript hook script to hook Android classes
* [frida-panic](https://github.com/nowsecure/frida-panic) - Easy crash-reporting for Frida-based applications
* [frida-compile](https://github.com/frida/frida-compile) - Compile a Frida script comprised of one or more Node.js modules
* [frida-trace](https://github.com/nowsecure/frida-trace) - Trace APIs declaratively
* [frida-screenshot](https://github.com/nowsecure/frida-screenshot) - Grab (iOS) screenshots
* [frida-uiwebview](https://github.com/nowsecure/frida-uiwebview) - Inspect and manipulate UIWebView-hosted GUIs
* [frida-uikit](https://github.com/nowsecure/frida-uikit) - Inspect and manipulate UIKit-based GUIs
* [frida-contrib](https://github.com/dweinstein/node-frida-contrib) - Frida utility-belt
* [frida-load](https://github.com/frida/frida-load) - Load a Frida script comprised of one or more Node.js modules (Deprecated, use [frida-compile](https://github.com/frida/frida-compile))
* [frida-remote-stream](https://github.com/nowsecure/frida-remote-stream) - Create an outbound stream over a message transport.
* [frida-memory-stream](https://github.com/nowsecure/frida-memory-stream) - Create a stream from one or more memory regions.
* [frida-fs](https://github.com/nowsecure/frida-fs) - Create a stream from a filesystem resource.
* [frida-push](https://github.com/AndroidTamer/frida-push) - Automatically `adb push` the correct frida-server matching your current frida installation.
* [frida-definitions-generator](https://git.sr.ht/~yotam/frida-definitions-generator) - Generate TypeScript definitions for a given APK file or unpacked apk directory.

<a name=""projects"" />

## Projects
- [as0ler/frida-scripts](https://github.com/as0ler/frida-scripts) - Repository including some useful frida script for iOS Reversing
- [0xdea/frida-scripts](https://github.com/0xdea/frida-scripts) - instrumentation scripts to facilitate reverse engineering of android and iOS Apps.
- [roxanagogonea/frida-scripts](https://gitlab.com/roxanagogonea/frida-scripts) - Repository including some useful frida scripts for Android
- [iddoeldor/frida-snippets](https://github.com/iddoeldor/frida-snippets) - another useful frida snippets repository
- [IDA Pro plugin](https://github.com/techbliss/Frida_For_Ida_Pro) - IDA Pro plugin
- [poxyran/misc](https://github.com/poxyran/misc) - Misc Frida scripts [read-process-memory.py](https://github.com/poxyran/misc/blob/master/frida-read-process-memory.py), [write-process-memory.py](https://github.com/poxyran/misc/blob/master/frida-write-process-memory.py), [frida-heap-trace](https://github.com/poxyran/misc/blob/master/frida-heap-trace.py),
- [frida-cycript](https://github.com/nowsecure/frida-cycript) - Fork of cycript with new runtime called [Mjølner](https://github.com/nowsecure/mjolner) powered by Frida.
- [r2frida](https://github.com/nowsecure/r2frida) - static and dynamic analysis synergy
- [ios-inject-custom](https://github.com/oleavr/ios-inject-custom) - use Frida for standalone injection of a custom payload for iOS.
- [davuxcom/frida-scripts](https://github.com/davuxcom/frida-scripts) - Repository including scripts for COM, .NET and WinRT for Windows
- [XposedFridaBridge](https://github.com/monkeylord/XposedFridaBridge) - A frida script implement XposedBridge & load xposed modules, without installing xposed framwork.
- [Arida](https://github.com/lateautumn4lin/arida) - A Frida-RPC tool based on FastAPI, Help users quickly realize interface exposure.
- [easy-frida](https://github.com/tacesrever/easy-frida) - A tool for easily develop frida agent script/module when reversing, including some useful frida scripts.

<a name=""talks-and-papers"" />

## Talks & Papers
* [OSDC 2015](http://act.osdc.no/osdc2015no/):
  [Putting the open back into closed software](http://act.osdc.no/osdc2015no/talk/6165)
  ([PDF](osdc-2015-putting-the-open-back-into-closed-software.pdf) · [Recording](https://youtu.be/tmpjftTHzH8))
* [OSDC 2015](http://act.osdc.no/osdc2015no/):
  [The engineering behind the reverse engineering](http://act.osdc.no/osdc2015no/talk/6195)
  ([PDF](osdc-2015-the-engineering-behind-the-reverse-engineering.pdf) · [Recording](https://youtu.be/uc1mbN9EJKQ))
* [NLUUG 2015](https://www.nluug.nl/activiteiten/events/nj15/index.html):
  [Frida: Putting the open back into closed software](https://www.nluug.nl/activiteiten/events/nj15/abstracts/ab08.html)
  ([Slides](http://slides.com/oleavr/nluug-2015-frida-putting-the-open-back-into-closed-software)
  · [Demos](https://github.com/frida/frida-presentations/tree/master/NLUUG2015)
  · [Recording](https://youtu.be/3lo1Y2oKkE4))
* [ZeroNights 2015](http://2015.zeronights.org/):
  [Cross-platform reversing with Frida](http://2015.zeronights.org/workshops.html)
  ([PDF](zeronights-2015-cross-platform-reversing-with-frida.pdf)
  · [Demos](https://github.com/frida/frida-presentations/tree/master/ZeroNights2015))
* [r2con 2016 - r2frida](http://rada.re/con/) ([PDF](https://github.com/radareorg/r2con/raw/master/2016/talks/08-r2frida/r2frida.pdf) · [Recording](https://www.youtube.com/watch?v=ivCucqeVeZI))
* [RMLL 2017](https://2017.rmll.info/) Unlocking secrets of proprietary software (@oleavr) ([slides](https://slides.com/oleavr/frida-rmll-2017#/) · [Recording](https://rmll.ubicast.tv/videos/frida_03038/))

<a name=""frida-powered-by"" />

## Powered by Frida
* [Aurora](https://github.com/frida/aurora) - Web app built on top of Frida
* [CloudSpy](https://github.com/frida/cloudspy) - Web app built on top of Frida
* [CryptoShark](https://github.com/frida/cryptoshark) - Self-optimizing cross-platform code tracer based on dynamic recompilation
* [diff-gui](https://github.com/antojoseph/diff-gui) - Web GUI for instrumenting Android
* ~~[Lobotomy](https://github.com/LifeForm-Labs/lobotomy)~~[Lobotomy Fork](https://github.com/AndroidSecurityTools/lobotomy) - Android Reverse Engineering Framework & Toolkit
* [Appmon](https://github.com/dpnishant/appmon) - Runtime Security Testing Framework for iOS, Mac OS X and Android Apps
* [Fridump](https://github.com/Nightbringer21/fridump) - A universal memory dumper using Frida
* [frida-extract](https://github.com/OALabs/frida-extract) - Automatically extract and reconstruct a PE file that has been injected using the RunPE method
* [r2frida](https://github.com/nowsecure/r2frida) [memory search](https://www.nowsecure.com/blog/2017/03/14/spearing-data-mobile-memory-building-better-r2frida-memory-search/)
* [r2frida-wiki](https://github.com/enovella/r2frida-wiki) - Unofficial wiki that provides practical examples on how to use r2frida
* [friTap](https://github.com/fkie-cad/friTap) - Decrypts and logs a process's SSL/TLS traffic on all major platforms. Beside this it intercepts the generation of encryption keys used by SSL/TLS and logs them as a SSLKEYLOGFILE.
* [google/ssl_logger](https://github.com/google/ssl_logger) - Decrypts and logs a process's SSL traffic.
* [google/tcp_killer](https://github.com/google/tcp_killer) - Shuts down a TCP connection based using output from a `netstat` cmd.
* [brida](https://github.com/federicodotta/Brida) - Bridge between Burp Suite and Frida
* [objection](https://github.com/sensepost/objection) - Runtime Mobile Exploration for iOS and Android
* [passionfruit](https://github.com/chaitin/passionfruit) - iOS App Analyzer with Web UI
* [House](https://github.com/nccgroup/house) - A runtime mobile application analysis toolkit with a Web GUI, powered by Frida
* [Dwarf](https://github.com/igio90/Dwarf) - A debugger built on top of PyQt5 and frida
* [Dexcalibur](https://github.com/FrenchYeti/dexcalibur) - A dynamic binary instrumentation tool designed for Android apps and powered by Frida
* [bagbak](https://github.com/ChiChou/bagbak) - Decrypt apps from AppStore on jailbroken devices. Supports decrypting app extensions.
* [Runtime Mobile Security (RMS)](https://github.com/m0bilesecurity/RMS-Runtime-Mobile-Security) - A powerful web interface that helps you to manipulate Android and iOS Apps at Runtime
* [CatFrida](https://github.com/neil-wu/CatFrida) - A macOS app for inspecting a running iOS app. Building with frida-swift, CatFrida provide an awesome easy way to dive into an app.
* [PAPIMonitor](https://github.com/Dado1513/PAPIMonitor) - **P**ython **API** **Monitor** for Android apps is a tool, powered by Frida, to monitor user-selected APIs during app execution.

<a name=""videos"" />

## Videos
* [Frida vs Spotify](https://www.youtube.com/watch?v=dvOdwHpQycw) - Spotify RE
* [CryptoShark](https://www.youtube.com/watch?v=hzDsxtcRavY) - a self-optimizing cross-platform code tracer based on dynamic recompilation, powered by Frida and Capstone
* [Frida Memory Hacking - Angry Birds](https://www.youtube.com/watch?v=nk3rUn2ip0g) - Frida having fun with Angry Birds running on an iPhone
* [Frida Memory Hacking - Windows Live Messenger](https://www.youtube.com/watch?v=0Blc0T-Z-ys) - Frida having fun with Windows Live Messenger
* [Frida Intro @ NowSecure](https://www.youtube.com/watch?v=4Ag-2LZQM8g) - Frida introduction by Ole
* ~~[Lobotomy - Frida Demo](https://asciinema.org/a/24269) - This demo is leveraging the Frida toolkit to instrument a target app's Activity calls.~~
* [Install SSL CA to device via ManagedConfiguration tracing](https://www.youtube.com/watch?v=qfOm5b9MZtk)

<a name=""blogs"" />

## Blog posts
* [Build a debugger in 5 minutes](https://medium.com/@oleavr/build-a-debugger-in-5-minutes-1-5-51dce98c3544#.mn48pvhok)
* [Reverse Engineering with Javascript](https://www.nowsecure.com/blog/2015/08/06/reverse-engineering-with-javascript/)
* [iOS 9 Reverse Engineering with Javascript](https://www.nowsecure.com/blog/2015/11/16/ios-9-reverse-engineering-with-javascript/)
* [iOS Instrumentation without Jailbreak](https://www.nowsecure.com/blog/2015/11/23/ios-instrumentation-without-jailbreak/)
* [Introduction to Fridump](http://pentestcorner.com/introduction-to-fridump/) - Fridump is an open source memory dumper tool
* [Hacking Android apps with Frida part1](https://www.codemetrix.net/hacking-android-apps-with-frida-1/), [part2/crackme](https://www.codemetrix.net/hacking-android-apps-with-frida-2/), [part3](https://www.codemetrix.net/hacking-android-apps-with-frida-3/)
* [OWASP iOS crackme tutorial: Solved with Frida](https://www.nowsecure.com/blog/2017/04/27/owasp-ios-crackme-tutorial-frida/)
* Detecting Frida [poxyran](https://crackinglandia.wordpress.com/2015/11/10/anti-instrumentation-techniques-i-know-youre-there-frida/), [Bernhard Mueller](http://www.vantagepoint.sg/blog/90-the-jiu-jitsu-of-detecting-frida)
* [Maddie Stone, Google project Zero - Blackhat 2020 - Reversing the Root. Identifying the Exploited Vulnerability in 0-days Used In-The-Wild](https://i.blackhat.com/USA-20/Wednesday/us-20-Stone-Reversing-The-Root-Identifying-The-Exploited-Vulnerability-In-0-Days-Used-In-The-Wild.pdf)
* [Natalie Silvanovich, Google Project Zero - January 2022 - Zooming in on Zero-click Exploits](https://googleprojectzero.blogspot.com/2022/01/zooming-in-on-zero-click-exploits.html)
* [BlackBerry - April 2021 - Malware analysis with dynamic binary instrumentation frameworks](https://blogs.blackberry.com/en/2021/04/malware-analysis-with-dynamic-binary-instrumentation-frameworks)


<a name=""community"" />

## Community
* [Stack Overflow](http://stackoverflow.com/questions/tagged/frida)
* [@fridaotre on Twitter](https://twitter.com/fridadotre)
* [@oleavr on Twitter](https://twitter.com/oleavr)
* [Reddit](https://www.reddit.com/r/frida)
* [Frida CodeShare](https://codeshare.frida.re/) - Share frida snippets and recipes with others.


<a name=""contributions"" />

## Contributions
Your contributions are always welcome!

If you want to contribute to this list (please do), send me a pull request or contact me [@insitusec](https://twitter.com/insitusec)

Also, if you notice that a listing should be deprecated or replaced:

* Repository's owner explicitly say that ""this library is not maintained"".
* Not committed for long time (2~3 years).

More info on the [guidelines](https://github.com/dweinstein/awesome-frida/blob/master/CONTRIBUTING.md)


<a name=""credits"" />

## Credits

* This awesome list was originally based on [Awesome TensorFlow](https://github.com/jtoy/awesome-tensorflow)
","A curated list of awesome projects, libraries, and tools powered by Frida. What
is Frida? It’s a dynamic code instrumentation toolkit. It lets you inject
snippets of JavaScript into native apps that run on Windows, Mac, Linux, iOS and
Android."
3116,😎 A collection of awesome Git Hooks,"# Awesome Git Hooks [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)

> A curated list of awesome [Git hooks](https://git-scm.com/docs/githooks)

Git Hooks are scripts that run automatically every time a particular event occurs in a Git repository.

## Contents
- [Useful Git Hooks scripts](#useful-git-hooks-scripts)
- [Tools](#tools)
- [Projects](#projects)
- [Articles](#articles)
- [Video Tutorials](#video-tutorials)
- [Support](#support)

## Useful Git Hooks scripts

- [pre-commit](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-commit) - This hook is called before obtaining the proposed commit message.
- [prepare-commit-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/prepare-commit-msg) - Called after receiving the default commit message, just prior to firing up the commit message editor.
- [pre-receive](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-receive) - This is called on the remote repo just before updating the pushed refs.
- [commit-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/commit-msg) - Can be used to adjust the message after it has been edited in order to ensure conformity to a standard or to reject based on any criteria.
- [pre-push](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-push) - Called prior to a push to a remote. In addition to the parameters, additional information, separated by a space is passed in through stdin in the form of `<local ref> <local sha1> <remote ref> <remote sha1>`.
- [pre-auto-gc](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-auto-gc) - Is used to do some checks before automatically cleaning repos. 
- [pre-rebase](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-rebase) - Called when rebasing a branch. Mainly used to halt the rebase if it is not desirable.
- [applypatch-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/applypatch-msg) - Can edit the commit message file and is often used to verify or actively format a patch's message to a project's standards.
- [post-receive](https://github.com/aitemr/awesome-git-hooks/tree/master/post-receive) - This is run on the remote when pushing after the all refs have been updated. It does not take parameters, but receives info through stdin in the form of `<old-value> <new-value> <ref-name>`. 
- [post-rewrite](https://github.com/aitemr/awesome-git-hooks/tree/master/post-rewrite) - This is called when git commands are rewriting already committed data.
- [post-rewrite](https://github.com/aitemr/awesome-git-hooks/tree/master/post-commit) - Called after a successful commit. Useful for triggering notifications, etc.

## Tools

- [Husky](https://github.com/typicode/husky) - Git hooks made easy.
- [Komondor](https://github.com/orta/Komondor) - Git Hooks for Swift projects.
- [Quickhook](https://github.com/dirk/quickhook/) - Faster Git hook (pre-commit, etc.) runner.
- [git-hooks](https://github.com/icefox/git-hooks/) - A tool to manage project, user, and global Git hooks.
- [overcommit](https://github.com/brigade/overcommit/) - A fully configurable and extendable Git hook manager.
- [Grunt GitHooks](https://github.com/wecodemore/grunt-githooks) - Setup, manage and update your hooks with Grunt. Can be used with all languages, supports templates.
- [Autohook](https://github.com/nkantar/Autohook) - A very, very small Git hook manager with focus on automation.
- [Githooks](https://github.com/rycus86/githooks) - Auto-install Git hook, that supports hooks in any language checked into Git and also shared repos.
- [Hooks](https://www.npmjs.com/package/node-hooks) - A command line git hook management tool.
- [Lefthook](https://github.com/Arkweid/lefthook) - Fast and powerful Git hooks manager for any type of projects. 
- [pre-commit](https://github.com/pre-commit/pre-commit) - A framework for managing and maintaining multi-language pre-commit hooks.

## Projects 

- [Lolcommits](https://github.com/mroth/lolcommits) - Takes a snapshot with your webcam every time you git commit code, and archives a lolcat style image with it.
- [Podmena](https://github.com/bmwant/podmena) - Enhance your commit messages adding random emoji to it.
- [Git Hooks Manager](https://github.com/icefox/git-hooks) - A tool to manage project, user, and global Git hooks for multiple Git repositories.
- [Git::Hooks](https://github.com/gnustavo/Git-Hooks) - A framework for implementing Git (and Gerrit) hooks.
- [git-pre-commit-hook](https://pypi.org/project/git-pre-commit-hook/) - Hook that blocks bad commits. Useful for Python-development.
- [App::GitHooks](https://metacpan.org/pod/App::GitHooks) -  A modular and easy to configure git hooks framework, supporting many plugins. 
- [Jig](https://pythonhosted.org/jig/) - A pre-commit hook on steroids.
- [GitPHPHooks](https://github.com/wecodemore/GitPHPHooks) - Write your hooks in PHP, manage and organize them on a task and project level. Has an additional Hooks library on GitHub.
- [git-hooks-php](https://github.com/BernardoSilva/git-hooks-php) - Git hooks for PHP based projects.
- [commandbox-githooks](https://github.com/elpete/commandbox-githooks) - Git hooks for CommandBox CFML based projects.
- [hooks4git](https://pypi.org/project/hooks4git/) - A simple, flexible and language agnostic git hook management approach.
- [Commit Colors](https://github.com/sparkbox/commit-colors) - See a color swatch in your terminal every time you author a commit.

## Articles

- [Official Documentation](https://git-scm.com/docs/githooks)
- [Git Hooks (Part I): The Basics](http://omerkatz.com/blog/2013/2/15/git-hooks-part-1-the-basics)
- [Git Hooks (Part II): Implementing Git Hooks using Python](http://omerkatz.com/blog/2013/5/23/git-hooks-part-2-implementing-git-hooks-using-python)
- [Atlassian Git Hooks tutorial](https://ru.atlassian.com/git/tutorials/git-hooks)
- [Tips for using Git pre commit hook](https://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/)
- [Use a boostrap shell script to use Git Hooks in Mac with PowerShell and with IntelliJ](https://wilsonmar.github.io/git-hooks/)
- [githooks.com](https://githooks.com)
- [How To Use Git Hooks To Automate Development and Deployment Tasks](https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks)
- [Automate your workflow with git hooks
](https://medium.com/backticks-tildes/how-to-automate-your-git-workflow-with-git-hooks-c905296c49bc)
- [Automate your development workflow](https://medium.com/the-andela-way/git-hooks-beautifully-automate-tasks-stages-bfb29f42fea1)
- [Deploying websites with a Git hook](http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook/) 
- [The missing Git hooks documentation](https://longair.net/blog/2011/04/09/missing-git-hooks-documentation/)

## Video Tutorials 

- [Introduction to Git Hooks](https://www.youtube.com/watch?v=8-JL6NOTZOw)
- [Git hooks, practical uses (yes, even on Windows)](https://www.youtube.com/watch?v=fMYv6-SZsSo)
- [Life’s better with Git hooks](https://www.youtube.com/watch?v=RG26-Iozg70)
- [Husky and the Git Hooks](https://www.youtube.com/watch?v=EpxkBgd8yq8)

## Support

If you have a question, find a bug, or just want to say hi, please open an [issue on GitHub](https://github.com/aitemr/awesome-git-hooks/issues/new). If you want to contribute, please read the [guide](./contributing.md).

## License

[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [Islam Temirbek](https://aitemr.github.io) has waived all copyright and related or neighboring rights to this work.
","Git Hooks are scripts that run automatically every time a particular event
occurs in a Git repository. They can be used to manage project, user, and global
Git hooks. There is a curated list of awesome Git Hooks scripts and tutorials."
1528,"😎 A curated list of amazingly awesome Ionic libraries, resources and solutions.","# Awesome Ionic [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)]

<p alt=""Awesome Ionic"" align=""center""><img src=""awesome-ionic.png"" /></p>

> A curated list of awesome Ionic libraries, resources, and solutions from Ionic 1 to the latest version of the framework.

This repository is maintained by [Fikayo Adepoju](https://github.com/coderonfleek) and [Alessio Delmonti](https://github.com/Alexintosh). For discussions about PRs and contributions, contact Fikayo via DM on [twitter](https://twitter.com/coderonfleek).

# Resources by Version

- [General](#general)
- [Ionic 1 (Angularjs)](IONIC1.md)
- [Ionic Angular (2+)](#ionic-angular)
- [Ionic React](ionic-react.md)
- [Ionic Vue](ionic-vue.md)
- [Capacitor](#capacitor)
- [Built with Ionic](#built-with-ionic)
- [Stencil](https://github.com/Alexintosh/awesome-stencil)

# General

- [Official Website](https://ionicframework.com/)
- [Blog](https://blog.ionicframework.com/)
- [Documentation](https://ionicframework.com/docs/)
- [Github Repository](https://github.com/ionic-team/ionic-framework)
- [Community Forum](http://forum.ionicframework.com/)
- [Capacitor](https://capacitorjs.com/)
- [Ionic Native](https://github.com/driftyco/ionic-native/)
- [Appflow](https://ionicframework.com/appflow)
- [Ionic Enterprise](https://ionicframework.com/enterprise)
- [Ionic Global Community](https://ionicframework.com/community)
- [Ionic Youtube Channel](https://www.youtube.com/channel/UChYheBnVeCfhCmqZfCUdJQw)
- [Ionic on CodePen](http://codepen.io/ionic/)
- [Ionic IRC](http://webchat.freenode.net/?randomnick=1&channels=%23ionic&uio=d4)
- [Ionic Starter Apps](https://ionicthemes.com)
- [Ionic Free Tutorials](https://ionicthemes.com/tutorials)

# Capacitor

- [Official Website](https://capacitorjs.com/)
- [Documentation](https://capacitorjs.com/docs)
- [Capacitor Plugins](https://capacitorjs.com/docs/plugins)
- [Blog](https://capacitorjs.com/blog)
- [Forum](https://forum.ionicframework.com/c/capacitor)
- [Github Project](https://github.com/ionic-team/capacitor)
- [Twitter](https://twitter.com/capacitorjs)

# Built With Ionic

- [WhatsApp Clone](https://github.com/coderonfleek/whatsapp-clone)

# Ionic Angular

## Complete projects

### Awesome Demos

- [Ionic 4 PWA Demo App](https://github.com/ionicthemes/progressive-web-apps-in-ionic4) ![](ionic.png) ![](pwa.png)
- [Ionic Lottie Sample](https://github.com/yannbf/ionic-lottie) ![](ionic.png)

### Boilerplate/Demo Apps

- [Ionic 4 Full Starter App and PWA](https://ionicthemes.com/product/ionic4-full-starter-app) ![](ionic.png) ![](pwa.png) [NEW]
- [Ionic 3 Starter App Template](https://ionicthemes.com/product/ion2fullapp-full-ionic2-app-template-elite-version) ![](ionic.png)
- [Ion2FullApp - Ionic 3 Template](https://ionicthemes.com/product/ion2fullapp-full-ionic2-app-template) ![](ionic.png)
- [Ionic Boilerplate](https://github.com/marcoturi/ionic-boilerplate) ![](ionic.png)
- [Cordova File Transfer](https://github.com/dsgriffin/ionic-2-file-transfer-example) ![](ionic.png)
- [Update your App](https://github.com/NextFaze/ionic-manup) ![](ionic.png)
- [Fullscreen Content](https://github.com/sebaferreras/Ionic2-FullscreenContent) ![](ionic.png)
- [Card Layout](https://github.com/joshuamorony/ionic2-card-layout) ![](ionic.png)
- [Ionic 2 Boilerplate](https://github.com/marcoturi/ionic2-boilerplate) ![](ionic.png)
- [Ionic 2 Advanced Components](https://github.com/yannbf/ionic2-components) ![](ionic.png)
- [ORC Scan App](https://github.com/matiastucci/ionic-ocr-example) ![](ionic.png)
- [Ionic Country Explorer](https://github.com/SKempin/ionic-country-explorer) ![](ionic.png)

### Open source apps

- [Ionic 4 PWA Demo App](https://github.com/ionicthemes/progressive-web-apps-in-ionic4) ![](ionic.png)[NEW]
- [Ionic 4 Forms and Validations](https://github.com/ionicthemes/forms-and-validations-in-ionic) ![](ionic.png)[NEW]
- [Ionic 4 Facebook Login](https://github.com/ionicthemes/ionic-facebook-login) ![](ionic.png)[NEW]
- [Ionic 4 Google Login](https://github.com/ionicthemes/ionic-google-login) ![](ionic.png)[NEW]
- [Ionic 4 Twitter Login](https://github.com/ionicthemes/ionic-twitter-login) ![](ionic.png)[NEW]
- [Ionic 4 Manga reader](https://github.com/deissh/anibe.app) ![](ionic.png)[NEW]
- [Wordpress Integration App](https://github.com/ionicthemes/ionic3-wordpress-integration) ![](ionic.png)
- [Question & Answers Ionic 3 App](https://github.com/ionicthemes/building-a-complete-mobile-app-with-ionic-3) ![](ionic.png)
- [Ionic 3 Image handling](https://github.com/ionicthemes/ionic3-image-handling) ![](ionic.png)
- [Google Maps + Geolocation + Places](https://github.com/ionicthemes/ionic-3-google-maps-google-places-geolocation) ![](ionic.png)
- [Ionic 3 Admob Integration](https://github.com/ionicthemes/monetize-your-ionic-3-app-with-admob) ![](ionic.png)
- [Ionic 3 Upload Image to Firebase ](https://github.com/ionicthemes/ionic-firebase-image-upload) ![](ionic.png)
- [Submit Ionic form data to Firebase Cloud Firestore](https://github.com/ionicthemes/submit-ionic-form-data-to-firebase-cloud-firestore) ![](ionic.png)
- [Ionic NoSql](https://github.com/Alexintosh/Ionic-Nosql)
- [Ionic Soundboard](https://github.com/Alexintosh/ionic3-soundboard)
- [Ionic Soundboard with remote sounds](https://github.com/rkalis/ionic-soundboard) ![](ionic.png)
- [Ionic Twitter Pwa](https://github.com/shprink/ionic-twitter-pwa) ![](ionic.png) ![](pwa.png)
- [Realty](https://github.com/ccoenraets/ionic2-realty) ![](ionic.png)
- [mHUD - Car App](https://github.com/paulcockrell/mHUD) ![](ionic.png) Speed tracking
- [Restaurant App](https://github.com/srehanuddin/Ionic2-ResturantApp) ![](ionic.png)
- [Conference App](https://github.com/driftyco/ionic-conference-app) ![](ionic.png)
- [Conference App based on Lanyrd API](https://github.com/ionic2blueprints/conference-app) ![](ionic.png)
- [Wordpress Client](https://github.com/ionic2blueprints/ionic2-wp-client) ![](ionic.png)
- [Media Player](https://github.com/ionic2blueprints/media-player) ![](ionic.png)
- [Social App](https://github.com/ionic2blueprints/social-app) ![](ionic.png)
- [Push Notification](https://github.com/aggarwalankush/ionic2-push-base) ![](ionic.png)
- [Weather app](https://github.com/aggarwalankush/ionic2-mosum) ![](ionic.png)
- [Reddit Reader](https://github.com/smartapant/ionic2-reddit-reader) ![](ionic.png)
- [YouTube](https://github.com/hughred22/Ionic2-Angular2-YouTube-Channel-App) ![](ionic.png)
- [Freshlypressed API App](https://github.com/rajayogan/ionic2-freshlypressed) ![](ionic.png)
- [Geo Fence](https://github.com/tsubik/ionic2-geofence) ![](ionic.png)
- [Image Gallery](https://github.com/driftyco/ionic-image-gallery-app) ![](ionic.png)
- [Real-World App](https://github.com/seeschweiler/iongithub) ![](ionic.png)
- [Bwitter - Twitter](https://github.com/obetomuniz/ionic2-bwitter) ![](ionic.png)
- [Inoffical ""Myki"" App](https://github.com/longzheng/mypal-ionic) ![](ionic.png)
- [Timer App](https://github.com/imjohnbo/ionic2-timer) ![](ionic.png)
- [aiEyes](https://github.com/brenopolanski/aiEyes) ![](ionic.png)

# Tutorials

#### Video Tutorials

- [Ionic 2 Quickstart](https://www.udemy.com/ionic-2-quickstart/) ![](ionic.png)
- [Build a Todo App from Scratch with Ionic 2](http://www.joshmorony.com/build-a-todo-app-from-scratch-with-ionic-2-video-tutorial/) ![](ionic.png)
- [Ionic 2: How to Use Google Maps & Geolocation](http://www.joshmorony.com/ionic-2-how-to-use-google-maps-geolocation-video-tutorial/) ![](ionic.png)
- [Ionic 2 in One Hour](http://courses.devdactic.com/courses/ionic-2-in-one-hour?product_id=104238) ![](ionic.png)
- [Build a Custom Flash Card Component in Ionic 2](https://www.youtube.com/watch?v=BKFQKywl_GM) ![](ionic.png)
- [Hacking CSS in Ionic 2](https://www.youtube.com/watch?v=sXFmkdhOEVc) ![](ionic.png)
- [Learn Ionic 3 From Scratch](https://www.youtube.com/watch?v=JcEGTektejA&list=PLYxzS__5yYQng-XnJhB21Jc7NW1OIaqct) ![](ionic.png)

### Basics

- [Build a complete mobile app with Ionic 3](https://ionicthemes.com/tutorials/about/building-a-complete-mobile-app-with-ionic-3) ![](ionic.png)
- [Ionic Application Structure](https://ionicthemes.com/tutorials/about/ionic-application-structure) ![](ionic.png)
- [Setup your development environment to build Ionic apps](https://ionicthemes.com/tutorials/about/setup-your-dev-environment-to-build-ionic-apps) ![](ionic.png)
- [Beginners Guide to Getting Started with Ionic 2](http://www.joshmorony.com/beginners-guide-to-getting-started-with-ionic-2/) ![](ionic.png)
- [Ionic 2 First Look Series: Your First Ionic 2 App Explained](http://www.joshmorony.com/ionic-2-first-look-series-your-first-ionic-2-app-explained/) ![](ionic.png)
- [How to Convert an Ionic 1 Application to Ionic 2](http://www.joshmorony.com/how-to-convert-an-ionic-1-application-to-ionic-2/) ![](ionic.png)
- [A Simple Guide to Navigation in Ionic 2](http://www.joshmorony.com/a-simple-guide-to-navigation-in-ionic-2/) ![](ionic.png)
- [10 Minutes with Ionic 2: Adding Pages and Navigation](http://blog.ionic.io/10-minutes-with-ionic-2-adding-pages-and-navigation/) ![](ionic.png)
- [10 Minutes with Ionic 2: Calling an API](http://blog.ionic.io/10-minutes-with-ionic-2-calling-an-api/) ![](ionic.png)
- [How To Update Your Application Project and CLI](http://www.gajotres.net/ionic-2-how-to-update-your-application-project-and-cli/) ![](ionic.png)
- [How to Create a Data Model in Ionic 2](http://www.joshmorony.com/how-to-create-a-data-model-in-ionic-2/) ![](ionic.png)
- [Ionic 2 and External Libraries](http://mhartington.io/post/ionic2-external-libraries/) ![](ionic.png)
- [Understanding Zones and Change Detection](http://www.joshmorony.com/understanding-zones-and-change-detection-in-ionic-2-angular-2/) ![](ionic.png)
- [Understanding Ionic 2: Pipe](http://mcgivery.com/understanding-ionic-2-pipe/) ![](ionic.png)
- [How to Manipulate Data in Ionic 2: Part 1](http://www.joshmorony.com/how-to-manipulate-data-in-ionic-2-part-1/) ![](ionic.png)
- [How to Manipulate Data in Ionic 2: Part 2](http://www.joshmorony.com/how-to-manipulate-data-in-ionic-2-part-2/) ![](ionic.png)
- [Filtering, Mapping, and Reducing Arrays in Ionic 2](https://www.youtube.com/watch?v=A-4CLa05tp0) ![](ionic.png)

#### Theming

- [A Guide to Styling an Ionic 2 Application](http://www.joshmorony.com/a-guide-to-styling-an-ionic-2-application/) ![](ionic.png)
- [Best practice when adding FontAwesome to an ionic2 app](http://luiscabrera.site/tech/2017/01/09/fontawesome-in-ionic2.html) ![](ionic.png)
- [A List of Common CSS Utility Attributes in Ionic 2](http://www.joshmorony.com/a-list-of-common-css-utility-attributes-in-ionic-2/) ![](ionic.png)

#### Components

- [Ionic and Wordpress Integration using Wordpress REST API](https://ionicthemes.com/tutorials/about/ionic-wordpress-integration) ![](ionic.png)
- [Add Google Maps, Places, and Geolocation to an Ionic 3 App](https://ionicthemes.com/tutorials/about/ionic-2-google-maps-google-places-geolocation) ![](ionic.png)
- [How to Create a Sliding Delete Button for Lists](http://www.joshmorony.com/ionic-2-how-to-create-a-sliding-delete-button-for-lists/) ![](ionic.png)
- [Creating a Sliding Introduction Component in Ionic 2](http://www.joshmorony.com/creating-a-sliding-introduction-component-in-ionic-2/) ![](ionic.png)
- [How to Create a Custom Loading Component in Ionic 2](http://www.joshmorony.com/how-to-create-a-custom-loading-component-in-ionic-2/) ![](ionic.png)
- [Build a Simple Progress Bar Component in Ionic 2](http://www.joshmorony.com/build-a-simple-progress-bar-component-in-ionic-2/) ![](ionic.png)
- [Create a News Feed with 360-Degree Photo Viewing in Ionic 2](http://www.joshmorony.com/create-a-news-feed-with-360-degree-photo-viewing-in-ionic-2/) ![](ionic.png)
- [Build a Tap to Reveal Component in Ionic 2](https://www.joshmorony.com/build-a-tap-to-reveal-component-in-ionic-2/) ![](ionic.png)

#### Authentication

- [Add Twitter Login to an Ionic 4 App](https://ionicthemes.com/tutorials/about/ionic-twitter-login) ![](ionic.png)
- [Add Google Login to an Ionic 4 App](https://ionicthemes.com/tutorials/about/ionic-google-login) ![](ionic.png)
- [Add Facebook Login to an Ionic 4 App](https://ionicthemes.com/tutorials/about/ionic-facebook-login) ![](ionic.png)
- [Add Touch ID Authentication To An Ionic 2 Mobile App](https://www.thepolyglotdeveloper.com/2016/03/add-touch-id-authentication-ionic-2-mobile-app/) ![](ionic.png)
- [Successful OAuth Social Login with Firebase](http://www.gajotres.net/ionic-2-succesfull-oauth-social-login-with-firebase/) ![](ionic.png)
- [Using An Oauth 2.0 Service Within An Ionic 2 Mobile App](https://www.thepolyglotdeveloper.com/2016/01/using-an-oauth-2-0-service-within-an-ionic-2-mobile-app/) ![](ionic.png)
- [Ionic 2 and Auth0](http://blog.ionic.io/ionic-2-and-auth0/) ![](ionic.png)
- [Handling a Simple User Authorization](http://www.gajotres.net/ionic-2-handling-a-simple-user-authorization/) ![](ionic.png)
- [Authenticate Ionic 2 with WordPress](https://auth0.com/authenticate/ionic2/wordpress) ![](ionic.png)

#### Unit Testing

- [Ionic 2 Unit Testing](http://lathonez.github.io/2017/ionic-2-unit-testing/) ![](ionic.png)
- [How to Unit Test an Ionic 2 Application](http://www.joshmorony.com/how-to-unit-test-an-ionic-2-application/) ![](ionic.png)
- [Test Driven Development in Ionic 2: An Introduction to TDD](https://www.joshmorony.com/test-driven-development-in-ionic-2-an-introduction-to-tdd/) ![](ionic.png)

#### Ionic Native / Cordova Plugins

- [Using Cordova Plugins in Ionic 2 with Ionic Native](http://www.joshmorony.com/using-cordova-plugins-in-ionic-2-with-ionic-native/) ![](ionic.png)
- [How to Work With Cordova Plugins](http://www.gajotres.net/ionic-2-how-to-use-cordova-plugins/) ![](ionic.png)
- [10 Minutes with Ionic 2: Using the Camera with Ionic Native](http://blog.ionic.io/10-minutes-with-ionic-2-using-the-camera-with-ionic-native/) ![](ionic.png)
- [How to Use Google Maps & Geolocation ](http://www.joshmorony.com/ionic-2-how-to-use-google-maps-geolocation-video-tutorial/) ![](ionic.png)
- [Determine Network Availability](https://www.thepolyglotdeveloper.com/2016/01/determine-network-availability-in-an-ionic-2-mobile-app/) ![](ionic.png)
- [Monetize With Google Admob In An Ionic 2 Mobile App](https://www.thepolyglotdeveloper.com/2016/02/monetize-google-admob-ionic-2-mobile-app/) ![](ionic.png)
- [Show Native Toast Notifications In An Ionic 2 Mobile App](https://www.thepolyglotdeveloper.com/2016/01/show-native-toast-notifications-in-an-ionic-2-mobile-app/) ![](ionic.png)
- [Having Fun With Cordova Geolocation Plugin](http://www.gajotres.net/ionic-2-having-fun-with-cordova-geolocation-plugin/) ![](ionic.png)
- [Use SQLite In Ionic 2 Instead Of Local Storage](https://www.thepolyglotdeveloper.com/2015/12/use-sqlite-in-ionic-2-instead-of-local-storage/) ![](ionic.png)
- [Launch Websites With Ionic 2 Using The InAppBrowser](https://www.thepolyglotdeveloper.com/2016/01/launch-websites-with-ionic-2-using-the-inappbrowser/) ![](ionic.png)
- [Add Barcode Scanning Functionality To Your Ionic 2 App](https://www.thepolyglotdeveloper.com/2016/02/add-barcode-scanning-functionality-to-your-ionic-2-app/) ![](ionic.png)
- [Use Google Analytics In An Ionic 2 Android And iOS App](https://www.thepolyglotdeveloper.com/2016/03/use-google-analytics-in-an-ionic-2-android-and-ios-app/) ![](ionic.png)
- [Share Things On Social Media Via An Ionic 2 Mobile App](https://www.thepolyglotdeveloper.com/2016/02/share-things-on-social-media-via-an-ionic-2-mobile-app/) ![](ionic.png)
- [How To Use PouchDB + SQLite For Local Storage In Ionic 2](http://gonehybrid.com/how-to-use-pouchdb-sqlite-for-local-storage-in-ionic-2/) ![](ionic.png)
- [Adding Background Geolocation to an Ionic 2 Application](http://www.joshmorony.com/adding-background-geolocation-to-an-ionic-2-application/) ![](ionic.png)
- [Getting Familiar with Local Notifications in Ionic 2](http://www.joshmorony.com/getting-familiar-with-local-notifications-in-ionic-2/) ![](ionic.png)
- [Create a Nearby Places List with Google Maps in Ionic 2 – Part 1](http://www.joshmorony.com/create-a-nearby-places-list-with-google-maps-in-ionic-2-part-1/) ![](ionic.png) ![](ionic.png)
- [Create a Nearby Places List with Google Maps in Ionic 2 – Part 2](http://www.joshmorony.com/create-a-nearby-places-list-with-google-maps-in-ionic-2-part-2/) ![](ionic.png)
- [Applozic Chat & In App Messaging](https://docs.applozic.com/docs/ionic-phonegap-cordova-chat-sdk) ![](ionic.png)
- [Kommunicate Live Chat Plugin for Customer Support](https://docs.kommunicate.io/docs/cordova-installation.html) ![](ionic.png)

#### Backend as a Service

- [10 Minutes with Ionic 2: Calling an API](http://blog.ionic.io/10-minutes-with-ionic-2-calling-an-api/) ![](ionic.png)
- [Using Http to Fetch Remote Data from a Server in Ionic 2](http://www.joshmorony.com/using-http-to-fetch-remote-data-from-a-server-in-ionic-2/) ![](ionic.png)
- [Making REST HTTP Requests Like a Pro](http://www.gajotres.net/ionic-2-making-rest-http-requests-like-a-pro/) ![](ionic.png)
- [Posting data from Ionic 2 app to a PHP server](http://www.nikola-breznjak.com/blog/ionic2/posting-data-from-ionic-2-app/) ![](ionic.png)
- [Make HTTP Requests In An Ionic 2 Android And iOS App](https://www.thepolyglotdeveloper.com/2016/01/make-http-requests-in-an-ionic-2-android-and-ios-app/) ![](ionic.png)
- [Integrating Firebase with AngularFire2 into AngularJS & Ionic2](http://www.clearlyinnovative.com/integrating-firebase-with-angularfire2-into-angularjs-ionic2) ![](ionic.png)

#### i18n & l10n

- [Internationalize and Localize Your Ionic 3 App With Ng Translate for Angular 5](https://ionicthemes.com/tutorials/about/internationalize-and-localize-your-ionic2-app-with-ngtranslate) ![](ionic.png)
- [Internationalize and Localize Your App With Angular 2](http://www.gajotres.net/ionic-2-internationalize-and-localize-your-app-with-angular-2/) ![](ionic.png)

# Tools

- [Ionic2-vscode](https://marketplace.visualstudio.com/items?itemName=jgw9617.ionic2-vscode) ![](ionic.png)
- [Vim-ionic2](https://github.com/akz92/vim-ionic2) ![](ionic.png)
- [Ionic 4 Snippets](https://marketplace.visualstudio.com/items?itemName=fivethree.vscode-ionic-snippets) ![](ionic.png)

# Components

Merged from [here](https://github.com/fishme/awesome-ionic2-components).

### Animations

- [Lottie Animation](https://github.com/chenqingspring/ng-lottie) ![](angular.png)
- [Lottie Animation](https://github.com/fivethree-team/lottie) ![](angular.png)

### UI Library

- [Ionic 4 UI Component Library](https://github.com/fivethree-team/ionic-4-components) ![](ionic.png)

### Menu, Tabs

- [Scrollabel Tabs](https://github.com/SinoThomas/Ionic2-ScrollableTabs) ![](ionic.png)
- [Circular Tabs](https://github.com/SinoThomas/Ionic2-CircularTabs) ![](ionic.png)
- [Fab Toolbar](https://github.com/ekhmoi/fab-toolbar) ![](ionic.png)
- [Multi Level Sidemenu](https://github.com/sebaferreras/Ionic2-MultiLevelSideMenu) ![](ionic.png)
- [Popover Sidemenu](https://github.com/philipbrack/ionic2-menu-alternative-popover) ![](ionic.png)
- [Drop down Title](https://github.com/Mohd-PH/ionic-drop-down-title) ![](ionic.png)

### Form / Input

- [Autocomplete](https://github.com/kadoshms/ionic2-autocomplete) ![](ionic.png)
- [Form Generator based on JSON](https://github.com/makinacorpus/angular2-schema-form) ![](angular.png)
- [Dynamic Forms](https://github.com/udos86/ng2-dynamic-forms/) ![](angular.png)
- [Form Builder](https://github.com/rohitg7/ionic2-form-builder) ![](ionic.png)
- [Sidemenu tabs](https://github.com/seanmavley/ionic2-sidemenu-tabs) ![](ionic.png)

#### Input - Date/Calendar

- **Calendar**
  - [Calendar](https://github.com/twinssbc/Ionic2-Calendar) ![](ionic.png)
  - [Calendar](https://github.com/alexandretok/easy-ionic2-calendar) ![](ionic.png)
  - [Calendar](https://github.com/redpandatronicsuk/ionic2calendar) ![](ionic.png)
  - [Calendar](https://github.com/mattlewis92/angular-calendar) ![](angular.png) (very powerful)
  - [Calendar - Fullcalendar](https://github.com/nekken/ng2-fullcalendar) ![](angular.png)
- **Datepicker**
  - [Datepicker](https://github.com/misha130/datepicker-ionic2) ![](ionic.png)
  - [Datepicker (selectable range dates calendar)](https://github.com/HsuanXyz/ion2-calendar) ![](ionic.png)
  - [Datepicker](https://github.com/rajeshwarpatlolla/ionic2-datepicker) ![](ionic.png)
- [Rating](https://github.com/andrucz/ionic2-rating) ![](ionic.png)
- [Inputfield Mask](https://github.com/text-mask/text-mask)

### Lists/Table

- [Sortable/Filter Tables](https://github.com/valor-software/ng2-table) ![](angular.png)
- [Smart table (sorting, filtering ...)](https://github.com/akveo/ng2-smart-table) ![](angular.png)
- [Flexible and Light Table](https://github.com/swimlane/ngx-datatable) ![](angular.png)

### Images

- [Signatur](https://github.com/wulfsolter/angular2-signaturepad) ![](angular.png) works perfect with ![](ionic.png)
- [Image Fallback](https://github.com/VadimDez/ng2-img-fallback) ![](angular.png)
- [Lazy Load](https://github.com/tjoskar/ng2-lazyload-image) ![](ionic.png) ![](angular.png)
- [Image Loader](https://github.com/zyramedia/ionic-image-loader) ![](ionic.png)
- [Facebook Gallery](https://github.com/skyfloyd/ionic2-fb-gallery) ![](ionic.png)
- [Image Viewer](https://github.com/Riron/ionic-img-viewer) ![](ionic.png)
- [Gallery Modal](https://github.com/nikini/ionic-gallery-modal) ![](ionic.png)
- [Image Zoom](https://github.com/brtnshrdr/angular2-image-zoom) ![](angular.png)

### Charts/Diagram

- [Charts](https://github.com/valor-software/ng2-charts) ![](angular.png)
- **D3 Approaches**
  - [D3 Service](https://github.com/tomwanzek/d3-ng2-service) ![](angular.png)
  - [D3 Barchart](https://github.com/keathmilligan/angular2-d3-v4) ![](angular.png)
  - [D3 Line/Bar/Pie Charts](https://github.com/datencia/d3js-angular2-example) ![](angular.png)

### Video/Audio

- [Video Editor](https://github.com/rossmartin/video-editor-ionic2) ![](ionic.png)
- [Audio Recorder](https://github.com/tracktunes/ionic-recorder) ![](ionic.png)
- [Simple Audioplayer](https://github.com/arielfaur/ionic-audio) ![](ionic.png)

### Keyboards

- [Digit Keyboard](https://github.com/skol-pro/ion-digit-keyboard-v2) ![](ionic.png)

### Dialog

- [Dialogbox with Counter](https://github.com/HsuanXyz/ionic2-extend-alert) ![](ionic.png)

### Frames

- [ng Lightning (for Salesforce Apps)](https://github.com/ng-lightning/ng-lightning) ![](angular.png)

# Are you Italian?

**Join** the italian [Ionic Framework community](https://www.facebook.com/groups/380772785422827/)! ![](ionicitalia.jpg)
","A curated list of awesome Ionic libraries, resources, and solutions from Ionic 1
to the latest version of the framework. This repository is maintained by [Fikayo
Adepoju](https://github.com/coderonfleek) and [Alessio
Delmonti](http://codepen.io/ionic)"
1699,:japanese_castle: Better ways to structure iOS apps,"# awesome iOS architecture [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

❤️ Support my apps ❤️ 

- [Push Hero - pure Swift native macOS application to test push notifications](https://onmyway133.com/pushhero)
- [PastePal - Pasteboard, note and shortcut manager](https://onmyway133.com/pastepal)
- [Quick Check - smart todo manager](https://onmyway133.com/quickcheck)
- [Alias - App and file shortcut manager](https://onmyway133.com/alias)
- [My other apps](https://onmyway133.com/apps/)

❤️❤️😇😍🤘❤️❤️

Better ways to structure apps

![](Screenshots/Banner.png)

```swift
let buzzWords = [
  ""Model"", ""View"", ""Controller"", ""Entity"", ""Router"", ""Clean"", ""Reactive"", 
  ""Presenter"", ""Interactor"", ""Megatron"", ""Coordinator"", ""Flow"", ""Manager""
]
let architecture = buzzWords.shuffled().takeRandom()
let acronym = architecture.makeAcronym()
```

Content
==

- [MVC](#mvc)
- [MVP](#mvp)
- [MVVM](#mvvm)
- [Composable Archiecture](#composable-architecture)
- [Clean Architecture](#clean-architecture)
- [Unidirectional Data Flow](#unidirectional-data-flow)
- [VIPER](#viper)
- [VIP](#vip)
- [SwiftUI](#swiftui)
- [Data Source](#data-source)
- [Best Practices](#best-practices)


# MVC
Model View Controller

### Posts

- [Model-View-Controller, Apple Docs](https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html)
- [Looking at Model-View-Controller in Cocoa](https://www.cocoawithlove.com/blog/mvc-and-cocoa.html)
- [Do MVC like it’s 1979](https://badootech.badoo.com/do-mvc-like-its-1979-da62304f6568)
- [A Better MVC, Part 1: The Problems](https://davedelong.com/blog/2017/11/06/a-better-mvc-part-1-the-problems/) :rocket:
- [Using child view controllers as plugins in Swift](https://www.swiftbysundell.com/posts/using-child-view-controllers-as-plugins-in-swift)
- [MVC.](http://codeplease.io/2017/11/19/mvc/)
- [Model-View-Controller without the Controller](https://www.cocoawithlove.com/blog/mvc-without-the-c.html)
- [Just Controllers](http://khanlou.com/2018/02/just-controllers/)
- [A Better MVC](https://www.youtube.com/watch?v=YWVzCd5FYbs)
- [MVC: Many View Controllers](https://www.youtube.com/watch?v=ZShE3toDPIk)

### Repos

- [MVCTodo](https://github.com/davedelong/MVCTodo) A very simple ""To Do"" app to illustrate the principles from my ""A Better MVC"" talk

# MVP
Model View Presenter

### Posts

- [A dumb UI is a good UI: Using MVP in iOS with swift](http://iyadagha.com/using-mvp-ios-swift/)
- [Going from MVC to MVP on iOS](https://blog.moove-it.com/going-from-mvc-to-mvp-on-ios/)

### Repos

- [AppDemo](https://github.com/SSamanta/AppDemo)
- [foodMVP](https://github.com/voghDev/foodMVP)
- [ios-mvp-clean-architecture](https://github.com/FortechRomania/ios-mvp-clean-architecture)
- [iOS_MVC_MVP_MVVM_SampleApp](https://github.com/rajagp/iOS_MVC_MVP_MVVM_SampleApp)
- [MVP-iOS](https://github.com/Quaggie/MVP-iOS)
- [MVP-iOS](https://github.com/baoshanf/MVP-iOS)
- [MVPExample](https://github.com/amacou/MVPExample)
- [MVP](https://github.com/shuilinok/MVP)

# MVVM
Model View ViewModel

### Posts

- [Introduction to MVVM](https://www.objc.io/issues/13-architecture/mvvm/)
- [MVVM is Not Very Good](http://khanlou.com/2015/12/mvvm-is-not-very-good/)
- [Simplification Of IOS View Controllers: MVVM Or Presentation Controls?](http://blog.xebia.com/simplification-of-ios-view-controllers-mvvm-or-presentation-controls/)
- [On MVVM, and Architecture Questions](http://twocentstudios.com/2014/06/08/on-mvvm-and-architecture-questions/)
- [Reddit-MVVM-Benchmark](https://github.com/ivanbruel/Reddit-MVVM-Benchmark) MVVM with FRP Benchmark project
- [The MVVM Pattern for iOS Apps in Swift: a Pragmatic Approach](http://matteomanferdini.com/mvvm-pattern-ios-swift/)
- [MVVM Is Quite Okay at What It Is Supposed to Do](https://christiantietze.de/posts/2016/08/mvvm-is-okay-for-what-it-does/)
- [MVVM-C In Practice](https://www.youtube.com/watch?v=9VojuJpUuE8)
- [MVVM in Practice - RWDevCon Session](https://www.youtube.com/watch?v=sWx8TtRBOfk)
- [View Models at Kickstarter ](https://talk.objc.io/episodes/S01E47-view-models-at-kickstarter)
- [How not to get desperate with MVVM implementation](https://medium.com/flawless-app-stories/how-to-use-a-model-view-viewmodel-architecture-for-ios-46963c67be1b)
- [iOS Architecture: A State Container based approach](https://jobandtalent.engineering/ios-architecture-an-state-container-based-approach-4f1a9b00b82e) :rocket:
- [Different flavors of view models in Swift](https://www.swiftbysundell.com/posts/different-flavors-of-view-models-in-swift)
- [Reactive view models, simplified](https://www.youtube.com/watch?v=uTLG_LgjWGA)

### Repos

- [TheReactiveArchitecture](https://github.com/devxoul/TheReactiveArchitecture) The modern and reactive architecture for RxSwift application
- [kickstarter vm structure](https://github.com/kickstarter/native-docs/blob/master/vm-structure.md) Rx input and output
- [Coordinator-MVVM-Rx-Example](https://github.com/uptechteam/Coordinator-MVVM-Rx-Example) Example of MVVM-C architecture implemented with RxSwift
- [RxCoordinator](https://github.com/quickbirdstudios/RxCoordinator) iOS framework that helps you implement Model-View-ViewModel-Coordinator architecture.
- [ModernMVVM](https://github.com/V8tr/ModernMVVM) - A movie iOS app built with the MVVM architecture, Combine and SwiftUI frameworks

# Composable Architecture

### Repos

- [swift-composable-architecture](https://github.com/pointfreeco/swift-composable-architecture) A library for building applications in a consistent and understandable way, with composition, testing, and ergonomics in mind.

# Clean Architecture

### Posts

- [Clean Swift iOS Architecture for Fixing Massive View Controller](http://clean-swift.com/clean-swift-ios-architecture/)

### Repos

- [CleanStore](https://github.com/Clean-Swift/CleanStore) A sample iOS app built using the Clean Swift architecture
- [CleanArchitectureRxSwift](https://github.com/sergdort/CleanArchitectureRxSwift) Example of Clean Architecture of iOS app using RxSwift :rocket:
- [Reminders](https://github.com/tiagomartinho/Reminders) An iOS application written in Swift to demonstrate how to implement a Clean Architecture in iOS
- [CleanSwiftArchitectureGenerator](https://github.com/emrcftci/CleanSwiftArchitectureGenerator) A generator of Clean Swift Architecture files

# Unidirectional Data Flow

### Posts

- [Unidirectional Data Flow in Swift: An Alternative to Massive View Controllers](https://realm.io/news/benji-encz-unidirectional-data-flow-swift/)
- [Ziggurat iOS App Architecture](https://corner.squareup.com/2015/12/ziggurat-ios-app-architecture.html)
- [ziggurat](https://github.com/alanf/ziggurat) App architecture with one-way data data flow and view models
- [Rethinking iOS App Architecture Using a One Way Data Flow](https://www.youtube.com/watch?v=4cP1p5VOrSI)
- [Elmification of Swift](https://medium.com/design-x-code/elmification-of-swift-af14b7f92b30#.7twj79puf)
- [StateView](https://github.com/sahandnayebaziz/StateView) Views that automatically update themselves.
- [Render](https://github.com/alexdrone/Render) Swift and UIKit a la React.
- [Real World Flux Architecture on iOS](http://blog.benjamin-encz.de/post/real-world-flux-ios/) :star:
- [Turning UIKit Inside Out](https://realm.io/news/altconf-benji-encz-uikit-inside-out-declarative-programming) :star:
- [App Coordinators and Redux on iOS](http://willowtreeapps.com/ideas/app-coordinators-and-redux-on-ios/)
- [ReSwift Tutorial: Memory Game App](https://www.raywenderlich.com/155815/reswift-tutorial-memory-game-app)
- [Building a Unidirectional Data Flow App in Swift with Realm](https://realm.io/news/unidirectional-data-flow-in-swift/)
- [Architecture Thoughts: Migrating Marvel's iOS App to ReSwift ..](https://medium.com/cocoaacademymag/architecture-thoughts-migrating-marvels-ios-app-to-reswift-ef7f20e84e60)
- [Functional architecture for Swift](https://medium.com/@PallasR/functional-architecture-for-swift-dfa8854239cb)
- [iOS Architecture: Separating logic from effects](https://jobandtalent.engineering/ios-architecture-separating-logic-from-effects-7629cb763352) :star:

### Repos

- [ReSwift](https://github.com/ReSwift/ReSwift) Unidirectional Data Flow in Swift - Inspired by Redux :star:
- [Reactor](https://github.com/jarsen/Reactor) Unidirectional data flow in Swift
- [Aftermath](https://github.com/hyperoslo/Aftermath) Stateless message-driven micro-framework in Swift
- [Renderer](https://github.com/alexdrone/Render) Swift and UIKit a la React.
- [Few.swift](https://github.com/joshaber/Few.swift) Views as functions of their state.
- [SwiftFlux](https://github.com/yonekawa/SwiftFlux) A type-safe Flux implementation for Swift
- [katana-swift](https://github.com/BendingSpoons/katana-swift) Swift Apps in a Swoosh
- [Dispatch](https://github.com/alexdrone/Dispatch) Multi-store Flux implementation in Swift.
- [ReactorKit](https://github.com/ReactorKit/ReactorKit) A framework for reactive and unidirectional Swift application architecture :rocket: :rocket:
- [RxFeedback](https://github.com/kzaher/RxFeedback) Architecture for RxSwift
- [tea-in-swift](https://github.com/chriseidhof/tea-in-swift) The Elm Architecture in Swift
- [Suas-iOS](https://github.com/zendesk/Suas-iOS) Unidirectional data flow architecture implementation for iOS, macOS, tvOS and watchOS http://suas.readme.io
- [ReactComponentKit](https://github.com/ReactComponentKit/ReactComponentKit) ReactComponentKit is a library for building UIViewController based on Components.
- [Highway](https://github.com/cooler333/Highway) Fast and simple multi-store Redux-like architecture for iOS/OSX applications
- [Mobius.swift](https://github.com/spotify/Mobius.swift) A functional reactive framework for managing state evolution and side-effects from Uber
- [ReCombine](https://github.com/ReCombine/ReCombine) A Swift Redux library utilizing Apple's Combine Framework
- [SwiftRex](https://github.com/SwiftRex/SwiftRex) Swift + Redux + (Combine|RxSwift|ReactiveSwift) -> SwiftRex
- [tempura-swift](https://github.com/BendingSpoons/tempura-swift) A holistic approach to iOS development, inspired by Redux and MVVM
- [OneWay](https://github.com/DevYeom/OneWay) A Swift library for state management with unidirectional data flow.

# VIPER
View Interactor Presenter Entity Router

### Posts

- [Introduction to VIPER](https://github.com/strongself/The-Book-of-VIPER/blob/master/english/introduction-to-viper.md)
- [Architecting iOS Apps with VIPER](http://www.objc.io/issues/13-architecture/viper/)
- [Brigade’s Experience Using an MVC Alternative](https://medium.com/brigade-engineering/brigades-experience-using-an-mvc-alternative-36ef1601a41f)
- [First Observations on TDD with VIPER](http://iosunittesting.com/tdd-with-viper/)
- [Building Modular iOS Apps](https://realm.io/news/modular-ios-apps/)
- [iPhreaks Show – VIPER with Conrad Stoll and Jeff Gilbert](http://devchat.tv/iphreaks/064-iphreaks-show-viper-with-conrad-stoll-and-jeff-gilbert)
- [Clean Architecture - VIPER by Redbooth](https://www.youtube.com/watch?v=OX4rLAJC7lw)
- [Humble Object Pattern in Swift](https://medium.com/ios-os-x-development/humble-object-pattern-in-swift-de5efe8fe05a#.dmkvdbjoy)
- [Should I use Viper architecture for my next iOS application, or it is still very new to use?](https://www.quora.com/Should-I-use-Viper-architecture-for-my-next-iOS-application-or-it-is-still-very-new-to-use)
- [VIPER to be or not to be?](https://swifting.io/blog/2016/03/07/8-viper-to-be-or-not-to-be/)
- [iOS Project Architecture: Using VIPER](https://www.ckl.io/blog/ios-project-architecture-using-viper/)
- [iOSModulesArchitecture](https://github.com/JeanLebrument/iOSModulesArchitecture) Quick example of how divide an app into modules to respect the SOLID principles
- [ARCHITECTING MOBILE APPS WITH (B)VIPER MODULES - A STRUCTURED ENGINEERING APPROACH FOR BIG MOBILE APPS](http://www.mttnow.com/blog/architecting-mobile-apps-with-bviper-modules)
- [Clean Architecture - VIPER at Redbooth](https://speakerdeck.com/sergigracia/clean-architecture-viper) by [@sergigracia](https://twitter.com/sergigracia)
- [VIPER to be or not to be](https://swifting.io/blog/2016/03/07/8-viper-to-be-or-not-to-be/)
- [Building iOS App With VIPER Architecture](https://blog.mindorks.com/building-ios-app-with-viper-architecture-8109acc72227)
- [Viper Framework for iOS using Swift v3](https://github.com/ferranabello/Viperit)
- [VIPER-S: WRITING YOUR OWN ARCHITECTURE AND UNDERSTAND ITS IMPORTANCE (PART 3)](http://www.thinkandbuild.it/viper-s-writing-your-own-architecture-and-understand-its-importance-part-3/)
- [Facing the VIPER](https://vimeo.com/album/4786409/video/235312913)
- [Building a Framework with VIPER](https://academy.realm.io/posts/try-swift-nyc-sonam-dhingra-building-viper-framework/)
- [Implementing VIPER Architecture Pattern for iOS](https://medium.com/flawless-app-stories/implementing-viper-archticture-pattern-for-ios-d24a6def8ba2)

### Repos

- [iOS-Viper-Architecture](https://github.com/MindorksOpenSource/iOS-Viper-Architecture) A detailed sample app that implements VIPER architecture
- [iOS Viper XCode Templates](https://github.com/infinum/iOS-VIPER-Xcode-Templates) Another detailed sample app that implements VIPER architecture with code generation templates
- [iOSSwiftStarter](https://github.com/RoRoche/iOSSwiftStarter) A sample iOS app written in Swift using the VIPER architecture. 
- [VIPER-TDD](https://github.com/hendych/VIPER-TDD/) A sample iOS app written in Swift 4 using VIPER architecture with unit tests.

# VIP
View Interactor Presenter

### Posts

- [Architecture Wars – A New Hope](https://swifting.io/blog/2016/09/07/architecture-wars-a-new-hope/)
- [Introducing Clean Swift Architecture (VIP)](https://hackernoon.com/introducing-clean-swift-architecture-vip-770a639ad7bf)

# SwiftUI

### Posts

- [SwiftUI Architectures: Model-View, Redux & MVVM](https://quickbirdstudios.com/blog/swiftui-architecture-redux-mvvm/)
- [Building a Scalable SwiftUI Architecture](https://basememara.com/building-scalable-swiftui-architecture-app/)
- [SwiftUI and State Management](https://www.pointfree.co/episodes/ep65-swiftui-and-state-management-part-1)
- [Building complex modular architectures with SwiftUI, Combine and Swift Package Manager (SPM)](https://medium.com/cristian-ortega/modular-architectures-swiftui-combine-swift-package-manager-80820b4ff463)

### Repos

- [Harvest](https://github.com/inamiy/Harvest) Harvest: Apple's Combine.framework + State Machine, inspired by Elm.
- [Stinsen](https://github.com/rundfunk47/stinsen) Coordinators in SwiftUI. Simple, powerful and elegant.
- [FlowStacks](https://github.com/johnpatrickmorgan/FlowStacks) FlowStacks allows you to hoist SwiftUI navigation and presentation state into a Coordinator

# Data Source

### Posts

- [Lightweight iOS View Controllers](https://yalantis.com/blog/lightweight-ios-view-controllers-separate-data-sources-guided-mvc/)
- [Apple’s Take on App Architecture](http://oleb.net/blog/2014/06/apples-take-on-app-architecture/)
- [Fluent Pagination - no more jumpy scrolling](http://www.iosnomad.com/blog/2014/4/21/fluent-pagination)
- [AdvancedCollectionView](https://github.com/zwaldowski/AdvancedCollectionView)
- [iOS: UITableView controller](http://gosuwachu.io/2014/01/12/uitableview-controller/)
- [Nestable](http://khanlou.com/2015/04/nestable/)
- [Advanced UITableViews Made Simple: YLTableView](http://engineeringblog.yelp.com/2015/06/advanced-uitableviews-made-simple-yltableview.html)
- [Typed, yet Flexible Table View Controller](http://holko.pl/2016/01/05/typed-table-view-controller/)
- [Complex table view state changes made easy](https://engineering.kitchenstories.io/this-simple-trick-will-change-how-you-think-about-table-views-706193654974#.raaqvz1yi)
- [UMT2016 - John Sundell - Building component-driven UIs at Spotify](https://www.youtube.com/watch?v=vuCfKjOwZdU&feature=youtu.be)
- [Refactoring at Scale – Lessons Learned Rewriting Instagram’s Feed](https://realm.io/news/tryswift-ryan-nystrom-refactoring-at-scale-lessons-learned-rewriting-instagram-feed/)
- [IGListKit Tutorial: Better UICollectionViews](https://www.raywenderlich.com/147162/iglistkit-tutorial-better-uicollectionviews)
- [Dealing with Complex Table Views in iOS and Keeping Your Sanity](https://medium.cobeisfresh.com/dealing-with-complex-table-views-in-ios-and-keeping-your-sanity-ff5fee1fbb83)
 - [iOS: How to build a Table View with multiple cell types](https://medium.com/@stasost/ios-how-to-build-a-table-view-with-multiple-cell-types-2df91a206429)
 - [Using Dedicated Objects as Delegates & Datasources](https://alisoftware.github.io/architecture/2018/05/20/dedicated-datasources/)
 - [Reusable data sources in Swift](https://www.swiftbysundell.com/posts/reusable-data-sources-in-swift)
- [UITableView Datasource with SwiftUI-style syntax](https://medium.com/@_myrddin_/tableview-datasource-with-swiftui-style-syntax-1372b3a04687)

### Repos

- [Mensa](https://github.com/jordanekay/Mensa) Smart, modern table and collection views on iOS.
- [RLDTableViewSuite](https://github.com/rlopezdiez/RLDTableViewSuite) Reusable table view controller, data source and delegate for all your UITableView needs
- [PagedArray](https://github.com/MrAlek/PagedArray) A Swift data structure for easier pagination
- [ReadingList](https://github.com/gonzalezreal/ReadingList) An example on using the Mantle Modeling Framework with Overcoat AFNetworking extension.
- [DTTableViewManager](https://github.com/DenHeadless/DTTableViewManager) Protocol-oriented UITableView management, powered by generics and associated types.
- [Spots](https://github.com/hyperoslo/Spots) Spots is a view controller framework that makes your setup and future development blazingly fast :star:
- [JSQDataSourcesKit](https://github.com/jessesquires/JSQDataSourcesKit) Type-safe, value-oriented, composable data source objects that keep your view controllers light
- [HubFramework](https://github.com/spotify/HubFramework) Spotify’s component-driven UI framework for iOS
- [ComponentKit](https://github.com/facebook/componentkit) A React-inspired view framework for iOS
- [IGListKit](https://github.com/instagram/IGListKit) A data-driven UICollectionView framework for building fast and flexible lists.
- [JASONETTE-iOS](https://github.com/Jasonette/JASONETTE-iOS) Native App over HTTP :star::star::rocket:
- [StackScrollView](https://github.com/muukii/StackScrollView) iOS Form UI Builder in Swift (powered by UICollectionView)
- [ScrollingStackViewController](https://github.com/justeat/ScrollingStackViewController) A view controller that uses root views of child view controllers as views in a UIStackView.
- [ScrollingStackContainer](https://github.com/malcommac/ScrollingStackContainer) Efficient Scrolling UIStackView in Swift
- [Flow](https://github.com/malcommac/Flow) A new declarative approach to UITableView
- [FlowKit](https://github.com/malcommac/FlowKit) Declarative type-safe manager for UITableView & UICollectionView
- [Static](https://github.com/venmo/Static) Simple static table views for iOS in Swift.
- [Bento](https://github.com/Babylonpartners/Bento) Swift library for building component-based interfaces on top of UITableView
- [ReactiveLists](https://github.com/plangrid/ReactiveLists) React-like API for UITableView & UICollectionView
- [LiveCollections](https://github.com/scribd/LiveCollections)
- [AloeStackView](https://github.com/airbnb/AloeStackView) A simple class for laying out a collection of views with a convenient API, while leveraging the power of Auto Layout :star:
- [Carbon](https://github.com/ra1028/Carbon) A declarative library for building component-based user interfaces in UITableView and UICollectionView
- [Owl](https://github.com/malcommac/Owl) A declarative type-safe framework for building fast and flexible lists with Tables & Collections
- [Collor](https://github.com/voyages-sncf-technologies/Collor) A MVVM data-oriented framework for UICollectionView with great and useful features.
- [FunctionalTableData](https://github.com/Shopify/FunctionalTableData) Declarative UITableViewDataSource implementation
- [Upstream](https://github.com/onmyway133/Upstream) ⛲️ Adapted Data Source in Swift and a little bit more :rocket: :rocket:
- [Micro](https://github.com/onmyway133/Micro) Fast diffing and type safe SwiftUI style data source for UICollectionView :rocket: :rocket:
- [Epoxy](https://github.com/airbnb/epoxy-ios) - Epoxy is a suite of declarative UI APIs for building UIKit applications in Swift
 
# Best Practices

### General

- [Benchmarking MVC vs MVP vs MVVM in iOS](https://www.simform.com/mvc-mvp-mvvm-ios-app-development/)
- [iOS Architecture Patterns Demystifying MVC, MVP, MVVM and VIPER](https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.tliwdfd60) :rocket:
- [Clean Cocoa](http://www.fantageek.com/blog/2015/12/03/clean-cocoa/) :star:
- [iOS Development: You're Doing It Wrong](http://doing-it-wrong.mikeweller.com/2013/06/ios-app-architecture-and-tdd-1.html)
- [How to separate view controllers from their view logic](http://jpellat.com/how-to-separate-view-controllers-from-his-view-logic/)
- [8 Patterns to Help You Destroy Massive View Controller](http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/)
- [Intentions](http://chris.eidhof.nl/posts/intentions.html)
- [Model-View-ViewModel for iOS](http://www.teehanlax.com/blog/model-view-viewmodel-for-ios/)
- [Singletons, AppDelegates and top-level data.](http://www.cocoawithlove.com/2008/11/singletons-appdelegates-and-top-level.html)
- [Collection Extensions](http://kickingbear.com/blog/archives/9)
- [Model View Controller Presenter](https://medium.com/ios-apprentice/model-view-controller-presenter-8bb4149fa5ef)
- [Model View Whatever](http://khanlou.com/2014/03/model-view-whatever/)
- [How We Modularized Medium’s iOS codebase](https://medium.com/medium-eng/how-we-modularized-mediums-ios-codebase-8f8f26965c76)
- [Lighter View Controller Swift](http://blog.vikingosegundo.de/2014/06/16/lighter-view-controller-swift/)
- [Improve your iOS Architecture with FlowControllers](http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/)
- [Massive View Controller](http://khanlou.com/2015/12/massive-view-controller/)
- [Modern application architectures (Reactive programming, MVVM and beyond)](https://slack-files.com/T051G5Y6D-F0HABHKDK-8e9141e191)
- [“Tree of Models” as an Alternative App Architecture Model](https://yalantis.com/blog/tree-of-models-as-an-alternative-app-architecture-model/) :star:
- [A composable pattern for pure state machines with effects](https://gist.github.com/andymatuschak/d5f0a8730ad601bcccae97e8398e25b2)
- [Architectures comparison](https://swifting.io/blog/2016/09/07/architecture-wars-a-new-hope/)
- [Basecamp 3 for iOS: Hybrid Architecture](https://m.signalvnoise.com/basecamp-3-for-ios-hybrid-architecture-afc071589c25)
- [Highly maintainable app architecture](http://aplus.rs/2017/highly-maintainable-app-architecture/) :star:
- [Driving view state through data](https://academy.realm.io/posts/try-swift-nyc-2017-matt-gallagher-driving-view-state-through-data/)
- [Improving Existing Apps with Modern Best Practices](https://developer.apple.com/videos/play/wwdc2016/213/) :rocket:
- [Platformizing UI code](https://www.youtube.com/watch?v=TCPWckSi0Xs&feature=youtu.be)
- [The State of Statelessness](https://realm.io/news/pragma-hannes-verlinde-statelessness-react-native/)
- [Good iOS Application Architecture](https://academy.realm.io/posts/krzysztof-zablocki-mDevCamp-ios-architecture-mvvm-mvc-viper) :rocket:
- [Much ado about iOS app architecture](http://aplus.rs/2017/much-ado-about-ios-app-architecture/) :star:
- [The Presentation Model](https://medium.com/@sandofsky/the-presentation-model-6aeaaab607a0)
- [The New Swipe Right with Swift](http://tech.gotinder.com/the-new-swipe-right-with-swift/)
- [Zero Knowledge Architectures for Mobile Applications](https://medium.com/@vixentael/zero-knowledge-architectures-for-mobile-applications-b00a231fda75)
- [Top-down iOS error architecture](https://medium.com/@londeix/top-down-error-architecture-d8715a28d1ad)
- [App Architectures: Remixed](https://skillsmatter.com/skillscasts/11527-app-architectures-remixed)
- [iOS Application Architecture](https://www.youtube.com/watch?v=PdkWjdKOqfo)
- [How to move data sources and delegates out of your view controllers](https://www.hackingwithswift.com/articles/86/how-to-move-data-sources-and-delegates-out-of-your-view-controllers)
- [App Architecture and Object Composition in Swift](https://medium.com/flawless-app-stories/app-architecture-and-object-composition-in-swift-c9101a9e37e3)
- [Let's Talk Architecture](https://kean.github.io/post/app-architecture)
- [The Lost Art of System Design](https://www.youtube.com/watch?v=ujOc3a7Hav0)
- [Maintaining architecture in iOS apps](https://www.youtube.com/watch?v=kyOtj16k_lQ)
- [Four Rules of Simpler iOS Software Design](https://medium.com/flawless-app-stories/four-rules-of-simpler-ios-software-design-c371818d08e0)
- [The Art of Designing Code](https://www.youtube.com/watch?v=_qKlb7MbeKA) :star:
- [Why UI Design matters](https://www.scnsoft.com/services/ui-design)

### API Design

- [Everyone is an API designer](https://vimeo.com/234961067) :rocket:
- [Lightweight API design in Swift](https://www.swiftbysundell.com/articles/lightweight-api-design-in-swift/)
- [API Design](http://mattgemmell.com/api-design/)
- [Testable interface design with enums](https://kandelvijaya.com/2018/03/03/testableinterfacedesignwithenums/)
- [Designing Swift APIs](https://www.swiftbysundell.com/posts/designing-swift-apis)
- [Designing Accessible APIs](https://learntalks.com/try-Swift-New-York/2019/try!-Swift-New-York-2019-Designing-Accessible-APIs-Dave-DeLong/)

### Dependency Injection

- [Managing objects using Locks & Keys in Swift](https://www.swiftbysundell.com/posts/managing-objects-using-locks-and-keys-in-swift) :star:
- [How To Control The World](https://www.pointfree.co/blog/posts/21-how-to-control-the-world)
- [Structure and Interpretation of Swift Programs](https://www.youtube.com/watch?v=V-YvI83QdMs)
- [Extracting view controller actions in Swift](https://www.swiftbysundell.com/posts/extracting-view-controller-actions-in-swift)
- [Behaviors in iOS Apps](https://www.objc.io/issues/13-architecture/behaviors/)
- [Logic controllers in Swift](https://www.swiftbysundell.com/posts/logic-controllers-in-swift)
- [Model controllers in Swift](https://www.swiftbysundell.com/posts/model-controllers-in-swift)
- [Using protocol compositon for dependency injection](http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/)
- [Cleaning up your dependencies with protocols](https://www.donnywals.com/cleaning-up-your-dependencies-with-protocols/)
- [Swift Dependency Injection via Property Wrapper](https://basememara.com/swift-dependency-injection-via-property-wrapper/)

### Refactoring

- [Similar Prefixes](http://khanlou.com/2018/08/similar-prefixes/)
- [Structuring Swift code](https://www.swiftbysundell.com/posts/structuring-swift-code)

### Model

- [Structuring model data in Swift](https://www.swiftbysundell.com/posts/structuring-model-data-in-swift)
- [Utilizing value semantics in Swift](https://www.swiftbysundell.com/posts/utilizing-value-semantics-in-swift)
- [Type safe temporary models](https://iankeen.tech/2018/06/05/type-safe-temporary-models/)
- [Defining testing data in Swift](https://swiftbysundell.com/articles/defining-testing-data-in-swift/)

### View and Model

- [View Descriptors](https://152percent.com/blog/2018/4/16/view-descriptors)
- [Preventing views from being model aware in Swift](https://www.swiftbysundell.com/posts/preventing-views-from-being-model-aware-in-swift)
- [UITableViewCell and Model](https://github.com/onmyway133/blog/issues/154)
- [Building Better Views](https://www.fabisevi.ch/2019/12/26/building-better-views-part-i/)

### AppDelegate

- [SERVICE-ORIENTED APPDELEGATE](http://sizeof.io/service-oriented-appdelegate/)
- [Lighter AppDelegate](http://www.fantageek.com/blog/2015/10/31/lighter-appdelegate/)
- [Service-oriented AppDelegate](https://medium.com/ios-os-x-development/pluggableapplicationdelegate-e50b2c5d97dd#.scovfjixy)

### Repos

- [Logician](https://github.com/mdiep/Logician) Logic programming in Swift
- [modular-architecture](https://github.com/bricepollock/modular-architecture) Examples of iOS Modular Architecture in Swift
- [Delta](https://github.com/thoughtbot/Delta) Delta takes an app that has custom state management spread throughout all the VCs and simplifies it by providing a simple interface to change state and subscribe to its changes.
- [eigen](https://github.com/artsy/eigen/blob/master/docs/overview.md) The Art World in Your Pocket or Your Trendy Tech Company's Tote, Artsy's iOS app
- [ENGINEERING THE ARCHITECTURE BEHIND UBER’S NEW RIDER APP](https://eng.uber.com/new-rider-app/)
- [RIBs](https://github.com/uber/RIBs) Uber's cross-platform mobile architecture framework.
- [Alicerce](https://github.com/Mindera/Alicerce) A base for iOS Applications by Mindera
- [Flint](https://github.com/MontanaFlossCo/Flint) The Flint framework for building apps on Apple platforms using Feature Driven Development
- [ios-architecture](https://github.com/tailec/ios-architecture) A collection of iOS architectures - MVC, MVVM, MVVM+RxSwift, VIPER, RIBs and many others
- [SwiftHub](https://github.com/khoren93/SwiftHub) GitHub iOS client in RxSwift and MVVM-C clean architecture

### Sync

- [Introducing the Realm Mobile Platform: Realtime Sync Plus Fully Open Source Databas](https://realm.io/news/introducing-realm-mobile-platform/)
- [wire-ios-sync-engine](https://github.com/wireapp/wire-ios-sync-engine) iOS synchronization library for Wire

### Cache

- [MVC-RS](https://medium.com/swift-programming/mvc-rs-8780e73e9ff4)
- [The Missing Light Persistence Layer for Swift](https://medium.com/ios-os-x-development/the-missing-light-persistence-layer-for-swift-35ce75d02d47)
- [How to Abstract Your Persistence Layer and Migrate to Another One on iOS With JustPersist](http://albertodebortoli.com/blog/2017/03/02/How-to-abstract-your-persistence-layer-and-migrate-to-another-one-on-iOS-with-JustPersist/)
- [The Flat Cache](http://khanlou.com/2017/10/the-flat-cache/)
- [Cache](https://github.com/hyperoslo/Cache) Nothing but Cache
- [RocketData](https://github.com/linkedin/RocketData)
- [Managing Consistency of Immutable Models](https://realm.io/news/slug-peter-livesey-managing-consistency-immutable-models/)
- [CTPersistance](https://github.com/casatwy/CTPersistance)
- [JustPersist](https://github.com/justeat/JustPersist)
- [Pantry](https://github.com/nickoneill/Pantry)
- [The Many Offline Options for iOS Apps](https://medium.com/device-blogs/the-many-offline-options-for-ios-apps-2922c9b3bff3)
- [How to Design Offline-first Approach in a Mobile App](https://www.netguru.com/blog/how-to-design-offline-first-approach-in-mobile-app)
- [Flannel: An Application-Level Edge Cache to Make Slack Scale](https://slack.engineering/flannel-an-application-level-edge-cache-to-make-slack-scale-b8a6400e2f6b)

### Asynchronous/Reactive Programming

- [Comparative Asynchronous Programming](https://ashfurrow.com/blog/comparative-asynchronous-programming/)
- [Thinking in RxSwift](http://adamborek.com/thinking-rxswift/)
- [Reducers](http://chris.eidhof.nl/post/reducers/)
- [RxSwift](https://github.com/ReactiveX/RxSwift) Reactive Programming in Swift
- [Operations](https://github.com/danthorpe/Operations) A Swift framework inspired by WWDC 2015 Advanced NSOperations session.
- [Modern RxSwift Architectures](https://academy.realm.io/posts/try-swift-nyc-2017-krunoslav-zaher-modern-rxswift-architectures/)
- [Architecturing an app with functional reactive programming](https://www.welcometothejungle.co/fr/articles/functional-reactive-programming-architecture)
- [TheBinderArchitecture](https://github.com/DeclarativeHub/TheBinderArchitecture) A declarative architecture based on bindings

### Navigation/Coordinator/FlowController

- [Coordinators Redux](http://khanlou.com/2015/10/coordinators-redux/)
- [Deep links with no brainer](http://ilya.puchka.me/deeplinks-no-brainer/)
- [Flow Controllers on iOS for a Better Navigation Control](http://albertodebortoli.github.io/blog/2014/09/03/flow-controllers-on-ios-for-a-better-navigation-control/)
- [Improve your iOS Architecture with FlowControllers](http://merowing.info/2016/01/improve-your-ios-architecture-with-flowcontrollers/)
- [Coordinators Essential tutorial](https://medium.com/blacklane-engineering/coordinators-essential-tutorial-part-i-376c836e9ba7)
- [MVVM-C A simple way to navigate](http://tech.trivago.com/2016/08/26/mvvm-c-a-simple-way-to-navigate/)
- [Compass](https://github.com/hyperoslo/Compass) Compass helps you setup a central navigation system for your application 
- [Deep Linking at Kickstarter](https://talk.objc.io/episodes/S01E49-deep-linking-at-kickstarter)
- [One navigator to rule them all - iOS Conf SG 2017](https://www.youtube.com/watch?v=7kchC7OoMHk)
- [URL Routing with Compass](https://github.com/onmyway133/blog/issues/110) :star:
- [Weavy](https://github.com/twittemb/Weavy) Navigation framework for iOS applications based on a weaving pattern
- [RxFlow](https://github.com/RxSwiftCommunity/RxFlow) RxFlow is a navigation framework for iOS applications based on a Reactive Flow Coordinator pattern
- [A Flexible Routing Approach in an iOS App](https://medium.com/rosberryapps/the-flexible-routing-approach-in-an-ios-app-eb4b05aa7f52)
- [Navigation in Swift](https://www.swiftbysundell.com/posts/navigation-in-swift)
- [Coordinators Essential tutorial. Part I](https://medium.com/blacklane-engineering/coordinators-essential-tutorial-part-i-376c836e9ba7)
- [Coordinators Essential tutorial. Part II](https://medium.com/blacklane-engineering/coordinators-essential-tutorial-part-ii-b5ab3eb4a74)
- [Coordinators Redux](http://khanlou.com/2015/10/coordinators-redux/)
- [Coordinators – Soroush Khanlou - CocoaHeads Stockholm](https://www.youtube.com/watch?v=a1g3k3NObkE)
- [Passing dependencies through Coordinator chain](http://aplus.rs/2017/passing-dependencies-through-coordinator-chain/)
- [MVC-C · Injecting Coordinator pattern in UIKit](http://aplus.rs/2017/mvc-c-injecting-coordinator-pattern-in-uikit/)
- [XCoordinator](https://github.com/quickbirdstudios/XCoordinator) Powerful navigation library for iOS based on the coordinator pattern
- [Controlling Hierachies](https://sandofsky.com/blog/controller-hierarchies.html)
- [Coordinator and FlowController](https://github.com/onmyway133/blog/issues/106)
- [Advanced coordinators in iOS](https://www.hackingwithswift.com/articles/175/advanced-coordinator-pattern-tutorial-ios)
- [iOS Coordinators: A Storyboard Approach](https://thoughtbot.com/blog/ios-coordinators-a-storyboard-approach)
- [The Navigator](https://jobandtalent.engineering/the-navigator-420b24fc57da)

### Analytics

- [Building an enum-based analytics system in Swift](https://www.swiftbysundell.com/posts/building-an-enum-based-analytics-system-in-swift)
- [When Not to Use an Enum](http://matt.diephouse.com/2017/12/when-not-to-use-an-enum/)
- [Misusing enums](https://davedelong.com/blog/2017/12/07/misusing-enums/)
- [Logging in Swift](http://merowing.info/2016/07/logging-in-swift/)
- [Swift Analytics](http://chris.eidhof.nl/post/swift-analytics/)
- [Analytics - How to avoid common mistakes in iOS](https://benoitpasquier.com/common-mistakes-analytics-ios-app/)

### SDK

- [line-sdk-ios-swift](https://github.com/line/line-sdk-ios-swift) Provides a modern way of implementing LINE APIs
- [BackchannelSDK-iOS](https://github.com/backchannel/BackchannelSDK-iOS) The official iOS SDK for Backchannel
- [SpotifyLogin](https://github.com/spotify/SpotifyLogin) Swift framework for authenticating with the Spotify API
- [stripe-ios](https://github.com/stripe/stripe-ios) Stripe iOS SDK

### Functional

- [Proof in Functions](https://www.fewbutripe.com/swift/math/2015/01/06/proof-in-functions.html) :rocket:
- [Instance Methods are “Curried” Functions in Swift](https://oleb.net/blog/2014/07/swift-instance-methods-curried-functions/)

### Types

- [Making illegal states unrepresentable](https://oleb.net/blog/2018/03/making-illegal-states-unrepresentable/)
- [Functional Snippet #13: Phantom Types](https://www.objc.io/blog/2014/12/29/functional-snippet-13-phantom-types/)
- [Never](https://nshipster.com/never/)
- [Pure functions in Swift](https://www.swiftbysundell.com/posts/pure-functions-in-swift)
- [Phantom types in Swift](https://www.swiftbysundell.com/posts/phantom-types-in-swift)

### Protocols

- [Mixins over Inheritance](https://alisoftware.github.io/swift/protocol/2015/11/08/mixins-over-inheritance/)
- [Mixins and traits in Swift 2.0](http://machinethink.net/blog/mixins-and-traits-in-swift-2.0/)
- [Protocol Oriented Programming is Not a Silver Bullet](http://chris.eidhof.nl/post/protocol-oriented-programming/)
- [Value-Oriented Programming](https://matt.diephouse.com/2018/08/value-oriented-programming/)
- [Beyond Crusty: Real-World Protocols](https://www.dotconferences.com/2016/01/rob-napier-beyond-crusty-real-world-protocols)
- [A Little Respect for AnySequence](http://robnapier.net/erasure)
- [Protocols Sidebar I: Protocols Are Nonconformists](http://robnapier.net/nonconformist)
- [Protocols II: A Mockery of Protocols](http://robnapier.net/a-mockery-of-protocols)
- [A case of premature abstractions](https://swiftindepth.com/2019-03-24/a-case-of-premature-abstractions)
- [Protocol-Oriented Library Design](https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1)
- [Protocol Witnesses - Brandon Williams - App Builders 2019](https://www.youtube.com/watch?v=3BVkbWXcFS4)

### Code

- [Splash](https://github.com/JohnSundell/Splash) A fast, lightweight and flexible Swift syntax highlighter for blogs, tools and fun!

### Separation of Concerns

- [The trouble with manager objects](https://sandofsky.com/blog/manager-classes.html)

### Testing

- [Defining testing data in Swift](https://www.swiftbysundell.com/posts/defining-testing-data-in-swift)
- [Time traveling in Swift unit tests](https://www.swiftbysundell.com/articles/time-traveling-in-swift-unit-tests/)
- [The power of UserDefaults in Swift](https://www.swiftbysundell.com/articles/the-power-of-userdefaults-in-swift/)
- [Unit testing asynchronous Swift code](https://www.swiftbysundell.com/articles/unit-testing-asynchronous-swift-code/)

### Generic

- [Generalizing Swift code](https://www.swiftbysundell.com/posts/generalizing-swift-code)
- [Alternatives to protocols in Swift](https://www.swiftbysundell.com/articles/alternatives-to-protocols-in-swift/)

### Cross platform

- [LibSlack: the C++ library at the foundation of our client application architecture](https://slack.engineering/libslack-the-c-library-at-the-foundation-of-our-client-application-architecture-97470b5ef9b3)
- [The (not so) hidden cost of sharing code between iOS and Android](https://blogs.dropbox.com/tech/2019/08/the-not-so-hidden-cost-of-sharing-code-between-ios-and-android/)
- [Client Consistency at Slack: Beyond Libslack](https://slack.engineering/client-consistency-at-slack-beyond-libslack-c9cfbe778fb7)

### Remote Config / Feature Flagging

- [A Smart Feature Flagging System for iOS](https://albertodebortoli.com/2019/11/26/a-smart-feature-flagging-system-for-ios/)

Licence
--
This project is released under the MIT license. See [LICENSE.md.](https://github.com/onmyway133/awesome-ios-architecture/blob/master/LICENSE)
","summarize: # awesome iOS architecture [![Awesome](https://cdn.rawgit.com/sindres
orhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)"
817,Useful resources for using IPFS and building things on top of it,"# Awesome IPFS [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

> Useful resources for using [IPFS](https://ipfs.tech) and building things on top of it

_This list is for projects, tools, or pretty much any things related to IPFS that are totally_ **awesome**_. This is for products which are already awesome - if you have plans for cool stuff to do with IPFS, you should build it, and then link it here. If you have an idea for an awesome thing to do with IPFS, a good place to ask about it might be in [our IPFS Discuss Forums](https://discuss.ipfs.io)._

## Table of Contents

- [Contribute](#contribute-to-this-list)
- [Collab-Cluster](#collab-cluster)
- [Apps](#apps)
- [Articles](#articles)
- [Datasets](#datasets)
- [Services](#services)
- [Tools](#tools)
- [Videos](#videos)
- [Discussions](#discussions)
- [Want to hack on IPFS?](#want-to-hack-on-ipfs)
- [License](#license)

## Contribute to this list!

Everyone is welcome to submit their new awesome-ipfs item, but it will be accepted only if it meets our [content policy](https://github.com/ipfs/awesome-ipfs/blob/master/POLICY.md).

Readme and the website are automatically generated. In order to add an element to this list, you need to modify the files in `/data` and then run  `make build` before publishing your pull request. Read [contributing guidelines](https://github.com/ipfs/awesome-ipfs/blob/master/CONTRIBUTING.md) to learn how to do so.

## Collab-Cluster

[Collaborative clusters](https://collab.ipfscluster.io/) are public IPFS Clusters that anyone can join to help replicating and re-distributing content on the IPFS network. Instead of datasets cluster content is usually updated.

## Apps

- [2read](https://2read.net/) - Convert article in current tab to readable form and upload it to writable node(s). [Source](https://github.com/meehow/2read)
- [3Box](https://3box.io) - Create and manage your Ethereum Profile, and your personal data. Use the 3box-js library to integrate profiles into your dapp. [Source](https://github.com/uport-project/3box)
- [a js video player](https://github.com/ipfs/website/tree/master/content/docs/examples/webapps/play) - [Demo](https://ipfs.io/ipfs/QmVc6zuAneKJzicnJpfrqCH9gSy6bz54JhcypfJYhGUFQu/play#/ipfs/QmTKZgRNwDNZwHtJSjCp6r5FYefzpULfy37JvMt9DwvXs)
- [a markdown renderer](https://github.com/ipfs/website/tree/master/content/docs/examples/webapps/markdown-viewer) - [Demo](https://ipfs.io/ipfs/QmSrCRJmzE4zE1nAfWPbzVfanKQNBhp7ZWmMnEdbiLvYNh/mdown#/ipfs/QmfQ75DjAxYzxMP2hdm6o4wFwZS5t7uorEZ2pX9AKXEg2u)
- [a qr-code renderer](https://github.com/ipfs/website/tree/master/content/docs/examples/webapps/qr-render) - [Demo](https://ipfs.io/ipfs/QmccqhJg5wm5kNjAP4k4HrYxoqaXUGNuotDUqfvYBx8jrR/qr#enter%20text%20here)
- [Agregore](https://github.com/AgregoreWeb/agregore-browser) - A minimal web browser for the distributed web. Supports downloading/uploading data from IPFS using the browser's `fetch()` API
- [AirSecure](https://github.com/airsecure/airsecure) - Decentralized two factor authentication app built on Textile & IPFS.
- [akasha](http://akasha.world/) - A Next-Generation Social Media Network, powered by Ethereum and embedded into IPFS.
- [Alexandria](http://www.alexandria.io/) - Decentralized content publishing / monetization platform.
- [Arbore](http://arbo.re) - A friend-to-friend file-sharing app build on top of IPFS.
- [Autonomica ""IPFS Social Proof""](https://github.com/IBM/ipfs-social-proof) - Autonomica is a Keybase-like Dapp for creating an identity and proving this identity via published social media and web proofs.
- [beets](https://github.com/beetbox/beets) - Beets has a plugin which allows for easy sharing of music libraries using IPFS
- [Blokaly](https://github.com/blokaly) - A badge issuing, sharing and display platform based on IPFS.
- [Boards](https://ipfs.io/ipns/boards.ydns.eu) - Distributed social platform that runs in the browser. [Source](https://github.com/fazo96/ipfs-boards)
- [brig](https://brig.readthedocs.io/en/latest) - File synchronization with git like interface and FUSE filesystem. [Source](https://github.com/sahib/brig)
- [Cohort](https://github.com/zignig/cohort) - A golang app to preset a threejs interface and get all of its assets out of IPFS.
- [CoTNetwork](http://www.cotnetwork.com) - A distributed computing network base on ipfs
- [dapple](https://github.com/nexusdev/dapple) - Dapple is a Solidity developer multitool designed to manage the growing complexity of interconnected smart contract systems.
- [DeCommerce](https://www.ivyca.com/decommerce/) - Decentralized ecommerce for Web3. Allows people to transact business without middlemen.  No Middleman, no Bank, no Big Tech, no Government.
- [Diffuse](https://diffuse.sh) - Play music from your IPFS node, or any other cloud/distributed storage service you use.
- [Discussify](https://github.com/ipfs-shipyard/discussify-browser-extension) - Discussify provides a real-time, peer to peer, and permanent discussion platform for anyone to join and participate.
- [DtinyUrl](https://github.com/facert/dtinyurl) - Decentralized URL shortening service based on IPFS.
- [dtube](https://d.tube) - Distributed video sharing with steem.it integrations, using ipfs for backend storage.
- [edChain](https://www.edchain.io/) - EdChain is a global network for education and careers. It uses blockchain and distributed web technologies to deliver educational content, even to those without broadband internet. [Source](https://github.com/edchainio/edchain-client-gui)
- [enzypt.io](https://enzypt.io/) - A website to buy and sell files through Ethereum and IPFS. [Source](https://github.com/flex-dapps/enzypt)
- [Ethlance](http://ethlance.com) - First completely decentralised job market platform built on Ethereum and IPFS. [Source](https://github.com/madvas/ethlance)
- [Everforo](https://www.everforo.com) - Everforo is the next generation of online community groups build on top of IPFS.
- [git-ipfs-rehost](https://github.com/whyrusleeping/git-ipfs-rehost) - A script to rehost your git repos in ipfs.
- [Global Upload](https://globalupload.io/) - File transportation service for IPFS, upload files to the future of distributed web.
- [Gorilla REPL viewer](https://github.com/keorn/ipfs-gorilla-repl) - Gorilla is a rich REPL for Clojure in the notebook style.
- [Hardbin](https://github.com/jes/hardbin) - Hardbin is an encrypted pastebin, with the decryption key passed in the URL fragment
- [HydrusNetwork](https://github.com/hydrusnetwork/hydrus) - A booru-style media tagging application with a multitude of features, recently added basic ipfs support.
- [InfiniteBooru](https://infinitebooru.com) - A booru-style media tagging application and content aggregator with all media backed by IPFS.
- [InfinitumX](https://infinitumx.io) - A decentralized ""Reddit Place"" like board with Harberger's tax as an economical concept & censorship resistance built in.
- [infura.io](https://infura.io) - An Infrastructure: use API and developer tools provide secure, reliable, and scalable access to Ethereum and IPFS to help build decentralized application easier.
- [InterPlanetary Wayback](https://github.com/oduwsdl/ipwb) - Web Archive (WARC) indexing and replay using IPFS.
- [Interplanetary Wiki](https://github.com/jamescarlyle/ipfs-wiki) - Wiki built on top of IPFS
- [ipcoronafs](https://github.com/RTradeLtd/ipcoronafs) - A realtime service to scrape COVID-19 and SARS-CoV-2, storing on IPFS, DNSLink, and streaming over LibP2P pubsub
- [IPFessay](https://gitlab.com/stavros/IPFessay) - A simple way to publish uncensorable essays on IPFS.
- [IPFS Desktop](https://github.com/ipfs-shipyard/ipfs-desktop) - Run your IPFS node on your machine without having to bother with command line tools. Manage your node, add your files, easily change the settings... everything from just one interface.
- [IPFS Drive](https://github.com/fazo96/ipfs-drive) - In browser file manager for IPFS.
- [IPFS Event Drop](https://github.com/travisperson/ipfs-event-drops) - An app that allows for improved visualization of ipfs events.
- [IPFS ID and Public Key QR Codes Demo](https://ipfs.io/ipfs/zdj7Whr8X3zah99TSuyPjENaERcBW9C7B36EaCb1DEZ5pbbL9/) - A demo app that uses windows.ipfs to show you a QR Code of your IPNS Link and of your Public Key. [Source](https://github.com/ipfs-shipyard/demo-ipfs-id-qr-codes)
- [IPFS Image Uploader](https://ipfs.talaikis.com/) - IPFS image uploader and viewer. Minerva is a storage plugin of Apache Drill that connects IPFS's decentralized storage and Drill's flexible query engine. [Source](https://github.com/TalaikisInc/ipfs-uploader)
- [IPFS with TiddlyWiki](https://github.com/xmaysonnave/tiddlywiki-ipfs) - IPFS with TiddyWiki is a TiddlyWiki plugin who aims to help developers, editors or users to save their wikis and attachments over IPFS.
- [ipfs-chat](https://github.com/SomajitDey/ipfs-chat) - Terminal-based, encrypted chatrooms. Allows private messaging & secure in-chat file/directory sharing. Server/broker-less (no signaling/rendezvous server needed). Works over LAN/internet(w/ NAT-traversal).
- [IPFS-forum](https://github.com/ReForum-ipfs/ReForum#readme) - A web3 forum.You can get new ideas,reports,dicussions from this forum ,though you maybe are in a network-restricted area,all the contents will be updated qucikly by ipfs. [Source](https://github.com/ReForum-ipfs/ReForum)
- [IPFS-FPS](https://ipfs-fps-website.on.fleek.co/) - A completely decentralized first person shooter. Built with Unity, Fleek, Unstoppable Domans and Pinata.
- [ipfs-md-wiki](https://github.com/daijiale/ipfs-md-wiki) - Build your wiki system base on ipfs and markdown.
- [ipfs-search](https://ipfs-search.com) - Searching the universe since 2016.
Sniffs the DHT gossip and indexes file and directory hashes. Metadata and search API's available. [Source](https://github.com/ipfs-search/ipfs-search)
- [ipfs-share](https://github.com/rameshvarun/ipfs-share) - Pastebin/Image host/File sharing application
- [ipfs.ink](https://github.com/kpcyrd/ipfs.ink) - Publish and render markdown essays to and from ipfs.
- [ipfs.pics](https://github.com/ipfspics/ipfspics-server) - Upload and share pics.
- [IPFSBin](https://github.com/victorbjelkholm/ipfsbin) - Pastebin clone build.
- [IPGit](https://github.com/meyer1994/ipgit) - Remote Git repository that mirrors your code to IPFS
- [IpJot](https://ipjot.herokuapp.com/) - Creates short notes, stories, books, poems, conversations on IPFS.
- [IPSE](https://www.ipse.io/) - A search engine for the IPFS network.
- [Kauri](https://kauri.io) - A community-based knowledge platform for web3 technologies built on top of IPFS and Ethereum. Learn, share and curate on up-to-date and high-quality technical articles and series.
- [KDE-DolphinServiceMenu-IPFS](https://github.com/amar-laksh/KDE-DolphinServiceMenu-IPFS) - Service Menu for Dolphin File Manager to upload files to IPFS The open network for transaction requests.
- [killcord](https://killcord.io/) - A censorship resistant deadman's switch [Source](https://github.com/nomasters/killcord)
- [La Marque](https://marque.la/) - Generate & pin content from your phone. Validate ""La Marque"" assets by verifying received images from others.
- [markup.rocks](https://ipfs.io/ipfs/QmWPgJnUGLB1LPh9KMG9LEN4LVu5e17TwkEtcmTWdNn9V6/#/ipfs/QmfQ75DjAxYzxMP2hdm6o4wFwZS5t7uorEZ2pX9AKXEg2u) - Pandoc-based markup editor/previewer/converter, ported to IPFS. [Source](https://github.com/davidar/markup.rocks)
- [Minerva](https://github.com/bdchain/Minerva) - Minerva is a storage plugin of Apache Drill that connects IPFS's decentralized storage and Drill's flexible query engine.
- [Music For Programming](https://ipfs.io/ipns/mfp.jillejr.tech) - Unofficial port of musicforprogramming.net. [Source](https://github.com/jilleJr/musicforprogramming.ipfs)
- [OpenBazaar](https://github.com/OpenBazaar) - OpenBazaar was an open source project developing a protocol for e-commerce transactions in a fully decentralized marketplace.
- [Orbit](https://orbit.chat) - Distributed, peer-to-peer chat application on IPFS. [Source](https://github.com/haadcode/orbit)
- [Origin Protocol](https://demo.originprotocol.com/) - Distributed sharing economy marketplace with images, metadata, and ERC 725 data stored on IPFS. [Source](https://github.com/OriginProtocol/demo-dapp)
- [P2Pdoc](https://p2pdoc.glitch.me/) - P2Pdoc allows you to create a document and then upload it to the distributed web. [Source](https://github.com/aboutDavid/p2pdoc)
- [Partyshare](https://busterlabs.github.io/Partyshare) - A simple file sharing desktop app. [Source](https://github.com/BusterLabs/Partyshare)
- [Pathephone](https://pathephone.github.io) - Distributed music streaming app.
- [Peer Bandwidth Demo](https://ipfs.io/ipfs/QmVaVXbLdw4R5NqAiiQoTWtitxo5g7FS31PQmCLbH9p8Fu/) - An demo app that uses window.ipfs, provided by the IPFS Companion web extension to get and graph bandwidth info for your IPFS node [Source](https://github.com/tableflip/ipfs-peer-bw-example)
- [Peer Map Demo](https://ipfs.io/ipfs/QmRPGCmLKH2dQmNiPRsiuYS9EhhJL1Gmkz5F75gKY1K4Bm/) - A map of IPv4 IPFS peers that uses window.ipfs [Source](https://github.com/tableflip/ipfs-peer-map-example)
- [Peer Web Site](https://peerweb.site/) - Peer to Peer Web Site hosting at your fingertips! Send full featured HTML (incl. CSS, JS) sites from your browser and attach files eg. videos, images, etc. [Source](https://github.com/Weedshaker/PeerWebSite)
- [Peergos](https://peergos.org) - End-to-end encrypted, peer-to-peer file storage and sharing. [Source](https://github.com/Peergos/Peergos)
- [Playback](https://mafintosh.github.io/playback/) - IPFS playback support. This allows casting a video in IPFS to a Chromecast.
- [PubSub Chat Demo](https://ipfs.io/ipfs/QmWZ3u5S7RjFXKfW6dSZhj7CozcvpqJxm48RYMmKkWcmNQ/) - A ~76KB demo chat app that uses window.ipfs, provided by the IPFS Companion web extension [Source](https://github.com/tableflip/ipfs-pubsub-chat-example)
- [Pugdit](https://github.com/zbyte64/pugdit) - A bulletin board service that discovers and distributes over IPFS
- [PushToTalk](http://timothy.hobbs.cz/push-to-talk/index.html) - Push to Talk lets you edit audio essays and publish them with IPFS.
- [qri](https://qri.io) - Dataset version control, discovery and collaboration tools (free, open-source). [Project is winding down] [Source](https://github.com/qri-io/qri)
- [QuestNetwork Messenger](https://github.com/QuestNetwork/quest-messenger-js) - Multi-Platform End-To-End Encrypted Messenger on IPFS PubSub. Emulates Servers/Community with folders that can be shared using invitation codes. It's free and open source. On track to become the most comprehensive and user-friendly messenger on IPFS.
- [Request](https://request.network/) - Decentralized network for financial transactions. [Source](https://github.com/RequestNetwork/requestNetwork)
- [SimpleAsWater Bot](https://github.com/simpleaswater/twitter-pinbot) - A twitter bot that adds, pins, unpins your tweets to public IPFS network using IPFS Cluster.
- [Skiff](https://www.skiff.com) - Privacy-first, end-to-end encrypted email, file storage, and collaboration platform using IPFS storage. [Source](https://github.com/skiff-org/skiff-mail)
- [Skyhook](https://github.com/deedeecx330/skyhook) - Send and receive files securely
- [TallyLab](https://tallylab.com/) - Local-first, end-to-end encrypted data diary app for capturing, analyzing, and sharing data about any and everything.
- [Temporal](https://github.com/RTradeLtd/Temporal) - Temporal is an easy to use API and platform for integrating IPFS and other distributed/decentralized storage technologies into enterprise applications
- [Terrive](https://ipfs.io/ipns/terrive.one) - A Photo and Video Sharing Platform that uses the HIVE blockchain as a database and Immutable Image/Video Hosting. [Source](https://github.com/appukuttan66/terrive)
- [Textile Photos](https://www.textile.photos) - Textile Photos is a secure, mobile digital wallet for your photos. [Source](https://github.com/textileio/textile-mobile)
- [ToDo List Demo](https://ipfs.io/ipfs/QmSGQrmvHe6fFiWdV2H8YnhLaoX4qe5nYEmJfUFx6LdUYa/) - A ToDo List demo app that uses windows.ipfs. [Source](https://github.com/ipfs-shipyard/demo-ipfs-todo)
- [ujo](http://ujomusic.com/) - A blockchain marketplace for musicians.
- [Uniswap](https://uniswap.org/) - Decentralized Trading Protocol built on Ethereum. [Source](https://github.com/Uniswap)
- [uport](https://www.uport.me) - Uport is a mobile, self-sovereign identity and key management system, built on the Ethereum blockchain.
- [Valist](https://valist.io) - A trustless universal package repository enabling you to digitally sign and distribute software in just a few steps. [Source](https://github.com/valist-io/valist)
- [Watchit](https://github.com/ZorrillosDev/watchit-desktop) - A movie platform with a decentralized network approach.
- [Wistful Books](https://wistfulbooks.com/) - Single page offline application for enjoying librivox.org audio books. [Source](https://github.com/smwa/wistfulbooks)
- [xfce-screenshooter-ipfs-support](https://github.com/amar-laksh/xfce-screenshooter-ipfs-support) - A fork of xfce-screenshooter with IPFS support!
- [youtube2ipfs](https://pypi.org/project/youtube2ipfs/) - Download videos from YouTube (and similar video platforms) and add them to IPFS. [Source](https://github.com/dokterbob/youtube2ipfs)

## Articles

- 2020-08-03: [How to Create a Unity Game on IPFS using Pinata](https://medium.com/pinata/how-to-create-a-unity-game-on-ipfs-using-pinata-d0af18a5bd44) 
- 2019-08-14: [Managing storage in a Java application with IPFS](https://kauri.io/article/3e8494f4f56f48c4bb77f1f925c6d926) 
- 2019-07-22: [10+ Resources Every IPFS Developer Should Know About](https://medium.com/@vaibhavsaini_67863/10-resources-to-get-started-with-ipfs-5f429dc8a841) 
- 2019-05-12: [The Complete Beginner's Guide to Deploying Your First Static Website to IPFS](https://dev.to/agentofuser/the-complete-beginner-s-guide-to-deploying-your-first-static-website-to-ipfs-33po) 
- 2019-03-10: [The Case for a Decentralized Social Network](https://medium.com/npfoss/the-case-for-a-decentralized-social-network-2683b727abf5) 
- 2019-01-30: [Ultimate Guide to Filecoin Breaking Down Filecoin Whitepaper & Economics](https://medium.com/swlh/ultimate-guide-to-filecoin-breaking-down-filecoin-whitepaper-economics-9212541a5895) 
- 2018-08-06: [Content Identifiers in IPFS](https://pascalprecht.github.io/posts/content-identifiers-in-ipfs/) 
- 2018-07-11: [On future-proof cryptographic hashes](https://pascalprecht.github.io/posts/future-proofed-hashes-with-multihash/) 
- 2017-08-21: [Understanding the IPFS White Paper part 2](https://decentralized.blog/understanding-the-ipfs-white-paper-part-2.html) 
- 2017-08-10: [Understanding the IPFS White Paper part 1](https://decentralized.blog/understanding-the-ipfs-white-paper-part-1.html) 
- 2017-05-05: [Decentralized indexes for public genomic data](https://github.com/luizirber/2017-recomb) 
- 2017-03-31: [Using IPFS for IoT Communications](https://medium.com/@chrismatthieu/using-ipfs-for-iot-communications-b49c2139783a) 
- 2016-09-12: [IPFS: The Internet Democratised](https://medium.com/@tonywillenberg/web-3-0-a-truly-democratised-internet-f4b06cb4077b) 
- 2016-05-20: [Changelog Podcast](https://changelog.com/podcast/204/) 
- 2015-09-18: [The InterPlanetary File System Wants to Create a Permanent Web](http://motherboard.vice.com/read/the-interplanetary-file-system-wants-to-create-a-permanent-web) 
- 2015-09-13: [Introduction to IPFS](http://whatdoesthequantsay.com/2015/09/13/ipfs-introduction-by-example) 
- 2015-09-08: [HTTP is obsolete. It's time for the distributed, permanent web](https://ipfs.io/ipfs/QmNhFJjGcMPqpuYfxL62VVB9528NXqDNMFXiqN5bgFYiZ1/its-time-for-the-permanent-web.html) 
- [Downloading nodejs versions with nvm/n over IPFS](https://ipfs.io/ipfs/QmTkzDwWqPbnAh5YiV5VwcTLnGdwSNsNTn2aDxdXBFca7D/example#/ipfs/QmUx363UFtgiQqkHHsPK3TSDmwoALDo2hrbMWbcxjH2vFc) 

## Datasets

- [7-piece Syzygy tablebases](https://syzygy-tables.info/) - Solutions for all chess endgames with up to 7 pieces. [Source](https://github.com/syzygy1/tb)
- [alpine-linux 3.4 packages](https://ipfs.io/ipfs/QmRsvEpJggeu4HhoafzRFobV4sbwVVTXMrdb2p8XWv7bCS)  [Source](https://github.com/ipfs/archives/issues/83)
- [arXiv](https://ipfs.io/ipfs/QmfXH9XtP7xmoTH8WAp4HNSduqWMwLTH8B8TvbTkdgzNAa)  [Source](https://github.com/ipfs/archives/issues/2)
- [Brainwash Dataset](https://purl.stanford.edu/sx925dc9385) - Stewart, Russell. (2015). Brainwash dataset.
- [cdn.media.ccc.de](https://ipfs.io/ipfs/QmW84mqTYnCkRTy6VeRJebPWuuk8b27PJ4bWm2bL4nrEWb)  [Source](https://github.com/ipfs/archives/issues/52)
- [cdnjs](https://ipfs.io/ipfs/QmRrnfFUgx81KZR9ibEcxDXgevoj9e5DydB5v168yembnX)  [Source](https://github.com/ipfs/archives/issues/35)
- [Cooking Recipes](https://ipfs.io/ipfs/QmTXo6GforwsuGAd8behjgvKCsMMBdG1xMZJF4qa9W7CHB) - Around 50GB of formatted and unformatted cooking recipes. [Source](https://old.reddit.com/r/opendirectories/comments/dsznin/50_gb_directory_of_cooking_recipes/)
- [CrowdHuman Dataset](http://www.crowdhuman.org/) - CrowdHuman dataset. A Benchmark for Detecting Human in a Crowd [Source](http://www.crowdhuman.org/download.html)
- [Geocities by Archive Team](https://ipfs.io/ipfs/QmVCjhoEFC9vwvaa8bKyJgwAByP4MXSogcyDGoz4Lkc3ox)  [Source](https://github.com/ipfs/archives/issues/182)
- [haveibeenpwnd.com passwords](https://ipfs.io/ipfs/QmSRBDMksX7c5dfheGsYDdWrLdve5hBvXDQm7Yrov7KMJv)  [Source](https://github.com/ipfs/archives/issues/157)
- [IETF RFC Archive](https://ipfs.io/ipfs/QmNvTjdqEPjZVWCvRWsFJA1vK7TTw1g9JP6we1WBJTRADM)  [Source](https://github.com/ipfs/archives/issues/18)
- [KinoKabaret Caen, 2018 - Shortfilms](https://ipfs.io/ipfs/QmajLDwZLH6bKTzd8jkq913ZbxaB2nFGRrkDAuygYNNv39)  [Source](https://github.com/ipfs/archives/issues/172)
- [MDSConnect](https://ipfs.io/ipfs/QmcvfB6pAqUfTnuAK8zFKVxbdhopnBPveJrDcy1JAA7HX5)  [Source](https://github.com/ipfs/archives/issues/152)
- [No-Intro Collection](https://ipfs.io/ipfs/QmPFj6iAxUwxVyEtDJBJHXVp4SX9dkV91Mh5mjqGxTctHy)  [Source](https://github.com/ipfs/archives/issues/163)
- [Old Internet Files](https://ipfs.io/ipfs/QmbsZEvJE8EU51HCUHQg2aem9JNFmFHdva3tGVYutdCXHp)  [Source](https://github.com/ipfs/archives/issues/176)
- [Presidential Daily Briefs](https://ipfs.io/ipfs/Qme6epvZDj3vzHcFKdF1nZhbixjw8Bn4imGcKnbUyBJL89)  [Source](https://github.com/ipfs/archives/issues/23)
- [Project Apollo Archives](https://ipfs.io/ipfs/QmSnuWmxptJZdLJpKRarxBMS2Ju2oANVrgbr2xWbie9b2D)  [Source](https://github.com/ipfs/archives/issues/143)
- [textfiles.com](https://ipfs.io/ipfs/QmNoscE3kNc83dM5rZNUC5UDXChiTdDcgf16RVtFCRWYuU)  [Source](https://github.com/ipfs/archives/issues/155)
- [WistfulBooks: LibriVox Audiobook Archive](https://wistfulbooks.com) - Free public domain audiobooks from LibriVox.org packaged into a single page that lets you listen to audiobooks in your browser. [Source](https://github.com/smwa/wistfulbooks)
- [World Wide Web History Project](https://ipfs.io/ipfs/QmRTSA1UFHSx3z7taNRwUVM8AjB2EQwKvyZu3BfJg9QRtZ)  [Source](https://github.com/ipfs/archives/issues/159)
- [xkcd](https://ipfs.io/ipns/xkcd.hacdias.com)  [Source](https://github.com/ipfs/archives/issues/21)
- [yarchive.net](https://ipfs.io/ipfs/QmdA5WkDNALetBn4iFeSepHjdLGJdxPBwZyY47ir1bZGAK)  [Source](https://github.com/ipfs/archives/issues/76)

## Services

- [Boom.FYI](https://www.boom.fyi) - An IPFS link shortening and access control service.
- [Crust Network](https://crust.network) - Decentralized pinning and gateway service for IPFS.
- [Eternum](https://www.eternum.io/) - Paid pinning service with an easy-to-use API.
- [Fission](https://fission.codes) - App and website hosting powered by IPFS, including DNS automation, identity, and end-to-end encryption.
- [Fleek](http://fleek.co/) - Open Web development platform for building, hosting, and storing sites and apps on IPFS, Filecoin, and the Internet Computer. [Source](https://github.com/FleekHQ)
- [IPFSBay](https://www.ipfsbay.com) - Unstoppable marketplace in the IPFS network.
- [Monaparty](https://www.monaparty.me/) - Token assets platform based on Monacoin and Counterparty. Contents bound to user assets are hosted by IPFS.
- [Peergos](https://peergos.org) - Your private, but social, space online. Store and edit documents and media. Share files or folders with friends. [Source](https://github.com/Peergos/Peergos)
- [Pinata](https://pinata.cloud) - Build and manage your dapp through Pinata’s REST API and IPFS toolkit.
- [Robonomics Network](https://robonomics.network/) - Ethereum network infrastructure for cyber-physical systems' integration into Smart Cities and Industry 4.0
- [Temporal](https://temporal.cloud) - Scalable IPFS Infrastructure with free starter package featuring turnkey APIs, toolkits and storage.
- [Unstoppable Domains](https://unstoppabledomains.com) - Domains on blockchains

## Tools

- [Almonit Browser Extension](https://almonit.com/#/extension/) - Resolves ENS domains, this let users access .eth websites while offering maximum decentralization. [Source](https://github.com/almonit/almonit-plugin)
- [Blockwatch](https://ipfs.io/ipfs/QmdikpwcyeBuGaVzWzSzPuqvBfTGD8jPAVydcCjYHsBUxo/index.html) - Monitor the current block number of the Ethereum blockchain, and set alerts (stored locally using PouchDB in your browser) for when certain block heights are passed. [Source](https://github.com/MidnightLightning/ethereum-blockwatch)
- [Bubble IPFS From URL Plugin](https://bubble.io/plugin/ipfs-add-from-uri-1616424944051x638386852081172500) - Bubble (no code platform) plugin for IPFS From URL integration
- [cachewarmer](https://github.com/BrendanBenshoof/cachewarmer) - Donate ipfs gateways to cache other people's content
- [create-ipfs-app](https://github.com/alexbakers/create-ipfs-app) - Set up a decentralized web3 app by running one command.
- [galacteek](https://galacteek.github.io) - A multi-platform Qt5-based browser for the distributed web [Source](https://github.com/pinnaculum/galacteek)
- [gatsby-plugin-ipfs](https://github.com/moxystudio/gatsby-plugin-ipfs) - Adds support for deploying Gatsby websites to IPFS by ensuring that assets are relative.
- [git-remote-ipfs](https://github.com/cryptix/git-remote-ipfs) - push/pull repositories from/to IPFS
- [go-orbit-db](https://github.com/berty/go-orbit-db) - This is a Golang port of OrbitDB that intends to be fully compatible with the original JavaScript version. OrbitDB is a serverless, distributed, peer-to-peer database.
- [go-stellar-ipfs](https://github.com/aanupam23/go-stellar-ipfs) - go-stellar-ipfs is a library that is a bridge between Stellar and IPFS.
- [gomobile-ipfs](https://github.com/ipfs-shipyard/gomobile-ipfs) - IPFS and libp2p on Mobile, with Gomobile
- [http2ipfs](https://github.com/jbenet/http2ipfs-web) - This is a simple webtool to add URLs to an IPFS node.
- [ipcat](https://github.com/noffle/ipcat) - :cat2: Retrieve IPFS object data and send it to stdout.
- [IPDR](https://github.com/miguelmota/ipdr) - IPFS-backed Docker Registry
- [IPFS Setup Action](https://github.com/marketplace/actions/ipfs-setup-action) - A GitHub Action to install and initialize go-ipfs to provision a cross-platform test environment on GitHub's CI platform. [Source](https://github.com/ibnesayeed/setup-ipfs)
- [ipfs-action](https://github.com/aquiladev/ipfs-action) - GitHub Action for delivery of static websites.
- [ipfs-add-from-encrypted](https://github.com/TroyWilson1/ipfs-add-from-encrypted) - Encrypt a file or directory with AES256 then add to IPFS
- [ipfs-add-from-url](https://github.com/maxlath/ipfs-add-from-url) - Add a file to IPFS from a URL instead of a file path
- [ipfs-chrome-extension](https://github.com/dylanPowers/ipfs-chrome-extension) - Chrome extension to redirect ipfs.io traffic to local gateway
- [ipfs-chrome-station](https://github.com/fbaiodias/ipfs-chrome-station) - Chrome extension to redirect ipfs.io traffic to local gateway
- [ipfs-common](https://github.com/arsyun) - Some common tools, 1.CID to human readable cid, 2.cid and block name convert, 3. read the leveldb tools. [Source](https://github.com/arsyun/ipfs-common)
- [ipfs-companion](https://github.com/ipfs/ipfs-companion) - Browser extension that simplifies access to IPFS resources.
- [ipfs-deploy](https://github.com/agentofuser/ipfs-deploy) - Zero-config CLI to deploy static websites: cd my-static-website && npx @agentofuser/ipfs-deploy
- [ipfs-encrypted-share](https://github.com/whs/ipfs-encrypted-share) - Easy to use encrypted file uploader.
- [ipfs-gui](https://github.com/marcin212/ipfs-gui) - Windows UI integration and IPFS installer
- [ipfs-linux-service](https://github.com/dylanPowers/ipfs-linux-service) - IPFS Linux Init Daemon
- [ipfs-mount](https://github.com/richardschneider/net-ipfs-mount) - Mount IPFS as a mapped drive on Windows
- [ipfs-paste](https://github.com/jbenet/ipfs-paste) - Paste stdin and clipboard to IPFS
- [ipfs-pinner](https://github.com/wabarc/ipfs-pinner) - A toolkit help upload files to IPFS pinning services.
- [ipfs-publish](https://ipfs-publish.uhlir.dev) - Continuous Delivery tool for delivery of static websites from Git providers to IPFS. [Source](https://github.com/AuHau/ipfs-publish)
- [ipfs-screencap](https://github.com/jbenet/ipfs-screencap) - Capture screenshots, publish them to IPFS, and copy the link to the clipboard.
- [ipfs-video-gateway](https://ipfs.video) - Cloud-init your own IPFS gateway on a cloud provider and easily pin content through a simple web interface. [Source](https://github.com/bneijt/ipfs-video-gateway)
- [ipfscrape](https://github.com/victorbjelkholm/ipfscrape) - Scrape a webpage with all assets and put it in IPFS
- [ipfsecret](https://github.com/shlemph/ipfsecret) - Encrypt and decrypt IPFS files with a secret passphrase
- [ipget](https://github.com/ipfs/ipget) - :satellite: wget for IPFS: retrieve files over IPFS and save them locally.
- [IPLD Explorer](https://explore.ipld.io) - Explore the Merkle Forest from the comfort of your browser [Source](https://github.com/ipfs-shipyard/ipld-explorer)
- [ipns-pin](https://github.com/justicenode/node-ipns-pin) - A command-line tool to pin stuff via ipns.
- [IPRedirect](https://github.com/JayBrown/IPRedirect) - Browser userscript for redirecting IPFS/IPNS addresses to your local gateway. This should work on any browser that hasn't had an extension written for it yet and has support for userscripts.
- [iprfc](https://github.com/RTradeLtd/iprfc) - IETF RFC downloader which stores RFCs on IPFS and indexes them with RTradeLtd/Lens.
- [ipscend](https://github.com/diasdavid/ipscend) - Tool for hosting web apps and static websites in IPFS
- [mahuta](https://github.com/ConsenSys/Mahuta) - Mahuta is a plug and play service for your micro-service architecture allowing to collect, store and index data on IPFS and offering search functionalities (full text, query).
- [Multiverse](https://github.com/multiverse-vcs/go-multiverse) - Multiverse is a decentralized version control system that enables peer-to-peer software development.
- [orbit-db](https://github.com/orbitdb/orbit-db) - OrbitDB is a serverless, distributed, peer-to-peer database that uses IPFS as its data storage and IPFS Pubsub to automatically sync databases with peers.
- [pinbot](https://github.com/whyrusleeping/pinbot) - Pin content via IRC
- [Public gateway status checker](https://ipfs.fooock.com/) - Web app to check public states of IPFS gateways, including latency and gateway writable state. [Source](https://github.com/fooock/ipfs-gateway-checker)
- [rivet](https://github.com/wabarc/rivet) - A toolkit makes it easier to archive webpages to IPFS.
- [ShareX integration](https://github.com/ShareX/CustomUploaders/blob/master/ipfs.io.sxcu) - ShareX is a file upload and manipulation tool that has a custom integration with IPFS
- [Siderus Orion](https://orion.siderus.io) - Easy to use IPFS desktop client for macOS, Windows and Linux [Source](https://github.com/Siderus/Orion)
- [solid-ipfs](https://github.com/Eximua/solid-ipfs) - Using Solid to store IPFS Hash privately or publicly.
- [Sweet IPFS](https://github.com/RHazDev/Sweet-IPFS) - Full node for Android
- [Tellit](https://gitlab.com/terceranexus6/tellit) - Encrypt files before uploading them using a keypair or a passphrase
- [VIPFS](https://github.com/Ideea-inc/vipfs) - Publish your Vue apps easily to IPFS
- [wbipfs](https://github.com/wabarc/wbipfs) - A command-line tool and Go package interface for wayback webpage to IPFS.

## Videos

- [Distributed Apps with IPFS - Juan Benet at Fullstack Fest 2016](https://www.youtube.com/watch?v=jONZtXMu03w) - This talk breaks down how to build a dynamic app on top of IPFS with CRDTs, pub/sub, and slick UIs. It also delves into new models for distributed computation, and the ethical importance of distributing the web.
- [IPFS Alpha - Why we must redistribute the web](https://www.youtube.com/watch?v=skMTdSEaCtA) 
- [IPFS Simply Explained](https://www.youtube.com/watch?v=5Uj6uR3fp-U) - Let's take a look at how IPFS works, how it can solve issue's like censorship and if it would really work across multiple planets!
- [Juan Benet at Stanford 2015](https://www.youtube.com/watch?v=HUVmypx9HGI) - The talk includes a broad look at The IPFS Project, and a discussion on evolving the network stack through open source protocols R & D.
- [Textile Build Series - A Free Online Workshop](https://www.youtube.com/playlist?list=PLC8CEtJ9shDznO1tpvGe--BVEWmCKY9_Z) - A full Training Program to teach devs on how to build for the Decentralized Web. The series covers a ton of content, touch multiple parts of the IPFS stack and guides devs through building a simple DApp.

## Discussions

* [CRDTs discussion](https://github.com/ipfs/notes/issues/23)

## Want to hack on IPFS?

[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)

## License

[![CC0](https://licensebuttons.net/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)
","This list is for projects, tools, or pretty much any things related to IPFS that
are totally **awesome**_. This is for products which are already awesome - if
you have plans for cool stuff to do with IPFS, you should build it, and then
link it here.Everyone is welcome to submit their new awesome-ipfs item."
1796,A curated list of awesome privilege escalation,"# Awesome Privilege Escalation
A curated list of awesome privilege escalation

## Table of Contents

* [Linux](#linux)
    * [Escape restricted shells](#escape-restricted-shells)
    * [SUDO and SUID](#sudo-and-suid)
    * [Capabilities](#capabilities)
    * [Tools](#tools)
        * [Find CVEs](#find-cves)
    * [Chkrootkit](#chkrootkit)
    * [NFS](#nfs)
    * [Presentations](#presentations)
* [Windows](#windows)
    * [DLL Hijacking](#dll-hijacking)
    * [Potato](#potato)
    * [Unquoted services with spaces](#unquoted-services-with-spaces)
    * [Groups.xml](#groupsxml)
    * [Tools](#tools-1)
    * [Presentations](#presentations-1)
* [Linux and Windows](#linux-and-windows)
* [Docker](#docker)
    * [Tools](#tools-2)
    * [Presentations](#presentations-2)
* [Cloud](#cloud)
   * [AWS](#aws)
   * [GCP](#gcp)

## Linux
 - [A guide to Linux Privilege Escalation](https://payatu.com/guide-linux-privilege-escalation/)
 - [Attack and Defend: LinuxPrivilege Escalation Techniques of 2016](https://www.sans.org/reading-room/whitepapers/linux/attack-defend-linux-privilege-escalation-techniques-2016-37562): This paper will examine Linux privilege escalation techniques used throughout 2016 in detail, highlighting how these techniques work and how adversaries are using them.
 - [Back To The Future: Unix Wildcards Gone Wild](https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt): This article will cover one interesting old-school Unix hacking technique, that will still work in 2013.
 - [Basic Linux Privilege Escalation](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/): by g0tmi1k
 - [Enumeration is the Key](https://medium.com/basic-linux-privilege-escalation/basic-linux-privilege-escalation-966de11f9997): by Marcos Tolosa
 - [Hackers Hut](https://www.win.tue.nl/~aeb/linux/hh/hh.html): Some random hacking hints, mainly from a Linux point of view.
 - [Hacking Linux Part I: Privilege Escalation](http://www.dankalia.com/tutor/01005/0100501004.htm)
 - [How privileges work in operating systems?](https://www.future-processing.pl/blog/privilege-escalation/)
 - [Linux elevation of privileges ToC](https://guif.re/linuxeop)
 - [Linux - Privilege Escalation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md): Methodology from PayloadsAllTheThings 
 - [Linux Privilege Escalation](https://percussiveelbow.github.io/linux-privesc/): an introduction to Linux escalation techniques, mainly focusing on file/process permissions, but along with some other stuff too.
 - [Linux Privilege Escalation](https://github.com/lamontns/pentest/blob/master/privilege-escalation/linux-privilege-escalation.md): Linux Privilege Escalation by lamontns.
 - [Linux Privilege Escalation](https://book.hacktricks.xyz/linux-unix/privilege-escalation): by HackTricks
 - [Linux Privilege Escalation via Dynamically Linked Shared Object Library](https://www.contextis.com/en/blog/linux-privilege-escalation-via-dynamically-linked-shared-object-library): How RPATH and Weak File Permissions can lead to a system compromise.
 - [Local Linux Enumeration & Privilege Escalation Cheatsheet](https://www.rebootuser.com/?p=1623): a few Linux commands that may come in useful when trying to escalate privileges on a target system.
 - [Local Linux Enumeration & Privilege Escalation](https://hackingandsecurity.blogspot.com/2016/05/local-linux-enumeration-privilege.html): a few Linux commands that may come in useful when trying to escalate privileges on a target system.
 - [Local Linux privilege escalation overview](https://myexperiments.io/linux-privilege-escalation.html): This article will give an overview of the basic Linux privilege escalation techniques. It separates the local Linux privilege escalation in different scopes: kernel, process, mining credentials, sudo, cron, NFS, and file permission.
 - [Penetration-Testing-Grimoire/Privilege Escalation/linux.md](https://github.com/weaknetlabs/Penetration-Testing-Grimoire/blob/master/Privilege%20Escalation/linux.md)
 - [PENETRATION TESTING PRACTICE LAB - VULNERABLE APPS / SYSTEMS](https://www.amanhardikar.com/mindmaps/Practice.html)
 - [Pentest Book - Privilege Escalation](https://chryzsh.gitbooks.io/pentestbook/privilege_escalation_-_linux.html): common Linux privilege escalation techniques.
 - [POST CATEGORY : Privilege Escalation](https://www.hackingarticles.in/category/privilege-escalation/): Privilege escalation post category in Raj Chandel's Blog.
 - [Privilege Escalation Cheatsheet (Vulnhub)](https://github.com/Ignitetechnologies/Privilege-Escalation): This cheasheet is aimed at the CTF Players and Beginners to help them understand the fundamentals of Privilege Escalation with examples.
 - [Privilege escalation: Linux](https://vulp3cula.gitbook.io/hackers-grimoire/post-exploitation/privesc-linux)
 - [Privilege Escalation & Post-Exploitation](https://github.com/rmusser01/Infosec_Reference/blob/master/Draft/PrivescPostEx.md)
 - [Reach the root! How to gain privileges in Linux?](https://hackmag.com/security/reach-the-root/)
 - [TTY Input Pushback Privilege Escalation](https://www.halfdog.net/Security/2012/TtyPushbackPrivilegeEscalation/): When user working as root switches to another user with su and happens to execute the pushback program as that user, the tty input data pushed back is executed in the shell and context of user root.
 - [Understanding Privilege Escalation](http://www.admin-magazine.com/Articles/Understanding-Privilege-Escalation): Some techniques malicious users employ to escalate their privileges on a Linux system.

### Escape restricted shells
 - [Breaking out of rbash using scp](http://pentestmonkey.net/blog/rbash-scp)
 - [Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log & Event Manager (SIEM) Product](https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/)
 - [Escaping Restricted Linux Shells](https://pen-testing.sans.org/blog/pen-testing/2012/06/06/escaping-restricted-linux-shells): Resource for penetration testers to assist them when confronted with a restricted shell.
 - [Linux Restricted Shell Bypass](https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf)
 - [Restricted Linux Shell Escaping Techniques](https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/): The focus of this article is on discussing and summarizing different techniques to escape common Linux restricted shells and also simple recommendations for administrators to protect against it.

### SUDO and SUID
 - [Abusing SUDO](https://touhidshaikh.com/blog/?p=790): Some of the binary which helps you to escalate privilege using the sudo command.
 - [Gaining a Root shell using MySQL User Defined Functions and SETUID Binaries](https://infamoussyn.wordpress.com/2014/07/11/gaining-a-root-shell-using-mysql-user-defined-functions-and-setuid-binaries/): How a MySQL User Defined Function (UDF) and a SETUID binary can be used to elevate user privilege to a root shell.
 - [GTFOBins](https://gtfobins.github.io/): GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.
 - [How I got root with Sudo](https://www.securusglobal.com/community/2014/03/17/how-i-got-root-with-sudo/)
 - [Sudo (LD_PRELOAD)](https://touhidshaikh.com/blog/?p=827): Privilege Escalation from an LD_PRELOAD environment variable. 

### Capabilities
 - [An Interesting Privilege Escalation vector (getcap/setcap)](https://nxnjz.net/2018/08/an-interesting-privilege-escalation-vector-getcap/)
 - [Capabilities](https://wiki.archlinux.org/index.php/Capabilities)
 - [Exploiting capabilities](http://blog.sevagas.com/IMG/pdf/exploiting_capabilities_the_dark_side.pdf): Parcel root power, the dark side of capabilities
 - [getcap, setcap and file capabilities](https://www.insecure.ws/linux/getcap_setcap.html)
 - [Spicing up your own access with capabilities](https://www.redpill-linpro.com/sysadvent/2016/12/06/spicing-up-your-access.html)

### Tools
 - [AutoLocalPrivilegeEscalation](https://github.com/ngalongc/AutoLocalPrivilegeEscalation): An automated script that download potential exploit for linux kernel from exploitdb, and compile them automatically.
 - [BeRoot](https://github.com/AlessandroZ/BeRoot): BeRoot Project is a post exploitation tool to check common misconfigurations to find a way to escalate our privilege.
exploits.
 - [exploit-suggester](https://github.com/pentestmonkey/exploit-suggester): This tool reads the output of “showrev -p” on Solaris machines and outputs a list of exploits that you might want to try.
is intended to be executed locally on a Linux box to enumerate basic system info and search for common privilege escalation vectors such as word writable files, misconfigurations, clear-text password and applicable
 - [kernelpop](https://github.com/spencerdodd/kernelpop): kernelpop is a framework for performing automated kernel vulnerability enumeration and exploitation.
 - [LES](https://github.com/mzet-/linux-exploit-suggester): LES: Linux privilege escalation auditing tool
 - [LinEnum](https://github.com/rebootuser/LinEnum): Scripted local Linux enumeration & privilege escalation checks
 - [LinPEAS](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS): Linux Privilege Escalation Awesome Script
 - [Linux Exploit Suggester 2](https://github.com/jondonas/linux-exploit-suggester-2): Next-generation exploit suggester based on Linux_Exploit_Suggester
 - [Linux_Exploit_Suggester](https://github.com/InteliSecureLabs/Linux_Exploit_Suggester): Linux Exploit Suggester; based on operating system release number.
 - [linux-kernel-exploits](https://github.com/SecWiki/linux-kernel-exploits)
 - [Linuxprivchecker.py](https://github.com/sleventyeleven/linuxprivchecker): This script is intended to be executed locally on a Linux box to enumerate basic system info and search for common privilege escalation vectors such as world writable files, misconfigurations, clear-text passwords and applicable exploits.
 - [Linux Privilege Escalation Check Script](https://github.com/linted/linuxprivchecker): Originally forked from the linuxprivchecker.py (Mike Czumak), this script is intended to be executed locally on a Linux box to enumerate basic system info and search for common privilege escalation vectors such as word writable files, misconfigurations, clear-text password and applicable exploits.
 - [linux-smart-enumeration](https://github.com/diego-treitos/linux-smart-enumeration): Linux enumeration tools for pentesting and CTFs
 - [linux-soft-exploit-suggester](https://github.com/belane/linux-soft-exploit-suggester): linux-soft-exploit-suggester finds exploits for all vulnerable software in a system helping with the privilege escalation.
 - [PrivEsc](https://github.com/1N3/PrivEsc): A collection of Windows, Linux and MySQL privilege escalation scripts and exploits.
 - [pspy](https://github.com/DominicBreuker/pspy): unprivileged Linux process snooping
 - [traitor](https://github.com/liamg/traitor): Automatically exploit low-hanging fruit to pop a root shell. Linux privilege escalation made easy!
 - [unix-privesc-check](https://github.com/pentestmonkey/unix-privesc-check): Shell script to check for simple privilege escalation vectors on Unix systems
 - [Unix-Privilege-Escalation-Exploits-Pack](https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack): Exploits for getting local root on Linux, BSD, AIX, HP-UX, Solaris, RHEL, SUSE etc.
 - [uptux](https://github.com/initstring/uptux): Specialized privilege escalation checks for Linux systems.

#### Find CVEs
 - [active-cve-check](https://github.com/davbo/active-cve-check): Checks a list of packages against the ""active"" (not yet patched) CVE's as listed in the Ubuntu CVE Tracker.
 - [Arch-Audit](https://www.2daygeek.com/arch-audit-a-tool-to-check-vulnerable-packages-in-arch-linux/): A tool to check vulnerable packages in Arch Linux.
 - [cve-check-tool](https://github.com/clearlinux/cve-check-tool): Original Automated CVE Checking Tool.
 - [LPVS](https://github.com/lwindolf/lpvs): Linux Package Vulnerability Scanner for CentOS and Ubuntu.

### Chkrootkit
 - [Local root exploit in Chkrootkit](https://lepetithacker.wordpress.com/2017/04/30/local-root-exploit-in-chkrootkit/): Security researchers have found an local exploit for Chkrootkit 0.49 who allow to a simple user to make root’s commands.

### NFS
 - [Exploiting a Mis-Configured NFS Share](https://www.computersecuritystudent.com/SECURITY_TOOLS/METASPLOITABLE/EXPLOIT/lesson4/index.html)
 - [Linux Privilege Escalation using Misconfigured NFS](https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/): How to exploit a misconfigured NFS share to gain root access to a remote host machine.
 - [NFS weak permissions](https://touhidshaikh.com/blog/?p=788)
 - [Linux Privilege Escalation using weak NFS permissions](https://haiderm.com/linux-privilege-escalation-using-weak-nfs-permissions/): t Linux Privilege Escalation using weak NFS permissions in “/etc/exports”. by Haider Mahmood

### Presentations
 - [Linux privilege escalation for fun, profit, and all around mischief](https://www.irongeek.com/i.php?page=videos/bsidesaugusta2016/its-too-funky-in-here04-linux-privilege-escalation-for-fun-profit-and-all-around-mischief-jake-williams): Examine opportunities for privilege escalation that can vault you from zero to hero in a few easy steps.
 - [Linux Privilege Escalation - Tradecraft Security Weekly #22](https://www.youtube.com/watch?v=oYHAi0cgur4): Methodology for performing various privilege escalation techniques against Linux-based systems.
 - [Privilege Escalation FTW](https://www.youtube.com/watch?v=yXe4X-AIbps): Demonstrate various privilege escalation techniques that are possible primarily due to misconfigurations.

## Windows
 - [awesome-windows-security](https://github.com/chryzsh/awesome-windows-security#-privilege-escalation)
 - [LOLBAS](https://lolbas-project.github.io/): Living Off The Land Binaries and Scripts (and also Libraries)
 - [OSCP Windows PrivEsc - Part 1](https://butter0verflow.github.io/oscp/OSCP-WindowsPrivEsc-Part1/)
 - [Privilege Escalation](https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/): There are also various other (local) exploits that can be used to also escalate privileges.
 - [Privilege Escalation Windows](https://sushant747.gitbooks.io/total-oscp-guide/privilege_escalation_windows.html)
 - [Privilege escalation: Windows](https://vulp3cula.gitbook.io/hackers-grimoire/post-exploitation/privesc-windows)
 - [Windows elevation of privileges ToC](https://guif.re/windowseop)
 - [Windows Local Privilege Escalation](https://book.hacktricks.xyz/windows/windows-local-privilege-escalation): by HackTricks
 - [Windows Post Gather Modules](https://www.offensive-security.com/metasploit-unleashed/windows-post-gather-modules/): Metasploit offers a number of post exploitation modules that allow for further information gathering on your target network.
 - [Windows Priv Esc](https://www.sock-raw.org/wiki/doku.php/windows_priv_esc)
 - [Windows Privilege Escalation Fundamentals](https://www.fuzzysecurity.com/tutorials/16.html)
 - [Windows Privilege Escalation Guide](https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/)
 - [Windows-Privilege-Escalation](https://github.com/frizb/Windows-Privilege-Escalation): Step-by-step windows privlege escalation methodology.
 - [Windows-Privilege-Escalation-Resources](https://github.com/Gr1mmie/Windows-Privilege-Escalation-Resources): Compilation of Resources from TCM's Windows Priv Esc Udemy Course. By Gr1mmie
 - [Windows - Privilege Escalation](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md)
 - [Windows Privilege Escalation](http://www.bhafsec.com/wiki/index.php/Windows_Privilege_Escalation)
 - [Windows Privilege Escalation](https://github.com/lamontns/pentest/blob/master/privilege-escalation/windows-privilege-escalation.md): Windows Privilege Escalation by lamontns.
 - [Windows Privilege Escalations](https://www.exploit-db.com/docs/46131)


### DLL Hijacking
 - [DLL Hijacking](https://ired.team/offensive-security/privilege-escalation/t1038-dll-hijacking): DLL Search Order Hijacking for privilege escalation, code execution, etc. by Red Teaming Experiments
 - [DLL Hijacking](https://pentestlab.blog/2017/03/27/dll-hijacking/): by PentestLab
 - [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1038/): by MITRE
 - [PrivEsc: DLL Hijacking](https://web.archive.org/web/20210805085547/https://gracefulsecurity.com/privesc-dll-hijacking/): by GracefulSecurity
 - [Windows Privilege Escalation via DLL Hijacking](https://web.archive.org/web/20200215215536/https://hacknpentest.com/windows-privilege-escalation-dll-hijacking/): Crystal-clear view on one of the most used techniques for privilege escalation by the Threat Actors. by HacknPentest


### Potato
 - [CertPotato](https://sensepost.com/blog/2022/certpotato-using-adcs-to-privesc-from-virtual-and-network-service-accounts-to-local-system/): Using ADCS to privesc from virtual and network service accounts to local system.
 - [Hot Potato](https://pentestlab.blog/2017/04/13/hot-potato/): Hot potato is the code name of a Windows privilege escalation technique that was discovered by Stephen Breen. This technique is actually a combination of two known windows issues  like NBNS spoofing and NTLM relay with the implementation of a fake WPAD proxy server which is running locally on the target host.
 - [Hot Potato](https://securityonline.info/hot-potato-windows-privilege-escalation-metasploit-powershellhot-potato-windows-privilege-escalation/): Windows 7, 8, 10, Server 2008, Server 2012 Privilege Escalation in Metasploit & PowerShell.
 - [Hot Potato – Windows Privilege Escalation](https://foxglovesecurity.com/2016/01/16/hot-potato/): Privilege Escalation on Windows 7, 8, 10, Server 2008, Server 2012 … and a new network attack.
 - [Juicy Potato (abusing the golden privileges)](https://ohpe.it/juicy-potato/)
 - [No more JuicyPotato? Old story, welcome RoguePotato!](https://decoder.cloud/2020/05/11/no-more-juicypotato-old-story-welcome-roguepotato/): by decoder_it and splinter_code/antonioCoco
 - [Remote Potato](https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/): Remote Potato – From Domain User to Enterprise Admin
 - [Rotten Potato – Privilege Escalation from Service Accounts to SYSTEM](https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/)

### Unquoted services with spaces
 - [Practical Guide to exploiting the unquoted service path vulnerability in Windows](https://trustfoundry.net/practical-guide-to-exploiting-the-unquoted-service-path-vulnerability-in-windows/)
 - [PrivEsc: Unquoted Service Path](https://web.archive.org/web/20210731080629/https://gracefulsecurity.com/privesc-unquoted-service-path/)
 - [Unquoted Service Path](https://pentestlab.blog/2017/03/09/unquoted-service-path/)
 - [UNQUOTED SERVICE PATHS](https://web.archive.org/web/20210421085608/https://www.commonexploits.com/unquoted-service-paths/)
 - [Windows Privilege Escalation — Part 1 (Unquoted Service Path)](https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae)
 - [Windows Privilege Escalation – Unquoted Services](https://web.archive.org/web/20210616195939/https://www.ethicalhacker.net/community/windows-privilege-escalation-unquoted-services/)
 - [Windows Privilege Escalation via Unquoted Service Paths](https://hausec.com/2018/10/05/windows-privilege-escalation-via-unquoted-service-paths/)

### Groups.xml
 - [Finding Passwords in SYSVOL & Exploiting Group Policy Preferences](https://adsecurity.org/?p=2288)
 - [gpp-decrypt Package Description](https://tools.kali.org/password-attacks/gpp-decrypt): A simple ruby script that will decrypt a given GPP encrypted string.

### PrintNightmare
 - [Universal Privilege Escalation and Persistence](https://pentestlab.blog/2021/08/02/universal-privilege-escalation-and-persistence-printer/): The Print Spooler is responsible to manage and process printer jobs. It runs as a service with SYSTEM level privileges on windows environments.

### Tools
 - [JAWS - Just Another Windows (Enum) Script](https://github.com/411Hall/JAWS): JAWS is PowerShell script designed to help penetration testers (and CTFers) quickly identify potential privilege escalation vectors on Windows systems. It is written using PowerShell 2.0 so 'should' run on every Windows version since Windows 7.
 - [juicy-potato](https://github.com/ohpe/juicy-potato): A sugared version of RottenPotatoNG, with a bit of juice, i.e. another Local Privilege Escalation tool, from a Windows Service Accounts to NT AUTHORITY\SYSTEM.
 - [Potato](https://github.com/foxglovesec/Potato): Potato Privilege Escalation on Windows 7, 8, 10, Server 2008, Server 2012.
 - [PowerSploit](https://github.com/PowerShellMafia/PowerSploit): PowerSploit is a collection of Microsoft PowerShell modules that can be used to aid penetration testers during all phases of an assessment.
 - [PrivescCheck](https://github.com/itm4n/PrivescCheck): Enumerate common Windows security misconfigurations which can be leveraged for privilege escalation and gather various information which might be useful for exploitation and/or post-exploitation, by itm4n.
 - [RemotePotato0](https://github.com/antonioCoco/RemotePotato0): Just another ""Won't Fix"" Windows Privilege Escalation from User to Domain Admin by antonioCoco.
 - [RoguePotato](https://github.com/antonioCoco/RoguePotato): Another Windows Local Privilege Escalation from Service Account to System by splinter_code/antonioCoco
 - [RottenPotato](https://github.com/foxglovesec/RottenPotato): RottenPotato local privilege escalation from service account to SYSTEM. (No longer maintained)
 - [RottenPotatoNG](https://github.com/breenmachine/RottenPotatoNG): New version of RottenPotato as a C++ DLL and standalone C++ binary - no need for meterpreter or other tools.
 - [Seatbelt](https://github.com/GhostPack/Seatbelt): Project that performs a number of security oriented host-survey ""safety checks"" relevant from both offensive and defensive security perspectives.        
 - [SessionGopher](https://github.com/Arvanaghi/SessionGopher): SessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools.
 - [Sherlock](https://github.com/rasta-mouse/Sherlock/): PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities. (Deprecated)
 - [SweetPotato](https://github.com/CCob/SweetPotato):  Local Service to SYSTEM privilege escalation from Windows 7 to Windows 10 / Server 2019 by CCob
 - [Tater](https://github.com/Kevin-Robertson/Tater): Tater is a PowerShell implementation of the Hot Potato Windows Privilege Escalation exploit.
 - [Watson](https://github.com/rasta-mouse/Watson): Watson is a .NET tool designed to enumerate missing KBs and suggest exploits for Privilege Escalation vulnerabilities.
 - [WindowsEnum](https://github.com/absolomb/WindowsEnum): A Powershell Privilege Escalation Enumeration Script.
 - [Windows-Exploit-Suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester): This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins. By AonCyberLabs
 - [Windows Exploit Suggester - Next Generation (WES-NG)](https://github.com/bitsadmin/wesng): WES-NG is a tool based on the output of Windows' systeminfo utility which provides the list of vulnerabilities the OS is vulnerable to, including any exploits for these vulnerabilities. Every Windows OS between Windows XP and Windows 10, including their Windows Server counterparts, is supported. By bitsadmin
 - [windows-privesc-check](https://github.com/pentestmonkey/windows-privesc-check): Standalone executable that runs on Windows systems. It tries to find misconfigurations that could allow local unprivileged users to escalate privileges to other users or to access local apps (e.g. databases).
 - [winPEAS](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS): Windows Privilege Escalation Awesome Scripts
 - [WinPwnage](https://github.com/rootm0s/WinPwnage): UAC bypass, Elevate, Persistence and Execution methods. The goal of this repo is to study the Windows penetration techniques.

### Presentations
 - [Level Up! Practical Windows Privilege Escalation - Andrew Smith](https://www.youtube.com/watch?v=PC_iMqiuIRQ)
 - [Level Up! - Practical Windows Privilege Escalation (Presentation Slides)](https://pt.slideshare.net/jakx_/level-up-practical-windows-privilege-escalation)
 - [SANS Webcast: Pen Testing with PowerShell - Local Privilege Escalation Techniques](https://www.youtube.com/watch?v=bAnohAiAQ7U)
 - [Windows Privilege Escalation Techniques (Local) - Tradecraft Security Weekly #2](https://www.youtube.com/watch?v=DlJyKgfkoKQ)
 - [Windows Privilege Escalation Unquoted Service - Part 1](https://www.youtube.com/watch?v=G9yn3qNq7Vw)
 - [Windows Privilege Escalation Unquoted Service - Part 2](https://www.youtube.com/watch?v=jfZ8FKTFNTE)
 - [Windows Privilege Escalation Unquoted Service - Part 3](https://www.youtube.com/watch?v=RORaqh1DIco)

## Linux and Windows
 - [Awesome-Hacking-Resources (Privilege escalation section)](https://github.com/vitalysim/Awesome-Hacking-Resources#privilege-escalation): A collection of hacking / penetration testing resources to make you better!
 - [Metasploit Local Exploit Suggester: Do Less, Get More!](https://blog.rapid7.com/2015/08/11/metasploit-local-exploit-suggester-do-less-get-more/)
 - [My 5 Top Ways to Escalate Privileges](https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/my-5-top-ways-to-escalate-privileges/): Bruno Oliveira's top 5 favorite ways for accomplishing privilege escalation in the most practical ways possible.
 - [Privilege Escalation](https://pentestlab.blog/category/privilege-escalation/): Privilege Escalation category by pentestlab.blog
 - [Recipe for Root](https://recipeforroot.com/): Your Cookbook for Privilege Escalation
 - [Windows / Linux Local Privilege Escalation Workshop](https://github.com/sagishahar/lpeworkshop)

## Docker
 - [Bypassing Docker Authz Plugin and Using Docker-Containerd for Privesc](https://staaldraad.github.io/post/2019-07-11-bypass-docker-plugin-with-containerd/): by Staaldraad.
 - [Container security notes](https://gist.github.com/FrankSpierings/5c79523ba693aaa38bc963083f48456c)
 - [Dirty COW - (CVE-2016-5195) - Docker Container Escape](https://blog.paranoidsoftware.com/dirty-cow-cve-2016-5195-docker-container-escape/)
 - [Docker Breakout](https://book.hacktricks.xyz/linux-unix/privilege-escalation/docker-breakout): by HackTricks
 - [Docker security checklist](https://github.com/PercussiveElbow/docker-security-checklist)
 - [Don't expose the Docker socket (not even to a container)](https://web.archive.org/web/20190623234615/https://www.lvh.io/posts/dont-expose-the-docker-socket-not-even-to-a-container.html)
 - [Escaping Docker Privileged Containers](https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1): by Vickie Li
 - [Escaping Containers to Execute Commands on Play with Docker Servers](https://www.bleepingcomputer.com/news/security/escaping-containers-to-execute-commands-on-play-with-docker-servers/)
 - [Escaping Docker container using waitid() – CVE-2017-5123](https://www.twistlock.com/labs-blog/escaping-docker-container-using-waitid-cve-2017-5123/)
 - [Escaping the Whale: Things you probably shouldn’t do with Docker (Part 1)](https://blog.secureideas.com/2018/05/escaping-the-whale-things-you-probably-shouldnt-do-with-docker-part-1.html)
 - [Hack Allows Escape of Play-with-Docker Containers](https://threatpost.com/hack-allows-escape-of-play-with-docker-containers/140831/)
 - [Hacking Docker the Easy way](https://pt.slideshare.net/BorgHan/hacking-docker-the-easy-way)
 - [Understanding Docker container escapes](https://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/): by Trail of Bits

### Tools
 - [BOtB](https://github.com/brompwnie/botb): BOtB is a container analysis and exploitation tool designed to be used by pentesters and engineers while also being CI/CD friendly with common CI/CD technologies.
 - [CDK](https://github.com/cdk-team/CDK): CDK is an open-sourced container penetration toolkit, offering stable exploitation in different slimmed containers without any OS dependency.
 - [Deepce](https://github.com/stealthcopter/deepce): Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE)
 - [Dokcer-escape-tool](https://github.com/PercussiveElbow/docker-escape-tool): This tool will help identify if you're in a Docker container and try some quick escape techniques to help assess the security of your containers.
 - [PrivilegedDockerEscape](https://github.com/0x03f3/PrivilegedDockerEscape): A bash script to create an interactive shell from a privileged docker container to the container host

### Presentations
 - [Introduction to Docker Hacking](https://www.youtube.com/watch?v=XiLfEU9wK-w): by NahamSec

## Cloud
### AWS
 - [AWS-IAM-Privilege-Escalation](https://github.com/RhinoSecurityLabs/AWS-IAM-Privilege-Escalation): A centralized source of all AWS IAM privilege escalation methods released by Rhino Security Labs.

#### Tools
 - [Pacu](https://github.com/RhinoSecurityLabs/pacu): The AWS exploitation framework, designed for testing the security of Amazon Web Services environments. By RhinoSecurityLabs.

### GCP
 - [Tutorial on privilege escalation and post exploitation tactics in Google Cloud Platform environments](https://about.gitlab.com/blog/2020/02/12/plundering-gcp-escalating-privileges-in-google-cloud-platform/): Very deep-dive into manual post-exploitation tactics and techniques for GCP.
 - [GCP-IAM-Privilege-Escalation](https://github.com/RhinoSecurityLabs/GCP-IAM-Privilege-Escalation): IAM Privilege Escalation in GCP by RhinoSecurity.

#### Tools
 - [GCPBucketBrute](https://github.com/RhinoSecurityLabs/GCPBucketBrute): A script to enumerate Google Storage buckets, determine what access you have to them, and determine if they can be privilege escalated. By RhinoSecurity.
","A curated list of awesome privilege escalation techniques. The list includes:
Linux, Windows, Docker, NFS, Capabilities, and tools. There are also some random
hacking hints, mainly from a Linux point of view. There is also a guide to Linux
Privilege Escalation."
3455,"📖 A curated list of awesome resources dedicated to Relation Extraction, one of the most important tasks in Natural Language Processing (NLP).","# Awesome Relation Extraction [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)
![awesome_re](https://user-images.githubusercontent.com/15166794/47858006-62aa7400-de2e-11e8-82d3-165f66aaaec4.png)

A curated list of awesome resources dedicated to Relation Extraction, inspired by [awesome-nlp](https://github.com/keon/awesome-nlp) and [awesome-deep-vision](https://github.com/kjw0612/awesome-deep-vision).

**Contributing**: Please feel free to make *[pull requests](https://github.com/roomylee/awesome-relation-extraction/pulls)*.

## Contents
* [Research Trends and Surveys](#research-trends-and-surveys)
* [Papers](#papers)
	* [Supervised Approaches](#supervised-approaches)
	* [Distant Supervision Approaches](#distant-supervision-approaches)
    * [GNN-based Models](#gnn-based-models)
	* [Language Models](#language-models)
	    * [Encoder Representation from Transformer](#encoder-representation-from-transformer)
	    * [Decoder Representation from Transformer](#decoder-representation-from-transformer)
    * [Knowledge Graph Based Approaches](#knowledge-graph-based-approaches)
    * [Few-Shot Learning Approaches](#few-shot-learning-approaches)
* [Datasets](#datasets)
* [Videos and Lectures](#videos-and-lectures)
* [Systems](#systems)
* [Frameworks](#frameworks)


## Research Trends and Surveys
* [NLP progress: Relationship Extraction](https://nlpprogress.com/english/relationship_extraction.html)
* [Named Entity Recognition and Relation Extraction:State-of-the-Art](https://www.researchgate.net/profile/Syed-Waqar-Jaffry/publication/345315661_Named_Entity_Recognition_and_Relation_Extraction_State_of_the_Art/links/603015aaa6fdcc37a83aafd5/Named-Entity-Recognition-and-Relation-Extraction-State-of-the-Art.pdf) (Nasar et al., 2021)
* [A Survey of Deep Learning Methods for Relation Extraction](https://arxiv.org/abs/1705.03645) (Kumar, 2017)
* [A Survey on Relation Extraction](https://www.cs.cmu.edu/~nbach/papers/A-survey-on-Relation-Extraction.pdf) (Bach and Badaskar, 2017)
* [Relation Extraction: A Survey](https://arxiv.org/abs/1712.05191) (Pawar et al., 2017)
* [A Review on Entity Relation Extraction](https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8269916) (Zhang et al., 2017)
* [Review of Relation Extraction Methods: What is New Out There?](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.727.1005&rep=rep1&type=pdf) (Konstantinova et al., 2014)
* [100 Best Github: Relation Extraction](http://meta-guide.com/software-meta-guide/100-best-github-relation-extraction)


## Papers

### Supervised Approaches
#### CNN-based Models
* Convolution Neural Network for Relation Extraction [[paper]](https://link.springer.com/chapter/10.1007/978-3-642-53917-6_21) [[code]](https://github.com/roomylee/cnn-relation-extraction) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Convolution%20Neural%20Network%20for%20Relation%20Extraction/review.md)
	* ChunYang Liu, WenBo Sun, WenHan Chao and WanXiang Che
	* ADMA 2013
* Relation Classification via Convolutional Deep Neural Network [[paper]](http://www.aclweb.org/anthology/C14-1220) [[code]](https://github.com/roomylee/cnn-relation-extraction) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Relation_Classification_via_Convolutional_Deep_Neural_Network/review.md)
	* Daojian Zeng, Kang Liu, Siwei Lai, Guangyou Zhou and Jun Zhao
	* COLING 2014
* Relation Extraction: Perspective from Convolutional Neural Networks [[paper]](http://www.cs.nyu.edu/~thien/pubs/vector15.pdf) [[code]](https://github.com/roomylee/cnn-relation-extraction) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Relation_Extraction-Perspective_from_Convolutional_Neural_Networks/review.md)
	* Thien Huu Nguyen and Ralph Grishman
	* NAACL 2015
* Classifying Relations by Ranking with Convolutional Neural Networks [[paper]](https://arxiv.org/abs/1504.06580) [[code]](https://github.com/pratapbhanu/CRCNN)
	* Cicero Nogueira dos Santos, Bing Xiang and Bowen Zhou
	* ACL 2015
* Attention-Based Convolutional Neural Network for Semantic Relation Extraction [[paper]](http://www.aclweb.org/anthology/C16-1238) [[code]](https://github.com/nicolay-r/mlp-attention)
	* Yatian Shen and Xuanjing Huang
	* COLING 2016
* Relation Classification via Multi-Level Attention CNNs [[paper]](http://aclweb.org/anthology/P16-1123) [[code]](https://github.com/lawlietAi/relation-classification-via-attention-model)
	* Linlin Wang, Zhu Cao, Gerard de Melo and Zhiyuan Liu
	* ACL 2016
* MIT at SemEval-2017 Task 10: Relation Extraction with Convolutional Neural Networks [[paper]](https://aclanthology.info/pdf/S/S17/S17-2171.pdf)
	* Ji Young Lee, Franck Dernoncourt and Peter Szolovits
	* SemEval 2017

#### RNN-based Models
* Relation Classification via Recurrent Neural Network [[paper]](https://arxiv.org/abs/1508.01006)
	* Dongxu Zhang and Dong Wang
	* arXiv 2015
* Bidirectional Long Short-Term Memory Networks for Relation Classification [[paper]](http://www.aclweb.org/anthology/Y15-1009)
	* Shu Zhang, Dequan Zheng, Xinchen Hu and Ming Yang
	* PACLIC 2015
* End-to-End Relation Extraction using LSTMs on Sequences and Tree Structure [[paper]](https://arxiv.org/abs/1601.00770)
	* Makoto Miwa and Mohit Bansal
	* ACL 2016
* Attention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification [[paper]](http://anthology.aclweb.org/P16-2034) [[code]](https://github.com/SeoSangwoo/Attention-Based-BiLSTM-relation-extraction)
	* Peng Zhou, Wei Shi, Jun Tian, Zhenyu Qi, Bingchen Li, Hongwei Hao and Bo Xu
	* ACL 2016
* Semantic Relation Classification via Hierarchical Recurrent Neural Network with Attention [[paper]](http://www.aclweb.org/anthology/C16-1119)
	* Minguang Xiao and Cong Liu
	* COLING 2016
* Semantic Relation Classification via Bidirectional LSTM Networks with Entity-aware Attention using Latent Entity Typing [[paper]](https://arxiv.org/abs/1901.08163) [[code]](https://github.com/roomylee/entity-aware-relation-classification)
	* Joohong Lee, Sangwoo Seo and Yong Suk Choi
	* arXiv 2019

#### Dependency-based Models
* Semantic Compositionality through Recursive Matrix-Vector Spaces [[paper]](http://aclweb.org/anthology/D12-1110) [[code]](https://github.com/pratapbhanu/MVRNN)
	* Richard Socher, Brody Huval, Christopher D. Manning and Andrew Y. Ng
	* EMNLP-CoNLL 2012
* Factor-based Compositional Embedding Models [[paper]](https://www.cs.cmu.edu/~mgormley/papers/yu+gormley+dredze.nipsw.2014.pdf)
	* Mo Yu, Matthw R. Gormley and Mark Dredze
	* NIPS Workshop on Learning Semantics 2014
* A Dependency-Based Neural Network for Relation Classification [[paper]](http://www.aclweb.org/anthology/P15-2047)
	* Yang Liu, Furu Wei, Sujian Li, Heng Ji, Ming Zhou and Houfeng Wang
	* ACL 2015
* Classifying Relations via Long Short Term Memory Networks along Shortest Dependency Path [[paper]](https://arxiv.org/abs/1508.03720) [[code]](https://github.com/Sshanu/Relation-Classification)
	* Xu Yan, Lili Mou, Ge Li, Yunchuan Chen, Hao Peng and Zhi Jin
	* EMNLP 2015
* Semantic Relation Classification via Convolutional Neural Networks with Simple Negative Sampling [[paper]](https://www.aclweb.org/anthology/D/D15/D15-1062.pdf)
	* Kun Xu, Yansong Feng, Songfang Huang and Dongyan Zhao
	* EMNLP 2015
* Improved Relation Classification by Deep Recurrent Neural Networks with Data Augmentation [[paper]](https://arxiv.org/abs/1601.03651)
	* Yan Xu, Ran Jia, Lili Mou, Ge Li, Yunchuan Chen, Yangyang Lu and Zhi Jin
	* COLING 2016
* Bidirectional Recurrent Convolutional Neural Network for Relation Classification [[paper]](http://www.aclweb.org/anthology/P16-1072)
	* Rui Cai, Xiaodong Zhang and Houfeng Wang
	* ACL 2016
* Neural Relation Extraction via Inner-Sentence Noise Reduction and Transfer Learning [[paper]](https://arxiv.org/abs/1808.06738)
	* Tianyi Liu, Xinsong Zhang, Wanhao Zhou, Weijia Jia
	* EMNLP 2018
	
#### GNN-based Models
* Matching the Blanks: Distributional Similarity for Relation Learning [[paper]](https://arxiv.org/abs/1906.03158)
    * Livio Baldini Soares, Nicholas FitzGerald, Jeffrey Ling, Tom Kwiatkowski
    * ACL 2019
* Relation of the Relations: A New Paradigm of the Relation Extraction Problem [[paper]](https://arxiv.org/abs/2006.03719)
	* Zhijing Jin, Yongyi Yang, Xipeng Qiu, Zheng Zhang
	* EMNLP 2020
* GDPNet: Refining Latent Multi-View Graph for Relation Extraction 
    [[paper]](https://arxiv.org/abs/2012.06780.pdf)
    [[code]](https://github.com/XueFuzhao/GDPNet)
    * Fuzhao Xue, Aixin Sun, Hao Zhang, Eng Siong Chng
    * AAAI 21
* RECON: Relation Extraction using Knowledge Graph Context in a Graph Neural Network
    [[parer]](https://arxiv.org/abs/2009.08694.pdf)
    [[code]](https://github.com/ansonb/RECON)
    * Anson Bastos, Abhishek Nadgeri, Kuldeep Singh, Isaiah Onando Mulang', Saeedeh Shekarpour, Johannes Hoffart, Manohar Kaul
    * WWW'21
	
### Distant Supervision Approaches
* Distant supervision for relation extraction without labeled data [[paper]](https://web.stanford.edu/~jurafsky/mintz.pdf) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Distant_supervision_for_relation_extraction_without_labeled_data/review.md)
	* Mike Mintz, Steven Bills, Rion Snow and Dan Jurafsky
	* ACL 2009
* Knowledge-Based Weak Supervision for Information Extraction of Overlapping Relations [[paper]](http://www.aclweb.org/anthology/P11-1055) [[code]](http://aiweb.cs.washington.edu/ai/raphaelh/mr/)
	* Raphael Hoffmann, Congle Zhang, Xiao Ling, Luke Zettlemoyer and Daniel S. Weld
	* ACL 2011
* Multi-instance Multi-label Learning for Relation Extraction [[paper]](http://www.aclweb.org/anthology/D12-1042) [[code]](https://nlp.stanford.edu/software/mimlre.shtml)
	* Mihai Surdeanu, Julie Tibshirani, Ramesh Nallapati and Christopher D. Manning
	* EMNLP-CoNLL 2012
* Distant Supervision for Relation Extraction via Piecewise Convolutional Neural Networks [[paper]](http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP203.pdf) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Distant_Supervision_for_Relation_Extraction_via_Piecewise_Convolutional_Neural_Networks/review.md) [[code]](https://github.com/nicolay-r/sentiment-pcnn)
	* Daojian Zeng, Kang Liu, Yubo Chen and Jun Zhao
	* EMNLP 2015
* Relation Extraction with Multi-instance Multi-label Convolutional Neural Networks [[paper]](https://pdfs.semanticscholar.org/8731/369a707046f3f8dd463d1fd107de31d40a24.pdf) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Relation_Extraction_with_Multi-instance_Multi-label_Convolutional_Neural_Networks/review.md) [[code]](https://github.com/may-/cnn-re-tf)
	* Xiaotian Jiang, Quan Wang, Peng Li, Bin Wang
	* COLING 2016
* Incorporating Relation Paths in Neural Relation Extraction [[paper]](http://aclweb.org/anthology/D17-1186) [[review]](https://github.com/roomylee/paper-review/blob/master/relation_extraction/Incorporating_Relation_Paths_in_Neural_Relation_Extraction/review.md)
	* Wenyuan Zeng, Yankai Lin, Zhiyuan Liu and Maosong Sun
	* EMNLP 2017
* Neural Relation Extraction with Selective Attention over Instances [[paper]](http://www.aclweb.org/anthology/P16-1200) [[code]](https://github.com/thunlp/OpenNRE/)
	* Yankai Lin, Shiqi Shen, Zhiyuan Liu, Huanbo Luan and Maosong Sun
	* ACL 2017
* Learning local and global contexts using a convolutional recurrent network model for relation classification in biomedical text [[paper]](http://www.aclweb.org/anthology/K17-1032) [[code]](https://github.com/desh2608/crnn-relation-classification) [[code]](https://github.com/kwonmha/Convolutional-Recurrent-Neural-Networks-for-Relation-Extraction)
	* Desh Raj, Sunil Kumar Sahu and Ashish Anan
	* CoNLL 2017
* Hierarchical Relation Extraction with Coarse-to-Fine Grained Attention[[paper]](https://aclweb.org/anthology/D18-1247)[[code]](https://github.com/thunlp/HNRE)
	* Xu Han, Pengfei Yu∗, Zhiyuan Liu, Maosong Sun, Peng Li
	* EMNLP 2018
* RESIDE: Improving Distantly-Supervised Neural Relation Extraction using Side Information [[paper]](http://malllabiisc.github.io/publications/papers/reside_emnlp18.pdf) [[code]](https://github.com/malllabiisc/RESIDE)
	* Shikhar Vashishth, Rishabh Joshi, Sai Suman Prayaga, Chiranjib Bhattacharyya and Partha Talukdar
	* EMNLP 2018
* Distant Supervision Relation Extraction with Intra-Bag and Inter-Bag Attentions
    [[paper]](https://arxiv.org/abs/1904.00143.pdf)
    [[code]](https://github.com/ZhixiuYe/Intra-Bag-and-Inter-Bag-Attentions)
    * Zhi-Xiu Ye, Zhen-Hua Ling
    * NAACL 2019
	
### Language Models

#### Encoder Representation from Transformer
* Enriching Pre-trained Language Model with Entity Information for Relation Classification [[paper]](https://arxiv.org/abs/1905.08284.pdf)
    * Shanchan Wu, Yifan He
    * arXiv 2019
* LUKE: Deep Contextualized Entity Representations with Entity-aware Self-attention
    [[paper]](https://www.aclweb.org/anthology/2020.emnlp-main.523/)
    [[code]](https://github.com/studio-ousia/luke)
    * Ikuya Yamada, Akari Asai, Hiroyuki Shindo, Hideaki Takeda, Yuji Matsumoto
    * EMNLP 2020
* SpanBERT: Improving pre-training by representing and predicting spans [[paper]](https://arxiv.org/abs/1907.10529.pdf) [[code]](https://github.com/facebookresearch/SpanBERT)
    * Mandar Joshi, Danqi Chen, Yinhan Liu, Daniel S. Weld, Luke Zettlemoyer and Omer Levy
    * TACL 2020 (Transactions of the Association for Computational Linguistics)
* Efficient long-distance relation extraction with DG-SpanBERT
    [[paper]](https://arxiv.org/abs/2004.03636)
    * Jun Chen, Robert Hoehndorf, Mohamed Elhoseiny, Xiangliang Zhang
    
#### Decoder Representation from Transformer
* Improving Relation Extraction by Pretrained Language Representations
    [[paper]](https://arxiv.org/abs/1906.03088)
    [[review]](https://openreview.net/forum?id=BJgrxbqp67)
    [[code]](https://github.com/DFKI-NLP/TRE)
    * Christoph Alt, Marc Hübner, Leonhard Hennig
    * AKBC 19

### Knowledge Graph Based Approaches
* KGPool: Dynamic Knowledge Graph Context Selection for Relation Extraction
  	[[paper]](https://arxiv.org/pdf/2106.00459.pdf)
  	[[code]](https://github.com/nadgeri14/KGPool)
	* Abhishek Nadgeri, Anson Bastos, Kuldeep Singh, Isaiah Onando Mulang, Johannes Hoffart, Saeedeh Shekarpour, and Vijay Saraswat
	* ACL 2021 (findings)

### Few-Shot Learning Approaches
* FewRel: A Large-Scale Supervised Few-Shot Relation Classification Dataset with State-of-the-Art Evaluation [[paper]](https://arxiv.org/abs/1810.10147) [[website]](http://zhuhao.me/fewrel) [[code]](https://github.com/ProKil/FewRel)
	* Xu Han, Hao Zhu, Pengfei Yu, Ziyun Wang, Yuan Yao, Zhiyuan Liu, Maosong Sun
	* EMNLP 2018

### Miscellaneous
* Jointly Extracting Relations with Class Ties via Effective Deep Ranking [[paper]](http://aclweb.org/anthology/P17-1166)
	* Hai Ye, Wenhan Chao, Zhunchen Luo and Zhoujun Li
	* ACL 2017
* End-to-End Neural Relation Extraction with Global Optimization [[paper]](http://aclweb.org/anthology/D17-1182)
	* Meishan Zhang, Yue Zhang and Guohong Fu
	* EMNLP 2017
* Adversarial Training for Relation Extraction [[paper]](https://people.eecs.berkeley.edu/~russell/papers/emnlp17-relation.pdf)
	* Yi Wu, David Bamman and Stuart Russell
	* EMNLP 2017
* A neural joint model for entity and relation extraction from biomedical text[[paper]](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-017-1609-9)
	* Fei Li, Meishan Zhang, Guohong Fu and Donghong Ji
	* BMC bioinformatics 2017
* Joint Extraction of Entities and Relations Using Reinforcement Learning and Deep Learning [[paper]](https://www.hindawi.com/journals/cin/2017/7643065/)
	* Yuntian Feng, Hongjun Zhang, Wenning Hao, and Gang Chen
	* Journal of Computational Intelligence and Neuroscience 2017
* TDEER: An Efficient Translating Decoding Schema for Joint Extraction of Entities and Relations [[paper]](https://aclanthology.org/2021.emnlp-main.635/) [[code]](https://github.com/4ai/tdeer)
	* Xianming Li, Xiaotian Luo, Chenghao Dong, Daichuan Yang, Beidi Luan and Zhen He
	* EMNLP 2021

[Back to Top](#contents)


## Datasets
* SemEval-2010 Task 8 [[paper]](http://www.aclweb.org/anthology/S10-1006) [[download]](https://docs.google.com/leaf?id=0B_jQiLugGTAkMDQ5ZjZiMTUtMzQ1Yy00YWNmLWJlZDYtOWY1ZDMwY2U4YjFk&sort=name&layout=list&num=50)
	* Multi-Way Classification of Semantic Relations Between Pairs of Nominals
* New York Times (NYT) Corpus [[paper]](http://www.riedelcastro.org//publications/papers/riedel10modeling.pdf) [[download]](https://catalog.ldc.upenn.edu/LDC2008T19)
	* This dataset was generated by aligning *Freebase* relations with the NYT corpus, with sentences from the years 2005-2006 used as the training corpus and sentences from 2007 used as the testing corpus.
* FewRel: Few-Shot Relation Classification Dataset [[paper]](https://arxiv.org/abs/1810.10147) [[Website]](http://zhuhao.me/fewrel)
	* This dataset is a supervised few-shot relation classification dataset. The corpus is Wikipedia and the knowledge base used to annotate the corpus is Wikidata.
* TACRED: The TAC Relation Extraction Dataset 
    [[paper]](https://www.aclweb.org/anthology/D17-1004.pdf) 
    [[Website]](https://nlp.stanford.edu/projects/tacred/) 
    [[download]](https://catalog.ldc.upenn.edu/LDC2018T24)
    * Is a large-scale relation extraction dataset with built over newswire and web text from the corpus used in the yearly TAC Knowledge Base Population (TAC KBP) challenges.
* ACE05: 
    [[Website]](https://catalog.ldc.upenn.edu/LDC2006T06) 
    [[download-info]](https://www.ldc.upenn.edu/language-resources/data/obtaining)
    * This dataset represent texts extracted from a variety of sources: broadcast conversation, broadcast news, newsgroups, weblogs. The
    6 relation types between 7 types on entities: acility (FAC), Geo-PoliticalEntity (GPE), Location (LOC), Organization (ORG), 
    Person (PER), Vehicle (VEH), Weapon (WEA).
* SemEval-2018 Task 7
    [[paper]](https://www.aclweb.org/anthology/S18-1111.pdf)
    [[Website]](https://competitions.codalab.org/competitions/17422)
    [[download]](https://lipn.univ-paris13.fr/~gabor/semeval2018task7/)
    * The corpus is collected from abstracts and introductions of scientific papers, and
    there are six types of semantic relations in total.
    There are three subtasks of it: Subtask
    1.1 and Subtask 1.2 are relation classification on
    clean and noisy data, respectively; Subtask 2 is
    the standard relation extraction.

For state of the art results check out [nlpprogress.com on relation extraction](https://nlpprogress.com/english/relationship_extraction.html)

[Back to Top](#contents)


## Videos and Lectures
* [Stanford University: CS124](https://web.stanford.edu/class/cs124/), Dan Jurafsky
	* (Video) [Week 5: Relation Extraction and Question](https://www.youtube.com/watch?v=5SUzf6252_0&list=PLaZQkZp6WhWyszpcteV4LFgJ8lQJ5WIxK&ab_channel=FromLanguagestoInformation)
* [Washington University: CSE517](https://courses.cs.washington.edu/courses/cse517/), Luke Zettlemoyer
	* (Slide) [Relation Extraction 1](https://courses.cs.washington.edu/courses/cse517/13wi/slides/cse517wi13-RelationExtraction.pdf)
	* (Slide) [Relation Extraction 2](https://courses.cs.washington.edu/courses/cse517/13wi/slides/cse517wi13-RelationExtractionII.pdf)
* [New York University: CSCI-GA.2590](https://cs.nyu.edu/courses/spring17/CSCI-GA.2590-001/), Ralph Grishman
	* (Slide) [Relation Extraction: Rule-based Approaches](https://cs.nyu.edu/courses/spring17/CSCI-GA.2590-001/DependencyPaths.pdf)
* [Michigan University: Coursera](https://ai.umich.edu/portfolio/natural-language-processing/), Dragomir R. Radev
	* (Video) [Lecture 48: Relation Extraction](https://www.youtube.com/watch?v=TbrlRei_0h8&ab_channel=ArtificialIntelligence-AllinOne)
* [Virginia University: CS6501-NLP](http://web.cs.ucla.edu/~kwchang/teaching/NLP16/), Kai-Wei Chang
	* (Slide) [Lecture 24: Relation Extraction](http://web.cs.ucla.edu/~kwchang/teaching/NLP16/slides/24-relation.pdf)


[Back to Top](#contents)


## Systems
* [DeepDive](http://deepdive.stanford.edu/)
* [Stanford Relation Extractor](https://nlp.stanford.edu/software/relationExtractor.html)

[Back to Top](#contents)


## Frameworks
* **OpenNRE** [[github]](https://github.com/thunlp/OpenNRE) [[paper]](https://aclanthology.org/D19-3029.pdf)
    * Is an open-source and extensible toolkit that provides a unified framework to implement neural models for relation extraction (RE) between named entities. 
    It is designed for various scenarios for RE, including sentence-level RE, bag-level RE, document-level RE, and few-shot RE. 
    It provides various functional RE modules based on both TensorFlow and PyTorch to maintain sufficient modularity and extensibility, making it becomes easy to incorporate new models into the framework.
* **AREkit** [[github]](https://github.com/nicolay-r/AREkit) [[research-applicable-paper]](https://arxiv.org/pdf/2006.13730.pdf)
    * Is an open-source and extensible toolkit focused on data preparation for document-level relation extraction organization. 
    It complements the OpenNRE functionality, as in terms of the latter, *document-level RE setting is not widely explored* (2.4 [[paper]](https://aclanthology.org/D19-3029.pdf)).
    The core functionality includes 
    (1) API for document presentation with EL (Entity Linking, i.e. Object Synonymy) support 
    for sentence level relations preparation (dubbed as contexts)
    (2) API for contexts extraction
    (3) relations transferring from sentence-level onto document-level, etc.
    It provides 
    [neural networks](https://github.com/nicolay-r/AREkit/tree/0.21.0-rc/contrib/networks) (like OpenNRE)
    and
    [BERT](https://github.com/nicolay-r/AREkit/tree/0.21.0-rc/contrib/bert) modules,
    both applicable for sentiment attitude extraction task.
* **DeRE** [[github]](https://github.com/ims-tcl/DeRE) [[paper]](https://aclanthology.org/D18-2008/)
	* Is an open-source framework for **de**claritive **r**elation **e**xtraction, and therefore allows to declare your own task (using XML schemas) and apply manually implemented models towards it (using a provided API).
	The task declaration builds on top of the *spans* and *relations between spans*. In terms of the latter, authors propose *frames*, where every frame yelds of: (1) *trigger* (span) and (2) *n*-slots, where every slot
	may refer to *frame* or *span*. 
	The framework poses no theoretical restrictions to the window from which frames are extracted.
	Thus, this concept may cover sentence-level, document-level and multi-document RE tasks.
    
    

[Back to Top](#contents)


## License
[![license](https://camo.githubusercontent.com/60561947585c982aee67ed3e3b25388184cc0aa3/687474703a2f2f6d6972726f72732e6372656174697665636f6d6d6f6e732e6f72672f70726573736b69742f627574746f6e732f38387833312f7376672f63632d7a65726f2e737667)](https://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [Joohong Lee](https://roomylee.github.io/) has waived all copyright and related or neighboring rights to this work.
","A curated list of awesome resources dedicated to Relation Extraction. Please
feel free to make *[pull requests](https://github.com/roomylee/awesome-relation-
extraction/pulls)*. Contents include: Research Trends and Surveys, Datasets,
Videos and Lectures."
1728,"A curated list of awesome SwiftUI tutorials, libraries, videos and articles.","# Awesome SwiftUI [<u>🕶️</u>](https://chinsyo.com/awesome-swiftui ""Open in browser"")

A curated list of awesome SwiftUI tutorials, libraries, sessions and articles.

## Contributing

Found a SwiftUI library or snippet that you think is *awesome*? Fork this repository and send your pull request.

## Index

- [Websites](#websites) 
- [Tutorials](#tutorials)
- [Sessions](#sessions)
- [Documents](#documents)
- [Articles](#articles)
- [Samples](#samples)

## Websites

* SwiftUI [developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/)
* Documentation [developer.apple.com/documentation/swiftui](https://developer.apple.com/documentation/swiftui)
* WWDC 2020 [developer.apple.com/wwdc20/](https://developer.apple.com/wwdc20/)


> Notice: Apple Developer Program required.
<details open>
  <summary>Resource <a href=""https://developer.apple.com/download/"">download</a></summary>
  <ul>
  <li>Xcode 13 <a href=""https://apps.apple.com/us/app/xcode/id497799835"">Download</a></li>
  <li>iOS Image <a href=""https://developer.apple.com/download/#ios-restore-images-iphone-new"">Download restore image</a></li>
  <li>iPadOS Image <a href=""https://developer.apple.com/download/#ios-restore-images-ipad-new"">Download restore image</a></li>
  <li>macOS Catalina Image <a href=""https://developer.apple.com/services-account/download?path=/WWDC_2019/macOS_10.15_Developer_Beta_Access_Utility/macOSDeveloperBetaAccessUtility.dmg"">Install profile</a></li>
  <li>watchOS Image <a href=""https://developer.apple.com/services-account/download?path=/WWDC_2019/watchOS_6_beta_Configuration_Profile/watchOS_6_Beta_Profilemobileconfig.mobileconfig"">Install profile</a></li>
  </ul>
</details>

## Tutorials
*  [iOS App Dev Training](https://developer.apple.com/tutorials/app-dev-training)
*  [Creating a macOS App](https://developer.apple.com/tutorials/swiftui/creating-a-macos-app)
*  [Creating a watchOS App](https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app)
*  [Creating and Combining Views](https://developer.apple.com/tutorials/swiftui/creating-and-combining-views)
*  [Building Lists and Navigation](https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation)
*  [Handling User Input](https://developer.apple.com/tutorials/swiftui/handling-user-input)
*  [Drawing Paths and Shapes](https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes)
*  [Animating Views and Transitions](https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions)
*  [Composing Complex Interfaces](https://developer.apple.com/tutorials/swiftui/composing-complex-interfaces)
*  [Working with UI Controls](https://developer.apple.com/tutorials/swiftui/working-with-ui-controls)
*  [Interfacing with UIKit](https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit)
*  [Present your app’s content in widgets with SwiftUI views.](https://developer.apple.com/documentation/widgetkit/swiftui-views)
* [SwiftUI Cheatsheet](https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet)
* [SwiftUI 与 Combine 编程](https://objccn.io/products/swift-ui)
* [SwiftUI 编程思想](https://objccn.io/products/thinking-in-swiftui)
* [SwiftUI by Tutorials](https://store.raywenderlich.com/products/swiftui-by-tutorials)
* [100 Days of SwiftUI](https://www.hackingwithswift.com/100/swiftui)
* [SwiftUI by Example](https://www.hackingwithswift.com/quick-start/swiftui)
* [肘子的Swift记事本](https://www.fatbobman.com/)

## Sessions

- WWDC 2019
  * 204 - [Introducing SwiftUI: Building Your First App](https://developer.apple.com/videos/play/wwdc2019/204/)
  * 237 - [Building Custom Views with SwiftUI](https://developer.apple.com/videos/play/wwdc2019/237)
  * 238 - [Accessibility in SwiftUI](https://developer.apple.com/videos/play/wwdc2019/238)
  * 226 - [Data Flow Through SwiftUI](https://developer.apple.com/videos/play/wwdc2019/226)
  * 231 - [Integrating SwiftUI](https://developer.apple.com/videos/play/wwdc2019/231)
  * 233 - [Mastering Xcode Previews](https://developer.apple.com/videos/play/wwdc2019/233)
  * 216 - [SwiftUI Essentials](https://developer.apple.com/videos/play/wwdc2019/216)
  * 240 - [SwiftUI On All Devices](https://developer.apple.com/videos/play/wwdc2019/240)
  * 219 - [SwiftUI on watchOS](https://developer.apple.com/videos/play/wwdc2019/219)

- WWDC 2020
  * 10119 - [Introduction to SwiftUI](https://developer.apple.com/wwdc20/10119/)
  * 10041 - [What's new in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10041/)
  * 10031 - [Stacks, Grids, and Outlines in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10031/)
  * 10037 - [App essentials in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10037/)
  * 10040 - [Data Essentials in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10040/)
  * 10149 - [Structure your app for SwiftUI previews](https://developer.apple.com/videos/play/wwdc2020/10149/)
  * 10033 - [Build SwiftUI views for widgets](https://developer.apple.com/videos/play/wwdc2020/10033/)
  * 10039 - [Build document-based apps in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10039/)
  * 10042 - [Build SwiftUI apps for tvOS](https://developer.apple.com/videos/play/wwdc2020/10042/)
  * 10048 - [Build complications in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10048/)
  * 10185 - [Visually edit SwiftUI views](https://developer.apple.com/videos/play/wwdc2020/10185/)

- WWDC 2021
  * 10018 - [What's new in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10018/)
  * 10017 - [Bring Core Data concurrency to Swift and SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10017/)
  * 10019 - [Discover concurrency in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10019/)
  * 10119 - [SwiftUI Accessibility: Beyond the basics](https://developer.apple.com/videos/play/wwdc2021/10119/)
  * 10220 - [Localize your SwiftUI app](https://developer.apple.com/videos/play/wwdc2021/10220/)
  * 10021 - [Add rich graphics to your SwiftUI app](https://developer.apple.com/videos/play/wwdc2021/10021/)
  * 10022 - [Demystify SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10022/)
  * 10023 - [Direct and reflect focus in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10023/)
  * 10176 - [Craft search experiences in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10176/)
  * 10062 - [SwiftUI on the Mac: Build the fundamentals](https://developer.apple.com/videos/play/wwdc2021/10062/)
  * 10289 - [SwiftUI on the Mac: The finishing touches](https://developer.apple.com/videos/play/wwdc2021/10289/)

## Documents

* [App Structure and Behavior](https://developer.apple.com/documentation/swiftui/app-structure-and-behavior)
* [Views and Controls](https://developer.apple.com/documentation/swiftui/views-and-controls)
* [View Layout and Presentation](https://developer.apple.com/documentation/swiftui/view-layout-and-presentation)
* [Drawing and Animation](https://developer.apple.com/documentation/swiftui/drawing-and-animation)
* [Framework Integration](https://developer.apple.com/documentation/swiftui/framework-integration)
* [State and Data Flow](https://developer.apple.com/documentation/swiftui/state-and-data-flow)
* [Gestures](https://developer.apple.com/documentation/swiftui/gestures)
* [Preview in Xcode](https://developer.apple.com/documentation/swiftui/previews-in-xcode)


## Articles

* [Easily format phone numbers entirly in SwiftUI](https://benjaminlsage.medium.com/format-phone-numbers-entirely-in-swiftui-9456f52990a1) - IcyHovercraft
* An Instagram clone using SwiftUI and GraphQL [[1]](https://blog.back4app.com/2019/08/27/instagram-clone/) [[2]](https://blog.back4app.com/2019/09/03/swift-instagram-clone/) [[3]](https://blog.back4app.com/2019/09/16/instagram-clone-profile/) [[4]](https://blog.back4app.com/2019/09/26/instagram-clone-homeview/)
* SwiftUI, Combine, and Firebase [[1]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part1/) [[2]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part2/) [[3]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part3/) - - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [SwiftUI + Combine = ❤️](https://peterfriese.dev/swift-combine-love/) - - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [Get started with SwiftUI](https://www.hackingwithswift.com/articles/194/get-started-with-swiftui) - Hacking with Swift
* [Inside SwiftUI's Declarative Syntax's Compiler Magic](https://swiftrocks.com/inside-swiftui-compiler-magic.html) - SwiftRocks
* [SwiftUI’s relationship to UIKit and AppKit](https://wwdcbysundell.com/2019/swiftui-relationship-to-uikit-appkit/) - WWDC by Sundell
* [A first look at SwiftUI: Apple's declarative new UI framework](https://wwdcbysundell.com/2019/swiftui-first-look/) - WWDC by Sundell
* [Answers to the most common questions about SwiftUI](https://wwdcbysundell.com/2019/swiftui-common-questions/) - WWDC by Sundell
* [Making real-world app with SwiftUI](https://mecid.github.io/2019/06/05/swiftui-making-real-world-app/) - Majid's
* [SwiftUI 的一些初步探索 (一)](https://xiaozhuanlan.com/topic/7652341890) - 小专栏[@onevcat](https://xiaozhuanlan.com/u/onevcat)
* [SwiftUI 的一些初步探索 (二)](https://xiaozhuanlan.com/topic/5346879201) - 小专栏[@onevcat](https://xiaozhuanlan.com/u/onevcat)
* [SwiftUI 的 DSL 语法分析](https://zhuanlan.zhihu.com/p/68294674) - 知乎专栏[@黄二少碎碎念](https://zhuanlan.zhihu.com/hjcapple)
* [从 SwiftUI 谈声明式 UI 与类型系统](https://zhuanlan.zhihu.com/p/68275232) - 知乎专栏[@CyanTalks](https://zhuanlan.zhihu.com/cyantalks)
* [SwiftUI Are we saying goodbye to IB(UIStoryboard) ?](https://medium.com/@themedo8000/swiftui-are-we-saying-goodbye-to-ib-718035e83b07) - Medium[@Mohammad Sawalha](https://medium.com/@themedo8000)
* [Tutorial: How to setup a SwiftUI project](https://medium.com/@martinlasek/swiftui-getting-started-372389fff423) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [What SwiftUI Means for Flutter](https://medium.com/flutter-nyc/what-swiftui-means-for-flutter-6d5898f7adf7) - Medium[@Martin Rybak](https://medium.com/@martinrybak)
* [SwiftUI 程式開發初體驗](https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E5%88%9D%E9%AB%94%E9%A9%97-aea9122741b1) - Medium[@彼得潘的 iOS App Neverland](https://medium.com/@apppeterpan)
* [SwiftUI - How to setup a project](https://medium.com/@martinlasek/swiftui-getting-started-372389fff423) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [How To Make a Simple Countdown Timer with SwiftUI](https://medium.com/better-programming/make-a-simple-countdown-with-timer-and-swiftui-3ce355b54986) - Medium[@Antoine Barrault](https://medium.com/@ant_one)
* [SwiftUI - Understanding State](https://medium.com/@martinlasek/swiftui-understanding-state-8afa23fd9f1f) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [Understanding SwiftUI in depth](https://medium.com/techtron/understanding-swiftui-in-depth-58d42614619e) - Medium[@Balraj Singh](https://medium.com/@erbalrajs)
* [A Skeptics view on SwiftUI](https://medium.com/@JillevdWeerd/a-skeptics-view-on-swiftui-cc6636b6fd3b) - Medium[@Jille van der Weerd](https://medium.com/@JillevdWeerd)
* [Optionals in SwiftUI](https://medium.com/q42-engineering/swiftui-optionals-ead04edd439f) - Medium[@Jasper Haggenburg](https://medium.com/@jpunt)
* [URL Image view in SwiftUI](https://medium.com/@dmytro.anokhin/url-image-view-in-swiftui-f08f85d942d8) - Medium[@Dmytro Anokhin](https://medium.com/@dmytro.anokhin)
* [What Swift UI means to current Apps and Frameworks](https://medium.com/@luca.kiedrowski/what-swift-ui-means-to-current-apps-and-frameworks-goodbye-hybrid-apps-77479a1ba0d9) - Medium[@Luca Kiedrowski](https://medium.com/@luca.kiedrowski)
* [How to build a Chat App or Messenger in SwiftUI for iOS Swift](https://medium.com/@halavins/how-to-build-a-chat-app-or-messenger-in-swiftui-for-ios-swift-b46dbe5cc0ab) - Medium[@Nick Halavins](https://medium.com/@halavins)
* [Presenting UIViewControllers in SwiftUI](https://medium.com/@Johannes_Nevels/presenting-uiviewcontrollers-in-swiftui-22388616a24c) - Medium[@Johannes Nevels](https://medium.com/@Johannes_Nevels)
* [A Week With SwiftUI](https://icalvin.dev/post/403) - iCalvin.dev
* [SwiftUI, First Impression](https://medium.com/@ahmadfayyas/swiftui-first-impression-37a734fa6f02) - Medium[@Ahmad Fayyas](https://medium.com/@ahmadfayyas)
* [SwiftUI & Combine: Better Together](https://medium.com/flawless-app-stories/swiftui-plus-combine-equals-love-791ad444a082) - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [Programmatic navigation in SwiftUI project](https://medium.com/flawless-app-stories/programmatic-navigation-in-swiftui-project-81200f35150) - Medium[@nalexn](https://medium.com/@nalexn)
* [Clean Architecture for SwiftUI](https://medium.com/swlh/clean-architecture-for-swiftui-6d6c4eb1cf6a) - Medium[@nalexn](https://medium.com/@nalexn)
* [Variadic DisposeBag for Combine subscriptions](https://medium.com/better-programming/cancelbag-d928d126e8ca) - Medium[@nalexn](https://medium.com/@nalexn)
* [8 Amazing SwiftUI Libraries to Use in Your Next Project](https://medium.com/better-programming/8-amazing-swiftui-libraries-to-use-in-your-next-project-52efaf211143) - Medium[@rudrankriyam](https://medium.com/@rudrankriyam)
* [Create a map view compatible with SwiftUI](https://docs.mapbox.com/help/tutorials/ios-swiftui/) - Mapbox
* [SwiftUI Architectures: Model-View, Redux & MVVM](https://quickbirdstudios.com/blog/swiftui-architecture-redux-mvvm/) - QuickBird Studios
* [Modern Dependency Injection in Swift](https://medium.com/better-programming/modern-dependency-injection-in-swift-952286b308be) - Medium[@michaellong](https://medium.com/@michaellong)
* [How to Speed Up SwiftUI Development and Testing Using PreviewSnapshots](https://doordash.engineering/2023/01/18/how-to-speed-up-swiftui-development-and-testing-using-previewsnapshots/) - DoorDash Engineering

## Samples
*  [Building Widgets Using WidgetKit and SwiftUI](https://developer.apple.com/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui) - Create widgets to show your app’s content on the Home screen, with custom intents for user-customizable settings.
*  [Fruta: Building a Feature-Rich App with SwiftUI](https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui) - Create a shared codebase to build a multiplatform app that offers widgets and an App Clip.
*  [Creating Accessible Views](https://developer.apple.com/documentation/accessibility/creating_accessible_views) - Make your app accessible to everyone by applying accessibility modifiers to your SwiftUI views.
* [MojtabaHs/iPhoneNumberField](https://github.com/MojtabaHs/iPhoneNumberField) - A SwiftUI text field view that formats your phone number as you type
* [devxoul/SwiftUITodo](https://github.com/devxoul/SwiftUITodo) - An example to-do list app using SwiftUI which is introduced in WWDC19
* [marty-suzuki/GitHubSearchWithSwiftUI](https://github.com/marty-suzuki/GitHubSearchWithSwiftUI) - SwiftUI and Combine based GitHubSearch example.
* [ra1028/SwiftUI-Combine-Example](https://github.com/ra1028/SwiftUI-Combine-Example) - This is an example project of SwiftUI and Combine using GitHub API.
* [timdonnelly/SwiftUITimeTravel](https://github.com/timdonnelly/SwiftUITimeTravel) - An experimental time traveling state store for SwiftUI
* [alexpaul/SwiftUI-Landmarks](https://github.com/alexpaul/SwiftUI-Landmarks) - Introducing SwiftUI. A declarative way to create User Interfaces with Swift.
* [Yohrd/iOS-Portfolio-Rodrigo](https://github.com/Yohrd/iOS-Portfolio-Rodrigo) - Portfolio criado em Swift 5.1 (Beta) e SwiftUI
* [ra1028/SwiftUI-Flux](https://github.com/ra1028/SwiftUI-Flux) - This is a tiny experimental application using SwiftUI with Flux architecture.
* [unixzii/SwiftUI-2048](https://github.com/unixzii/SwiftUI-2048) - A 2048 game writing with SwiftUI.
* [agiletalk/SwiftUINote](https://github.com/agiletalk/SwiftUINote) - Simple note app using SwiftUI
* [artemnovichkov/SwiftUI-by-Examples](https://github.com/artemnovichkov/SwiftUI-by-Examples) - Examples of new SwiftUI framework
* [jrtibbetts/TempusRomanumII](https://github.com/jrtibbetts/TempusRomanumII) - The SwiftUI implementation of TempusRomanum
* [hotchner/SwiftUICalculator](https://github.com/hotchner/SwiftUICalculator) - A calculator app using SwiftUI which is introduced in WWDC19
* [YOONMS/WWDCPlayer](https://github.com/YOONMS/WWDCPlayer) - WWDC19 player using SwiftUI 
* [leavenstee/InstaFake-Swift-UI](https://github.com/leavenstee/InstaFake-Swift-UI) - Swift UI Demo for an instagram copy
* [Dimillian/MovieSwiftUI](https://github.com/Dimillian/MovieSwiftUI) - SwiftUI & Combine app using MovieDB API
* [alexdrone/DispatchStore](https://github.com/alexdrone/DispatchStore) - Package that implements an operation based multi-store à-la Flux for SwiftUI.
* [miliPolo/SwiftUI_Jike](https://github.com/miliPolo/SwiftUI_Jike) - Build Jike App UI with SwiftUI
* [danielctull/SwiftUI-Tutorials](https://github.com/danielctull/SwiftUI-Tutorials) - All of the SwiftUI tutorials in one easy download.
* [robbiet480/TransitPal](https://github.com/robbiet480/TransitPal) - A open source Swift app for iOS 13 that allows you to check your NFC transit card information. Written with SwiftUI.
* [vinhnx/CombineUnsplash](https://github.com/vinhnx/CombineUnsplash) - Exploring SwiftUI + Combine + Result by using Unsplash API, with detailed code explaination
* [Jinxiansen/SwiftUI](https://github.com/Jinxiansen/SwiftUI) - SwiftUI Framework Learning and Usage Guide. 
* [StevenLambion/SwiftDux](https://github.com/StevenLambion/SwiftDux) - Redux inspired predictable state management for SwiftUI applications.
* [antgar/CombineMarbles-SwiftUI](https://github.com/antgar/CombineMarbles-SwiftUI) - Diagrams for the new Combine framework 
* [SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX) - An extension to the standard SwiftUI library
* [SwiftWebUI/SwiftWebUI](https://github.com/SwiftWebUI/SwiftWebUI) - A demo implementation of SwiftUI for the Web
* [pietropizzi/GridStack](https://github.com/pietropizzi/GridStack) - A flexible grid layout view for SwiftUI
* [nickffox/KeyboardObserving](https://github.com/nickffox/KeyboardObserving) - ⌨️A Combine-based way to observe and adjust for Keyboard notifications in SwiftUI
* [SwiftUIX/GoshDarnBugs](https://github.com/SwiftUIX/GoshDarnBugs) - A collection of bugs present in the SwiftUI beta.
* [luoxiu/CombineX](https://github.com/luoxiu/CombineX) - CombineX is an open source implementation for Apple's Combine specs.
* [alexejn/TypeYouCard](https://github.com/alexejn/TypeYouCard) - SwiftUI Paycard form
* [nalexn/clean-architecture-swiftui](https://github.com/nalexn/clean-architecture-swiftui) - Clean Architecture for SwiftUI demo app
* [nalexn/ViewInspector](https://github.com/nalexn/ViewInspector) - Runtime inspection and unit testing of SwiftUI views
* [muukii/Verge](https://github.com/muukii/Verge) - iOS + Flux - Verge is a state management tools (Store, ViewModel, ORM, Reactive) on iOS App (UIKit / SwiftUI)
* [apptekstudios/ASCollectionView](https://github.com/apptekstudios/ASCollectionView) - A SwiftUI collection view
* [siteline/SwiftUI-Introspect](https://github.com/siteline/SwiftUI-Introspect) - Introspect underlying UIKit components from SwiftUI
* [dmytro-anokhin/url-image](https://github.com/dmytro-anokhin/url-image) - Asynchronous image loading in SwiftUI
* [hbmartin/Directory-SwiftUI](https://github.com/hbmartin/Directory-SwiftUI) - A card interface contacts app built on Core Data and Alamofire
* [onurhuseyincantay/Hover](https://github.com/onurhuseyincantay/Hover) - Hover an async combine supported network library
* [joehinkle11/Lazy-Pop-SwiftUI](https://github.com/joehinkle11/Lazy-Pop-SwiftUI) Modifier that allows swiping on any part of the screen to start an interruptible pop animation to the previous view.
* [joehinkle11/Login-with-Apple-Firebase-SwiftUI](https://github.com/joehinkle11/Login-with-Apple-Firebase-SwiftUI) SwiftUI component that handles logging in with Apple into Firebase. Complete tutorial in the README.
* [Cay-Zhang/SwiftSpeech](https://github.com/Cay-Zhang/SwiftSpeech) - A speech recognition framework designed for SwiftUI
* [Zaprogramiacz/GrowingTextView](https://github.com/Zaprogramiacz/GrowingTextView) - Growing text view implementation in SwiftUI
* [mythxn/DesignCode-SwiftUI](https://github.com/mythxn/DesignCode-SwiftUI) - 📱 An app fully written in SwiftUI showcasing beautiful design and animations.
* [carson-katri/reddit-swiftui](https://github.com/carson-katri/reddit-swiftui) - A cross-platform Reddit client built in SwiftUI
* [mecid/swiftui-recipes-app](https://github.com/mecid/swiftui-recipes-app) - Recipes app written in SwiftUI using Single State Container
* [sgr-ksmt/FireTodo](https://github.com/sgr-ksmt/FireTodo) - Simple Todo Application using SwiftUI / Firebase / Redux.
* [caiobzen/water-reminder-swiftui](https://github.com/caiobzen/water-reminder-swiftui) - A simple Apple Watch app to remind you to drink water!
* [simonboots/SwiftUIFourierSeries](https://github.com/simonboots/SwiftUIFourierSeries) - A Fourier Series visualisation written in Swift/SwiftUI
* [sindresorhus/Defaults](https://github.com/sindresorhus/Defaults#swiftui-support) - `@State` replacement for UserDefaults.
* [sindresorhus/Preferences](https://github.com/sindresorhus/Preferences#swiftui-support) - Create a good-looking preferences window for your macOS app in SwiftUI.
* [sindresorhus/KeyboardShortcuts](https://github.com/sindresorhus/KeyboardShortcuts) - User-customizable global keyboard shortcuts for your macOS app.
* [quassummanus/SVG-to-SwiftUI](https://github.com/quassummanus/SVG-to-SwiftUI) - SVG to SwiftUI Shape converter tool.
* [lorenzofiamingo/SharedObject](https://github.com/lorenzofiamingo/SwiftUI-SharedObject) - 🍱 A new property wrapper for SwiftUI `ObservableObject`.
* [stleamist/BetterSafariView](https://github.com/stleamist/BetterSafariView) - A better way to present a `SFSafariViewController` or start a `ASWebAuthenticationSession` in SwiftUI.
* [huybuidac/SwiftUIFontIcon](https://github.com/huybuidac/SwiftUIFontIcon) - Font icon for SwiftUI (Material icon, Ionicons, Font Awesome 5 Free)
* [SimformSolutionsPvtLtd/SSToastMessage](https://github.com/SimformSolutionsPvtLtd/SSToastMessage) - 📱 An library writtern in purly in SwiftUI to show `toast, alert or floating message` with using modifier.
* [Zaprogramiacz/MGFlipView](https://github.com/Zaprogramiacz/MGFlipView) - MGFlipView allows to create flipping view in easy way without worrying about flipping animation and flipping logic.
* [VerticalTabView](https://github.com/lorenzofiamingo/SwiftUI-VerticalTabView) - 🔝 A native way to display paged vertical content in SwiftUI, using `TabView`.
* [SwiftUIKit](https://github.com/youjinp/SwiftUIKit) - A collection of missing SwiftUI components
* [huseyinbagana/TransactionAlert](https://github.com/huseyinbagana/TransactionAlert) - Simple SwiftUI Alert
* [philipturner/ar-multipendulum](https://github.com/philipturner/ar-multipendulum) - AR app using SwiftUI for touchscreen interface
* [philipturner/ARHeadsetKit](https://github.com/philipturner/ARHeadsetKit) - High-level AR framework for replicating Hololens, using SwiftUI instead of Storyboard
* [exyte/Grid](https://github.com/exyte/Grid) - Grid view inspired by CSS Grid and written with SwiftUI
* [lorenzofiamingo/CachedAsyncImage](https://github.com/lorenzofiamingo/SwiftUI-CachedAsyncImage) - 🗃️ The simplest way to add cache to your AsyncImage.
* [vinhnx/Clendar](https://github.com/vinhnx/Clendar) - Clendar - universal calendar app. Written in SwiftUI. Available on App Store. MIT License. 
* [zzanehip/The-OldOS-Project](https://github.com/zzanehip/The-OldOS-Project) - Recreating a fully functional version of iOS 4 in SwiftUI.
* [soundcloud/Axt](https://github.com/soundcloud/Axt) - SwiftUI view testing library
* [siteline/SwiftUI-Introspect](https://github.com/siteline/SwiftUI-Introspect) - Introspect underlying UIKit components from SwiftUI
* [joogps/SlideOverCard](https://github.com/joogps/SlideOverCard) - A SwiftUI card view, made great for setup interactions.
* [TokamakUI/Tokamak](https://github.com/TokamakUI/Tokamak) - SwiftUI-compatible framework for building browser apps with WebAssembly and native apps for other platforms
* [markiv/SwiftUI-Shimmer](https://github.com/markiv/SwiftUI-Shimmer) - Shimmer is a super-light modifier that adds a shimmering effect to any SwiftUI View, for example, to show that an operation is in progress. It works well on light and dark modes, and across iOS, macOS, tvOS and watchOS.

## Videos
* [Format phone numbers in SwiftUI](https://www.youtube.com/watch?v=4SnmiWFvolM&ab_channel=WhatisiSwiftUI%3F) - What is iSwiftUI

","A curated list of awesome SwiftUI tutorials, libraries, sessions and articles.
Found a SwiftUI library or snippet that you think is *awesome*? Fork this
repository and send your pull request. The Apple Developer Program is required
to contribute to this repository."
2213,A curated list of awesome embedded programming.,"# Awesome-Embedded

A curated list of awesome embedded resource.

Table of content

- [Awesome-Embedded](#awesome-embedded)
  - [Interview](#interview)
  - [Embedded Software Skill](#embedded-software-skill)
  - [Common](#common)
  - [MCU programming](#mcu-programming)
    - [Bare-metal programming (Don't need MCU)](#bare-metal-programming-dont-need-mcu)
    - [MSP430](#msp430)
    - [TM4C123](#tm4c123)
    - [MSP432](#msp432)
    - [STM32](#stm32)
    - [STM32F7](#stm32f7)
    - [STM8](#stm8)
    - [ESP8266](#esp8266)
  - [Raspberry](#raspberry)
  - [Beaglebone](#beaglebone)
  - [Linux Kernel and device driver development](#linux-kernel-and-device-driver-development)
  - [Assembly](#assembly)
  - [RTOS](#rtos)
  - [Automotive](#automotive)
  - [OS](#os)
  - [WindowCE](#windowce)
  - [Compiler](#compiler)
  - [Bootloader](#bootloader)
  - [Makefile](#makefile)
  - [Peripheral](#peripheral)
    - [Memory Protection Unit](#memory-protection-unit)
    - [USB](#usb)
  - [Others](#others)
  - [Embedded GUI Development](#embedded-gui-development)
  - [Machine Learning & AI on MCU](#machine-learning--ai-on-mcu)
  - [Utilities](#utilities)
  - [Tips & tricks](#tips--tricks)
- [Tech blogs](#tech-blogs)
  - [FAQ_Embedded](#faqembedded)
  - [Looking for more lists like this?](#looking-for-more-lists-like-this)
  - [BOOKs](#books)

## Interview

* [Questions which are frequently asked in an interview.](https://github.com/Embedded-Systems-Guide/interview-questions)
> On the way to be a full-stack embedded software engineer.

* [coding-interview-university](https://github.com/nhivp/coding-interview-university) - A complete computer science study plan to become a software engineer.

## Embedded Software Skill

* [Skills/Knowledge required to become a champion Embedded Software Developer.](https://github.com/Embedded-Systems-Guide/embedded-software-skills)
* [How to be low-level programmer](https://github.com/gurugio/lowlevelprogramming-university)
* [Programmer Competency Matrix](http://sijinjoseph.com/programmer-competency-matrix/)

## Common

* [Integer size in C on 32-bit and 64-bit system](https://usrmisc.wordpress.com/2012/12/27/integer-sizes-in-c-on-32-bit-and-64-bit-linux/)
* [TeraTerm - TTL command reference](http://ttssh2.osdn.jp/manual/en/macro/command/index.html)
* [TeraTerm Scripts](http://processors.wiki.ti.com/index.php/Teraterm_Scripts)
* [Linker Command File Primer](http://processors.wiki.ti.com/index.php/Linker_Command_File_Primer)
* [The C build process](https://blog.feabhas.com/2012/06/the-c-build-process/)
* [Building Bare-Metal ARM Systems with GNU](https://www.embedded.com/design/mcus-processors-and-socs/4026111/Building-Bare-Metal-ARM-Systems-with-GNU-Part-9)
* [ELF – Executable and Linkable Format](https://2wisebit.wordpress.com/2018/06/08/elf-executable-and-linkable-format/)
* [Toolchains](https://web.eecs.umich.edu/~prabal/teaching/resources/eecs373/toolchain-notes.pdf)
* [What is an application binary interface (ABI)?](https://stackoverflow.com/questions/2171177/what-is-an-application-binary-interface-abi)
* [ARM Cortex M4 Blink Example (Linker Script)](http://robotics.mcmanis.com/src/arm-blink/linker-script.html)
* [A Sample Linker Script](http://hertaville.com/a-sample-linker-script.html)
* [Linking and Loading](http://www.iecc.com/linker/linker01.html)
* [Embedded Software _ Getting started](http://www2.thu.edu.tw/~emtools/DOE_project/NCCU/embedded%20system/ESD_06_GettingStarted.pdf)
* [How to convert from an armlink scatter file to a GNU ld linker script](https://www.mayrhofer.eu.org/node/24)
* [Using the GNU Linker](https://www.math.utah.edu/docs/info/ld_3.html)

## MCU programming

### Bare-metal programming (Don't need MCU)

* [Simplest bare metal program for ARM](https://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/) ([table of content](https://balau82.wordpress.com/arm-emulation/))

### MSP430

* [MSP430-GCC](http://www.simplyembedded.org/tutorials/setting-up-a-virtual-machine/)
* [CS4101: Introduction to Embedded Systems](http://www.cs.nthu.edu.tw/~king/courses/cs4101/2016/cs4101.html) -  The course is designed around labs, using TI MSP430 LaunchPad and Arduino Uno to discuss concepts such as basic I/O, timing and clocking, interupt handling, serial communication, embedded operating systems, synchronization, etc.
* [msp430-template](https://github.com/uctools/msp430-template) - A template for MSP430 firmware.
* [MSP430 reference](https://students.cs.byu.edu/~clement/cs224/references/my_references.php)

### TM4C123

* [EmbeddedSystems.Playground](https://github.com/glennlopez/EmbeddedSystems.Playground/wiki/Periodic-SysTick-Interrupts)
* [Macros in TivaWare](https://sites.google.com/site/luiselectronicprojects/tutorials/tiva-tutorials/direct-register-access-notes/macros-in-tivaware)
* [Analog to Digital Conversion, Data Acquisition and Control](http://users.ece.utexas.edu/~valvano/Volume1/E-Book/C14_ADCdataAcquisition.htm)
* [Embedded Systems - Shape The World](http://users.ece.utexas.edu/~valvano/Volume1/E-Book/)
* [HowTo: Develop on the TI Tiva LaunchPad using Linux](http://chrisrm.com/howto-develop-on-the-ti-tiva-launchpad-using-linux/)
* [Linux command line build system to generate binaries for TM4C123 (ARM Cortex M4)](https://github.com/pitankar/TM4C)
* [The complete tutorial for Stellaris LaunchPad development with GNU/Linux (I)](http://kernelhacks.blogspot.com/2012/11/the-complete-tutorial-for-stellaris.html)
* [Getting Started with the TI Stellaris LaunchPad on Linux](https://www.jann.cc/2012/12/11/getting_started_with_the_ti_stellaris_launchpad_on_linux.html)
* [Embedded Systems with TM4C123 @Valvano](http://users.ece.utexas.edu/~valvano/arm/)
* [Create FreeRTOS Demo Project using the GCC Compiler](http://shukra.cedt.iisc.ernet.in/edwiki/EmSys:Create_freertos_on_tm4c123_CCS_Project)
* [Serial bootloader on TM4C12x Microcontroller](http://www.ti.com/lit/an/spma074a/spma074a.pdf)
* [Tivaware bootloader](http://www.ti.com/lit/ug/spmu301d/spmu301d.pdf)
* [Diagnosing Common Development Problems and Tips & Info for TM4C Devices](http://e2e.ti.com/support/microcontrollers/tiva_arm/f/908/t/374640)
* [FreeRTOS-GCC-tm4c123glx](https://github.com/nhivp/FreeRTOS-GCC-tm4c123glx) - A port of FreeRTOS to the Texas Instruments Tiva TM4C123GLX Launchpad.
* [Stellaris_TM4C123G_GCC_Template](https://github.com/AndoniV/Stellaris_TM4C123G_GCC_Template) - Texas Instruments template project for the TM4C123 series using GNU toolchain.
* [tm4c-gcc](https://github.com/martinjaros/tm4c-gcc) - TM4C123 GCC project template.
* [tivaapps](https://github.com/alexeicolin/tivaapps) - Example hello-world apps for Texas Instruments TI-RTOS for Tiva C using a Linux host
* [Drivers and examples](https://github.com/Mohammed-AhmedAF/ARM/tree/master/tiva-c) - Drivers for internal peripherals and external modules for Tiva C, examples of FreeRTOS features under development/FreeRTOS

### MSP432

* [Real-Time Bluetooth Networks - UTAustinX](https://github.com/monpeco/real_time_bn) - Learn the design fundamentals of a real-time operating system (RTOS) and how to build a Bluetooth network in this hands-on project-based course.

### STM32

* [STM32 bootloader](http://ciesie.com/post/stm32_bootloader/)
* [Tests to program STM32 Nucleo in C with GCC ARM embedded toolchain and libopencm3](https://github.com/balau/nucleo_tests)
* [A demo project of FreeRTOS running on a STM32F4 Discovery board.](https://github.com/wangyeee/STM32F4-FreeRTOS)
* [DFU Bootloader for STM32 chips](https://github.com/devanlai/dapboot)
* [Customizable Bootloader for STM32 microcontrollers.](https://github.com/akospasztor/stm32-bootloader)
* [Lightweight USB device Stack for STM32 microcontrollers](https://github.com/dmitrystu/libusb_stm32)
* [STM32 programming with Embedded GNU Compiler](https://github.com/rowol/stm32_discovery_arm_gcc)
* [A tiny portable 3D graphics lib for micro controllers (Oled display)](https://github.com/avem-labs/ol3d)
* [Getting started with the STM32F4-Discovery board using the EmBitz IDE](https://github.com/RoanFourie/STM32F4-DISCO-EMBITZ-Blinky)
* [libopencm3 and FreeRTOS projects using the STM32F103C8T6 MCU](https://github.com/ve3wwg/stm32f103c8t6)
* [A template for builting STM23F0 ARM projects with GCC](https://github.com/szczys/stm32f0-discovery-basic-template)
* [Open source flash program for STM32 using the ST serial bootloader](https://sourceforge.net/projects/stm32flash/)
* [stm32-hid-bootloader](https://github.com/bootsector/stm32-hid-bootloader) - Driverless USB HID bootloader and flashing tool for STM32F10X devices
* [stm32l1xx-template](https://github.com/uctools/stm32l1xx-template) - A template for building firmware for the STM32L1xx.
* [STM32F103C8 Examples](https://github.com/avislab/STM32F103)
* [stm32f103](https://github.com/trebisky/stm32f103) - Bare metal programming on a generic STM32F103c8 board
* [stm32_samples](https://github.com/dwelch67/stm32_samples)
* [stm32f4de example code](https://github.com/dwelch67/stm32f4d)
* [stm32f4xx with Rust at the HAL](https://apollolabsblog.hashnode.dev/series/stm32f4-embedded-rust-hal) - A series of tutorials for building STM32F4xx applications with Rust.

### STM32F7
* [STM32F7 Series](https://www.st.com/en/microcontrollers/stm32f7-series.html?querycriteria=productId=SS1858)
* [STM32 eLinux](https://elinux.org/STM32)
* [STM32F7 os.mbed](https://os.mbed.com/platforms/ST-Discovery-F746NG/)

### STM8

* [stm8-bare-min](https://github.com/lujji/stm8-bare-min) - Tiny peripheral library for STM8S
* [stm8-bootloader](https://github.com/lujji/stm8-bootloader) - Serial bootloader for STM8S microcontrollers
* [stm8-multi-tasker](https://github.com/vsch/stm8-multi-tasker) - STM8-Multi-Tasker - Preemptive/Cooperative Round Robin Scheduler for STM8
* [Wolk STM8 stuff ](https://github.com/LonelyWolf/stm8)
* [STM8S001J3_tiny_board](https://github.com/HexRx/STM8S001J3_tiny_board) - A tiny dev board for STM8S001J3 MCU designed in KiCad.

### ESP8266

* [An open source bootloader for the ESP8266](https://github.com/raburton/rboot)
* [An esp8266 rom creation tool](https://github.com/raburton/esptool2)
* [Wi-FI ESP8266 learning journey](https://github.com/xuhongv/StudyInEsp8266)
* [Wi-FI ESP32 learning journey](https://github.com/xuhongv/StudyInEsp32)
* [Sming - ESP8266/ESP32 IoT Framework](https://github.com/SmingHub/Sming)


## Raspberry

* [Raspberry Pi Bare Metal](https://github.com/fordp2002/ArmCopro/wiki/Raspberry-Pi-Bare-Metal) & [related link](https://microeletroniki.wordpress.com/)
* [ChibiOS/RT on the Raspberry Pi](https://www.stevebate.net/chibios-rpi/GettingStarted.html)
* [Raspberry Pi ARM based bare metal examples](https://github.com/dwelch67/raspberrypi)
* [Bare metal Raspberry Pi 3 tutorials](https://github.com/bztsrc/raspi3-tutorial)
* [Open Projects: Raspberry, Beaglebone BSP](https://devel.rtems.org/wiki/Developer/OpenProjects)
* [A Real-Time Operating System on the Raspberry Pi](http://www.pebblebay.com/raspberry-pi-embedded/)
* [A port of FreeRTOS to the raspberry pi](https://github.com/jameswalmsley/RaspberryPi-FreeRTOS)
* [FreeRTOS Sucessfully Ported](https://www.raspberrypi.org/forums/viewtopic.php?f=72&t=22423)
* [Exploring AArch64 assembler - Raspberry](https://thinkingeek.com/2016/10/08/exploring-aarch64-assembler-chapter1/)
* [A bootloader for the Raspberry Pi using the ethernet device](https://github.com/Nvreformat/Etherboot)
* [Bare Metal Raspberry Pi](https://taylorpetrick.com/blog/post/bare-metal-pi-setup)
* [Bare Metal Programming in C](http://www.valvers.com/open-software/raspberry-pi/step01-bare-metal-programming-in-cpt1/)
* [Baking Pi – Operating Systems Development](https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/)
* [Search for 'Raspberry' topic on Github](https://github.com/topics/raspberry-pi-3?l=c)
* [elinux: Raspberry Pi Programming](https://elinux.org/Raspberry_Pi_Programming) or [elinux: RPi Hub](https://elinux.org/RPi_Hub)
* [Stanford CS104e - An Experimental Course on Operating Systems](https://web.stanford.edu/class/cs140e/)
* [Computer Systems](http://cs107e.github.io/)
* [Build a Debian-based ARM64 system for Raspberry Pi 3](https://github.com/UMRnInside/RPi-arm64)
* [Learning operating system development using Linux kernel and Raspberry Pi](https://github.com/s-matyukevich/raspberry-pi-os)
* [A port of FreeRTOS to the raspberry pi 2B. With USB+Ethernet+TCP/IP.](https://github.com/Forty-Tw0/RaspberryPi-FreeRTOS)
* [64-bit Tiano Core UEFI for the Raspberry Pi 3](https://github.com/andreiw/RaspberryPiPkg)
* [CXCORE-RaspberryPi3-ubuntu-18.04-aarch64](https://github.com/chainsx/ubuntu64-rpi#cxcore-raspberrypi3-ubuntu-1804-aarch64--)
* [Sample source: Baremetal source code for Raspberry](https://github.com/LdB-ECM/Raspberry-Pi)
* [Sample source: NarcOS - A bare metal ultralight kernel for Raspberry Pi 3](https://github.com/forkachild/NarcOS)
* [Sample source: FreeRTOS v9.0.0 port for Raspberry Pi 1](https://github.com/leodido99/RaspberryPi1-FreeRTOSv9.0.0)
* [Sample source: A bare-metal experiments with the RaspberryPi](https://github.com/majorviraj/my-os)
* [「BareMetalで遊ぶ Raspberry Pi」のプログラムです。](https://github.com/jitomesky/RPi_Micon_C85book)
* [UEFI for RaspberryPi2 and RaspberryPi3 based on Linaro EDK2](https://github.com/ms-iot/RPi-UEFI)
* [ARM-episodes](https://github.com/invictus1306/ARM-episodes) & [ARM exploitation for IoT](https://quequero.org/2017/07/arm-exploitation-iot-episode-1/)
* [ARM shellcode and exploit development - BSidesMunich 2018](https://github.com/invictus1306/Workshop-BSidesMunich2018)
* [64 bit Bare Metal Programming on RPI-3](https://archive.fosdem.org/2017/schedule/event/programming_rpi3/attachments/slides/1475/export/events/attachments/programming_rpi3/slides/1475/bare_metal_rpi3.pdf)
* [Raspberry Pi 3 Bare Metal](https://adamransom.github.io/posts/raspberry-pi-bare-metal-part-1.html)
* [Assembly code for Raspberry Pi](https://github.com/Alkesst/RPIAssembly)
* [A public Baremetal Raspberry Pi code](https://github.com/LdB-ECM/Raspberry-Pi)
* [Raspberry-Pi Bare Metal Tutorial](https://github.com/BrianSidebotham/arm-tutorial-rpi)
* [uCOS-II on Raspberry Pi](https://github.com/fmlab/ucos_RaspberryPi)
* [Porting uCOSII to the raspberry pi A+/B+/2B](https://github.com/mopplayer/uCOSII_RPi)
* [Bare-metal examples](https://github.com/mrvn/RaspberryPi-baremetal)
* [Bare-metal lab](https://github.com/tzuCarlos/RaspberryPi)
* [Exploring Raspberry Pi: Interfacing to the Real World with Embedded Linux {book}](https://www.wiley.com/en-us/Exploring+Raspberry+Pi%3A+Interfacing+to+the+Real+World+with+Embedded+Linux-p-9781119188681)
* [Exploring Raspberry Pi: Interfacing to the Real World with Embedded Linux {website}](http://exploringrpi.com/)

## Beaglebone

* [BeagleBone Black I2C References](https://datko.net/2013/11/03/bbb_i2c/)
* [Learning BeagleBone Python Programming](https://hub.packtpub.com/learning-beaglebone-python-programming/)
* [Simple implementation of an OS for the BeagleBoard C4 with ARMv7 A8 processor.](https://github.com/Oxydation/MinionOS)
* [Various projects that utilize low level hardware instructions to interface with leds, speaker output and joystick input.](https://github.com/travelln/beaglebone-projects)
* [Windows Embedded Compact BSP for TI's Beaglebone](https://github.com/dvescovi1/WECBeagleBone)
* [BBB-BareMetal](https://github.com/allexoll/BBB-BareMetal)- Works on the beaglebone black (bare metal)
* [Running a Baremetal Beaglebone Black](https://www.twosixlabs.com/running-a-baremetal-beaglebone-black-part-1/) & [Part 2](https://www.twosixlabs.com/running-a-baremetal-beaglebone-black-part-2/)
* [Bare Metal on the BeagleBone (Black and Green)](https://www.cs.sfu.ca/CourseCentral/433/bfraser/other/BareMetalGuide.pdf) & [link1](https://www.cs.sfu.ca/CourseCentral/433/bfraser/other/) + [Link2](https://www.cs.sfu.ca/CourseCentral/433/bfraser/weekly.html)
* [A tutorial on bare-metal [OS] development on the Texas Instruments BeagleBoard.](https://wiki.osdev.org/ARM_Beagleboard)
* [bare metal c project for beaglebone, ti sitara am335x](https://github.com/0xCA5A/kickstart/tree/master/beaglebone/bare_metal_hello_world)
* [Bare Metal Applications on OSD335x using U-Boot](https://octavosystems.com/app_notes/bare-metal-on-osd335x-using-u-boot/#_Toc382081430)
* [bbb-asm-demo](https://github.com/mvduin/bbb-asm-demo) - Extremely tiny baremetal application for BeagleBone Black
* [Beaglebone - Getting started with JTAG and CCS](https://beagleboard.org/static/beaglebone/latest/Docs/ccs-jtag-simple.htm)
* [BeagleBoardJTAG](https://elinux.org/BeagleBoardJTAG)
* [beaglebone_samples](https://github.com/dwelch67/beaglebone_samples)
* [FreeRTOS for BeagleBone Black](https://github.com/henfos/BBBFreeRTOS)

## Linux kernel and device driver development

* [Linux inside](https://github.com/0xAX/linux-insides) - A little bit about a linux kernel
* [Writing device drivers in Linux](http://freesoftwaremagazine.com/articles/drivers_linux/)
* [YOLINUX Tutorials](http://www.yolinux.com/TUTORIALS/)
* [Linux driver programming](https://sites.google.com/site/embedded247/ddcourse)
* [Free training materials and conference presentations](https://bootlin.com/docs/)
* [eBook: Linux Drivers](https://sysplay.github.io/books/LinuxDrivers/book/index.html) or [Slides: Linux Drivers](https://sysplay.in/index.php?pagefile=linux_drivers)
* [c-periphery](https://github.com/vsergeev/c-periphery) - A C library for peripheral I/O (GPIO, SPI, I2C, MMIO, Serial) in Linux.
* [OpenEmbedded](http://www.openembedded.org/wiki/Main_Page),
* [Linux driver practices ](https://github.com/starnight/DriverPractice)
* [Linux Kernel Exploitation](https://github.com/xairy/linux-kernel-exploitation) - A bunch of links related to Linux kernel exploitation
* [Linux Kernel Module Cheat](https://github.com/cirosantilli/linux-kernel-module-cheat)
* [Start linux kernel module development!](https://rayanfam.com/topics/start-linux-kernel-module-development/)
* [Minimal Linux Live](https://github.com/ivandavidov/minimal) - a tiny educational Linux distribution
* [low-level programming university #linux-kernel-and-device-driver](https://github.com/gurugio/lowlevelprogramming-university#linux-kernel-and-device-driver)

## Assembly

* [GCC-Inline-Assembly-HOWTO](https://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html)
* [Assembly programming](https://courses.cs.washington.edu/courses/cse351/17sp/lectures/CSE351-L07-asm-I_17sp-ink.pdf)

## RTOS

* [List of open source real-time operating systems](https://www.osrtos.com/)
* [ROS](http://www.ros.org/)
* [FreeRTOS](https://freertos.org/)
* [FreeRTOS - Explaination](http://www.aosabook.org/en/freertos.html)
* [FreeRTOS API Reference Documentation](http://web.ist.utl.pt/~ist11993/FRTOS-API/index.html)
* [How to Write a Small RTOS](https://larrylisky.com/2012/07/14/how-to-create-a-small-rtos/)
* [RTOS From Scrach](https://github.com/RTOS-From-Scratch)
* [mini-arm-os & qemu with a stm32](https://github.com/embedded2015/mini-arm-os) or [here](https://github.com/jserv/mini-arm-os) - Build a minimal multi-tasking OS kernel for ARM Cortex-M series from scratch
* [Writing a simple operating system from scratch](https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf)
* [Free real-time operating system (RTOS) designed for deeply embedded applications](https://github.com/stateos/StateOS)
* [MPSoC FreeRTOS Development](http://www.wiki.xilinx.com/MPSoC+FreeRTOS+Development)
* [Atomthreads: Open Source RTOS](https://atomthreads.com/)
* [High performance motor control](https://github.com/madcowswe/ODrive)
* [MINIX3: Open source RTOS](http://www.minix3.org/)
* [30 Days make OS](https://github.com/yourtion/30dayMakeOS) --> [YOS](https://github.com/yourtion/YOS) @[Yannik](https://yannik520.github.io/)
* Community: [OSDEV.org](https://wiki.osdev.org/Main_Page), [reddit/osdev](https://www.reddit.com/r/osdev/)
* [Real-time System Group](https://www.cs.york.ac.uk/rts/)
* [object-oriented C++ RTOS for microcontrollers](https://github.com/DISTORTEC/distortos)
* [RT-Thread is an open source IoT operating system from China.](https://github.com/RT-Thread/rt-thread)
* [How to create an OS from scratch](https://github.com/cfenollosa/os-tutorial)
* [Sample Source: TetrOS is a small feature rich Tetris clone which is written in Assembly.](https://github.com/daniel-e/tetros)
* [Sample Source: RTOS for microcontrollers](https://github.com/jimtremblay/nOS)
* [Sample Source: A Powerful embedded RTOS for ARM Cortex M microcontrollers](https://github.com/StratifyLabs/StratifyOS)
* [Sample Source: An embedded operating system for ARM Cortex-M based microcontrollers](https://github.com/onkwon/yaos)
* [Sample Source: rnk is a RTOS targeting ARM architecture.](https://github.com/raphui/rnk)
* [Sample Source: RTOS-From-Scratch](https://github.com/RTOS-From-Scratch/RTOS-From-Scratch)
* [Sample Source: Embeded OS for PIC32MX270F256B](https://github.com/envzhu/kozos-pic)
* [How I ended up writing a new real-time kernel](https://dmitryfrank.com/articles/how_i_ended_up_writing_my_own_kernel)
* [Sample Source: TNeo - a well-formed and carefully tested preemptive real-time kernel for 16- and 32-bits MCUs](https://github.com/dimonomid/tneo)
* [yaos is an embedded operating system for Internet of Things(IoT) devices, specifically for a single-core processor without MMU virtualization.](https://github.com/onkwon/yaos)
* [RT-Thread for Raspberry Pi 2B ](https://github.com/BernardXiong/raspi2)
* [tock](https://github.com/tock/tock) - A secure embedded operating system for Cortex-M based microcontrollers.
* [AliOS-Things](https://github.com/alibaba/AliOS-Things) - AliOS Things released by Alibaba is an open-source implementation of operating system (OS) for Internet of Things (IoT).
* [CoRTOS](https://forum.43oh.com/topic/13151-cortos-an-open-source-minimalist-rtos/) & [CoRTOS Simple Cooperative RTOS](https://sourceforge.net/projects/cortos-simple/) - An open source minimalist RTOS.
* [µOS++ Reference](http://micro-os-plus.github.io/develop/references/)
* [TNKernel](http://www.tnkernel.com/index.html) - a compact and very fast real-time kernel for the embedded 32/16/8 bits microprocessors.
* [Femto OS](http://www.femtoos.org/news.html) - a very concise portable real time - preemptive operating system (RTOS) for embedded microcontrollers with minimal ram and flash, say 2KB .. 16KB flash and 128 .. 1024 bytes ram.

## Automotive

* [Sample Source: Trampoline is a static RTOS for small embedded systems.](https://github.com/TrampolineRTOS/trampoline) & [labs](http://www.irccyn.ec-nantes.fr/~bechenne/trampoline-labs/)
* [Sample source: An integration an example AUTOSAR project which every part in AUTOSAR (OS, RTE, BSW, MCAL) are collected from different open source.](https://github.com/leduynguyen/My_AUTOSAR_Project)
* [automotive software(OSEK & AUTOSAR) ](https://github.com/parai/as) - Because I am not powerful so I decided to develop tiny but smart part of automotive software based on open source, and create a general AUTOSAR & Automotive Software study environment.

## OS

* [ucLinux](http://www.uclinux.org/): The Embedded Linux/Microcontroller project is a port of Linux to systems without a Memory Management Unit (MMU).
* [Tizen](https://www.elinux.org/Tizen)
* [Bootstrap yourself to write an OS from scratch. A book for self-learner.](https://github.com/tuhdo/os01)
* [Kernel 101 – Let’s write a Kernel](https://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel)
* [The little book about OS development](https://littleosbook.github.io/)
* [TetrOS](https://github.com/daniel-e/tetros) - Tetris that fits into the boot sector.
* [Writing a Simple Operating System from Scratch](https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf)
* [JamesM's kernel development tutorials](http://www.jamesmolloy.co.uk/tutorial_html/)
* [Bare Bones](https://wiki.osdev.org/Bare_Bones) - a simple kernel for 32-bit x86 and boot it.
* [Operating System Development Series](http://www.brokenthorn.com/Resources/OSDevIndex.html)
* [7 Steps to Writing a Simple Cooperative Scheduler](https://www.edn.com/7-steps-to-writing-a-simple-cooperative-scheduler/)
* [A simple OS kernel for research, teaching, and fun](https://github.com/dthain/basekernel)
* [Operating Systems C Term 2018](https://github.com/Mcdonoughd/CS3013)

## WindowCE

* [GuruCE Blog](https://guruce.com/blog)
* [Windows CE Base Team Blog](https://blogs.msdn.microsoft.com/ce_base/)
* [DevWinCE blog](http://devwince.blogspot.com/)
* [Windows Embedded Compact BSP for Raspberry Pi](https://archive.codeplex.com/?p=ceonpi)
* [Windows Embedded Board Support Package for BeagleBone](https://archive.codeplex.com/?p=beaglebonebsp)

## Compiler

* [ARM Compiler - armasm User Guide](https://static.docs.arm.com/dui0801/i/DUI0801I_armasm_user_guide.pdf)

## Bootloader

* [Writing a boot loader in Assembly and C](https://www.codeproject.com/Articles/664165/Writing-a-boot-loader-in-Assembly-and-C-Part)
* [Writing a Bootloader Part 3](http://3zanders.co.uk/2017/10/18/writing-a-bootloader3/)
* [A bootloader for ARM Cortex-M based microcontrollers](https://github.com/onkwon/yaboot)
* [ARMv7M ELF loader ](https://github.com/martinribelotta/elfloader)
* [Writing a Bootloader Part 1](http://3zanders.co.uk/2017/10/13/writing-a-bootloader/)
* [can-bootloader](https://github.com/cvra/can-bootloader) - The bootloader used to flash our CAN-connected boards
* [Bootloaders 101](https://www.embedded.com/design/prototyping-and-development/4410233/1/Bootloaders-101--making-your-embedded-design-future-proof)
* Understand boot process: [link1](https://www.beningo.com/understanding-the-microcontroller-boot-process/), [link2](https://www.beningo.com/understanding-the-microcontroller-boot-process/), [link3](https://www.eevblog.com/forum/microcontrollers/copy-data-from-rom-to-ram-and-execute/)
* Keywords: *hello world bootloader*, *writing a bootloader from scratch*, *how to write a bootloader in assembly*, ...

## Makefile

* [Managing projects with GNU Make](http://uploads.mitechie.com/books/Managing_Projects_with_GNU_Make_Third_Edition.pdf)
* [GCC and Make](https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html)

## Peripheral

### Memory Protection Unit

* [Building Hardware Components for Memory Protection of Applications on a Tiny Processor](https://carrv.github.io/2017/papers/oh-mpu-carrv2017.pdf)
* [KeyStone Architecture: Memory Protection Unit (MPU)](http://www.ti.com/lit/ug/sprugw5a/sprugw5a.pdf)

### USB

* [tinyusb](https://github.com/hathach/tinyusb) - An open source USB stack for a variety of Embedded Systems.

## Others

* [A practical approach to Kalman filter and how to implement it](http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it/)
* [Embedded System programming](http://www.5square.in/): Diving into Syllabus for investigation.
* [ELC 2018 Presentations](https://elinux.org/ELC_2018_Presentations)
* [ARM Edition](https://sparkylinux.org/wiki/doku.php/sparky_arm): Sparky ARM Edition is a Sparky version created for a single board mini computer RaspberryPi.
* [The gem5 Simulator](https://developer.arm.com/research/research-enablement/system-modeling) is a well-known sophisticated simulator used for computer system research at both architecture and micro-architecture levels. Main page is [here](http://gem5.org/Main_Page).
* [LineageOS Android Distribution](https://github.com/LineageOS)
* [The NoCAN platform](http://omzlo.com/articles/the-nocan-platform)
* [Realtime OS on Embedded Systems](http://socialledge.com/sjsu/index.php/Realtime_OS_on_Embedded_Systems)
* [These projects were produced in the five weeks of ECE 4760 each year.](https://people.ece.cornell.edu/land/courses/ece4760/FinalProjects/)
* [Advanced fault backtrace library for ARM Cortex-M series MCU](https://github.com/armink/CmBacktrace)
* [mcu-starter-projects](https://github.com/ataradov/mcu-starter-projects) - Simple starter projects for bare-metal MCU development.
* [DirtyJTAG](https://github.com/jeanthom/DirtyJTAG) - JTAG adapter firmware for STM32F1
* [Generic_MCU_Software_Infrastructure](https://github.com/GorgonMeducer/Generic_MCU_Software_Infrastructure) - Provide necessary software infrastructure, service, macros to support some high level abstruct concept or paradigm, such as OOPC, FSM, delegate (event-driven) and etc.
* [apollo](https://github.com/ApolloAuto/apollo) - An open autonomous driving platform.
* * [A Development Environment for ARM TrustZone with GlobalPlatform Support](https://www.eit.lth.se/sprapport.php?uid=793)

## Embedded GUI Development
* [Embedded Wizard](https://www.embedded-wizard.de/) - Sophisticated GUI for Your Embedded Platform
* [lvgl](https://littlevgl.com) - Graphics library to create an embedded GUI with easy-to-use graphical elements, beautiful visual effects and low memory footprint. It offers anti-aliasing, opacity, and animations using only one frame buffer.

## Machine Learning & AI on MCU
* [nnom](https://github.com/majianjia/nnom) - A higher-level Neural Network library for microcontrollers.
* [nn4mp](https://github.com/correlllab/nn4mp)
* [Embedded Learning Library (ELL)](https://github.com/Microsoft/ELL) - Microsoft's library to deploy intelligent machine-learned models onto resource constrained platforms and small single-board computers.
* [Qualcomm Neural Processing SDK for AI](https://developer.qualcomm.com/software/qualcomm-neural-processing-sdk) - Libraries to developers run NN models on Snapdragon mobile platforms taking advantage of the CPU, GPU and/or DSP.
* [CMSIS NN](https://arm-software.github.io/CMSIS_5/NN/html/index.html) - A collection of efficient neural network kernels developed to maximize the performance and minimize the memory footprint of neural networks on Cortex-M processor cores.
* [ARM Compute Library](https://developer.arm.com/technologies/compute-library) - Set of optimized functions for image processing, computer vision, and machine learning.
* [uTensor](https://github.com/uTensor/uTensor) - AI inference library based on mbed (an RTOS for ARM chipsets) and TensorFlow.
* [EmbededAI](https://github.com/boralt/EmbeddedAI) - A library that provides elements of AI to C++ applications.
* [kann](https://github.com/attractivechaos/kann) - A lightweight C library for artificial neural networks.
* [m2cgen](https://github.com/BayesWitnesses/m2cgen) - A CLI tool which allows to transpile trained classic ML models into a native code of various programming languages with zero dependencies including C.

## Utilities

* [lm4tools](https://github.com/utzig/lm4tools)
* [mspdebug](https://github.com/dlbeer/mspdebug) - Debugging tool for MSP430 MCUs
* [pycs](https://github.com/deadsy/pycs) - Python Based ARM CoreSight Debug and Trace Tools

## Tips & tricks

* [Awesome Cheat Sheets](https://github.com/mintisan/awesome-cheat-sheets/blob/master/README.md)
> Awesome Cheat Sheets for Developer Utility, like Git, Vim , Tmux, SublimeText, Markdown, Shell.

* [Vim Config for Reading Linux Kernel Source Code](https://github.com/mintisan/oh-my-vim)
* [GNU GDB Debugger Command Cheat Sheet](http://www.yolinux.com/TUTORIALS/GDB-Commands.html)

# Tech blogs

* [What a C programmer should know about memory](http://marek.vavrusa.com/memory/)
* [What Every Programmer Should Know About Memory](https://people.freebsd.org/~lstewart/articles/cpumemory.pdf)
* [What Every C Programmer Should Know About Undefined Behavior ](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html) [part 2](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html) [part 3](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html)
* [A Guide to Undefined Behavior in C and C++](https://blog.regehr.org/archives/213)
* [Software Engineering Takeaways](https://blog.regehr.org/archives/1594)
* [Embedsys weekly newsletter](https://embedsysweekly.com/)

## FAQ_Embedded

* [Boot section is removed (gcc, ld, ar, as)](https://www.embeddedrelated.com/showthread/lpc2000/47841-1.php)
* [What are .axf files?](https://stackoverflow.com/questions/17761328/what-are-axf-files)

## Looking for more lists like this?

* [awesome-c](https://github.com/uhub/awesome-c) - A curated list of awesome C frameworks, libraries and software.
* [A curated list of project-based tutorials in C](https://github.com/rby90/Project-Based-Tutorials-in-C)
* [Curated list of project-based tutorials](https://github.com/tuvtran/project-based-learning)
* [Curated list of awesome lists](https://github.com/sindresorhus/awesome)
* [A curated list of awesome Raspberry Pi tools, projects, images and resources](https://github.com/thibmaek/awesome-raspberry-pi)
* [Curated List of Self-Driving Cars and Autonomous Vehicles Resources](https://github.com/takeitallsource/awesome-autonomous-vehicles)
* [awesome-embedded-systems](https://github.com/embedded-boston/awesome-embedded-systems)
* [awesome-cheat-sheets](https://github.com/mintisan/awesome-cheat-sheets) - Awesome Cheat Sheets for Developer Utility, like Git, Vim, Tmux, Sublime Text, Markdown, Shell.
* [awesome-embedded-rust](https://github.com/rust-embedded/awesome-embedded-rust) - Curated list of resources for Embedded and Low-level development in the Rust programming languague.

## BOOKs

* [Mastering the Raspberry Pi](http://web.archive.org/web/20190713103510/http://mensshed-llandudno.co.uk/wp-content/uploads/Mastering%20the%20Raspberry%20Pi.pdf)
* [Modern C](http://web.archive.org/web/20190219172719/http://icube-icps.unistra.fr/img_auth.php/d/db/ModernC.pdf)
","A curated list of awesome embedded resource. A complete computer science study
plan to become a software engineer. Embedded software skills required to be a
champion Embedded Software Developer. The C-build process has been updated to
make it easier to use."
2226,"AWS SDK for Android. For more information, see our web site:","# AWS SDK for Android 

[![DiscordChat](https://img.shields.io/discord/308323056592486420?logo=discord)](https://discord.gg/amplify)
[![GitHub release](https://img.shields.io/github/release/aws-amplify/aws-sdk-android.svg)](https://github.com/aws-amplify/aws-sdk-android/releases)
[![Maven Central](https://img.shields.io/maven-central/v/com.amazonaws/aws-android-sdk-core.svg)](https://search.maven.org/search?q=a:aws-android-sdk-core)

For new projects, we recommend interacting with AWS using the [Amplify Framework](https://docs.amplify.aws/start/q/integration/android).

The AWS SDK for Android is a collection of low-level libraries for direct interaction with AWS backend services. For use cases not covered by the Amplify Framework, you may directly integrate these clients into your Android app.

## Installation

The AWS SDK for Android can be directly embedded via `.aar` files, or you can download it from the Maven Central repository, by integrating it into your Android project's Gradle files.

### From Maven
We recommend obtaining the dependency from Maven. To do so, add a dependency to your app's (module-level) `build.gradle`, in the `dependencies` section:

```groovy
dependencies {
    implementation 'com.amazonaws:aws-android-sdk-SERVICE:2.x.y'
}
```

Above, SERVICE might be `s3`, `ddb`, `pinpoint`, etc. A full list is provided below.

## Available Modules
 
 * apigateway-core
 * auth-core
 * auth-facebook
 * auth-google
 * auth-ui
 * auth-userpools
 * chimesdkidentity
 * chimesdkmessaging
 * cloudwatch
 * cognitoauth
 * cognitoidentityprovider
 * cognitoidentityprovider-asf
 * comprehend
 * connect
 * connectparticipant
 * core
 * ddb
 * ddb-document
 * ddb-mapper
 * ec2
 * iot
 * kinesis
 * kinesisvideo
 * kinesisvideo-archivedmedia
 * kinesisvideo-signaling
 * kms
 * lambda
 * lex
 * location
 * logs
 * machinelearning
 * mobile-client
 * pinpoint
 * polly
 * rekognition
 * s3
 * sagemaker-runtime
 * sdb
 * ses
 * sns
 * sqs
 * testutils
 * textract
 * transcribe
 * translate

## SDK Fundamentals
There are a few fundamentals that are helpful to know when developing against the AWS SDK for Android.

* Never embed credentials in an Android application.  It is trivially easy to decompile applications and steal embedded credentials.  Always use temporarily vended credentials from services such as Amazon Cognito Identity.
* Unless explicitly stated, calls are synchronous and must be taken off of the main thread.
* Unless explicitly stated, calls can always throw an AmazonServiceException or an AmazonClientException (depending on if the exception is generated by the service or the client respectively).
* The SDK will handle re-trying requests automatically, but unless explicitly stated will throw an exception if it cannot contact AWS.
* We are always looking to help, please feel free to open an [issue](https://github.com/aws-amplify/aws-sdk-android/issues).

## Versioning

The Android SDK is versioned like `2.x.y`. `2` is a product identifier that never changes. `x` is bumped when there are breaking changes. `y` is bumped for not-breaking bugfixes, or for the introduction of new features/capabilities.

## Building the SDK
### Pre-requisites
The AWS Core Runtime (`aws-android-sdk-core`) module builds against Android API Level 23. Please download and install Android API Level 23 through SDK Manager in Android Studio, before building the SDK.

Set the `ANDROID_HOME` environment variable, to the root directory of your Android SDK installation.

_For example_, on a Mac OS X where Android Studio has been installed, the SDK comes bundled with it.
```shell
export ANDROID_HOME=""$HOME/Library/Android/sdk""
```

### Build
```shell
./gradlew build
```

### Consuming Development Versions

Once you've built the SDK, you can manually install the SDK
by publishing its artifacts to your local Maven repository.

The local Maven repository is usually found in your home directory at
`~/.m2/repository`.

To publish the outputs of the build, execute the following command from
the root of the `amplify-android` project:

```shell
./gradlew publishToMavenLocal
```

After this, you can use the published development artifacts from an app.
To do so, specify `mavenLocal()` inside the app's top-level
`build.gradle(Project)` file:

```gradle
buildscript {
    repositories {
        mavenLocal() // this should ideally appear before other repositories
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
    }
}

allprojects {
    repositories {
        mavenLocal() // this should ideally appear before other repositories
    }
}
```
Then, find the `VERSION_NAME` of the *library* inside `gradle.properties` file.

Use the above version to specify dependencies in your *app*'s `build.gradle (:app)` file:
```
dependencies {
    implementation 'com.amazonaws:aws-android-sdk-SERVICE:VERSION_NAME'
}
```

## Talk to Us

[Come chat with us on our Discord Channel](https://discord.gg/amplify).

Report bugs to our [GitHub Issues](https://github.com/aws-amplify/aws-sdk-android/issues) page.

## Author

Amazon Web Services

## License

See the [`LICENSE.txt`](https://github.com/aws-amplify/aws-sdk-android/blob/main/LICENSE.txt) for more info.
","The AWS SDK for Android is a collection of low-level libraries for direct
interaction with AWS backend services. For use cases not covered by the Amplify
Framework, you may directly integrate these clients into your Android app. There
are a few fundamentals that are helpful to know when developing against the SDK."
789,"pandas on AWS - Easy integration with Athena, Glue, Redshift, Timestream, Neptune, OpenSearch, QuickSight, Chime, CloudWatchLogs, DynamoDB, EMR, SecretManager, PostgreSQL, MySQL, SQLServer and S3 (Parquet, CSV, JSON and EXCEL).","# AWS SDK for pandas (awswrangler)

AWS Data Wrangler is now **AWS SDK for pandas (awswrangler)**.  We’re changing the name we use when we talk about the library, but everything else will stay the same.  You’ll still be able to install using `pip install awswrangler` and you won’t need to change any of your code.  As part of this change, we’ve moved the library from AWS Labs to the main AWS GitHub organisation but, thanks to the GitHub’s redirect feature, you’ll still be able to access the project by its old URLs until you update your bookmarks.  Our documentation has also moved to [aws-sdk-pandas.readthedocs.io](https://aws-sdk-pandas.readthedocs.io), but old bookmarks will redirect to the new site.

*Pandas on AWS*

Easy integration with Athena, Glue, Redshift, Timestream, OpenSearch, Neptune, QuickSight, Chime, CloudWatchLogs, DynamoDB, EMR, SecretManager, PostgreSQL, MySQL, SQLServer and S3 (Parquet, CSV, JSON and EXCEL).

![AWS SDK for pandas](docs/source/_static/logo2.png?raw=true ""AWS SDK for pandas"")
![tracker](https://d3tiqpr4kkkomd.cloudfront.net/img/pixel.png?asset=GVOYN2BOOQ573LTVIHEW)

> An [AWS Professional Service](https://aws.amazon.com/professional-services/) open source initiative | aws-proserve-opensource@amazon.com

[![Release](https://img.shields.io/badge/release-2.19.0-brightgreen.svg)](https://pypi.org/project/awswrangler/)
[![Python Version](https://img.shields.io/badge/python-3.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-brightgreen.svg)](https://anaconda.org/conda-forge/awswrangler)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)
[![Coverage](https://img.shields.io/badge/coverage-91%25-brightgreen.svg)](https://pypi.org/project/awswrangler/)
![Static Checking](https://github.com/aws/aws-sdk-pandas/workflows/Static%20Checking/badge.svg?branch=main)
[![Documentation Status](https://readthedocs.org/projects/aws-sdk-pandas/badge/?version=latest)](https://aws-sdk-pandas.readthedocs.io/?badge=latest)

| Source | Downloads | Installation Command |
|--------|-----------|----------------------|
| **[PyPi](https://pypi.org/project/awswrangler/)**  | [![PyPI Downloads](https://pepy.tech/badge/awswrangler)](https://pypi.org/project/awswrangler/) | `pip install awswrangler` |
| **[Conda](https://anaconda.org/conda-forge/awswrangler)** | [![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/awswrangler.svg)](https://anaconda.org/conda-forge/awswrangler) | `conda install -c conda-forge awswrangler` |

> ⚠️ **For platforms without PyArrow 3 support (e.g. [EMR](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#emr-cluster), [Glue PySpark Job](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#aws-glue-pyspark-jobs), MWAA):**<br>
➡️ `pip install pyarrow==2 awswrangler`

Powered By [<img src=""https://arrow.apache.org/img/arrow.png"" width=""200"">](https://arrow.apache.org/powered_by/)

## Table of contents

- [Quick Start](#quick-start)
- [Read The Docs](#read-the-docs)
- [Getting Help](#getting-help)
- [Community Resources](#community-resources)
- [Logging](#logging)
- [Who uses AWS SDK for pandas?](#who-uses-aws-sdk-pandas)

## Quick Start

Installation command: `pip install awswrangler`

> ⚠️ **For platforms without PyArrow 3 support (e.g. [EMR](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#emr-cluster), [Glue PySpark Job](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#aws-glue-pyspark-jobs), MWAA):**<br>
➡️`pip install pyarrow==2 awswrangler`

```py3
import awswrangler as wr
import pandas as pd
from datetime import datetime

df = pd.DataFrame({""id"": [1, 2], ""value"": [""foo"", ""boo""]})

# Storing data on Data Lake
wr.s3.to_parquet(
    df=df,
    path=""s3://bucket/dataset/"",
    dataset=True,
    database=""my_db"",
    table=""my_table""
)

# Retrieving the data directly from Amazon S3
df = wr.s3.read_parquet(""s3://bucket/dataset/"", dataset=True)

# Retrieving the data from Amazon Athena
df = wr.athena.read_sql_query(""SELECT * FROM my_table"", database=""my_db"")

# Get a Redshift connection from Glue Catalog and retrieving data from Redshift Spectrum
con = wr.redshift.connect(""my-glue-connection"")
df = wr.redshift.read_sql_query(""SELECT * FROM external_schema.my_table"", con=con)
con.close()

# Amazon Timestream Write
df = pd.DataFrame({
    ""time"": [datetime.now(), datetime.now()],   
    ""my_dimension"": [""foo"", ""boo""],
    ""measure"": [1.0, 1.1],
})
rejected_records = wr.timestream.write(df,
    database=""sampleDB"",
    table=""sampleTable"",
    time_col=""time"",
    measure_col=""measure"",
    dimensions_cols=[""my_dimension""],
)

# Amazon Timestream Query
wr.timestream.query(""""""
SELECT time, measure_value::double, my_dimension
FROM ""sampleDB"".""sampleTable"" ORDER BY time DESC LIMIT 3
"""""")

```

## [Read The Docs](https://aws-sdk-pandas.readthedocs.io/)

- [**What is AWS SDK for pandas?**](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/about.html)
- [**Install**](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html)
  - [PyPi (pip)](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#pypi-pip)
  - [Conda](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#conda)
  - [AWS Lambda Layer](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#aws-lambda-layer)
  - [AWS Glue Python Shell Jobs](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#aws-glue-python-shell-jobs)
  - [AWS Glue PySpark Jobs](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#aws-glue-pyspark-jobs)
  - [Amazon SageMaker Notebook](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#amazon-sagemaker-notebook)
  - [Amazon SageMaker Notebook Lifecycle](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#amazon-sagemaker-notebook-lifecycle)
  - [EMR](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#emr)
  - [From source](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/install.html#from-source)
- [**Tutorials**](https://github.com/aws/aws-sdk-pandas/tree/main/tutorials)
  - [001 - Introduction](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/001%20-%20Introduction.ipynb)
  - [002 - Sessions](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/002%20-%20Sessions.ipynb)
  - [003 - Amazon S3](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/003%20-%20Amazon%20S3.ipynb)
  - [004 - Parquet Datasets](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/004%20-%20Parquet%20Datasets.ipynb)
  - [005 - Glue Catalog](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/005%20-%20Glue%20Catalog.ipynb)
  - [006 - Amazon Athena](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/006%20-%20Amazon%20Athena.ipynb)
  - [007 - Databases (Redshift, MySQL, PostgreSQL, SQL Server and Oracle)](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/007%20-%20Redshift%2C%20MySQL%2C%20PostgreSQL%2C%20SQL%20Server%2C%20Oracle.ipynb)
  - [008 - Redshift - Copy & Unload.ipynb](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/008%20-%20Redshift%20-%20Copy%20%26%20Unload.ipynb)
  - [009 - Redshift - Append, Overwrite and Upsert](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/009%20-%20Redshift%20-%20Append%2C%20Overwrite%2C%20Upsert.ipynb)
  - [010 - Parquet Crawler](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/010%20-%20Parquet%20Crawler.ipynb)
  - [011 - CSV Datasets](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/011%20-%20CSV%20Datasets.ipynb)
  - [012 - CSV Crawler](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/012%20-%20CSV%20Crawler.ipynb)
  - [013 - Merging Datasets on S3](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/013%20-%20Merging%20Datasets%20on%20S3.ipynb)
  - [014 - Schema Evolution](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/014%20-%20Schema%20Evolution.ipynb)
  - [015 - EMR](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/015%20-%20EMR.ipynb)
  - [016 - EMR & Docker](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/016%20-%20EMR%20%26%20Docker.ipynb)
  - [017 - Partition Projection](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/017%20-%20Partition%20Projection.ipynb)
  - [018 - QuickSight](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/018%20-%20QuickSight.ipynb)
  - [019 - Athena Cache](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/019%20-%20Athena%20Cache.ipynb)
  - [020 - Spark Table Interoperability](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/020%20-%20Spark%20Table%20Interoperability.ipynb)
  - [021 - Global Configurations](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/021%20-%20Global%20Configurations.ipynb)
  - [022 - Writing Partitions Concurrently](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/022%20-%20Writing%20Partitions%20Concurrently.ipynb)
  - [023 - Flexible Partitions Filter](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/023%20-%20Flexible%20Partitions%20Filter.ipynb)
  - [024 - Athena Query Metadata](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/024%20-%20Athena%20Query%20Metadata.ipynb)
  - [025 - Redshift - Loading Parquet files with Spectrum](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/025%20-%20Redshift%20-%20Loading%20Parquet%20files%20with%20Spectrum.ipynb)
  - [026 - Amazon Timestream](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/026%20-%20Amazon%20Timestream.ipynb)
  - [027 - Amazon Timestream 2](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/027%20-%20Amazon%20Timestream%202.ipynb)
  - [028 - Amazon DynamoDB](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/028%20-%20DynamoDB.ipynb)
  - [029 - S3 Select](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/029%20-%20S3%20Select.ipynb)
  - [030 - Data Api](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/030%20-%20Data%20Api.ipynb)
  - [031 - OpenSearch](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/031%20-%20OpenSearch.ipynb)
  - [032 - Lake Formation Governed Tables](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/032%20-%20Lake%20Formation%20Governed%20Tables.ipynb)
  - [033 - Amazon Neptune](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/033%20-%20Amazon%20Neptune.ipynb)
  - [034 - Glue Data Quality](https://github.com/aws/aws-sdk-pandas/blob/main/tutorials/034%20-Glue%20%20Data%20Quality.ipynb)
- [**API Reference**](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html)
  - [Amazon S3](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-s3)
  - [AWS Glue Catalog](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#aws-glue-catalog)
  - [Amazon Athena](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-athena)
  - [AWS Lake Formation](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#aws-lake-formation)
  - [Amazon Redshift](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-redshift)
  - [PostgreSQL](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#postgresql)
  - [MySQL](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#mysql)
  - [SQL Server](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#sqlserver)
  - [Oracle](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#oracle)
  - [Data API Redshift](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#data-api-redshift)
  - [Data API RDS](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#data-api-rds)
  - [OpenSearch](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#opensearch)
  - [Amazon Neptune](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-neptune)
  - [DynamoDB](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#dynamodb)
  - [Amazon Timestream](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-timestream)
  - [Amazon EMR](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-emr)
  - [Amazon CloudWatch Logs](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-cloudwatch-logs)
  - [Amazon Chime](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-chime)
  - [Amazon QuickSight](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#amazon-quicksight)
  - [AWS STS](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#aws-sts)
  - [AWS Secrets Manager](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#aws-secrets-manager)
  - [Global Configurations](https://aws-sdk-pandas.readthedocs.io/en/2.19.0/api.html#global-configurations)
- [**License**](https://github.com/aws/aws-sdk-pandas/blob/main/LICENSE.txt)
- [**Contributing**](https://github.com/aws/aws-sdk-pandas/blob/main/CONTRIBUTING.md)

## Getting Help

The best way to interact with our team is through GitHub. You can open an [issue](https://github.com/aws/aws-sdk-pandas/issues/new/choose) and choose from one of our templates for bug reports, feature requests...
You may also find help on these community resources:
* The #aws-sdk-pandas Slack [channel](https://join.slack.com/t/aws-sdk-pandas/shared_invite/zt-sxdx38sl-E0coRfAds8WdpxXD2Nzfrg)
* Ask a question on [Stack Overflow](https://stackoverflow.com/questions/tagged/awswrangler)
  and tag it with `awswrangler`

## Community Resources

Please [send a Pull Request](https://github.com/aws/aws-sdk-pandas/edit/main/README.md) with your resource reference and @githubhandle.

- [Optimize Python ETL by extending Pandas with AWS SDK for pandas](https://aws.amazon.com/blogs/big-data/optimize-python-etl-by-extending-pandas-with-aws-data-wrangler/) [[@igorborgest](https://github.com/igorborgest)]
- [Reading Parquet Files With AWS Lambda](https://aprakash.wordpress.com/2020/04/14/reading-parquet-files-with-aws-lambda/) [[@anand086](https://github.com/anand086)]
- [Transform AWS CloudTrail data using AWS SDK for pandas](https://aprakash.wordpress.com/2020/09/17/transform-aws-cloudtrail-data-using-aws-data-wrangler/) [[@anand086](https://github.com/anand086)]
- [Rename Glue Tables using AWS SDK for pandas](https://ananddatastories.com/rename-glue-tables-using-aws-sdk-pandas/) [[@anand086](https://github.com/anand086)]
- [Getting started on AWS SDK for pandas and Athena](https://medium.com/@dheerajsharmainampudi/getting-started-on-aws-sdk-pandas-and-athena-7b446c834076) [[@dheerajsharma21](https://github.com/dheerajsharma21)]
- [Simplifying Pandas integration with AWS data related services](https://medium.com/@bv_subhash/aws-sdk-pandas-simplifying-pandas-integration-with-aws-data-related-services-2b3325c12188) [[@bvsubhash](https://github.com/bvsubhash)]
- [Build an ETL pipeline using AWS S3, Glue and Athena](https://www.linkedin.com/pulse/build-etl-pipeline-using-aws-s3-glue-athena-data-wrangler-tom-reid/) [[@taupirho](https://github.com/taupirho)]

## Logging

Enabling internal logging examples:

```py3
import logging
logging.basicConfig(level=logging.INFO, format=""[%(name)s][%(funcName)s] %(message)s"")
logging.getLogger(""awswrangler"").setLevel(logging.DEBUG)
logging.getLogger(""botocore.credentials"").setLevel(logging.CRITICAL)
```

Into AWS lambda:

```py3
import logging
logging.getLogger(""awswrangler"").setLevel(logging.DEBUG)
```

## Who uses AWS SDK for pandas?

Knowing which companies are using this library is important to help prioritize the project internally.
If you would like us to include your company’s name and/or logo in the README file to indicate that your company is using the AWS SDK for pandas, please raise a ""Support Us"" issue. If you would like us to display your company’s logo, please raise a linked pull request to provide an image file for the logo. Note that by raising a Support Us issue (and related pull request), you are granting AWS permission to use your company’s name (and logo) for the limited purpose described here and you are confirming that you have authority to grant such permission.

- [Amazon](https://www.amazon.com/)
- [AWS](https://aws.amazon.com/)
- [Cepsa](https://cepsa.com) [[@alvaropc](https://github.com/alvaropc)]
- [Cognitivo](https://www.cognitivo.ai/) [[@msantino](https://github.com/msantino)]
- [Digio](https://www.digio.com.br/) [[@afonsomy](https://github.com/afonsomy)]
- [DNX](https://www.dnx.solutions/) [[@DNXLabs](https://github.com/DNXLabs)]
- [Fortescue Future Industries](https://ffi.com.au/) [[@spencervoorend](https://github.com/spencervoorend)]
- [Funcional Health Tech](https://www.funcionalcorp.com.br/) [[@webysther](https://github.com/webysther)]
- [Funding Circle](https://www.fundingcircle.com/) [[@pfig](https://github.com/pfig)]
- [Infomach](https://www.infomach.com.br/)
- [Informa Markets](https://www.informamarkets.com/en/home.html) [[@mateusmorato]](http://github.com/mateusmorato)
- [LINE TV](https://www.linetv.tw/) [[@bryanyang0528](https://github.com/bryanyang0528)]
- [Magnataur](https://magnataur.com) [[@brianmingus2](https://github.com/brianmingus2)]
- [M4U](https://www.m4u.com.br/) [[@Thiago-Dantas](https://github.com/Thiago-Dantas)]
- [NBCUniversal](https://www.nbcuniversal.com/) [[@vibe](https://github.com/vibe)]
- [nrd.io](https://nrd.io/) [[@mrtns](https://github.com/mrtns)]
- [OKRA Technologies](https://okra.ai) [[@JPFrancoia](https://github.com/JPFrancoia), [@schot](https://github.com/schot)]
- [Pier](https://www.pier.digital/) [[@flaviomax](https://github.com/flaviomax)]
- [Pismo](https://www.pismo.io/) [[@msantino](https://github.com/msantino)]
- [ringDNA](https://www.ringdna.com/) [[@msropp](https://github.com/msropp)]
- [Serasa Experian](https://www.serasaexperian.com.br/) [[@andre-marcos-perez](https://github.com/andre-marcos-perez)]
- [Shipwell](https://shipwell.com/) [[@zacharycarter](https://github.com/zacharycarter)]
- [strongDM](https://www.strongdm.com/) [[@mrtns](https://github.com/mrtns)]
- [Thinkbumblebee](https://www.thinkbumblebee.com/) [[@dheerajsharma21]](https://github.com/dheerajsharma21)
- [VTEX](https://vtex.com/us-en/) [[@igorborgest]](https://github.com/igorborgest)
- [Zillow](https://www.zillow.com/) [[@nicholas-miles]](https://github.com/nicholas-miles)
","AWS Data Wrangler is now **AWS SDK for pandas (awswrangler) We’re changing the
name we use when we talk about the library, but everything else will stay the
same. Easy integration with Athena, Glue, Redshift, Timestream, OpenSearch,
Neptune, QuickSight, Chime, CloudWatchLogs."
2661,☁️ Azure summary in bullet points,"# Azure in bulletpoints

[![Quality checks status](https://github.com/undergroundwires/Azure-in-bullet-points/workflows/Quality%20checks/badge.svg)](https://github.com/undergroundwires/Azure-in-bullet-points/actions)
[![GitHub sponsors](https://undergroundwires.dev/img/badges/donate/flat.svg)](https://undergroundwires.dev/donate?project=Azure-in-bullet-points)

- This repo contains my study notes for different Azure exams.
- The notes are comprehensive and written with goal of covering all exam areas.
  - I passed all of the exams with these notes.
- Good luck & enjoy studying! ☕

## Content

<!-- no toc -->
- [AZ-900: Microsoft Azure Fundamentals](#az-900-microsoft-azure-fundamentals)
- [AZ-104: Microsoft Azure Administrator](#az-104-microsoft-azure-administrator)
- [AZ-303: Microsoft Azure Architect Technologies](#az-303-microsoft-azure-architect-technologies)
- [AZ-304: Microsoft Azure Architect Design](#az-304-microsoft-azure-architect-design)
- [AZ-400: Designing and Implementing Microsoft DevOps Solutions](#az-400-designing-and-implementing-microsoft-devops-solutions)

## Support

- ⭐️ Simplest way to say thanks is just to it a star 🤩
- ❤️ To show more support:
  - ☕️ [buy me a coffee](https://buymeacoffee.com/undergroundwire)
  - 👏🏿 [sponsor me](https://github.com/sponsors/undergroundwires)
  - 🎈 [donate using another way](https://undergroundwires.dev/donate)
- ✨ Contributions of any kind are welcome!

## Symbols

- There are two symbols used throughout the documentation.

  | Symbol | Description |
  |:------:|-------------|
  | 💡 | Best practice or special hint for exam |
  | ❗ | An important limitation, challenge or an exception |
  | 📝 | Common exam area |
  | 🤗 | Fact / trivia (most likely unrelated to the exam) |

### [AZ-900](https://docs.microsoft.com/en-us/learn/certifications/exams/az-900): Microsoft Azure Fundamentals

1. [Cloud Basics](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.%20Cloud%20Basics.md)
   1. [Benefits of Cloud Computing](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.1.%20Benefits%20of%20Cloud%20Computing.md)
   2. [Cloud Deployment Models (Public vs Private vs Hybrid Cloud)](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.2.%20Cloud%20Deployment%20Models%20(Public%20vs%20Private%20vs%20Hybrid%20Cloud).md)
   3. Cloud Computing
      1. [Compute & Serverless & Storage](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.3.1.%20Compute%20&%20Serverless%20&%20Storage.md)
      2. [IaaS vs PaaS vs SaaS](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.3.2.%20IaaS%20vs%20PaaS%20vs%20SaaS.md)
   4. [Cloud Compliance](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.4.%20Cloud%20Compliance.md)
   5. [Scaling](./AZ-900%20Microsoft%20Azure%20Fundamentals/1.5.%20Scaling.md)
2. [Azure Basics](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.%20Azure%20Basics.md)
   1. [Purchasing & Licensing Options](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.1.%20Purchasing%20&%20Licensing%20Options.md)
   2. [Account, Subscription, Support and Billing](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.2.%20Azure%20Account,%20Subscription,%20Support%20and%20Billing.md)
   3. [Azure Data Centers](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.3.%20Azure%20Data%20Centers.md)
   4. [Interacting with Azure](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.4.%20Interacting%20with%20Azure.md)
   5. [Service-level Agreements (SLA)](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.5.%20Service-level%20Agreements%20(SLA).md)
   6. [Azure Resource Manager (Resources & Resource Groups & Management Groups)](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.6.%20Azure%20Resource%20Manager%20(Resources%20&%20Resource%20Groups%20&%20Management%20Groups).md)
   7. [Compliance in Azure](./AZ-900%20Microsoft%20Azure%20Fundamentals/2.7.%20Compliance%20in%20Azure.md)
3. [Azure Services](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.%20Azure%20Services.md)
   1. [Compute](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.1.%20Compute.md)
      1. [Virtual Machines](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.1.1.%20Virtual%20Machines.md)
      2. [Containers](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.1.2.%20Containers.md)
      3. [App Service](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.1.3.%20App%20Service.md)
      4. [Serverless Computing](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.1.4.%20Serverless%20Computing.md)
   2. [Storage](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.2.%20Storage.md)
      1. [Databases](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.2.1.%20Databases.md)
   3. [Networking](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.3.%20Networking.md)
      1. [Load Balancing](./AZ-900%20Microsoft%20Azure%20Fundamentals/3.3.1.%20Load%20Balancing.md)
4. Security
   1. [Shared Responsibility Model](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.1.%20Shared%20Responsibility%20Model.md)
   2. [Defence in Depth](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.2.%20Defence%20in%20Depth.md)
   3. [Azure Security Center](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.3.%20Azure%20Security%20Center.md)
   4. [Identity and Access (Azure AD)](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.4.%20Identity%20and%20Access%20(Azure%20AD).md)
   5. [Encryption (Azure Key Vault, Certificates)](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.5.%20Encryption%20(Azure%20Key%20Vault,%20Certificates).md)
   6. [Network Protection](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.6.%20Network%20Protection.md)
   7. [Microsoft Azure Information Protection (AIP)](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.7.%20Microsoft%20Azure%20Information%20Protection%20(AIP).md)
   8. [Microsoft Defender for Identity](./AZ-900%20Microsoft%20Azure%20Fundamentals/../AZ-900%20Microsoft%20Azure%20Fundamentals/4.8.%20Microsoft%20Defender%20for%20Identity.md)
   9. [Microsoft Security Development Lifecycle (SDL)](./AZ-900%20Microsoft%20Azure%20Fundamentals/4.9.%20Microsoft%20Security%20Development%20Lifecycle%20(SDL).md)
5. Governance
   1. [Azure Policy & Azure Blueprints](./AZ-900%20Microsoft%20Azure%20Fundamentals/5.1.%20Azure%20Policy%20&%20Azure%20Blueprints.md)
   2. [Monitoring (Azure Monitor & Azure Service Health)](./AZ-900%20Microsoft%20Azure%20Fundamentals/5.2.%20Monitoring%20(Azure%20Monitor%20&%20Azure%20Service%20Health).md)
6. Economics
   1. [Economies of Scale](./AZ-900%20Microsoft%20Azure%20Fundamentals/6.1.%20Economies%20of%20Scale.md)
   2. [Capital Expenditure (CapEx) vs Operational Expenditure (OpEx)](./AZ-900%20Microsoft%20Azure%20Fundamentals/6.2.%20Capital%20Expenditure%20(CapEx)%20vs%20Operational%20Expenditure%20(OpEx).md)
   3. [Azure Costs & Tools](./AZ-900%20Microsoft%20Azure%20Fundamentals/6.3.%20Azure%20Costs%20&%20Tools.md)
   4. [Cost Optimization Best Practices](./AZ-900%20Microsoft%20Azure%20Fundamentals/6.4.%20Cost%20Optimization%20Best%20Practices.md)

[↑](#content)

### [AZ-104](https://docs.microsoft.com/en-us/learn/certifications/exams/az-104): Microsoft Azure Administrator

1. Management
   1. [Azure Cloud Shell](AZ-104%20Microsoft%20Azure%20Administrator/1.1.%20Management%20-%20Azure%20Cloud%20Shell.md)
   2. [Resources & Costs](AZ-104%20Microsoft%20Azure%20Administrator/1.2.%20Management%20-%20Resources%20&%20Costs.md)
   3. [Resource Groups](AZ-104%20Microsoft%20Azure%20Administrator/1.3.%20Management%20-%20Resource%20Groups.md)
2. Governance
   1. [Roles](AZ-104%20Microsoft%20Azure%20Administrator/2.1.%20Governance%20-%20Roles.md)
   2. [Azure AD](AZ-104%20Microsoft%20Azure%20Administrator/2.2.%20Governance%20-%20Azure%20AD.md)
      1. [Entities](AZ-104%20Microsoft%20Azure%20Administrator/2.2.1.%20Governance%20-%20Azure%20AD%20-%20Entities.md)
      2. [Hybrid identities](AZ-104%20Microsoft%20Azure%20Administrator/2.2.2.%20Governance%20-%20Azure%20AD%20-%20Hybrid%20Identities.md)
   3. [Azure Policies](AZ-104%20Microsoft%20Azure%20Administrator/2.3.%20Governance%20-%20Azure%20Policies.md)
3. [Monitoring](AZ-104%20Microsoft%20Azure%20Administrator/3.%20Monitoring.md)
   1. [Monitoring costs](AZ-104%20Microsoft%20Azure%20Administrator/3.1.%20Monitoring%20-%20Monitoring%20costs.md)
4. Storage
   1. [Azure Storage](AZ-104%20Microsoft%20Azure%20Administrator/4.1.%20Storage%20-%20Azure%20Storage.md)
      1. [Security](AZ-104%20Microsoft%20Azure%20Administrator/4.1.1.%20Storage%20-%20Azure%20Storage%20-%20Security.md)
      2. [Monitoring](AZ-104%20Microsoft%20Azure%20Administrator/4.1.2.%20Storage%20-%20Azure%20Storage%20-%20Monitoring.md)
   2. [Azure Files](AZ-104%20Microsoft%20Azure%20Administrator/4.2.%20Storage%20-%20Azure%20Files.md)
   3. [Azure Backup](AZ-104%20Microsoft%20Azure%20Administrator/4.3.%20Storage%20-%20Azure%20Backup.md)
5. [Compute - Virtual Machines (VMs)](AZ-104%20Microsoft%20Azure%20Administrator/5.%20Compute%20-%20Virtual%20machines%20(VMs).md)
   1. [High Availability](AZ-104%20Microsoft%20Azure%20Administrator/5.1.%20Compute%20-%20Virtual%20machines%20(VMs)%20-%20High%20Availability.md)
   2. [Deployment](AZ-104%20Microsoft%20Azure%20Administrator/5.2%20Compute%20-%20Virtual%20machines%20(VMs)%20-%20Deployment.md)
   3. [VM Scale Sets (VMMS)](AZ-104%20Microsoft%20Azure%20Administrator/5.3%20Compute%20-%20Virtual%20machines%20(VMs)%20-%20VM%20Scale%20Sets%20(VMMS).md)
   4. [Security](AZ-104%20Microsoft%20Azure%20Administrator/5.4.%20Compute%20-%20Virtual%20machines%20(VMs)%20-%20Security.md)
   5. [Backups](AZ-104%20Microsoft%20Azure%20Administrator/5.5.%20Compute%20-%20Virtual%20machines%20(VMs)%20-%20Backups.md)
6. Networking
   1. [Virtual Network (VNet)](AZ-104%20Microsoft%20Azure%20Administrator/6.1.%20Networking%20-%20Virtual%20Network%20(VNet).md)
      1. [Connecting VNets](AZ-104%20Microsoft%20Azure%20Administrator/6.1.1.%20Networking%20-%20Virtual%20Network%20(VNet)%20-%20Connecting%20VNets.md)
      2. [DNS & Name Resolution](AZ-104%20Microsoft%20Azure%20Administrator/6.1.2.%20Networking%20-%20Virtual%20Network%20(VNet)%20-%20DNS%20&%20Name%20Resolution.md)
   2. [Load Balancers](AZ-104%20Microsoft%20Azure%20Administrator/6.2.%20Networking%20-%20Load%20Balancers.md)

[↑](#content)

### [AZ-303](https://docs.microsoft.com/en-us/learn/certifications/exams/az-303): Microsoft Azure Architect Technologies

1. [Azure basics](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/1.%20Azure%20basics.md)
2. Infrastructure services
   1. [Monitoring](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.1.%20Monitoring.md)
   2. [Azure Storage](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.2.%20Azure%20Storage.md)
   3. [Azure Content Delivery Network (CDN)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.3.%20Azure%20Content%20Delivery%20Network%20(CDN).md)
   4. [Virtual Machines](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.4.%20Virtual%20Machines.md)
      1. [Deploy](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.4.1.%20Virtual%20Machines%20-%20Deploy.md)
      2. [Azure Backup & Azure Site Recovery & Snapshots](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.4.2.%20Virtual%20Machines%20-%20Azure%20Backup%20&%20Azure%20Site%20Recovery%20&%20Snapshots.md)
   5. [Virtual Networks](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.5.%20Virtual%20Networks.md)
      1. [Virtual Network Connectivity](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.5.1.%20Virtual%20Networks%20-%20Virtual%20Network%20Connectivity.md)
      2. [Virtual Network Interface](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.5.2.%20Virtual%20Networks%20-%20Virtual%20Network%20Interface.md)
   6. [Azure Migration](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.6.%20Azure%20Migration.md)
      1. [Azure Migrate Service](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.6.1.%20Azure%20Migrate%20Service.md)
      2. [Azure Site Recovery Service](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/2.6.2.%20Azure%20Site%20Recovery%20Service.md)
3. Security
   1. Identities
      1. [Azure Active Directory](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.1.1.%20Identities%20-%20Azure%20Active%20Directory.md)
         1. [Hybrid Identities](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.1.1.1.%20Identities%20-%20Azure%20Active%20Directory%20-%20Hybrid%20Identities.md)
      2. [Active Directory Domain Services (ADDS)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.1.2.%20Identities%20-%20Active%20Directory%20Domain%20Services%20(ADDS).md)
   2. [Networking](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.2.%20Networking.md)
      1. [Hybrid Connections (Site-to-Site VPN & ExpressRoute)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.2.1.%20Networking%20-%20Hybrid%20Connections%20(Site-to-Site%20VPN%20&%20ExpressRoute).md)
   3. [Manage role-based access control (RBAC)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.3.%20Manage%20role-based%20access%20control%20(RBAC).md)
   4. [Multi-Factor Authentication (MFA)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.4.%20Multi-Factor%20Authentication%20(MFA).md)
   5. Implement Authentication and Secure Data
      1. [Authentication](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.5.1.%20Authentication.md)
      2. [Authorization](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.5.2.%20Authorization.md)
      3. [Encryption](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/3.5.3.%20Encryption.md)
4. Application services
   1. [Creating Web Applications using PaaS](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/4.1.%20Creating%20Web%20Applications%20using%20PaaS.md)
   2. [Web Apps (App Service)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/4.2.%20Web%20Apps%20(App%20Service).md)
   3. [Azure Service Fabric](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/4.3.%20Azure%20Service%20Fabric.md)
   4. [Using containers and orchestration](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/4.4.%20Using%20containers%20and%20orchestration.md)
   5. [Serverless Computing (Azure Functions & Logic Apps)](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/4.5.%20Serverless%20Computing%20(Azure%20Functions%20&%20Logic%20Apps).md)
5. Developing for cloud
   1. [Asynchronous Messaging](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.1.%20Asynchronous%20Messaging.md)
      1. [Azure Queues (Storage Queues & Event Grid & Service Bus & Event Hubs & IoT Hub)](./AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.1.1.%20Azure%20Queues%20(Storage%20Queues%20&%20Event%20Grid%20&%20Service%20Bus%20&%20Event%20Hubs%20&%20IoT%20Hub).md)
   2. [Configure Message-based integration architecture](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.2.%20Configure%20Message-based%20integration%20architecture.md)
   3. [Developing for asynchronous processes](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.3.%20Developing%20for%20asynchronous%20processes.md)
   4. [Developing for autoscaling](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.4.%20Developing%20for%20autoscaling.md)
   5. [Implement code that addresses a transient state](AZ-303%20Microsoft%20Azure%20Architect%20Technologies//5.5.%20Implement%20code%20that%20addresses%20a%20transient%20state.md)
   6. [Implement code that addresses singleton application instances](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.6.%20Implement%20code%20that%20addresses%20singleton%20application%20instances.md)
   7. [Querying Azure Resources](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.7.%20Querying%20Azure%20Resources.md)
   8. [Develop database solutions](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/5.8.%20Develop%20database%20solutions.md)
6. Cloud architecture patterns
   1. [Design and Connectivity Patterns](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/6.1.%20Design%20and%20Connectivity%20Patterns.md)
   2. [Hybrid Networking](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/6.2.%20Hybrid%20Networking.md)
   3. [Storing in cloud](AZ-303%20Microsoft%20Azure%20Architect%20Technologies/6.3.%20Storing%20in%20cloud.md)

[↑](#content)

### [AZ-304](https://docs.microsoft.com/en-us/learn/certifications/exams/az-304): Microsoft Azure Architect Design

1. Security
   1. [Responsibilities](./AZ-304%20Microsoft%20Azure%20Architect%20Design/1.1.%20Security%20-%20Responsibilities.md)
   2. [Azure data centers](./AZ-304%20Microsoft%20Azure%20Architect%20Design/1.2.%20Security%20-%20Azure%20data%20centers.md)
   3. [Azure Key Vault](./AZ-304%20Microsoft%20Azure%20Architect%20Design/1.3.%20Security%20-%20Azure%20Key%20Vault.md)
   4. [Azure Active Directory (Azure AD)](./AZ-304%20Microsoft%20Azure%20Architect%20Design/1.4.%20Security%20-%20Azure%20Active%20Directory%20(Azure%20AD).md)
2. SaaS services in Azure
   1. [Cognitive Services](./AZ-304%20Microsoft%20Azure%20Architect%20Design/2.1.%20SaaS%20services%20in%20Azure%20-%20Cognitive%20Services.md)
   2. [Bots (Bot Services, QnA Maker)](./AZ-304%20Microsoft%20Azure%20Architect%20Design/2.2.%20SaaS%20services%20in%20Azure%20-%20Bots%20(Bot%20Services,%20QnA%20Maker).md)
   3. [Azure Machine Learning](./AZ-304%20Microsoft%20Azure%20Architect%20Design/2.3.%20SaaS%20services%20in%20Azure%20-%20Azure%20Machine%20Learning.md)
   4. [Media Processing](AZ-304%20Microsoft%20Azure%20Architect%20Design/2.4.%20SaaS%20services%20in%20Azure%20-%20Media%20Processing.md)
3. Data platform
   1. Storage
      1. [Azure Storage](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.1.1.%20Storage%20-%20Azure%20Storage.md)
         1. [Storage Account](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.1.1.1.%20Storage%20-%20Storage%20Account.md)
      2. [StorSimple](AZ-304%20Microsoft%20Azure%20Architect%20Design/3.1.2.%20Storage%20-%20StorSimple.md)
   2. [SQL (Azure SQL Database)](AZ-304%20Microsoft%20Azure%20Architect%20Design/3.2.%20SQL%20(Azure%20SQL%20Database).md)
   3. [Big data services](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.3.%20Big%20data%20services.md)
   4. [Azure Automation](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.4.%20Azure%20Automation.md)
   5. [Data Analysis (Azure Analysis Services, HDInsight, Azure Data Catalog)](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.5.%20Data%20Analysis%20(Azure%20Analysis%20Services,%20HDInsight,%20Azure%20Data%20Catalog).md)
   6. [Backup (Azure Backup & Azure Site Recovery)](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.6.%20Backup%20(Azure%20Backup%20&%20Azure%20Site%20Recovery).md)
   7. [Monitoring](./AZ-304%20Microsoft%20Azure%20Architect%20Design/3.7.%20Monitoring.md)
      1. [Azure Sentinel](AZ-304%20Microsoft%20Azure%20Architect%20Design/3.7.1.%20Azure%20Sentinel.md)
4. Deployment, Migration and Integration
   1. [Azure Resource Manager](./AZ-304%20Microsoft%20Azure%20Architect%20Design/4.1.%20Azure%20Resource%20Manager.md)
      1. [Role-Based Access Control (RBAC)](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.1.1.%20Role-Based%20Access%20Control%20(RBAC).md)
      2. [Azure Resource Policies](./AZ-304%20Microsoft%20Azure%20Architect%20Design/4.1.2.%20Azure%20Resource%20Policies.md)
      3. [Securing ARM templates](./AZ-304%20Microsoft%20Azure%20Architect%20Design/4.1.3.%20Securing%20ARM%20templates%20(Azure%20Key%20Vault).md)
      4. [Deploying ARM templates (Azure Building Blocks)](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.1.4.%20Deploying%20ARM%20templates%20(Azure%20Building%20Blocks).md)
   2. [Managed Server Applications (App Service Environments, Azure Service Fabric, Azure Container Service, Azure Container Instance)](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.2.%20Managed%20Server%20Applications%20(App%20Service%20Environments,%20Azure%20Service%20Fabric,%20Azure%20Container%20Service,%20Azure%20Container%20Instance).md)
      1. [High-Performance Compute (HPC)](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.2.1.%20High-Performance%20Compute%20(HPC).md)
   3. [Migration strategies](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.3.%20Migration%20strategies.md)
   4. [App Services](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.4.%20App%20Services.md)
   5. [Authoring Serverless Applications in Azure](AZ-304%20Microsoft%20Azure%20Architect%20Design/4.5.%20Authoring%20Serverless%20Applications%20in%20Azure.md)
5. Infrastructure strategy
   1. [Application Architecture Patterns in Azure](AZ-304%20Microsoft%20Azure%20Architect%20Design/5.1.%20Application%20Architecture%20Patterns%20in%20Azure.md)
   2. [VM Availability (SLA, Availability Sets, Availability Zones)](AZ-304%20Microsoft%20Azure%20Architect%20Design/5.2.%20VM%20Availability%20(SLA,%20Availability%20Sets,%20Availability%20Zones).md)
   3. [Azure VM Scale Sets](./AZ-304%20Microsoft%20Azure%20Architect%20Design/5.3.%20Azure%20VM%20Scale%20Sets.md)
   4. [Hybrid Cloud](./AZ-304%20Microsoft%20Azure%20Architect%20Design/5.4.%20Hybrid%20Cloud.md)
   5. [Networking Azure Application Components](./AZ-304%20Microsoft%20Azure%20Architect%20Design/5.5.%20Networking%20Azure%20Application%20Components.md)
   6. [Messaging Services](./AZ-304%20Microsoft%20Azure%20Architect%20Design/5.6.%20Messaging%20Services.md)

[↑](#content)

### [AZ-400](http://docs.microsoft.com/en-us/learn/certifications/exams/az-400): Designing and Implementing Microsoft DevOps Solutions

1. [Introduction](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/1.%20Introduction.md)
   1. [Design a DevOps Strategy](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/1.1.%20Design%20a%20DevOps%20Strategy.md)
   2. [Common tools for DevOps](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/1.2.%20Common%20tools%20for%20DevOps.md)
2. [Azure DevOps Overview](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/2.%20Azure%20DevOps%20Overview.md)
   1. [Migrations](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/2.1.%20Migrations.md)
3. [Agile work management](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/3.%20Agile%20work%20management.md)
   1. [Azure Boards](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/3.1.%20Azure%20Boards.md)
4. Continuous Testing
   1. [Choosing Test and Work Management Tools](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/4.1.%20Continuous%20Testing%20-%20Choosing%20Test%20and%20Work%20Management%20Tools.md)
   2. [Azure Test Plans](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/4.2.%20Continuous%20Testing%20-%20Azure%20Test%20Plans.md)
5. [Continuous Feedback](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/5.%20Continuous%20Feedback.md)
   1. [Azure Monitor](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/5.1.%20Azure%20Monitor.md)
6. [Package management](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/6.%20Package%20Management.md)
   1. [Azure Artifacts](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/6.1.%20Azure%20Artifacts.md)
7. [Continuous Integration & Continuous Delivery](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.%20Continuous%20Integration%20&%20Continuous%20Delivery.md)
   1. [Deployment Patterns](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.1.%20Deployment%20Patterns.md)
   2. [Azure Pipelines](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.2.%20Azure%20Pipelines.md)
      1. [Container Agents](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.2.1.%20Azure%20Pipelines%20-%20Container%20Agents.md)
      2. [Release Pipelines](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.2.2.%20Azure%20Pipelines%20-%20Release%20Pipelines.md)
      3. [DevTest Labs](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.2.3.%20Azure%20Pipelines%20-%20DevTest%20Labs.md)
   3. [Jenkins](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.3.%20Jenkins.md)
   4. [SonarQube](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/7.4.%20SonarQube.md)
8. [DevSecOps](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/8.%20DevSecOps.md)
   1. [Azure Key Vault](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/8.1.%20Azure%20Key%20Vault.md)
9. [Source code version control](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/9.%20Source%20code%20version%20control.md)
   1. [Git](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/9.1.%20Git.md)
   2. [Pull request strategies](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/9.2.%20Pull%20request%20strategies.md)
   3. [Azure Repos](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/9.3.%20Azure%20Repos.md)
10. [Containers](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/10.%20Containers.md)
    1. [Azure Container Registry](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/10.1.%20Azure%20Container%20Registry.md)
    2. [Azure Kubernetes Service](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/10.2.%20Azure%20Kubernetes%20Service.md)
11. [Mobile DevOps (Visual Studio App Center)](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/11.%20Mobile%20DevOps%20(Visual%20Studio%20App%20Center).md)
12. [Infrastructure as code](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/12.%20Infrastructure%20as%20code.md)
    1. [ARM templates](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/12.1.%20ARM%20templates.md)
13. [Configuration as Code (PowerShell DSC & Azure Automation & Custom Script)](AZ-400%20Microsoft%20Azure%20DevOps%20Solutions/13.%20Configuration%20as%20Code%20(PowerShell%20DSC%20&%20Azure%20Automation%20&%20Custom%20Script).md)

[↑](#content)
","This repo contains my study notes for different Azure exams. The notes are
comprehensive and written with goal of covering all exam areas. I passed all of
the exams with these notes. Contributions of any kind are welcome! There are two
symbols used throughout the documentation."
3117,Bash-my-AWS provides simple but powerful CLI commands for managing AWS resources,"# Bash-my-AWS

Bash-my-AWS is a simple but powerful set of CLI commands for managing
resources on Amazon Web Services.

They harness the power of Amazon's AWSCLI, while abstracting away verbosity.

The project implements some innovative patterns but (arguably) remains simple,
beautiful and readable.

**Note: Extensive documentation at https://bash-my-aws.org/**

![screencast](docs/images/bma-02-2.gif)

## Introduction

- [Short, Memorable Commands](#short-memorable-commands)
- [Shell Command Completion (including AWS resources)](#shell-command-completion)
- [Unix Pipeline Friendly (instead of JSON)](#unix-pipeline-friendly)
- [Convenient Shortcuts](#convenient-shortcuts)


### Short, Memorable Commands

There are two main types of commands.

**1. Resource Listing Commands**

These generally consist of the pluralised form of the resource name.

```shell
$ buckets
example-assets   2019-12-08  02:35:44.758551
example-logs     2019-12-08  02:35:52.669771
example-backups  2019-12-08  02:35:56.579434
```

```shell
$ stacks
nagios      CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres01  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres02  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
prometheus  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
```

```shell
$ keypairs
alice  8f:85:9a:1e:6c:76:29:34:37:45:de:7f:8d:f9:70:eb
bob    56:73:29:c2:ad:7b:6f:b6:f2:f3:b4:de:e4:2b:12:d4
carol  29:4e:1c:cb:ba:d4:85:0e:4f:b6:34:4c:d4:79:32:00
```

**2. Resource detail/action commands**

These generally consist of a resource name and action separated by a hyphen.
This makes discovering them via shell completion simple.

Some retrieve information about resources while others make changes to them.

```shell
$ keypair-delete alice bob
You are about to delete the following EC2 SSH KeyPairs:
alice
bob
Are you sure you want to continue? y
```

See the [Command Reference](https://bash-my-aws.org/command-reference/) for a full list of commands.


### Shell Command Completion

In the example above, shell autocompletion retrieved the existing EC2 Keypair
names (`alice`, `bob`) from AWS. This helps avoid the need to rely on human
memory or terminal copypasta.

Additionally, all of the bash-my-aws commands are available as completions
for the `bma` command, so `bma[tab][tab]` will produce a list of all of the
available commands.

### Unix Pipeline Friendly

The commands themselves are line oriented and work nicely in unix pipelines
with other unix commands (e.g. `grep`, `awk`, etc).

```shell
$ stacks | grep postgres
postgres01  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres02  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
```

They also work incredibly well with each other due to the way they treat input
from STDIN. The first token from each line of STDIN is taken to be a resource
identifier (and the rest is discarded).


```shell
$ stacks | grep postgres | stack-delete
You are about to delete the following stacks:
postgres01
postgres02
Are you sure you want to continue? y
```

*Some users have compared this User Experience to functionality in Windows Powershell.*


### Convenient Shortcuts

Bash-my-AWS is insanely simple to pick up and start using but contains a lot of
convenient shortcuts you can make use of.

Example: resource listing commands accept a filter argument, removing the need
for `| grep`.

In the following example someone has given a CloudFormation stack a really long name:

```shell
$ stacks
nagios                             CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres01                         DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres02                         DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
prometheus                         CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
stack-with-a-annoyingly-long-name  CREATE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
```

This affects the output when we look at our Postgres stacks:
```shell
$ stacks | grep postgres
postgres01                         DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres02                         DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
```

The resource listing command can filter output before applying `column`.
```shell
$ stacks postgres
postgres01  DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
postgres02  DELETE_COMPLETE  2011-05-23T15:47:44Z  NEVER_UPDATED  NOT_NESTED
```


## Quickstart

### Prerequisites

* [awscli](http://aws.amazon.com/cli/)
* [bash](https://www.gnu.org/software/bash/)
* [jq-1.4](http://stedolan.github.io/jq/download/) or later (for stack-diff)

### Optional Packages

* [colordiff](https://www.colordiff.org/) to show stack-diff in color
* [icdiff](https://github.com/jeffkaufman/icdiff) to show stack-diff in color and side-by-side

### Installation

As shown below, you may simply clone the GitHub repo and source the files required.
(You should probably fork it instead to keep your customisations)

```Shell
$ git clone https://github.com/bash-my-aws/bash-my-aws.git ${BMA_HOME:-$HOME/.bash-my-aws}
```

Put the following in your shell's startup file:

```Shell
export PATH=""$PATH:${BMA_HOME:-$HOME/.bash-my-aws}/bin""
source ${BMA_HOME:-$HOME/.bash-my-aws}/aliases

# For ZSH users, uncomment the following two lines:
# autoload -U +X compinit && compinit
# autoload -U +X bashcompinit && bashcompinit

source ${BMA_HOME:-$HOME/.bash-my-aws}/bash_completion.sh
```

#### Why use shell aliases?

`Bash-my-AWS` began as a collection of bash functions, sourced into your shell.
More recently, the default suggestion has been to load aliases that execute a
small wrapper script that loads the functions and executes the desired function.

After years of `zsh` users asking for support, one stepped up and identified
a changes that would eliminate any shell compatibility problems without compromising
the functionaility, simplicity and discoverability of the project. Massive thanks
to [@ninth-dev](https://github.com/ninth-dev) for this.

    # bash users may source the functions instead of loading the aliases
    if [ -d ${HOME}/.bash-my-aws ]; then
      for f in ~/.bash-my-aws/lib/*-functions; do source $f; done
    fi


## Usage


### Running Commands

The default way to run the commands is using the aliases:

```ShellSession
$ instances
i-e6f097f6ea4457757  ami-123456789012  t3.nano  running  example-ec2-ap-southeast-2  2019-12-07T08:12:00.000Z  ap-southeast-2a  None
i-b983805b4b254f749  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:30.000Z  ap-southeast-2a  None
i-fed39ebe7204dfd37  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:34.000Z  ap-southeast-2a  None
i-47955eb46d98b4dd8  ami-123456789012  t3.nano  running  prometheus                  2019-12-07T08:27:02.000Z  ap-southeast-2a  None
i-8d25b78d40d17f38a  ami-123456789012  t3.nano  running  plex-server                 2019-12-07T08:27:38.000Z  ap-southeast-2a  None
```

It's also possible to run them using the `bma` wrapper.
(This is sometimes required when using a restrictive auth tool.)

```ShellSession
$ bma instances
i-e6f097f6ea4457757  ami-123456789012  t3.nano  running  example-ec2-ap-southeast-2  2019-12-07T08:12:00.000Z  ap-southeast-2a  None
i-b983805b4b254f749  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:30.000Z  ap-southeast-2a  None
i-fed39ebe7204dfd37  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:34.000Z  ap-southeast-2a  None
i-47955eb46d98b4dd8  ami-123456789012  t3.nano  running  prometheus                  2019-12-07T08:27:02.000Z  ap-southeast-2a  None
i-8d25b78d40d17f38a  ami-123456789012  t3.nano  running  plex-server                 2019-12-07T08:27:38.000Z  ap-southeast-2a  None
```

### Discovering Commands

For each resource type, there is a command to list them:

```shell
$ instances
i-e6f097f6ea4457757  ami-123456789012  t3.nano  running  example-ec2-ap-southeast-2  2019-12-07T08:12:00.000Z  ap-southeast-2a  None
i-b983805b4b254f749  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:30.000Z  ap-southeast-2a  None
i-fed39ebe7204dfd37  ami-123456789012  t3.nano  running  postfix-prod                2019-12-07T08:26:34.000Z  ap-southeast-2a  None
i-47955eb46d98b4dd8  ami-123456789012  t3.nano  running  prometheus                  2019-12-07T08:27:02.000Z  ap-southeast-2a  None
i-8d25b78d40d17f38a  ami-123456789012  t3.nano  running  plex-server                 2019-12-07T08:27:38.000Z  ap-southeast-2a  None
```

and a number of commands to act on these resources:

```ShellSession
$ instance-[TAB][TAB]
instance-asg          instance-ssh-details  instance-termination-protection
instance-az           instance-stack        instance-termination-protection-disable
instance-console      instance-start        instance-termination-protection-enable
instance-dns          instance-state        instance-type
instance-iam-profile  instance-stop         instance-userdata
instance-ip           instance-tags         instance-volumes
instance-ssh          instance-terminate    instance-vpc
```

Whether you're new to the tools or just have a bad memory, bash completion
makes discovering these commands simple.

See the [Command Reference](https://bash-my-aws.org/command-reference/) for a full list of commands and usage examples.


### Piping Between Commands

This is where the magic happens!

The first token on each line is almost always a resource identifier. When you pipe output
between the commands they just take the first token from each line.

```ShellSession
$ instances | grep postfix | instance-ip
i-b983805b4b254f749  10.190.1.70    54.214.71.51
i-fed39ebe7204dfd37  10.135.204.82  54.214.26.190
```

!!! Note
    Most commands that list resources (`stacks`, `instances` , etc) accept
    filter term as first arg. As well as reducing keystrokes, it can also
    improve output as columnisation is done after filtering.

        $ instances postfix | instance-ip
        i-b983805b4b254f749  10.190.1.70    54.214.71.51
        i-fed39ebe7204dfd37  10.135.204.82  54.214.26.190


### Inspecting Commands

For those interested in how it works:

- Each command is a bash function.
- Most are *very* simple and wrap an AWSCLI command.

For a quick look at how a command works, you can use `bma type`:

```shell
$ bma type instances
instances is a function
instances () 
{ 
    local instance_ids=$(__bma_read_inputs);
    local filters=$(__bma_read_filters $@);
    aws ec2 describe-instances $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids}) --query ""
      Reservations[].Instances[][
        InstanceId,
        ImageId,
        InstanceType,
        State.Name,
        [Tags[?Key=='Name'].Value][0][0],
        LaunchTime,
        Placement.AvailabilityZone,
        VpcId
      ]"" --output text | grep -E -- ""$filters"" | LC_ALL=C sort -b -k 6 | column -s'	' -t
}
```

A prettier version can be found in the source code:

```shell
# ~/.bash-my-aws/lib/instance-functions
instances() {
  local instance_ids=$(__bma_read_inputs)
  local filters=$(__bma_read_filters $@)

  aws ec2 describe-instances                                            \
    $([[ -n ${instance_ids} ]] && echo --instance-ids ${instance_ids})  \
    --query ""
      Reservations[].Instances[][
        InstanceId,
        ImageId,
        InstanceType,
        State.Name,
        [Tags[?Key=='Name'].Value][0][0],
        LaunchTime,
        Placement.AvailabilityZone,
        VpcId
      ]""                                                               \
    --output text       |
  grep -E -- ""$filters"" |
  LC_ALL=C sort -b -k 6 |
  column -s$'\t' -t
}
```

For more info on AWSCLI query syntax, check out [http://jmespath.org/tutorial.html](http://jmespath.org/tutorial.html)

","There are two main types of commands. Short, Memorable Commands: Resource
Listing Commands and Resource detail/action commands. Convenient Shortcuts:
Shell Command Completion and Shell Command Shortcuts. Shell is Unix Pipeline
Friendly (instead of JSON) and works in unix pipelines. All of the bash-my-aws
commands are available as completions for the `bma` command. See the [Command
Reference] for a full list of commands and a command-reference for more
information."
2012,Export disassemblies into Protocol Buffers,"# BinExport

Copyright 2011-2023 Google LLC.

[![Linux Build Status](https://github.com/google/binexport/workflows/linux-build/badge.svg)](https://github.com/google/binexport/actions?query=workflow%3Alinux-build)
[![Coverity Scan Build Status](https://scan.coverity.com/projects/8977/badge.svg)](https://scan.coverity.com/projects/google-binexport)

Disclaimer: This is not an official Google product (experimental or otherwise),
it is just code that happens to be owned by Google.

# Table of Contents

*   [Introduction](#introduction)
*   [Installation](#installation)
    *   [IDA Pro](#ida-pro)
    *   [Binary Ninja](#binary-ninja)
    *   [Ghidra](#ghidra)
*   [Usage](#usage)
*   [How to build](#how-to-build)
    *   [Preparing the build environment](#preparing-the-build-environment)
    *   [Linux](#linux)
    *   [macOS](#macos)
    *   [Windows](#windows)

## Introduction

BinExport is the exporter component of
[BinDiff](https://www.zynamics.com/software.html). It is a plugin/extension for
the the disassemblers IDA Pro, Binary Ninja and Ghidra that exports disassembly
data into the Protocol Buffer format that BinDiff requires.

An experimental version for the open source software reverse engineering suite
Ghidra is available in the `java/BinExport` directory.

This repository contains the complete source code necessary to build BinExport
plugin binaries for Linux, macOS and Windows.

## Installation

### IDA Pro

Download the binaries from the [releases](https://github.com/google/binexport/releases) page and copy them into the IDA Pro
plugins directory. These are the default paths:

| OS      | Plugin path                                 |
| ------- | ------------------------------------------- |
| Linux   | `/opt/idapro-8.2/plugins`                   |
| macOS   | `/Applications/IDA Pro 8.2/idabin/plugins`  |
| Windows | `%ProgramFiles%\IDA 8.2\plugins`            |

To install just for the current user, copy the files into one of these
directories instead:

| OS          | Plugin                |
| ----------- | ------------------------------------ |
| Linux/macOS | `~/.idapro/plugins`                  |
| Windows     | `%AppData%\Hex-Rays\IDA Pro\plugins` |


#### Verifying the installation version

1.  In IDA, select `Help`|`About programm...`
2.  Click `Addons...`
3.  If installed correctly, the following dialog box appears:

    ![IDA addons dialog](/doc/binexport10-ida-addons-dialog.png)


### Binary Ninja

Download the binaries from the [releases](https://github.com/google/binexport/releases) page and copy them into the Binary Ninja
plugins directory. These are the default paths for the current user:

| OS      | Plugin path                                           |
| ------- | ----------------------------------------------------- |
| Linux   | `~/.binaryninja/plugins`                              |
| macOS   | `~/Library/Application Support/Binary Ninja/plugins/` |
| Windows | `%AppData%\Binary Ninja\plugins`                      |


#### Verifying the installation version

1.  Start Binary Ninja
2.  Select the `Log` native dock. If this is not visible, enable it via
    `View`|`Native Docks`|`Show Log`.
3.  If installed correctly, the log window contains a line similar to this one:

```
BinExport 12 (@internal, Jan 3 2023), (c)2004-2011 zynamics GmbH, (c)2011-2023 Google LLC.
```

### Ghidra

1.  Download the binaries from the [releases](https://github.com/google/binexport/releases) page.
2.  Start Ghidra, select `File`|`Install Extensions...`
3.  In the ""Install Extensions"" dialog, click the plus icon in the upper right to ""Add extension"".
4.  In the ""Select extension"" dialog, enter the path to the `ghidra_BinExport.zip` you downloaded
    in step 1 and click `OK`.
5.  Click `OK` twice to close both the ""Install Extensions"" dialog and the notice to restart Ghidra.
6.  Exit Ghidra.

#### Verifying the installation version

1.  Start Ghidra
2.  Select `File`|`Install Extensions...`
3.  If installed correctly, the ""Install Extensions"" dialog should list the ""BinExport"" extension
    next to a selected checkbox.

## Usage

The main use case is via [BinDiff](https://zynamics.com/bindiff.html). However,
BinExport can also be used to export disassembly into different formats:

*   Protocol Buffer based full export
*   Statistics text file
*   Text format for debugging

### IDA Pro

1.  Open an IDA Pro database
2.  Select `Edit`|`Plugins`|`BinExport 12`
3.  The following dialog box appears:

    ![BinExport plugin dialog](/doc/binexport10-plugin-dialog.png)

4.  Select the type of the file to be exported

#### IDC Scripting

The BinExport plugin registers the IDC functions below.

| IDC Function name   | Exports to           | Arguments  |
| ------------------- | -------------------- | ---------- |
| BinExportBinary     | Protocol Buffer      | filename   |
| BinExportText       | Text file dump       | filename   |
| BinExportStatistics | Statistics text file | filename   |

Alternatively, the plugin can be invoked from IDC by calling its main function
directly:

```c
static main() {
  batch(0);
  auto_wait();
  load_and_run_plugin(""binexport12_ida"", 2 /* kBinary */);
  qexit(0);
}
```

Note that this does provide any control over the output filename. BinExport
will always use the filename of the currently loaded database (without
extension) and append "".BinExport"".

#### IDAPython

The arguments are the same as for IDC (listed above).

Example invocation of one of the registered IDC functions:

```python
import idaapi
idaapi.ida_expr.eval_idc_expr(None, ida_idaapi.BADADDR,
  'BinExportBinary(""exported.BinExport"");')
```

#### Plugin Options

BinExport defines the following plugin options, that can be specified on IDA's
command line:

| Option                                 | Description                                                           |
| -------------------------------------- | --------------------------------------------------------------------- |
| `-OBinExportAutoAction:<ACTION>`       | Invoke a BinExport IDC function and exit                              |
| `-OBinExportModule:<PARAM>`            | Argument for `BinExportAutoAction`                                    |
| `-OBinExportLogFile:<FILE>`            | Log messages to a file                                                |
| `-OBinExportAlsoLogToStdErr:TRUE`      | If specified, also log to standard error                              |
| `-OBinExportX86NoReturnHeuristic:TRUE` | Enable the X86-specific heuristic to identify non-returning functions |

Note: These options must come before any files.

### Binary Ninja

There is only minimal integration into the Binary Ninja UI at this time.

1.  Open or create a new analysis database
2.  Select `Tools`|`Plugins`|`BinExport`. This will start the export process.

The `.BinExport` file is placed next to the analysis database, in the same
directory.

### Ghidra

There is only minimal integration into the Ghidra UI at this time.

1.  Open or create a project. For new projects, import a file first using `File`|`Import File...`
2.  Right-click a file in the current project list and select `Export...` from the context menu.
3.  In the ""Export"" dialog, under ""Format"", choose ""Binary Export (v2) for BinDiff"".
4.  Under ""Output File"", enter the desired output file path. If the file extension is missing,
    `.BinExport` will be appended automatically.
5.  Optional: click ""Options..."" to set additional export options.
6.  Click ""OK"", then click ""OK"" again to dismiss the ""Export Results Summary"" dialog.

## How to build

Below are build instructions for the native code plugins for IDA Pro and
Binary Ninja. To build the Java-based extension for Ghidra, please refer
to the [BinExport for Ghidra](/java) instructions.

### Preparing the build environment

There are quite a few dependencies to satisfy:

*   Boost 1.71.0 or higher (a partial copy of 1.71.0 ships in
    `third_party/boost_parts`)
*   [CMake](https://cmake.org/download/) 3.14 or higher
*   Suggested: [Ninja](https://ninja-build.org/) for speedy builds
*   GCC 9 or a recent version of Clang on Linux/macOS. On Windows, use the
    Visual Studio 2019 compiler and the Windows SDK for Windows 10.
*   Git 1.8 or higher
*   IDA Pro only: IDA SDK 7.6 or higher (unpack into `third_party/idasdk`)
*   Dependencies that will be downloaded:
    *   Abseil, GoogleTest and Protocol Buffers (3.21)
    *   Binary Ninja SDK

### Linux

#### Prerequisites

The preferred build environment is Debian testing (version 10, ""Buster"").

This should install all the necessary packages:

```bash
sudo apt update -qq
sudo apt install -qq --no-install-recommends build-essential
```

Install the latest stable version of CMake:

```bash
wget https://github.com/Kitware/CMake/releases/download/v3.25.1/cmake-3.25.1-linux-x86_64.sh
mkdir ${HOME}/cmake
sh cmake-3.25.1-Linux-x86_64.sh --prefix=${HOME}/cmake --exclude-subdir
export PATH=${HOME}/cmake/bin:${PATH}
```

The following sections assume that your current working directory is at the root
of the cloned repository.

#### IDA SDK

Unzip the contents of the IDA SDK into `third_party/idasdk`. Shown commands are
for IDA 7.6:

```bash
unzip PATH/TO/idasdk76.zip -d third_party/idasdk
mv third_party/idasdk/idasdk76/* third_party/idasdk
rmdir third_party/idasdk/idasdk76
```

#### Build BinExport

With all prerequisites in place, configure and build BinExport and run
its tests:

```bash
mkdir -p build_linux && cd build_linux
cmake .. \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    ""-DCMAKE_INSTALL_PREFIX=${PWD}"" \
    -DBINEXPORT_ENABLE_IDAPRO=ON \
    ""-DIdaSdk_ROOT_DIR=${PWD}/../third_party/idasdk"" \
    -DBINEXPORT_ENABLE_BINARYNINJA=ON \
cmake --build . --config Release
ctest --build-config Release --output-on-failure
cmake --install . --config Release --strip
```

Note: If you don't want to use Ninja to perform the actual build, omit
the `-G Ninja` part.

To disable the IDA Pro build, set `-DBINEXPORT_ENABLE_IDAPRO=OFF`. Likewise, to
disable the Binary Ninja build, set `-DBINEXPORT_ENABLE_BINARYNINJA=OFF`.

This will download and build Abseil, GoogleTest, Protocol Buffers and the
Binary Ninja API. If all went well, the `build_linux/binexport-prefix`
directory should contain two the files `binexport12_ida.so` and
`binexport12_ida64.so` (for use with `ida` and `ida64`, respectively) as well
as `binexport12_binaryninja.so` (for Binary Ninja).


### macOS

#### Prerequisites

The preferred build environment is macOS 12 ""Monterey"" using Xcode
14. Using macOS 13 ""Ventura"" should also work.

After installing the Developer Tools, make sure to install the command-line
tools as well:

```bash
sudo xcode-select --install
```

The following sections assume that your current working directory is at the root
of the cloned repository.

#### CMake

Download the latest stable version of CMake from the official site and mount its
disk image:

```bash
curl -fsSL https://github.com/Kitware/CMake/releases/download/v3.25.1/cmake-3.25.1-Darwin-x86_64.dmg \
    -o $HOME/Downloads/cmake-osx.dmg
hdiutil attach $HOME/Downloads/cmake-osx.dmg
```

At this point you will need to review and accept CMake's license agreement. Now
install CMake:

```bash
sudo cp -Rf /Volumes/cmake-3.25.1-Darwin-x86_64/CMake.app /Applications/
hdiutil detach /Volumes/cmake-3.25.1-Darwin-x86_64
sudo /Applications/CMake.app/Contents/bin/cmake-gui --install
```

The last command makes CMake available in the system path.

#### IDA SDK

Unzip the contents of the IDA SDK into `third_party/idasdk`. Shown commands are
for IDA 7.6:

```bash
unzip PATH/TO/idasdk76.zip -d third_party/idasdk
mv third_party/idasdk/idasdk76/* third_party/idasdk
rmdir third_party/idasdk/idasdk76
```

#### Build BinExport

With all prerequisites in place, configure and build BinExport and run
its tests:

```bash
mkdir -p build_mac && cd build_mac
cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    ""-DCMAKE_INSTALL_PREFIX=${PWD}"" \
    -DBINEXPORT_ENABLE_IDAPRO=ON \
    ""-DIdaSdk_ROOT_DIR=${PWD}/../third_party/idasdk"" \
    -DBINEXPORT_ENABLE_BINARYNINJA=ON \
cmake --build . --config Release -- ""-j$(sysctl -n hw.logicalcpu)""
ctest --build-config Release --output-on-failure
cmake --install . --config Release --strip
```

Note: This will use the standard CMake ""Makefile Generator"". You can use XCode
or Ninja as generators as well.

To disable the IDA Pro build, set `-DBINEXPORT_ENABLE_IDAPRO=OFF`. Likewise, to
disable the Binary Ninja build, set `-DBINEXPORT_ENABLE_BINARYNINJA=OFF`.

This will download and build Abseil, GoogleTest, Protocol Buffers and the
Binary Ninja API. If all went well, the `build_mac/binexport-prefix`
directory should contain two the files `binexport12_ida.dylib` and
`binexport12_ida64.dylib` (for use with `ida` and `ida64`, respectively) as well
as `binexport12_binaryninja.dylib` (for Binary Ninja).


### Windows

The preferred build environment is Windows 10 (64-bit Intel) using the Visual
Studio 2022 compiler and the [Windows SDK for Windows
10](https://dev.windows.com/en-us/downloads/windows-10-sdk).

#### CMake

Download and install the latest stable CMake (3.25.1 at the time of writing)
from its [download page](https://cmake.org/download/). Make sure to select
""Add CMake to the system PATH for all users"".

#### Git

Download and install Git from its [download
page](https://git-scm.com/download/win). Make sure to select the following
options: * The installation directory should be left at the default
`%ProgramFiles%\Git\bin\git.exe` * ""Use Git from the Windows Command Prompt"" -
have the setup utility add Git to your system path. * ""Use Windows' default
console window"" - to be able to use Git from the regular command prompt.

#### Prepare

The following sections assume an open command prompt with the current working
directory located at the root of the cloned BinExport repository:

```bat
git clone https://github.com/google/binexport.git
cd binexport
```

#### IDA SDK

Unzip the contents of the IDA SDK into `third_party/idasdk`. Shown commands are
for IDA 7.6, assuming that Git was installed into the default directory first:

```bat
""%ProgramFiles%\Git\usr\bin\unzip"" PATH\TO\idasdk76.zip -d third_party
rename third_party\idasdk76 idasdk
```

#### Build BinExport

With all prerequisites in place, configure and build BinExport:

```bat
if not exist build_msvc mkdir build_msvc
cd build_msvc
cmake .. ^
    -G ""Visual Studio 17 2022"" ^
    -DCMAKE_BUILD_TYPE=Release ^
    ""-DCMAKE_INSTALL_PREFIX=%cd%"" ^
    -DBINEXPORT_ENABLE_IDAPRO=ON ^
    -DIdaSdk_ROOT_DIR=%cd%\..\third_party\idasdk ^
    -DBINEXPORT_ENABLE_BINARYNINJA=ON
cmake --build . --config Release -- /m /clp:NoSummary;ForceNoAlign /v:minimal
ctest --build-config Release --output-on-failure
cmake --install . --config Release --strip
```

Note: This will use the CMake ""Visual Studio"" generator. You can use the Ninja
generator as well.

To disable the IDA Pro build, set `-DBINEXPORT_ENABLE_IDAPRO=OFF`. Likewise, to
disable the Binary Ninja build, set `-DBINEXPORT_ENABLE_BINARYNINJA=OFF`.

This will download and build Abseil, GoogleTest, Protocol Buffers and the
Binary Ninja API. If all went well, the `build_msvc/binexport-prefix`
directory should contain two the files `binexport12_ida.dll` and
`binexport12_ida64.dll` (for use with `ida.exe` and `ida64.exe`, respectively) as well
as `binexport12_binaryninja.dll` (for Binary Ninja).
","BinExport is a plugin/extension for the disassemblers IDA Pro, Binary Ninja and
Ghidra. It exports disassembly data into the Protocol Buffer format that BinDiff
requires. BinExport can be downloaded from the [releases] page of the BinExport
repository. It is available in the `java/Bin Export' directory. The BinExport
source code is available for Linux, macOS and Windows. It can also be downloaded
as a zip file from the repository."
2188,Blockchain and Crytocurrency Resources,"# Blockchain-stuff

Curated list of blockchain and general cryptocurrency resources

# Table of Contents

- [Bitcoin Books](#bitcoin)
- [Blockchain Art](#blockchain-art)
- [Blockchain Books](#blockchain-books)
- [Courses](#courses)
- [Documentaries](#documentaries)
- [Ethereum and Smart Contracts](#ethereum-and-smart-contracts)
- [Explorers](#explorers)
- [Infographics](#infographics)
- [Talks](#talks)
- [White Papers](#white-papers)
- [Youtube Channels](#youtube-channels)
- [Assets](#assets)
- [Private Blockchains](#private-blockchain)




### Blockchain Books
* [Blockchain Explained: A Technology Guide to the Bitcoin and Cryptocurrency Fintech Revolution](https://www.amazon.com/Blockchain-Explained-Technology-Cryptocurrency-Revolution/dp/1535315946/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=1535315946&pd_rd_r=615DFBPATQX6GX4RBPWP&pd_rd_w=96Va0&pd_rd_wg=M6xmm&psc=1&refRID=615DFBPATQX6GX4RBPWP) - R.J Simmons
* [Blockchain Fast and Simple - What It Is, How It Works, Why It Matters: Understand the basics, join the revolution](https://www.amazon.com/Blockchain-Fast-Simple-Understand-revolution-ebook/dp/B01M1J671W/ref=sr_1_1?s=books&ie=UTF8&qid=1476984683&sr=1-1&keywords=Blockchain+Fast+and+Simple+-+What+It+Is%2C+How+It+Works%2C+Why+It+Matters%3A+Understand+the+basics%2C+join+the+revolution) - Pierro Martini
* [Cryptocurrency Investment: How to Invest in Cryptocurrencies and Make Money in the Long-term](https://www.amazon.com/dp/B07588PNMR) - Tamas Torok
* [Blockchain Revolution: How the Technology behind Bitcoin Is Changing Money, Business, and the World](https://www.amazon.com/Blockchain-Revolution-Technology-Changing-Business/dp/1101980133/ref=pd_sim_14_11?_encoding=UTF8&pd_rd_i=1101980133&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) -  Don and AlexTapscott
* [Blockchain Revolution: The Ultimate Guide to Mastering Bitcoin and How to Use Blockchain for Your Benefit](https://www.amazon.com/Blockchain-Revolution-Technology-Changing-Business/dp/1101980133/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=1101980133&pd_rd_r=JMGHCB5WB1SFP0HYMK6E&pd_rd_w=uHeeo&pd_rd_wg=cburT&psc=1&refRID=JMGHCB5WB1SFP0HYMK6E) - Phil Stein
* [Blockchain The Ultimate Guide to Understanding the Hidden Economy](https://www.amazon.com/Blockchain-Ultimate-Understanding-Hidden-Economy/dp/1534839720/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=1534839720&pd_rd_r=6W5M79GD2JFECEZDHPJF&pd_rd_w=19drm&pd_rd_wg=DMS0s&psc=1&refRID=6W5M79GD2JFECEZDHPJF) -s Oscar Flynt
* [Blockchain: Blueprint for a New Economy](https://www.amazon.com/Blockchain-Blueprint-Economy-Melanie-Swan/dp/1491920491/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1491920491&pd_rd_r=3KQXC5RXYM1R64CDQ0DW&pd_rd_w=YGgzx&pd_rd_wg=udR6C&psc=1&refRID=3KQXC5RXYM1R64CDQ0DW) - Melanie Swan
* [Blockchain: Easiest Ultimate Guide To Understand Blockchain](https://www.amazon.com/Blockchain-Understand-Programming-Contracts-Revolution/dp/1537533371/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1537533371&pd_rd_r=904DCPSY2QZX2VM23XQD&pd_rd_w=3oCFL&pd_rd_wg=jJFBs&psc=1&refRID=904DCPSY2QZX2VM23XQD) - Jared Norton
* [Blockchain: Quick Start Guide to Understanding Blockchain, the Biggest Revolution in Financial Technology and Beyond Since the Internet](https://www.amazon.com/Blockchain-Understanding-Revolution-Financial-Technology/dp/153469093X/ref=pd_sim_14_1?_encoding=UTF8&pd_rd_i=153469093X&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) - Seth Ramsey
* [Blockchain: The Comprehensive Guide to Mastering the Hidden Economy](https://www.amazon.com/Blockchain-Comprehensive-Mastering-Technology-Financial/dp/1537272039/ref=pd_sim_14_9?_encoding=UTF8&pd_rd_i=1537272039&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) - Timothy Short
* [Blockchain: The Essential Guide to Understanding the Blockchain Revolution](https://www.amazon.com/Blockchain-Essential-Guide-Understanding-Revolution/dp/1537317504/ref=pd_sim_14_2?_encoding=UTF8&pd_rd_i=1537317504&pd_rd_r=N3211HRZ6T4ETTER3MY3&pd_rd_w=I44Hf&pd_rd_wg=evC6k&psc=1&refRID=N3211HRZ6T4ETTER3MY3) - Jeff Reed
* [Blockchain: The Future of Internet Innovation - Ideas, Applications and Uses for Blockchain Technology](https://www.amazon.com/Blockchain-Innovation-Applications-Cryptocurrencies-Technological-ebook/dp/B01G80V3O2/ref=sr_1_2?ie=UTF8&qid=1476985977&sr=8-2&keywords=Blockchain+contracts+and+CyberLaw) - Jerry Kershen
* [Blockchain: The Simple Guide To Everything You Need To Know](https://www.amazon.com/Blockchain-Simple-Guide-Everything-Need/dp/1533161577/ref=pd_sim_14_23?_encoding=UTF8&pd_rd_i=1533161577&pd_rd_r=26RQGPJBS5V65WXKFS9Z&pd_rd_w=DJMVN&pd_rd_wg=E1guu&psc=1&refRID=26RQGPJBS5V65WXKFS9Z) - Jacob William
* [Bye Bye Banks?: How Retail Banks are Being Displaced, Diminished and Disintermediated by Tech Startups and What They Can Do to Survive](https://www.amazon.com/Bye-Banks-Displaced-Diminished-Disintermediated/dp/0993220649/ref=sr_1_1?ie=UTF8&qid=1476986040&sr=8-1&keywords=Bye+Bye+Banks%3F) - James Haycock
* [Decentralized Applications: Harnessing Bitcoin's Blockchain Technology](https://www.amazon.com/Decentralized-Applications-Harnessing-Blockchain-Technology/dp/1491924543/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1491924543&pd_rd_r=7XN6AJY2PX75QDZTZAPM&pd_rd_w=ZDHwi&pd_rd_wg=oQ9Te&psc=1&refRID=7XN6AJY2PX75QDZTZAPM) - Siraj Raval
* [Financial Technology: This Book Bundle Includes FinTech and Blockchain](https://www.amazon.com/Financial-Technology-Bundle-FinTech-Blockchain/dp/1533477299/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1533477299&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) -  Jacob William
* [How to Program a Block Chain Explorer with Python and Bitcoin](https://www.amazon.com/Program-Block-Explorer-Python-Bitcoin-ebook/dp/B014B6890G/ref=sr_1_1?s=books&ie=UTF8&qid=1476984581&sr=1-1&keywords=How+to+Program+a+Block+Chain+Explorer+with+Python+and+Bitcoin) - Alex Gorale
* [The Business Blockchain: Promise, Practice, and Application of the Next Internet Technology](https://www.amazon.com/FINTECH-Book-Technology-Entrepreneurs-Visionaries/dp/111921887X/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=111921887X&pd_rd_r=Z5ZRQN8RG5TEQTMKYHA9&pd_rd_w=qIgXN&pd_rd_wg=wZM9d&psc=1&refRID=Z5ZRQN8RG5TEQTMKYHA9) -  William Mougayar
* [The FinTech Book: The Financial Technology Handbook for Investors, Entrepreneurs and Visionaries](https://www.amazon.com/FINTECH-Book-Technology-Entrepreneurs-Visionaries/dp/111921887X/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=111921887X&pd_rd_r=Z5ZRQN8RG5TEQTMKYHA9&pd_rd_w=qIgXN&pd_rd_wg=wZM9d&psc=1&refRID=Z5ZRQN8RG5TEQTMKYHA9) - Susanne Chishti and Janos Barberis
* [The Fourth Industrial Revolution](https://www.amazon.com/Fourth-Industrial-Revolution-Klaus-Schwab/dp/1944835008/ref=sr_1_1?s=books&ie=UTF8&qid=1476984488&sr=1-1&keywords=The+Fourth+Industrial+Revolution) - Prof Klaus Schwab
* [The Science of the Blockchain](https://www.amazon.com/Science-Blockchain-Inverted-Forest-Publishing/dp/1522751831/ref=pd_sim_14_10?_encoding=UTF8&pd_rd_i=1522751831&pd_rd_r=FF7D9XVT7EPCACXH29Z8&pd_rd_w=JXBSj&pd_rd_wg=pcc0Z&psc=1&refRID=FF7D9XVT7EPCACXH29Z8) - Roger Wattenhofer
* [ValueWeb: How FinTech firms are using mobile and blockchain technologies to create the Internet of Value](https://www.amazon.com/ValueWeb-Fintech-Blockchain-Technologies-Internet/dp/9814677175/ref=pd_sim_14_10?_encoding=UTF8&pd_rd_i=9814677175&pd_rd_r=BCCHSTJWGE32H74XN9GZ&pd_rd_w=2YGDw&pd_rd_wg=UB9kN&psc=1&refRID=BCCHSTJWGE32H74XN9GZ) -Chris Skinner
* [Building Ethereum ĐApps](https://www.manning.com/books/building-ethereum-dapps) -Roberto Infante


### White papers
* [A Fistful of Bitcoins: Characterizing Payments Among Men with No Names](http://cseweb.ucsd.edu/~smeiklejohn/files/imc13.pdf) - University of San Diego California
* [A brave new world? What impact will distributed ledger technology have on the financial industry?](https://www.ecb.europa.eu/paym/pdf/infocus/20160422_infocus_dlt.pdf) -  The European Central Bank
* [An Architecture for the Internet of Money](https://docs.google.com/document/d/1Bc-kZXROTeMzG6AvH7rrTrUy24UwHoEcgiL7ALHMO0A/pub) - Meher Roy
* [Banking in a world of programmable assets](https://www.accenture.com/t20160509T223022__w__/us-en/_acnmedia/PDF-16/Accenture-Strategy-Banking-World-of-Programmable-Assets.pdf) - Accenture
* [Bitcoin Primer](http://www.macroriskadvisors.com/layout/pdf/bitcoin%20primer%20BTC.pdf) - Macro Risk Advisors
* [Bitcoin as Money?](http://www.bostonfed.org/economic/current-policy-perspectives/2014/cpp1404.pdf) - Stephanie Lo and J. Christina Wang
* [Bitcoin](http://research.microsoft.com/pubs/156072/bitcoin.pdf) - Microsoft Research
* [BlockChain Technology Beyond Bitcoin](http://scet.berkeley.edu/wp-content/uploads/BlockchainPaper.pdf) - University of California,Berkeley
* [Blockchain: practical implications of a revolutionary technology for financial markets and beyond](https://www.dlapiper.com/en/uk/insights/events/2016/04/blockchain-practical-implications/11-apr-2016/)  - DLA Piper
* [Blockchain: the solution for transparency in product supply chains](https://www.provenance.org/whitepaper) - Project Provenance Ltd
* [Blockstack: A Global Naming and Storage System Secured by Blockchains](https://blockstack.org/blockstack.pdf) - Muneeb Ali, Jude Nelson, Ryan Shea and Michael J. Freedman
* [Bootstrapping Trust in Distributed Systems with Blockchains](https://blockstack.org/blockstack-login.pdf) - Muneeb Ali, Jude Nelson, Ryan Shea and Michael J. Freedman
* [Consensus – Immutable agreement for the internet of value](https://assets.kpmg.com/content/dam/kpmg/pdf/2016/06/kpmg-blockchain-consensus-mechanism.pdf) - KPMG
* [Distributed Ledger Technology: beyond block chain](https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/492972/gs-16-1-distributed-ledger-technology.pdf) - UK Government Chief Scientific Adviser
* [Economics of Bitcoin](http://nakamotoinstitute.org/static/docs/economics-of-bitcoin.pdf) - Peter Surda
* [Enabling Blockchain Innovations with Pegged Sidechains](https://blockstream.com/sidechains.pdf) - Adam Back, Matt Corallo, Luke Dashjr, Mark Friedenbach, Gregory Maxwell, Andrew Miller, Andrew Poelstra, Jorge Timón, and Pieter Wuille
* [Extending Existing Blockchains with Virtualchain](https://blockstack.org/virtualchain.pdf) - Jude Nelson, Muneeb Ali, Ryan Shea and Michael J. Freedman
* [The Impact and Potential of Blockchain on the Securities Transaction Lifecycle](http://www.zyen.com/Publications/The%20Impact%20and%20Potential%20of%20Blockchain%20on%20the%20Securities%20Transaction%20Lif....pdf) - The Swift Institute
* [World Citizenship by Creating Affordable Private Passport Service](https://docs.google.com/document/d/1hq52GT0sQ8mJBZ3_qr-LIpZTBFqIDA2WV8vb_1m8i4U/edit#) - Chris Ellis

### Bitcoin
* [Who is Bitcoin address owner, mentions on the Internet, forums, scam alerts, and other metadata.](https://allprivatekeys.com/whose-bitcoin-address.php) - Maksim Boyarov
* [Anonymous Cryptocurrencies: The rise of bitcoin alternatives that offer true anonymity](https://www.amazon.com/Cryptocurrencies-bitcoin-alternatives-offer-anonymity/dp/1500682586/ref=pd_sim_14_24?_encoding=UTF8&pd_rd_i=1500682586&pd_rd_r=PMB5GABNHVFM2VHE3WBH&pd_rd_w=6yGsW&pd_rd_wg=yVxm8&psc=1&refRID=PMB5GABNHVFM2VHE3WBH) - Will Martin
* [Bitcoin and Lightning Network on Raspberry Pi](https://www.amazon.com/Bitcoin-Lightning-Network-Raspberry-Pi/dp/1484255216) - Harris Brakmic
* [Bit by Bit: How P2P Is Freeing the World](https://www.amazon.com/Bit-How-P2P-Freeing-World-ebook/dp/B00S085TRS/ref=sr_1_1?ie=UTF8&qid=1476985273&sr=8-1&keywords=Bit+by+Bit) - Jeffery Tucker
* [Bitcoin : A Complete Beginner's Guide - Master The Game](https://www.amazon.com/Bitcoin-Complete-Beginners-Guide-Master-ebook/dp/B01JU6KD9C/ref=sr_1_2?ie=UTF8&qid=1476986332&sr=8-2&keywords=The+Bitcoin+Tutorial%3A) - Luke Sutton
* [Bitcoin Basics](https://www.amazon.com/Bitcoin-Basics-Creating-Investing-Bitcoins/dp/1508478945/ref=pd_sim_14_4?_encoding=UTF8&pd_rd_i=1508478945&pd_rd_r=YMYPCM376H2JNJ9NVB6D&pd_rd_w=0gtr5&pd_rd_wg=iqdC9&psc=1&refRID=YMYPCM376H2JNJ9NVB6D) - Benjamin Tideas
* [Bitcoin Decoded: Bitcoin Beginner's Guide to Mining and the Strategies to Make Money with Cryptocurrencies](https://www.amazon.com/Bitcoin-Decoded-Beginners-Strategies-Cryptocurrencies/dp/061595524X/ref=pd_sim_14_12?_encoding=UTF8&pd_rd_i=061595524X&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) -  Brett Combs,Tom Mitsoff
* [Bitcoin For Dummies](https://www.amazon.com/Bitcoin-Dummies-Prypto/dp/1119076137/ref=pd_sim_14_30?_encoding=UTF8&pd_rd_i=1119076137&pd_rd_r=26RQGPJBS5V65WXKFS9Z&pd_rd_w=DJMVN&pd_rd_wg=E1guu&psc=1&refRID=26RQGPJBS5V65WXKFS9Z) - Prypto
* [Bitcoin Internals: A Technical Guide to Bitcoin](https://www.amazon.com/Bitcoin-Internals-Technical-Guide-ebook/dp/B00DG8EPT0/ref=sr_1_1?ie=UTF8&qid=1476985144&sr=8-1&keywords=Bitcoin+Internals%3A) - Chris Clark
* [Bitcoin Step by Step for Beginners: How to Invest and Profit from Bitcoin Today!](https://www.amazon.com/Bitcoin-Step-Beginners-Invest-Profit-ebook/dp/B00K5RUKEE/ref=sr_1_1?ie=UTF8&qid=1476986366&sr=8-1&keywords=Bitcoin+Step+by+Step) - Leo Kallstrom
* [Bitcoin The Future of Money](https://www.amazon.com/Bitcoin-future-money-Dominic-Frisby/dp/1783521023/ref=pd_sim_14_19?_encoding=UTF8&pd_rd_i=1783521023&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Dominic Frisby
* [Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction](https://www.amazon.com/Bitcoin-Cryptocurrency-Technologies-Comprehensive-Introduction/dp/0691171696/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=0691171696&pd_rd_r=0CHWWTBSREYE58R7P0SX&pd_rd_w=gCU04&pd_rd_wg=gZavr&psc=1&refRID=0CHWWTBSREYE58R7P0SX) - Arvind Narayanan,Joseph Bonneau,Edward Felten, Andrew Miller,Steven Goldfeder ([free version of first draft](https://d28rh4a8wq0iu5.cloudfront.net/bitcointech/readings/princeton_bitcoin_book.pdf?a=1))
* [Bitcoin and The Future of Money](https://www.amazon.com/Bitcoin-Future-Money-Jose-Pagliery/dp/1629370363/ref=pd_sim_14_14?_encoding=UTF8&pd_rd_i=1629370363&pd_rd_r=NHZ4SY5ACXYYFA2FN5PK&pd_rd_w=WI1XD&pd_rd_wg=LtNFM&psc=1&refRID=NHZ4SY5ACXYYFA2FN5PK) - Jose Pagliery
* [Bitcoin for the Befuddled](https://www.amazon.com/Bitcoin-Befuddled-Conrad-Barski/dp/1593275730/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=1593275730&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Conrad Barski and Chris Wilmer
* [Bitcoin in English](https://www.amazon.com/Bitcoin-English-Understanding-HOW-Works-ebook/dp/B00X09LBX8/ref=sr_1_1?ie=UTF8&qid=1476985191&sr=8-1&keywords=Bitcoin+in+English) - Peter H Le
* [Bitcoin: Mastering Bitcoin & Cyptocurrency for Beginners](https://www.amazon.com/Bitcoin-Mastering-Cyptocurrency-Reinventing-Currencies/dp/153342733X/ref=pd_sim_14_6?_encoding=UTF8&pd_rd_i=153342733X&pd_rd_r=TJJ3Y2F85RACYQSF23GZ&pd_rd_w=kwfLQ&pd_rd_wg=koGbV&psc=1&refRID=TJJ3Y2F85RACYQSF23GZ) - Tim Harris
* [Digital Gold: The Untold Story of Bitcoin](https://www.amazon.com/Digital-Gold-Bitcoin-Millionaires-Reinvent/dp/0062362496/ref=pd_sim_14_1?_encoding=UTF8&pd_rd_i=0062362496&pd_rd_r=D7KMJCP493PPH9ADVPCR&pd_rd_w=g5Hrb&pd_rd_wg=KsfK5&psc=1&refRID=D7KMJCP493PPH9ADVPCR) -  Nathaniel Popper
* [Everything you need to know about buying, selling and investing in Bitcoin](https://www.amazon.com/Everything-selling-investing-Bitcoin-Technology/dp/1493699474/ref=pd_sim_14_17?_encoding=UTF8&pd_rd_i=1493699474&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - A. H Smithers
* [Mastering Bitcoin: Unlocking Digital Cryptocurrencies](https://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Cryptocurrencies/dp/1449374042/ref=sr_1_1?ie=UTF8&qid=1476978890&sr=8-1&keywords=Mastering+Bitcoin%3A+Unlocking+Digital+Cryptocurrencies) Andreas M.  Antonopoulos
* [The Age of Cryptocurrency: How Bitcoin and Digital Money are challenging the Global Economic Order](https://www.amazon.com/Age-Cryptocurrency-Bitcoin-Challenging-Economic/dp/1250065631/ref=pd_sim_14_6?_encoding=UTF8&pd_rd_i=1250065631&pd_rd_r=7XN6AJY2PX75QDZTZAPM&pd_rd_w=ZDHwi&pd_rd_wg=oQ9Te&psc=1&refRID=7XN6AJY2PX75QDZTZAPM) - Paul Vigna and Michael J. Casey
* [The Anatomy of a Money-Like Informational Commodity: A study of Bitcoin](https://www.amazon.com/Anatomy-Money-like-Informational-Commodity-Bitcoin-ebook/dp/B00MEAO7XK/ref=sr_1_1?ie=UTF8&qid=1476985224&sr=8-1&keywords=The+Anatomy+of+a+Money) - Tim Swanson
* [The Bitcoin Bible](https://www.amazon.com/Bitcoin-Bible-Gold-Benjamin-Guttmann/dp/3732296962/ref=pd_sim_14_18?_encoding=UTF8&pd_rd_i=3732296962&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Benjamin Guttmann
* [The Bitcoin Big Bang: How Alternative Currencies Are About to Change the World](https://www.amazon.com/Bitcoin-Big-Bang-Alternative-Currencies/dp/1118963660/ref=pd_sim_14_13?_encoding=UTF8&pd_rd_i=1118963660&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Brian Kelly
* [The Bitcoin Tutor: Unlocking the Secrets of Bitcoin](https://www.amazon.com/Bitcoin-Tutor-Unlocking-Secrets/dp/0979864917/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=0979864917&pd_rd_r=QZN41AYGXJSCS7Q32WA7&pd_rd_w=2i7o1&pd_rd_wg=nbCJJ&psc=1&refRID=QZN41AYGXJSCS7Q32WA7) - Marc A. Carignan
* [The Bitcoin Tutorial: Develop an intuitive understanding of the currency and blockchain technology](https://www.amazon.com/Bitcoin-Tutorial-understanding-blockchain-technology-ebook/dp/B01EP9SVE8/ref=sr_1_1?ie=UTF8&qid=1476986332&sr=8-1&keywords=The+Bitcoin+Tutorial%3A) - Bruce Kleinman
* [The Black Book of Bitcoin: A Step-by-Step Bitcoin Guide on Everything You Need to Know About this New Currency](https://www.amazon.com/Black-Book-Bitcoin-Step-Step/dp/1519284527/ref=pd_sim_14_22?_encoding=UTF8&pd_rd_i=1519284527&pd_rd_r=PMB5GABNHVFM2VHE3WBH&pd_rd_w=6yGsW&pd_rd_wg=yVxm8&psc=1&refRID=PMB5GABNHVFM2VHE3WBH) - Mark Janniro
* [The Book of Satoshi](https://www.amazon.com/Book-Satoshi-Collected-Writings-Nakamoto/dp/0996061312/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=0996061312&pd_rd_r=9QB4ZB20S6CY4NGE029X&pd_rd_w=2TjP2&pd_rd_wg=VjLqC&psc=1&refRID=9QB4ZB20S6CY4NGE029X) - Paul Champagne
* [The Digital Money Game: Competing in the multi-trillion dollar payments industry](https://www.amazon.com/Digital-Money-Game-Competing-multi-trillion-ebook/dp/B00LZ3T66K/ref=sr_1_1?ie=UTF8&qid=1476985249&sr=8-1&keywords=The+Digital+Money+Game%3A) - Charmaine Oak
* [The Internet of Money - Andreas M Antonopoulos](https://www.amazon.com/Internet-Money-Andreas-M-Antonopoulos/dp/1537000454/ref=pd_bxgy_14_img_2?_encoding=UTF8&pd_rd_i=1537000454&pd_rd_r=XPR2XE7MNFCYAB70VZDM&pd_rd_w=xn5TU&pd_rd_wg=4Sqi0&psc=1&refRID=XPR2XE7MNFCYAB70VZDM)
* [Understanding Bitcoin: Cryptography, Engineering and Economics](https://www.amazon.com/Understanding-Bitcoin-Cryptography-Engineering-Economics/dp/1119019168/ref=pd_sim_14_16?_encoding=UTF8&pd_rd_i=1119019168&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Pedro Franco
* [Virtual Billions: The Genius, the Drug Lord, and the Ivy League Twins behind the Rise of Bitcoin](https://www.amazon.com/Virtual-Billions-Genius-League-Bitcoin/dp/163388144X/ref=sr_1_1?ie=UTF8&qid=1476986258&sr=8-1&keywords=Virtual+Billions%3A+The+Genius) - Eric Geissinger
* [Wildcat Currency](https://www.amazon.com/Wildcat-Currency-Virtual-Revolution-Transforming/dp/0300186134/ref=sr_1_1?ie=UTF8&qid=1476986207&sr=8-1&keywords=Wildcat+Currency) - Edward Castronova
* [The Bitcoin Standard](https://www.amazon.com/Bitcoin-Standard-Decentralized-Alternative-Central/dp/1119473861) - Saifedean Ammous

### Ethereum and Smart Contracts
* [A Proof of Stake Design Philosophy](https://medium.com/@VitalikButerin/a-proof-of-stake-design-philosophy-506585978d51#.43e2aeta8) - Vitalik Buterin
* [Blockchain contracts and CyberLaw](https://www.amazon.com/BLOCKCHAIN-CONTRACTS-CYBERLAW-PAVAN-DUGGAL-ebook/dp/B019S2I1CE/ref=sr_1_1?ie=UTF8&qid=1476985977&sr=8-1&keywords=Blockchain+contracts+and+CyberLaw) - Pavan Duggal
* [EatTheBlocks](https://eattheblocks.com)
* [Ethereum Builder's Guide](https://www.gitbook.com/book/ethereumbuilders/guide/details) - Ethereum
* [Ethereum Frontier Guide](https://ethereum.gitbooks.io/frontier-guide/) - Ethereum
* [Ethereum: A look into the world of Ethereum and everything you need to know about it's trade and investment](https://www.amazon.com/Ethereum-everything-investment-Blockchain-Cryptocurrency-ebook/dp/B01IC6NT8S/ref=sr_1_1?ie=UTF8&qid=1476984793&sr=8-1&keywords=Ethereum%3A+A+look+into+the+world+of+Ethereum+and+everything+you+need+to+know+about+it%27s+trade+and+investment%21) - Ben Abner
* [Ethereum: The Complete Beginners Guide -Blockchain, Cryptocurrencies, Ethereum](https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=Ethereum%3A+The+Complete+Beginners+Guide)  - Ray Hammond
* [FinTech: Financial Technology and Modern Finance in the 21st Century](https://www.amazon.com/FinTech-Financial-Technology-Blockchain-Contracts-ebook/dp/B01MEFL03W/ref=sr_1_1?ie=UTF8&qid=1476985691&sr=8-1&keywords=FinTech%3A+Financial+Technology+and+Modern+Finance+in+the+21st+Century) - Jeff Reed
* [Great Chain of Numbers: A Guide to Smart Contracts, Smart Property and Trustless Asset Management](https://www.amazon.com/Great-Chain-Numbers-Contracts-Management-ebook/dp/B00IRUBMXO/ref=sr_1_1?ie=UTF8&qid=1476985949&sr=8-1&keywords=Great+Chain+of+Numbers%3A+A+Guide+to+Smart+Contracts%2C+Smart+Property+and+Trustless+Asset+Management) - Tim Swanson
* [Learn Ethereum Dapps: Build a ToDo List with a Solidity smart contract](https://eattheblocks.com/learn-to-build-an-ethereum-dapp-step-by-step-ebook-tutorial-for-beginners/)
* [Investing In Ethereum: The Complete Guide To Smart Investing - Learn How To Easily Profit From Cryptocurrencies!](https://www.amazon.com/Investing-Ethereum-Complete-Easily-Cryptocurrencies/dp/1537677209/ref=sr_1_fkmr0_1?ie=UTF8&qid=1476985775&sr=8-1-fkmr0&keywords=Ethereum%3A+The+Complete+Beginners+Guide) - 	Thomas Sanders
* [Investing in Ethereum: The Ultimate Guide to Learning and Profiting from--Cryptocurrencies](https://www.amazon.com/Investing-Ethereum-Learning-Profiting-Cryptocurrencies/dp/153530281X/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=153530281X&pd_rd_r=EH8VPZEJ5BMM540BQEZW&pd_rd_w=CywQ3&pd_rd_wg=p4U9s&psc=1&refRID=EH8VPZEJ5BMM540BQEZW) - Oscar Flynt
* [Investing in Ethereum: Understanding Cryptocurrencies for the Smart Investor](https://www.amazon.com/Investing-Ethereum-Understanding-Cryptocurrencies-Investor-ebook/dp/B01DD6XVJE/ref=sr_1_1?ie=UTF8&qid=1476985905&sr=8-1&keywords=investing+in+Ethereum%3A+Understanding) - Michael K Nungesser
* [Practical Guide to Smart Contracts](https://www.gitbook.com/book/smart-contract-japan/prictical-guide-of-smart-contracts/details) - Smart Contract Japan
* [Smart Contracts: How to Use Blockchain Smart Contracts for Cryptocurrency Exchange](https://www.amazon.com/Smart-Contracts-Blockchain-Cryptocurrency-Exchange-ebook/dp/B01IQJM53Q/ref=sr_1_1?ie=UTF8&qid=1476984876&sr=8-1&keywords=Smart+Contracts%3A+How+to+Use+Blockchain) - Oscar Flynt
* [Smart Contracts: The Essential Guide to Using Blockchain Smart Contracts for Cryptocurrency Exchange](https://www.amazon.com/Smart-Contracts-Essential-Blockchain-Cryptocurrency-ebook/dp/B01LXGO7GH/ref=sr_1_1?ie=UTF8&qid=1476985747&sr=8-1&keywords=Smart+Contracts%3A+The+Essential+Guide) - Jeff Reed
* [Smart Contracts: The Ultimate Guide To Blockchain Smart Contracts - Learn How To Use Smart Contracts For Cryptocurrency Exchange!](https://www.amazon.com/Smart-Contracts-Ultimate-Blockchain-Cryptocurrency-ebook/dp/B01LYK175F/ref=sr_1_2?ie=UTF8&qid=1476984876&sr=8-2&keywords=Smart+Contracts%3A+How+to+Use+Blockchain) - Terry Parker
* [The Modern Ethereum](https://www.amazon.com/Modern-Ethereum-Ryan-Venter-ebook/dp/B01KIRQZ0S/ref=sr_1_1?ie=UTF8&qid=1476985723&sr=8-1&keywords=The+Modern+Ethereum) - Ryan Venter
* [TurboEthereum Guide](https://www.gitbook.com/book/gavofyork/turboethereum/details) - Gavin Wood
* [Building Ethereum ĐApps](https://www.manning.com/books/building-ethereum-dapps) -Roberto Infante


### Infographics
- [Bitcoin's History 2008-2014](https://i.imgur.com/kVF3kFu.png)
- [How a Transaction Works](https://i.imgur.com/fZyX3Od.jpg)
- [Crypto Table - A Periodic Table of Cryptocurrencies](https://jes.al/crypto-table/)

### Talks
* [Balaji Srinivasan gives a quick talk at Goldman Sachs. (14 min)](https://www.youtube.com/watch?v=7-vYEsfsa30)
* [Balaji Srinivasan on Silicon Valley’s ultimate exit, the USA the Microsoft of nations (16 min)](https://www.youtube.com/watch?v=cOubCHLXT6A)
* [Beyond Bitcoin - Block Chains and the Future of Trustless Computing (27 min)](https://www.youtube.com/watch?v=IgETC2JMUBI)
* [Bitcoin Is Exciting Because It's Cheap](https://www.youtube.com/watch?t=26&v=DyAufA2lWn0) - Bill Gates
* [Bitcoin threatens Kleptocracy (7 min):](http://youtu.be/jaHqtXvGxy4)
* [Bitcoin. Sweat. Tide. Meet the future of branded currency.(11min)](https://www.ted.com/talks/paul_kemp_robertson_bitcoin_sweat_tide_meet_the_future_of_branded_currency?language=en) - Paul Kemp-Robertson
* [Convergex Group, Nick Colas (3min):](https://www.youtube.com/watch?v=CdVVECKKSXo)
* [Defining bitcoin ownership, 2 min](https://www.youtube.com/watch?v=TANjGSo16Uk)
* [Ending the Federal Reserve's Monopoly (6 min):](http://vimeo.com/94697840)
* [Everything You Need to Know About Bitcoin](https://www.youtube.com/watch?v=SNssKmeXrGs) - Reihan Salams
* [How Cryptocurrencies Can Succeed: the Stripe Perspective(20min)](https://www.youtube.com/watch?v=6qZwl7mukZ8) - Greg Brockman
* [How the Blockchain is Changing Money and Business (19 min)](https://www.ted.com/talks/don_tapscott_how_the_blockchain_is_changing_money_and_business?language=en) - Don Tapscott
* [Internet vs Bitcoin (3min):](https://www.youtube.com/watch?v=s0luLPVHkO4)
* [Join The Bitcoin Revolution (4min):](https://www.youtube.com/watch?v=24ce5tV-pgg)
* [TEDx, Crytpocurrencies like Bitcoin are coming, and it's a good thing (11min):](https://www.youtube.com/watch?v=0GL9PTQiqxw) - Juan Llanos
* [Powerful Technology Transforming Society: (6min)](http://www.youtube.com/watch?v=YIVAluSL9SUA)
* [Quick Introduction to Bitcoin (5min)](https://www.youtube.com/watch?v=slFuj5N4twc)
* [Stefan Molyneux- Money, Power and Politics (30min):](https://www.youtube.com/watch?v=_bmlVqs9qSY)
* [Stopping War: (1 min)](https://www.youtube.com/watch?v=eyU3TgQqtV8)
* [TEDx, Distributing Power & Trust (18min)](https://www.youtube.com/watch?v=WI1pbHi1fww) -  Eric Spano
* [Testimony for the Australian Senate Commitee on Economics References(36min)](https://www.youtube.com/watch?v=XotOwt8bTeI&feature=youtu.be)
* [The Future of Bitcoin: New Applications and Rebuilding the banking system: (28min)](https://www.youtube.com/watch?v=mD4L7xDNCmA) - Mike Hearn
* [The Story of Genesis: (3min)](http://youtu.be/gD4llSr-Ik8)
* [The future will be decentralized (14mins)](https://www.youtube.com/watch?v=97ufCT6lQcY) - Charles Hoskinson
* [Xapo, the history of money (5 min):](http://youtu.be/IP0jCjyrew8)
* [Masters of Blockchain (11 episodes)](http://mastersofblockchain.org/)


### Youtube Channels
* [AirBitz](https://www.youtube.com/channel/UCJaTFo0_z9lEG_v7L_LT2pw/videos)
* [Andreas Antonopolous](https://www.youtube.com/user/aantonop)
* [Andy Ofiesh](https://www.youtube.com/user/JellyBaby68/videos)
* [Bitcoin Embassy](https://www.youtube.com/user/JellyBaby68/videos)
* [Bitcoin Foundation](https://www.youtube.com/user/BitcoinFoundation/videos)
* [Bitcoin Wednesday](https://www.youtube.com/channel/UCt-Po2gFQxiUngwJXh6s04w/videos)
* [Blockchain University](https://www.youtube.com/channel/UCJ5uHx90mZGlK0lC-GSmtzw/videos)
* [Blockstack](https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ)
* [Bruce Fenton First Mover](https://www.youtube.com/user/BruceFenton/videos)
* [Coin Brief](https://www.youtube.com/user/Coinbrief/videos)
* [Decentral.tv](https://www.youtube.com/user/decentralTV/videos)
* [EatTheBlocks](https://www.youtube.com/c/eattheblocks)
* [Ethereum for Dummies - Dr. Gavin Wood](https://www.youtube.com/watch?v=U_LK0t_qaPo)
* [Draper University](https://www.youtube.com/user/TimothyDraper/videos)
* [EtherCasts](https://www.youtube.com/user/EtherCasts)
* [Ethereum Project](https://www.youtube.com/user/ethereumproject)
* [EverydayCrpto](https://www.youtube.com/user/Cryptoeveryday/videos)
* [Let's Talk Bitcoin](https://www.youtube.com/user/LetsTalkBitcoinChan)
* [MIT Bitcoin Club](https://www.youtube.com/user/MITBitcoinClub/videos)
* [SF Bitcoin Meetup Industry](https://www.youtube.com/channel/UCOLeHoKV7SHwAAS0zBwsV-A/videos)
* [Satoshi Pollen Technical](https://www.youtube.com/user/IamSatoshiNakamoto/videos)
* [Texas Bitcoin Conference](https://www.youtube.com/channel/UCI_T5wLHpVh6URSkxG6-x_g)
* [University Of Nicosia](https://www.youtube.com/user/MScDigitalCurrency/videos)
* [WBN](https://www.youtube.com/channel/UCgo7FCCPuylVk4luP3JAgVw/videos)
* [World Crypto Network](https://www.youtube.com/user/WorldCryptoNetwork)
* [deBitcoin](https://www.youtube.com/user/deBitcoin/videos)
* [Trust Disrupted](https://www.youtube.com/playlist?list=PLHRxVckaE8daSH4OEReWshCKWu3iIOIS-)
* [Introduction to Ethereum and Smart Contracts](https://www.youtube.com/watch?v=r7GVVk8v2Ik)
* [BitcoinLectures.tv](http://bitcoinlectures.tv)

### Courses
* [EatTheBlocks Pro](http://pro.eattheblocks.com)
* [Ethereum DApps In Motion: build a decentralized exchange with Solidity & Truffle](https://www.manning.com/livevideo/ethereum-dapps-in-motion?a_aid=eattheblocks)
* [Bitcoin and Cryptocurrency Technologies ](https://www.coursera.org/learn/cryptocurrency) - Princeton University
* [Bitcoin or How I learned to stop worrying and love Crypto ](https://www.udemy.com/bitcoin-or-how-i-learned-to-stop-worrying-and-love-crypto/#/) - Udemy
* [Bitcoin](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-what-is-it) - Khan Academy Series
* [Crypto Currencies, the Blockchain, and Smart Contracts](https://crypto.stanford.edu/cs251/) - Standford
* [Ethereum Developer: Build A Decentralised Blockchain App](https://www.udemy.com/ethereum-developer/) - Udemy
* [Introduction to Bitcoin and Decentralized Technology By Scott Driscoll](https://www.pluralsight.com/courses/bitcoin-decentralized-technology) - Pluralsight
* [The Basics of Blockchain: A Beginner's Guide to Blockchain](https://www.udemy.com/the-basics-of-blockchain/) - Udemy
* [The Complete Ethereum Course](https://www.udemy.com/ethereum/?couponCode=DEVCON) - udemy
* [Blockchain for Finance Professionals](https://www.experfy.com/training/courses/blockchain-for-finance-professionals) - Experfy
* [Blockchain Technology Fundamentals](https://www.experfy.com/training/courses/blockchain-technology-fundamentals) - Experfy
* [Introduction to Digital Currencies](https://www.unic.ac.cy/blockchain/free-mooc/) - University of Nicosia


### Documentaries
* [Banking on Bitcoin(Trailer)](https://www.youtube.com/watch?v=LJsbebFyM48)
* [Bitcoin in Uganda](https://www.youtube.com/watch?v=BrRXP1tp6Kw)
* [Inside Man with Morgan Spurlock ](http://www.disclose.tv/action/viewvideo/198650/Morgan_Spurlock__Living_On_Bitcoin__The_Inside_Man_Bitcoin_CNN_Full_Documentary/)
* [Bitcoin: Liberating Organic Farmers](http://www.youtube.com/watch?v=fBLpx6gQtUU)
* [Bitcoins in Argentina](http://www.youtube.com/watch?v=e__m-w4N7NI)
* [Life Inside of a Secret Chinese Bitcoin Mine](https://www.youtube.com/watch?v=K8kua5B5K3I)
* [The Bitcoin Doco](https://vimeo.com/112223859)
* [The Rise and Rise of Bitcoin](https://vimeo.com/ondemand/bitcoindoc)


### Blockchain Art
* [Artlery](https://artlery.com)
* [Ascribe](https://www.ascribe.io)
* [Bitmark](https://bitmark.com)
* [Blockai](https://blockai.com)
* [Everledger](http://www.everledger.io)
* [MediaChain Labs](http://www.mediachainlabs.com)
* [Monegraph](https://monegraph.com)
* [Tagsmart](http://www.tagsmart.com)
* [Verisart](https://www.verisart.com)


### Explorers
* [Apirone.com](https://apirone.com/btc/)
* [Bitaps](https://bitaps.com/)
* [Bitinfocharts](https://bitinfocharts.com/bitcoin/explorer/)
* [Block Explorer](https://blockexplorer.com/)
* [Blockchain Size:](https://blockchain.info/charts/blocks-size)
* [Blockonomics](https://www.blockonomics.co/)
* [Blockstack Explorer](https://explorer.blockstack.org/)
* [Blockr](http://blockr.io/)
* [Blocktrail](https://www.blocktrail.com/BTC)
* [Btc Chain](https://btc.com/)
* [Chain Flyer](http://chainflyer.bitflyer.jp)
* [Coin Payments](https://explorer.coinpayments.net/)
* [Coin Prism](https://www.coinprism.info/)
* [CoinGecko](https://www.coingecko.com/en/price_charts/bitcoin/usd/24_hours)
* [Ether.Camp](http://frontier.ether.camp/)
* [EtherChain](https://etherchain.org/)
* [Ethereum Network Stats](https://stats.ethdev.com/)
* [Etherscan](https://etherscan.io/)
* [Ethplorer](https://ethplorer.io/)
* [Etherchain](https://etherchain.org/)
* [Trivial](https://trivial.co/)
* [Insight](https://insight.bitpay.com/)
* [Size of the Network](https://getaddr.bitnodes.io/)
* [Smartbit](https://www.smartbit.com.au/)
* [SoChain](https://chain.so/btc)
* [Tradeblock](https://tradeblock.com/markets)
* [Wallet Explorer](https://www.walletexplorer.com/)
* [WebBtc](https://webbtc.com/)
* [Exchangify](https://exchangify.io/)


### Assets
* [Coinspark](http://coinspark.org/)
* [Chronicled](http://www.chronicled.com/index.html)
* [EverLedger](https://www.everledger.io/)
* [OpenPublish](https://github.com/blockai-unofficial/openpublish)
* [Open Assets Protocol](https://github.com/OpenAssets/open-assets-protocol)

### Private Blockchains
* [Corda](https://www.corda.net/)
* [HyperLedger](https://www.hyperledger.org/)
* [Openchain](https://www.openchain.com/)
","Curated list of blockchain and general cryptocurrency resources. Table of
Contents: [Bitcoin Books], [Blockchain Art], [Courses], [Documentaries],
[Infographics], [Talks], [White Papers], [Youtube Channels."
1635,Tutorial on how to make a custom React renderer,"# Building a custom React renderer

[![Build Status](https://travis-ci.org/nitin42/Making-a-custom-React-renderer.svg?branch=master)](https://travis-ci.org/nitin42/Making-a-custom-React-renderer)

> Let's make a custom React renderer 😎

<p align=""center"">
  <img src=""https://cdn.filestackcontent.com/5KdzhvGRG61WMQhBa1Ql"" width=""630"" height=""350"">
</p>

## Introduction

This is a small tutorial on how to build your custom React renderer and render the components to the host environment you need. The tutorial is divided into three parts -

* **Part 1** - Creating a React reconciler (using [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package).

* **Part 2** - Creating a public interface to the reconciler i.e ""Renderer"".

* **Part 3** - Creating a render method to flush everything to the host environment we need.

## Brief

### [Part-I](./part-one.md)

In part one, we will create a React reconciler using the [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package. We will implement the renderer using Fiber as it has a first-class renderer API for creating custom renderer.

### [Part-II](./part-two.md)

In part two, we will create a public interface to the reconciler i.e a renderer. We will create a custom method for `createElement` and will also architect the component API for our example.

### [Part-III](./part-three.md)

In part three, we will create a render method which will render our input component.

## What we will build?

We will create a custom renderer that will render a React component to a word document. I've already made one. Full source code and the documentation for that is available [here](https://github.com/nitin42/redocx).

We will use [officegen](https://github.com/Ziv-Barber/officegen) for this. I'll explain some of it's basic concepts here.

Officegen can generate Open Office XML files for Microsoft Office 2007 and later. It generates a output stream and not a file.
It is independent of any output tool.

**Creating a document object**

```js
let doc = officegen('docx', { __someOptions__ });
```

**Generating output stream**

```js
let output = fs.createWriteStream (__filePath__);

doc.generate(output);
```

**Events**

`finalize` - It is fired after a stream has been generated successfully.

`error` - Fired when there are any errors

## Running the project

```
git clone https://github.com/nitin42/Making-a-custom-React-renderer
cd Making-a-custom-React-renderer
yarn install
yarn example
```

After you run `yarn example`, a docx file will be generated in the [demo](./demo) folder.

## Contributing

Suggestions to improve the tutorial are welcome 😃.

**If you've completed the tutorial successfully, you can either watch/star this repo or follow me on [twitter](https://twitter.com/NTulswani) for more updates.**

<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer'>
  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer.svg' />
</a>
","This is a small tutorial on how to build your custom React renderer and render
the components to the host environment you need. The tutorial is divided into
three parts -. Creating a React reconciler (using [`react-
reconciler`](https://github.com/facebook/react/tree/master/packages/ React-re
Conciler) Creating a public interface to the reconciler i.e ""Renderer"" Creating
a render method to flush everything to thehost environment we need."
1457,"🛡️ ⚛️ A simple, scalable, and powerful architecture for building production ready React applications. ","# Bulletproof React 🛡️ ⚛️

[![MIT License](https://img.shields.io/github/license/alan2207/bulletproof-react)](https://github.com/alan2207/bulletproof-react/blob/master/LICENCE)
[![CI](https://github.com/alan2207/bulletproof-react/actions/workflows/ci.yml/badge.svg)](https://github.com/alan2207/bulletproof-react/actions/workflows/ci.yml)

A simple, scalable, and powerful architecture for building production ready React applications.

## Introduction

React is an excellent tool for building front-end applications. It has a diverse ecosystem with hundreds of great libraries for literally anything you might need. However, being forced to make so many choices can be overwhelming. It is also very flexible, you can write React applications in any way you like, but that flexibility comes with a cost. Since there is no pre-defined architecture that developers can follow, it often leads to a messy, inconsistent, and over-complicated codebase.

This repo attempts to present a way of creating React applications using some of the best tools in the ecosystem with a good project structure that scales very well. Based on my vast experience working with different codebases, this architecture turns out to be the most effective.

The goal here is to serve as a collection of resources and best practices when developing React applications. It is supposed to showcase solving most of the real-world problems of an application in a practical way and help developers write better applications.

Feel free to explore the codebase to get the most value out of the repo.

#### Disclaimer:

This is not supposed to be a template, boilerplate or a framework. It is an opinionated guide that shows how to do some things in a certain way. You are not forced to do everything exactly as it is shown here, decide what works best for you and your team and stay consistent with your style.

## Table Of Contents:

- [💻 Application Overview](docs/application-overview.md)
- [⚙️ Project Configuration](docs/project-configuration.md)
- [👁️ Style Guide](docs/style-guide.md)
- [🗄️ Project Structure](docs/project-structure.md)
- [🧱 Components And Styling](docs/components-and-styling.md)
- [📡 API Layer](docs/api-layer.md)
- [🗃️ State Management](docs/state-management.md)
- [🧪 Testing](docs/testing.md)
- [⚠️ Error Handling](docs/error-handling.md)
- [🔐 Security](docs/security.md)
- [🚄 Performance](docs/performance.md)
- [🌐 Deployment](docs/deployment.md)
- [📚 Additional Resources](docs/additional-resources.md)

## Contributing

Contributions are always welcome! If you have any ideas, suggestions, fixes, feel free to contribute. You can do that by going through the following steps:

1. Clone this repo
2. Create a branch: `git checkout -b your-feature`
3. Make some changes
4. Test your changes
5. Push your branch and open a Pull Request

## License

[MIT](https://choosealicense.com/licenses/mit/)
","React is an excellent tool for building front-end applications. It has a diverse
ecosystem with hundreds of great libraries for literally anything you might
need. It is also very flexible, you can write React applications in any way you
like, but that flexibility comes with a cost. Since there is no pre-defined
architecture that developers can follow, it often leads to a messy,
inconsistent, and over-complicated codebase. This repo attempts to present a way
of creating React applications using some of the best tools in the ecosystem."
692,Cap'n Proto library and code generator for Go,"# Cap'n Proto bindings for Go

![License](https://img.shields.io/badge/license-MIT-brightgreen?style=flat-square)
[![CodeQuality](https://goreportcard.com/badge/capnproto.org/go/capnp)](https://goreportcard.com/report/capnproto.org/go/capnp/v3)
[![Go](https://github.com/capnproto/go-capnproto2/actions/workflows/go.yml/badge.svg)](https://github.com/capnproto/go-capnproto2/actions/workflows/go.yml)
[![GoDoc](https://godoc.org/capnproto.org/go/capnp/v3?status.svg)][godoc]
[![Matrix](https://img.shields.io/matrix/go-capnp:matrix.org?color=lightpink&label=Get%20Help&logo=matrix&style=flat-square)](https://matrix.to/#/#go-capnp:matrix.org)

[Cap’n Proto](https://capnproto.org/) is an insanely fast data interchange format similar to [Protocol Buffers](https://github.com/protocolbuffers/protobuf), but much faster.

It also includes a sophisticated RPC system based on [Object Capabilities](https://en.wikipedia.org/wiki/Object-capability_model), ideal for secure, low-latency applications.

This package provides:
- Go code-generation for Cap'n Proto
- Runtime support for the Go language
- Level 1 support for the [Cap'n Proto RPC](https://capnproto.org/rpc.html) protocol

Support for Level 3 RPC is [planned](https://github.com/capnproto/go-capnproto2/issues/160).

[godoc]: http://pkg.go.dev/capnproto.org/go/capnp/v3
## Installation

#### To interact with pre-compiled schemas

Ensure that Go modules are enabled, then run the following command:
```
$ go get capnproto.org/go/capnp/v3
```

#### To compile Cap'n Proto schema files to Go

Two additional steps are needed to compile `.capnp` files to Go:

1. [Install the Cap'n Proto tools](https://capnproto.org/install.html).
2. Install the Go language bindings by running:
  ```bash
  go install capnproto.org/go/capnp/v3/capnpc-go@latest  # install go compiler plugin
  GO111MODULE=off go get -u capnproto.org/go/capnp/v3/  # install go-capnproto to $GOPATH
  ```

To learn how to compile a simple schema, [click here](docs/Getting-Started.md#compiling-schema-files).

This package has been tested with version `0.8.0` of the `capnp` tool.

## Documentation

### Getting Started

Read the [""Getting Started"" guide][getting-started] for a high-level introduction to the package API and workflow.
A minimal working RPC example can be found
[here](docs/Getting-Started.md#remote-calls-using-interfaces).

Browse rest of the [Wiki](https://github.com/capnproto/go-capnproto2/wiki) for in depth explanations of concepts, migration guides, and tutorials.

### Help and Support

You can find us on Matrix:   [Go Cap'n Proto](https://matrix.to/#/!pLcnVUHHRZrUPscloW:matrix.org?via=matrix.org)

### API Reference

Available on [GoDoc](http://pkg.go.dev/capnproto.org/go/capnp/v3).

## API Compatibility

Until the official Cap'n Proto spec is finalized, this repository should be considered <u>beta software</u>.

We use [semantic versioning](https://semver.org) to track compatibility and signal breaking changes.  In the spirit of the [Go 1 compatibility guarantee][gocompat], we will make every effort to avoid making breaking API changes within major version numbers, but nevertheless reserve the right to introduce breaking changes for reasons related to:

- Security.
- Changes in the Cap'n Proto specification.
- Bugs.

An exception to this rule is currently in place for the `pogs` package, which is relatively new and may change over time.  However, its functionality has been well-tested, and breaking changes are relatively unlikely.

Note also we may merge breaking changes to the `main` branch without notice.  Users are encouraged to pin their dependencies to a major version, e.g. using the semver-aware features of `go get`.

[gocompat]: https://golang.org/doc/go1compat
## License

MIT - see [LICENSE][] file

[LICENSE]: https://github.com/capnproto/go-capnproto2/blob/master/LICENSE

[getting-started]: docs/Getting-Started.md
","Cap'n Proto is an insanely fast data interchange format similar to [Protocol
Buffers] It also includes a sophisticated RPC system based on [Object
Capabilities] This package has been tested with version `0.8.0` of the `capnp`
tool."
2843,Image Captcha Solving Using TensorFlow and CNN Model. Accuracy 90%+,"# Captcha Solving Using TensorFlow


## Introduction

1. Solve captcha using TensorFlow.
2. Learn CNN and TensorFlow by a practical project.

Follow the steps,
run the code,
and it works!

the accuracy of 4 digits version can be as high as 99.8%!

There are several more steps to put this prototype on production.

**Ping me for paid technical supports**.

[i@jackon.me](mailto:i@jackon.me)


## Table of Contents

- Solve Captcha Using CNN Model

  - Training: 4-digits Captcha
  - Training: 4-letters Captcha
  - Inference: load trained model and predict given images

- Generate DataSet for Training

  - Usage
  - Example 1: 4 chars per captcha, use digits only
  - Example 2: sampling random images

## Solve Captcha Using CNN Model


old code that using tensorflow 1.x is moved to [tensorflow_v1](tensorflow_v1).


#### Training: 4-digits Captcha

this is a perfect project for beginers.

we will train a model of ~90% accuracy in 1 minute using one single GPU card (GTX 1080 or above).

if we increase the dataset by 10x, the accuracy increases to 98.8%.
we can further increase the accuracy to 99.8% using 1M traning images.

here is the source code and running logs: [captcha-solver-tf2-4digits-AlexNet-98.8.ipynb](captcha-solver-tf2-4digits-AlexNet-98.8.ipynb)

Images, Ground Truth and Predicted Values:

there is 1 predicton error out of the 20 examples below. 9871 -> 9821

![](img-doc/result-preview-4digits.png)

Accuracy and Loss History:

![](img-doc/history-4digits.png)

Model Structure:

- 3 convolutional layers, followed by 2x2 max pooling layer each.
- 1 flatten layer
- 2 dense layer

![](img-doc/model-structure-alexnet-for-4digits.png)


#### Training: 4-letters Captcha

this is a more practical project.

the code is the same as the 4-digits version, but the training dataset is much bigger.

it costs 2-3 hours to generate training dataset and costs 30 min to train a 95% accuracy model.

here is the source code and running logs: [captcha-solver-tf2-4letters-AlexNet.ipynb](captcha-solver-tf2-4letters-AlexNet.ipynb)


#### Inference: load trained model and predict given images

example: [captcha-solver-model-restore.ipynb](captcha-solver-model-restore.ipynb)


## Generate DataSet for Training

#### Usage

```bash
$ python datasets/gen_captcha.py  -h
usage: gen_captcha.py [-h] [-n N] [-c C] [-t T] [-d] [-l] [-u] [--npi NPI] [--data_dir DATA_DIR]

optional arguments:
  -h, --help           show this help message and exit
  -n N                 epoch number of character permutations.
  -c C                 max count of images to generate. default unlimited
  -t T                 ratio of test dataset.
  -d, --digit          use digits in dataset.
  -l, --lower          use lowercase in dataset.
  -u, --upper          use uppercase in dataset.
  --npi NPI            number of characters per image.
  --data_dir DATA_DIR  where data will be saved.
```

examples:

![](img-doc/data-set-example.png)

#### Example 1: 4 chars per captcha, use digits only

1 epoch has `10*9*8*7=5040` images, generate 6 epoches for training.

generating the dataset:

```bash
$ python datasets/gen_captcha.py -d --npi=4 -n 6
10 choices: 0123456789
generating 6 epoches of captchas in ./images/char-4-epoch-6/train
generating 1 epoches of captchas in ./images/char-4-epoch-6/test
write meta info in ./images/char-4-epoch-6/meta.json
```

preview the dataset:

```bash
$ python datasets/base.py images/char-4-epoch-6/
========== Meta Info ==========
num_per_image: 4
label_choices: 0123456789
height: 100
width: 120
n_epoch: 6
label_size: 10
==============================
train images: (30240, 100, 120), labels: (30240, 40)
test images: (5040, 100, 120), labels: (5040, 40)
```

#### Example 2: sampling random images

scenario: use digits/upper cases, 4 chars per captcha image.

1 epoch will have `36*35*34*33=1.4M` images. the dataset is too big to debug.

using `-c 10000` param, sampling 10k *random* images.

generating the dataset:

```bash
$ python3 datasets/gen_captcha.py -du --npi 4 -n 1 -c 10000
36 choices: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
generating 1 epoches of captchas in ./images/char-4-epoch-1/train.
only 10000 records used in epoche 1. epoche_count: 1413720
```


## Running Jupyter in docker

tensorflow image: [https://hub.docker.com/r/jackon/tensorflow-2.1-gpu](https://hub.docker.com/r/jackon/tensorflow-2.1-gpu)

```bash
docker pull jackon/tensorflow-2.1-gpu
# check if gpu works in docker container
docker run --rm --gpus all -t jackon/tensorflow-2.1-gpu /usr/bin/nvidia-smi
# start jupyter server in docker container
docker run --rm --gpus all -p 8899:8899 -v $(realpath .):/tf/notebooks -t jackon/tensorflow-2.1-gpu
```
","Learn CNN and TensorFlow by a practical project. The accuracy of 4 digits
version can be as high as 99.8%! The code is the same as the 4-digits version,
but the training dataset is much bigger. We will train a model of ~90% accuracy
in 1 minute using one single GPU card (GTX 1080 or above) If we increase the
dataset by 10x, the accuracy increases to 98.8%. We can further increase the
accuracy to 99. 8% using 1M traning images."
1190,Cascading deletes for Eloquent models that implement soft deletes,"# Cascading soft deletes for the Laravel PHP Framework

[![Build Status](https://github.com/michaeldyrynda/laravel-cascade-soft-deletes/workflows/run-tests/badge.svg)](https://github.com/michaeldyrynda/laravel-cascade-soft-deletes/actions?query=workflow%3Arun-tests)
[![Latest Stable Version](https://poser.pugx.org/dyrynda/laravel-cascade-soft-deletes/v/stable)](https://packagist.org/packages/dyrynda/laravel-cascade-soft-deletes)
[![Total Downloads](https://poser.pugx.org/dyrynda/laravel-cascade-soft-deletes/downloads)](https://packagist.org/packages/dyrynda/laravel-cascade-soft-deletes)
[![License](https://poser.pugx.org/dyrynda/laravel-cascade-soft-deletes/license)](https://packagist.org/packages/dyrynda/laravel-cascade-soft-deletes)
[![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/michaeldyrynda/laravel-cascade-soft-deletes)

## Introduction

In scenarios when you delete a parent record - say for example a blog post - you may want to also delete any comments associated with it as a form of self-maintenance of your data.

Normally, you would use your database's foreign key constraints, adding an `ON DELETE CASCADE` rule to the foreign key constraint in your comments table.

It may be useful to be able to restore a parent record after it was deleted. In those instances, you may reach for Laravel's [soft deleting](https://laravel.com/docs/5.2/eloquent#soft-deleting) functionality.

In doing so, however, you lose the ability to use the cascading delete functionality that your database would otherwise provide. That is where this package aims to bridge the gap in functionality when using the `SoftDeletes` trait.

## Code Samples

```php
<?php

namespace App;

use App\Comment;
use Dyrynda\Database\Support\CascadeSoftDeletes;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Post extends Model
{
    use SoftDeletes, CascadeSoftDeletes;

    protected $cascadeDeletes = ['comments'];

    protected $dates = ['deleted_at'];

    public function comments()
    {
        return $this->hasMany(Comment::class);
    }
}
```

Now you can delete an `App\Post` record, and any associated `App\Comment` records will be deleted. If the `App\Comment` record implements the `CascadeSoftDeletes` trait as well, it's children will also be deleted and so on.

```php
$post = App\Post::find($postId)
$post->delete(); // Soft delete the post, which will also trigger the delete() method on any comments and their children.
```

**Note**: It's important to know that when you cascade your soft deleted child records, there is no way to know which were deleted by the cascading operation, and which were deleted prior to that. This means that when you restore the blog post, the associated comments will not be.

Because this trait hooks into the `deleting` Eloquent model event, we can prevent the parent record from being deleted as well as any child records, if any exception is triggered. A `LogicException` will be triggered if the model does not use the `Illuminate\Database\Eloquent\SoftDeletes` trait, or if any of the defined `cascadeDeletes` relationships do not exist, or do not return an instance of `Illuminate\Database\Eloquent\Relations\Relation`.

## Installation

This trait is installed via [Composer](http://getcomposer.org/). To install, simply add to your `composer.json` file:

```
$ composer require dyrynda/laravel-cascade-soft-deletes
```

## Support

If you are having general issues with this package, feel free to contact me on [Twitter](https://twitter.com/michaeldyrynda).

If you believe you have found an issue, please report it using the [GitHub issue tracker](https://github.com/michaeldyrynda/laravel-cascade-soft-deletes/issues), or better yet, fork the repository and submit a pull request.

If you're using this package, I'd love to hear your thoughts. Thanks!

## Treeware

You're free to use this package, but if it makes it to your production environment you are required to buy the world a tree.

It’s now common knowledge that one of the best tools to tackle the climate crisis and keep our temperatures from rising above 1.5C is to plant trees. If you support this package and contribute to the Treeware forest you’ll be creating employment for local families and restoring wildlife habitats.

You can buy trees [here](https://plant.treeware.earth/michaeldyrynda/laravel-cascade-soft-deletes)

Read more about Treeware at [treeware.earth](https://treeware.earth)
","This package aims to bridge the gap in functionality when using the
`SoftDeletes` trait. It hooks into the `deleting` Eloquent model event. This
means we can prevent the parent record from being deleted as well as any child
records, if any exception is triggered. It's important to know that when you
cascade your soft deleted child records there is no way to know which were
deleted by the cascading operation, andWhich were deleted prior to that. This is
one of the best tools to tackle the climate crisis and keep temperatures from
rising above 1.5C."
1572,Material for the Creating a Compiler video lesson series.,"# Compiler Series

## Chapter 1: Introduction

### Episode 0: Introduction

Video link: https://youtu.be/KwpcOYKfXZc  
Alternative video link: https://youtu.be/96XKY7IRjVM  
Alternative video link: https://youtu.be/WI6Mb1Oh0Xs  
Episode date: 2017-11-18  

Files: `ep0/`

## Chapter 2: Parser and Lexer

### Episode 1: Parser and Lexer

Video link: https://youtu.be/eF9qWbuQLuw  
Episode date: 2017-12-29  

Files: `ep1/`

## Chapter 3: Abstract Syntax Tree

### Episode 2: AST optimizations

Video link: https://youtu.be/QSPaL4aVjRo  
Episode date: 2018-01-29  

Files: `ep2/`

## Chapter 4: Intermediate Representation

### Episode 3: Three-address code

Video link: https://youtu.be/fDKfdyDWdE4  
Episode date: 2018-02-15  

Files: `ep3/`

### Episode 4A: Optimizing IR

Video link: https://youtu.be/wdOpIIzxiNA  
Episode date: 2018-04-08  

Files: `ep4/`

### Episode 4B: Register Renumbering

Video link: https://youtu.be/NOFDr3HjuuQ  
Episode date: 2018-04-29  

Files: `ep5/`

## Chapter 5: Code Generator

(Preliminary episode plan)

### Episode 5A: Fundamental Principles

Video link: https://youtu.be/bIvi6FNyiJA  
Episode date: 2018-06-18

Files: `ep6/`

### Episode 5B: Data Implementation

Video link: https://youtu.be/KNYCUJOzj5c  
Episode date: 2018-10-19

Files: `ep6/`

### Episode 5C: Engine Implementation

Video link: TBA  
Episode date: TBA

Files: `ep6/`

### Episode 5D: Tests and Afterthoughts

Video link: TBA  
Episode date: TBA

Files: `ep6/`
","summarize: # Compiler Series. Chapter 1: Introduction. Chapter 2: Parser and
Lexer. Chapter 3: Abstract Syntax Tree. Chapter 4: Intermediate Representation.
Chapter 5: Code Generator. Chapter 6: Tests and Afterthoughts."
706,Concourse is a container-based continuous thing-doer written in Go.,"# Concourse: the continuous thing-doer.

[![Discord](https://img.shields.io/discord/219899946617274369.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)][discord]
[![Build](https://ci.concourse-ci.org/api/v1/teams/main/pipelines/concourse/badge)](https://ci.concourse-ci.org/teams/main/pipelines/concourse)
[![Contributors](https://img.shields.io/github/contributors/concourse/concourse)](https://github.com/concourse/concourse/graphs/contributors)
[![Help Wanted](https://img.shields.io/github/labels/concourse/concourse/help%20wanted)](https://github.com/concourse/concourse/labels/help%20wanted)

Concourse is an automation system written in Go. It is most commonly used for
CI/CD, and is built to scale to any kind of automation pipeline, from simple to
complex.

![booklit pipeline](screenshots/booklit-pipeline.png)

Concourse is very opinionated about a few things: idempotency, immutability,
declarative config, stateless workers, and reproducible builds.

## The road to Concourse v10

[Concourse v10][v10] is the code name for a set of features which, when used
in combination, will have a massive impact on Concourse's capabilities as a
generic continuous thing-doer. These features, and how they interact, are
described in detail in the [Core roadmap: towards v10][v10] and [Re-inventing
resource types][prototypes] blog posts. (These posts are *slightly* out of
date, but they get the idea across.)

Notably, **v10 will make Concourse not suck for multi-branch and/or
pull-request driven workflows** - examples of *spatial* change, where the set
of things to automate grows and shrinks over time.

Because v10 is really an alias for a ton of separate features, there's a lot
to keep track of - here's an overview:

| Feature                  | RFC              | Status |
| ------------------------ | ---------------- | ------ |
| `set_pipeline` step      | ✔ [#31][rfc-31]  | ✔ v5.8.0 (experimental) |
| Var sources for creds    | ✔ [#39][rfc-39]  | ✔ v5.8.0 (experimental), TODO: [#5813][issue-5813] |
| Archiving pipelines      | ✔ [#33][rfc-33]  | ✔ v6.5.0 |
| Instanced pipelines      | ✔ [#34][rfc-34]  | ✔ v7.0.0 (experimental) |
| Static `across` step     | 🚧 [#29][rfc-29] | ✔ v6.5.0 (experimental) |
| Dynamic `across` step    | 🚧 [#29][rfc-29] | ✔ v7.4.0 (experimental, not released yet) |
| Projects                 | 🚧 [#32][rfc-32] | 🙏 RFC needs feedback! |
| `load_var` step          | ✔ [#27][rfc-27]  | ✔ v6.0.0 (experimental) |
| `get_var` step           | ✔ [#27][rfc-27]  | 🚧 [#5815][issue-5815] in progress! |
| [Prototypes][prototypes] | ✔ [#37][rfc-37]  | ⚠ Pending first use of protocol (any of the below) |
| `run` step               | 🚧 [#37][rfc-37]  | ⚠ Pending its own RFC, but feel free to experiment |
| Resource prototypes      | ✔ [#38][rfc-38]  | 🙏 [#5870][issue-5870] looking for volunteers! |
| Var source prototypes    |                  | 🚧 [#6275][issue-6275] planned, may lead to RFC |
| Notifier prototypes      | 🚧 [#28][rfc-28] | ⚠ RFC not ready |

The Concourse team at VMware will be working on these features, however in the
interest of growing a healthy community of contributors we would really
appreciate any volunteers. This roadmap is very easy to parallelize, as it is
comprised of many orthogonal features, so the faster we can power through it,
the faster we can all benefit. We want these for our own pipelines too! 😆

If you'd like to get involved, hop in [Discord][discord] or leave a comment on
any of the issues linked above so we can coordinate. We're more than happy to
help figure things out or pick up any work that you don't feel comfortable
doing (e.g. UI, unfamiliar parts, etc.).

Thanks to everyone who has contributed so far, whether in code or in the
community, and thanks to everyone for their patience while we figure out how to
support such common functionality the ""Concoursey way!"" 🙏

[issue-5813]: https://github.com/concourse/concourse/issues/5813
[issue-5814]: https://github.com/concourse/concourse/issues/5814
[issue-5815]: https://github.com/concourse/concourse/issues/5815
[issue-5870]: https://github.com/concourse/concourse/issues/5870
[issue-5921]: https://github.com/concourse/concourse/issues/5921
[issue-6275]: https://github.com/concourse/concourse/issues/6275
[pr-5896]: https://github.com/concourse/concourse/pull/5896
[rfc-27]: https://github.com/concourse/rfcs/blob/master/027-var-steps/proposal.md
[rfc-28]: https://github.com/concourse/rfcs/pull/28
[rfc-29]: https://github.com/concourse/rfcs/pull/29
[rfc-31]: https://github.com/concourse/rfcs/blob/master/031-set-pipeline-step/proposal.md
[rfc-32]: https://github.com/concourse/rfcs/pull/32
[rfc-33]: https://github.com/concourse/rfcs/blob/master/033-archiving-pipelines/proposal.md
[rfc-34]: https://github.com/concourse/rfcs/blob/master/034-instanced-pipelines/proposal.md
[rfc-37]: https://github.com/concourse/rfcs/blob/master/037-prototypes/proposal.md
[rfc-38]: https://github.com/concourse/rfcs/blob/master/038-resource-prototypes/proposal.md
[rfc-39]: https://github.com/concourse/rfcs/blob/master/039-var-sources/proposal.md

[v10]: https://blog.concourse-ci.org/core-roadmap-towards-v10/
[prototypes]: https://blog.concourse-ci.org/reinventing-resource-types/

## Installation

Concourse is distributed as a single `concourse` binary, available on the [Releases page](https://github.com/concourse/concourse/releases/latest).

If you want to just kick the tires, jump ahead to the [Quick Start](#quick-start).

In addition to the `concourse` binary, there are a few other supported formats.
Consult their GitHub repos for more information:

* [Docker image](https://github.com/concourse/concourse-docker)
* [BOSH release](https://github.com/concourse/concourse-bosh-release)
* [Kubernetes Helm chart](https://github.com/concourse/concourse-chart)


## Quick Start

```sh
$ wget https://concourse-ci.org/docker-compose.yml
$ docker-compose up
Creating docs_concourse-db_1 ... done
Creating docs_concourse_1    ... done
```

Concourse will be running at [127.0.0.1:8080](http://127.0.0.1:8080). You can
log in with the username/password as `test`/`test`.

> :warning: **If you are using an M1 mac**: M1 macs are incompatible with the `containerd` runtime. After downloading the docker-compose file, change `CONCOURSE_WORKER_RUNTIME: ""containerd""` to `CONCOURSE_WORKER_RUNTIME: ""houdini""`.
**This feature is experimental**

Next, install `fly` by downloading it from the web UI and target your local
Concourse as the `test` user:

```sh
$ fly -t ci login -c http://127.0.0.1:8080 -u test -p test
logging in to team 'main'

target saved
```

### Configuring a Pipeline

There is no GUI for configuring Concourse. Instead, pipelines are configured as
declarative YAML files:

```yaml
resources:
- name: booklit
  type: git
  source: {uri: ""https://github.com/vito/booklit""}

jobs:
- name: unit
  plan:
  - get: booklit
    trigger: true
  - task: test
    file: booklit/ci/test.yml
```

Most operations are done via the accompanying `fly` CLI. If you've got Concourse
[installed](https://concourse-ci.org/install.html), try saving the above example
as `booklit.yml`, [target your Concourse
instance](https://concourse-ci.org/fly.html#fly-login), and then run:

```sh
fly -t ci set-pipeline -p booklit -c booklit.yml
```

These pipeline files are self-contained, maximizing portability from one
Concourse instance to the next.


### Learn More

* The [Official Site](https://concourse-ci.org) for documentation,
  reference material, and example pipelines (which no longer live in this repository).
* The [Concourse Tutorial](https://concoursetutorial.com) by Stark & Wayne is
  great for a guided introduction to all the core concepts.
* See Concourse in action with our [production pipelines](https://ci.concourse-ci.org/)
* Hang around in the [GitHub discussions](https://github.com/concourse/concourse/discussions) or in
  [Discord](https://discord.gg/MeRxXKW).
* See what we're working on on the [project board](https://github.com/orgs/concourse/projects). 


## Contributing

Our user base is basically everyone that develops software (and wants it to
work).

It's a lot of work, and we need your help! If you're interested, check out our
[contributing docs](CONTRIBUTING.md).

[discord]: https://discord.gg/MeRxXKW
","Concourse is an automation system written in Go. It is most commonly used for
CI/CD, and is built to scale to any kind of automation pipeline. Concourse is
very opinionated about a few things: idempotency, immutability, stateless
workers, and reproducible builds."
3414,Quiz & Assignment of Coursera,"# Coursera Assignments
This repository is aimed to help Coursera learners who have difficulties in their learning process.  
The quiz and programming homework is belong to coursera.Please **Do Not** use them for any other purposes.  
Please feel free to contact me if you have any problem,my email is wcshen1994@163.com.

* [Bayesian Statistics From Concept to Data Analysis](./Bayesian_Statistics_From_Concept_to_Data_Analysis_UC_Santa_Cruz)

* [Learn to Program: Crafting Quality Code](./Learn_to_Program_Crafting_Quality_Code_University_of_Toronto)

* [Neural Networks for Machine Learning-University of Toronto](./Neural_Networks_for_Machine_Learning_University_of_Toronto)

* Specialization Advanced Machine Learning Higher School of Economics
  * Introduction to Deep Learning

* [Specialization Applied Data Science with Python](./Specialization_Applied_Data_Science_with_Python_University_of_Michigan)
  * Introduction to Data Science in Python
  * Applied Machine Learning in Python

* [Specialization Big Data-UCSD](./Specialization_Big_Data_UC_San_Diego)
  * Introduction to Big Data
  * Big Data Modeling and Management Systems
  * Big Data Interation and Processing

* [Specialization Data Mining-UIUC](./Specialization_Data_Mining_UIUC)
  * Text Retrieval and Search Engines
  * Text Mining and Analytics
  * Pattern Discovery in Data Mining
  * Cluster Analysis in Data Mining

* [Specialization Data Science-Johns Hopkins University](./Specialization_Data_Science_Johns_Hopkins_University)
  * The Data Scientist’s Toolbox
  * R Programming
  * Getting and Cleaning Data

* [Specialization Data Structures & Algorithms-UC San Diego](./Specialization_Data_Structures_Algorithms_UC_San_Diego)
  * Algorithmic Toolbox
  * Data Structures
  * Algorithms on Graphs
  * Algorithms on Strings

* [Specialization Deep Learning](./Specialization_Deep_Learning_deeplearning.ai)
  * Neural Networks and Deep Learning
  * Improving Deep Neural Networks Hyperparameter tuning, Regularization and Optimization
  * Structuring Machine Learning Projects
  * Convolutional Neural Networks
  * Sequence Models

* [Specialization Functional Programming in Scala](./Specialization_Functional_Programming_in_Scala)
  * Functional Programming Principles in Scala

* Specialization Fundamentals of Computing-Rice University
  * Principles of Computing 1

* [Specialization Meachine Learning-University of Washington](./Specialization_Machine_Learning_University_of_Washington)
  * Machine Learning Foundations: A Case Study Approach
  * Machine Learning: Regression
  * Machine Learning: Classification
  * Machine Learning: Clustering & Retrieval

* [Specialization Probabilistic Graphical Models-Stanford University](./Specialization_Probabilistic_Graphical_Models_Stanford_University)
  * Probabilistic Graphical Models 1: Representation
  * Probabilistic Graphical Models 2: Inference
  * Probabilistic Graphical Models 3: Learning

* [Specialization 程序设计与算法-Peking University](./Specialization_Program_Design_Algorithm_Peking_University)
  * 计算导论与C语言基础
  * C程序设计进阶
  * C++程序设计
  * 算法基础
  * 数据结构基础

* [Specialization Recommender System-University of Minnesota](./Specialization_Recommender_System_University_of_Minnesota)
  * Introduction to Recommender Systems: Non-Personalized and Content-Based
  * Nearest Neighbor Collaborative Filtering
  * Recommender Systems:Evaluation and Metrics
  * Matrix Factorization and Advanced Techniques

* [Specialization Statistics with R-Duke University](./Specialization_Statistics_with_R_Duke_University)
  * Introduction to Probability and Data
  * Inferential Statistics
* [The Unix Workbench-Johns Hopkins University](./The_Unix_Workbench_Johns_Hopkins_University)
","This repository is aimed to help Coursera learners who have difficulties in
their learning process. The quiz and programming homework is belong to coursera.
Please **Do Not** use them for any other purposes. Please feel free to contact
me if you have any problem,my email is wcshen1994@163.com."
636,Quiz & Assignment of Coursera,"# Coursera Assignments
This repository is aimed to help Coursera learners who have difficulties in their learning process.  
The quiz and programming homework is belong to coursera.Please **Do Not** use them for any other purposes.  
Please feel free to contact me if you have any problem,my email is wcshen1994@163.com.

* [Bayesian Statistics From Concept to Data Analysis](./Bayesian_Statistics_From_Concept_to_Data_Analysis_UC_Santa_Cruz)

* [Learn to Program: Crafting Quality Code](./Learn_to_Program_Crafting_Quality_Code_University_of_Toronto)

* [Neural Networks for Machine Learning-University of Toronto](./Neural_Networks_for_Machine_Learning_University_of_Toronto)

* Specialization Advanced Machine Learning Higher School of Economics
  * Introduction to Deep Learning

* [Specialization Applied Data Science with Python](./Specialization_Applied_Data_Science_with_Python_University_of_Michigan)
  * Introduction to Data Science in Python
  * Applied Machine Learning in Python

* [Specialization Big Data-UCSD](./Specialization_Big_Data_UC_San_Diego)
  * Introduction to Big Data
  * Big Data Modeling and Management Systems
  * Big Data Interation and Processing

* [Specialization Data Mining-UIUC](./Specialization_Data_Mining_UIUC)
  * Text Retrieval and Search Engines
  * Text Mining and Analytics
  * Pattern Discovery in Data Mining
  * Cluster Analysis in Data Mining

* [Specialization Data Science-Johns Hopkins University](./Specialization_Data_Science_Johns_Hopkins_University)
  * The Data Scientist’s Toolbox
  * R Programming
  * Getting and Cleaning Data

* [Specialization Data Structures & Algorithms-UC San Diego](./Specialization_Data_Structures_Algorithms_UC_San_Diego)
  * Algorithmic Toolbox
  * Data Structures
  * Algorithms on Graphs
  * Algorithms on Strings

* [Specialization Deep Learning](./Specialization_Deep_Learning_deeplearning.ai)
  * Neural Networks and Deep Learning
  * Improving Deep Neural Networks Hyperparameter tuning, Regularization and Optimization
  * Structuring Machine Learning Projects
  * Convolutional Neural Networks
  * Sequence Models

* [Specialization Functional Programming in Scala](./Specialization_Functional_Programming_in_Scala)
  * Functional Programming Principles in Scala

* Specialization Fundamentals of Computing-Rice University
  * Principles of Computing 1

* [Specialization Meachine Learning-University of Washington](./Specialization_Machine_Learning_University_of_Washington)
  * Machine Learning Foundations: A Case Study Approach
  * Machine Learning: Regression
  * Machine Learning: Classification
  * Machine Learning: Clustering & Retrieval

* [Specialization Probabilistic Graphical Models-Stanford University](./Specialization_Probabilistic_Graphical_Models_Stanford_University)
  * Probabilistic Graphical Models 1: Representation
  * Probabilistic Graphical Models 2: Inference
  * Probabilistic Graphical Models 3: Learning

* [Specialization 程序设计与算法-Peking University](./Specialization_Program_Design_Algorithm_Peking_University)
  * 计算导论与C语言基础
  * C程序设计进阶
  * C++程序设计
  * 算法基础
  * 数据结构基础

* [Specialization Recommender System-University of Minnesota](./Specialization_Recommender_System_University_of_Minnesota)
  * Introduction to Recommender Systems: Non-Personalized and Content-Based
  * Nearest Neighbor Collaborative Filtering
  * Recommender Systems:Evaluation and Metrics
  * Matrix Factorization and Advanced Techniques

* [Specialization Statistics with R-Duke University](./Specialization_Statistics_with_R_Duke_University)
  * Introduction to Probability and Data
  * Inferential Statistics
* [The Unix Workbench-Johns Hopkins University](./The_Unix_Workbench_Johns_Hopkins_University)
","This repository is aimed to help Coursera learners who have difficulties in
their learning process. The quiz and programming homework is belong to coursera.
Please **Do Not** use them for any other purposes. Please feel free to contact
me if you have any problem,my email is wcshen1994@163.com."
1559,Curated collection of blockchain & cryptocurrency resources.,"# CryptoList
Curated collection of blockchain &amp; cryptocurrency links.

# Sponsor
[<img src=""https://github.com/coinpride/CryptoList/blob/master/join_cryptomemes.png?raw=true"" width=""467"">](https://t.me/join_cryptomemes)


# Contents
- [Media](#media)
  - [Magazines and Blogs](#magazines-and-blogs)
  - [Medium](#medium)
  - [Telegram Channels](#telegram-channels)
- [News Aggregators](#news-aggregators)
- [Price Trackers](#price-trackers)
- [ICO Trackers](#ico-trackers)
- [Exchanges](#exchanges)
- [Communities](#communities)
  - [Chats](#chats)
  - [Forums](#forums)
  - [Other](#other)
  - [Twitter Users and Lists](#twitter-users-and-lists)
- [Jobs](#jobs)
- [Wallets](#wallets)
- [Altfolio](#altfolio)
- [Useful Tools](#useful-tools)
- [Video](#video)
  - [YouTube Channels](#youtube-channels)
  - [Movies](#movies)
- [Learning](#learning)
  - [Books](#books)
  - [Courses](#courses)
  - [Other](#other)
- [Trading Tools](#trading-tools)
- [For Developers](#for-developers)
  - [API](#api)
  - [Other](#other)
- [Podcasts](#podcasts)
- [Mining](#mining)
- [Games](#games)
- [Sponsors](#sponsors)
- [Contribute](#contribute)
- [License](#license)

# Media
## Magazines and Blogs
* [CryptoHackers](https://cryptohackers.party/) - Cryptoworld superheroes interviews. Fascinating facts, teams insides and success stories.
* [CoinTelegraph](https://cointelegraph.com/) - The leading publication offering latest news, analysis, expert opinions, community commentaries. Founded in 2013.
* [CoinDesk](https://www.coindesk.com/) - CoinDesk is the world leader in news and information on digital currencies. 17M mothly users.
* [CryptoCoins News](https://www.cryptocoinsnews.com/) - Fresh news and analysis. This huge blog posts very frequently. Approx. 7M readers monthly.
* [Bitcoin Magazine](https://bitcoinmagazine.com/) - Bitcoin Magazine is the oldest and most established source of news, information and expert commentaries. Sometimes posts deep and very interesting articles.
* [99 Bitcoins](https://99bitcoins.com/) - 99 Bitcoins is the largest information source for non technical newbies.
* [Coin Speaker](https://www.coinspeaker.com/) - Founded in 2014, CoinSpeaker is one of the most influentional news source.
* [The Memory Pool](https://nakamotoinstitute.org/mempool/) - Satoshi Nakamoto Institute blog.
* [Tim Swanson Blog](https://www.ofnumbers.com/category/bitcoin/) - Blog of director of market research at R3.
* [Oleg Andreev Blog](https://oleganza.com/) - Blog of hardcore developer, product architect at Chain.com.
* [CoinGape](https://coingape.com) - Global blockchain, cryptocurrency, ICO news, updates, guides and analysis.
* [Freedom to Tinker](https://freedom-to-tinker.com/tag/bitcoin/) - Princeton hosted tech blog: researches and experts commentaries.
* [Money and State](http://moneyandstate.com/) - Blog of Erik Voorhees, CEO of leading digital asset exchange ShapeShift.io
* [Gavin Andersesn Blog](http://gavinandresen.ninja/) - Blog of Bitcoin developer.
* [Peter Todd Blog](https://petertodd.org/) - Blog of Todd, the applied cryptography consultant.
* [Richard Brown Blog](https://gendal.me/tag/bitcoin/) - Blog of Head of Technology at R3CEV.
* [Laanwj Blog](https://laanwj.github.io/) - Blog of Bitcoin core developer and reverse engineer.
* [Crypto Analyst](https://www.cryptoanalyst.co/) - World’s premier cryptocurrency news analysis.
* [Bitrazzi](https://bitrazzi.com/) - Bitcoin, Cryptocurrency And Blockchain News.
* [Bitfalls](https://bitfalls.com) - Technical news, solidity tutorials, and skeptical research. EN and HR languages.
* [What Bitcoin Did](https://www.whatbitcoindid.com/) - Blog of accidental Bitcoin and Cryptocurrency investor, miner, blogger and podcaster.
* [CryptoGround](https://www.cryptoground.com) - Get latest news related to Bitcoin, Ethereum and other cryptocurrencies.

## Medium
* [Vitalik Buterin](https://medium.com/@VitalikButerin) - Ethereum creator, cryptocurrency evangelist.
* [Bitcoin Tech Talk](https://bitcointechtalk.com) - All About Bitcoin Development.
* [Tuur Demeester](https://medium.com/@tuurdemeester) - Economist & investor, editor in chief at Adamant Research.
* [Vinny Lingham](https://vinnylingham.com) - CEO of Civic.com.
* [Nicolas Dorier](https://medium.com/@nicolasdorier) - Main developer of NBitcoin. CTO at Metaco SA.
* [Nick Tomaino](https://thecontrol.co/@ntmoney) - Tech investor @RunaCapital.
* [Eric Lombrozo](https://medium.com/@elombrozo) - Co-CEO & CTO Ciphrex Corp., Bitcoin Core contributor.
* [Jimmy Song](https://medium.com/@jimmysong) - Bitcoin Developer and Entrepreneur.
* [Linda Xie](https://medium.com/@linda.xie) - Product Manager @Coinbase. Advisor @0xProject.
* [Fred Ehrsam](https://medium.com/@FEhrsam) - Previously co-founder @Coinbase, trader @GoldmanSachs, computer science @DukeU.
* [Token Economy](https://tokeneconomy.co) - Making sense of the latest in crypto-land: cryptocurrencies, blockchains, ICOs, dapps & the growing token economy.

## Telegram Channels
* [Crypto Memes](https://t.me/join_cryptomemes) - Cryptoworld funny pictures.
* [Crypto](https://t.me/Crypto) - The god of all crypto channels.
* [UpcomingICOs](https://t.me/UpcomingICOs) - This channel is dedicated to informing people of up and coming ICO's.
* [CryptoNews](https://t.me/bitcoinnews) - Cryptocurrency news megafeed that is posted in real time, even before they hit social media.
* [Ethereum dapps](https://t.me/ethereumdapps) - Ethereum & DAPPS news and updates.
* [Telegram Crypto Groups](http://telegramcryptogroups.com) - Directory of all of Telegram crypto related groups.

# News Aggregators
* [CryptoControl](https://cryptocontrol.io/en/social) - CryptoControl aggregates news from many sources (Twitter, Reddit, Google Trends etc) and displays it in the Trello style.
* [CryptoPanic](https://cryptopanic.com/) - CryptoPanic is news aggregator platform indicating impact on price and market for traders and cryptocurrency enthusiasts.
* [ETHNews](https://www.ethnews.com) - ETHNews is emerging provider of Ethereum and Blockchain ecosystem news.
* [Coin Spectator](https://coinspectator.com/) - Get the latest cryptocurrency, bitcoin & blockchain news from many news sources.
* [CoinsCalendar](http://www.coinscalendar.com/) - CoinsCalendar displays all upcoming coins events and updates.
* [CoinDar](https://coindar.org/) - Be first to know about coming cryptocurrency news, updates, hard forks, meetups, coins listing on exchanges and other important events.
* [BTCnews](https://itunes.apple.com/app/btcnews-bitcoin-cryptocurrency/id946903421) - Mature cryptocurrency news and charts app for iOS.
* [CryptoAudio](http://cryptoaud.io) - A tool that creates news summaries from various sources and reads them using a text-to-speech technology.
* [CryptoFlash.io](https://cryptoflash.io) - Top 200+ cryptocurrencies news & rumors in real time!
* [AmuletPlatform](https://amuletplatform.com/data/) - Real-time sentiment analysis of 24M+ posts about crypto from Reddit and Bitcointalk
* [InTokenWeTrust](https://intwt.com/) - News aggregator platform with all media and blogs about cryptocurrency.


# Price Trackers
* [CoinMarketcap](https://coinmarketcap.com/) - Old and cool. All coins prices, graphs, market caps. API, widgets, tools. Used by 90M monthly users.
* [Coincap](http://coincap.io/) - CoinCap tracks market data for hundreds of cryptocurrencies in real-time. They also have very useful mobile app.
* [Cryptowatch](https://cryptowat.ch) - Live price charts and market data for Bitcoin, Ethereum, and more. Many exchanges, flexible settings and cool API.
* [Bitcoinwisdom](https://bitcoinwisdom.com) - Live Bitcoin/Litecoin charts with EMA, MACD and other indicators. Support many exchanges (Bitfinex, Bitstamp, Coinbase, Bittrex, Poloniex etc).
* [Flippening Watch](https://www.flippening.watch/) - When will Ethereum overtake Bitcoin and become the most important cryptocurrency?
* [Coindex](https://itunes.apple.com/us/app/coindex/id1251487103) - Beautiful cryptocurrency price tracker for iOS.
* [WorldCoinIndex](https://www.worldcoinindex.com/) - Realtime cryptocurrency price monitoring tool. Lots of altcoins and many fiat currencies.
* [CryptTrader](https://cryptrader.com/) - Cryptocurrency trading platform. Charts, news and trollbox. Add widgets to customize the look.
* [Coin Daily Update](https://coindailyupdate.com) - Daily email update with price changes of customizable coins.
* [Coindera](https://coindera.com/) - Real time cryptocurrency price alerts for 2,000+ coins on 25+ exchanges.
* [Cryptocurrency CLI](https://github.com/christ0ph3r/cryptocurrency-cli) - Cryptocurrency portfolio on the command line.
* [ckandr](https://github.com/screwgoth/ckandr) - A command-line cryptocurrency price ticker specifically for popular Indian cryptocurrency exchanges.
* [CoinAlyze](https://coinalyze.net) - Cryptocurrency real-time charts, price levels, statistics and candlestick patterns detection.
* [Cryptomon](https://cryptomon.io) - Modern trading indicators and price predictions based on machine intelligence.
* [MoonHash](https://chrome.google.com/webstore/detail/%E2%97%90-moonhash-crypto-portfol/clbooohlcomlhgkfencdenfiadhkefff?hl=en-US) - Cryptocurrency portfolio, price monitoring and telegram monitoring Google Chrome Extension
* [Coincall](https://coincall.io) - Simplest web-based crypto price and portfolio tracker.
* [Owl Crypto](https://owlcrypto.com) - Cryptocurrency percentage change monitor.
* [Coin Market Manager](https://www.coinmarketman.com) - Smart, accurate, Portfolio tracking. Realtime Breakeven and Profit Loss features.

# ICO Trackers
* [ICOtracker](https://icotracker.net) - Very informative and trusted tracker.
* [The ICO digest](https://theicodigest.com) - Weekly ICO digest.
* [TokenData](https://www.tokendata.io/) - See ICO stats: ROI, total investments, status and other information.
* [CoinSchedule](https://www.coinschedule.com) - Live Token Sales & ICOs.
* [ICO Bazaar](https://icobazaar.com) - Informative website + ICOs alerts.
* [Picoloresearch](https://picoloresearch.com/) - Independent research on blockchain startups and ICOs.
* [Smith + Crown ICO list](https://www.smithandcrown.com/icos/) - Curated list of ongoing and upcoming token sales. Have some research tiers.
* [ICORating](https://icorating.com/) - ICOrating specializes in evaluating companies with planned ICO.
* [ICO Alert](https://www.icoalert.com/) - Source for analysis of active and upcoming Initial Coin Offerings.
* [TokenMarket](https://tokenmarket.net) - TokenMarket is marketplace for tokens, digital assets and blockchain based investing.
* [ICOdrops](https://icodrops.com/) - Constantly updating kanban style ICO board.
* [ICO Whitelists](https://icowhitelists.com) - Articles on ICOs. Also tracks growth of 200+ Telegram groups for ICOs.
* [ICOAlarm](http://www.icoalarmapp.com/) - ICO discovery, analysis, and alerts crossplatform mobile application.
* [ICO Toplist](https://icotoplist.com) - List, review and rate all ICOs: Past, Active and Upcoming ones.

# Exchanges
* [Local Bitcoins](https://localbitcoins.com/) - Buy and sell bitcoins near you. Trusted by 10M monthly users.
* [Poloniex](https://www.poloniex.com/) - USA. Trust: 3.5/5. Tons of altcoins. Poor support.
* [CoinBase](https://www.coinbase.com) - USA. Trust: 5/5. Pay with fiat.
* [Kraken](https://www.kraken.com/) - USA. Trust: 5/5. Founded in 2011.
* [Bittrex](https://www.bittrex.com) - USA. Trust: 3.8/5. Many altcoins.
* [CEX.IO](https://cex.io/) - UK. Trust: 5/5. Fiat. Newbie friendly.
* [BestBitcoinExchange](https://www.bestbitcoinexchange.io/) - Curated list of 35 popular exchanges. Looks SEOish but does the job well.
* [Shapeshift](https://shapeshift.io) - No login, fast, awesome API.
* [Changelly](https://changelly.com/) - Fiat, nice affiliate program.
* [Cryptoradar](https://cryptoradar.co) - Compares prices and features from > 25 exchanges and brokers.
* [Binance](https://www.binance.com) - Modern exchange with the lowest fees and it's own token.
* [Kucoin](https://www.kucoin.com) - Modern. Evolving really fast. Has it's own token.
* [Guarda Exchange](https://guarda.co/exchange) - Anonymous crypto exchange and wallet.
* [DDEX](https://www.ddex.io/) - Decentralized, non-custodial token to token trading powered by 0xproject and Hydro.
* [ForkDelta](https://forkdelta.app/) - One of the earliest and still most popular decentralized exchanges.
* [ChangeNOW](https://changenow.io/) - Limitless and fast coin swaps free of custody.
* [n.exchange](https://n.exchange/) - Open source non-custodial exchange with fiat, a great API and a non-custodial cross chain order book.

# Communities
## Chats
* [Crypto Aquarium](https://cryptoaquarium.com) - Great community (Telegram, Slack). Curated by Joshua Petty, the Coindex creator. 800+ members.
* [Bitpam](https://discordapp.com/invite/VpPrGmF?ref=cryptominded) - Friendly Discord community. 300+ members.
* [Bitcoin Core Community](https://t.me/BitcoinCore) - Telegram discussion about Bitcoin and Bitcoin Core. 2000+ members.
* [Blockstack](https://docs.google.com/forms/d/e/1FAIpQLSed5Mnu0G5ZMJdWs6cTO_8sTJfUVfe1sYL6WFDcD51_XuQkZw/viewform) - Official Blockstack Slack community. 3000+ members.
* [CryptoMinded](https://community.cryptominded.com/) - All things crypto: events, jobs, trades, news. 1000+ Slack members.
* [IRC #bitcoin channel](https://webchat.freenode.net/?channels=bitcoin&uio=d4/) - Old good IRC. The channel of 200 silent people.

## Forums
* [CryptoHeresy ⚡️](https://cryptoheresy.com) - Fresh Bitcoin forum with focus on cryptocurrency tools and resources.
* [Bitcoin Talk](https://bitcoinTalk.org/) - Homepage of the Bitcoin community from the start. Made by Satoshi Nakamoto in 2009.
* [Bitcoin.com Forum](https://forum.bitcoin.com/) - Strong community of 30,000+ users.
* [BitcoinGarden](https://bitcoingarden.org) - This young forum has appeared in Jan 2017.
* [CryptoCurrencyTalk](https://cryptocurrencytalk.com/) - Born in 2013, very active forum. Modern engine.
* [Token Daily](https://www.tokendaily.co) - Crypto news, launches, white papers and Q&A with experts 📈
* [Stadivm](https://stadivm.com/) - Newborn cryptocurrency forum with a potential.

## Other
* [Cryptocompare](https://www.cryptocompare.com) - CryptoCompare is interactive platform where you can discuss the latest crypto trends and monitor all markets streaming in real time. Also includes perfect altfoilio app.
* [Trading View](https://www.tradingview.com/u/DLavrov/) - Follow pro traders and learn from their analyzes. (Mr. Lavrov is great specialist).
* [Bitcoin on StackExchange](https://bitcoin.stackexchange.com/) - Question and answer site for Bitcoin crypto-currency enthusiasts.
* [/r/Bitcoin/](https://www.reddit.com/r/Bitcoin/) - Discuss Bitcoin news on Reddit. 300,000+ readers.
* [Steemit](https://steemit.com) - Fancy Reddit running on a blockchain. Post to earn $. Spend $ to promote yourself.
* [Coinvision](https://www.coinvision.co/) - Get alerts about the most credible crypto coins and ICOs and also access private great community.

## Twitter Users and Lists
* [Quality Crypto](https://twitter.com/followingell/lists/quality-crypto) - List of >50 prominent, high signal-to-noise-ratio accounts.

# Jobs
* [Coinality](https://coinality.com/) - Coinality is free service connecting crypto employers and job seekers.
* [Cryptogrind](https://www.cryptogrind.com/) - Bitcoin freelance platform.
* [Blockchain Dev Jobs](https://blockchaindevjobs.com/) - Curated list of jobs from around the web for blockchain engineers.
* [Ethlance](https://ethlance.com) - Hire or work for ETH.
* [/r/Jobs4Bitcoins/](https://www.reddit.com/r/Jobs4Bitcoins/) - Place on Reddit to offer your talents and skills in exchange for the fastest growing currency in the world.
* [Crypto.jobs](https://crypto.jobs) - Well categorized jobs list. Owner does a lot to promote it.
* [Beincrypto](https://beincrypto.com) - Aggregates all the crypto jobs from major job boards.
* [Jobs by BlockRepublic](https://blockrepublic.io/blockchain-jobs/) - Useful filters, locations & categories.
* [Crypto Jobs List](https://cryptojobslist.com/) - Curated jobs from top verified blockchain companies.


# Wallets
* [Bitcoin Core](https://bitcoin.org/en/download) - Bitcoin Core is MIT licensed open source Bitcoin wallet. It runs own full node so 145GG of free disk space is required. OSX/Linux/Windows/Ubuntu.
* [Blockchain.info](https://blockchain.info/wallet/#/) - World’s most popular digital wallet. Mobile apps included.
* [Electrum](https://electrum.org/#home) - Thin Bitcoin client. Opensource, MIT, has 100+ contributors.
* [Exodus](https://www.exodus.io) - Exodus is the first desktop multi-asset wallet with ShapeShift built in.
* [MyEtherWallet](https://www.myetherwallet.com) - Opensource webapp to access Ethereum. Old and reliable. ERC20 support. Loved by phishers!
* [Coinomi](https://coinomi.com/) - Supports many altcoins, fast and has perfect UI ([closed source now](https://github.com/bitcoin-dot-org/bitcoin.org/issues/1622)).
* [Jaxx](https://jaxx.io) - Reliable, Jaxx supports many of the leading cryptocurrency platforms. Crossplatform.
* [Ledger Hardware](https://www.ledger.com/) - Reliable hardware wallet. Supports BTC/ETH/ETC/DASH/DOGE and many more coins and ERC20 tokens.
* [Trezor Hardware](https://trezor.io) - The first & most secure hardware wallet. Supports BTC/ETH/ETC/DASH/ and many more coins and ERC20 tokens.
* [CoinBase](https://www.coinbase.com/) - Buy Bitcoin for $, NFC payments, requested payments.
* [MyCelium](https://wallet.mycelium.com) - Geeky wallet, easy to set miners fee, rich transaction details.
* [Samourai](https://samouraiwallet.com/) - Secure Bitcoin wallet for Android.
* [WalletList](https://walletlist.me) - Showcase your public cryptocurrency addresses.
* [WalletGenerator.net](https://walletgenerator.net) - Universal JavaScript client-side wallet generator for 100+ coins.

# Altfolio
* [Blockfolio](https://blockfolio.com/) - Cryptocurrency management, with easy to use tools to keep track of all your cryptocurrency investments. Nice widgets. Simple. Android/iOS.
* [ACrypto](https://acrypto.io/) - Track bitcoin and altcoins prices, custom alarms, detailed charts. Flexible, many settings, informative. Available for iOS & Android.
* [Altpocket](https://varrock.altpocket.io/) - The only tool you need for showcasing, tracking and sharing your cryptocurrency investments.
* [Coinfyi](https://coin.fyi) - Track your performance, news & market signals related to your cryptocurrency investments. Anonymous. Simple. Free.
* [f0lio](https://f0l.io) - Beatutiful cryptocurrency portfolio management for mobile devices.
* [BitWorth](https://www.bitworth.app/) - Cryptocurrency Net Worth Tracker for iOS.
* [CoinDex](https://itunes.apple.com/us/app/coindex/id1251487103) - iOS app that lets you stay up to date with the cryptocurrency markets you want to watch.
* [Delta](https://delta.app/) - Ultimate cryptocurrency portfolio tracker tool for iOS & Android.
* [Crypto Central](https://cryptocentral.ai) - Bitcoin & cryptocurrency portfolio tracker for iOS/Android.
* [Cryptagon](https://cryptagon.io) - Powerful app to track portfolio. Automatic imports from exchanges.
* [Cryptonomy](https://www.cryptonomynow.com/) - Portfolio tracking, social, forum, chat, ico listings, news aggregator, crypto academy. Android/iOS.
* [wallmine](https://wallmine.com/stocks-and-cryptocurrency-portfolio-tracker) - Track both cryptocurrencies and stocks; screeners, heatmaps, news, push notifications.
* [CoinTracker](https://www.cointracker.io) - Cryptocurrency asset tracker that automatically pulls all balances and transactions from exchanges and cryptocurrency wallets.
* [Coin Beat](http://www.coinbeatapp.com/) - Crypto tracker for managing over 1300 crypto currencies. Get instant push notification on price activity. iOS and Android.

# Useful Tools
* [QR Code Generator](https://bitcoinqrcodegenerator.win/) - With this free tool you can instantly generate QR code for your Bitcoin/Litecoin/Ethereum/Dogecoin address.
* [Block Explorer](https://tradeblock.com/bitcoin/) - Discover the Bitcoin blockchain blocks online. Includes fees and miners information.
* [EtherScan](https://etherscan.io) - Block Explorer and Analytics Platform for Ethereum.
* [ETH Gas Station](https://ethgasstation.info) - Consumer oriented metrics for the Ethereum Gas Market.
* [Metamask](https://metamask.io/) - Run Ethereum dApps right in your browser without running full node.
* [ATM Map](https://bitcoinatmmap.com/) - Find Bitcoin ATM’s in your country.
* [Statoshi](https://statoshi.info) - Realtime Bitcoin node stats. Made by Jameson Lopp.
* [RSIhunter](https://rsihunter.com/) - Find ""oversold"" and ""overbought"" cryptocurrencies.
* [CryptoFinance](https://cryptofinance.ai/) - Google Sheets add-on to get cryptocurrencies rate in spreadsheets.
* [Vanitygen Plus](https://github.com/exploitagency/vanitygen-plus) - Generate custom key addresses for 90+ coins.
* [CoinPop.me](https://coinpop.me/) - Create shareable page for all your cryptocurrency donation addresses.
* [If You Had Bought Crypto](https://ifyouhadboughtcrypto.com) - How rich would you be if you had invested in your favourite Cryptocurrency?
* [Vaulty.io](https://vaulty.io) - Accept any cryptocurrency for your website, blog, or for general personal use with just one link.
* [Bitcoin Flip Trading simulator](https://bitcoinflip.app/) - 101% realistic and fun crypto trading Simulator for Beginners!
* [QWallet](https://qwallet.io/) - Search & view the value of any Ethereum wallet, create your own token portfolio.
* [Ethplorer](https://ethplorer.io) - Block explorer and analytics platform for Ethereum.
* [EtherChain](https://etherchain.org) - Ethereum Blockchain Explorer.
* [Trivial.co](https://trivial.co) - Network explorer and analytics platform for Ethereum and ERC-20 tokens.
* [HappyDApps](https://happydapps.net) - Web 3.0 browser compatibility check.

# Video
## YouTube Channels
* [The Cryptoverse](https://www.youtube.com/channel/UCLnQ34ZBSjy2JQjeRudFEDw) - Your cryptocurrency news dose.
* [World Crypto Network](https://www.youtube.com/user/WorldCryptoNetwork) - Informative news digests.
* [Crypt0](https://www.youtube.com/user/obham001) - Omar is one of the most popular crypto bloggers. He creates fascinating interviews.
* [Ameer Rosic](https://www.youtube.com/user/AmeerRosic) - News, interviews, podcasts and reviews.
* [aantonop](https://www.youtube.com/user/aantonop/) - Presentations, discussions, QA by Andreas, the author of ""Mastering Bitcoin"".
* [CoinSummit](https://www.youtube.com/channel/UCr4QRCZDXrCecaV2w4nuLeQ/) - CoinSummit records: startups showcases, discussions and presentations.
* [BitcoinFilm](https://www.youtube.com/channel/UC42Y8ajCzQ_rjS_wVTamglQ) - Short films about people using Bitcoin.
* [Bitcoin and Cryptocurrency Course](https://www.youtube.com/channel/UCNcSSleedtfyDuhBvOQzFzQ/videos) - Bitcoin and Cryptocurrency Technologies course. 12 videos, each 45-90 mins.
* [CryptoPortfolio](https://www.youtube.com/channel/UCI9POyyP-f93JHfkhr2ma2g/) - YouTube channel reviewing ICOs and various cryptocurrencies.
* [CryptoBud](https://www.youtube.com/channel/UCAEktd4wejD_N4aPyDPD3zw) - Technical and fundamental analysis on how to invest in cryptocurrencies.
* [Cryptotips](https://www.youtube.com/cryptotips) - Heidi provides you with insights into projects, ICOs and ecosystem, as well as creating videos for beginners.
* [EtherCasts](https://www.youtube.com/user/EtherCasts) - Ancient Ethereum news, reviews and interviews channel.
* [Bitcoin Playlist](https://www.youtube.com/playlist?list=PL05dEp7goGNiKWYdiE4nurEPFMmF9XpzF) - Great list of 55 Bitcoin talks.
* [Decentralized TV](https://www.youtube.com/channel/UCueLJ4vLHTwMpYILmdBjRlg) - Blockchain, Bitcoin, and Cryptocurrency News, Culture, and Entertainment.
* [Crypto Daily](https://www.youtube.com/channel/UC67AEEecqFEc92nVvcqKdhA/) - Crypto news on (mostly) daily basis.

## Movies
* [Ulterior States](http://www.iamsatoshi.com/) - Real-life conversations with some thought leaders within the Bitcoin ecosystem. The film took 3 years to complete.
* [The Bitcoin Doco](https://vimeo.com/112223859) - Fascinating story focusing on the emergence of new world wide currency.
* [Life Inside Secret Chinese Bitcoin Mine](https://www.youtube.com/watch?v=K8kua5B5K3I) - Interesting story about the miners of the new millenium.

# Learning
## Books
* [Mastering Bitcoin](https://bitcoinbook.info/) - Mostly for developers. The second edition was published in June 2017.
* [The Internet of Money](https://www.amazon.com/Internet-Money-Andreas-M-Antonopoulos/dp/1537000454) - Significance of bitcoin through series of essays spanning the exhilarating maturation of this technology.
* [Ethereum](https://www.amazon.com/Ethereum-Blockchains-Decentralized-Autonomous-Organizations/dp/1523930470) - Non-technical guide to understand blockchains. Mostly focused on Ethereum.
* [The Age of Cryptocurrency](https://www.amazon.com/Age-Cryptocurrency-Blockchain-Challenging-Economic/dp/1250081556) - Insight into the modern financial system and the Bitcoin industry.
* [Programming Cryptocurrencies and Blockchains](http://yukimotopress.github.io/blockchains) - Learn to build your own blockchains and peer-to-peer central bank nodes from scratch.

## Courses
* [Coursera Course](https://www.coursera.org/learn/cryptocurrency) - Telling what is special about Bitcoin and how it works at technical level. Created by Princeton University.
* [Udemy Course](https://www.udemy.com/bitcoin-or-how-i-learned-to-stop-worrying-and-love-crypto) - The definitive guide to understand what the bitcoin is and why we should care about them.
* [Khan's Academy Course](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-what-is-it) - The very basics of how blockchain, Bitcoin and encryption works.
* [Pluralsight Course](https://www.pluralsight.com/courses/bitcoin-decentralized-technology) - Introduction to Bitcoin and decentralized technology for beginners.
* [University of Nicosia MOOC](https://digitalcurrency.unic.ac.cy/free-introductory-mooc/) - University of Nicosia´s free MOOC (Massive Open Online Course) DFIN-511: Introduction to Digital Currencies.

## Other
* [CoinPride Newsletter](https://coinpride.com/) - The most important crypto news and events. One handcrafted email per week.
* [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page) - Technical specifications of the protocol as well as more basic information about how to buy, sell or use bitcoins.
* [Blockchain Demo](https://blockchaindemo.io/) - This interactive demo will guide you through each component of blockchain step-by-step.
* [MyCryptoGuide](https://mycrypto.guide/) - The guide is meant to serve as both easy-to-understand introduction to the world of cryptocurrencies.
* [Bad Bitcoin](https://www.badbitcoin.org) - List of known scams, HYIPs and Ponzi schemes.
* [EthList](https://github.com/Scanate/EthList) - The Crowdsourced Ethereum Reading List.
* [Satoshi Nakamoto WhitePaper](https://bitcoin.org/bitcoin.pdf) - Bitcoin fundamentals described by the creator.
* [Bitcoin Developer Docs](https://bitcoin.org/en/developer-guide) - Detailed information about the Bitcoin protocol and related specifications.
* [Bitcoin Forks](https://mapofcoins.com/bitcoin) - All bitcoin forks visualisation.
* [Coin Demo](https://coindemo.io) - Visual demonstration of how bitcoin transactions work.
* [Rhymes With Fiat](https://www.rhymeswithfiat.com) - Bitcoin webcomic (with educational notes).
* [Whitepaper.io](https://whitepaper.io) - All whitepapers in one place.

# Trading Tools
* [Quadency](https://quadency.com) - Crypto trading and real-time portfolio analytics.

# For Developers
## API
* [Shapeshift](https://docs.shapeshift.io/) - Embed exchange in your app. Trusted by hundreds of apps.
* [Bittrex](https://bittrex.github.io) - Almighty API. You can do anything with it.
* [Poloniex](https://docs.poloniex.com) - The biggest exchange API. PHP and Python wrapper.
* [CryptoWatch](https://cryptowat.ch/docs/api) - Public REST API, providing basic information about all markets on Cryptowatch.
* [Microsoft BaaS](https://azure.microsoft.com/en-in/solutions/blockchain/) - Blockchain as Service (BaaS) from Microsoft Azure.
* [CoinMarketCap](https://coinmarketcap.com/api/) - Powerful JSON API covering 1000+ coins. Limit: 1 request per 6 sec.
* [CoinCap](https://docs.coincap.io/) - Simple and informative. Lots of altcoins. History data. No limits.
* [ChangeNOW](https://changenow.io/api/docs) - Easy integration of the cryptocurrency exchange. Limitless and fast coin swaps free of custody.

## Other
* [Bitpay](https://bitpay.com/) - Use BitPay's retail, ecommerce, billing, and donation tools to accept payments.
* [Gekko](https://github.com/askmike/gekko) - Free and open source trading bot. GUI, CLI, NodeJS, nice docs. 18 exchanges (including Bitfinex, Bitstamp and Poloniex).
* [Zenbot](https://github.com/DeviaVir/zenbot) - Free and open source trading bot. CLI, NodeJS. GDAX, Poloniex, Kraken, Bittrex, Quadriga and Gemini.
* [Web3.js](https://github.com/ethereum/web3.js) - Ethereum JS API. Requires nodejs, npm and running node.
* [OpenZeppelin](https://openzeppelin.org) - OpenZeppelin is open framework of reusable and secure smart contracts in the Solidity language. 1500+ Slack community members.
* [GETH](https://www.ethereum.org/cli) - CLI tools for Ethereum. Python, C++, Go implementations.
* [Embark](https://github.com/iurimatias/embark-framework) - Framework for serverless Decentralized Applications using Ethereum, IPFS and other platforms. JS.
* [Truffle](http://truffleframework.com/) - The most popular framework for Ethereum. JS.
* [Ropsten Ethereum Faucet](http://faucet.bitfwd.xyz/) - Instantly get ether to experiment on the Ropsten testnet.
* [Kovan Ethereum Faucet](https://gitter.im/kovan-testnet) - Instantly get ether to experiment on the Kovan testnet.
* [CCXT](https://github.com/ccxt/ccxt) - JS/Python/PHP library for cryptocurrency trading and e-commerce with support for many exchanges and merchant APIs.
* [QuikNode](https://quiknode.io/) - Cloud-hosted Ethereum nodes for developers and investors.
* [Consensys Academy](https://consensys.net/academy/resources/) - Getting started resources by Consensys.
* [Portis](https://portis.io/) - JavaScript SDK that lets people run your Ethereum DApp in the browser, using the same account on all their devices.

# Podcasts (Updated October, 2019)
* [Epicenter](https://epicenter.tv/) - The Podcast at the Forefront of the Decentralized Technology Revolution.
* [Bitcoin Knowledge](http://www.bitcoin.kn/) - Learn about blockchain and fintech.
* [BlockChannel](https://soundcloud.com/blockchannelshow) - Dedicated to educating the world on the power of blockchain based technologies like Bitcoin, Ethereum, and ZCash.
* [Off The Chain] (https://blockworksgroup.io/off-the-chain-podcast) - Host Anthony “Pomp” Pompliano talks to some of the most respected names in crypto and Wall Street to find out how intelligent investors from the new and old financial system are thinking about digital assets.
* [Unchained: Your No-Hype Resource for All Things Crypto] (https://unchainedpodcast.com) - This weekly, hour-long podcast with host Laura Shin dives deep into the people building the decentralized internet, the details of this technology that could underpin our future, and some of the thorniest topics in crypto, such as regulation, security and privacy.
* [What Grinds My Gears] (https://blockworksgroup.io/what-grinds-my-gears-podcast) - From Meltem Demirors and Jill Carlson, What Grinds My Gears is a podcast about the bizarre and buzzworthy happenings in the world of cryptocurrency. Each week, they delve into one key theme in crypto, and examine this theme through a broader financial, political, and cultural lens
* [What Bitcoin Did] (https://www.whatbitcoindid.com/podcast) - In this podcast you will hear host Peter McCormack speak with crypto traders, miners, venture capitalist, investors, technical developers, CEOs, journalist and other people driving forward the growth of Bitcoin and other cryptocurrencies.
* [Untold Stories with Charlie Shrem] (https://blockworksgroup.io/untold-stories-podcast) - Host Charlie Shrem dives deep into the lives and personal histories of some of crypto’s most influential leaders.
* [Tales From The Crypt] (https://anchor.fm/tales-from-the-crypt) - Tales from the Crypt is a podcast hosted by Marty Bent about Bitcoin. Join Marty, Editor in Chief of ""the best newsletter in crypto"", as he sits down to discuss Bitcoin with interesting people.
* [The Token Daily with Soona Amhaz] (https://blockworksgroup.io/the-token-daily-podcast) - Host soona amhaz sits down with the movers and shakers of the crypto industry to discuss the big ideas they spend their days thinking about. Soona and her guests examine everything from industry trends, to what books they’re reading, to human psychology and investing.
* [The Flippening] (https://blog.nomics.com/category/flippening/) - Flippening is for cryptocurrency investors. Each week host Clay Collins discusses the cryptocurrency economy, new investment strategies for maximizing returns, and stories from the front lines of financial disruption.
* [The Chain Reaction Podcast] (https://fiftyonepercent.podbean.com) - Host Tom Shaughnessy of Delphi Digital converses with the top names in crypto and blockchain.
* [Unconfirmed: Insights and Analysis From the Top Minds in Crypto] (https://unchainedpodcast.com/category/unconfirmed/) - This weekly crypto podcast reveals how the marquee names in crypto are reacting to the week’s top headlines. With host Laura Shin, the guests also discuss what they’re thinking about these days and reveal what they believe is on the horizon in crypto
* [The Unhashed Podcast] (https://www.spreaker.com/show/the-unhashed-podcast-bitcoin-blockchain-) - Unhashed breaks down the latest in Bitcoin news and developments and puts them into terms everyone can understand. Expect to be both entertained and educated about cryptocurrencies and blockchain. 
* [The Scoop] (https://www.theblockcrypto.com/the-scoop-podcast) - The Block’s team, led by Frank Chaparro, draw out the freshest and deepest insights about digital assets from traditional Wall Street, crypto native, Fortune 500 and many other crypto ecosystem leaders. 
* [Base Layer] (https://acrabaselayer.podbean.com) - Base Layer with host David Nage will be providing insights from founders and investors in the base layer of cryptoassets. 
* [Blockchain Innovation: Interviewing The Brightest Minds In Blockchain] (https://blockchain.global/blockchain-innovation/) - Blockchain Innovation is where host Frederick Munawa interviews the brightest minds in Blockchain and cryptocurrency — entrepreneurs, executives, and top academics — to discuss present and future applications of Blockchain Technology. 
* [Blockchain Insider] (https://bi.11fs.com/) - Blockchain Insider, hosted by Simon Taylor and Colin Platt is a dedicated podcast specializing in Bitcoin, Blockchain and distributed ledger technology (DLT). Simon and Colin break down the week’s news with expertise and enthusiasm for the blockchain and digital currency sector.
* [Let’s Talk Crypto] (https://schoolofcrypto.com) - Let’s Talk Crypto with Barry Moore and Tom Galeski breaks it all down in easy to understand terms and helps you “learn and earn” in the age of cryptocurrencies.
* [Blockchain 2025] (https://podcast.bitcoin.com/s9-Blockchain-2025) - Blockchain is a technology that will disrupt nearly every industry. Host Matt Aaron and Blake Moore explore one industry in every episode. 
* [IBM Blockchain Pulse] (https://www.ibm.com/blogs/blockchain/category/podcast) - Host and blockchain-evangelist Matt Hooper engages with the planet’s most dynamic blockchain thought-leaders, explorers and innovators to discover the countless new ways blockchain is leaping from theory to reality: From entertainment to identity, from payments to secure supply-chain transparency.
* [Messari’s Unqualified Opinions] (https://blockworksgroup.io/unqualified-opinions) - Unqualified Opinions is a podcast hosted by Messari’s CEO Ryan Selkis featuring candid, fast-paced interviews with crypto’s top builders and investors.
* [The Bitcoin Podcast Network] (https://thebitcoinpodcast.com/category/podcast) - One of the ‘originals’ and hands-down one of the best sources of information on the crypto market available online today.
* [Crypto Street Podcast] (https://cryptostreetpod.podbean.com) - The Crypto Street Podcast is a cryptocurrency podcast hosted by the three Twitter influencers @K1llerWh4le, @13Prince31 and @CryptoDale. With a lot of humor, they address current market trends mixed with opinion-based discussions on the crypto-ecosystem.
* [Ledger Cast] (https://ledgerstatus.com/topic/ledgercast/) - Ledger Cast covers the cryptocurrency industry, including technical and trading analysis, fundamental analysis, and anything else crypto and blockchain related. The podcast is initiated by Ledger Status (@ledgerstatus) who is known for his in-depth technical analysis of cryptoassets.

# Mining
* [CoinWarz](https://www.coinwarz.com) - Mining profitability calculators. Help choosing perfect coin to mine.
* [WhatToMine?](https://whattomine.com) - Find the most profitable cryptocurrencies to mine.
* [Bitcoin Difficulty](https://bitcoinwisdom.com/bitcoin/difficulty) - Realtime Mining Statistics.
* [Mining pools](https://blockchain.info/pools) - Mining pool hashrate distribution.
* [WhatIsMyHashRate?](http://www.whatismyhashrate.com/) - Measure your browser's hashrate.
* [CoinHive](https://coinhive.com/) - Install JS miner on your website.
* [bfgminer](https://github.com/luke-jr/bfgminer) - Multi-threaded miner for ASICs built in C.

# Games
* [CryptoKitties](https://www.cryptokitties.co/) - Collect, breed and trade rare kitties in one of the world's first blockchain games.

# Sponsors
[<img src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/findbitcoinatm_sponsor_logo.png"">](https://www.findbitcoinatm.com.au/)

[<img height=""70"" src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/crypto_weekly_list.png"">](https://cryptoweekly.co/list/?ref=coinpride)

[<img width=""240"" src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/quadency.jpg"">](https://quadency.com/?utm_source=GitHubCL&utm_medium=Sponsorship&utm_campaign=CryptoList)

# Contribute
Found a nice link? Noticed a bug? Feel free to contribute! You are so much welcome! But read the [CONTRIBUTING.md](https://github.com/coinpride/CryptoList/blob/master/CONTRIBUTING.md) first.
# License
<a rel=""license"" href=""https://creativecommons.org/licenses/by-sa/4.0/""><img alt=""Creative Commons License"" style=""border-width:0"" src=""https://licensebuttons.net/l/by-sa/4.0/88x31.png"" /></a><br />This work is licensed under <a rel=""license"" href=""https://creativecommons.org/licenses/by-sa/4.0/"">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
","Summarize: # CryptoList. Curated collection of blockchain &amp; cryptocurrency
links. # Media: Magazines and Blogs. # sponsors: CoinSpeaker, CoinDesk, 99
Bitcoins, The Memory Pool, R3, CoinGape."
258,Crpyocurrency App powered by RapidAPI,"# Cryptoverse - Explore the World of Cryptocurrency

![Cryptoverse](https://i.ibb.co/8gh5Jc8/image.png)

## Introduction
This is a code repository for the corresponding video tutorial. 

In this video, we will create a cryptocurrency app. We're going to use React and multiple APIs powered by https://rapidapi.com.

By the end of this video, you will become the master of working with APIs.
","This is a code repository for the corresponding video tutorial. We're going to
use React and multiple APIs powered by https://rapidapi.com. By the end of this
video, you will become the master of working with APIs. We'll also show you how
to create a cryptocurrency app with React and other tools. We hope you'll find
this video useful. The code repository is also available on GitHub. For more
information, visit the code repository and the video tutorial is available on
YouTube."
910,The C# to Lua compiler,"# CSharp.lua
The C# to Lua compiler.

## Introduction
CSharp.lua is a C# to Lua compiler. Write C# then run on lua VM.
* Build on [Microsoft Roslyn](https://github.com/dotnet/roslyn). Support for C# 9.0.

* Highly readable code generation. C# AST ---> Lua AST ---> Lua Code.

* Allowing almost all of the C# language features.

* Provides [CoreSystem.lua](https://github.com/yanghuan/CSharp.lua/tree/master/CSharp.lua/CoreSystem.Lua/CoreSystem) library, can run away of CLR.

* Self-Compiling, run ""./test/self-compiling/self.bat"".

* Self-Compiling (linux), run ""./make"" (if no errors, will prompt for fibbonacci 'N' value and generate fib sequence in lua)

* Used by .NET Core, Ability to across platforms.

## Sample
C# code
```csharp
using System;

namespace HelloLua {
  public static class Program {
    public static void Main() {
      Console.WriteLine(""hello lua!"");
    }
  }
}
```
To Lua
```lua
-- Generated by CSharp.lua Compiler
local System = System
System.namespace(""HelloLua"", function (namespace) 
  namespace.class(""Program"", function (namespace) 
    local Main
    Main = function () 
      System.Console.WriteLine(""hello lua!"")
    end
    return {
      Main = Main
    }
  end)
end)
```

## Try Live
https://yanghuan.github.io/CSharpLuaWeb/index.html 

## How to Use 
### Command Line Parameters
```cmd
D:\>dotnet CSharp.Lua.Launcher.dll -h
Usage: CSharp.lua [-s srcfolder] [-d dstfolder]
Arguments
-s              : can be a directory where all cs files will be compiled, or a list of files, using ';' or ',' to separate
-d              : destination directory, will put the out lua files

Options
-h              : show the help message and exit
-l              : libraries referenced, use ';' to separate
                  if the librarie is a module, whitch is compield by CSharp.lua with -module arguemnt, the last character needs to be '!' in order to mark  

-m              : meta files, like System.xml, use ';' to separate
-csc            : csc.exe command argumnets, use ' ' or '\t' to separate

-c              : support classic lua version(5.1), default support 5.3
-a              : attributes need to export, use ';' to separate, if """"-a"""" only, all attributes whill be exported
-e              : enums need to export, use ';' to separate, if """"-e"""" only, all enums will be exported
-ei             : enums is represented by a variable reference rather than a constant value, need to be used with -e
-p              : do not use debug.setmetatable, in some Addon/Plugin environment debug object cannot be used
-metadata       : export all metadata, use @CSharpLua.Metadata annotations for precise control
-module         : the currently compiled assembly needs to be referenced, it's useful for multiple module compiled
-inline-property: inline some single-line properties
-include        : the root directory of the CoreSystem library, adds all the dependencies to a single file named out.lua
-noconcurrent   : close concurrent compile
```
Make sure that .NET 6.0 is installed.
https://dotnet.microsoft.com/download/dotnet/6.0


### Download
https://github.com/yanghuan/CSharp.lua/releases

## CoreSystem.lua
[CoreSystem.lua library](https://github.com/yanghuan/CSharp.lua/tree/master/CSharp.lua/CoreSystem.Lua/CoreSystem) that implements most of the [.NET Framework core classes](http://referencesource.microsoft.com/), including support for basic type, delegate, generic collection classes & linq. The Converted lua code, need to reference it  

## Example
- [fibonacci](https://github.com/yanghuan/CSharp.lua/tree/master/test/fibonacci), a console program code, print Fibonacci number. 

## Documentation
https://github.com/yanghuan/CSharp.lua/wiki

## *License*
[Apache 2.0 license](https://raw.githubusercontent.com/yanghuan/CSharp.lua/master/LICENSE).

## *Acknowledgements*
- [Bridge.NET](http://bridge.net/)
- [WootzJs](https://github.com/kswoll/WootzJs)
- [.NET referencesource](http://referencesource.microsoft.com/)
- [Resharper](https://www.jetbrains.com/resharper/)

## Communication
- [Issues](https://github.com/yanghuan/CSharp.lua/issues)
- Mail：sy.yanghuan@gmail.com
- QQ Group: 715350749 (Chinese Only)

","CSharp.lua is a C# to Lua compiler. Write C# then run on lua VM. Build on
[Microsoft Roslyn]. Support for C# 9.0. Highly readable code generation.
Allowing almost all of the C# language features. Provides
[CoreSystem.Lua/CoreSystem) library, can run away of CLR. Can run on all
platforms, including Windows, Mac, Linux, iOS, Android, and Windows Phone. Can
be used to compile C# and Lua programs."
2438,Learn how to bring animation to your web projects,"# CSS Animation 101

![](https://github.com/cssanimation/css-animation-101/raw/master/images/cover-small.png)

Animation using CSS can be overwhelming to learn all at once.

This book gives you a solid introduction to the topic, combining theory with practical lessons. You’ll learn how, and why to use animation on your web pages and hopefully be inspired to try it on your own projects!

## Download

* [ePub version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/epub/cssanimation-101.epub) 
* [PDF version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/pdf/cssanimation-101.pdf)
* [Web version](https://cssanimation.rocks/css-animation-101/)

Find more including free tutorials and other courses at [CSSAnimation.rocks](https://cssanimation.rocks).

## More CSS Animation stuff

I have a great [video course on CSS Animation](https://www.udemy.com/course/level-up-your-css-animation-skills/) you should totally check out. You'll find it a practical guide to building and animating all sorts of parts of a landing page.

I also send out a free weekly [CSS Animation newsletter](https://cssanimation.rocks/weekly/). Sign up and get an email of cool inspiration in your inbox each week.

Lastly, if you want to help me with the above, consider [being a CSS Animation patreon](https://www.patreon.com/cssanimation). I've been running the newsletter for approaching 3 years and will continue to do so thanks to the support of people like you!

## Translations

Want to create a translation? Some tips:

* Fork this repo and rename it `css-animation-101-xx` where `xx` is your language code, such as `cn` or `ru`
* Translate the `chapters` content as well as the meta information
* Don't forget the `ReadMe` file also. Be sure to include a link back to this repo and the site CSSAnimation.rocks.
* Let me know [on Twitter](https://twitter.com/cssanimation) or [by email](mailto:donovan@cssanimation.rocks) and I'll link your work from here

You can find this book in the following languages:

### 中文 (Chinese) 

[Source files](https://github.com/H-Wakanda/css-animation-101-cn)

* [ePub version](https://github.com/H-Wakanda/css-animation-101-cn/raw/master/build/epub/book.epub)
* [Web version](https://h-wakanda.github.io/css-animation-101-cn/)

### العربية (Arabic) 

* [PDF version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/translations/arabic/CSS-Animation-Arabic.pdf): Translated by [@HsoubAcademy](http://academy.hsoub.com)

## Contributing

I love to get feedback, even if just to helpfully point out a typo! Pull requests welcomed, or else you can message me [on Twitter](https://twitter.com/cssanimation) or [by email](mailto:donovan@cssanimation.rocks).

## Technical details

This book is generated with [Pandoc book template](https://github.com/wikiti/pandoc-book-template).

## License

[Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/)
","This book gives you a solid introduction to the topic, combining theory with
practical lessons. You’ll learn how, and why to use animation on your web pages
and hopefully be inspired to try it on your own projects. Find more including
free tutorials and other courses at [CSSAnimation.rocks]."
556,"A lightweight, fast and extensible game server for Minecraft","# Cuberite

[![Jenkins Build Status](https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fbuilds.cuberite.org%2Fjob%2Fcuberite%2Fjob%2Fmaster&label=Jenkins)](https://builds.cuberite.org/job/cuberite/job/master/)
[![AppVeyor Build Status](https://img.shields.io/appveyor/ci/cuberite/cuberite/master.svg?label=AppVeyor)](https://ci.appveyor.com/project/cuberite/cuberite)

Cuberite is a Minecraft-compatible multiplayer game server that is written in C++ and designed to be efficient with memory and CPU, as well as having a flexible Lua Plugin API. Cuberite is compatible with the Java Edition Minecraft client.

Cuberite runs on Windows, *nix and Android operating systems. This includes Android phones and tablets as well as Raspberry Pis.

Currently we support Release 1.8 - 1.12.2 Minecraft protocol versions.

Subscribe to [the newsletter][1] for important updates and project news.

## Installation

There are several ways to obtain Cuberite.

### Binaries

- The easiest method is downloading for Windows or Linux from the [website][2].
- You can use the EasyInstall script for Linux and macOS, which automatically downloads the correct binary. The script is described below.

#### The EasyInstall script

This script will download the correct binary from the project site.

    curl -sSfL https://download.cuberite.org | sh

### Compiling

- You can compile automatically for Linux, macOS and FreeBSD with the `compile.sh` script. The script is described below.
- You can also compile manually. See [COMPILING.md][4].

Compiling may provide better performance (1.5-3x as fast) and it supports more operating systems.

#### The compile.sh script

This script downloads the source code and compiles it. The script is smart enough to notify you of missing dependencies and instructing you on how to install them. The script doesn't work for Windows.

Using curl:

    sh -c ""$(curl -sSfL -o - https://compile.cuberite.org)""

Or using wget:

    sh -c ""$(wget -O - https://compile.cuberite.org)""

### Hosted services

- Hosted Cuberite is available via [Gamocosm][5].

## Contributing

Cuberite is licensed under the Apache License V2, and we welcome anybody to fork and submit a Pull Request back with their changes, and if you want to join as a permanent member we can add you to the team.

Cuberite is developed in C++ and Lua. To contribute code, please check out [GETTING-STARTED.md][6] and [CONTRIBUTING.md][7] for more details.

Plugins are written in Lua. You can contribute by developing plugins and submitting them to the [plugin repository][8] or the [forum][9]. Please check out our [plugin introduction guide][10] for more info.

If you are not a programmer, you can help by testing Cuberite and reporting bugs. See [TESTING.md][11] for details.

You can also help with documentation by contributing to the [User's Manual][12].

## Other Stuff

For other stuff, check out the [homepage][13], the [Users' Manual][14], the [forums][15], and the [Plugin API][16].

Support the Cuberite development team on [Liberapay][17]

[1]: https://cuberite.org/news/#subscribe
[2]: https://cuberite.org/
[4]: https://github.com/cuberite/cuberite/blob/master/COMPILING.md
[5]: https://gamocosm.com/
[6]: https://github.com/cuberite/cuberite/blob/master/GETTING-STARTED.md
[7]: https://github.com/cuberite/cuberite/blob/master/CONTRIBUTING.md
[8]: https://plugins.cuberite.org/
[9]: https://forum.cuberite.org/forum-2.html
[10]: https://api.cuberite.org/Writing-a-Cuberite-plugin.html
[11]: https://github.com/cuberite/cuberite/blob/master/TESTING.md
[12]: https://github.com/cuberite/users-manual
[13]: https://cuberite.org/
[14]: https://book.cuberite.org/
[15]: https://forum.cuberite.org/
[16]: https://api.cuberite.org/
[17]: https://liberapay.com/Cuberite
","Cuberite is a Minecraft-compatible multiplayer game server. It is written in C++
and designed to be efficient with memory and CPU. Cuberite runs on Windows, *nix
and Android operating systems. It supports Release 1.8 - 1.12.2 Minecraft
protocol versions."
3168,"All the slides, accompanying code and exercises all stored in this repo. 🎈","# Data Camp: Data Scientist with Python 🎉🤖

![GitHub](https://img.shields.io/github/license/AmoDinho/datacamp-python-data-science-track) ![GitHub stars](https://img.shields.io/github/stars/AmoDinho/datacamp-python-data-science-track?style=social)

![Design Blocks](https://images.unsplash.com/photo-1518364538800-6bae3c2ea0f2?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=193d96d744872badcbbf5bdfc7b347f2&auto=format&fit=crop&w=1951&q=80)

# All the slides, accompanying code and exercises are all stored in this repo!

[Sign Up to DataCamp Here!](https://www.datacamp.com)

## 🎮 List of Courses

  - [Intro to Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intro%20to%20Python%20for%20Data%20Science)
  - [Intermediate Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intermediate%20Python%20for%20Data%20Science)
  - [Python Data Science Toolbox (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt1)
  - [Python Data Science Toolbox (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt2)
  - [Importing Data in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt1)
  - [Importing Data in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt2)
  - [Cleaning Data in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Cleaning%20Data%20in%20Python)
  - [Pandas Foundations](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Pandas%20Foundations)
  - [Manipulating DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Manipulating%20DataFrames%20with%20pandas)
  - [Merging DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Merging%20DataFrames%20with%20pandas)
  - [Introduction to Databases in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Databases%20in%20Python)
  - [Introduction to Data Visualization with Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Data%20Visualizaion%20with%20Python)
  - [Interactive Data Visualization with Bokeh](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Interactive%20Data%20Visualization%20with%20Bokeh)
  - [Statistical Thinking in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%201))
  - [Statistical Thinking in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%202))
  - [Supervised Learning with scikit-learn](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Supervised%20Learning%20with%20scikit-learn)
  - [Machine Learning with the Experts: School Budgets](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Machine%20Learning%20with%20Experts-School%20Budgets)
  - [Unsupervised Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Unsupervised%20Learning%20in%20Python)
  - [Deep Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Deep%20Learning%20in%20Python)
  - [Network Analysis in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Network%20Analysis%20in%20Python%20(Part%201))
  
  ### 💣 Bonus
  
  - [Natural Language Processing Fundamentals in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Natural%20Language%20Processing%20Fundamentals%20in%20Python)
  - [Correlation & Regression](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Correlation%20and%20Regression)
  
  ##  🍣 Contributions
  
  Anyone is welcome to contribute please check out the issues!
  
  ## 📄 License

[MIT License](https://github.com/AmoDinho/datacamp-python-data-science-track/blob/master/LICENSE)

","summarize: # Data Camp: Data Scientist with Python. All the slides, accompanying
code and exercises are all stored in this repo! Sign up to DataCamp Here! for
more information and to join the mailing list for the event."
2324,Ways of doing Data Science Engineering and Machine Learning in R and Python,"# Data Science Engineering, your way

[![Join the chat at https://gitter.im/jadianes/data-science-your-way](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jadianes/data-science-your-way?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

##### An introduction to different Data Science engineering concepts and Applications using Python and R  

These series of tutorials on Data Science engineering will try to compare how different concepts in the discipline can be implemented in the two dominant ecosystems nowadays: R and Python.  

We will do this from a neutral point of view. Our opinion is that each environment has good and bad things, and any data scientist should know how to use both in order to be as prepared as posible for job market or to start personal project.    

To get a feeling of what is going on regarding this hot topic, we refer the reader to [DataCamp's Data Science War](http://blog.datacamp.com/r-or-python-for-data-analysis/) infographic. Their infographic explores what the strengths of **R** are over **Python** and vice versa, and aims to provide a basic comparison between these two programming languages from a data science and statistics perspective.  

Far from being a repetition from the previous, our series of tutorials will go hands-on into how to actually perform different data science taks such as working with data frames, doing aggregations, or creating different statistical models such in the areas of supervised and unsupervised learning.  

We will use real-world datasets, and we will build some real data products. This will help us to quickly transfer what we learn here to actual data analysis situations.  

If your are interested in Big Data products, then you might find interesting our series of [tutorials on using Apache Spark and Python](https://github.com/jadianes/spark-py-notebooks) or [using R on Apache Spark (SparkR)](https://github.com/jadianes/spark-r-notebooks).  

## Tutorials

This is a growing list of tutorials explaining concepts and applications in Python and R. 

### [Introduction to Data Frames](https://github.com/jadianes/data-science-your-way/blob/master/01-data-frames/README.md)  

An introduction to the basic data structure and how to use it in Python/Pandas and R.  

### [Exploratory Data Analysis](https://github.com/jadianes/data-science-your-way/blob/master/02-exploratory-data-analysis/README.md)    

About this important task in any data science engineering project.  

### [Dimensionality Reduction and Clustering](https://github.com/jadianes/data-science-your-way/blob/master/03-dimensionality-reduction-and-clustering/README.md)    
About using Principal Component Analysis and k-means Clustering to better represent and understand our data.  

### [Text Mining and Sentiment Classification](https://github.com/jadianes/data-science-your-way/blob/master/04-sentiment-analysis/README.md)    

How to use text mining techniques to analyse the positive or non-positive sentiment of text documents using just *linear methods*.  

## Applications  

These are some of the applications we have built using the concepts explained in the tutorials.  

### [A web-based Sentiment Classifier using R and Shiny](https://github.com/jadianes/data-science-your-way/blob/master/apps/sentimentclassifier/README.md)  

How to build a web applications where we can upload text documents to be sentiment-analysed using the R-based framework [Shiny](http://shiny.rstudio.com/).  

### [Building Data Products with Python](https://github.com/jadianes/data-science-your-way/blob/master/apps/winerama/README.md)  

Using a [wine reviews and recommendations website](http://jadianes.koding.io:8000/reviews/) as a leitmotif, this series of tutorials, with [its own separate repository](https://github.com/jadianes/winerama-recommender-tutorial) tagged by lessons, digs into how to use Python technologies such as Django, Pandas, or Scikit-learn, in order to build data products.   

### [Red Wine Quality Data analysis with R](https://github.com/jadianes/data-science-your-way/blob/master/apps/wine-quality-data-analysis/README.md)  

Using R and ggplot2, we perform Exploratory Data Analysis of this reference dataset about wine quality.    

### [Information Retrieval algorithms with Python](https://github.com/jadianes/data-science-your-way/blob/master/apps/information-retrieval/README.md)  

Where we show our own implementation of a couple of Information Retrieval algorithms: vector space model, and tf-idf.  

### [Kaggle - The Analytics Edge (Spring 2015)](https://github.com/jadianes/data-science-your-way/blob/master/apps/kaggle-analytics-edge-15/)  

My solution to this Kaggle competition. It was part of the edX MOOC [The Analitics Edge](https://www.edx.org/course/analytics-edge-mitx-15-071x-0). I highly recommend this on-line course. It is one of the most applied I have ever taken about using R for data anlysis and machine learning.  

## Contributing

Contributions are welcome!  For bug reports or requests please [submit an issue](https://github.com/jadianes/data-science-your-way/issues).

## Contact  

Feel free to contact me to discuss any issues, questions, or comments.

* Twitter: [@ja_dianes](https://twitter.com/ja_dianes)
* GitHub: [jadianes](https://github.com/jadianes)
* LinkedIn: [jadianes](https://www.linkedin.com/in/jadianes)
* Website: [jadianes.me](http://data.jadianes.com)

## License

This repository contains a variety of content; some developed by Jose A. Dianes, and some from third-parties.  The third-party content is distributed under the license provided by those parties.

The content developed by Jose A. Dianes is distributed under the following license:

    Copyright 2016 Jose A Dianes

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
","This series of tutorials will try to compare how different concepts in the
discipline can be implemented in the two dominant ecosystems nowadays: R and
Python. We will use real-world datasets, and we will build some real data
products. This will help us to quickly transfer what we learn here to actual
data analysis situations."
156,A repository of different Algorithms and Data Structures implemented in many programming languages.,"# Data Structures and Algorithms 
Clean example implementations of data structures and algorithms written in different languages.
<br><br>
[![Gitter chat](https://badges.gitter.im/VAR-solutions/Algorithms.png)](https://gitter.im/VAR-solutions/Algorithms ""Gitter chat"")
[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)
[![Issues](http://img.shields.io/github/issues/VAR-solutions/Algorithms.svg)](https://github.com/VAR-solutions/Algorithms/issues)
#### List of implementations

[Algorithms list(not updated)](#)

## Contribution!
 * Contributions are always welcome. Language doesn't matter. Just make sure you're implementing an algorithm.
 * PRs are welcome. To begin developing, follow the structure:

   > Algorithm-Type/algorithm-name/language-name/file-name.extension
   
   e.g
   > Sorting/bubble-sort/python/bubble-sort.py

 * If there is an implementation of the same algorithm in your language, do not give a PR for that.
 * Please include a description for the algorithm that you are implementing. It doesn't matter if it's copied from somewhere as long as it helps people that are learning new algorithm.
 * Graphical examples would be very helpful too.
 * You can include tests as well.
 * Don't remove previous implementations of algorithms. Just add a new file with your own implementation.
 * Beautify and clean up your code for easier reading
 ### Note:
 * If your PR is closed without any comment, it means that your PR does not meet the above criteria. Make sure your PR is **not Duplicate** and it should be **well-documented**.

## Resources

 The curated list of resources dealing with algorithms.

 * **Sites**
   * [Algorithms - Tutorials point](https://www.tutorialspoint.com/data_structures_algorithms/index.htm)
   * [Algorithms - Princetone edu](http://algs4.cs.princeton.edu/home/)
   * [Data structures and algorithms - Hackr](https://hackr.io/tutorials/learn-data-structures-algorithms)
   * [Data science - Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/)
   * [Fundamentals Of Algorithms- Geeks For Geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)
   * [Visual Algorithm - visualising data structures and algorithms through animation](https://visualgo.net/en)
   * [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code)
   * [GeeksforGeeks](https://www.geeksforgeeks.org)
* **Online classes (Free)**
  * Coursera 
      * [Introduction to algorithms Part 1](https://www.coursera.org/learn/algorithms-part1)
      * [Algorithms specialization 4 courses](https://www.coursera.org/specializations/algorithms)
   * Khan Academy 
     * [Algorithms](https://www.khanacademy.org/computing/computer-science/algorithms)
   * Udacity
      * [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061)
      * [Intro to algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215)
   * EdX
      * [Algorithms](https://www.edx.org/course/algorithms-iitbombayx-cs213-3x-0)
      * [Algorithms and data structures](https://www.edx.org/course/algorithms-data-structures-microsoft-dev285x)
     * [Algorithm Design and Analysis](https://courses.edx.org/courses/course-v1:PennX+SD3x+2T2017/course/)
     * [Graph Algorithms](https://www.edx.org/course/graph-algorithms-uc-san-diegox-algs202x)
     * [Data Structures](https://www.edx.org/course/data-structures-uc-san-diegox-algs201x)
      * [Algorithmic Design and Techniques](https://www.edx.org/course/algorithmic-design-techniques-uc-san-diegox-algs200x)
     * [String Processing and Pattern Matching Algorithms](https://www.edx.org/course/string-processing-pattern-matching-uc-san-diegox-algs204x)
     * [Graph Algorithms in Genome Sequencing](https://www.edx.org/course/graph-algorithms-genome-sequencing-uc-san-diegox-algs206x)

     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x)
     * [Data Structures](https://www.youtube.com/user/mycodeschool)
     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x) 
     * [Data Structures and Algorithms](https://www.programiz.com/dsa)
   * GeeksForGeeks
     * [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/)
 * **Coding Practice Sites**
    * [HackerRank](https://www.hackerrank.com/)
    * [HackerEarth](https://www.hackerearth.com/)
    * [SPOJ](http://www.spoj.com/)
    * [TopCoder](https://www.topcoder.com/)
    * [CodeChef](https://www.codechef.com/)
    * [Codeforces](http://codeforces.com/)
    * [Project Euler](https://projecteuler.net/)
    * [LeetCode](https://leetcode.com/)
    * [CodinGame](https://www.codingame.com/)
    * [CodeWars](https://codewars.com/)
    * [Coderbyte](https://www.coderbyte.com/)
    * [HireVue](https://www.hirevue.com/)
    * [FreeCodeCamp](https://www.freecodecamp.org/)
    * [CodeSignal](https://codesignal.com/)
    * [AtCoder](https://atcoder.jp/)
    
# Project Maintainers.
* [Vishal Gaur](https://github.com/i-vishi) :tada:<br>
* [Ravi Varshney](https://github.com/ravivarshney01) :tada:<br>
* [Ananya Tewari](https://github.com/antew7) :tada:<br>
","Clean example implementations of data structures and algorithms written in
different languages. Contributions are always welcome. To begin developing,
follow the structure: Algorithm-Type/algorithm- name/language-name/file-name.
The curated list of resources dealing with algorithms."
2044,A repository of different Algorithms and Data Structures implemented in many programming languages.,"# Data Structures and Algorithms 
Clean example implementations of data structures and algorithms written in different languages.
<br><br>
[![Gitter chat](https://badges.gitter.im/VAR-solutions/Algorithms.png)](https://gitter.im/VAR-solutions/Algorithms ""Gitter chat"")
[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)
[![Issues](http://img.shields.io/github/issues/VAR-solutions/Algorithms.svg)](https://github.com/VAR-solutions/Algorithms/issues)
#### List of implementations

[Algorithms list(not updated)](#)

## Contribution!
 * Contributions are always welcome. Language doesn't matter. Just make sure you're implementing an algorithm.
 * PRs are welcome. To begin developing, follow the structure:

   > Algorithm-Type/algorithm-name/language-name/file-name.extension
   
   e.g
   > Sorting/bubble-sort/python/bubble-sort.py

 * If there is an implementation of the same algorithm in your language, do not give a PR for that.
 * Please include a description for the algorithm that you are implementing. It doesn't matter if it's copied from somewhere as long as it helps people that are learning new algorithm.
 * Graphical examples would be very helpful too.
 * You can include tests as well.
 * Don't remove previous implementations of algorithms. Just add a new file with your own implementation.
 * Beautify and clean up your code for easier reading
 ### Note:
 * If your PR is closed without any comment, it means that your PR does not meet the above criteria. Make sure your PR is **not Duplicate** and it should be **well-documented**.

## Resources

 The curated list of resources dealing with algorithms.

 * **Sites**
   * [Algorithms - Tutorials point](https://www.tutorialspoint.com/data_structures_algorithms/index.htm)
   * [Algorithms - Princetone edu](http://algs4.cs.princeton.edu/home/)
   * [Data structures and algorithms - Hackr](https://hackr.io/tutorials/learn-data-structures-algorithms)
   * [Data science - Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/)
   * [Fundamentals Of Algorithms- Geeks For Geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)
   * [Visual Algorithm - visualising data structures and algorithms through animation](https://visualgo.net/en)
   * [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code)
   * [GeeksforGeeks](https://www.geeksforgeeks.org)
* **Online classes (Free)**
  * Coursera 
      * [Introduction to algorithms Part 1](https://www.coursera.org/learn/algorithms-part1)
      * [Algorithms specialization 4 courses](https://www.coursera.org/specializations/algorithms)
   * Khan Academy 
     * [Algorithms](https://www.khanacademy.org/computing/computer-science/algorithms)
   * Udacity
      * [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061)
      * [Intro to algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215)
   * EdX
      * [Algorithms](https://www.edx.org/course/algorithms-iitbombayx-cs213-3x-0)
      * [Algorithms and data structures](https://www.edx.org/course/algorithms-data-structures-microsoft-dev285x)
     * [Algorithm Design and Analysis](https://courses.edx.org/courses/course-v1:PennX+SD3x+2T2017/course/)
     * [Graph Algorithms](https://www.edx.org/course/graph-algorithms-uc-san-diegox-algs202x)
     * [Data Structures](https://www.edx.org/course/data-structures-uc-san-diegox-algs201x)
      * [Algorithmic Design and Techniques](https://www.edx.org/course/algorithmic-design-techniques-uc-san-diegox-algs200x)
     * [String Processing and Pattern Matching Algorithms](https://www.edx.org/course/string-processing-pattern-matching-uc-san-diegox-algs204x)
     * [Graph Algorithms in Genome Sequencing](https://www.edx.org/course/graph-algorithms-genome-sequencing-uc-san-diegox-algs206x)

     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x)
     * [Data Structures](https://www.youtube.com/user/mycodeschool)
     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x) 
     * [Data Structures and Algorithms](https://www.programiz.com/dsa)
   * GeeksForGeeks
     * [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/)
 * **Coding Practice Sites**
    * [HackerRank](https://www.hackerrank.com/)
    * [HackerEarth](https://www.hackerearth.com/)
    * [SPOJ](http://www.spoj.com/)
    * [TopCoder](https://www.topcoder.com/)
    * [CodeChef](https://www.codechef.com/)
    * [Codeforces](http://codeforces.com/)
    * [Project Euler](https://projecteuler.net/)
    * [LeetCode](https://leetcode.com/)
    * [CodinGame](https://www.codingame.com/)
    * [CodeWars](https://codewars.com/)
    * [Coderbyte](https://www.coderbyte.com/)
    * [HireVue](https://www.hirevue.com/)
    * [FreeCodeCamp](https://www.freecodecamp.org/)
    * [CodeSignal](https://codesignal.com/)
    * [AtCoder](https://atcoder.jp/)
    
# Project Maintainers.
* [Vishal Gaur](https://github.com/i-vishi) :tada:<br>
* [Ravi Varshney](https://github.com/ravivarshney01) :tada:<br>
* [Ananya Tewari](https://github.com/antew7) :tada:<br>
","Clean example implementations of data structures and algorithms written in
different languages. Contributions are always welcome. To begin developing,
follow the structure: Algorithm-Type/algorithm- name/language-name/file-name.
The curated list of resources dealing with algorithms."
2164,A repository of different Algorithms and Data Structures implemented in many programming languages.,"# Data Structures and Algorithms 
Clean example implementations of data structures and algorithms written in different languages.
<br><br>
[![Gitter chat](https://badges.gitter.im/VAR-solutions/Algorithms.png)](https://gitter.im/VAR-solutions/Algorithms ""Gitter chat"")
[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)
[![Issues](http://img.shields.io/github/issues/VAR-solutions/Algorithms.svg)](https://github.com/VAR-solutions/Algorithms/issues)
#### List of implementations

[Algorithms list(not updated)](#)

## Contribution!
 * Contributions are always welcome. Language doesn't matter. Just make sure you're implementing an algorithm.
 * PRs are welcome. To begin developing, follow the structure:

   > Algorithm-Type/algorithm-name/language-name/file-name.extension
   
   e.g
   > Sorting/bubble-sort/python/bubble-sort.py

 * If there is an implementation of the same algorithm in your language, do not give a PR for that.
 * Please include a description for the algorithm that you are implementing. It doesn't matter if it's copied from somewhere as long as it helps people that are learning new algorithm.
 * Graphical examples would be very helpful too.
 * You can include tests as well.
 * Don't remove previous implementations of algorithms. Just add a new file with your own implementation.
 * Beautify and clean up your code for easier reading
 ### Note:
 * If your PR is closed without any comment, it means that your PR does not meet the above criteria. Make sure your PR is **not Duplicate** and it should be **well-documented**.

## Resources

 The curated list of resources dealing with algorithms.

 * **Sites**
   * [Algorithms - Tutorials point](https://www.tutorialspoint.com/data_structures_algorithms/index.htm)
   * [Algorithms - Princetone edu](http://algs4.cs.princeton.edu/home/)
   * [Data structures and algorithms - Hackr](https://hackr.io/tutorials/learn-data-structures-algorithms)
   * [Data science - Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/)
   * [Fundamentals Of Algorithms- Geeks For Geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)
   * [Visual Algorithm - visualising data structures and algorithms through animation](https://visualgo.net/en)
   * [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code)
   * [GeeksforGeeks](https://www.geeksforgeeks.org)
* **Online classes (Free)**
  * Coursera 
      * [Introduction to algorithms Part 1](https://www.coursera.org/learn/algorithms-part1)
      * [Algorithms specialization 4 courses](https://www.coursera.org/specializations/algorithms)
   * Khan Academy 
     * [Algorithms](https://www.khanacademy.org/computing/computer-science/algorithms)
   * Udacity
      * [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061)
      * [Intro to algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215)
   * EdX
      * [Algorithms](https://www.edx.org/course/algorithms-iitbombayx-cs213-3x-0)
      * [Algorithms and data structures](https://www.edx.org/course/algorithms-data-structures-microsoft-dev285x)
     * [Algorithm Design and Analysis](https://courses.edx.org/courses/course-v1:PennX+SD3x+2T2017/course/)
     * [Graph Algorithms](https://www.edx.org/course/graph-algorithms-uc-san-diegox-algs202x)
     * [Data Structures](https://www.edx.org/course/data-structures-uc-san-diegox-algs201x)
      * [Algorithmic Design and Techniques](https://www.edx.org/course/algorithmic-design-techniques-uc-san-diegox-algs200x)
     * [String Processing and Pattern Matching Algorithms](https://www.edx.org/course/string-processing-pattern-matching-uc-san-diegox-algs204x)
     * [Graph Algorithms in Genome Sequencing](https://www.edx.org/course/graph-algorithms-genome-sequencing-uc-san-diegox-algs206x)

     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x)
     * [Data Structures](https://www.youtube.com/user/mycodeschool)
     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x) 
     * [Data Structures and Algorithms](https://www.programiz.com/dsa)
   * GeeksForGeeks
     * [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/)
 * **Coding Practice Sites**
    * [HackerRank](https://www.hackerrank.com/)
    * [HackerEarth](https://www.hackerearth.com/)
    * [SPOJ](http://www.spoj.com/)
    * [TopCoder](https://www.topcoder.com/)
    * [CodeChef](https://www.codechef.com/)
    * [Codeforces](http://codeforces.com/)
    * [Project Euler](https://projecteuler.net/)
    * [LeetCode](https://leetcode.com/)
    * [CodinGame](https://www.codingame.com/)
    * [CodeWars](https://codewars.com/)
    * [Coderbyte](https://www.coderbyte.com/)
    * [HireVue](https://www.hirevue.com/)
    * [FreeCodeCamp](https://www.freecodecamp.org/)
    * [CodeSignal](https://codesignal.com/)
    * [AtCoder](https://atcoder.jp/)
    
# Project Maintainers.
* [Vishal Gaur](https://github.com/i-vishi) :tada:<br>
* [Ravi Varshney](https://github.com/ravivarshney01) :tada:<br>
* [Ananya Tewari](https://github.com/antew7) :tada:<br>
","Clean example implementations of data structures and algorithms written in
different languages. Contributions are always welcome. To begin developing,
follow the structure: Algorithm-Type/algorithm- name/language-name/file-name.
The curated list of resources dealing with algorithms."
98,A repository of different Algorithms and Data Structures implemented in many programming languages.,"# Data Structures and Algorithms 
Clean example implementations of data structures and algorithms written in different languages.
<br><br>
[![Gitter chat](https://badges.gitter.im/VAR-solutions/Algorithms.png)](https://gitter.im/VAR-solutions/Algorithms ""Gitter chat"")
[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)
[![Issues](http://img.shields.io/github/issues/VAR-solutions/Algorithms.svg)](https://github.com/VAR-solutions/Algorithms/issues)
#### List of implementations

[Algorithms list(not updated)](#)

## Contribution!
 * Contributions are always welcome. Language doesn't matter. Just make sure you're implementing an algorithm.
 * PRs are welcome. To begin developing, follow the structure:

   > Algorithm-Type/algorithm-name/language-name/file-name.extension
   
   e.g
   > Sorting/bubble-sort/python/bubble-sort.py

 * If there is an implementation of the same algorithm in your language, do not give a PR for that.
 * Please include a description for the algorithm that you are implementing. It doesn't matter if it's copied from somewhere as long as it helps people that are learning new algorithm.
 * Graphical examples would be very helpful too.
 * You can include tests as well.
 * Don't remove previous implementations of algorithms. Just add a new file with your own implementation.
 * Beautify and clean up your code for easier reading
 ### Note:
 * If your PR is closed without any comment, it means that your PR does not meet the above criteria. Make sure your PR is **not Duplicate** and it should be **well-documented**.

## Resources

 The curated list of resources dealing with algorithms.

 * **Sites**
   * [Algorithms - Tutorials point](https://www.tutorialspoint.com/data_structures_algorithms/index.htm)
   * [Algorithms - Princetone edu](http://algs4.cs.princeton.edu/home/)
   * [Data structures and algorithms - Hackr](https://hackr.io/tutorials/learn-data-structures-algorithms)
   * [Data science - Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/)
   * [Fundamentals Of Algorithms- Geeks For Geeks](http://www.geeksforgeeks.org/fundamentals-of-algorithms/)
   * [Visual Algorithm - visualising data structures and algorithms through animation](https://visualgo.net/en)
   * [Rosetta Code](http://rosettacode.org/wiki/Rosetta_Code)
   * [GeeksforGeeks](https://www.geeksforgeeks.org)
* **Online classes (Free)**
  * Coursera 
      * [Introduction to algorithms Part 1](https://www.coursera.org/learn/algorithms-part1)
      * [Algorithms specialization 4 courses](https://www.coursera.org/specializations/algorithms)
   * Khan Academy 
     * [Algorithms](https://www.khanacademy.org/computing/computer-science/algorithms)
   * Udacity
      * [Computability, Complexity & Algorithms](https://www.udacity.com/course/computability-complexity-algorithms--ud061)
      * [Intro to algorithms](https://www.udacity.com/course/intro-to-algorithms--cs215)
   * EdX
      * [Algorithms](https://www.edx.org/course/algorithms-iitbombayx-cs213-3x-0)
      * [Algorithms and data structures](https://www.edx.org/course/algorithms-data-structures-microsoft-dev285x)
     * [Algorithm Design and Analysis](https://courses.edx.org/courses/course-v1:PennX+SD3x+2T2017/course/)
     * [Graph Algorithms](https://www.edx.org/course/graph-algorithms-uc-san-diegox-algs202x)
     * [Data Structures](https://www.edx.org/course/data-structures-uc-san-diegox-algs201x)
      * [Algorithmic Design and Techniques](https://www.edx.org/course/algorithmic-design-techniques-uc-san-diegox-algs200x)
     * [String Processing and Pattern Matching Algorithms](https://www.edx.org/course/string-processing-pattern-matching-uc-san-diegox-algs204x)
     * [Graph Algorithms in Genome Sequencing](https://www.edx.org/course/graph-algorithms-genome-sequencing-uc-san-diegox-algs206x)

     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x)
     * [Data Structures](https://www.youtube.com/user/mycodeschool)
     * [Algorithms and Data Structures Capstone](https://www.edx.org/course/algorithms-data-structures-capstone-uc-san-diegox-algs207x) 
     * [Data Structures and Algorithms](https://www.programiz.com/dsa)
   * GeeksForGeeks
     * [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/)
 * **Coding Practice Sites**
    * [HackerRank](https://www.hackerrank.com/)
    * [HackerEarth](https://www.hackerearth.com/)
    * [SPOJ](http://www.spoj.com/)
    * [TopCoder](https://www.topcoder.com/)
    * [CodeChef](https://www.codechef.com/)
    * [Codeforces](http://codeforces.com/)
    * [Project Euler](https://projecteuler.net/)
    * [LeetCode](https://leetcode.com/)
    * [CodinGame](https://www.codingame.com/)
    * [CodeWars](https://codewars.com/)
    * [Coderbyte](https://www.coderbyte.com/)
    * [HireVue](https://www.hirevue.com/)
    * [FreeCodeCamp](https://www.freecodecamp.org/)
    * [CodeSignal](https://codesignal.com/)
    * [AtCoder](https://atcoder.jp/)
    
# Project Maintainers.
* [Vishal Gaur](https://github.com/i-vishi) :tada:<br>
* [Ravi Varshney](https://github.com/ravivarshney01) :tada:<br>
* [Ananya Tewari](https://github.com/antew7) :tada:<br>
","Clean example implementations of data structures and algorithms written in
different languages. Contributions are always welcome. To begin developing,
follow the structure: Algorithm-Type/algorithm- name/language-name/file-name.
The curated list of resources dealing with algorithms."
2327,Python for《Deep Learning》，该书为《深度学习》(花书) 数学推导、原理剖析与源码级别代码实现,"# Deep Learning

《**深度学习**》是深度学习领域唯一的综合性图书，全称也叫做**深度学习 AI圣经(Deep Learning)**，由三位全球知名专家IanGoodfellow、YoshuaBengio、AaronCourville编著，全书囊括了数学及相关概念的背景知识，包括线性代数、概率论、信息论、数值优化以及机器学习中的相关内容。同时，它还介绍了工业界中实践者用到的深度学习技术，包括深度前馈网络、正则化、优化算法、卷积网络、序列建模和实践方法等，并且调研了诸如自然语言处理、语音识别、计算机视觉、在线推荐系统、生物信息学以及视频游戏方面的应用。最后，深度学习全书还提供了一些研究方向，涵盖的理论主题包括线性因子模型、自编码器、表示学习、结构化概率模型、蒙特卡罗方法、配分函数、近似推断以及深度生成模型，适用于相关专业的大学生或研究生使用。

<img src=""https://github.com/MingchaoZhu/DeepLearning/blob/master/docs/cover.jpg"" width=""200"" height=""300"" alt=""深度学习封面"" align=center>

可以下载《深度学习》的中文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.1/DL_cn.pdf) 和英文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.0/DL_en.pdf) 直接阅读。

对于本项目的工作，你可以直接下载 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf) (后面会对该书不断更新)

---

《深度学习》可以说是深度学习与人工智能的入门宝典，许多算法爱好者、机器学习培训班、互联网企业的面试，很多都参考这本书。但本书晦涩，加上官方没有提供代码实现，因此某些地方较难理解。本项目**基于数学推导和产生原理重新描述了书中的概念**，并用**Python** (numpy 库为主) 复现了书本内容 ( **源码级代码实现。推导过程和代码实现均放在了下载区的 pdf 文件中**，重要部分的实现代码也放入 **code 文件夹**中 )。

然而我水平有限，但我真诚地希望这项工作可以帮助到更多人学习深度学习算法。我需要大家的建议和帮助。如果你在阅读中遇到有误或解释不清的地方，希望可以汇总你的建议，在 Issues 提出。如果你也想加入这项工作书写中或有其他问题，可以联系我的邮箱。如果你在你的工作或博客中用到了本书，还请可以注明引用链接。

写的过程中参考了较多网上优秀的工作，所有参考资源保存在了`reference.txt`文件中。

# 留言

这份工作就是在写这一本 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf)。正如你在 pdf 文件中所见到的，《深度学习》涉及到的每一个概念，都会去给它详细的描述、原理层面的推导，以及用代码的实现。代码实现不会调用 Tensorflow、PyTorch、MXNet 等任何深度学习框架，甚至包括 sklearn (pdf 里用到 sklearn 的部分都是用来验证代码无误)，一切代码都是从原理层面实现 (Python 的基础库 NumPy)，并有详细注释，与代码区上方的原理描述区一致，你可以结合原理和代码一起理解。

这份工作的起因是我自身的热爱，但为完成这份工作我需要投入大量的时间精力，一般会写到凌晨两三点。推导、代码、作图都是慢慢打磨的，我会保证这份工作的质量。这份工作会一直更新完，已经上传的章节也会继续补充内容。如果你在阅读过程中遇到有想要描述的概念点或者错误点，请发邮件告知我。

真的很感谢你的认可与推广。最后，请等待下一次更新。

我是 朱明超，我的邮箱是：deityrayleigh@gmail.com

# 更新说明

2020/3/：

```python
1. 修改第五章决策树部分，补充 ID3 和 CART 的原理，代码实现以 CART 为主。
2. 第七章添加 L1 和 L2 正则化最优解的推导 (即 L1稀疏解的原理)。
3. 第七章添加集成学习方法的推导与代码实现，包括 Bagging (随机森林)、Boosting (Adaboost、GBDT、XGBoost)。
4. 第八章添加牛顿法与拟牛顿法 (DFP、BFGS、L-BFGS) 的推导。
5. 第十一章节添加贝叶斯线性回归、高斯过程回归 (GPR) 与贝叶斯优化的推导与代码实现。
```
后面每次的更新内容会统一放在 `update.txt` 文件中。

# 章节目录与文件下载

除了《深度学习》书中的概念点，**本项目也在各章节添加一些补充知识，例如第七章集成学习部分的 随机森林、Adaboost、GBDT、XGBoost 的原理剖析和代码实现等，又或者第十二章对当前一些主流方法的描述**。大的章节目录和 pdf 文件下载链接可以详见下表，而具体 pdf 文件中的实际目录请参考 `contents.txt`。你可以在下面的 pdf 链接中下载对应章节，也可以在 [releases](https://github.com/MingchaoZhu/DeepLearning/releases) 界面直接下载所有文件。

| 中文章节 | 英文章节 | 下载<br />(含推导与代码实现) |
| ------------ | ------------ | ------------ |
| 第一章 前言 | 1 Introduction |  |
| 第二章 线性代数 | 2 Linear Algebra | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/2%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.pdf) |
| 第三章 概率与信息论                 | 3 Probability and Information Theory | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/3%20%E6%A6%82%E7%8E%87%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%AE%BA.pdf) |
| 第四章 数值计算                     | 4 Numerical Computation | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/4%20%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97.pdf) |
| 第五章 机器学习基础                 | 5 Machine Learning Basics | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/5%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.pdf) |
| 第六章 深度前馈网络                 | 6 Deep Feedforward Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/6%20%E6%B7%B1%E5%BA%A6%E5%89%8D%E9%A6%88%E7%BD%91%E7%BB%9C.pdf) |
| 第七章 深度学习中的正则化           | 7 Regularization for Deep Learning | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/7%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%96.pdf) |
| 第八章 深度模型中的优化 | 8 Optimization for Training Deep Models | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/8%20%E6%B7%B1%E5%BA%A6%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96.pdf) |
| 第九章 卷积网络 | 9 Convolutional Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/9%20%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C.pdf) |
| 第十章 序列建模：循环和递归网络 | 10 Sequence Modeling: Recurrent and Recursive Nets |  |
| 第十一章 实践方法论                 | 11 Practical Methodology | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/11%20%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95%E8%AE%BA.pdf) |
| 第十二章 应用 | 12 Applications |  |
| 第十三章 线性因子模型 | 13 Linear Factor Models |  |
| 第十四章 自编码器                   | 14 Autoencoders |  |
| 第十五章 表示学习                   | 15 Representation Learning |  |
| 第十六章 深度学习中的结构化概率模型 | 16 Structured Probabilistic Models for Deep Learning |  |
| 第十七章 蒙特卡罗方法 | 17 Monte Carlo Methods |  |
| 第十八章 直面配分函数 | 18 Confronting the Partition Function |  |
| 第十九章 近似推断                   | 19 Approximate Inference |  |
| 第二十章 深度生成模型 | 20 Deep Generative Models |  |

尚未上传的章节会在后续陆续上传。

# 致谢

感谢对本项目的认可和推广。

+ 专知：https://mp.weixin.qq.com/s/dVD-vKJsMGqnBz2v4O-Q3Q
+ GitHubDaily：https://m.weibo.cn/5722964389/4504392843690487
+ 程序员遇见GitHub：https://mp.weixin.qq.com/s/EzFOnwpkv7mr2TSjPtVG9A
+ 爱可可：https://m.weibo.cn/1402400261/4503389646699745

# 赞助

本项目书写耗费时间精力。如果本项目对你有帮助，可以请作者吃份冰淇淋：

<img src=""./docs/pay.jpg"" width=""200"" height=""200"" alt=""支付"" align=center>
","Summarize: # Deep Learning is a type of AI. # Deep learning is a kind of machine
learning. # AI is a breed of AI that can learn from other AI systems. #AI is a
form of computer science called deep learning."
479,"Build, train, deploy, scale and maintain deep learning models. Understand ML infrastructure and MLOps using hands-on examples.","# Deep Learning In Production Book

### **You can know grab a copy of the book from here:**
  - **Amazon**: [Paperback and Kindle](https://amzn.to/3oa50Vj)
  - **Leanpub**: [Epub and Pdf](https://leanpub.com/DLProd)

#### Build, train, deploy, scale and maintain deep learning models. Understand ML infrastructure and MLOps using hands-on examples.

**What you will learn?**

- Best practices to write Deep Learning code
- How to unit test and debug Machine Learning code
- How to build and deploy efficient data pipelines
- How to serve Deep Learning models
- How to deploy and scale your application
- What is MLOps and how to build end-to-end pipelines

**Who is this book for?**

- Software engineers who are starting out with deep learning
- Machine learning researchers with limited software engineering background
- Machine learning engineers who seek to strengthen their knowledge
- Data scientists who want to productionize their models and build customer-facing applications

**What tools you will use?**

Tensorflow, Flask, uWSGI, Nginx, Docker, Kubernetes, Tensorflow Extended, Google Cloud, Vertex AI

**Book description**

Deep Learning research is advancing rapidly over the past years. Frameworks and libraries are constantly been developed and updated. However, we still lack standardized solutions on how to serve, deploy and scale Deep Learning models. Deep Learning infrastructure is not very mature yet.

This book accumulates a set of best practices and approaches on how to build robust and scalable machine learning applications. It covers the entire lifecycle from data processing and training to deployment and maintenance. It will help you understand how to transfer methodologies that are generally accepted and applied in the software community, into Deep Learning projects.

It's an excellent choice for researchers with a minimal software background, software engineers with little experience in machine learning, or aspiring machine learning engineers.

## More details and a free sample

[Visit the book's page](https://theaisummer.com/deep-learning-in-production-book/)

## Table of Contents
1. Designing a machine learning system
2. Setting up a Deep Learning Workstation
3. Writing and Structuring Deep Learning Code
4. Data Processing
5. Training
6. Serving
7. Deploying
8. Scaling
9. Building an End-to-End Pipeline

## Articles

The books is based on an article series published in our blog ""AI Summer"" and they were later combined and organized into a single resource. Some were rewritten from scratch; some were modified to fit the book's structure. Plus, we added completely new material!

1. Laptop set up and system design: https://theaisummer.com/deep-learning-production/
2. Best practices to write Deep Learning code: Project structure, OOP, Type checking and documentation: https://theaisummer.com/best-practices-deep-learning-code/
3. How to Unit Test Deep Learning: Tests in TensorFlow, mocking and test coverage: https://theaisummer.com/unit-test-deep-learning/
4. Logging and Debugging in Machine Learning: https://theaisummer.com/logging-debugging/
5. Data preprocessing for deep learning: https://theaisummer.com/data-preprocessing/
6. Data preprocessing for deep learning (part2): https://theaisummer.com/data-processing-optimization/
7. How to build a custom production-ready Deep Learning Training loop in Tensorflow from scratch: https://theaisummer.com/tensorflow-training-loop/
8. How to train a deep learning model in the cloud: https://theaisummer.com/training-cloud/
9. Distributed Deep Learning training: Model and Data Parallelism in Tensorflow: https://theaisummer.com/distributed-training/
10. Deploy a Deep Learning model as a web application using Flask and Tensorflow: https://theaisummer.com/deploy-flask-tensorflow/
11.  How to use uWSGI and Nginx to serve a Deep Learning model:  https://theaisummer.com/uwsgi-nginx/
12. How to use Docker containers and Docker Compose for Deep Learning applications: https://theaisummer.com/docker/
13. Scalability in Machine Learning: Grow your model to serve millions of users: https://theaisummer.com/scalability/
14. Introduction to Kubernetes with Google Cloud: Deploy your Deep Learning model effortlessly: https://theaisummer.com/kubernetes/


## Support
If you like our effort, don't forget to star the project :) It matters!
","Deep Learning in Production is a book on how to build robust and scalable
machine learning applications. It covers the entire lifecycle from data
processing and training to deployment and maintenance. It will help you
understand how to transfer methodologies that are generally accepted and applied
in the software community, into Deep Learning projects."
2926,Deep Learning Specialization by Andrew Ng on Coursera.,"# Deep Learning Specialization on Coursera

**Master Deep Learning, and Break into AI**

Instructor: [Andrew Ng](http://www.andrewng.org/)

## Introduction

This repo contains all my work for this specialization. All the code base, quiz questions, screenshot, and images, are taken from, unless specified, [Deep Learning Specialization on Coursera](https://www.coursera.org/specializations/deep-learning).

## What I want to say

**VERBOSE CONTENT WARNING: YOU CAN JUMP TO THE NEXT SECTION IF YOU WANT**

As a CS major student and a long-time self-taught learner, I have completed many CS related MOOCs on Coursera, Udacity, Udemy, and Edx. I do understand the hard time you spend on understanding new concepts and debugging your program. There are discussion forums on most MOOC platforms, however, even a question with detailed description may need some time to be answered. Here I released these solutions, which are **only for your reference purpose**. It may help you to save some time. And I hope you don't copy any part of the code (the programming assignments are fairly easy if you read the instructions carefully), see the quiz solutions before you start your own adventure. This course is almost the simplest deep learning course I have ever taken, but the simplicity is based on the fabulous course content and structure. It's a treasure given by deeplearning.ai team.

Currently, this repo has 3 major parts you may be interested in and I will give a list here.

## Programming Assignments

- Course 1: Neural Networks and Deep Learning

  - [Week 2 - PA 1 - Logistic Regression with a Neural Network mindset](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Logistic%20Regression%20with%20a%20Neural%20Network%20mindset.ipynb)
  - [Week 3 - PA 2 - Planar data classification with one hidden layer](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Planar%20data%20classification%20with%20one%20hidden%20layer.ipynb)
  - [Week 4 - PA 3 - Building your Deep Neural Network: Step by Step¶](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Building%20your%20Deep%20Neural%20Network%20-%20Step%20by%20Step.ipynb)
  - [Week 4 - PA 4 - Deep Neural Network for Image Classification: Application](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Deep%20Neural%20Network%20-%20Application.ipynb)

- Course 2: Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization

  - [Week 1 - PA 1 - Initialization](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Initialization.ipynb)
  - [Week 1 - PA 2 - Regularization](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Regularization.ipynb)
  - [Week 1 - PA 3 - Gradient Checking](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Gradient%20Checking.ipynb)
  - [Week 2 - PA 4 - Optimization Methods](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Optimization%20methods.ipynb)
  - [Week 3 - PA 5 - TensorFlow Tutorial](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Tensorflow%20Tutorial.ipynb)

- Course 3: Structuring Machine Learning Projects

  - There is no PA for this course. But this course comes with very interesting case study quizzes.
  
- Course 4: Convolutional Neural Networks

  - [Week 1 - PA 1 - Convolutional Model: step by step](https://github.com/Kulbear/deep-learning-coursera/blob/master/Convolutional%20Neural%20Networks/Convolution%20model%20-%20Step%20by%20Step%20-%20v1.ipynb)
  - [Week 1 - PA 2 - Convolutional Model: application](https://github.com/Kulbear/deep-learning-coursera/blob/master/Convolutional%20Neural%20Networks/Convolution%20model%20-%20Application%20-%20v1.ipynb)
  - [Week 2 - PA 1 - Keras - Tutorial - Happy House](https://github.com/Kulbear/deep-learning-coursera/blob/master/Convolutional%20Neural%20Networks/Keras%20-%20Tutorial%20-%20Happy%20House%20v1.ipynb)
  - [Week 2 - PA 2 - Residual Networks](https://github.com/Kulbear/deep-learning-coursera/blob/master/Convolutional%20Neural%20Networks/Residual%20Networks%20-%20v1.ipynb)
  
- Course 5: Sequence Models

  - [Week 1 - PA 1 - Building a Recurrent Neural Network - Step by Step](https://github.com/Kulbear/deep-learning-coursera/blob/master/Sequence%20Models/Building%20a%20Recurrent%20Neural%20Network%20-%20Step%20by%20Step%20-%20v2.ipynb)
  - [Week 1 - PA 2 - Character level language model - Dinosaurus land](https://github.com/Kulbear/deep-learning-coursera/blob/master/Sequence%20Models/Dinosaurus%20Island%20--%20Character%20level%20language%20model%20final%20-%20v3.ipynb)

## Quiz Solutions

There are concerns that some people may use the content here to quickly ace the course so I'll no longer update any quiz solution.

- Course 1: Neural Networks and Deep Learning

  - [Week 1 Quiz - Introduction to deep learning](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Week%201%20Quiz%20-%20Introduction%20to%20deep%20learning.md)
  - [Week 2 Quiz - Neural Network Basics](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Week%202%20Quiz%20-%20Neural%20Network%20Basics.md)
  - [Week 3 Quiz - Shallow Neural Networks](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Week%203%20Quiz%20-%20%20Shallow%20Neural%20Networks.md)
  - [Week 4 Quiz - Key concepts on Deep Neural Networks](https://github.com/Kulbear/deep-learning-coursera/blob/master/Neural%20Networks%20and%20Deep%20Learning/Week%204%20Quiz%20-%20Key%20concepts%20on%20Deep%20Neural%20Networks.md)

- Course 2: Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization

  - [Week 1 Quiz - Practical aspects of deep learning](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Week%201%20Quiz%20-%20Practical%20aspects%20of%20deep%20learning.md)
  - [Week 2 Quiz - Optimization algorithms](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Week%202%20Quiz%20-%20Optimization%20algorithms.md)
  - [Week 3 Quiz - Hyperparameter tuning, Batch Normalization, Programming Frameworks](https://github.com/Kulbear/deep-learning-coursera/blob/master/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Week%203%20Quiz%20-%20Hyperparameter%20tuning%2C%20Batch%20Normalization%2C%20Programming%20Frameworks.md)
  
- Course 3: Structuring Machine Learning Projects

  - [Week 1 Quiz - Bird recognition in the city of Peacetopia (case study)](https://github.com/Kulbear/deep-learning-coursera/blob/master/Structuring%20Machine%20Learning%20Projects/Week%201%20Quiz%20-%20Bird%20recognition%20in%20the%20city%20of%20Peacetopia%20(case%20study).md)
  - [Week 2 Quiz - Autonomous driving (case study)](https://github.com/Kulbear/deep-learning-coursera/blob/master/Structuring%20Machine%20Learning%20Projects/Week%202%20Quiz%20-%20Autonomous%20driving%20(case%20study).md)

~~- Course 4: Convolutional Neural Networks~~
~~- Course 5: Sequence Models~~

~~## Important Slide Notes~~

~~I screenshotted some important slide page and store them into GitHub issues. It seems not very helpful for everyone since I only keep those I think may be useful to me.~~

~~- [Screenshots for Course 1: Neural Networks and Deep Learning](https://github.com/Kulbear/deep-learning-coursera/issues/1)~~

~~- [Screenshots for Course 2: Improving Deep Neural Networks: Hyperparameter tuning, Regularization and Optimization](https://github.com/Kulbear/deep-learning-coursera/issues/2)~~

~~- [Screenshots for Course 3: Structuring Machine Learning Projects](https://github.com/Kulbear/deep-learning-coursera/issues/3)~~

~~- [Screenshots for Course 4: Convolutional Neural Networks](https://github.com/Kulbear/deep-learning-coursera/issues/14)~~

~~- Screenshots for Course 5: Sequence Models~~


## Milestones

  - **2017-08-17**: Finished the first-released 3 courses, YAY! 😈
","This repo contains all my work for this specialization. All the code base, quiz
questions, screenshot, and images, are taken from, unless specified, [Deep
Learning Specialization on
Coursera](https://www.coursera.org/specializations/deep-learning). This course
is almost the simplest deep learning course I have ever taken. The simplicity is
based on the fabulous course content and structure. It's a treasure given by
deeplearning.ai team. Currently, this repo has 3 major parts you may be
interested in and I will give a list here."
456,a MVP library for Android favoring a stateful Presenter,"# DEPRECATED - no longer actively maintained

[![Build Status](https://travis-ci.org/grandcentrix/ThirtyInch.svg?branch=master)](https://travis-ci.org/grandcentrix/ThirtyInch)
![License](https://img.shields.io/badge/license-Apache%202-green.svg?style=flat) 
[![Gitter](https://badges.gitter.im/ThirtyInch/gitter.svg)](https://gitter.im/ThirtyInch/Lobby)
# ThirtyInch - a MVP library for Android


This library adds Presenters to Activities and Fragments. It favors the stateful Presenter pattern, where the Presenter survives configuration changes and dumb View pattern, where the View only sends user events and receives information from the Presenter but never actively asks for data. This makes testing very easy because no logic lives in the View (Activity, Fragment) except for fancy animations which anyways aren't testable.

#### The name

> Keep Android At Arm’s Length
>
&mdash; Kevin Schultz, Droidcon NYC '14

The perfect distance to the Android Framework is approximately **thirty inches**, the average length of the human arm, shoulder to fingertips.

## Story

Read the introduction article on [Medium](https://medium.com/@passsy/thirtyinch-a-new-mvp-library-for-android-bd1a27262fd6#.xihev9jxq)

See the slides of the latest talk on [Speakerdeck](https://speakerdeck.com/passsy/thirtyinch-living-next-to-the-activity)


## Get it

### GitHub Packages

```gradle
repositories {
    maven {
        url = uri(""https://maven.pkg.github.com/GCX-HCI/ThirtyInch"")
    }
}

dependencies {
    implementation ""net.grandcentrix.thirtyinch:thirtyinch:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-rx2:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-logginginterceptor:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-kotlin:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-kotlin-coroutines:$thirtyinchVersion""
    
    // Legacy dependencies
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-rx:$thirtyinchVersion""
}
```

### JCenter (deprecated)

```gradle
repositories {
    jcenter()
}

dependencies {
    implementation ""net.grandcentrix.thirtyinch:thirtyinch:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-rx2:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-logginginterceptor:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-kotlin:$thirtyinchVersion""
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-kotlin-coroutines:$thirtyinchVersion""
    
    // Lagacy dependencies
    implementation ""net.grandcentrix.thirtyinch:thirtyinch-rx:$thirtyinchVersion""
}
```

## Hello World MVP example with ThirtyInch

`HelloWorldActivity.java`
```java
public class HelloWorldActivity 
        extends TiActivity<HelloWorldPresenter, HelloWorldView> 
        implements HelloWorldView {

    private TextView mOutput;

    @NonNull
    @Override
    public HelloWorldPresenter providePresenter() {
        return new HelloWorldPresenter();
    }

    @Override
    public void showText(final String text) {
        mOutput.setText(text);
    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hello_world);

        mOutput = (TextView) findViewById(R.id.output);
    }
}
```

`HelloWorldView.java`
```java
public interface HelloWorldView extends TiView {

    @CallOnMainThread
    void showText(final String text);
}

```

`HelloWorldPresenter.java`
```java
public class HelloWorldPresenter extends TiPresenter<HelloWorldView> {

    @Override    
    protected void onAttachView(@NonNull final HelloWorldView view) {
        super.onAttachView(view);
        view.showText(""Hello World!"");
    }
}

```
## ThirtyInch features

### Presenter

- survives configuration changes
- survives when the `Activity` got killed in background
- is not a singleton
- dies when the `Activity` gets finished

##### Lifecycle

The `TiPresenter` lifecycle is very easy.

It can be `CREATED` and `DESTROYED`. 
The corresponding callbacks `onCreate()` and `onDestroy()` will be only called once!

The `TiView` can either be `ATTACHED` or `DETACHED`.
The corresponding callbacks are `onAttachView(TiView)` and `onDetachView()` which maps to `onStart()` and `onStop()`.


```java
public class MyPresenter extends TiPresenter<MyView> {

    @Override
    protected void onCreate() {
        super.onCreate();
    }

    @Override
    protected void onAttachView(@NonNull final HelloWorldView view) {
        super.onAttachView(view);
    }

    @Override
    protected void onDetachView() {
        super.onDetachView();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }
}

```

The lifecycle can be observed using `TiLifecycleObserver`

There is no callback for `onResume()` and `onPause()` in the `TiPresenter`. 
This is something the view layer should handle.
Read more about this here [Hannes Dorfmann - Presenters don't need lifecycle events](http://hannesdorfmann.com/android/presenters-dont-need-lifecycle)

##### Configuration

The default behaviour might not fit your needs. 
You can disable unwanted features by providing a configuration in the `TiPresenter` constructor.

```java
public class HelloWorldPresenter extends TiPresenter<HelloWorldView> {

    public static final TiConfiguration PRESENTER_CONFIG = 
            new TiConfiguration.Builder()
                .setRetainPresenterEnabled(true) 
                .setCallOnMainThreadInterceptorEnabled(true)
                .setDistinctUntilChangedInterceptorEnabled(true)
                .build();
            
    public HelloWorldPresenter() {
        super(PRESENTER_CONFIG);
    }
}
```

Or globally for all `TiPresenters`
```java
public class MyApplication extends Application {

    @Override
    public void onCreate() {
        super.onCreate();
        TiPresenter.setDefaultConfig(MY_DEFAULT_CONFIG);
    }
}
```

### TiView Annotations

Two awesome annotations for the `TiView` interface made it already into `Ti` saving you a lot of time.

```java
public interface HelloWorldView extends TiView {

    @CallOnMainThread
    @DistinctUntilChanged
    void showText(final String text);
}
```

##### @CallOnMainThread

Whenever you call this method it will be called on the Android main thread.
This allows to run code off the main thread but send events to the UI without dealing with Handlers and Loopers.

Requires to be a `void` method. Works only for `TiView` interfaces implemented by ""Android Views"" (`TiActivity`, `TiFragment`).

Enabled by default, can be disabled with the `TiConfiguration`

##### @DistinctUntilChanged

When calling this method the `View` receives no duplicated calls.
The View swallows the second call when a method gets called with the same (hashcode) parameters twice.

Usecase:
The Presenter binds a huge list to the `View`. The app loses focus (`onDetachView()`) and the exact same Activity instance gains focus again (`onAttachView(view)`).
The `Activity` still shows the huge list.
The `Presenter` binds the huge list again to the `View`.
When the data has changed the list will be updated.
When the data hasn't changed the call gets swallowed and prevents flickering.

Requires to be a `void` method and has at least one parameter.

Enabled by default, can be disabled with the `TiConfiguration`


### View binding interceptors

*View Annotations* only work because ThirtyInch supports interceptors. 
Add interceptors (`BindViewInterceptor`) to `TiActivity` or `TiFragment` to intercept the binding process from `TiView` to `TiPresenter`.
Interceptors are public API waiting for other great ideas.


```java
public class HelloWorldActivity extends TiActivity<HelloWorldPresenter, HelloWorldView>
        implements HelloWorldView {

    public HelloWorldActivity() {
        addBindViewInterceptor(new LoggingInterceptor());
    }
}
```

`LoggingInterceptor` is available as module and logs all calls to the view.

### Kotlin

Using Kotlin these days is a no-brainer.
`ThirtyInch` provides some extension methods to improve itself even further!  

#### SendToView

When using `sendToView`, repeating `it.*` inside the lambda is quite annoying.
It's clear that the methods are called *on* the view.
With the kotlin extension `deliverToView` the `TiView` will be give over to the lambda as `this`.
```kotlin
class HelloWorldPresenter : TiPresenter<HelloWorldView> {

  override fun onCreate() {
      // normal java API
      sendToView {
          it.showText(""Hello World"")
      }
      
      // kotlin extension
      deliverToView {
          showText(""Hello World"")
      }
  }
}

interface HelloWorldView : TiView {
    fun showText(text: String)
}
``` 
Back in the Java days we had to use `it` inside the `sendToView`-lambda.

#### Coroutines
If you're using Kotlin's Coroutines we offer a `CoroutineScope` that scopes to a presenter's lifecycle.

```kotlin
class HelloWorldPresenter : TiPresenter<HelloWorldView> {

  private val scope = TiCoroutineScope(this, Dispatchers.Default)

  override fun onCreate() {
      scope.launch { ... }
  }
}
```
The created `Job` will automatically be cancelled when the presenter is destroyed.

Alternatively, you can launch jobs that get cancelled when a `TiView` detaches:
```kotlin
class HelloWorldPresenter : TiPresenter<HelloWorldView> {

  private val scope = TiCoroutineScope(this, Dispatchers.Default)

  override fun onAttachView(view: HelloWorldView) {
      scope.launchUntilViewDetaches { ... }
  }
}
```
However, be careful that `launchUntilViewDetaches` can only be called when there is a view attached!

### [RxJava](https://github.com/ReactiveX/RxJava)

Using RxJava for networking is very often used.
Observing a `Model` is another good usecase where Rx can be used inside of a `TiPresenter`.
The Rx package provides helper classes to deal with `Subscription` or wait for an attached `TiView`.

```java
public class HelloWorldPresenter extends TiPresenter<HelloWorldView> {

    // add the subscription helper to your presenter
    private RxTiPresenterSubscriptionHandler rxHelper = new RxTiPresenterSubscriptionHandler(this);

    @Override
    protected void onCreate() {
        super.onCreate();
        
        // automatically unsubscribe in onDestroy()
        rxHelper.manageSubscription(
                Observable.interval(0, 1, TimeUnit.SECONDS)
                    // cache the latest value when no view is attached
                    // emits when the view got attached
                    .compose(RxTiPresenterUtils.<Long>deliverLatestToView(this))
                    .subscribe(uptime -> getView().showPresenterUpTime(uptime))
        );
    }

    @Override
    protected void onAttachView(@NonNull final HelloWorldView view) {
        super.onAttachView(view);
        
        // automatically unsubscribe in onDetachView(view)
        rxHelper.manageViewSubscription(anotherObservable.subscribe());
    }
}
```

You can make `Disposable` handling even less intrusive in Kotlin. Just create the following interface and make your presenters implement it:

```kotlin
interface DisposableHandler {

    // Initialize with reference to your TiPresenter instance
    val disposableHandler: RxTiPresenterDisposableHandler

    // Dispose of Disposables dependent on the TiPresenter lifecycle
    fun Disposable.disposeWhenDestroyed(): Disposable = disposableHandler.manageDisposable(this)

    // Dispose of Disposables dependent on the TiView attached/detached state
    fun Disposable.disposeWhenViewDetached(): Disposable = disposableHandler.manageViewDisposable(this)
} 
```

Then just implement the interface in your presenter and you can use created extension functions to manage `Disposable`s:

```kotlin
class MyPresenter : TiPresenter<MyView>(), DisposableHandler {

    override val disposableHandler = RxTiPresenterDisposableHandler(this)

    override fun onCreate() {
        super.onCreate()

        // Presenter lifecycle dependent Disposable
        myObservable
            .subscribe()
            .disposeWhenDestroyed()
    }

    override fun onAttachView(view: MyView) {
        super.onAttachView(view)

        // View attached/detached dependent Disposable
        myViewObservable
            .subscribe()
            .disposeWhenViewDetached()
    }
}
```

# License

```
Copyright 2016 grandcentrix GmbH

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
```
","ThirtyInch is a MVP library for Android. It adds Presenters to Activities and
Fragments. It favors the stateful Presenter pattern, where the Presenter
survives configuration changes. The perfect distance to the Android Framework is
approximately **thirty inches**, the average length of the human arm."
473,DevOps Roadmap for 2022. with learning resources,"# DevOps Roadmap 2022.

This is a step by step guide on how to become a DevOps engineer, with links to relevant learning resources.

![DevOps roadmap](devops%20tools.png)

## Disclaimer

> The purpose of this roadmap is to give you an idea about the landscape. The road map will guide you if you are confused about what to learn next, rather than encouraging you to pick what is hype and trendy. You should grow some understanding of why one tool would be better suited for some cases than the other and remember hype and trendy does not always mean best suited for the job.

## Give a Star! :star:

If you like or are using this project to learn or start your solution, please give it a star. Thanks!

![DevOps roadmap](DevOps%20Roadmap.png)

Download [Version without background](DevOps%20Roadmap%20No%20Background.png).

## PDF version

[![DevOps roadmap](pdfversion.png)](DevOps%20Roadmap.pdf)

Download [PDF version](DevOps%20Roadmap.pdf).

## Learning resources for DevOps Engineers (mostly free)

### 1. GIT

- [Pro Git Book](https://git-scm.com/book/en/v2) <sup>FREE</sup>
- [Learn Git by Atlassian](https://www.atlassian.com/git) <sup>FREE</sup>
- [Learn Git Branching](https://learngitbranching.js.org/) <sup>FREE</sup>
- [Learn Git & GitHub on CodeAcademy](https://www.codecademy.com/learn/learn-git) <sup>FREE</sup>
- [Git Command Explorer](https://gitexplorer.com/) <sup>FREE</sup>
- [Git Immersion](https://gitimmersion.com/index.html) <sup>FREE</sup>
- [A Visual Git Reference](http://marklodato.github.io/visual-git-guide/index-en.html) <sup>FREE</sup>

### 2. Learn programming language

- [Automate the Boring Stuff with Python book](https://automatetheboringstuff.com/) <sup>FREE</sup>
- [Python Crash Course](https://ehmatthes.github.io/pcc/) <sup>FREE</sup>
- [The Modern JavaScript Tutorial](https://javascript.info/) <sup>FREE</sup>
- [JavaScript Crash Course For Beginners](https://www.youtube.com/watch?v=hdI2bqOjy3c) <sup>FREE</sup>
- [Eloquent JavaScript, 3rd edition](https://eloquentjavascript.net/), Marjin Haverbeke <sup>FREE book</sup>
- [Go by Example](https://gobyexample.com/) <sup>FREE</sup>

### 3. Learn Linux & Scripting

- [Operating System - Overview](https://www.tutorialspoint.com/operating_system/os_overview.htm) <sup>FREE</sup>
- [Shell Scripting Tutorial](https://www.shellscript.sh/) <sup>FREE</sup>
- [Powershell Tutorial for Beginners: Learn Powershell Scripting](https://www.guru99.com/powershell-tutorial.html)  <sup>FREE</sup>
- [Bash Reference Manual](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html) <sup>FREE</sup>
- [Ultimate Guide: Getting Started With Ubuntu](https://itsfoss.com/getting-started-with-ubuntu/) <sup>FREE</sup>
- [FreeBSD Handbook](https://docs.freebsd.org/en/books/handbook/) <sup>FREE</sup>
- [Linux command handbook](https://www.freecodecamp.org/news/the-linux-commands-handbook/) <sup>FREE</sup>

### 4. Learn Networking & Security

- [OSI Model Explained](https://www.cloudflare.com/en-gb/learning/ddos/glossary/open-systems-interconnection-model-osi/) <sup>FREE</sup>
- [Computer Networking: A Top-Down Approach](https://www.amazon.com/Computer-Networking-Top-Down-Approach-7th/dp/0133594149) <sup>book</sup>
- [TCP/IP and Networking Fundamentals for IT Pros](https://www.pluralsight.com/courses/tcpip-networking-it-pros) <sup>Pluralsight course</sup>
- [DevSecOps : Master Securing CI/CD | DevOps Pipeline](https://www.udemy.com/course/devsecops/) <sup>Udemy course</sup>
- [Hands-On Security in DevOps: Ensure continuous security, deployment, and delivery with DevSecOps](https://www.amazon.com/Hands-Security-DevOps-continuous-deployment/dp/1788995503) <sup> Book</sup>
- [Securing DevOps: Security in the Cloud](https://www.amazon.com/Securing-DevOps-Security-Julien-Vehent/dp/1617294136/) <sup> Book</sup>

### 5. Learn Server Management

- [What is a reverse proxy?](https://www.cloudflare.com/en-gb/learning/cdn/glossary/reverse-proxy/) <sup>FREE</sup>
- [Cache Server](https://networkencyclopedia.com/cache-server/) <sup>FREE</sup>
- [Reverse Proxy vs. Forward Proxy: The Differences](https://oxylabs.io/blog/reverse-proxy-vs-forward-proxy) <sup>FREE</sup>
- [What is load balancing?](https://www.cloudflare.com/en-gb/learning/performance/what-is-load-balancing/) <sup>FREE</sup>
- [What is a Firewall?](https://www.checkpoint.com/cyber-hub/network-security/what-is-firewall/) <sup>FREE</sup>
- [The NGINX Handbook](https://www.freecodecamp.org/news/the-nginx-handbook/) <sup>FREE</sup>
- [Learn Apache Server](https://www.twaino.com/en/blog/website-creation/apache-server-2/) <sup>FREE</sup>
- [Learn IIS](https://www.dnsstuff.com/windows-iis-server-tools) <sup>FREE</sup>

### 6. Learn Containers

- [What are Containers?](https://cloud.google.com/learn/what-are-containers) <sup>FREE</sup>
- [Learning Containers From The Bottom Up](https://iximiuz.com/en/posts/container-learning-path/) <sup>FREE</sup>
- [Docker Tutorial for Beginners by TechWorld with Nana](https://www.youtube.com/watch?v=3c-iBn73dDE) <sup>FREE</sup>
- [Docker Mastery: with Kubernetes +Swarm from a Docker Captain](https://www.udemy.com/course/docker-mastery/) <sup>Udemy course</sup>
- [What is Service Mesh?](https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh) <sup>FREE</sup>

### 7. Learn Container Orchestration

- [Kubernetes Crash Course for Absolute Beginners by TechWorld with Nana](https://www.youtube.com/watch?v=s_o8dwzRlu4) <sup>FREE</sup>
- [Primer: How Kubernetes Came to Be, What It Is, and Why You Should Care](https://thenewstack.io/primer-how-kubernetes-came-to-be-what-it-is-and-why-you-should-care/) <sup>Article</sup>
- [Certified Kubernetes Administrator (CKA) with Practice Tests](https://www.udemy.com/course/certified-kubernetes-administrator-with-practice-tests/) <sup>Udemy course</sup>
- [Learn Kubernetes - Beginners to Advanced by KodeKloud](https://kodekloud.com/learning-path-kubernetes/) <sup>Course</sup>
- [Understand when to use Cluster Services, Ingresses or API Gateways](https://gateway-api.sigs.k8s.io) <sup>FREE</sup>
- [Understand which Problems Service Mesh solve (Use an Abstraction smi-spec.io](https://linkerd.io/2.12/features/) <sup>FREE</sup>
- [Learn how to automate TLS](https://cert-manager.io/docs/) and  [DNS](https://github.com/kubernetes-sigs/external-dns) <sup>FREE</sup>
- [Kubernetes Up and Running](https://www.amazon.com/_/dp/1491935677?tag=oreilly20-20) <sup>Book</sup>

### 8. Learn Infrastructure as a code

- [GUIs, CLI, APIs: Learn Basic Terms of Infrastructure-as-Code](https://thenewstack.io/guis-cli-apis-learn-basic-terms-of-infrastructure-as-code/) <sup>FREE</sup>
- [Official Terraform Tutorials](https://learn.hashicorp.com/terraform) <sup>FREE</sup>
- [A Comprehensive Guide to Terraform](https://blog.gruntwork.io/a-comprehensive-guide-to-terraform-b3d32832baca) <sup>FREE</sup>
- [Automate Terraform documentation like a pro!](https://medium.com/google-cloud/automate-terraform-documentation-like-a-pro-ed3e19998808) <sup>FREE</sup>
- [Writing reusable Terraform modules](https://thomasthornton.cloud/2022/06/02/writing-reusable-terraform-modules/) <sup>FREE</sup>
- [What is Istio?](https://www.redhat.com/en/topics/microservices/what-is-istio) <sup>FREE</sup>
- [Puppet overview](https://puppet.com/docs/puppet/latest/puppet_overview.html) <sup>FREE</sup>
- [Puppet Courses](https://training.puppet.com/) <sup>FREE and PAID</sup>
- [Getting Started With Ansible](https://docs.ansible.com/ansible/latest/getting_started/) <sup>FREE</sup>
- [Learning Ansible Basics](https://www.redhat.com/en/topics/automation/learning-ansible-tutorial)
- [Get started with Red Hat Ansible](https://www.ansible.com/resources/get-started) <sup>FREE and PAID</sup>
- [Mastering Ansible](https://www.udemy.com/course/mastering-ansible/) <sup>Udemy Course</sup>
- [Learn Chef](https://learn.chef.io/) <sup>FREE</sup>

### 9. Learn CI/CD

- [CI/CD Pipeline: A Gentle Introduction](https://semaphoreci.com/blog/cicd-pipeline) <sup>FREE</sup>
- [Learn GitLab with tutorials](https://docs.gitlab.com/ee/tutorials/) <sup>FREE</sup>
- [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/) <sup>FREE</sup>
- [Jenkins, From Zero To Hero: Become a DevOps Jenkins Master](https://www.udemy.com/course/jenkins-from-zero-to-hero) <sup>Udemy course</sup>
- [Learn GitHub actions](https://learn.microsoft.com/en-us/users/githubtraining/collections/n5p4a5z7keznp5) <sup>FREE</sup>
- [Workflow syntax for GitHub Actions](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions) <sup>FREE</sup>
- [Learn Azure DevOps](https://milan.milanovic.org/post/ci-cd-with-azure-devops-yaml/) <sup>FREE</sup>
- [GitLab Cheatsheets](https://dev.to/jphi_baconnais/series/12928) <sup>FREE</sup>

### 10. Learn Monitoring & Observability

- [What Is Observability? Comprehensive Beginners Guide](https://devopscube.com/what-is-observability/) <sup>FREE</sup>
- [The Hows, Whys and Whats of Monitoring Microservices](https://thenewstack.io/the-hows-whys-and-whats-of-monitoring-microservices/) <sup>FREE</sup>
- [DevOps Monitoring](https://www.atlassian.com/devops/devops-tools/devops-monitoring) <sup>FREE</sup>
- [Applying Basic vs. Advanced Monitoring Techniques](https://thenewstack.io/applying-basic-vs-advanced-monitoring-techniques/) <sup>FREE</sup>
- [Learn Prometheus](https://prometheus.io/docs/tutorials/getting_started/) <sup>FREE</sup>
- [Learn Grafana](https://grafana.com/tutorials/) <sup>FREE</sup>
- [Elastic Stack](https://www.elastic.co/guide/index.html) <sup>FREE</sup>

### 11. Learn one Cloud provider

- [Exam AZ-900: Microsoft Azure Fundamentals](https://learn.microsoft.com/en-us/certifications/exams/az-900) <sup>FREE</sup>
- [Microsoft Azure Fundamentals Certification Course (AZ-900)](https://www.youtube.com/watch?v=NKEFWyqJ5XA) <sup>FREE</sup>
- [AZ-900 | Microsoft Azure Fundamentals Full Course, Free Practice Tests, Website and Study Guides](https://www.youtube.com/watch?v=NPEsD6n9A_I&list=PLGjZwEtPN7j-Q59JYso3L4_yoCjj2syrM) <sup>FREE</sup>
- [Ultimate AWS Certified Cloud Practitioner - 2022](https://www.udemy.com/course/aws-certified-cloud-practitioner-new) <sup>Udemy</sup>
- [AWS Developer by A Cloud Guru](https://acloudguru.com/learning-paths/aws-developer) <sup>Learning path</sup>

### 12. Learn Software Engineering Practices

- [What is Scrum?](https://www.atlassian.com/agile/scrum) <sup>FREE</sup>
- [Ways To Learn About Scrum](https://www.scrum.org/resources/ways-learn-about-scrum) <sup>FREE</sup>
- [Software Development Life Cycle (SDLC) Phases & Models](https://www.guru99.com/software-development-life-cycle-tutorial.html) <sup>FREE</sup>
- [The Beginner's Guide to Agile in Jira: Course description](https://university.atlassian.com/student/page/1117976-the-beginner-s-guide-to-agile-in-jira-course-description?sid_i=8) <sup>FREE</sup>
- [Learn SAFe](https://www.scaledagileframework.com/) <sup>FREE</sup>
- [Learn Automation Testing](https://blog.testproject.io/2020/03/26/automation-testing-for-beginners-ultimate-guide/) <sup>FREE</sup>
- [GitLab - Beginner's Guide to DevOps](https://page.gitlab.com/resources-ebook-beginners-guide-devops.html) <sup>FREE</sup>

### Additional resources (mostly books)

- [The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations](https://www.amazon.com/DevOps-Handbook-World-Class-Reliability-Organizations/dp/1942788002), Gene Kim, Patrick Debois, John Willis, Jez Humble <sup>Book</sup>
- [Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations](https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339), Nicole Forsgren, Jez Humble, Gene Kim <sup>Book</sup>
- [Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation ](https://www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912), Jez Humble, David Farley <sup>Book</sup>
- [Team Topologies: Organizing Business and Technology Teams for Fast Flow](https://www.amazon.com/Team-Topologies-Organizing-Business-Technology/dp/1942788819), Matthew Skelton, Manuel Pais <sup>Book</sup>
- [Effective DevOps: Building a Culture of Collaboration, Affinity, and Tooling at Scale](https://www.amazon.com/Effective-DevOps-Building-Collaboration-Affinity/dp/1491926309), Jennifer Davis, Ryn Daniels <sup>Book</sup>
- [The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win](https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592), Gene Kim, Kevin Behr, George Spafford <sup>Book</sup>
- [Site Reliability Engineering](https://sre.google/books/), Betsy Beyer, Chris Jones, Jennifer Petoff, Niall Richard Murphy <sup>Book</sup>

![DevOps books](DevOpsBooks.jpg)

## Wrap Up

If you think the roadmap can be improved, please do open a PR with any updates and submit any issues. Also, I will continue to improve this, so you might want to star this repository to revisit.

## Contribution

- Open a pull request with improvements
- Discuss ideas in issues
- Spread the word

## License

[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)

## Authors

- [Dr. Milan Milanović](https://milan.milanovic.org) -  CTO at [3MD](https://3mdinc.com).
- [Romano Roth](https://romanoroth.com) - Chief of DevOps at [Zühlke](https://www.zuehlke.com/en).
","This is a step by step guide on how to become a DevOps engineer, with links to
relevant learning resources. The purpose of this roadmap is to give you an idea
about the landscape. If you like or are using this project to learn or start
your solution, please give it a star."
1610,"Dinky is an out of the box one-stop real-time computing platform dedicated to the construction and practice of Unified  Streaming & Batch and Unified Data Lake & Data Warehouse. Based on Apache Flink, Dinky provides the ability to connect many big data frameworks including OLAP and Data Lake.","# Dinky

[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
[![Total Lines](https://tokei.rs/b1/github/DataLinkDC/dlink?category=lines)](https://github.com/DataLinkDC/dlink)
[![CN doc](https://img.shields.io/badge/文档-中文版-blue.svg)](README_zh_CN.md)
[![EN doc](https://img.shields.io/badge/document-English-blue.svg)](README.md)

[![Stargazers over time](https://starchart.cc/DataLinkDC/dlink.svg)](https://starchart.cc/DataLinkDC/dlink)

## 简介

实时即未来，Dlink 为 Apache Flink 而生，让 Flink SQL 纵享丝滑，并致力于实时计算平台建设。

Dinky 基于 Apache Flink 实现 Dlink ，增强 Flink 的应用与体验，探索流式数仓。即站在巨人肩膀上创新与实践，Dinky 在未来批流一体的发展趋势下潜力无限。

最后，Dinky 的发展皆归功于 Apache Flink 等其他优秀的开源项目的指导与成果。

## 特点

一个 `开箱即用` 、`易扩展` ，以 `Apache Flink` 为基础，连接 `OLAP` 和 `数据湖` 等众多框架的 `一站式` 实时计算平台，致力于 `流批一体` 和 `湖仓一体` 的建设与实践。

其主要目标如下：

- 可视化交互式 FlinkSQL 和 SQL 的数据开发平台：自动提示补全、语法高亮、调试执行、语法校验、语句美化、全局变量等
- 支持全面的多版本的 FlinkSQL 作业提交方式：Local、Standalone、Yarn Session、Yarn Per-Job、Yarn Application、Kubernetes Session、Kubernetes Application
- 支持 Apache Flink 所有的 Connector、UDF、CDC等
- 支持 FlinkSQL 语法增强：兼容 Apache Flink SQL、表值聚合函数、全局变量、CDC多源合并、执行环境、语句合并、共享会话等
- 支持易扩展的 SQL 作业提交方式：ClickHouse、Doris、Hive、Mysql、Oracle、Phoenix、PostgreSql、SqlServer 等
- 支持 FlinkCDC （Source 合并）整库实时入仓入湖
- 支持实时调试预览 Table 和 ChangeLog 数据及图形展示
- 支持语法逻辑检查、作业执行计划、字段级血缘分析等
- 支持 Flink 元数据、数据源元数据查询及管理
- 支持实时任务运维：作业上线下线、作业信息、集群信息、作业快照、异常信息、作业日志、数据地图、即席查询、历史版本、报警记录等
- 支持作为多版本 FlinkSQL Server 的能力以及 OpenApi
- 支持易扩展的实时作业报警及报警组：钉钉、微信企业号等
- 支持完全托管的 SavePoint 启动机制：最近一次、最早一次、指定一次等
- 支持多种资源管理：集群实例、集群配置、Jar、数据源、报警组、报警实例、文档、用户、系统配置等
- 更多隐藏功能等待小伙伴们探索

## 原理

![dinky_principle](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/main/dinky_principle.png)

## 精彩瞬间

> FlinkSQL Studio

![flinksqlstudio](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/flinksqlstudio.png)

> 实时调试预览

![selectpreview](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/selectpreview.png)

> 语法和逻辑检查

![checksql](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/checksql.png)

> JobPlan

![jobplan](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/jobplan.png)

> 字段级血缘分析

![lineage](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/lineage.png)

> BI 展示

![charts](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/charts.png)

> 元数据查询

![metadata](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/metadata.png)

> 实时任务监控

![monitor](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/monitor.png)

> 实时作业信息

![jobinfo](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/jobinfo.png)

> 数据地图

![datamap](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/datamap.png)

> 数据源注册

![datasource](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/060/datasource.png)

## 功能

详见 [功能](https://github.com/DataLinkDC/dlink/blob/dev/docs/zh-CN/feature.md)

## 近期计划

- 多租户及命名空间

- 全局血缘与影响分析

- 统一元数据管理

- Flink 元数据持久化

- 多版本 Flink-Client Server

- 整库千表同步

## 参与贡献

欢迎您为社区贡献自己的力量，共建共赢，贡献流程请参考： [[参与贡献](https://github.com/DataLinkDC/dlink/blob/dev/docs/zh-CN/developer_guide/how_contribute.md)]

## 如何部署

详见 [编译](https://github.com/DataLinkDC/dlink/blob/dev/docs/zh-CN/quick_start/build.md) 和 [安装](https://github.com/DataLinkDC/dlink/blob/dev/docs/zh-CN/quick_start/deploy.md) 。

## 如何升级到最新

由于功能较多，所以 bug 及优化点较多，强烈建议你使用或升级到最新版本。
替换最新 Dinky 所有依赖包 ，执行 sql 目录下的 dlink_history.sql 中的部分升级语句，依据是通过版本号与日期来判断从何处开始执行，请不要直接执行全部 sql。

## 感谢

站在巨人的肩膀上，Dinky 才得以诞生。对此我们对使用的所有开源软件及其社区表示衷心的感谢！我们也希望自己不仅是开源的受益者，也能成为开源的贡献者，也希望对开源有同样热情和信念的伙伴加入进来，一起为开源献出一份力！致谢列表如下：

[Apache Flink](https://github.com/apache/flink)

[Apache Dolphinscheduler](https://github.com/apache/dolphinscheduler)

[Ant-Design-Pro](https://github.com/ant-design/ant-design-pro)

[Mybatis Plus](https://github.com/baomidou/mybatis-plus)

[Monaco Editor](https://github.com/Microsoft/monaco-editor)

[SpringBoot]()

感谢 [JetBrains](https://www.jetbrains.com/?from=dlink) 提供的免费开源 License 赞助。

[![JetBrains](https://raw.githubusercontent.com/DataLinkDC/dlink/main/dlink-doc/images/main/jetbrains.svg)](https://www.jetbrains.com/?from=dlink)

## 获得帮助

1.提交 issue

2.进入微信用户社区群（推荐，添加微信号 wenmo_ai 邀请进群）和QQ用户社区群（**543709668**）交流，申请备注 “ Dinky + 企业名 + 职位”，不写不批

3.关注微信公众号获取相关内容的文章（最新消息获取建议关注）：[DataLink数据中台](https://mmbiz.qpic.cn/mmbiz_jpg/dyicwnSlTFTp6w4PuJruFaLV6uShCJDkzqwtnbQJrQ90yKDuuIC8tyMU5DK69XZibibx7EPPBRQ3ic81se5UQYs21g/0?wx_fmt=jpeg)

4.关注 bilibili UP 主（是文末呀）获取最新视频教学

5.访问 [GithubPages](https://datalinkdc.github.io/dlink/#/) 或 [官网](http://www.dlink.top/#/) 网址，阅读最新文档手册

## 版权

请参考 [LICENSE](https://github.com/DataLinkDC/dlink/blob/main/LICENSE) 文件。","Summarize: # Dinky is an Apache Flink-based web browser. Dinky's README.md
includes the license for Apache's Flink and Dlink software. The code is written
in C, C, and C++."
997,🔐 API key permissions for Django REST Framework,"# Django REST Framework API Key

API key permissions for the [Django REST Framework](https://www.django-rest-framework.org).

<div>
  <a href=""https://dev.azure.com/florimondmanca/public/_build/latest?definitionId=7&branchName=master"">
      <img src=""https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.djangorestframework-api-key?branchName=master"" alt=""build status""/>
  </a>
  <a href=""https://codecov.io/gh/florimondmanca/djangorestframework-api-key"">
      <img src=""https://codecov.io/gh/florimondmanca/djangorestframework-api-key/branch/master/graph/badge.svg"" alt=""coverage"">
  </a>
  <a href=""https://pypi.org/project/djangorestframework-api-key"">
      <img src=""https://badge.fury.io/py/djangorestframework-api-key.svg"" alt=""package version""/>
  </a>
</div>
<div>
  <img src=""https://img.shields.io/pypi/pyversions/djangorestframework-api-key.svg"" alt=""python versions""/>
  <img src=""https://img.shields.io/pypi/djversions/djangorestframework-api-key.svg?colorB=44b78b"" alt=""django versions""/>
  <img src=""https://img.shields.io/badge/drf-3.8+-7f2d2d.svg"" alt=""drf versions""/>
</div>

## Introduction

**Django REST Framework API Key is a library for allowing server-side clients to safely use your API.** These clients are typically third-party backends and services (i.e. _machines_) which do not have a user account but still need to interact with your API in a secure way.

### Features

- ✌️ **Simple to use**: create, view and revoke API keys via the admin site, or use built-in helpers to create API keys programmatically.
- 🔒 **As secure as possible**: API keys are treated with the same level of care as user passwords. They are hashed using the default password hasher before being stored in the database, and only visible at creation.
- 🎨 **Customizable**: satisfy specific business requirements by building your own customized API key models, permission classes and admin panels.

### Should I use API keys?

There are important security aspects you need to consider before switching to an API key access control scheme. We've listed some of these in [Security caveats](docs/security.md#caveats), including serving your API over HTTPS.

Besides, see [Why and when to use API keys](https://cloud.google.com/endpoints/docs/openapi/when-why-api-key#top_of_page) for hints on whether API keys can fit your use case.

API keys are ideal in the following situations:

- Blocking anonymous traffic.
- Implementing API key-based [throttling](https://www.django-rest-framework.org/api-guide/throttling/). (Note that Django REST Framework already has may built-in utilities for this use case.)
- Identifying usage patterns by logging request information along with the API key.

They can also present enough security for authorizing internal services, such as your API server and an internal frontend application.

> Please note that this package is NOT meant for authentication. You should NOT use this package to identify individual users, either directly or indirectly.
>
> If you need server-to-server authentication, you may want to consider OAuth instead. Libraries such as [django-oauth-toolkit](https://django-oauth-toolkit.readthedocs.io/en/latest/index.html) can help.

## Quickstart

Install with `pip`:

```bash
pip install ""djangorestframework-api-key==2.*""
```

_**Note**: It is highly recommended to **pin your dependency** to the latest major version (as depicted above), as breaking changes may and will happen between major releases._

Add the app to your `INSTALLED_APPS`:

```python
# settings.py

INSTALLED_APPS = [
  # ...
  ""rest_framework"",
  ""rest_framework_api_key"",
]
```

Run the included migrations:

```bash
python manage.py migrate
```

To learn how to configure permissions and manage API keys, head to the [Documentation](https://florimondmanca.github.io/djangorestframework-api-key).

## Changelog

See [CHANGELOG.md](https://github.com/florimondmanca/djangorestframework-api-key/tree/master/CHANGELOG.md).

## Contributing

See [CONTRIBUTING.md](https://github.com/florimondmanca/djangorestframework-api-key/tree/master/CONTRIBUTING.md).

## License

MIT
","Django REST Framework API Key is a library for allowing server-side clients to
safely use your API. API keys are treated with the same level of care as user
passwords. They are hashed using the default password hasher before being stored
in the database, and only visible at creation. They can also present enough
security for authorizing internal services, such as your API server and an
internal frontend application. It is highly recommended to pin your dependency
to the latest major version of Django."
3285,Docker 基本教學 - 從無到有 Docker-Beginners-Guide   教你用 Docker 建立 Django + PostgreSQL 📝,"# docker-tutorial

 Docker 基本教學 - 從無到有 Docker-Beginners-Guide

 教你用 [Docker](https://www.docker.com/) 建立 [Django](https://github.com/django/django) + [PostgreSQL](https://www.postgresql.org/) 📝

* [Youtube Tutorial PART 1 - Docker 基本教學 - 從無到有 Docker-Beginners-Guide](https://youtu.be/Wg5m0-Jyox8)
* [目錄](https://github.com/twtrubiks/docker-tutorial#%E7%94%A8-docker-%E5%AF%A6%E6%88%B0-django-%E4%BB%A5%E5%8F%8A-postgre) - [Youtube Tutorial PART 2 - 用 Docker 實戰 Django 以及 Postgre](https://youtu.be/aZ6woJ7qekE)
* [目錄](https://github.com/twtrubiks/docker-tutorial#%E5%85%B6%E4%BB%96%E7%AE%A1%E7%90%86-docker-gui-%E7%9A%84%E5%B7%A5%E5%85%B7) - [Youtube Tutorial PART 3 - Docker 基本教學 - 透過 portainer 管理  Docker](https://youtu.be/VZjHmBcEcew)
* [目錄](https://github.com/twtrubiks/docker-tutorial#docker-registry) - [Youtube Tutorial PART 4 - Docker push image to Docker Hub 教學](https://youtu.be/dVBKwmqO5e4)

其他說明

* [Youtube Tutorial-Ubuntu(Linux) 如何安裝 docker](https://youtu.be/eS_HMBC_RaA)
* [目錄](https://github.com/twtrubiks/docker-tutorial#docker-compose-networks) - [Youtube Tutorial-docker-compose networks 說明](https://youtu.be/wmV9WfkpyGk)
* [目錄](https://github.com/twtrubiks/docker-tutorial#docker-container-%E5%85%A7%E5%A6%82%E4%BD%95%E9%80%A3%E6%8E%A5%E5%88%B0%E6%9C%AC%E6%A9%9F-localhost-%E6%9C%8D%E5%8B%99) - Docker container 內如何連接到本機 localhost 服務
* [目錄](https://github.com/twtrubiks/docker-tutorial#docker-compose-updown-%E5%92%8C-restart-%E7%9A%84%E5%B7%AE%E7%95%B0) - [Youtube Tutorial-docker-compose up/down 和 restart 的差異](https://youtu.be/nX-sbLPz-MU)
* [目錄](https://github.com/twtrubiks/docker-tutorial/tree/master/docker-auto-run-linux) - [Youtube Tutorial-Linux 教學-開機自動啟動 docker / compose](https://youtu.be/c4YIQHCDLnQ)
* [目錄](https://github.com/twtrubiks/docker-tutorial/tree/master/docker-env-tutorial) - [Youtube Tutorial - Docker 基本教學 - 在 docker compose 中善用 Environment variables](https://youtu.be/JwbI1aNKbtY)
* [目錄](https://github.com/twtrubiks/docker-tutorial#%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4-docker-container-log) - [Youtube Tutorial - 如何清除 Docker container log](https://youtu.be/SiG0tmwhqqg)
* [目錄](https://github.com/twtrubiks/docker-tutorial#json-file-logging-driver) - [Youtube Tutorial - Docker 中的 JSON File logging driver(container log)](https://youtu.be/wb9bONgnFn4)

## 簡介

[Docker](https://www.docker.com/)

![](https://i.imgur.com/gDcSwcs.png)

***Containers as a Service ( CaaS ) - 容器如同服務***

算是近幾年才開始紅的技術，蠻多公司都有使用 Docker，而且真的很方便，值得大家去了解一下 :smile:

如果你有環境上不統一的問題？ 請用 Docker :smile:

如果你有每次建立環境都快抓狂的問題？ 請用 Docker :blush:

如果你想要高效率、輕量、秒開的環境，請用 Docker :blush:

如果你不想搞死自己，請用 Docker :smile:

如果你想潮到出水，請一定要用 Docker :laughing:

### 什麼是 Docker

[Docker](https://www.docker.com/) 是一個開源專案，出現於 2013 年初，最初是 Dotcloud 公司內部的 Side-Project。

它基於 Google 公司推出的 Go 語言實作。（ Dotcloud 公司後來改名為 Docker ）

技術原理我們這邊就不提了，簡單提一下他的好處。

我們先來看看官網的說明

Comparing Containers and Virtual Machines ( 傳統的虛擬化 )

![](https://i.imgur.com/IqiGyoJ.png)

從這張圖可以看出 Containers 並沒有 OS ，容量自然就小，而且啟動速度神快

詳細可參考 [https://www.docker.com/what-container](https://www.docker.com/what-container)

Virtual Machines 是什麼？

類似 [https://www.virtualbox.org/](https://www.virtualbox.org/)，我們可能用它裝裝看其他作業系統，例如說

我是 MAC，但我想玩 Windows，我就會在 MAC 中裝 VM 並且灌 Windows 系統。

一個表格了解 Docker 有多棒 :+1:

Feauture  | Containers                  |  Virtual Machines ( 傳統的虛擬化 )
--      | ----------            | ----------
 啟動   | 秒開 | 最快也要分鐘
 容量 | MB        | GB
 效能 | 快        | 慢
 支援數量 | 非常多 Containers        | 10多個就很了不起了
 複製相同環境 | 快        | 超慢

不理解:question::question::question:

我們來看一張圖，包準你懂

![](https://i.imgur.com/H8wmOUh.jpg)

圖的來源
[https://blog.jayway.com/2015/03/21/a-not-very-short-introduction-to-docker/](https://blog.jayway.com/2015/03/21/a-not-very-short-introduction-to-docker/)

### 為什麼要使用 Docker

潮～ 不解釋 :satisfied:

#### 更有效率的利用資源

比起像是 [https://www.virtualbox.org/](https://www.virtualbox.org/)，Docker 的利用率更高，我們可以設定更多

的 Containers ，而且啟動速度飛快！！:flushed:

#### 統一環境

相信大家都有每次搞電腦的環境都搞的很煩的經驗 :angry:

假設今天公司來了個新同事，就又要幫他建立一次環境 :expressionless:

不然就是，我的電腦 run 起來正常阿～ 你的怎麼不行，是不是 xxx 版本的關係阿 :joy:

相信大家多多少少都遇過上面這些事情，我們可以透過 Docker 來解決這些問題，

保持大家環境一致，而且要建立的時候也很快 :smile:

#### 對於 DevOps 的好處

對於 [DevOps](https://zh.wikipedia.org/wiki/DevOps) 來說，最希望的就是可以設定一次，將來在其他地方都可以快速建立環境且正常執行。

### Docker 概念

建議大家先了解一下 Docker 中的幾個名詞，分別為

***Image***

映像檔，可以把它想成是以前我們在玩 VM 的 Guest OS（ 安裝在虛擬機上的作業系統 ）。

Image 是唯讀（ R\O ）

***Container***

容器，利用映像檔（ Image ）所創造出來的，一個 Image 可以創造出多個不同的 Container，

Container 也可以被啟動、開始、停止、刪除，並且互相分離。

Container 在啟動的時候會建立一層在最外（上）層並且是讀寫模式（ R\W ）。

這張圖解釋了 Image 是唯讀（ R\O ）以及 Container 是讀寫模式（ R\W ） 的關係

![](https://i.imgur.com/wVvrWwJ.png)

更多關係可參考 [https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers)

***Registry***

可以把它想成類似 [GitHub](https://github.com/)，裡面存放了非常多的 Image ，可在 [Docker Hub](https://hub.docker.com/) 中查看。

更詳細的我這邊就不再解釋惹，留給大家做作功課:stuck_out_tongue:

## 安裝

Windows

請先到 Docker 官網

[https://www.docker.com/docker-windows](https://www.docker.com/docker-windows)

下載 stable 版本

![](https://i.imgur.com/ryKtNXm.jpg)

接下來就是無腦安裝，安裝完後他會叫你登出電腦，點下去後就會幫你登出電腦

![](https://i.imgur.com/EE7XmYM.jpg)

接著如果你的電腦沒有啟用 [Hyper-V](https://msdn.microsoft.com/zh-tw/library/hh831531(v=ws.11).aspx) ，他會叫你重啟電腦
(一樣，點下去就對惹)

( 更多可 Hyper-V 介紹請參考 [https://docs.microsoft.com/zh-tw/virtualization/hyper-v-on-windows/about/](https://docs.microsoft.com/zh-tw/virtualization/hyper-v-on-windows/about/) )

![](https://i.imgur.com/YG79VE1.jpg)

重新開機後，你就會發現可愛的 Docker 在右下角蹦出來惹

![](https://i.imgur.com/zMgf36E.png)

我們可以再用 cmd 確認一下是否有成功安裝

```cmd
docker --version
docker-compose --version
```

![](https://i.imgur.com/k1o3GIz.png)

記得再設定一個東西 Shared Drives

![](https://i.imgur.com/a6dqWU8.jpg)

裝完了之後，建議大家再多裝一個 [Kitematic](https://kitematic.com/)，他是 GUI 介面的，方便你使用 Docker，

( 後面會再介紹一個更贊的 GUI 介面 [portainer](https://github.com/portainer/portainer)  :grin: )

我知道打指令很潮，但還是建議裝一下。

直接對著你的 Docker 圖示右鍵，就可以看到 [Kitematic](https://kitematic.com/)

![](https://i.imgur.com/gdVFFMT.png)

![](https://i.imgur.com/SRaHNCP.jpg)

下載回來直接解壓縮雙點擊即可使用

![](https://i.imgur.com/9zsU23B.png)

MAC

MAC 我本身也有，但因為更早之前就裝了，步驟就沒記錄了，基本上大同小異

[https://www.docker.com/docker-mac](https://www.docker.com/docker-mac)

Linux

[Youtube Tutorial-Ubuntu(Linux) 如何安裝 docker](https://youtu.be/eS_HMBC_RaA)

這裡使用 Ubuntu 當作範例,

雖然在 ubuntu 中有 `snap` 可以非常快速的安裝 docker,

但在這邊我們不使用 `snap` 的方法安裝:smile:

請參考官方文件步驟安裝,

Get Docker Engine - Community for Ubuntu

[Get Docker Engine - Community for Ubuntu](https://docs.docker.com/install/linux/docker-ce/ubuntu/)

安裝後步驟 (optional:exclamation:), 但建議參考一下

[Post-installation steps for Linux](https://docs.docker.com/install/linux/linux-postinstall/)

docker-compose 的安裝

[docker-compose install](https://docs.docker.com/compose/install/)

系統資源分配問題,

假如你是使用 windows 或是 mac 的 docker,

你會有一個界面可以設定你要分多少的 cpu 以及 ram 給你的 docker,

通常會在 Preferences -> Advanced, 有 GUI 界面,

![](https://i.imgur.com/CWMQHxs.png)

但如果是使用 linux, 就不會有這個界面, 因為在 Linux 中,

會自動依照系統的資源進行分配.

## 指令介紹

接著介紹一些 Docker 的指令，

Docker 的指令真的很多，這裡就介紹我比較常用的或是實用的指令

查看目前 images

```cmd
docker images
```

建立 image

```cmd
docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
```

詳細的參數可參考 [https://docs.docker.com/engine/reference/commandline/create/](https://docs.docker.com/engine/reference/commandline/create/)

範例 ( 建立一個名稱為  busybox 的 image )

```cmd
docker create -it --name busybox busybox
```

刪除 Image

```cmd
docker rmi [OPTIONS] IMAGE [IMAGE...]
```

查看目前運行的 container

```cmd
docker ps
```

查看目前全部的 container（ 包含停止狀態的 container ）

```cmd
docker ps -a
```

新建並啟動 Container

```cmd
docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
```

舉個例子

```cmd
docker run -d -p 80:80 --name my_image nginx
```

`-d` 代表在 Detached（ 背景 ）執行，如不加 `-d`，預設會 foreground ( 前景 ) 執行

`-p` 代表將本機的 80 port 的所有流量轉發到 container 中的 80 port

`--name` 設定 container 的名稱

在舉一個例子

```cmd
 docker run -it --rm busybox
```

`--rm` 代表當 exit container 時，會自動移除 container。 ( incompatible with -d )

更詳細的可參考 [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)

啟動 Container

```cmd
docker start [OPTIONS] CONTAINER [CONTAINER...]
```

如果想讓他在前景跑順便觀看輸出 , 可以使用以下指令

```cmd
docker start -a [OPTIONS] CONTAINER [CONTAINER...]
```

`--attach` 或 `-a` 代表 Attach STDOUT/STDERR and forward signals.

更詳細的可參考 [https://docs.docker.com/engine/reference/commandline/start/](https://docs.docker.com/engine/reference/commandline/start/)

（ container ID 寫幾個就可以了，和 Git 的概念是一樣的 ，

不了解 Git 可以參考 [Git-Tutorials GIT基本使用教學](https://github.com/twtrubiks/Git-Tutorials) ）

停止 Container

```cmd
docker stop [OPTIONS] CONTAINER [CONTAINER...]
```

重新啟動 Container

```cmd
docker restart [OPTIONS] CONTAINER [CONTAINER...]
```

删除 Container

```cmd
docker rm [OPTIONS] CONTAINER [CONTAINER...]
```

`--volumes , -v` 加上這個參數，會移除掉連接到這個 container 的 volume。

可參考 [https://docs.docker.com/engine/reference/commandline/rm/](https://docs.docker.com/engine/reference/commandline/rm/)

進入 Container

```cmd
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
docker exec -it <Container ID> bash
```

使用 root 使用者進入　

```cmd
docker exec -u 0 -it <Container ID> bash
docker exec -u root -it <Container ID> bash
```

打指令比較潮，或是說你也可以透過 [Kitematic](https://kitematic.com/) 進入。

[](https://i.imgur.com/Yui1UZb.png)

當我們進入了 Container 之後，有時候想看一下裡面 Linux 的版本，

這時候可以使用以下指令查看

```cmd
cat /etc/os-release
```

查看 Container 詳細資料

```cmd
docker inspect [OPTIONS] NAME|ID [NAME|ID...]
```

查看 log

```cmd
docker logs [OPTIONS] CONTAINER
```

`--follow` , `-f`  ,  Follow log output

更詳細的可參考 [https://docs.docker.com/engine/reference/commandline/logs/](https://docs.docker.com/engine/reference/commandline/logs/)


從最後 100 行開始追蹤,

```cmd
docker logs -f --tail 100 CONTAINER
```

也可以把 log 寫進去檔案中,

```cmd
docker logs CONTAINER >> access.log
```

也可以先過濾 log 再寫進檔案中,

```cmd
docker logs CONTAINER | grep ""29/Mar/2022"" >> access_tmp.log
```

顯示容器資源 ( CPU , I/O ...... )

```cmd
docker stats [OPTIONS] [CONTAINER...]
```

也可以加上 `--no-stream`

```cmd
docker stats --no-stream
```

`--no-stream` Disable streaming stats and only pull the first result.

注意:exclamation::exclamation:這邊得到的 memory usage 會比實際上的還要小,

因為這邊的值是再減去 cache usage memory.

相關 issues 可參考 [https://github.com/moby/moby/issues/32253](https://github.com/moby/moby/issues/32253)

```txt
On Linux, the Docker CLI reports memory usage by subtracting cache usage from the total memory usage.
```

詳細說明可參考 [https://docs.docker.com/engine/reference/commandline/stats/](https://docs.docker.com/engine/reference/commandline/stats/)

也可參考 [https://docs.docker.com/config/containers/runmetrics/](https://docs.docker.com/config/containers/runmetrics/)

查看 container 中正在執行的 processes

```CMD
docker top CONTAINER
```

停止指定的 CONTAINER 中全部的 **processes**

```cmd
docker pause CONTAINER [CONTAINER...]
```

執行 `docker pause` 之後，可以試這用 `docker ps` 查看，會發現

還是有在執行，這裡拿  `docker stop`  比較一下，差異如下。

 `docker stop` : process 級別。

 `docker pause`: container 級別。

恢復指定暫停的 CONTAINER 中全部的 **processes**

```cmd
docker unpause CONTAINER [CONTAINER...]
```

docker tag

```cmd
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
```

範例

```cmd
docker tag 0e5574283393 twtrubiks/nginx:version1.0
```

更多可參考 [https://docs.docker.com/engine/reference/commandline/tag/](https://docs.docker.com/engine/reference/commandline/tag/)

儲存 (備份) image 成 tar 檔案

```cmd

[OPTIONS] IMAGE [IMAGE...]
```

範例

```cmd
docker save busybox > busybox.tar
```

或

```cmd
docker save --output busybox.tar busybox
```

或 ( 也可以一次備份多個 )

```cmd
docker save -o images.tar postgres:9.6 busybox
```

更多可參考 [https://docs.docker.com/engine/reference/commandline/save/](https://docs.docker.com/engine/reference/commandline/save/)

載入 image

```cmd
docker load [OPTIONS]
```

範例

```cmd
docker load < busybox.tar
```

或

```cmd
docker load -i busybox.tar
```

更多可參考 [https://docs.docker.com/engine/reference/commandline/load/](https://docs.docker.com/engine/reference/commandline/load/)

顯示 image 的 history，查詢 image 的每一層

```cmd
docker history [OPTIONS] IMAGE
```

在 docker 中，一層一層的概念很重要。

![](https://i.imgur.com/NmImVby.png)

更多可參考 [https://docs.docker.com/engine/reference/commandline/history/](https://docs.docker.com/engine/reference/commandline/history/)

剛剛有教大家如何儲存 (備份) images， 載入 images，

還有另外一種是 export 和 import containers，

docker export container 請參考 [https://docs.docker.com/engine/reference/commandline/export/](https://docs.docker.com/engine/reference/commandline/export/)。

docker import container 請參考 [https://docs.docker.com/engine/reference/commandline/import/](https://docs.docker.com/engine/reference/commandline/import/)。

其他指令

刪除所有 dangling images

```cmd
docker image prune
```

移除全部 unused images (不只 dangling images)

```cmd
docker image prune -a
```

更多資訊可參考 [image_prune](https://docs.docker.com/engine/reference/commandline/image_prune/)

停止所有正在運行的 Container

```cmd
docker container stop $(docker ps -q)
```

更多資訊可參考 [container_stop](https://docs.docker.com/engine/reference/commandline/container_stop/)

移除全部停止的 containers

```cmd
docker container prune
```

更多資訊可參考 [container_prune](https://docs.docker.com/engine/reference/commandline/container_prune/)

### ENTRYPOINT

教學說明請點選 [entrypoint-tutorial](https://github.com/twtrubiks/docker-tutorial/tree/master/entrypoint-tutorial)

### Volume

接下來要介紹 Volume，Volume 是 Docker 最推薦存放 persisting data（ 數據 ）的機制，

使用 Volume 有下列優點

* Volumes are easier to back up or migrate than bind mounts.
* You can manage volumes using Docker CLI commands or the Docker API.
* Volumes work on both Linux and Windows containers.
* Volumes can be more safely shared among multiple containers.
* Volume drivers allow you to store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.
* A new volume's contents can be pre-populated by a container.

在 container 的可寫層中，使用 volume 是一個比較好的選擇，因為他不會增加 container 的容量，

volume 的內容存在於 container 之外。

也可參考下圖

![](https://i.imgur.com/fiIt0kS.png)

更詳細的可參考 [https://docs.docker.com/engine/admin/volumes/volumes/](https://docs.docker.com/engine/admin/volumes/volumes/)

查看目前的 volume

```cmd
docker volume ls [OPTIONS]
```

創造一個 volume

```cmd
docker volume create [OPTIONS] [VOLUME]
```

刪除一個 volume

```cmd
docker volume rm [OPTIONS] VOLUME [VOLUME...]
```

查看 volume 詳細資料

```cmd
docker volume inspect [OPTIONS] VOLUME [VOLUME...]
```

移除全部未使用的 volume

```cmd
docker volume prune [OPTIONS]
```

也可以建立 readonly 的 volumes (容器內 readonly)

`docker-compose.yml` 方法如下,

```yml
version: '3.5'
services:
  nginx:
    image: nginx
    ports:
      - ""80:80""
    volumes:
      - ""nfs-data:/data:ro,z""

volumes:
    nfs-data:
```

如果要可讀寫, 就設定 `rw`.

volumes 在容器內的確不能寫 (只能讀)

![alt tag](https://i.imgur.com/ve4572t.png)

使用以下的指令查看 Mounts, 觀察它的 Mode

```cmd
docker inspect <container ID>
```

![alt tag](https://i.imgur.com/ex8A3Y5.png)

也可以建立 NFS volumes,

`docker-compose.yml` 方法如下,

```yml
version: '3.5'
services:
  nginx:
    image: nginx
    ports:
      - ""80:80""
    volumes:
      - ""nfs-data:/data""

volumes:
    nfs-data:
      driver: local
      driver_opts:
        type: nfs
        o: nfsvers=4,addr=ip,rw
        device: "":/path/to/dir""
```

可以用以下指令查看設定

```cmd
docker volume ls
docker inspect <volume name>
```

![alt tag](https://i.imgur.com/8mzUGsg.png)

NFS 相關文章可參考 [linux-nfs-server - 如何在 ubuntu 啟用 NFS Server](https://github.com/twtrubiks/linux-note/tree/master/linux-nfs-server)

### network

建議大家花點時間研究 docker 中的 network，會蠻有幫助的 :smiley:

查看目前 docker 的網路清單

```cmd
docker network ls [OPTIONS]
```

詳細可參考 [https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/)

docker 中的網路主要有三種 Bridge、Host、None，預設皆為 Bridge 模式。

指定 network 範例 ( 指定使用  `host` 網路 )

```cmd
docker run -it --name busybox --rm --network=host busybox
```

建立 network

```cmd
docker network create [OPTIONS] NETWORK
```

移除 network

```cmd
docker network rm NETWORK [NETWORK...]
```

移除全部未使用的 network

```cmd
docker network prune [OPTIONS]
```

查看 network 詳細資料

```cmd
docker network inspect [OPTIONS] NETWORK [NETWORK...]
```

將 container 連接 network

```cmd
docker network connect [OPTIONS] NETWORK CONTAINER
```

更多詳細資料可參考 [https://docs.docker.com/engine/reference/commandline/network_connect/](https://docs.docker.com/engine/reference/commandline/network_connect/)

Disconnect container  network

```cmd
docker network disconnect [OPTIONS] NETWORK CONTAINER
```

更多詳細資料可參考 [https://docs.docker.com/engine/reference/commandline/network_disconnect/](https://docs.docker.com/engine/reference/commandline/network_disconnect/)

#### User-defined networks

這個方法是官方推薦的 :thumbsup:

透過內建的 DNS 伺服器，可以直接使用容器名稱，就可解析出 IP，不需要再使用 IP 讓容器互相

溝通，我們只需要知道容器的名稱就可以連接到容器。

更多詳細資料可參考 [https://docs.docker.com/engine/userguide/networking/#user-defined-networks](https://docs.docker.com/engine/userguide/networking/#user-defined-networks)

## docker-compose

再來要介紹 docker-compose，可參考官網 [https://docs.docker.com/compose/](https://docs.docker.com/compose/)

![](https://i.imgur.com/YxrrO7t.png)

Compose 是定義和執行多 Container 管理的工具，不懂我在說什麼:question::question::question:

試著想想看，通常一個 Web 都還會有 DB，甚至可能還有 [Redis](https://redis.io/) 或 [Celery](http://www.celeryproject.org/)，

所以說我們需要有 Compose 來管理這些，透過 `docker-compose.yml` ( YML 格式 ) 文件。

`docker-compose.yml` 的寫法可參考 [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)

也可以直接參考官網範例 [https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples](https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples)

Compose 的 Command-line 很多和 Docker 都是類似的，

可參考 [https://docs.docker.com/glossary/?term=compose](https://docs.docker.com/glossary/?term=compose)

查看目前 Container

```cmd
docker-compose ps
```

加上 `-q` 的話，只顯示 id

```cmd
docker-compose ps -q
```

啟動 Service 的 Container

```cmd
docker-compose start  [SERVICE...]
```

停止 Service 的 Container ( 不會刪除 Container )

```cmd
docker-compose stop [options] [SERVICE...]
```

重啟 Service 的 Container

```cmd
docker-compose restart [options] [SERVICE...]
```

Builds, (re)creates, starts, and attaches to containers for a service

```cmd
docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]
```

加個 `-d`，會在背景啟動，一般建議正式環境下使用。

```cmd
docker-compose up -d
```

然後如果你有很多個 `docker-compose.yml` `docker-compose-dev.yml`,

你可以透過 `-f` 決定你要執行哪一個, 範例如下,

```cmd
docker-compose -f ./docker-compose-dev.yml up -d
```

`-f` `--file FILE` Specify an alternate compose file

(default: `docker-compose.yml`)

`up` 這個功能很強大，建議可以參考 [https://docs.docker.com/compose/reference/up/](https://docs.docker.com/compose/reference/up/)

如果你希望每次都重新 build image，可以加上

`--build` ( Build images before starting containers. )

```cmd
docker-compose up -d --build
```

docker-compose down

```cmd
docker-compose down [options]
```

`down` 這個功能也建議可以參考 [https://docs.docker.com/compose/reference/down/](https://docs.docker.com/compose/reference/down/)

舉個例子

```cmd
docker-compose down -v
```

加個 `-v` 就會順便幫你把 volume 移除（ 移除你在 `docker-compose.yml` 裡面設定的 volume ）

在指定的 Service 中執行一個指令

```cmd
docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]
[ARGS...]
```

舉個例子

```cmd
docker-compose run web bash
```

在 web Service 中執行 `bash` 指令

可參考 [https://docs.docker.com/compose/reference/run/](https://docs.docker.com/compose/reference/run/)

觀看 Service logs

```cmd
docker-compose logs [options] [SERVICE...]
```

檢查 `docker-compose.yml` 格式是否正確

```cmd
docker-compose config
```

如下指令，和 `docker exec` 一樣

```cmd
docker-compose exec
```

範例 ( 進入 web 這個 service 的 bash )

```cmd
docker-compose exec web bash
```

顯示被使用到的 container 中的 images 清單

```cmd
docker-compose images
```

移除  service containers

```cmd
docker-compose rm
```

Pushes images 到 docker hub

```cmd
docker-compose push
```

目前這個指令其實我也搞不太懂，可參考 [https://github.com/docker/compose/issues/4283](https://github.com/docker/compose/issues/4283)

官網也解釋的沒有很清楚 [https://docs.docker.com/compose/reference/push/](https://docs.docker.com/compose/reference/push/)

### docker-compose up/down 和 restart 的差異

* [Youtube Tutorial- docker-compose up/down 和 restart 的差異](https://youtu.be/nX-sbLPz-MU)

先來談 `docker-compose up/down`,

假如今天你修改了 `docker-compose.yml` 又或是更新了 image,

當你要重建 docker , 有幾種方法,

方法一.

先停止 container, 執行 `docker-compose down` 再執行 `docker-compose up`.

方法二.

不需要停止 container, 直接執行 `docker-compose up -d`.

(他會自動幫你重建, 很方便, 不需要多一步先關閉 container )

結論, 只要你的 `docker-compose.yml` 有任何變動, 一定要執行 `docker-compose up` 才會生效.

再來談 `docker-compose restart`,

請看官方文件 [docker-compose restart](https://docs.docker.com/compose/reference/restart/), 如果你對 `docker-compose.yml` 修改, 然後使用這個指令, 是**不會**生效的,

但是, 如果你是改 code (可能是 python code), 那這個指令是有效的.

### docker-compose networks

* [Youtube Tutorial - docker-compose networks 說明](https://youtu.be/wmV9WfkpyGk)

這邊多補充 docker-compose networks 的觀念，因為剛好最近有用到:smile:

```yml
version: '3.5'
services:

    db:
      container_name: 'postgres'
      image: postgres
      environment:
        POSTGRES_PASSWORD: password123
      ports:
        - ""5432:5432""
        # (HOST:CONTAINER)
      volumes:
        - pgdata:/var/lib/postgresql/data/
      networks:
        - proxy

    web:
      build: ./api
      command: python manage.py runserver 0.0.0.0:8000
      restart: always
      volumes:
        - api_data:/docker_api
        # (HOST:CONTAINER)
      ports:
        - ""8000:8000""
        # (HOST:CONTAINER)
      depends_on:
        - db
      networks:
        - proxy

volumes:
    api_data:
    pgdata:

networks:
    proxy:
      # external:
        name: my_network
```

先把 version 改成 3.5，因為這版本才開始有 networks name 的概念，在

db 以及 web 中都加了 networks ( 自己定義的 )，定義的地方在最後面，

proxy 是名稱 ( 類似 volumes 的概念 )，`external` option 的意思代表

是不是要參考外部別人已經定義好的 network ( 所以如果找不到就會報錯 )，

但如果不加上 `external` option，也就代表是自己定義的，會幫你自動建立

你所定義的 network，名稱為 my_network。

如果你都完全沒有定義 networks，預設就是資料夾的名稱_default 。

### docker-compose ports 和 expose 差異

在 docker-compose 中有兩種方法可以暴露容器 ports，

分別是 ports 和 expose，

#### ports

```yml
...
ports:
  - ""5000:5000""  # 绑定 container 中的 5000 port 到 本機(HOST) 的 5000 port
  # (HOST:CONTAINER)

  - ""5001:5000""  # 绑定 container 中的 5000 port 到 本機(HOST) 的 5001 port

  - ""5000""       # 绑定 container 中的 5000 port 到本機的任意 port (本機會隨機被分配到一個 port)
...
```

隨機 port 範例，

這邊使用 dpage/pgadmin4 這個 images 來示範，

```cmd
docker run -p 80 \
    -e ""PGADMIN_DEFAULT_EMAIL=xxxrubiks@gmail.com"" \
    -e ""PGADMIN_DEFAULT_PASSWORD=SuperSecret"" \
    -d dpage/pgadmin4
```

如果我們執行兩次以上指令，你會發現本機被分配到兩個隨機的 ports (如下圖)，

![alt tag](https://i.imgur.com/kkcnuJI.png)

本機被隨機分配到 32768 以及 32769 port，

這邊不管我們怎麼設定 ports，這些 ports 都會暴露給本機 (HOST) 以及其他 containers，這點很重要:exclamation::exclamation:

也就是說，如果本機 5001 ports 被使用了，其他的 containers 就無法使用 5001 ports，

可能要改成5002 ports 之類的。

#### expoese

```yml
...
expose:
  - ""4000""
  - ""6000""
...
```

expose 是將 port 暴露給其他容器。

expose 和 ports 最大的差別就是在 expose 不會暴露 port 給本機(HOST)，

所以 本機(HOST)絕對無法被訪問，但 containers 內可以被訪問，

所以說如果今天你的容器想要在 本機(HOST) 被訪問，一定要使用 ports 方式。

***ports 和 expose 差異***

簡單說，就是 ports 可以被 本機(HOST) 和 containers 訪問 ; 而

expose 是本機(HOST) 無法被訪問，只有在 containers 中可以被訪問。

## Docker container 內如何連接到本機 localhost 服務

![alt tag](https://i.imgur.com/kQLcALp.png)

假設今天在本機上有一個 A 服務, 他是使用 docker run 起來的,

而本機上還有一個 B 服務, 是用 vscode run 起來的 (非 docker),

這時候我有一個需求, 我想要將我的 A 服務連線到我的 B 服務,

也就是從 docker 內的服務連接到本機 localhost.

比較簡單的方法, 就是透過 docker 內的這個參數,

`host.docker.internal:host-gateway`.

在你的 yml 裡面加上,

```yml
version: '3.5'
services:

  web:
    ......
    extra_hosts:
      - ""host.docker.internal:host-gateway""
......
```

這樣當你在容器內, 就可以順利訪問本機:smile:

```cmd
curl http://host.docker.internal:8069
```

## Docker Registry

![](https://i.imgur.com/uAXUtxT.png)

可以把它想成是一個類似 github 的地方，只不過裡面變成是存 docker 的東西，當然，

也可以自己架，但會有一些額外的成本，像是網路，維護等等，這部分就要自己衡量了:grinning:

接下來教大家如何將 image push 到 Docker Registry :smiley:

* [Youtube Tutorial PART 4 - Docker push image to Docker Hub 教學](https://youtu.be/dVBKwmqO5e4)

首先，先登入 [Docker Registry](https://hub.docker.com/)  ( 註冊流程很簡單，我就跳過了 )

```cmd
docker login
```

![](https://i.imgur.com/lm9GWTj.png)

舉個例子，先 run 一個 busybox 的容器

```cmd
docker run -it busybox
```

接著在裡面新增一筆資料

```cmd
 echo 'text' > data.txt
```

![](https://i.imgur.com/KCeZGQh.png)

然後打開另一個 terminal ，使用 `docker ps` 查看目前容器的 id

![](https://i.imgur.com/mBIhGBW.png)

再來使用像 git 一樣的方式 commit

docker commit

```cmd
docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
```

可參考 [https://docs.docker.com/engine/reference/commandline/commit/](https://docs.docker.com/engine/reference/commandline/commit/)

```cmd
docker commit -m ""test"" 4fb4ef51e917 twtrubiks/my_busybox
```

`-m` commit message ，和 git 一樣。

twtrubiks/my_busybox 則為我們定義的 REPOSITORY。

如果需要 tag , 也可以增加

```cmd
docker commit -m ""test"" 4fb4ef51e917 twtrubiks/my_busybox:v1
```

（ 如果沒定義 tag , 則會顯示 latest ）

這時候可以用 `docker images` 查看

![](https://i.imgur.com/R548ail.png)

最後 push

```cmd
docker push twtrubiks/my_busybox
```

![](https://i.imgur.com/2ExgYpB.png)

docker 是一層一層的概念，他只會 push 自己新增的幾層上去而已，

所以不用擔心整個 image 很大，要上傳很久 :relaxed:

最後可以到 [https://hub.docker.com/](https://hub.docker.com/) 確認是否有成功 :smile:

![](https://i.imgur.com/W5P3YQL.png)

## 用 Docker 實戰 Django 以及 Postgre

* [Youtube Tutorial PART 2 - 用 Docker 實戰 Django 以及 Postgre](https://youtu.be/aZ6woJ7qekE)

上面介紹了那麼多，來實戰一下是必須的 :satisfied:

我們使用 [Django-REST-framework 基本教學 - 從無到有 DRF-Beginners-Guide](https://github.com/twtrubiks/django-rest-framework-tutorial) 來當範例

有幾個地方必須修改一下，

將 `settings.py`  裡面的 db 連線改成 [PostgreSQL](https://www.postgresql.org/)

```pyhon
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'password123',
        'HOST': 'db',
        'PORT': 5432,
    }
}
```

建議也將 `ALLOWED_HOSTS = []` 改為 `ALLOWED_HOSTS = ['*']`
（ 這只是方便，實務上不會這樣使用 ）

再來是兩個很重要的檔案，分別為 `Dockerfile` 和 `docker-compose.yml`

`Dockerfile`

```text
FROM python:3.8.12
LABEL maintainer twtrubiks
ENV PYTHONUNBUFFERED 1
RUN mkdir /docker_api
WORKDIR /docker_api
COPY . /docker_api/
RUN pip install -r requirements.txt
```

詳細可參考 [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)

`docker-compose.yml`

```yml
version: '3'
services:

    db:
      container_name: 'postgres'
      image: postgres
      environment:
        POSTGRES_PASSWORD: password123
      ports:
        - ""5432:5432""
        # (HOST:CONTAINER)
      volumes:
        - pgdata:/var/lib/postgresql/data/

    web:
      build: ./api
      command: python manage.py runserver 0.0.0.0:8000
      restart: always
      volumes:
        - api_data:/docker_api
        # (HOST:CONTAINER)
      ports:
        - ""8000:8000""
        # (HOST:CONTAINER)
      depends_on:
        - db

volumes:
    api_data:
    pgdata:
```

詳細可參考 [https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples](https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples)

溫馨小提醒 1  :heart:

可能有人會問為什麼我是使用 `0.0.0.0`，而不是使用 `127.0.0.1`:question::question:

```cmd
python manage.py runserver 0.0.0.0:8000
```

`127.0.0.1`，並不代表真正的 **本機**，我們經常認為他是本機是因為我們電腦的 `host` 預設都幫你設定好了:smirk:

詳細的 `host` 設定教學可參考 [hosts-設定檔 以及 查詢內網 ip](https://github.com/twtrubiks/docker-django-nginx-uswgi-postgres-tutorial#hosts-設定檔-以及-查詢內網-ip)，

`0.0.0.0` 才是真正的代表，**當下 ( 本 ) 網路中的本機** :pencil2:

如果大家想更深入的了解，可 google 再進一步的了解 `127.0.0.1` 以及 `0.0.0.0` 的差異 :smile:

溫馨小提醒 2  :heart:

這邊要特別提一下 `depends_on` 這個參數，

詳細可參考 [https://docs.docker.com/compose/compose-file/#depends_on](https://docs.docker.com/compose/compose-file/#depends_on)，

上面連結中有一段說明很值得看

****depends_on does not wait for db and redis to be 「ready」 before starting web - only until they have been started. If you need to wait for a service to be ready, see Controlling startup order for more on this problem and strategies for solving it.****

以我的 [docker-compose.yml](https://github.com/twtrubiks/docker-tutorial/blob/master/docker-compose.yml) 為例，啟動順序雖然為 db -> web，**但他不會等待 db 啟動完成後才啟動 web**，

也就是說，還是有可能 **web 比 db 先啟動完成**，這樣就需要重啟 web service，否則會無法連上 db :sob:

如果真的要控制啟動順序，請參考 [Controlling startup order](https://docs.docker.com/compose/startup-order/)。

溫馨小提醒 3  :heart:

`docker-compose.yml` 其實使用 `docker run` 也是可以完成的，例如這個範例中，如果使用

`docker run` 來寫，會變成這樣。

首先，為了讓容器彼此可以溝通，我們先建立一個網路 ( User-defined networks )，

```cmd
docker network create my_network
```

db 容器

```cmd
docker run --name db -v pgdata:/var/lib/postgresql/data/ -p 5432:5432 --network=my_network -e POSTGRES_PASSWORD=password123 postgres
```

接下來先去 api 資料夾中 build 出 image

```cmd
docker build --tag web_image .
```

`--tag , -t` , tag 這個 image 名稱為 web_image

也可以是

```cmd
docker build -t user/repo:tag .
```

web 容器

```cmd
docker run --name web -v api_data:/docker_api -p 8000:8000 --network=my_network --restart always web_image python manage.py runserver 0.0.0.0:8000
```

以上這樣，和 `docker-compose.yml`  其實是一樣的:open_mouth:

設定完了之後，接下來我們就可以啟動他了

```cmd
docker-compose up
```

接下來你會看到類似的畫面

![](https://i.imgur.com/GJWIgEP.png)

![](https://i.imgur.com/dVRRyrM.png)

假如你出現了類似的畫面

![](https://i.imgur.com/cCEmVBq.png)

代表 database 還在建立的時候，你的 web ( Django ) 就去連接他，

所以導致連接不上，這時候我們可以先終止他 ( 按 Ctrl+C )

接著在重新 `docker-compose up`

我們成功啟動了 ( db 連線也正常 )

![](https://i.imgur.com/iuCxLMY.png)

:exclamation: [commit](https://github.com/twtrubiks/docker-tutorial/commit/398cb2fc375af8926cfe1eeabda33da018437897) 已經更新為自動 migrate:exclamation:

但你仔細看上圖，你會發現他說你還沒 migrate

接下來我們開啟另一個 cmd 進入 web 的 service，

透過剛剛介紹的指令進入 service

```cmd
docker ps
docker exec -it <Container ID> bash
```

或是說也可以從 [Kitematic](https://kitematic.com/) 進入，

進入後我們可以開始 migrate

```cmd
python manage.py makemigrations musics
python manage.py migrate
```

![](https://i.imgur.com/zMmZKuL.png)

順便在建立一個 superuser

```cmd
python manage.py createsuperuser
```

:exclamation: [commit](https://github.com/twtrubiks/docker-tutorial/commit/398cb2fc375af8926cfe1eeabda33da018437897) 已經更新為自動建立 superuser:exclamation:

請參考 [docker-compose.yml](https://github.com/twtrubiks/docker-tutorial/blob/master/docker-compose.yml) 中的 environment ( 如下 ),

`DJANGO_SUPERUSER_USERNAME` `DJANGO_SUPERUSER_PASSWORD` `DJANGO_SUPERUSER_EMAIL`

接著我們可以試著使用 GUI 介紹連接 db，

因為我們是用 [PostgreSQL](https://www.postgresql.org/)  ，可以透過 [pgadmin](https://www.pgadmin.org/) 連線

![](https://i.imgur.com/2Hdt7wU.png)

我們剛剛 migrate 的東西確實有存在

![](https://i.imgur.com/PEUfGRy.png)

我們不需要再重新啟動

直接可以開開心心的去瀏覽 [http://127.0.0.1:8000/api/music/](http://127.0.0.1:8000/api/music/)

大家一定會看到很熟悉的畫面

![](https://i.imgur.com/pzqZbdz.png)

接著依照自己剛剛設定的帳密登入進去即可

![](https://i.imgur.com/l6RZXsQ.png)

![](https://i.imgur.com/xeJtRJc.png)

以上整個環境，都是在 Docker 中 :open_mouth:

如果我們再 Ctrl+C 退出，重新啟動一次  `docker-compose up`

這次就不會再和你說你沒有 migrate 了

![](https://i.imgur.com/zIBkL3t.png)

## 其他管理 Docker GUI 的工具

* [Youtube Tutorial PART 3 - Docker 基本教學 - 透過 portainer 管理  Docker](https://youtu.be/VZjHmBcEcew)

除了 [Kitematic](https://kitematic.com/) 之外，還有其他不錯的推薦給大家，

這次要介紹的就是 [portainer](https://github.com/portainer/portainer) 功能強大又好用 :fire:

其實如果去看看 [Kitematic](https://github.com/docker/kitematic) 以及 [portainer](https://github.com/portainer/portainer) 的 github，

你會發現 [portainer](https://github.com/portainer/portainer) 感覺比較有在 maintenance :smile:

而且我使用了 [portainer](https://github.com/portainer/portainer) 之後，真心大推 :smiley:

安裝方法可參考 [https://portainer.io/install.html](https://portainer.io/install.html)

```cmd
docker volume create portainer_data
docker run --name=portainer -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer
```

`-d` `-p` 在前面的 `docker run` 有介紹過代表的含意，`--name` 只是命名而已。

`Note 1`: The -v /var/run/docker.sock:/var/run/docker.sock option is available on Linux environments only.

`Note 2`: The -v portainer_data:/data portainer/portainer option will persist Portainer data in portainer_data on the host where Portainer is running. You can specify another location on your filesystem.

（ 建立起來之後，就依照 container 的操作即可 ）

之後查看 [http://localhost:9000/](http://localhost:9000/) 就會看到下圖

然後設定帳號、密碼

![](https://i.imgur.com/exdMf2p.png)

選 Local or Remote

![](https://i.imgur.com/3mkNMxF.png)

畫面真的不錯看，而且資訊也很豐富 :heart_eyes:

![](https://i.imgur.com/ynoqTZT.png)

相信我，你使用完他之後，你會默默的邊緣化 [Kitematic](https://kitematic.com/) :smirk:

## 查看 port 佔用狀況

這個推薦給大家，有時候會遇到 port 被佔用，用指令查比較方便

Linux

安裝 net-tools

```cmd
sudo apt install net-tools
```

查看誰佔用 80 port

```cmd
sudo netstat -lnp | grep -w ':80'
```

`-l`, `--listening` display listening server sockets.

`-n`, `--numeric` don't resolve names.

`-p`, `--programs` display PID/Program name for sockets.

也可以使用 `lsof`

```cmd
sudo lsof -i :80
```

`-i` select IPv[46] files.

Windows

查看所有 port 的佔用狀況

```cmd
netstat -ano
```

查看指定 port 的佔用狀況，例如現在想要查看 port 5432 佔用的狀況

```cmd
netstat -aon|findstr ""5432""
```

查看 PID 對應的 process

```cmd
tasklist|findstr ""2016""
```

停止 PID 為 6093 的 process

```cmd
taskkill /f /PID 6093
```

停止 vscode.exe process

```cmd
taskkill /f /t /im vscode.exe
```

MAC

將 port 為 8000 的 process 全部停止

```cmd
sudo lsof -t -i tcp:8000 | xargs kill -9
```

查看指定 port 的佔用狀況，例如現在想要查看 port 5432 佔用的狀況

```cmd
lsof -i tcp:5432
```

## 在 Linux 中自動啟動 docker

[在 Linux 中自動啟動 docker](https://github.com/twtrubiks/docker-tutorial/tree/master/docker-auto-run-linux)

## 如何清除 Docker container log

[Youtube Tutorial - 如何清除 Docker container log](https://youtu.be/SiG0tmwhqqg)

docker 的 container log 都會在 `/var/lib/docker/containers` 裡面

( 前提是你使用官方的安裝方法, [Youtube Tutorial-Ubuntu(Linux) 如何安裝 docker](https://youtu.be/eS_HMBC_RaA))

如果你是使用 `snap` 安裝 docker, 路徑則會在 `/var/snap/docker/common/var-lib-docker/containers`.

![alt tag](https://i.imgur.com/sK5k4Iw.png)

log 是一個 json 的檔案

![alt tag](https://i.imgur.com/feSGmcm.png)

如果你一直不去管他, log 就會越來越大:scream:

以下狀況這個 log 會被清除, 就是修改了 `docker-compose.yml` 或是

你執行了 `docker-compose down`, 這些 logs 都會被清除 (因為 containers 重新建立).

(`docker-compose stop` 不受影響, 因為只是暫停而已)

建立大家可參考 [docker-compose up/down 和 restart 的差異](https://github.com/twtrubiks/docker-tutorial#docker-compose-updown-%E5%92%8C-restart-%E7%9A%84%E5%B7%AE%E7%95%B0)

那你可能會問我, 如果我很長一段時間都不會修改 `docker-compose.yml` 以及執行

`docker-compose down` 該怎麼辦:sob: (因為 log 可能會長很快)

這邊提供大家一個方法, 使用 linux 中的 truncate 指令(可參考 [ Linux 指令教學 - truncate](https://github.com/twtrubiks/linux-note#truncate))

刪除全部 container 的 logs

```cmd
truncate -s 0 /var/lib/docker/containers/*/*-json.log
```

但是有時候只希望針對(清除)某個 container 的 logs, 這時候就可以使用以下的指令

```cmd
truncate -s 0 $(docker inspect --format='{{.LogPath}}' <container_name_or_id>)
```

(`container_name_or_id` 請換上自己 container 的 id 或 name)

其中的 `docker inspect --format='{{.LogPath}}' <container_name_or_id>` 只是顯示路徑而已.

![alt tag](https://i.imgur.com/TKCCdio.png)

但還有一個更好的方法, 直接透過 docker 內的 JSON File logging driver.

## JSON File logging driver

[Youtube Tutorial - Docker 中的 JSON File logging driver(container log)](https://youtu.be/wb9bONgnFn4)

在 docker 中 json-file driver 是默認的 default logging driver, 詳細可參考 [json-file](https://docs.docker.com/config/containers/logging/json-file/)

所以我們可以透過這個設定限制 log 的大小,

```yaml
logging:
  driver: ""json-file""
  options:
    max-file: ""1""    # default 是 1
    max-size: ""200m"" # default 是 -1, 也就是沒有限制
```

設定完之後重新啟動 docker-compose, 可以使用以下的指令查看是否生效

```cmd
docker inspect --format '{{.HostConfig.LogConfig}}' CONTAINER
```

![alt tag](https://i.imgur.com/L6Z7bYX.png)

這樣設定完之後, 就不用再擔心 container log 吃掉大量的容量了:smile:

## 後記：

Docker 算是我最近才開始接觸的，所以也算是新手，如果我有任何講錯的，歡迎和我說，我會再修改  :grinning:

Docker 可以玩的真的很多，延伸參考

* [實戰 Docker + Jenkins + Django + Postgres 📝](https://github.com/twtrubiks/docker-jenkins-django-tutorial) - 結合 Jenkins

* [Docker + Django + Nginx + uWSGI + Postgres 基本教學 - 從無到有](https://github.com/twtrubiks/docker-django-nginx-uwsgi-postgres-tutorial)

* [實戰 Docker + Django + Nginx + uWSGI + Postgres - Load Balance 📝](https://github.com/twtrubiks/docker-django-nginx-uwsgi-postgres-load-balance-tutorial)

也可以再玩玩 **Docker Swarm** ( 分散式系統 ) :satisfied:

* [Docker Swarm 基本教學 - 從無到有 Docker-Swarm-Beginners-Guide📝](https://github.com/twtrubiks/docker-swarm-tutorial)

最後，希望大家在學習 Docker 的過程中，遇到不懂的，可以去找資料並且了解他，
順便補足一些之前不足的知識。

## 執行環境

* Mac
* Python 3.8.12
* windows 10

## Reference

* [https://docs.docker.com/](https://docs.docker.com/)
* [portainer](https://github.com/portainer/portainer)

## Donation

文章都是我自己研究內化後原創，如果有幫助到您，也想鼓勵我的話，歡迎請我喝一杯咖啡:laughing:

綠界科技ECPAY ( 不需註冊會員 )

![alt tag](https://payment.ecpay.com.tw/Upload/QRCode/201906/QRCode_672351b8-5ab3-42dd-9c7c-c24c3e6a10a0.png)

[贊助者付款](http://bit.ly/2F7Jrha)

歐付寶 ( 需註冊會員 )

![alt tag](https://i.imgur.com/LRct9xa.png)

[贊助者付款](https://payment.opay.tw/Broadcaster/Donate/9E47FDEF85ABE383A0F5FC6A218606F8)

## 贊助名單

[贊助名單](https://github.com/twtrubiks/Thank-you-for-donate)

## License

MIT license
","summarize: # docker-tutorial                 Docker  -  Docker-Beginners-Guide
 Docker  - Django   - Postgresql - Docker container - Docker push image to
Docker Hub. The tutorial is divided into four parts."
2492,Reduce the burden of mathematics when playing OpenSCAD,"# dotSCAD 3.3

> **Reduce the burden of mathematics/algorithm when playing OpenSCAD.**

![dotSCAD](featured_img/Owls.JPG)

## Introduction

Some of my [3D models](https://github.com/JustinSDK/dotSCAD#examples) require complex mathematics/algorithm. I extract them into dotSCAD. Hope it helps when you're playing OpenSCAD.

The idea of the name dotSCAD comes from the filename extension "".scad"" of OpenSCAD. 

## Getting started

OpenSCAD uses three library locations, the installation library, built-in library, and user defined libraries. Check [Setting OPENSCADPATH](https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Libraries#Setting_OPENSCADPATH) in [OpenSCAD User Manual/Libraries](https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Libraries) for details.

**I set `OPENSCADPATH` to the `src` folder of dotSCAD so all examples here start searching modules/functions from `src`.**

Every public module/function has the same name as the .scad file. Here's an example using the `line2d` module: 

	use <line2d.scad>

	line2d(p1 = [0, 0], p2 = [5, 0], width = 1);

The library uses directories to categorize some modules/functions. For example, vx_circle.scad exists in `voxel` directory. Prefix the directory name when using `vx_circle`.

    use <voxel/vx_circle.scad>
	
	points = vx_circle(radius = 10);
	for(pt = points) {
        translate(pt) square(1);
	}

## Examples

These examples incubate dotSCAD and dotSCAD refactors these examples. See [examples](examples#dogfooding-examples).

[![examples](examples/images/gallery.JPG)](examples#dogfooding-examples)

# API Reference

## 2D Module

 Signature | Description
--|--
[**arc**(radius, angle[, width, width_mode""])](https://openhome.cc/eGossip/OpenSCAD/lib3x-arc.html) | create an arc.
[**hexagons**(radius, spacing, levels)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hexagons.html) | create hexagons in a hexagon.
[**line2d**(p1, p2[, width, p1Style, p2Style])](https://openhome.cc/eGossip/OpenSCAD/lib3x-line2d.html) | create a line from two points. 
[**multi_line_text**(lines[, line_spacing, size, font, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-multi_line_text.html) | create multi-line text from a list of strings.
[**pie**(radius, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-pie.html) | create polyline2de a pie (circular sector).
[**polyline2d**(points[, width, startingStyle, endingStyle, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyline2d.html) | create a polyline from a list of `[x, y]` coordinates.
[**polygon_hull**(points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-polygon_hull.html) | create a convex polygon by hulling a list of points. It avoids using hull and small 2D primitives to create the polygon.
[**rounded_square**(size, corner_r[, center])](https://openhome.cc/eGossip/OpenSCAD/lib3x-rounded_square.html) | create a rounded square in the first quadrant.

## 3D Module

 Signature | Description
--|--
[**crystal_ball**(radius[, theta, phi, thickness])](https://openhome.cc/eGossip/OpenSCAD/lib3x-crystal_ball.html) | create a crystal ball based on [spherical coordinates (r, θ, φ) used in mathematics](https://en.wikipedia.org/wiki/Spherical_coordinate_system).
[**line3d**(p1, p2[, diameter, p1Style, p2Style])](https://openhome.cc/eGossip/OpenSCAD/lib3x-line3d.html) | create a 3D line from two points.
[**loft**(sections[, slices])](https://openhome.cc/eGossip/OpenSCAD/lib3x-loft.html) | develop a smooth skin between crosssections with different geometries.
[**polyhedron_hull**(points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedron_hull.html) | create a convex polyhedron by hulling a list of points. It avoids using `hull` and small 3D primitives to create the polyhedron.
[**polyline3d**(points, diameter[, startingStyle, endingStyle])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyline3d.html) | create a polyline from a list of `[x, y, z]`.
[**rounded_cube**(size, corner_r[, center])](https://openhome.cc/eGossip/OpenSCAD/lib3x-rounded_cube.html) | create a cube in the first octant.
[**rounded_cylinder**(radius, h, round_r[, convexity, center])](https://openhome.cc/eGossip/OpenSCAD/lib3x-rounded_cylinder.html) | create a rounded cylinder.
[**sweep**(sections[, triangles])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sweep.html) | develop a smooth skin from crosssections with the same number of sides.

## Transformation

 Signature | Description
--|--
[**along_with**(points, angles[, twist, scale, method])](https://openhome.cc/eGossip/OpenSCAD/lib3x-along_with.html) | put children along the given path. If there's only one child, put the child for each point.
[**bend**(size, angle[, frags])](https://openhome.cc/eGossip/OpenSCAD/lib3x-bend.html) | bend a 3D object.
[**hollow_out**(shell_thickness) ](https://openhome.cc/eGossip/OpenSCAD/lib3x-hollow_out.html)| hollow out a 2D object.
[**shear**([sx, sy, sz])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shear.html) | shear all child elements along the X-axis, Y-axis, or Z-axis.
[**select**(i)](https://openhome.cc/eGossip/OpenSCAD/lib3x-select.html) | select module objects.
[**polyline_join**(points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyline_join.html) | place a join on each point. Hull each pair of joins and union all convex hulls.

## 2D Function

 Signature | Description
--|--
[**bijection_offset**(pts, d[, epsilon])](https://openhome.cc/eGossip/OpenSCAD/lib3x-bijection_offset.html) | move 2D outlines outward or inward by a given amount. Each point of the offsetted shape is paired with exactly one point of the original shape.
[**contours**(points, threshold)](https://openhome.cc/eGossip/OpenSCAD/lib3x-contours.html) | compute contour polygons by applying [marching squares](https://en.wikipedia.org/wiki/Marching_squares) to a rectangular list of numeric values.
[**in_shape**(shapt_pts, pt[, include_edge, epsilon])](https://openhome.cc/eGossip/OpenSCAD/lib3x-in_shape.html) | check whether a point is inside a shape.
[**trim_shape**(shape_pts, from, to[, epsilon])](https://openhome.cc/eGossip/OpenSCAD/lib3x-trim_shape.html) | trim a tangled-edge shape to a non-tangled shape.

## 2D/3D Function

 Signature | Description
--|--
[**angle_between**(vt1, vt2)](https://openhome.cc/eGossip/OpenSCAD/lib3x-angle_between.html) | return the angle between two vectors.
[**bezier_smooth**(path_pts, round_d[, t_step, closed, angle_threshold])](https://openhome.cc/eGossip/OpenSCAD/lib3x-bezier_smooth.html) | use bezier curves to smooth a path.
[**cross_sections**(shape_pts, path_pts, angles[, twist, scale])](https://openhome.cc/eGossip/OpenSCAD/lib3x-cross_sections.html) | given a 2D shape, points and angles along the path, this function returns all cross-sections.
[**in_polyline**(line_pts, pt[, epsilon])](https://openhome.cc/eGossip/OpenSCAD/lib3x-in_polyline.html) | check whether a point is on a line.
[**lines_intersection**(line1, line2[, ext, epsilon])](https://openhome.cc/eGossip/OpenSCAD/lib3x-lines_intersection.html) | find the intersection of two line segments. Return `[]` if lines don't intersect.
[**path_scaling_sections**(shape_pts, edge_path)](https://openhome.cc/eGossip/OpenSCAD/lib3x-path_scaling_sections.html) | given an edge path with the first point at the outline of a shape, this function uses the path to calculate scaling factors and returns all scaled sections in the reversed order of the edge path. 
[**midpt_smooth**(points, n[, closed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-midpt_smooth.html) | given a 2D path, this function constructs a mid-point smoothed version by joining the mid-points of the lines of the path.

## Path

 Signature | Description
--|--
[**arc_path**(radius, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-arc_path.html) | create an arc path.
[**archimedean_spiral**(arm_distance, init_angle, point_distance, num_of_points[, rt_dir])](https://openhome.cc/eGossip/OpenSCAD/lib3x-archimedean_spiral.html) | get all points and angles on the path of an archimedean spiral. 
[**bauer_spiral**(n, radius = 1[, rt_dir])](https://openhome.cc/eGossip/OpenSCAD/lib3x-bauer_spiral.html) | create visually even spacing of n points on the surface of the sphere. Successive points will all be approximately the same distance apart.
[**bezier_curve**(t_step, points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-bezier_curve.html) | given a set of control points, this function returns points of the Bézier path.
[**bspline_curve**(t_step, degree, points, knots, weights)](https://openhome.cc/eGossip/OpenSCAD/lib3x-bspline_curve.html) | B-spline interpolation using [de Boor's algorithm](https://en.wikipedia.org/wiki/De_Boor%27s_algorithm). 
[**curve**(t_step, points[, tightness])](https://openhome.cc/eGossip/OpenSCAD/lib3x-curve.html) | create a curved path. An implementation of [Centripetal Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline). 
[**fibonacci_lattice**(n, radius = 1[, dir])](https://openhome.cc/eGossip/OpenSCAD/lib3x-fibonacci_lattice.html) | create visually even spacing of n points on the surface of the sphere. Nearest-neighbor points will all be approximately the same distance apart. 
[**golden_spiral**(from, to, point_distance[, rt_dir)]](https://openhome.cc/eGossip/OpenSCAD/lib3x-golden_spiral.html) | get all points and angles on the path of a golden spiral based on Fibonacci numbers. The distance between two points is almost constant.
[**helix**(radius, levels, level_dist[, vt_dir, rt_dir])](https://openhome.cc/eGossip/OpenSCAD/lib3x-helix.html) | get all points on the path of a spiral around a cylinder. 
[**sphere_spiral**(radius, za_step[, z_circles, begin_angle, end_angle, ...]) ](https://openhome.cc/eGossip/OpenSCAD/lib3x-sphere_spiral.html)| create all points and angles on the path of a spiral around a sphere. It returns a vector of `[[x, y, z], [ax, ay, az]]`. 
[**torus_knot**(p, q, phi_step)](https://openhome.cc/eGossip/OpenSCAD/lib3x-torus_knot.html) | generate a path of [The (p,q)-torus knot](https://en.wikipedia.org/wiki/Torus_knot).

## Extrusion

 Signature | Description
--|--
[**bend_extrude**(size, thickness, angle[, frags])](https://openhome.cc/eGossip/OpenSCAD/lib3x-bend_extrude.html) | extrude and bend a 2D shape.
[**box_extrude**(height, shell_thickness, bottom_thickness[, offset_mode, chamfer, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-box_extrude.html) | create a box (container) from a 2D object.
[**ellipse_extrude**(semi_minor_axis, height[, center, convexity, twist, slices])](https://openhome.cc/eGossip/OpenSCAD/lib3x-ellipse_extrude.html) | extrude a 2D object along the path of an ellipse from 0 to 180 degrees.
[**rounded_extrude**(size, round_r[, angle, twist, convexity])](https://openhome.cc/eGossip/OpenSCAD/lib3x-rounded_extrude.html) | extrude a 2D object roundly from 0 to 180 degrees.
[**stereographic_extrude**(shadow_side_leng)](https://openhome.cc/eGossip/OpenSCAD/lib3x-stereographic_extrude.html) | take a 2D polygon as input and extend it onto a sphere.

## 2D Shape

 Signature | Description
--|--
[**shape_arc**(radius, angle, width[, width_mode])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_arc.html) | return points on the path of an arc shape.
[**shape_circle**(radius, n)](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_circle.html) | return points on the path of a circle.
[**shape_cyclicpolygon**(sides, circle_r, corner_r)](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_cyclicpolygon.html) | return points on the path of a regular cyclic polygon.
[**shape_ellipse**(axes)](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_ellipse.html) | return points on the path of an ellipse.
[**shape_liquid_splitting**(radius, centre_dist[, tangent_angle, t_step])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_liquid_splitting.html) | return shape points of two splitting liquid shapes, kind of how cells divide. 
[**shape_path_extend**(stroke_pts, path_pts[, scale, closed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_path_extend.html) | extend a 2D stroke along a path to create a 2D shape.
[**shape_pentagram**(r)](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_pentagram.html) | return shape points of a pentagram.
[**shape_pie**(radius, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_pie.html) | return shape points of a pie (circular sector) shape. 
[**shape_square**(size[, corner_r])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_square.html) | return shape points of a rounded square or rectangle. 
[**shape_star**([outer_radius, inner_radius, n])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_star.html) | create a 2D star.
[**shape_superformula**(phi_step, m1, m2, n1, [n2, n3, a, b])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_superformula.html) | return shape points of [Superformula](https://en.wikipedia.org/wiki/Superformula).
[**shape_taiwan**(h[, distance])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_taiwan.html) | return shape points of [Taiwan](https://www.google.com.tw/maps?q=taiwan&um=1&ie=UTF-8&sa=X&ved=0ahUKEwjai9XrqurTAhVIopQKHbEHClwQ_AUICygC). 
[**shape_trapezium**(length, h[, corner_r])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shape_trapezium.html) | return shape points of an isosceles trapezoid. 

## 2D Shape Extrusion

 Signature | Description
--|--
[**archimedean_spiral_extrude**(shape_pts, arm_distance, init_angle, point_distance, num_of_points, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-archimedean_spiral_extrude.html) | extrude a 2D shape along the path of an archimedean spiral.
[**golden_spiral_extrude**(shape_pts, from, to, point_distance, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-golden_spiral_extrude.html) | extrude a 2D shape along the path of a golden spiral.
[**helix_extrude**(shape_pts, radius, levels, level_dist, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-helix_extrude.html) | extrude a 2D shape along a helix path.
[**path_extrude**(shape_pts, path_pts, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-path_extrude.html) | extrude a 2D shape along a path.
[**ring_extrude**(shape_pts, radius[, angle = 360])](https://openhome.cc/eGossip/OpenSCAD/lib3x-ring_extrude.html) | rotational extrusion spins a 2D shape around the Z-axis.
[**sphere_spiral_extrude**(shape_pts, radius, za_step, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sphere_spiral_extrude.html) | extrude a 2D shape along the path of a sphere spiral.

## Util

### util/list

 Signature | Description
--|--
[**util/binary_search**(sorted, target[, lo, hi])](https://openhome.cc/eGossip/OpenSCAD/lib3x-binary_search.html) | search a value in a sorted list.
[**util/contains**(lt, elem)](https://openhome.cc/eGossip/OpenSCAD/lib3x-contains.html) | return `true` if `lt` contains `elem`.
[**util/find_index**(lt, test)](https://openhome.cc/eGossip/OpenSCAD/lib3x-find_index.html) | return the index of the first element that satisfies the testing function. 
[**util/dedup**(lt, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-dedup.html) | eliminate duplicate vectors.
[**util/flat**(lt[, depth])](https://openhome.cc/eGossip/OpenSCAD/lib3x-flat.html) | return a new list with all sub-list elements concatenated into it recursively up to the specified depth.
[**util/reverse**(lt)](https://openhome.cc/eGossip/OpenSCAD/lib3x-reverse.html) | reverse a list.
[**util/slice**(lt, begin, end)](https://openhome.cc/eGossip/OpenSCAD/lib3x-slice.html) | return a list selected from `begin` to `end`, or to the `end` of the list (`end` not included).
[**util/sorted**(lt[, cmp, key, reverse])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sorted.html) | sort a list.
[**util/sum**(lt)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sum.html) | use `+` to sum up all elements in a list.
[**util/swap**(lt, i, j)](https://openhome.cc/eGossip/OpenSCAD/lib3x-swap.html) | swap two elements in a list.
[**util/zip**(lts, combine)](https://openhome.cc/eGossip/OpenSCAD/lib3x-zip.html) | make a list that aggregates elements from each of the lists.
[**util/every**(lt, test)](https://openhome.cc/eGossip/OpenSCAD/lib3x-every.html) | test whether all elements in the list pass the test implemented by the provided function.
[**util/some**(lt, test)](https://openhome.cc/eGossip/OpenSCAD/lib3x-some.html) | test whether at least one element in the list passes the test implemented by the provided function.
[**util/count**(lt, test)](https://openhome.cc/eGossip/OpenSCAD/lib3x-count.html) | return the number of times `test` return `true` in the list.

### util/random

 Signature | Description
--|--
[**util/choose**(choices, seed)](https://openhome.cc/eGossip/OpenSCAD/lib3x-choose.html) | choose an element from the given list.
[**util/rand**([min_value, max_value, seed_value])](https://openhome.cc/eGossip/OpenSCAD/lib3x-rand.html) | generate a pseudo random number.
[**util/shuffle**(lt[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-shuffle.html) | randomizes the order of the elements.

### util/string

 Signature | Description
--|--
[**util/parse_number**(t)](https://openhome.cc/eGossip/OpenSCAD/lib3x-parse_number.html) | parse the string argument as an number.
[**util/split_str**(t, delimiter)](https://openhome.cc/eGossip/OpenSCAD/lib3x-split_str.html) | split the given string around matches of the given delimiting character.
[**util/sub_str**(t, begin, end)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sub_str.html) | return the part of the string from `begin` to `end`, or to the `end` of the string (`end` not included).

### util/math

 Signature | Description
--|--
[**util/degrees**(radians)](https://openhome.cc/eGossip/OpenSCAD/lib3x-degrees.html) | convert a radian measurement to the corresponding value in degrees.
[**util/radians**(degrees)](https://openhome.cc/eGossip/OpenSCAD/lib3x-radians.html) | convert a degree measurement to the corresponding value in radians.
[**util/polar_coordinate**(point)](https://openhome.cc/eGossip/OpenSCAD/lib3x-polar_coordinate.html) | convert from Cartesian to Polar coordinates.
[**util/spherical_coordinate**(point)](https://openhome.cc/eGossip/OpenSCAD/lib3x-spherical_coordinate.html) | convert from Cartesian to Spherical coordinates (used in mathematics). 
[**util/lerp**(v1, v2, amt)](https://openhome.cc/eGossip/OpenSCAD/lib3x-lerp.html) | linear interpolate the vector v1 to v2.
[**util/fibseq**(from, to)](https://openhome.cc/eGossip/OpenSCAD/lib3x-fibseq.html) | generate a Fibonacci sequence.	

### util/set

 Signature | Description
--|--
[**util/set/hashset**(lt, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset.html) | model the mathematical set, backed by a hash table. 
[**util/set/hashset_add**(set, elem, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset_add.html) | add an element to a `hashset`.
[**util/set/hashset_has**(set, elem, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset_has.html) | return `true` if a `hashset` contains the specified element.
[**util/set/hashset_del**(set, elem, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset_del.html) | del an element from a `hashset`.
[**util/set/hashset_len**(set)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset_len.html) | return the length of the elements in a `hashset`.
[**util/set/hashset_elems**(set)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashset_elems.html) | returns a list containing all elements in a `hashset`. No guarantees to the order.

### util/map

 Signature | Description
--|--
[**util/map/hashmap**(kv_lt, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap.html) | map keys to values.
[**util/map/hashmap_put**(map, key, value, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_put.html) | put a key/value pair to a `hashmap`.
[**util/map/hashmap_get**(map, key, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_get.html) | get the value of the specified key from a `hashmap`.
[**util/map/hashmap_del**(map, key, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_del.html) | delete the mapping for the specified key from a `hashmap` if present.
[**util/map/hashmap_len**(map)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_len.html) | return the length of a `hashmap`.
[**util/map/hashmap_keys**(map)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_keys.html) | return a list containing all keys in a `hashmap`.
[**util/map/hashmap_values**(map)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_values.html) | return a list containing all values in a `hashmap`.
[**util/map/hashmap_entries**(map)](https://openhome.cc/eGossip/OpenSCAD/lib3x-hashmap_entries.html) | return a list containing all `[key, value]`s in a `hashmap`.

## Matrix

 Signature | Description
--|--
[**matrix/m_determinant**(m)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_determinant.html) | calculate a determinant of a square matrix.
[**matrix/m_mirror**(v)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_mirror.html) | generate a transformation matrix which can pass into `multmatrix` to mirror the child element on a plane through the origin.
[**matrix/m_rotation**(a, v)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_rotation.html) | Generate a transformation matrix which can pass into `multmatrix` to rotate the child element about the axis of the coordinate system or around an arbitrary axis.
[**matrix/m_scaling**(s)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_scaling.html) | generate a transformation matrix which can pass into `multmatrix` to scale its child elements using the specified vector.
[**matrix/m_shearing**([sx, sy, sz])](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_shearing.html) | generate a transformation matrix which can pass into `multmatrix` to shear all child elements along the X-axis, Y-axis, or Z-axis in 3D.
[**matrix/m_translation**(v)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_translation.html) | generate a transformation matrix which can pass into multmatrix to translates (moves) its child elements along the specified vector.
[**maxtrix/m_transpose**(m)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_transpose.html) | transpose a matrix.
[**matrix/m_replace**(m, i, j, value)](https://openhome.cc/eGossip/OpenSCAD/lib3x-m_replace.html) | replace the aᵢⱼ element of a matrix.

## Point Transformation

 Signature | Description
--|--
[**ptf/ptf_bend**(size, point, radius, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_bend.html) | transform a point inside a rectangle to a point of an arc.
[**ptf/ptf_circle**(size, point)](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_circle.html) | transform a point inside a rectangle to a point inside a circle. 
[**ptf/ptf_ring**(size, point, radius[, angle, twist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_ring.html) | transform a point inside a rectangle to a point of a ring. 
[**ptf/ptf_rotate**(point, a, v)](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_rotate.html) | rotate a point a degrees around the axis of the coordinate system or an arbitrary axis.
[**ptf/ptf_sphere**(size, point, radius[, angle])](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_sphere.html) | transform a point inside a rectangle to a point of a sphere.
[**ptf/ptf_torus**(size, point, radius[, angle, twist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_torus.html) | transform a point inside a rectangle to a point of a torus.
[**ptf/ptf_x_twist**(size, point, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_x_twist.html) | twist a point along the x-axis.
[**ptf/ptf_y_twist**(size, point, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-ptf_y_twist.html) | twist a point along the y-axis.

## Triangle

 Signature | Description
--|--
[**triangle/tri_circumcenter**(shape_pts)](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_circumcenter.html) | return the circumcenter of a triangle.
[**triangle/tri_incenter**(shape_pts)](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_incenter.html) | return the incenter of a triangle.
[**triangle/tri_ear_clipping**(shape_pts[, ret, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_ear_clipping.html) | triangulation by [ear clipping](https://en.wikipedia.org/wiki/Polygon_triangulation#Ear_clipping_method).
[**triangle/tri_delaunay**(points[, ret])](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_delaunay.html) | Join a set of points to make a [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation).
[**triangle/tri_delaunay_indices**(d)](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_delaunay_indices.html) | return triangle indices from a delaunay object.
[**triangle/tri_delaunay_shapes**(d)](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_delaunay_shapes.html) | return triangle shapes from a delaunay object.
[**triangle/tri_delaunay_voronoi**(d)](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_delaunay_voronoi.html) | return [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) cells from a delaunay object.
[**triangle/tri_subdivide**(shape_pts[, n])](https://openhome.cc/eGossip/OpenSCAD/lib3x-tri_subdivide.html) | subdivide a triangle `n` times.

----

## Turtle

 Signature | Description
--|--
[**turtle/footprints2**(cmds[, start])](https://openhome.cc/eGossip/OpenSCAD/lib3x-footprints2.html) | drive a turtle with `[""forward"", length]` or `[""turn"", angle]`. This function is intended to use a turtle to imitate freehand drawing.
[**turtle/footprints3**(cmds[, start])](https://openhome.cc/eGossip/OpenSCAD/lib3x-footprints3.html) | a 3D verion of `footprint2`.
[**turtle/lsystem2**(axiom, rules, n, angle[, leng, heading, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-lsystem2.html) | 2D implementation of [L-system](https://en.wikipedia.org/wiki/L-system).
[**turtle/lsystem3**(axiom, rules, n, angle[, leng, heading, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-lsystem3.html) | 3D implementation of [L-system](https://en.wikipedia.org/wiki/L-system).
[**turtle/t2d**(t, cmd, point, angle, leng)](https://openhome.cc/eGossip/OpenSCAD/lib3x-t2d.html) | an implementation of Turtle Graphics.
[**turtle/t3d**(t, cmd, point, unit_vectors, leng, angle)](https://openhome.cc/eGossip/OpenSCAD/lib3x-t3d.html) | a 3D version of `t2d`.

## Voxel

 Signature | Description
--|--
[**voxel/vx_ascii**(char[, center, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_ascii.html) | generate 8x8 voxel points of printable ASCII characters (codes 32dec to 126dec).
[**voxel/vx_bezier**(p1, p2, p3, p4)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_bezier.html) | return voxel-by-voxel points of Bézier Curve.
[**voxel/vx_circle**(radius[, filled])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_circle.html) | return points that can be used to draw a voxel-style circle.
[**voxel/vx_contour**(points[, sorted])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_contour.html) | return the contour which encircles the area.
[**voxel/vx_curve**(points[, tightness])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_curve.html) | the curve is drawn only from the 2nd control point to the second-last control point.
[**voxel/vx_cylinder**(r, h[, filled, thickness])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_cylinder.html) | return points that can be used to draw a voxel-style cylinder.
[**voxel/vx_difference**(points1, points2)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_difference.html) | create a difference of two lists of points.
[**voxel/vx_from**(binaries[, center, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_from.html) | given a list of 0s and 1s that represent a black-and-white image. This function translates them into voxel points.
[**voxel/vx_gray**(levels[, center, invert, normalize])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_gray.html) | given a list of numbers (0 ~ 255) that represent a gray image. This function translates them into a list of `[x, y, level]`s.
[**voxel/vx_intersection**(points1, points2)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_intersection.html) | create an intersection of two lists of points.
[**voxel/vx_line**(p1, p2)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_line.html) | given two points. it returns points that can be used to draw a voxel-style line.
[**voxel/vx_polygon**(points[, filled])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_polygon.html) | return points that can be used to draw a voxel-style polygon.
[**voxel/vx_polyline**(points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_polyline.html) | return points that can be used to draw a voxel-style polyline.
[**voxel/vx_sphere**(radius[, filled, thickness])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_sphere.html) | return points that can be used to draw a voxel-style sphere.
[**voxel/vx_union**(points1, points2)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vx_union.html) | create a union of two lists of points.

## Part

 Signature | Description
--|--
[**part/cone**(radius[, length, spacing, angle, void, ends])](https://openhome.cc/eGossip/OpenSCAD/lib3x-cone.html) | create a cone for rotatable models.
[**part/connector_peg**(radius, height[, spacing, void, ends])](https://openhome.cc/eGossip/OpenSCAD/lib3x-connector_peg.html) | create a connector peg.
[**part/joint_T**(shaft_r, shaft_h, t_leng, thickness,[ spacing, center])](https://openhome.cc/eGossip/OpenSCAD/lib3x-joint_T.html) | create a joint_T for rotatable models.

## Surface

 Signature | Description
--|--
[**surface/sf_bend**(levels, radius, thickness, depth[, angle, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_bend.html) | bend a photo.
[**surface/sf_ring**(levels, radius, thickness, depth[, angle, twist, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_ring.html) | turn a photo into a ring.
[**surface/sf_solidify**(surface1, surface2[, slicing])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_solidify.html) | solidify two square surfaces.
[**surface/sf_sphere**(levels, radius, thickness, depth[, angle, invert)]](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_sphere.html) | map a photo onto a sphere.
[**surface/sf_square**(levels, thickness, depth[, x_twist, y_twist, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_square.html) | turn a photo into a twistable square.
[**surface/sf_torus**(levels, radius, thickness, depth[, angle, twist, invert])](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_torus.html) | turn a photo to a torus.
[**surface/sf_curve**(levels, curve_path, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_curve.html) | curve a photo.
[**surface/sf_splines**(ctrl_pts, row_spline, column_spline)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_splines.html) | generalized-spline surface.
[**surface/sf_thicken**(points, thickness, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_thicken.html) | thicken a surface.
[**surface/sf_solidifyT**(points1, points2, triangles)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_solidifyT.html) | solidify two surfaces with triangular mesh.
[**surface/sf_thickenT**(points, thickness, ...)](https://openhome.cc/eGossip/OpenSCAD/lib3x-sf_thickenT.html) | thicken a surface with triangular mesh.

## Noise

 Signature | Description
--|--
[**noise/nz_cell**(points, p[, dist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_cell.html) | an implementation of [Worley noise](https://en.wikipedia.org/wiki/Worley_noise).
[**noise/nz_perlin1**(x[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin1.html) | return the 1D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) value at the x coordinate.
[**noise/nz_perlin1s**(xs[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin1s.html) | return 1D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) values at x coordinates.
[**noise/nz_perlin2**(x, y[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin2.html) | return the 2D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) value at the (x, y) coordinate.
[**noise/nz_perlin2s**(points[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin2s.html) | return 2D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) values at (x, y) coordinates.
[**noise/nz_perlin3**(x, y, z[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin3.html) | return the 3D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) value at the (x, y, z) coordinate.
[**noise/nz_perlin3s**(points[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_perlin3s.html) | return 3D [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise) values at (x, y, z) coordinates.
[**noise/nz_worley2**(x, y[, seed, grid_w, dist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_worley2.html) | return the 2D [Worley noise](https://en.wikipedia.org/wiki/Worley_noise) value at the (x, y) coordinate.
[**noise/nz_worley2s**(points[, seed, grid_w, dist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_worley2s.html) | return 2D [Worley noise](https://en.wikipedia.org/wiki/Worley_noise) values at (x, y) coordinates.
[**noise/nz_worley3**(x, y, z[, seed, grid_w, dist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_worley3.html) | return the 3D [Worley noise](https://en.wikipedia.org/wiki/Worley_noise) value at the (x, y, z) coordinate.
[**noise/nz_worley3s**(points[, seed, grid_w, dist])](https://openhome.cc/eGossip/OpenSCAD/lib3x-nz_worley3s.html) | return 3D [Worley noise](https://en.wikipedia.org/wiki/Worley_noise) values at (x, y, z) coordinates.

## Voronoi

 Signature | Description
--|--
[**voronoi/vrn2_cells_from**(points)](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn2_cells_from.html) | create cell shapes of [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) from a list of points.
[**voronoi/vrn2_cells_space**(size, grid_w[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn2_cells_space.html) | create cell shapes of [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) in the first quadrant.
[**voronoi/vrn2_from**(points[, spacing, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn2_from.html) | create a [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) from a list of points.
[**voronoi/vrn2_space**(size, grid_w[, seed, spacing, ...])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn2_space.html) | create a [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) in the first quadrant.
[**voronoi/vrn3_from**(points[, spacing])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn3_from.html) | create a 3D version of [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram).
[**voronoi/vrn3_space**(size, grid_w[, seed, spacing])](https://openhome.cc/eGossip/OpenSCAD/lib3x-vrn3_space.html) | create a [Voronoi](https://en.wikipedia.org/wiki/Voronoi_diagram) in the first octant. 

## Maze

 Signature | Description
--|--
[**maze/mz_square**([rows, columns, start, init_cells, x_wrapping, y_wrapping, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_square.html) | return cell data of a square maze.
[**maze/mz_square_get**(cell, query)](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_square_get.html) | a helper for getting data from a square-maze cell.
[**maze/mz_squarewalls**(cells, cell_width[, left_border, bottom_border])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_squarewalls.html) | a helper for creating square wall data from maze cells.
[**maze/mz_hexwalls**(cells, cell_radius[, left_border, bottom_border])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_hexwalls.html) | a helper for creating hex wall data from maze cells.
[**maze/mz_square_initialize**(rows, columns, mask)](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_square_initialize.html) | a helper for initializing cell data of a maze.
[**maze/mz_hamiltonian**(rows, columns[, start, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_hamiltonian.html) | create a hamiltonian path from a maze.
[**maze/mz_theta_cells**(rows, beginning_number[, start, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_theta_cells.html) | return cell data of a theta maze.
[**maze/mz_theta**(rings, beginning_number[, start, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_theta.html) | return cell data of a theta maze.
[**maze/mz_tiles**(cells[, left_border, bottom_border])](https://openhome.cc/eGossip/OpenSCAD/lib3x-mz_tiles.html) | turn maze cells into tiles.

## Polyhedra

 Signature | Description
--|--
[**polyhedra/star**([outerRadius, innerRadius, height, n])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_star.html) | create a 3D star.
[**polyhedra/polar_zonohedra**(n[, theta])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_polar_zonohedra.html) | create a [polar zonohedra](https://mathworld.wolfram.com/PolarZonohedron.html).
[**polyhedra/tetrahedron**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_tetrahedron.html) | create a tetrahedron.
[**polyhedra/hexahedron**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_hexahedron.html) | create a hexahedron.
[**polyhedra/octahedron**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_octahedron.html) | create a octahedron.
[**polyhedra/dodecahedron**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_dodecahedron.html) | create a dodecahedron.
[**polyhedra/icosahedron**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_icosahedron.html) | create a icosahedron.
[**polyhedra/superellipsoid**(radius[, detail])](https://openhome.cc/eGossip/OpenSCAD/lib3x-polyhedra_superellipsoid.html) | create a superellipsoid.

## Point Picking

 Signature | Description
--|--
[**pp/pp_disk**(radius, value_count[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-pp_disk.html) | generate random points over a disk.
[**pp/pp_sphere**(radius, value_count[, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-pp_sphere.html) | pick random points on the surface of a sphere.
[**pp/pp_poisson2**(size, r[, start, k, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-pp_poisson2.html) | perform poisson sampling over a rectangle area.
[**pp/pp_poisson3**(size, r[, start, k, seed])](https://openhome.cc/eGossip/OpenSCAD/lib3x-pp_poisson3.html) | perform poisson sampling over a cube space.

----","Some of my [3D models] require complex mathematics/algorithm. I extract them
into dotSCAD. Hope it helps when you're playing Open SCAD. The idea of the
namedotSCAD comes from the filename extension "".scad"" of OpenSCad. OpenSCAD uses
three library locations, the installation library, built-in library, and user
defined libraries. Check [Setting
OPENSCADPATH](https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Libraries) for
details."
2588,A shell🐚 by the beach🏖️!,"# dune

A shell by the beach!

<p float=""left"">
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/welcome3.png"" width=""47.5%""/></a>
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/about.png"" width=""48%""/></a>
</p>

##### _NOTE: Click the image above for a video demonstration._

## About the Author

I'm a *bored* sophomore in college working on projects to fill the time. If you enjoy my work, consider supporting me by buying me a coffee! 

<a href=""https://www.buymeacoffee.com/adam.mcdaniel"" target=""_blank"">
  <img src=""https://cdn.buymeacoffee.com/buttons/v2/default-blue.png"" alt=""Buy Me A Coffee"" height=""60px"" width=""217px""/>
</a>

## Why write another shell?

I feel that bash is great in a lot of ways, but it doesn't exactly feel *cozy*: it's lacking a sort of personal touch, and it's also missing quick and easy customizability. With my last shell, [Atom](https://github.com/adam-mcdaniel/atom), I had accomplished some of the coziness that bash was missing, but I also introduced a lot of *really* fatal flaws in the syntax and the type system.

Dune, however, is designed ***completely*** differently from Atom (although you might notice the similarities in their widget systems). The interpreter itself is standalone, and it holds almost none of the functionality you see in the default distribution of Dune. If you wanted to, you could write a custom frontend and make a unique Dune based shell of your own!

This frontend implementation turns the coziness dial to 11. Just check out the shell's default startup script!

<p float=""left"">
  <img src=""./assets/intro.png"" width=""32%""/>
  <img src=""./assets/help.png"" width=""32%""/>
  <img src=""./assets/bye.png"" width=""32%""/>
</p>

I put a *lot* of work into making Dune just fun to use. It's like a neat little operating system itself!

Dune also attempts to be a usable scripting language, and even offers a few niche metaprogramming features such as quoting *(borrowed from [Lisp](https://github.com/adam-mcdaniel/wisp))*, operator overloading, and macros!

<p float=""left"">
  <img src=""./assets/metaprogramming.png"" width=""45%""/>
  <img src=""./assets/operator-overloading2.png"" width=""52.4%""/>
</p>

Overall, I wrote Dune to have a *complete* shell of my own: one that's fast, useful, and pretty.

*(Also, writing a shell is just kinda really fun)*

## Usage

Dune has a bunch of customizable components. Here's how you can change them and make your shell your own!

### The Prelude

Before entering interactive mode, Dune executes *the prelude*. The prelude is just the startup file `.dune-prelude` stored in the home directory for your user. If you don't provide your own prelude file, Dune will execute its own default prelude with an introduction to the shell.

You can see my example personal prelude [here](./.dune-prelude).

### The REPL

Dune's REPL is entirely customizable by overloading the following functions:

|Name|Purpose|Default Implementation|
|-|-|-|
|`prompt`|This function is called to generate the text which prompts the user for input. It takes the current working directory, and returns a string.|<pre>let prompt = cwd -> fmt@bold ((fmt@dark@blue ""(dune) "") +<br/> (fmt@bold (fmt@dark@green cwd)) +<br/> (fmt@bold (fmt@dark@blue ""$ "")))</pre>|
|`incomplete_prompt`|This function is called to generate the text which prompts the user for input when they have entered an incomplete expression. It takes the current working directory, and returns a string.|<pre>let incomplete_prompt = cwd -> ((len cwd) +<br/> (len ""(dune) "")) * "" "" +<br/> (fmt@bold (fmt@dark@yellow ""> ""));</pre>|
|`report`|This function is called to print a value to the console after evaluation.|*The default implementation is a builtin function (implemented in Rust), but you can overload it with any callable value nonetheless.*|

I highly recommend using the `fmt` module when implementing your own customizations for your prompt!

### Aliases

This distribution of Dune uses the *`Symbol`* type (the type of variable names and paths) to implement calling programs. Whenever an expression of type *`Symbol`* is evaluated as a command in interactive mode, it is invoked as a program.

Because of this, you can define aliases by assigning a variable to a program's name like so!

<a href=""https://asciinema.org/a/7Cr96ndSzsIch7oGVYI3aIaX9""><img src=""./assets/alias.png"" width=""48%""/></a>

If you have defined a variable that overshadows your program's name (such as an alias), you can *quote* the program name to run it.

![Overshadowed](./assets/overshadowed.png)

### Macros

To write functions that modify your shell's environment and act like commands or programs themselves, use a macro!

![Macros](./assets/macros.png)

Macros, when called with zero arguments, are passed the current working directory. When invoked, they assume the environment of the callee: if you execute a macro, it will execute as if you executed the contents of the macro itself with the parameter defined as the argument passed.

### Piping and Redirection

Piping and redirection are done with the `|` and `>>` operators. Here's some example uses!

![Piping and Redirection](./assets/piping.png)

If a value is piped into a callable object, like a function or macro, it is performed as an application; otherwise, the expression is treated like a regular call to a program.

## Standard Library

Dune offers an extensive standard library, and also provides a pretty interface to see all the functions available in each module!

<img src=""./assets/math.png"" width=""48%""/>

Dune offers the following builtin libraries:

|Name|Description|
|-|-|
|`rand`|A library for randomness|
|`time`|A library with date and time functions|
|`math`|A module for math and trig functionality|
|`fs`|A module for interacting with the file system|
|`fn`|A functional programming library|
|`fmt`|A library for text formatting on the console (color, styling, hyperlinks, text wrapping, etc.)|
|`os`|A small module with the host's OS info|
|`widget`|A module for creating text widgets|
|`shell`|A small module for information about the Dune shell|
|`console`|A library for manipulating the console|

For more information about each, just run `echo library-name`.

## Installation

To install, you must download Rust from [here](https://www.rust-lang.org/).
_If you already have Rust installed **you will probably need to update**. Dune uses a lot of recently stabilized features._

#### Development Build

```bash
# Install directly from git with cargo
cargo install --git https://github.com/adam-mcdaniel/dune

# Or, alternatively, the repo and install from source
git clone https://github.com/adam-mcdaniel/dune
cd dune
cargo install -f --path .
```

#### Releases
To get the current release build, install from [crates.io](https://crates.io/crates/dune).

```bash
# Also works for updating dune
cargo install -f dune
```
_Currently, since Dune is in its early stages of development, I would recommend against using releases at the moment. There are a lot of bug fixes and new features added inbetween releases._

#### After Install

```bash
# Just run the dune executable!
dunesh
```
","Dune is a shell language that can be used to write your own programs. The shell
is designed completely differently from Atom. The interpreter itself is
standalone, and it holds almost none of the functionality you see in the default
distribution of Dune. The REPL is entirely customizable by overloading the
following functions."
466,"Node server for dynamic, fake JSON.","# dyson

Node server for dynamic, fake JSON.

## Introduction

Dyson allows you to define JSON endpoints based on a simple `path` + `template` object:

```javascript
# my-stubs/users.js
module.exports = {
  path: '/users/:userId',
  template: {
    id: params => Number(params.userId),
    name: () => faker.name.findName(),
    email: () => faker.internet.email(),
    status: (params, query) => query.status,
    lorem: true
  }
};
```

```bash
$ dyson ./my-stubs
$ curl http://localhost:3000/users/1?status=active
```

```json
{
  ""id"": 1,
  ""name"": ""Josie Greenfelder"",
  ""email"": ""Raoul_Aufderhar@yahoo.com"",
  ""status"": ""active"",
  ""lorem"": true
}
```

When developing client-side applications, often either static JSON files, or an actual server, backend, datastore, or API, is used. Sometimes static files are too static, and sometimes an actual server is not available, not accessible, or too tedious to set up.

This is where dyson comes in. Get a full fake server for your application up and running in minutes.

- [Installation notes](#installation)
- [Demo](https://dyson-demo.herokuapp.com)

[![Build Status](https://img.shields.io/travis/webpro/dyson.svg?style=flat)](https://travis-ci.org/webpro/dyson)
[![npm package](https://img.shields.io/npm/v/dyson.svg?style=flat)](https://www.npmjs.com/package/dyson)
[![dependencies](https://img.shields.io/david/webpro/dyson.svg?style=flat)](https://david-dm.org/webpro/dyson)
![npm version](https://img.shields.io/node/v/dyson.svg?style=flat)

## Overview

- Dynamic responses, based on
  - Request path
  - GET/POST parameters
  - Query parameters
  - Cookies
- HTTP Methods: GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS
- Dynamic HTTP status codes
- CORS
- Proxy (e.g. fallback to actual services)
- Delayed responses
- Required parameter validation
- Includes random data generators
- Includes dummy image generator
  - Use any external or local image service (included)
  - Supports base64 encoded image strings

## Endpoint Configuration

Configure endpoints using simple objects:

```javascript
module.exports = {
  path: '/user/:id',
  method: 'GET',
  template: {
    id: (params, query, body) => params.id,
    name: g.name,
    address: {
      zip: g.zipUS,
      city: g.city
    }
  }
};
```

The `path` string is the usual argument provided to [Express](http://expressjs.com/api.html#app.VERB), as in `app.get(path, callback);`.

The `template` object may contain properties of the following types:

- A `Function` will be invoked with arguments `(params, query, body, cookies, headers)`.
- Primitives of type `String`, `Boolean`, `Number`, `Array` are returned as-is
- An `Object` will be recursively iterated.
- A `Promise` will be replaced with its resolved value.

Note: the `template` itself can also be a _function_ returning the actual data. The template function itself is also invoked with arguments `(params, query, body, cookies, headers)`.

## Defaults

The default values for the configuration objects:

```javascript
module.exports = {
  cache: false,
  delay: false,
  proxy: false,
  size: () => _.random(2, 10),
  collection: false,
  callback: response.generate,
  render: response.render
};
```

- `cache: true` means that multiple requests to the same path will result in the same response
- `delay: n` will delay the response with `n` milliseconds (or between `[n, m]` milliseconds)
- `proxy: false` means that requests to this file can be skipped and sent to the configured proxy
- `size: fn` is the number of objects in the collection
- `collection: true` will return a collection
- `callback: fn`
  - the provided default function is doing the hard work (can be overridden)
  - used as middleware in Express
  - must set `res.body` and call `next()` to render response
- `render: fn`
  - the default function to render the response (basically `res.send(200, res.body);`)
  - used as middleware in Express

## Fake data generators

You can use _anything_ to generate data. Here are some suggestions:

- [Faker.js](https://github.com/marak/Faker.js/)
- [Chance.js](http://chancejs.com/)
- [dyson-generators](http://github.com/webpro/dyson-generators)

Just install the generator(s) in your project to use them in your templates:

```bash
npm install dyson-generators --save-dev
```

## Containers

Containers can help if you need to send along some meta data, or wrap the response data in a specific way. Just use the `container` object, and return the `data` where you want it. Functions in the `container` object are invoked with arguments `(params, query, data)`:

```javascript
module.exports = {
  path: '/users',
  template: user.template,
  container: {
    meta: (params, query, data) => ({
      userCount: data.length
    }),
    data: {
      all: [],
      the: {
        way: {
          here: (params, query, data) => data
        }
      }
    }
  }
};
```

And an example response:

```json
{
  ""meta"": {
    ""userCount"": 2
  },
  ""data"": {
    ""all"": [],
    ""the"": {
      ""way"": {
        ""here"": [
          {
            ""id"": 412,
            ""name"": ""John""
          },
          {
            ""id"": 218,
            ""name"": ""Olivia""
          }
        ]
      }
    }
  }
}
```

## Combined requests

Basic support for ""combined"" requests is available, by means of a comma separated path fragment.

For example, a request to `/user/5,13` will result in an array of the responses from `/user/5` and `/user/13`.

The `,` delimiter can be [configured](#project-configuration) (or disabled).

## Status codes

By default, all responses are sent with a status code `200` (and the `Content-Type: application/json` header).

This can be overridden with your own `status` middleware, e.g.:

```javascript
module.exports = {
  path: '/feature/:foo?',
  status: (req, res, next) => {
    if (req.params.foo === '999') {
      res.status(404);
    }
    next();
  }
};
```

Would result in a `404` when requesting `/feature/999`.

## Images

In addition to configured endpoints, dyson registers a [dummy image service](http://github.com/webpro/dyson-image) at `/image`. E.g. requesting `/image/300x200` serves an image with given dimensions.

This service is a proxy to [Dynamic Dummy Image Generator](http://dummyimage.com/) by [Russell Heimlich](http://twitter.com/kingkool68).

## JSONP

Override the `render` method of the Express middleware in the endpoint definition. In the example below, depending on the existence of the `callback` parameter, either raw JSON response is returned or it is wrapped with the provided callback:

```javascript
module.exports = {
  render: (req, res) => {
    const callback = req.query.callback;
    if (callback) {
      res.append('Content-Type', 'application/javascript');
      res.send(`${callback}(${JSON.stringify(res.body)});`);
    } else {
      res.send(res.body);
    }
  }
};
```

## File Upload

Ex: return file name<br/>
formDataName = 'file'

```javascript
module.exports = {
  render: (req, res) => {
    if (callback) {
      res.send({ fileName: req.files.file.name });
    } else {
      res.send(res.body);
    }
  }
};
```

## HTTPS

If you want to run dyson over SSL you have to provide a (authority-signed or self-signed) certificate into the `options.https` the same way it's required for NodeJS built-in `https` module. Example:

```javascript
const fs = require('fs');

const app = dyson.createServer({
  configDir: `${__dirname}/dummy`,
  port: 3001,
  https: {
    key: fs.readFileSync(`${__dirname}'/certs/sample.key`),
    crt: fs.readFileSync(`${__dirname}/certs/sample.crt`)
  }
});
```

**Note**: if running SSL on port 443, it will require `sudo` privileges.

## GraphQL

If you want dyson to support GraphQL endpoints, you can build your own logic with the `render` override, or use [`dyson-graphql`](https://github.com/WealthWizardsEngineering/dyson-graphql). Example:

```bash
npm install dyson-graphql --save-dev
```

```javascript
const dysonGraphQl = require('dyson-graphql');

const schema = `
  type User {
    id: Int!
    name: String!
  }

  type Query {
    currentUser: User!
  }

  type Mutation {
    createUser(name: String!): User!
    updateUser(id: Int!, name: String!): User!
  }
`;

module.exports = {
  path: '/graphql',
  method: 'POST',
  render: dysonGraphQl(schema)
    .query('currentUser', { id: 987, name: 'Jane Smart' })
    .mutation('createUser', ({ name }) => ({ id: 456, name }))
    .mutation('updateUser', ({ id, name }) => {
      if (id < 1000) {
        return { id, name };
      }

      throw new Error(""Can't update user"");
    })
    .build()
};
```

## Custom middleware

If you need some custom middleware before or after the endpoints are registered, dyson can be initialized programmatically.
Then you can use the Express server instance (`appBefore` or `appAfter` in the example below) to install middleware before or after the dyson services are registered. An example:

```javascript
const dyson = require('dyson');
const path = require('path');

const options = {
  configDir: path.join(__dirname, 'services'),
  port: 8765
};

const configs = dyson.getConfigurations(options);
const appBefore = dyson.createServer(options);
const appAfter = dyson.registerServices(appBefore, options, configs);

console.log(`Dyson listening at port ${options.port}`);
```

Dyson configuration can also be installed into any Express server:

```javascript
const express = require('express');
const dyson = require('./lib/dyson');
const path = require('path');

const options = {
  configDir: path.join(__dirname, 'services')
};

const myApp = express();
const configs = dyson.getConfigurations(options);

dyson.registerServices(myApp, options, configs);

myApp.listen(8765);
```

## Installation

The recommended way to install dyson is to install it locally and put it in your `package.json`:

```bash
npm install dyson --save-dev
```

Then you can use it from `scripts` in `package.json` using e.g. `npm run mocks`:

```json
{
  ""name"": ""my-package"",
  ""version"": ""1.0.0"",
  ""scripts"": {
    ""mocks"": ""dyson mocks/""
  }
}
```

You can also install dyson globally to start it from anywhere:

```bash
npm install -g dyson
```

### Project

You can put your configuration files anywhere. The HTTP method is based on:

- The `method` property in the configuration itself.
- The folder, or an ancestor folder, containing the configuration is an HTTP method. For example `mocks/post/sub/endpoint.js` will be an endpoint listening to `POST` requests.
- Defaults to `GET`.

```bash
dyson [dir]
```

This starts the services configured in `[dir]` at [localhost:3000](http://localhost:3000).

You can also provide an alternative port number by just adding it as a second argument (e.g. `dyson path/ 8181`).

### Demo

- For a demo project, see [webpro/dyson-demo](https://github.com/webpro/dyson-demo).
- This demo was also installed with [Heroku](https://www.heroku.com) to [dyson-demo.herokuapp.com](https://dyson-demo.herokuapp.com).

## Project Configuration

Optionally, you can put a `dyson.json` file next to the configuration folders (inside `[dir]`). It enables to configure some behavior of dyson:

```json
{
  ""multiRequest"": "","",
  ""proxy"": true,
  ""proxyHost"": ""http://dyson.jit.su"",
  ""proxyPort"": 8080,
  ""proxyDelay"": [200, 800]
}
```

- Setting `multiRequest` to `false` disables the [combined requests](#combined-requests) feature.
- Setting `bodyParserJsonLimit` or `bodyParserUrlencodedLimit` to `1mb` increases the limit to 1mb from the bodyParser's default of 100kb.
- By default, the `proxy` is set to `false`

## Watch/auto-restart

If you want to automatically restart dyson when you change your configuration objects, you can add [nodemon](https://nodemon.io) as a `devDependency`. Say your configuration files are in the `./api` folder, you can put this in your `package.json`:

```
""scripts"": {
  ""mocks"": ""dyson mocks/"",
  ""watch"": ""nodemon --watch mocks --exec dyson mocks""
}
```

## Development & run tests

```bash
git clone git@github.com:webpro/dyson.git
cd dyson
npm install
npm test
```

## Articles about dyson

- [How do I create a Fake Server with Dyson? | Apiumhub](https://apiumhub.com/tech-blog-barcelona/create-fake-server-dyson/)
- [Stubbing Network Calls (Api) Using Dyson for Emberjs Apps](http://nepalonrails.herokuapp.com/blog/2014/03/stubbing-network-calls-api-using-dyson-for-emberjs-apps/)
- [Our Ember.js Toolchain](https://nebulab.com/blog/our-ember-js-toolchain)
- [Dyson, construye un servidor de pruebas que devuelva fake JSON para simular una API](https://www.genbeta.com/desarrollo/dyson-construye-un-servidor-de-pruebas-que-devuelva-fake-json-para-simular-una-api)
- [Mockear la capa back con Dyson](https://www.adictosaltrabajo.com/2014/08/27/dyson-fake-json/)
- [Serve JSONP in Dyson](https://grysz.com/2015/12/01/serve-jsonp-in-dyson/)
- Videos
  _ [Dyson - HTTP Service mocking](https://www.youtube.com/watch?v=aoSk5Bak-KM)
  _ [How to implement HTTP Mock Services into Webpack - Dyson](https://www.youtube.com/watch?v=tfCQOcz9oi4)

## License

[MIT](http://webpro.mit-license.org)
","Dyson allows you to define JSON endpoints based on a simple `path` + `template`
object. Get a full fake server for your application up and running in minutes.
The default values for the objects for Dyson are: 'id', 'name', 'email', 'body',
'number' and 'cookie' The default value for the template object is 'body' and
the default value is 'name' Dyson can be downloaded
from:https://www.npmjs.org/webpro/dyson."
40,Highly customizable drop-in solution for introduction views.,"# EAIntroView - simple iOS Introductions

[![CI Status](https://github.com/ealeksandrov/EAIntroView/workflows/CI/badge.svg?branch=master)](https://github.com/ealeksandrov/EAIntroView/actions)
[![Version](https://img.shields.io/cocoapods/v/EAIntroView.svg?style=flat)](http://cocoadocs.org/docsets/EAIntroView)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)
[![License](https://img.shields.io/cocoapods/l/EAIntroView.svg?style=flat)](http://cocoadocs.org/docsets/EAIntroView)
[![Platform](https://img.shields.io/cocoapods/p/EAIntroView.svg?style=flat)](http://cocoadocs.org/docsets/EAIntroView)

![ExampleImage1](https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot01.png)
![ExampleImage2](https://raw.githubusercontent.com/ealeksandrov/EAIntroView/master/Screenshot02.png)

This is highly customizable drop-in solution for introduction views.
Some features (remember, most features are optional and can be turned off):

* beautiful demo project to look on some examples
    * customizability is unlimited, one can make complex introView with animations and interactive pages, so do not limit yourself with existing examples
* for each basic page:
    * background (with cross-dissolve transition between pages)
    * custom iOS7 motion effects (parallax) on background
    * title view (+ Y position)
    * title text (+ font, color and Y position)
    * description text (+ font, color, width and Y position)
    * subviews array (added to page after building default layout)
* possibility to set your own custom view for page:
    * pageWithCustomView:
    * pageWithCustomViewFromNibNamed:
* possibility to set block action on page events:
    * pageDidLoad
    * pageDidAppear
    * pageDidDisappear
* many options to customize parent view:
    * swipe from last page to close
    * switching pages with one simple tap
    * custom background image or color
    * custom page control
    * custom skip button
    * pinned titleView (+ Y position, can be hidden on some pages)
* delegate protocol to listen:
    * introDidFinish:
    * intro:pageAppeared:withIndex:
* actions on IntroView:
    * setPages:
    * showInView:animateDuration:
    * hideWithFadeOutDuration:
    * setCurrentPageIndex:animated:
* storyboard/IB support
* and many more...

## Installation

You can setup `EAIntroView` using [Carthage](https://github.com/Carthage/Carthage), [CocoaPods](http://github.com/CocoaPods/CocoaPods) or [completely manually](#setting-up-manually).

### Carthage

1. Add `EAIntroView` to your project's `Cartfile`:

    ```ruby
    github ""ealeksandrov/EAIntroView""
    ```

2. Run `carthage update` in your project directory.
3. On your application targets’ “General” settings tab, in the “Linked Frameworks and Libraries” section, drag and drop **EAIntroView.framework** and **EARestrictedScrollView.framework** from the `Carthage/Build/iOS/` folder on disk.
4. On your application targets’ “Build Phases” settings tab, click the “+” icon and choose “New Run Script Phase”. Create a Run Script with the following contents:

    ```shell
    /usr/local/bin/carthage copy-frameworks
    ```
    
    add the paths to the frameworks under “Input Files”:
    
    ```shell
    $(SRCROOT)/Carthage/Build/iOS/EAIntroView.framework
    $(SRCROOT)/Carthage/Build/iOS/EARestrictedScrollView.framework
    ```
    
    and the paths to the copied frameworks to the “Output Files”:
    
    ```shell
    $(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/EAIntroView.framework
    $(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/EARestrictedScrollView.framework
    ```

### CocoaPods

1. Add EAIntroView to your project's `Podfile`:

    ```ruby
    pod 'EAIntroView'
    ```

2. Run `pod update` or `pod install` in your project directory.

### Setting Up Manually

1. Add [EARestrictedScrollView](https://github.com/ealeksandrov/EARestrictedScrollView) header and implementation to your project (2 files total).
2. Add `EAIntroPage` and `EAIntroView` headers and implementations to your project (4 files total).
3. You can now use `EAIntroView` by adding the following import:

    ```swift
    import EAIntroView
    ```

    ```obj-c
    #import <EAIntroView/EAIntroView.h>
    ```

## How To Use It

Sample project have many examples of customization. Here are only simple ones.

### Step 1 - Build Pages
Each page created with `[EAIntroPage page]` class method. Then you can customize any property, all of them are optional. Another approach is to pass your own (can be nib), custom view in `EAIntroPage`, this way most other options are ignored.

```objc
// basic
EAIntroPage *page1 = [EAIntroPage page];
page1.title = @""Hello world"";
page1.desc = sampleDescription1;
// custom
EAIntroPage *page2 = [EAIntroPage page];
page2.title = @""This is page 2"";
page2.titleFont = [UIFont fontWithName:@""Georgia-BoldItalic"" size:20];
page2.titlePositionY = 220;
page2.desc = sampleDescription2;
page2.descFont = [UIFont fontWithName:@""Georgia-Italic"" size:18];
page2.descPositionY = 200;
page2.titleIconView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@""title2""]];
page2.titleIconPositionY = 100;
// custom view from nib
EAIntroPage *page3 = [EAIntroPage pageWithCustomViewFromNibNamed:@""IntroPage""];
page3.bgImage = [UIImage imageNamed:@""bg2""];
```

### Step 2 - Create Introduction View
Once all pages have been created,  you are ready to create the introduction view. Just pass them in right order in the introduction view. You can also pass array of pages after IntroView's initialization, it will rebuild its contents.

```objc
EAIntroView *intro = [[EAIntroView alloc] initWithFrame:self.view.bounds andPages:@[page1,page2,page3,page4]];
```

Don't forget to set the delegate if you want to use any callbacks.

```objc
[intro setDelegate:self];
```

### Step 3 - Show Introduction View

```objc
[intro showInView:self.view animateDuration:0.0];
```

### Storyboard/IB
Since 1.3.0 `EAIntroView` supports init from IB. Since 2.0.0 `EAIntroPage` supports it too.

1. Drop `UIView` to your IB document.
2. Set its class to `EAIntroView`.
3. Create `IBOutlet` property in your view controller: `@property(nonatomic,weak) IBOutlet EAIntroView *introView;`.
4. Connect `IBOutlet` with `EAIntroView` in IB.
5. Build array of pages (you can use `pageWithCustomViewFromNibNamed:` here with separate nibs for each page).
6. Pass pages array to `EAIntroView` property in `setPages:`.

## Author

Created and maintained by Evgeny Aleksandrov ([@ealeksandrov](https://twitter.com/ealeksandrov)).

## License

`EAIntroView` is available under the MIT license. See the [LICENSE.md](LICENSE.md) file for more info.
","EAIntroView is a drop-in solution for introduction views for iOS7. Features
include custom iOS7 motion effects (parallax) on background. Customizability is
unlimited, one can make complex introView with animations and interactive pages."
2768,"A repository for  ebooks， including C, C plus plus, Linux Kernel, Compiler, OS, Algorithm, Security, Database, Network, ML and DL","# ebooks

A repository for  ebooks， including C, C plus plus, Linux Kernel, Compiler, OS, Algorithm, Security, ML and DL

整个文件的结构将以下面形式展现

```
.
├── Algorithm
│   ├── Algorithms v4.pdf
│   └── 算法图解.pdf
├── Compiler
│   ├── Parsing Techniques--a practical guide.pdf
│   ├── 编译原理 龙书 第2版.pdf
│   ├── 自制编译器.pdf
│   └── 自己动手写编译器、链接器.pdf
├── Cpp
│   ├── C
│   │   ├── ASCII字符表.jpg
│   │   ├── C专家编程.pdf
│   │   ├── C语言标准.pdf
│   │   ├── C陷阱与缺陷.pdf
│   │   ├── Learn C the Hard Way.pdf
│   │   ├── 啊哈C语言书.pdf
│   │   └── 明解C语言  中级篇.pdf
│   └── Cpp
│       ├── Accelerated C++ 简体中文版 .pdf
│       ├── C++ Primer Plus 第5版 中文版.pdf
│       ├── C++ STL源码剖析 侯捷版本.pdf
│       ├── C++ Templates 简体中文版.pdf
│       ├── C++标准程序库.pdf
│       ├── C++编程思想[第一卷].pdf
│       ├── C++编程思想[第二卷].pdf
│       ├── Effective STL 简体中文版.pdf
│       └── 现代 C++ 教程：高速上手 C++.pdf
├── Java
│   ├── Head First Java-第2版 中文完整高清版.pdf
│   └── 深入理解Java虚拟机：JVM高级特性与最佳实践.pdf
├── LinuxKernel
│   ├── Advanced Programming in the UNIX Environment_Third Edition.pdf
│   ├── Linux内存地址映射.pdf
│   ├── Linux内核源代码完全注释 v3 带标签.pdf
│   ├── tool
│   │   ├── Docker容器与容器云 第2版.pdf
│   │   ├── Learning GNU Emacs_Third Edition.pdf
│   │   └── 图解HTTP.epub
│   ├── Understanding the Linux Kernel_3rd Edition.pdf
│   ├── Unix内核源码剖析.pdf
│   ├── UNIX环境高级编程 第2版.pdf
│   ├── UNIX 环境高级编程 第3版.pdf
│   ├── UNIX编程艺术.pdf
│   ├── 深入理解Linux内核 完整版.pdf
│   └── 电子科大Linux内核技术课程
│       ├── 李林_Part
│       │   ├── code
│       │   │   ├── 1
│       │   │   │   ├── 1.1
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   └── 1.2
│       │   │   │       ├── DriverFileOperations.c
│       │   │   │       ├── DriverFileOperations.h
│       │   │   │       ├── DriverMain.c
│       │   │   │       ├── DriverMain.h
│       │   │   │       ├── Makefile
│       │   │   │       └── ToolFunctions.h
│       │   │   ├── 2
│       │   │   │   ├── 2.1
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── IoCtlSupport.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── Userapp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 2.10
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 2.2
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 2.3
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 2.4
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 2.5
│       │   │   │   │   ├── PrintingDriver
│       │   │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   │   ├── DriverMain.c
│       │   │   │   │   │   ├── DriverMain.h
│       │   │   │   │   │   ├── Makefile
│       │   │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   │   └── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 2.6
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 2.7
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 2.8
│       │   │   │   │   └── PageOperations.h
│       │   │   │   └── 2.9
│       │   │   │       ├── DriverFileOperations.c
│       │   │   │       ├── DriverFileOperations.h
│       │   │   │       ├── DriverMain.c
│       │   │   │       ├── DriverMain.h
│       │   │   │       ├── Makefile
│       │   │   │       ├── ToolFunctions.c
│       │   │   │       └── ToolFunctions.h
│       │   │   ├── 3
│       │   │   │   ├── 3.1
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.10
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.11
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.12
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   ├── ToolFunctions.h
│       │   │   │   │   └── UserApp
│       │   │   │   │       └── main.cpp
│       │   │   │   ├── 3.13
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.14
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.2
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.3
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.4
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.5
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.6
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.7
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   ├── 3.8
│       │   │   │   │   ├── DriverFileOperations.c
│       │   │   │   │   ├── DriverFileOperations.h
│       │   │   │   │   ├── DriverMain.c
│       │   │   │   │   ├── DriverMain.h
│       │   │   │   │   ├── Makefile
│       │   │   │   │   ├── ToolFunctions.c
│       │   │   │   │   └── ToolFunctions.h
│       │   │   │   └── 3.9
│       │   │   │       ├── DriverFileOperations.c
│       │   │   │       ├── DriverFileOperations.h
│       │   │   │       ├── DriverMain.c
│       │   │   │       ├── DriverMain.h
│       │   │   │       ├── Makefile
│       │   │   │       ├── ToolFunctions.c
│       │   │   │       └── ToolFunctions.h
│       │   │   └── 4
│       │   │       ├── 4.1
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── IoCtlSupport.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.10
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   ├── ToolFunctions.h
│       │   │       │   └── UserApp
│       │   │       │       └── main.cpp
│       │   │       ├── 4.11
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.12
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.13
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   ├── ToolFunctions.h
│       │   │       │   ├── UserApp
│       │   │       │   │   └── main.cpp
│       │   │       │   ├── VMallocSpaceMangement.c
│       │   │       │   └── VMallocSpaceMangement.h
│       │   │       ├── 4.14
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   ├── ToolFunctions.h
│       │   │       │   ├── UserApp
│       │   │       │   │   └── main.cpp
│       │   │       │   ├── VMallocSpaceMangement.c
│       │   │       │   └── VMallocSpaceMangement.h
│       │   │       ├── 4.15
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.16
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.17
│       │   │       │   └── vfree.c
│       │   │       ├── 4.18
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.19
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.2
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.3
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.4
│       │   │       │   └── virt_addr_valid.c
│       │   │       ├── 4.5
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.6
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.7
│       │   │       │   ├── DriverFileOperations.c
│       │   │       │   ├── DriverFileOperations.h
│       │   │       │   ├── DriverMain.c
│       │   │       │   ├── DriverMain.h
│       │   │       │   ├── Makefile
│       │   │       │   ├── ToolFunctions.c
│       │   │       │   └── ToolFunctions.h
│       │   │       ├── 4.8
│       │   │       │   └── find_hole.c
│       │   │       └── 4.9
│       │   │           └── alloc_pages.c
│       │   ├── Linux内核01.pptx
│       │   ├── Linux内核02.pptx
│       │   ├── Linux内核03.pptx
│       │   ├── Linux内核04.pptx
│       │   └── 内核调试命令.txt
│       └── 段翰聪_Part
│           ├── 1_Intro.pptx
│           ├── 2_Arch_and_Kernels.pptx
│           ├── 3_process & Threads.pptx
│           ├── 4_Linux Kernel Scheduling Framework Slides.pptx
│           └── 5_Storage Devices & File_Systems.pptx
├── ML
│   ├── An Introduction to R.pdf
│   ├── DL
│   │   ├── An Introduction to Statistical Learning with Applications in R.pdf
│   │   ├── Deep Learning with Python.pdf
│   │   ├── Grokking Deep Learning V10.pdf
│   │   ├── Hands－On_Reinforcement_Learning_with_Python.epub
│   │   ├── Learning From Data.pdf
│   │   ├── Pattern Recognition and Machine Learning.pdf
│   │   ├── PRML_模式识别与机器学习.pdf
│   │   ├── 动手学深度学习.pdf
│   │   ├── 深度学习500问
│   │   │   ├── 深度学习500问-Tan-00目录.pdf
│   │   │   ├── 深度学习500问-Tan-01第一章 数学基础.pdf
│   │   │   ├── 深度学习500问-Tan-02第二章 机器学习基础.pdf
│   │   │   ├── 深度学习500问-Tan-03第三章 深度学习基础.pdf
│   │   │   ├── 深度学习500问-Tan-04第四章 经典网络.pdf
│   │   │   ├── 深度学习500问-Tan-05第五章 卷积神经网络（CNN）.pdf
│   │   │   ├── 深度学习500问-Tan-06第六章 循环神经网络（RNN）.pdf
│   │   │   ├── 深度学习500问-Tan-07第七章 目标检测.pdf
│   │   │   ├── 深度学习500问-Tan-08第八章 图像分割.pdf
│   │   │   ├── 深度学习500问-Tan-09第九章 强化学习.pdf
│   │   │   ├── 深度学习500问-Tan-10第十章 迁移学习.pdf
│   │   │   ├── 深度学习500问-Tan-13第十三章 优化算法.pdf
│   │   │   ├── 深度学习500问-Tan-14第十四章 超参数调整.pdf
│   │   │   ├── 深度学习500问-Tan-15第十五章 正则化.pdf
│   │   │   ├── 深度学习500问-Tan-16参考文献.pdf
│   │   │   └── 目录预览.pdf
│   │   ├── 深度学习入门：基于Python的理论与实现.pdf
│   │   ├── 神经网络与深度学习-3小时.pptx
│   │   └── 神经网络与深度学习.pdf
│   ├── ML
│   │   ├── Advanced Machine Learning with Python.pdf
│   │   ├── Mastering Machine Learning with scikitlearn.pdf
│   │   ├── Python Machine Learning.pdf
│   │   ├── The Hundred-Page Machine Learning Book.pdf
│   │   ├── Understanding the Mathematics behind Gradient Descent_.pdf
│   │   ├── 凸优化
│   │   │   ├── Adequacy of Solutions.pdf
│   │   │   ├── Convex Optimization.pdf
│   │   │   ├── L1L2-regularization.pdf
│   │   │   ├── Lecture24.pdf
│   │   │   └── Optimization.pdf
│   │   ├── 机器学习 周志华.pdf
│   │   └── 统计学习方法.pdf
│   ├── PL
│   │   ├── learn python the hard way.pdf
│   │   ├── Python项目开发实战 第2版 完整高清版 带书签 .pdf
│   │   ├── 利用Python进行数据分析.pdf
│   │   └── 笨办法学 Python 第4版.pdf
│   ├── 普林斯顿微积分读本.pdf
│   └── 集体智慧编程.pdf
├── OS
│   ├── 30天自制操作系统.pdf
│   ├── Assembly
│   │   ├── 汇编语言王爽 第2版 课后答案.pdf
│   │   └── 汇编语言 第3版 王爽著.pdf
│   ├── ELF 格式解析.pdf
│   ├── Minix File System.pdf
│   ├── ORANGE’S：一个操作系统的实现 高清晰版.pdf
│   ├── Writing a Simple Operating System from Scratch.pdf
│   ├── x86汇编语言  从实模式到保护模式.pdf
│   ├── 操作系统share
│   │   ├── Buddy System及应用.pptx
│   │   ├── linux段页存储.pptx
│   │   ├── Seminar2.2.pptx
│   │   ├── Unix OS的PCB分析.pptx
│   │   ├── Unix PCB structure and queue discilpine.ppsx
│   │   ├── Unix进程死锁解决策略.pptx
│   │   ├── unix进程调度策略.pptx
│   │   ├── 中断处理程序流程图(do_IRQ).doc
│   │   └── 操作系统2.3.pptx
│   ├── 现代操作系统 第3版.pdf
│   └── 自己动手写操作系统 完全版.pdf
├── README.md
└── Security
    ├── 会议时间.xlsx
    └── 现代密码学基础.pdf

```
","A repository for ebooks including C, C plus plus, Linux Kernel, Compiler, OS,
Algorithm, Security, ML and DL. Summarize: # ebooks. # ebook. # repository for
ebooks， including C,. C plusplus, Linux, OS and ML."
3379,"Entity Framework Core Power Tools - reverse engineering, migrations and model visualization for EF Core","# EF Core Power Tools

Reverse engineering, model visualization and migrations UI for EF Core. For Visual Studio 2022.

Aims to lower the bar for getting started with EF Core, by providing GUI based assistance with reverse engineering of an existing database, creating migrations and visualizing your DbContext model.

[![Visual Studio Marketplace](http://vsmarketplacebadge.apphb.com/version/ErikEJ.EFCorePowerTools.svg)](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools)
[![Visual Studio Marketplace Rating](http://vsmarketplacebadge.apphb.com/rating-short/ErikEJ.EFCorePowerTools.svg)](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&ssr=false#review-details)
![Visual Studio Marketplace Downloads](https://vsmarketplacebadge.apphb.com/installs-short/ErikEJ.EFCorePowerTools.svg)

[![Twitter Follow](https://img.shields.io/twitter/follow/ErikEJ.svg?style=social&label=Follow)](https://twitter.com/ErikEJ) 

[Quick Start and 10 minute intro video](https://github.com/ErikEJ/EFCorePowerTools/wiki/Reverse-Engineering-Quick-Start)

[Demo video - Introduction](https://youtu.be/uph-AGyOd8c)

[![Demo at .NET Conf](https://img.youtube.com/vi/uph-AGyOd8c/2.jpg)](https://youtu.be/uph-AGyOd8c ""Demo"")

[Demo video - Advanced features](https://youtu.be/3-Izu_qLDqY)

[![Demo at EF Core Community Standup](https://img.youtube.com/vi/3-Izu_qLDqY/1.jpg)](https://youtu.be/3-Izu_qLDqY ""Demo"")

[EF Core Power Tools presentation](https://erikej.github.io/EFCorePowerTools/index.html)

[My tools and utilities for embedded database development](https://erikej.github.io/SqlCeToolbox/)

The tool and GitHub based support is free, but I would be very grateful for a [rating or review here](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools&ssr=false#review-details), and I also appreciate [sponsorships](https://github.com/sponsors/ErikEJ)

# Documentation

[Reverse Engineering Quick Start](https://github.com/ErikEJ/EFCorePowerTools/wiki/Reverse-Engineering-Quick-Start)

[User guide](https://github.com/ErikEJ/EFCorePowerTools/wiki)

[Release notes](https://github.com/ErikEJ/EFCorePowerTools/wiki/Release-notes)

# Downloads/builds

## Requirements 

.NET Framework 4.8 or later is required. For EF Core reverse engineering, .NET Core 3.1 or .NET 6.0 x64 runtime must be installed.

## Release

Download the latest version of the Visual Studio extension from [Visual Studio MarketPlace](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools)

Or simply install from the Extensions dialog in Visual Studio.

I have also published [EF Core Power Pack](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerPack) which includes some helpful DDEX providers as well as EF Core Power Tools.

## Daily build

You can download the daily build from [Open VSIX Gallery](https://www.vsixgallery.com/extension/f4c4712c-ceae-4803-8e52-0e2049d5de9f)

Ensure you always have the latest daily build (if you are brave) by installing [this extension](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.VSIXGallery-nightlybuilds)

## Related NuGet packages

[ErikEJ.EntityFrameworkCore.DgmlBuilder](https://github.com/ErikEJ/EFCorePowerTools/blob/master/src/GUI/ErikEJ.EntityFrameworkCore.DgmlBuilder/readme.md)

Adds the AsDgml() extension method to any derived DbContext. The method will create a DGML graph of your DbContext Model, that you can then view in the Visual Studio DGML viewer

[ErikEJ.EntityFrameworkCore.SqlServer.Dacpac](https://github.com/ErikEJ/EFCorePowerTools/blob/master/src/GUI/ErikEJ.EntityFrameworkCore.SqlServer.Dacpac/readme.md)

Reverse engineer a SQL Server .dacpac with the EF Core tooling

[ErikEJ.EntityFrameworkCore.SqlServer.SqlQuery](https://github.com/ErikEJ/EFCorePowerTools/blob/master/src/GUI/ErikEJ.EntityFrameworkCore.SqlServer.SqlQuery/readme.md)

Materialize abritary classes and scalar values from EF Core using raw SQL

# How do I contribute

If you encounter a bug or have a feature request, please use the [Issue Tracker](https://github.com/ErikEJ/EFCorePowerTools/issues/new). The project is also open for pull requests following [standard pull request guidelines](https://github.com/dotnet/aspnetcore/blob/master/CONTRIBUTING.md#identifying-the-scale)

# Building and debugging

To build and debug, run latest version of Visual Studio as Administrator with the ""Visual Studio extension development workload"" installed. Make EFCorePowerTools the startup project, and ensure your build configuration is Debug, AnyCPU.

# Smoke testing changes to reverse engineering
You can smoke test changes to reverse engineering. Launch one of the efreveng console apps in the debugger using the name of a file in the TestFiles folder as parameter.

In the ScaffoldingTester solution there are scripts to populate Northwind and Chinook databases with the required objects.
","Reverse engineering, model visualization and migrations UI for EF Core. For
Visual Studio 2022. For EF Core reverse engineering,.NET Core 3.1 or.NET 6.0 x64
must be installed. The tool and GitHub based support is free, but I would be
very grateful for a [rating or review here]"
68,Effective Java（第3版）各章节的中英文学习参考（已完成）,"# Effective-Java-3rd-edition-Chinese-English-bilingual
Effective Java（第 3 版）各章节的中英文学习参考，希望对 Java 技术的提高有所帮助，欢迎通过 issue 或 pr 提出建议和修改意见。

## 目录（Contents）
- **Chapter 2. Creating and Destroying Objects（创建和销毁对象）**
    - [Chapter 2 Introduction（章节介绍）](Chapter-2/Chapter-2-Introduction.md)
    - [Item 1: Consider static factory methods instead of constructors（考虑以静态工厂方法代替构造函数）](Chapter-2/Chapter-2-Item-1-Consider-static-factory-methods-instead-of-constructors.md)
    - [Item 2: Consider a builder when faced with many constructor parameters（在面对多个构造函数参数时，请考虑构建器）](Chapter-2/Chapter-2-Item-2-Consider-a-builder-when-faced-with-many-constructor-parameters.md)
    - [Item 3: Enforce the singleton property with a private constructor or an enum type（使用私有构造函数或枚举类型实施单例属性）](Chapter-2/Chapter-2-Item-3-Enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type.md)
    - [Item 4: Enforce noninstantiability with a private constructor（用私有构造函数实施不可实例化）](Chapter-2/Chapter-2-Item-4-Enforce-noninstantiability-with-a-private-constructor.md)
    - [Item 5: Prefer dependency injection to hardwiring resources（依赖注入优于硬连接资源）](Chapter-2/Chapter-2-Item-5-Prefer-dependency-injection-to-hardwiring-resources.md)
    - [Item 6: Avoid creating unnecessary objects（避免创建不必要的对象）](Chapter-2/Chapter-2-Item-6-Avoid-creating-unnecessary-objects.md)
    - [Item 7: Eliminate obsolete object references（排除过时的对象引用）](Chapter-2/Chapter-2-Item-7-Eliminate-obsolete-object-references.md)
    - [Item 8: Avoid finalizers and cleaners（避免使用终结器和清除器）](Chapter-2/Chapter-2-Item-8-Avoid-finalizers-and-cleaners.md)
    - [Item 9: Prefer try with resources to try finally（使用 try-with-resources 优于 try-finally）](Chapter-2/Chapter-2-Item-9-Prefer-try-with-resources-to-try-finally.md)
- **Chapter 3. Methods Common to All Objects（对象的通用方法）**
    - [Chapter 3 Introduction（章节介绍）](Chapter-3/Chapter-3-Introduction.md)
    - [Item 10: Obey the general contract when overriding equals（覆盖 equals 方法时应遵守的约定）](Chapter-3/Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals.md)
    - [Item 11: Always override hashCode when you override equals（当覆盖 equals 方法时，总要覆盖 hashCode 方法）](Chapter-3/Chapter-3-Item-11-Always-override-hashCode-when-you-override-equals.md)
    - [Item 12: Always override toString（始终覆盖 toString 方法）](Chapter-3/Chapter-3-Item-12-Always-override-toString.md)
    - [Item 13: Override clone judiciously（明智地覆盖 clone 方法）](Chapter-3/Chapter-3-Item-13-Override-clone-judiciously.md)
    - [Item 14: Consider implementing Comparable（考虑实现 Comparable 接口）](Chapter-3/Chapter-3-Item-14-Consider-implementing-Comparable.md)
- **Chapter 4. Classes and Interfaces（类和接口）**
    - [Chapter 4 Introduction（章节介绍）](Chapter-4/Chapter-4-Introduction.md)
    - [Item 15: Minimize the accessibility of classes and members（尽量减少类和成员的可访问性）](Chapter-4/Chapter-4-Item-15-Minimize-the-accessibility-of-classes-and-members.md)
    - [Item 16: In public classes use accessor methods not public fields（在公共类中，使用访问器方法，而不是公共字段）](Chapter-4/Chapter-4-Item-16-In-public-classes-use-accessor-methods-not-public-fields.md)
    - [Item 17: Minimize mutability（减少可变性）](Chapter-4/Chapter-4-Item-17-Minimize-mutability.md)
    - [Item 18: Favor composition over inheritance（优先选择复合而不是继承）](Chapter-4/Chapter-4-Item-18-Favor-composition-over-inheritance.md)
    - [Item 19: Design and document for inheritance or else prohibit it（继承要设计良好并且具有文档，否则禁止使用）](Chapter-4/Chapter-4-Item-19-Design-and-document-for-inheritance-or-else-prohibit-it.md)
    - [Item 20: Prefer interfaces to abstract classes（接口优于抽象类）](Chapter-4/Chapter-4-Item-20-Prefer-interfaces-to-abstract-classes.md)
    - [Item 21: Design interfaces for posterity（为后代设计接口）](Chapter-4/Chapter-4-Item-21-Design-interfaces-for-posterity.md)
    - [Item 22: Use interfaces only to define types（接口只用于定义类型）](Chapter-4/Chapter-4-Item-22-Use-interfaces-only-to-define-types.md)
    - [Item 23: Prefer class hierarchies to tagged classes（类层次结构优于带标签的类）](Chapter-4/Chapter-4-Item-23-Prefer-class-hierarchies-to-tagged-classes.md)
    - [Item 24: Favor static member classes over nonstatic（静态成员类优于非静态成员类）](Chapter-4/Chapter-4-Item-24-Favor-static-member-classes-over-nonstatic.md)
    - [Item 25: Limit source files to a single top level class（源文件仅限有单个顶层类）](Chapter-4/Chapter-4-Item-25-Limit-source-files-to-a-single-top-level-class.md)
- **Chapter 5. Generics（泛型）**
    - [Chapter 5 Introduction（章节介绍）](Chapter-5/Chapter-5-Introduction.md)
    - [Item 26: Do not use raw types（不要使用原始类型）](Chapter-5/Chapter-5-Item-26-Do-not-use-raw-types.md)
    - [Item 27: Eliminate unchecked warnings（消除 unchecked 警告）](Chapter-5/Chapter-5-Item-27-Eliminate-unchecked-warnings.md)
    - [Item 28: Prefer lists to arrays（list 优于数组）](Chapter-5/Chapter-5-Item-28-Prefer-lists-to-arrays.md)
    - [Item 29: Favor generic types（优先使用泛型）](Chapter-5/Chapter-5-Item-29-Favor-generic-types.md)
    - [Item 30: Favor generic methods（优先使用泛型方法）](Chapter-5/Chapter-5-Item-30-Favor-generic-methods.md)
    - [Item 31: Use bounded wildcards to increase API flexibility（使用有界通配符增加 API 的灵活性）](Chapter-5/Chapter-5-Item-31-Use-bounded-wildcards-to-increase-API-flexibility.md)
    - [Item 32: Combine generics and varargs judiciously（明智地合用泛型和可变参数）](Chapter-5/Chapter-5-Item-32-Combine-generics-and-varargs-judiciously.md)
    - [Item 33: Consider typesafe heterogeneous containers（考虑类型安全的异构容器）](Chapter-5/Chapter-5-Item-33-Consider-typesafe-heterogeneous-containers.md)
- **Chapter 6. Enums and Annotations（枚举和注解）**
    - [Chapter 6 Introduction（章节介绍）](Chapter-6/Chapter-6-Introduction.md)
    - [Item 34: Use enums instead of int constants（用枚举类型代替 int 常量）](Chapter-6/Chapter-6-Item-34-Use-enums-instead-of-int-constants.md)
    - [Item 35: Use instance fields instead of ordinals（使用实例字段替代序数）](Chapter-6/Chapter-6-Item-35-Use-instance-fields-instead-of-ordinals.md)
    - [Item 36: Use EnumSet instead of bit fields（用 EnumSet 替代位字段）](Chapter-6/Chapter-6-Item-36-Use-EnumSet-instead-of-bit-fields.md)
    - [Item 37: Use EnumMap instead of ordinal indexing（使用 EnumMap 替换序数索引）](Chapter-6/Chapter-6-Item-36-Use-EnumSet-instead-of-bit-fields.md)
    - [Item 38: Emulate extensible enums with interfaces（使用接口模拟可扩展枚举）](Chapter-6/Chapter-6-Item-38-Emulate-extensible-enums-with-interfaces.md)
    - [Item 39: Prefer annotations to naming patterns（注解优于命名模式）](Chapter-6/Chapter-6-Item-39-Prefer-annotations-to-naming-patterns.md)
    - [Item 40: Consistently use the Override annotation（坚持使用 @Override 注解）](Chapter-6/Chapter-6-Item-40-Consistently-use-the-Override-annotation.md)
    - [Item 41: Use marker interfaces to define types（使用标记接口定义类型）](Chapter-6/Chapter-6-Item-41-Use-marker-interfaces-to-define-types.md)
- **Chapter 7. Lambdas and Streams（λ 表达式和流）**
    - [Chapter 7 Introduction（章节介绍）](Chapter-7/Chapter-7-Introduction.md)
    - [Item 42: Prefer lambdas to anonymous classes（λ 表达式优于匿名类）](Chapter-7/Chapter-7-Item-42-Prefer-lambdas-to-anonymous-classes.md)
    - [Item 43: Prefer method references to lambdas（方法引用优于 λ 表达式）](Chapter-7/Chapter-7-Item-43-Prefer-method-references-to-lambdas.md)
    - [Item 44: Favor the use of standard functional interfaces（优先使用标准函数式接口）](Chapter-7/Chapter-7-Item-44-Favor-the-use-of-standard-functional-interfaces.md)
    - [Item 45: Use streams judiciously（明智地使用流）](Chapter-7/Chapter-7-Item-45-Use-streams-judiciously.md)
    - [Item 46: Prefer side effect free functions in streams（在流中使用无副作用的函数）](Chapter-7/Chapter-7-Item-46-Prefer-side-effect-free-functions-in-streams.md)
    - [Item 47: Prefer Collection to Stream as a return type（优先选择 Collection 而不是流作为返回类型）](Chapter-7/Chapter-7-Item-47-Prefer-Collection-to-Stream-as-a-return-type.md)
    - [Item 48: Use caution when making streams parallel（谨慎使用并行流）](Chapter-7/Chapter-7-Item-48-Use-caution-when-making-streams-parallel.md)
- **Chapter 8. Methods（方法）**
    - [Chapter 8 Introduction（章节介绍）](Chapter-8/Chapter-8-Introduction.md)
    - [Item 49: Check parameters for validity（检查参数的有效性）](Chapter-8/Chapter-8-Item-49-Check-parameters-for-validity.md)
    - [Item 50: Make defensive copies when needed（在需要时制作防御性副本）](Chapter-8/Chapter-8-Item-50-Make-defensive-copies-when-needed.md)
    - [Item 51: Design method signatures carefully（仔细设计方法签名）](Chapter-8/Chapter-8-Item-51-Design-method-signatures-carefully.md)
    - [Item 52: Use overloading judiciously（明智地使用重载）](Chapter-8/Chapter-8-Item-52-Use-overloading-judiciously.md)
    - [Item 53: Use varargs judiciously（明智地使用可变参数）](Chapter-8/Chapter-8-Item-53-Use-varargs-judiciously.md)
    - [Item 54: Return empty collections or arrays, not nulls（返回空集合或数组，而不是 null）](Chapter-8/Chapter-8-Item-54-Return-empty-collections-or-arrays-not-nulls.md)
    - [Item 55: Return optionals judiciously（明智地的返回 Optional）](Chapter-8/Chapter-8-Item-55-Return-optionals-judiciously.md)
    - [Item 56: Write doc comments for all exposed API elements（为所有公开的 API 元素编写文档注释）](Chapter-8/Chapter-8-Item-56-Write-doc-comments-for-all-exposed-API-elements.md)
- **Chapter 9. General Programming（通用程序设计）**
    - [Chapter 9 Introduction（章节介绍）](Chapter-9/Chapter-9-Introduction.md)
    - [Item 57: Minimize the scope of local variables（将局部变量的作用域最小化）](Chapter-9/Chapter-9-Item-57-Minimize-the-scope-of-local-variables.md)
    - [Item 58: Prefer for-each loops to traditional for loops（for-each 循环优于传统的 for 循环）](Chapter-9/Chapter-9-Item-58-Prefer-for-each-loops-to-traditional-for-loops.md)
    - [Item 59: Know and use the libraries（了解并使用库）](Chapter-9/Chapter-9-Item-59-Know-and-use-the-libraries.md)
    - [Item 60: Avoid float and double if exact answers are required（若需要精确答案就应避免使用 float 和 double 类型）](Chapter-9/Chapter-9-Item-60-Avoid-float-and-double-if-exact-answers-are-required.md)
    - [Item 61: Prefer primitive types to boxed primitives（基本数据类型优于包装类）](Chapter-9/Chapter-9-Item-61-Prefer-primitive-types-to-boxed-primitives.md)
    - [Item 62: Avoid strings where other types are more appropriate（其他类型更合适时应避免使用字符串）](Chapter-9/Chapter-9-Item-62-Avoid-strings-where-other-types-are-more-appropriate.md)
    - [Item 63: Beware the performance of string concatenation（当心字符串连接引起的性能问题）](Chapter-9/Chapter-9-Item-63-Beware-the-performance-of-string-concatenation.md)
    - [Item 64: Refer to objects by their interfaces（通过接口引用对象）](Chapter-9/Chapter-9-Item-64-Refer-to-objects-by-their-interfaces.md)
    - [Item 65: Prefer interfaces to reflection（接口优于反射）](Chapter-9/Chapter-9-Item-65-Prefer-interfaces-to-reflection.md)
    - [Item 66: Use native methods judiciously（明智地使用本地方法）](Chapter-9/Chapter-9-Item-66-Use-native-methods-judiciously.md)
    - [Item 67: Optimize judiciously（明智地进行优化）](Chapter-9/Chapter-9-Item-67-Optimize-judiciously.md)
    - [Item 68: Adhere to generally accepted naming conventions（遵守被广泛认可的命名约定）](Chapter-9/Chapter-9-Item-68-Adhere-to-generally-accepted-naming-conventions.md)
- **Chapter 10. Exceptions（异常）**
    - [Chapter 10 Introduction（章节介绍）](Chapter-10/Chapter-10-Introduction.md)
    - [Item 69: Use exceptions only for exceptional conditions（仅在确有异常条件下使用异常）](Chapter-10/Chapter-10-Item-69-Use-exceptions-only-for-exceptional-conditions.md)
    - [Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors（对可恢复情况使用 checked 异常，对编程错误使用运行时异常）](Chapter-10/Chapter-10-Item-70-Use-checked-exceptions-for-recoverable-conditions-and-runtime-exceptions-for-programming-errors.md)
    - [Item 71: Avoid unnecessary use of checked exceptions（避免不必要地使用 checked 异常）](Chapter-10/Chapter-10-Item-71-Avoid-unnecessary-use-of-checked-exceptions.md)
    - [Item 72: Favor the use of standard exceptions（鼓励复用标准异常）](Chapter-10/Chapter-10-Item-72-Favor-the-use-of-standard-exceptions.md)
    - [Item 73: Throw exceptions appropriate to the abstraction（抛出能用抽象解释的异常）](Chapter-10/Chapter-10-Item-73-Throw-exceptions-appropriate-to-the-abstraction.md)
    - [Item 74: Document all exceptions thrown by each method（为每个方法记录会抛出的所有异常）](Chapter-10/Chapter-10-Item-74-Document-all-exceptions-thrown-by-each-method.md)
    - [Item 75: Include failure capture information in detail messages（异常详细消息中应包含捕获失败的信息）](Chapter-10/Chapter-10-Item-75-Include-failure-capture-information-in-detail-messages.md)
    - [Item 76: Strive for failure atomicity（尽力保证故障原子性）](Chapter-10/Chapter-10-Item-76-Strive-for-failure-atomicity.md)
    - [Item 77: Don’t ignore exceptions（不要忽略异常）](Chapter-10/Chapter-10-Item-77-Don’t-ignore-exceptions.md)
- **Chapter 11. Concurrency（并发）**
    - [Chapter 11 Introduction（章节介绍）](Chapter-11/Chapter-11-Introduction.md)
    - [Item 78: Synchronize access to shared mutable data（对共享可变数据的同步访问）](Chapter-11/Chapter-11-Item-78-Synchronize-access-to-shared-mutable-data.md)
    - [Item 79: Avoid excessive synchronization（避免过度同步）](Chapter-11/Chapter-11-Item-79-Avoid-excessive-synchronization.md)
    - [Item 80: Prefer executors, tasks, and streams to threads（Executor、task、流优于直接使用线程）](Chapter-11/Chapter-11-Item-80-Prefer-executors,-tasks,-and-streams-to-threads.md)
    - [Item 81: Prefer concurrency utilities to wait and notify（并发实用工具优于 wait 和 notify）](Chapter-11/Chapter-11-Item-81-Prefer-concurrency-utilities-to-wait-and-notify.md)
    - [Item 82: Document thread safety（文档应包含线程安全属性）](Chapter-11/Chapter-11-Item-82-Document-thread-safety.md)
    - [Item 83: Use lazy initialization judiciously（明智地使用延迟初始化）](Chapter-11/Chapter-11-Item-83-Use-lazy-initialization-judiciously.md)
    - [Item 84: Don’t depend on the thread scheduler（不要依赖线程调度器）](Chapter-11/Chapter-11-Item-84-Don’t-depend-on-the-thread-scheduler.md)
- **Chapter 12. Serialization（序列化）**
    - [Chapter 12 Introduction（章节介绍）](Chapter-12/Chapter-12-Introduction.md)
    - [Item 85: Prefer alternatives to Java serialization（Java 序列化的替代方案）](Chapter-12/Chapter-12-Item-85-Prefer-alternatives-to-Java-serialization.md)
    - [Item 86: Implement Serializable with great caution（非常谨慎地实现 Serializable）](Chapter-12/Chapter-12-Item-86-Implement-Serializable-with-great-caution.md)
    - [Item 87: Consider using a custom serialized form（考虑使用自定义序列化形式）](Chapter-12/Chapter-12-Item-87-Consider-using-a-custom-serialized-form.md)
    - [Item 88: Write readObject methods defensively（防御性地编写 readObject 方法）](Chapter-12/Chapter-12-Item-88-Write-readObject-methods-defensively.md)
    - [Item 89: For instance control, prefer enum types to readResolve（对于实例控制，枚举类型优于 readResolve）](Chapter-12/Chapter-12-Item-89-For-instance-control-prefer-enum-types-to-readResolve.md)
    - [Item 90: Consider serialization proxies instead of serialized instances（考虑以序列化代理代替序列化实例）](Chapter-12/Chapter-12-Item-90-Consider-serialization-proxies-instead-of-serialized-instances.md)
","summarize: # Effective-Java-3rd-edition-Chinese-English-bilingual.Effective
Java（第 3 版）    - [Chapter 2 Introduction]    - [Item 1: Consider static factory
methods instead of constructors]"
1021,"Elkeid is an open source solution that can meet the security requirements of various workloads such as hosts, containers and K8s, and serverless. It is derived from ByteDance's internal best practices.","# Elkeid - Bytedance Cloud Workload Protection Platform

English | [简体中文](README-zh_CN.md)

**Elkeid** is an open source solution that can meet the security requirements of various workloads such as **hosts, containers and K8s, and serverless**. It is derived from ByteDance's internal best practices.

With the business development of enterprises, the situation of multi-cloud, cloud-native, and coexistence of multiple workloads has become more and more prominent. We hope that there can be a set of solutions that can meet the security requirements under different workloads, so **Elkeid** was born.



## Introduction

Elkeid has the following key capabilities:

* **Elkeid** not only has the traditional **HIDS (Host Intrusion Detection System)** ability for host layer intrusion detection and malicious file identification, but also can well identify malicious behaviors in containers. The host can meet the anti-intrusion security requirements of the host and the container on it, and the powerful kernel-level data collection capability at the bottom of Elkeid can satisfy the desire of most security analyst for host-level data.

* For the running business **Elkeid** has the **RASP** capability and can be injected into the business process for anti-intrusion protection, not only the operation and maintenance personnel do not need to install another Agent, but also the business does not need to restart.

* For **K8s** itself, **Elkeid** supports collection to **K8s Audit Log** to perform intrusion detection and risk identification on the **K8s** system.

* **Elkeid**'s rule engine **Elkeid HUB** can also be well linked with external multiple systems.

**Ekeid** integrates these capabilities into one platform to meet the complex security requirements of different workloads, while also achieving multi-component capability association. What is even more rare is that each component undergoes massive byte-beating. Data and years of combat testing.



## Elkeid Community Edition Description

It should be noted that there are differences between the **Elkeid** **open source version** and the full version. The current open source capabilities mainly include:

* All on-device capabilities, that is, on-device data/asset/partial collection capabilities, kernel-state data collection capabilities, RASP probe parts, etc., and are consistent with the internal version of ByteDance;
* All backend capabilities, namely Agent Center, service discovery, etc., are consistent with the internal version of ByteDance;
* Provide a community edition rule engine, namely Elkeid HUB, and use it as an example with a small number of strategies;
* Provides community version of Elkeid Console and some supporting capabilities.

Therefore, it is necessary to have complete anti-intrusion and risk perception capabilities, and it is also necessary to construct policies based on Elkeid HUB and perform secondary processing of the data collected by Elkeid.



## Elkeid Architecture

<img src=""server/docs/server_new.png""/>

##  Elkeid Host Ability
* **[Elkeid Agent](agent)** Linux userspace agent，responsible for managing various plugin, communication with **Elkeid Server**.
* **[Elkeid Driver](driver)** Driver can collect data on Linux Kernel, support container runtime , communication with Elkeid Driver Plugin.
* **[Elkeid RASP](rasp)** Support CPython、Golang、JVM、NodeJS、PHP runtime probe, supports dynamic injection into the runtime.
* **Elkeid Agent Plugin List**
    * [Driver Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/driver): Responsible for managing **Elkeid Driver**, and process the driver data.
    * [Collector Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/collector): Responsible for the collection of assets/log information on the Linux System, such as user list, crontab, package information, etc.
    * [Journal Watcher](https://github.com/bytedance/Elkeid/tree/main/plugins/journal_watcher): Responsible for monitoring systemd logs, currently supports ssh related log collection and reporting.
    * [Scanner Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/scanner): Responsible for static detection of malicious files on the host, currently supports yara.
    * [RASP Plugin](https://github.com/bytedance/Elkeid/tree/main/rasp/plugin): Responsible for managing RASP components and processing data collected from RASP.
    * [Baseline Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/baseline): Responsible for detecting baseline risks based on baseline check policies.
* [**Elkeid Data Format**](server/docs/ElkeidData.xlsx)
* [**Elkeid Data Usage Tutorial**](elkeidup/raw_data_usage_tutorial/raw_data_usage_tutorial-zh_CN.md)


## Elkeid Backend Ability
* **[Elkeid AgentCenter](server/agent_center)** Responsible for communicating with the Agent, collecting Agent data and simply processing it and then summing it into the MQ, is also responsible for the management of the Agent, including Agent upgrade, configuration modification, task distribution, etc.
* **[Elkeid ServiceDiscovery](server/service_discovery)** Each component in the background needs to register and synchronize service information with the component regularly, so as to ensure that the instances in each service module are visible to each other and facilitate direct communication.
* **[Elkeid Manager](server/manager)** Responsible for the management of the entire backend, and provide related query and management API.
* **[Elkeid Console](server/web_console)** Elkeid Front-end
* **[Elkeid HUB](https://github.com/bytedance/Elkeid-HUB)** Elkeid HIDS RuleEngine



## Elkeid Function List

| Ability List                                           | Elkeid Community Edition | Elkeid Enterprise Edition |
|--------------------------------------------------------|--------------------------|---------------------------|
| Linux  runtime data collection                         | :white_check_mark:       | :white_check_mark:        |
| RASP probe                                             | :white_check_mark:       | :white_check_mark:        |
| K8s Audit Log collection                               | :white_check_mark:       | :white_check_mark:        |
| Agent control plane                                    | :white_check_mark:       | :white_check_mark:        |
| Host Status and Details                                | :white_check_mark:       | :white_check_mark:        |
| Extortion bait                                         | :ng_man:                 | :white_check_mark:        |
| Asset collection                                       | :white_check_mark:       | :white_check_mark:        |
| Asset Collection Enhancements                          | :ng_man:                 | :white_check_mark:        |
| K8s asset collection                                   | :white_check_mark:       | :white_check_mark:        |
| Exposure and Vulnerability Analysis                    | :ng_man:                 | :white_check_mark:        |
| Host/Container Basic Intrusion Detection               | `few samples`            | :white_check_mark:        |
| Host/Container Behavioral Sequence Intrusion Detection | :ng_man:                 | :white_check_mark:        |
| RASP Basic Intrusion Detection                         | `few samples`            | :white_check_mark:        |
| RASP Behavioral Sequence Intrusion Detection           | :ng_man:                 | :white_check_mark:        |
| K8S Basic Intrusion Detection                          | `few samples`            | :white_check_mark:        |
| K8S Behavioral Sequence Intrusion Detection            | :ng_man:                 | :white_check_mark:        |
| K8S Threat Analysis                                    | :ng_man:                 | :white_check_mark:        |
| Alarm traceability (behavior traceability)             | :ng_man:                 | :white_check_mark:        |
| Alarm traceability (resident traceability)             | :ng_man:                 | :white_check_mark:        |
| Alert Whitelist                                        | :white_check_mark:       | :white_check_mark:        |
| Multi-alarm aggregation capability                     | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (Process)                              | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (Network)                              | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (File)                                 | :ng_man:                 | :white_check_mark:        |
| File isolation                                         | :ng_man:                 | :white_check_mark:        |
| Vulnerability discovery                                | `few vuln info`          | :white_check_mark:        |
| Vulnerability information hot update                   | :ng_man:                 | :white_check_mark:        |
| Baseline check                                         | `few baseline rules`     | :white_check_mark:        |
| Application Vulnerability Hotfix                       | :ng_man:                 | :white_check_mark:        |
| Virus scan                                             | :white_check_mark:       | :white_check_mark:        |
| User behavior log analysis                             | :ng_man:                 | :white_check_mark:        |
| Agent Plugin management                                | :white_check_mark:       | :white_check_mark:        |
| System monitoring                                      | :white_check_mark:       | :white_check_mark:        |
| System Management                                      | :white_check_mark:       | :white_check_mark:        |
| Windows Support                                        | :ng_man:                 | :white_check_mark:        |
| Honey pot                                              | :ng_man:                 | :oncoming_automobile:     |
| Active defense                                         | :ng_man:                 | :oncoming_automobile:     |
| Cloud virus analysis                                   | :ng_man:                 | :oncoming_automobile:     |
| File-integrity monitoring                              | :ng_man:                 | :oncoming_automobile:     |




## Front-end Display (Community Edition)
**Security overview**
<img src=""png/console0.png"" style=""float:left;""/>

**K8s security alert list**

<img src=""png/console1.png"" style=""float:left;""/>

**K8s pod list**

<img src=""png/console2.png"" style=""float:left;""/>

****

**Host overview**

<img src=""png/console3.png"" style=""float:left;""/>

**Resource fingerprint**

<img src=""png/console4.png"" style=""float:left;""/>

**intrusion alert overwiew**

<img src=""png/console5.png"" style=""float:left;""/>

**Vulnerability**

<img src=""png/console6.png"" style=""float:left;""/>

**Baseline check**

<img src=""png/console7.png"" style=""float:left;""/>

**Virus scan**

<img src=""png/console8.png"" style=""float:left;""/>

**Backend hosts monitoring**

<img src=""png/console9.png"" style=""float:left;""/>

**Backend service monitoring**

<img src=""png/console10.png"" style=""float:left;""/>


## Console User Guide
* **[ELkeid Console User Guide](server/docs/console_tutorial/Elkeid_Console_manual.md)**


## Quick Start
* **[Deploy by Elkeidup](elkeidup/README.md)**

## Contact us && Cooperation

<img src=""png/Lark.png"" width=""40%"" style=""float:left;""/>

*Lark Group*



## About Elkeid Enterprise Edition

Elkeid Enterprise Edition supports separate intrusion detection rules(like the HIDS, RASP, K8s) sales, as well as full capacity sales.

If interested in Elkeid Enterprise Edition please contact elkeid@bytedance.com


## Elkeid Docs
For more details and latest updates, see [Elkeid docs](https://elkeid.bytedance.com/English/).


## License
* Elkeid Driver: GPLv2
* Elkeid RASP: Apache-2.0
* Elkeid Agent: Apache-2.0
* Elkeid Server: Apache-2.0
* Elkeid Console: [Elkeid License](server/web_console/LICENSE)
* Elkeid HUB: [Elkeid License](https://github.com/bytedance/Elkeid-HUB/blob/main/LICENSE)

## 404StarLink 2.0 - Galaxy
<img src=""https://github.com/knownsec/404StarLink-Project/raw/master/logo.png"" width=""30%"" style=""float:left;""/>

Elkeid has joined 404Team [404StarLink 2.0 - Galaxy](https://github.com/knownsec/404StarLink2.0-Galaxy)
","Elkeid has the ability for host layer intrusion detection and malicious file
identification. The host can meet the anti-intrusion security requirements of
the host and the container on it. The powerful kernel-level data collection
capability at the bottom of Elkeid can satisfy the desire of most security
analyst for host- level data. The current open source capabilities mainly
include: on-device data/asset/partial collection capabilities, RASP probe parts,
etc., and are consistent with the internal version of ByteDance."
398,Estimote Fleet Management SDK for Android,"# Estimote Fleet Management SDK for Android

  * [Introduction](#introduction)
    + [""Can I use this SDK to detect beacons?""](#can-i-use-this-sdk-to-detect-beacons)
    + [""Do I need to build an app to configure my beacons?""](#do-i-need-to-build-an-app-to-configure-my-beacons)
  * [Requirements](#requirements)
  * [Installation](#installation)
    + [Connecting Fleet Management SDK to your Estimote Cloud account](#connecting-fleet-management-sdk-to-your-estimote-cloud-account)
  * [Bulk Updater](#bulk-updater)
  * [Configuring individual beacons](#configuring-individual-beacons)
  * [API documentation (AKA JavaDocs)](#api-documentation-aka-javadocs)
  * [Feedback, questions, issues](#feedback-questions-issues)
  * [Changelog](#changelog)

## Introduction

Estimote Fleet Management SDK allows you to **configure and update your Estimote Beacons via your own Android app**, for example:

 - enable Estimote Monitoring and Estimote Telemetry
 - enable iBeacon, and change its UUID, major, minor, transmit power
 - update beacon's firmware
 - etc.

You can [configure your beacons one by one](#configuring-individual-beacons), or use Estimote Cloud to queue ""pending settings"" on your beacons and apply these settings with the [Bulk Updater](#bulk-updater).

Integrating this SDK into your app means the users of your app can automatically propagate any configuration changes to your beacons. Say, you deployed the beacons, but the initial usage suggests you need to bump the transmit power up a notch, or maybe make the Telemetry advertise more frequently. With Bulk Updater integrated into the app, any user of the app in range of a ""pending settings"" beacon will apply the new settings.

(Settings that live entirely in Estimote Cloud, like the beacon's name, tags, and attachments, are always updated instantly, without the need to propagate settings to beacons.)

### ""Can I use this SDK to detect beacons?""

Short version: no, use the [Proximity SDK](https://github.com/Estimote/Android-Proximity-SDK) instead.

Longer version: this SDK was previously known as ""Estimote SDK"", and it included APIs for detecting your beacons, which you could use to show notifications, etc. **These APIs are now deprecated and are no longer supported.** They have been replaced with the [Estimote Proximity SDK for Android](https://github.com/Estimote/Android-Proximity-SDK), powered by [Estimote Monitoring](https://community.estimote.com/hc/en-us/articles/360003252832-What-is-Estimote-Monitoring-).

You can, and are encouraged to, use the Fleet Management SDK alongside the Proximity SDK: Proximity SDK for driving the proximity-based events in your app, and Fleet Management SDK for remotely managing your beacons.

### ""Do I need to build an app to configure my beacons?""

No, you can use our [Estimote Android app](https://play.google.com/store/apps/details?id=com.estimote.apps.main&hl=en) to change the most common settings, and to apply ""pending settings"" to individual beacons. Connecting to the beacon in the app automatically applies the latest settings from Estimote Cloud.

If you have more Estimote devices, [Estimote Deployment app](https://itunes.apple.com/us/app/estimote-deployment/id1109375679?mt=8) can apply ""pending settings"" in bulk. At this time, it's available on iOS only.

## Requirements

Android 4.3 or later, and an Android device with Bluetooth Low Energy.

The minimum Android API level this SDK will run on is 9 (= Android 2.3), but the Bluetooth-detection features (which is most of them) won't work. You can handle this gracefully in your app by not using the fleet management features if you detect Android < 4.3, or no Bluetooth Low Energy available.

Bluetooth Low Energy scanning on Android also requires the app to obtain the location permissions from the user, and ""location"" must also be enabled system-wide. Chances are, if your app is using beacons (e.g., via the Estimote Proximity SDK), [you already have this permission](https://developer.estimote.com/proximity/android-tutorial/#request-location-permissions).

## Installation

This SDK is distributed via JCenter repository. Most of the time, you'll already have JCenter repo configured in your Android project, with these lines in the Project build.gradle:

```gradle
allprojects {
    repositories {
        jcenter()
        // ...
    }
}
```

If not, add `jcenter()` inside `repositories`, as shown above. Then, in the Module build.gradle, add:

```gradle
dependencies {
    implementation 'com.estimote:mgmtsdk:1.4.6'
    implementation 'com.estimote:coresdk:1.3.4'
    // if using an older version of Gradle, try ""compile"" instead of ""implementation""
}
```

### Connecting Fleet Management SDK to your Estimote Cloud account

This SDK needs to be able to access your Estimote Cloud account in order to configure your beacons.

To do that, register your mobile app in Estimote Cloud in the ""Mobile Apps"" section. You'll get an App ID and App Token, which you can use to initialize the SDK:

```java
// do this before you use any of the fleet management features
EstimoteSDK.initialize(applicationContext, ""my-app-bf6"", ""7bcabedcb4f..."");
```

Your Estimote Cloud account needs to have a fleet management subscription. As of now, there's a free, indefinite trial available if you have less than 20 devices.

## Bulk Updater

This is how to set up the Bulk Updater: (we recommend doing this in an Application subclass)

```java
private BulkUpdater bulkUpdater;

@Override
protected void onCreate() {
    super.onCreate();

    Context context = getApplicationContext();
    bulkUpdater = new BulkUpdaterBuilder(context)
        .withFirmwareUpdate()
        .withCloudFetchInterval(1, TimeUnit.HOURS)
        .withTimeout(0)
        .withRetryCount(3)
        .build()
}
```

And this is how to use it:

```java
bulkUpdater.start(new BulkUpdater.BulkUpdaterCallback() {
    @Override
    public void onDeviceStatusChange(ConfigurableDevice device,
            BulkUpdater.Status newStatus, String message) {
        Log.d(""BulkUpdater"", device.deviceId + "": "" + newStatus);
    }

    @Override
    public void onFinished(int updatedCount, int failedCount) {
        Log.d(""BulkUpdater"", ""Finished. Updated: "" +
                updatedCount + "", Failed: "" + failedCount);
    }

    @Override
    public void onError(DeviceConnectionException e) {
        Log.d(""BulkUpdater"", ""Error: "" + e.getMessage());
    }
});
```

One more thing: you need to feed the BulkUpdater with data from the beacons' Connectivity packets:

```java
private BeaconManager beaconManager;

// ...

beaconManager = new BeaconManager(context);

// this will make the beacon attempt to detect Connectivity packets for 10 seconds,
// then wait 50 seconds before the next detection, then repeat the cycle
beaconManager.setForegroundScanPeriod(10000, 50000);

// this connects to an underlying service, not to the beacon (-;
beaconManager.connect(new BeaconManager.ServiceReadyCallback() {
    @Override
    public void onServiceReady() {
        beaconManager.setConfigurableDevicesListener(new BeaconManager.ConfigurableDevicesListener() {
            @Override
            public void onConfigurableDevicesFound(List<ConfigurableDevice> configurableDevices) {
                bulkUpdater.onDevicesFound(configurableDevices);
            }
        });
    }
});
beaconManager.startConfigurableDevicesDiscovery();
```

To stop, and clean up after the BulkUpdater, do:

```java
beaconManager.stopConfigurableDevicesDiscovery()
bulkUpdater.stop();
bulkUpdater.destroy();
```

## Configuring individual beacons

If you want to individually configure a beacon, you'll need to connect to it first: [Connecting to beacons](https://github.com/Estimote/Android-Fleet-Management-SDK/blob/master/Docs/DOC_deviceConnection.md).

Once connected, you can read and write settings, as well as update the beacon's firmware: [Basic operations on connected device](https://github.com/Estimote/Android-Fleet-Management-SDK/blob/master/Docs/DOC_deviceConnection.md#basic-operations-on-connected-device) and [Advanced operations on connected device](https://github.com/Estimote/Android-Fleet-Management-SDK/blob/master/Docs/DOC_deviceConnection.md#advanced-operations-on-connected-device).

## API documentation (AKA JavaDocs)

… is available here:

<http://estimote.github.io/Android-Fleet-Management-SDK/JavaDocs/>

## Feedback, questions, issues

Post your questions and feedback to [Estimote Forums](https://forums.estimote.com), we'd love to hear from you!

Report issues on the [issues page](https://github.com/Estimote/Android-Fleet-Management-SDK/issues).

## Changelog

See [CHANGELOG.md](CHANGELOG.md).
","Estimote Fleet Management SDK allows you to **configure and update your Estimote
Beacons via your own Android app. Integrating this SDK into your app means the
users of your app can automatically propagate any configuration changes to your
beacons. At this time, it's available on iOS only. Most'll already have your
JCenter repo configured in Android project.Android 4.3 or later, and an Android
device with Bluetooth Low Energy. The minimum Android API level this SDK will
run on is 9 (= Android 2.3)"
3310,Eva.js is a front-end game engine specifically for creating interactive game projects.,"# Eva.js (Interactive Game Engine)

![npm-version](https://img.shields.io/npm/v/@eva/eva.js)
![npm-size](https://img.shields.io/bundlephobia/minzip/@eva/eva.js)
![npm-download](https://img.shields.io/npm/dm/@eva/eva.js)

English ｜ [Chinese](./README_CN.md)

## Introduction

Eva.js is a front-end game engine specifically for creating interactive game projects.


**Easy to Use**: Eva.js provides out-of-box game components for developers to use right away. Yes, it's simple and elegant!

**High-performance**: Eva.js is powered by efficient runtime and rendering pipeline ([Pixi.JS](http://pixijs.io/)) which makes it possible to unleash the full potential of your device.

**Scalability**: Thanks to the ECS(Entity-Component-System) structure, you can expand your needs by highly customizable APIs. The only limitation is your imagination!

## Documentation

You can find the Eva.js Documentation on [eva.js.org](https://eva.js.org), we appreciate your devotion by sending pull requests to [this repository](https://github.com/eva-engine/eva-engine.github.io).

Checking out the [Live example](https://eva.js.org/playground).

- [Quick Start](https://eva.js.org/#/tutorials/quickstart)
- [Start Demo](https://github.com/eva-engine/start-demo)


## Usage

### With NPM
```bash
npm i @eva/eva.js @eva/plugin-renderer @eva/plugin-renderer-img --save
```

### In Browser
```html
<script src=""https://unpkg.com/@eva/eva.js@1.0.4/dist/EVA.min.js""></script>
```

### Example

```html
<canvas id=""canvas"" ></canvas>
```

```javascript
import { Game, GameObject, resource, RESOURCE_TYPE } from '@eva/eva.js';
import { RendererSystem } from '@eva/plugin-renderer';
import { Img, ImgSystem } from '@eva/plugin-renderer-img';

resource.addResource([
  {
    name: 'imageName',
    type: RESOURCE_TYPE.IMAGE,
    src: {
      image: {
        type: 'png',
        url:
          'https://gw.alicdn.com/tfs/TB1DNzoOvb2gK0jSZK9XXaEgFXa-658-1152.webp',
      },
    },
    preload: true,
  },
]);

const game = new Game({
  systems: [
    new RendererSystem({
      canvas: document.querySelector('#canvas'),
      width: 750,
      height: 1000,
    }),
    new ImgSystem(),
  ],
});

const image = new GameObject('image', {
  size: { width: 750, height: 1319 },
  origin: { x: 0, y: 0 },
  position: {
    x: 0,
    y: -319,
  },
  anchor: {
    x: 0,
    y: 0,
  },
});

image.addComponent(
  new Img({
    resource: 'imageName',
  })
);

game.scene.addChild(image);

```

## Questions
For questions and support please use [Gitter](https://gitter.im/eva-engine/Eva.js) or [DingTalk](https://www.dingtalk.com/) (钉钉) to scan [this QR Code](https://gw.alicdn.com/imgextra/i3/O1CN01I0KDY41JkjGZ4xxks_!!6000000001067-2-tps-465-668.png).


## Issues
Please make sure to read the [Issue Reporting Checklist](.github/ISSUE_TEMPLATE.md) before opening an issue. Issues not conforming to the guidelines may be closed immediately.

## Changelog
[release notes](https://eva.js.org/#/others/changelog) in documentation.

## Contribute
[How to Contribute](.github/HOW_TO_CONTRIBUTE.md)

## License
The Eva.js is released under the MIT license. See [LICENSE file](./LICENSE).
","Eva.js is a front-end game engine specifically for creating interactive game
projects. Eva.js provides out-of-box game components for developers to use right
away. It is powered by efficient runtime and rendering pipeline which makes it
possible to unleash the full potential of your device. The only limitation is
your imagination!You can find the Eva.JS Documentation on [eva.js.org]. We
appreciate your devotion by sending pull requests to [this
repository](https://github.com/eva-engine/eva.engine.io)."
3254,Database migration tool for .NET and .NET Core projects. Inspired by Flyway.,"# Evolve [![AppVeyor build status](https://img.shields.io/appveyor/build/lecaillon/evolve/master?label=AppVeyor)](https://ci.appveyor.com/project/lecaillon/evolve) [![Azure build Status](https://img.shields.io/azure-devops/build/lecaillon/Evolve-CI/2/master?label=Azure)](https://lecaillon.visualstudio.com/Evolve-CI/_build/latest?definitionId=2&branchName=master) [![Code coverage](https://img.shields.io/azure-devops/coverage/lecaillon/evolve-ci/2/master.svg?color=brightgreen)](https://lecaillon.visualstudio.com/Evolve-CI/_build/latest?definitionId=2&branchName=master) [![NuGet](https://img.shields.io/nuget/dt/evolve)](https://www.nuget.org/packages/Evolve) [![Twitter](https://img.shields.io/twitter/follow/evolve_db?label=Evolve&style=social)](https://twitter.com/intent/follow?screen_name=evolve_db)
<img align=""right"" width=""173px"" height=""173px"" src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/logo.png"">

Evolve is a personal, free-time project with no funding. If you use Evolve in your daily work and feel that it makes your life easier, consider supporting its development via [GitHub Sponsors](https://github.com/sponsors/lecaillon) :heart: and by adding a star to this repository :star:

I’m very passionate about doing personal projects and very grateful that other people find them useful, too. I want to share as much as possible, but it doesn’t pay the bills. With your help, I can focus on open-source work more and make it sustainable. If your company uses any of my libraries, consider donating too as a sign of gratitude and for priority support!

## Beloved sponsors
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        <a href=""https://www.veepee.com"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve.Doc/master/static/images/Veepee.png"" style=""margin: 0rem auto"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://megaslice.uk"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve.Doc/master/static/images/Megaslice.png"" style=""margin: 0rem auto"">
        </a>
      </td>
    </tr>
  </tbody>
</table>

## Introduction
Evolve is a cross platform database migration tool inspired by [Flyway](https://flywaydb.org/), that uses plain SQL scripts.

Its purpose is to automate your database changes, and help keep those changes synchronized through all your environments and development teams. This makes it an ideal tool for continuous integration / delivery.

Overall Evolve embraces simplicity. Every time you run your project, it will automatically ensure that your database is up-to-date. Install it and forget it!

## Installation
Evolve is available as a .NET library, a .NET tool and a standalone CLI.

|  | Evolve | Evolve Tool | Evolve CLI |
|-|-|-|-|
| Repository | [![NuGet Evolve](https://img.shields.io/nuget/dt/evolve)](https://www.nuget.org/packages/Evolve) | [![NuGet Evolve.Tool](https://img.shields.io/nuget/dt/Evolve.Tool)](https://www.nuget.org/packages/Evolve.Tool) | [![GitHub CLI](https://img.shields.io/badge/GitHub-releases-brightgreen.svg?logo=github)](https://github.com/lecaillon/Evolve/releases/latest) |

## Supported databases
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/sqlserver"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/sqlserver.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/postgresql"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/postgresql.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/mysql"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/mysql.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/mariadb"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/mariadb.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/sqlite"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/sqlite.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/cassandra"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/cassandra.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/cockroachdb"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/cockroachdb.png"">
        </a>
      </td>
    </tr>
  </tbody>
</table>

## Documentation
You can read the latest documentation at [https://evolve-db.netlify.com](https://evolve-db.netlify.com) and find samples [here](https://github.com/lecaillon/Evolve/tree/master/samples).

## Changelog
Detailed changes for each release are documented in the [release notes](https://github.com/lecaillon/Evolve/releases).
","Evolve is a cross platform database migration tool inspired by [Flyway], that
uses plain SQL scripts. Its purpose is to automate your database changes, and
help keep those changes synchronized through all your environments and
development teams. This makes it an ideal tool for continuous integration /
delivery.Overall Evolve embraces simplicity. Every time you run your project, it
will automatically ensure that your database is up-to-date. Evolve is available
as a.NET library, a.NET tool and a standalone. CLI."
2472,Firebase Javascript SDK,"# Firebase Javascript SDK

<!-- BADGES -->
![Build Status](https://img.shields.io/github/workflow/status/firebase/firebase-js-sdk/Run%20All%20Tests.svg)
[![Version](https://img.shields.io/npm/v/firebase.svg?label=version)](https://www.npmjs.com/package/firebase)
[![Coverage Status](https://coveralls.io/repos/github/firebase/firebase-js-sdk/badge.svg?branch=master)](https://coveralls.io/github/firebase/firebase-js-sdk?branch=master)
<!-- END BADGES -->

The Firebase JavaScript SDK implements the client-side libraries used by
applications using Firebase services. This SDK is distributed via:

- [CDN](https://firebase.google.com/docs/web/setup/#add-sdks-initialize)
- [npm package](https://www.npmjs.com/package/firebase)
- [Bower package](https://github.com/firebase/firebase-bower)

To get started using Firebase, see
[Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

[![Release Notes](https://img.shields.io/npm/v/firebase.svg?style=flat-square&label=Release%20Notes%20for&labelColor=039be5&color=666)](https://firebase.google.com/support/release-notes/js)

## Upgrade to Version 9
Version 9 has a redesigned API that supports tree-shaking. Read the [Upgrade Guide](https://firebase.google.com/docs/web/modular-upgrade) to learn more.
## Supported Environments
Please see [Environment Support](https://firebase.google.com/support/guides/environments_js-sdk).

## SDK Dev Workflow

### Prerequisites

#### Node.js

Before you can start working on the Firebase JS SDK, you need to have Node.js
installed on your machine. The currently supported versions are `10.15.0` or greater.

To download Node.js visit https://nodejs.org/en/download/.

_NOTE: You can use a tool like [`NVM`](https://github.com/creationix/nvm)
or [`N`](https://github.com/tj/n) to install and manage multiple node versions_

#### Yarn

In addition to Node.js we use `yarn` to facilitate multi package development.

To install `yarn` follow the instructions listed on their website:
https://yarnpkg.com/en/docs/install

#### Java

The closure compiler requires a modern Java installation. Java 8+ should be installed: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

#### Verify Prerequisites

You can verify your setup by running the following commands in your terminal:

```bash
$ node -v
$ yarn -v
$ java -version
```

Your Node.js version should be `10.15.0` or greater, your `yarn` version should
be `1.0.0` or greater, and your `java` version should be `1.8.0` or greater.

_NOTE: We will update the documentation as new versions are required, however
for continuing development on the SDK, staying up to date on the stable versions
of these packages is advised_

### Install Dependencies

Once you have Node.js and `yarn` installed on your machine and have validated
that you are running the proper version, you can set up the development environment
by running the following at the root of the SDK:

```bash
$ yarn
```

Once you have installed all the dependencies, you can build the entire SDK by
running the following command the root of the SDK:

```bash
$ yarn build
```

## Testing the SDK

### Test Setup

A production project is required to test the Firebase JS SDK. You can create a
new project by visiting the [Firebase Console](https://console.firebase.google.com/).

#### Web App Setup

Visit the ""Project Overview"" and select ""Add app"" under your project name. Register the app with a
nickname and click through the remaining steps. Without performing this step, you will encounter
the error in the test setup:

```
FirebaseError: There are no WEB apps associated with this Firebase project
```

#### Firestore Database Setup

Visit the ""Firestore Database"" section of the console and create a Cloud Firestore
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Realtime Database Setup

Visit the ""Realtime Database"" section of the console and create a realtime
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Authentication Support

Visit the authentication config in your project and enable the `Anonymous`
sign-in provider to complete your project config.

#### Automated Setup

The tests need to be configured to use the Firebase production project that you
created in the ""Test Setup"" section above. To do this, run the `yarn test:setup`
command, as follows:


```bash
# Select the Firebase project via the text-based UI.
$ yarn test:setup

# Specify the Firebase project via the command-line arguments.
$ yarn test:setup --projectId=<test_firebase_project_id>
```

If you see an error like
```
HTTP Error: 404, Project '<test_firebase_project_id>' does not exist.
```
then make sure that you have created the database as specified in the ""Firestore
Database Setup"" section above.

### Running the tests

Each of the directories in the `integration` directory as well as the `packages`
directory have their own test suites. You will need to build the SDK before
running tests. Test suites can be run all together by running the following 
command at the root of the package:

```bash
$ yarn test
```

In addition, you can run any of the tests individually by running `yarn test` in
an individual package directory.

## Building the SDK

### Introduction

The Firebase JS SDK is built with a series of individual packages that are all
contained in this repository. Development is coordinated via [yarn
workspaces](https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/) and
[Lerna](https://lerna.js.org/) (a monorepo management tool).

Each package in the `packages` directory, constitute a piece of our
implementation. The SDK is built via a combination of all of these packages
which are published under the [`firebase`
scope](https://www.npmjs.com/search?q=scope%3Afirebase) on NPM.

### Testing the SDK Locally

Please be sure to build your repo before proceeding any further.
In order to manually test your SDK changes locally, you must use [yarn link](https://classic.yarnpkg.com/en/docs/cli/link):

```shell
$ cd packages/firebase
$ yarn link # initialize the linking to the other folder
$ cd ../<my-test-app-dir> # cd into your personal project directory
$ yarn link firebase # tell yarn to use the locally built firebase SDK instead
```

This will create a symlink and point your `<my-test-app-dir>` to the locally built version of the firebase SDK.

### Helper Scripts

Each package in the `packages` directory exposes a `dev` script. This script
will set up a watcher for development on the individual piece of the SDK. In
addition, there is a top level `dev` script that can be run to start all of the
watch tasks as well as a sandbox server.

You can run the dev script by running the following at the root of the package:

```bash
$ yarn dev
```

### Prepush Hooks

As part of this repo, we use the NPM package [`husky`](https://npm.im/husky) to
implement git hooks. We leverage the prepush hook to do two things:

- Automated code styling (using [`prettier`](https://npm.im/prettier))
- Automated LICENSE header insertion

## Contributing

See [Contributing](./CONTRIBUTING.md) for more information on contributing to the Firebase
JavaScript SDK.

### Big Thanks

Cross-browser Testing Platform and Open Source <3 Provided by [Sauce Labs][homepage]

[homepage]: https://saucelabs.com
","The Firebase JS SDK is built with a series of individual packages that are
allcontained in this repository. Each package in the `packages` directory,
constitute a piece of our implementation. The SDK is build via a combination of
all of these packages published under the [`firebase`scope] on NPM. Development
is coordinated via [yarnworkspaces] and [Lerna] (a monorepo management tool) See
[Contributing] for more information on contributing to the FirebaseJS SDK."
167,Folding Tab Bar and Tab Bar Controller,"# FoldingTabBar.iOS 
[![CocoaPods Compatible](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)

Folding Tab Bar and Tab Bar Controller

Inspired by [this project on Dribbble](https://dribbble.com/shots/2003376-Tab-Bar-Animation)

Also, read how it was done in our [blog](https://yalantis.com/blog/how_we_created_tab_bar_animation_for_ios/?utm_source=github)

![Preview](https://d13yacurqjgara.cloudfront.net/users/495792/screenshots/2003376/tab_bar_animation_fin-02.gif)


## Requirements
iOS 7.0

## Installation

#### [CocoaPods](http://cocoapods.org)

```ruby
pod 'FoldingTabBar', '~> 1.2.1'
```

#### [Carthage](https://github.com/Carthage/Carthage)

```
github ""Yalantis/FoldingTabBar.iOS"" ~> 1.2.1
```

#### Manual Installation

Alternatively you can directly add all the source files from FoldingTabBar folder to your project.

1. Download the [latest code version](https://github.com/Yalantis/FoldingTabBar.iOS/archive/master.zip) or add the repository as a git submodule to your git-tracked project. 
2. Open your project in Xcode, then drag and drop all the folder directories in FoldingTabBar folder onto your project (use the ""Product Navigator view""). Make sure to select Copy items when asked if you extracted the code archive outside of your project. 


## Introduction

#### YALFoldingTabBarController
`YALFoldingTabBarController` is a subclass of `UITabBarController` with custom animating `YALFoldingTabBar`. 

#### YALFoldingTabBar
YALFoldingTabBar is a subclass of a standard UIView. We wanted to make this component expand and contract in response to a user tapping. When the component is closed you can only see a central button (“+”). When tapping on it, our custom Tab Bar expands letting other tabBarItems appear, so that the user can switch the controllers.

Each separate tabBarItem can have two additional buttons on the left and right. These buttons can be used to let a user interact with a selected screen on the YALFoldingTabBarController without even having to leave it. 

#### YALTabBarItem
`YALTabBarItem` is a model to configure your tab bar items with images. 


## Usage

Option 1: The simplest way is to use `YALFoldingTabBarController` as it is. You can also subclass it if you indend to change the default behaviour.

Option 2: You can write your own implementation of `UITabBarController `and use `YALFoldingTabBar` or its subclass.

Here is an instruction of how to use `YALFoldingTabBarController` in the Storyboard.

1. Add native `UITabBarController` to the storyboard, establish relationships with its view controllers.
2.  Choose `YALFoldingTabBarController` as custom class for `UITabBarController`.
3.  Choose `YALCustomHeightTabBar` as custom class for `UITabBar` inside `YALFoldingTabBarController`
3.  In AppDelegate method take out an instance of `YALFoldingTabBarController` from the window.rootViewController and supply it with images for the left and right tabBarItems respectively. Also you can add your own image for the center button of `YALFoldingTabBar`.

## Objective-C

```objective-c
    YALFoldingTabBarController *tabBarController = (YALFoldingTabBarController *) self.window.rootViewController;

    //prepare leftBarItems
    YALTabBarItem *item1 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""nearby_icon""]
                                                      leftItemImage:nil
                                                     rightItemImage:nil];
    
    
    YALTabBarItem *item2 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""profile_icon""]
                                                      leftItemImage:[UIImage imageNamed:@""edit_icon""]
                                                     rightItemImage:nil];
    
    tabBarController.leftBarItems = @[item1, item2];

    //prepare rightBarItems
    YALTabBarItem *item3 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""chats_icon""]
                                                      leftItemImage:[UIImage imageNamed:@""search_icon""]
                                                     rightItemImage:[UIImage imageNamed:@""new_chat_icon""]];
    
    
    YALTabBarItem *item4 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""settings_icon""]
                                                      leftItemImage:nil
                                                     rightItemImage:nil];
    tabBarController.rightBarItems = @[item3, item4];

```
## Swift

```swift
    if let tabBarController = window?.rootViewController as? YALFoldingTabBarController {

        //leftBarItems

        let firstItem = YALTabBarItem(
            itemImage: UIImage(named: ""nearby_icon"")!,
            leftItemImage: nil,
            rightItemImage: nil
        )

        let secondItem = YALTabBarItem(
            itemImage: UIImage(named: ""profile_icon"")!,
            leftItemImage: UIImage(named: ""edit_icon"")!,
            rightItemImage: nil
        )

        tabBarController.leftBarItems = [firstItem, secondItem]

        //rightBarItems

        let thirdItem = YALTabBarItem(
            itemImage: UIImage(named: ""chats_icon"")!,
            leftItemImage: UIImage(named: ""search_icon"")!,
            rightItemImage: UIImage(named: ""new_chat_icon"")!
        )

        let forthItem = YALTabBarItem(
            itemImage: UIImage(named: ""settings_icon"")!,
            leftItemImage: nil,
            rightItemImage: nil
        )

        tabBarController.rightBarItems = [thirdItem, forthItem]
    }
```

 If you want to handle touches on extra tabBarItems import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: 
##Objective-C

```objective-c
- (void)tabBarDidSelectExtraLeftItem:(YALFoldingTabBar *)tabBar;
- (void)tabBarDidSelectExtraRightItem:(YALFoldingTabBar *)tabBar;
```
## Swift

```swift
func tabBarDidSelectExtraLeftItem(tabBar: YALFoldingTabBar!)
func tabBarDidSelectExtraRightItem(tabBar: YALFoldingTabBar!)
```

If you want to handle touches on tabBarItems by indexes import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: 
## Objective-C

```objective-c
- (void)tabBar:(YALFoldingTabBar *)tabBar didSelectItemAtIndex:(NSUInteger)index;
- (BOOL)tabBar:(YALFoldingTabBar *)tabBar shouldSelectItemAtIndex:(NSUInteger)index;
```
## Swift

```swift
func tabBar(tabBar: YALFoldingTabBar!, didSelectItemAtIndex index: UInt)
func tabBar(tabBar: YALFoldingTabBar!, shouldSelectItemAtIndex index: UInt) -> Bool
```

 If you want to observe contracting and expanding animation states in `YALFoldingTabBar` the following methods of `YALTabBarDelegate` protocol can be implemented:
## Objective-C

```objective-c
- (void)tabBarWillCollapse:(YALFoldingTabBar *)tabBar;
- (void)tabBarWillExpand:(YALFoldingTabBar *)tabBar;

- (void)tabBarDidCollapse:(YALFoldingTabBar *)tabBar;
- (void)tabBarDidExpand:(YALFoldingTabBar *)tabBar;
```
## Swift

```swift
func tabBarWillCollapse(tabBar: YALFoldingTabBar!)
func tabBarWillExpand(tabBar: YALFoldingTabBar!)

func tabBarDidCollapse(tabBar: YALFoldingTabBar!)
func tabBarDidExpand(tabBar: YALFoldingTabBar!)
```

## Important notes
Because we changed the height of the default `UITabBar` you should adjust your content to the bottom of  viewcontroller's superview, and ignore Bottom Layout Guide.  You should also uncheck 'Under bottom bars'  !['](http://i.stack.imgur.com/Owlcz.png)

You can see how we did it on the example project.

## Tips for customization
You can make the following configurations for custom tabBar:

1) Specify height 
## Objective-C

```objective-c
tabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight;
```  
## Swift

```swift
tabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight
```  

2) Specify insets and offsets
## Objective-C

```objective-c
    tabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets;
    tabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets;
    tabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset;
```
## Swift

```swift
tabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets
tabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets
tabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset
```

3) Specify colors
## Objective-C

```objective-c
    tabBarController.tabBarView.backgroundColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];
    tabBarController.tabBarView.tabBarColor = [UIColor colorWithRed:72.0/255.0 green:211.0/255.0 blue:178.0/255.0 alpha:1];
    tabBarController.tabBarView.dotColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];
``` 
## Swift

```swift
tabBarController.tabBarView.backgroundColor = UIColor(
                                                  red: 94.0/255.0,
                                                  green: 91.0/255.0,
                                                  blue: 149.0/255.0,
                                                  alpha: 1
                                              )

tabBarController.tabBarView.tabBarColor = UIColor(
                                              red: 72.0/255.0,
                                              green: 211.0/255.0,
                                              blue: 178.0/255.0,
                                              alpha: 1
                                          )

tabBarController.tabBarView.dotColor = UIColor(
                                           red: 94.0/255.0,
                                           green: 91.0/255.0,
                                           blue: 149.0/255.0,
                                           alpha: 1
                                       )
```
4) Specify height for additional left and right buttons
## Objective-C

```objective-c
    tabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight;
```  
## Swift

```swift
tabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight
```  

## Let us know!

We’d be really happy if you sent us links to your projects where you use our component. Just send an email to github@yalantis.com And do let us know if you have any questions or suggestion regarding the animation. 

P.S. We’re going to publish more awesomeness wrapped in code and a tutorial on how to make UI for iOS (Android) better than better. Stay tuned!

## License

    The MIT License (MIT)

    Copyright © 2017 Yalantis

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the ""Software""), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    
","YALFoldingTabBar is a subclass of a standard UIView. We wanted to make this
component expand and contract in response to a user tapping. When the component
is closed you can only see a central button (“+”). When tapping on it, our
custom Tab Bar expands letting other tabBarItems appear, so that the user can
switch the controllers. Each separate tabBar item can have two additional
buttons on the left and right. These buttons can be used to let a user interact
with a selected screen without even having to leave it."
1701,Folding Tab Bar and Tab Bar Controller,"# FoldingTabBar.iOS 
[![CocoaPods Compatible](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)](https://img.shields.io/cocoapods/v/FoldingTabBar.svg)
[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)

Folding Tab Bar and Tab Bar Controller

Inspired by [this project on Dribbble](https://dribbble.com/shots/2003376-Tab-Bar-Animation)

Also, read how it was done in our [blog](https://yalantis.com/blog/how_we_created_tab_bar_animation_for_ios/?utm_source=github)

![Preview](https://d13yacurqjgara.cloudfront.net/users/495792/screenshots/2003376/tab_bar_animation_fin-02.gif)


## Requirements
iOS 7.0

## Installation

#### [CocoaPods](http://cocoapods.org)

```ruby
pod 'FoldingTabBar', '~> 1.2.1'
```

#### [Carthage](https://github.com/Carthage/Carthage)

```
github ""Yalantis/FoldingTabBar.iOS"" ~> 1.2.1
```

#### Manual Installation

Alternatively you can directly add all the source files from FoldingTabBar folder to your project.

1. Download the [latest code version](https://github.com/Yalantis/FoldingTabBar.iOS/archive/master.zip) or add the repository as a git submodule to your git-tracked project. 
2. Open your project in Xcode, then drag and drop all the folder directories in FoldingTabBar folder onto your project (use the ""Product Navigator view""). Make sure to select Copy items when asked if you extracted the code archive outside of your project. 


## Introduction

#### YALFoldingTabBarController
`YALFoldingTabBarController` is a subclass of `UITabBarController` with custom animating `YALFoldingTabBar`. 

#### YALFoldingTabBar
YALFoldingTabBar is a subclass of a standard UIView. We wanted to make this component expand and contract in response to a user tapping. When the component is closed you can only see a central button (“+”). When tapping on it, our custom Tab Bar expands letting other tabBarItems appear, so that the user can switch the controllers.

Each separate tabBarItem can have two additional buttons on the left and right. These buttons can be used to let a user interact with a selected screen on the YALFoldingTabBarController without even having to leave it. 

#### YALTabBarItem
`YALTabBarItem` is a model to configure your tab bar items with images. 


## Usage

Option 1: The simplest way is to use `YALFoldingTabBarController` as it is. You can also subclass it if you indend to change the default behaviour.

Option 2: You can write your own implementation of `UITabBarController `and use `YALFoldingTabBar` or its subclass.

Here is an instruction of how to use `YALFoldingTabBarController` in the Storyboard.

1. Add native `UITabBarController` to the storyboard, establish relationships with its view controllers.
2.  Choose `YALFoldingTabBarController` as custom class for `UITabBarController`.
3.  Choose `YALCustomHeightTabBar` as custom class for `UITabBar` inside `YALFoldingTabBarController`
3.  In AppDelegate method take out an instance of `YALFoldingTabBarController` from the window.rootViewController and supply it with images for the left and right tabBarItems respectively. Also you can add your own image for the center button of `YALFoldingTabBar`.

## Objective-C

```objective-c
    YALFoldingTabBarController *tabBarController = (YALFoldingTabBarController *) self.window.rootViewController;

    //prepare leftBarItems
    YALTabBarItem *item1 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""nearby_icon""]
                                                      leftItemImage:nil
                                                     rightItemImage:nil];
    
    
    YALTabBarItem *item2 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""profile_icon""]
                                                      leftItemImage:[UIImage imageNamed:@""edit_icon""]
                                                     rightItemImage:nil];
    
    tabBarController.leftBarItems = @[item1, item2];

    //prepare rightBarItems
    YALTabBarItem *item3 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""chats_icon""]
                                                      leftItemImage:[UIImage imageNamed:@""search_icon""]
                                                     rightItemImage:[UIImage imageNamed:@""new_chat_icon""]];
    
    
    YALTabBarItem *item4 = [[YALTabBarItem alloc] initWithItemImage:[UIImage imageNamed:@""settings_icon""]
                                                      leftItemImage:nil
                                                     rightItemImage:nil];
    tabBarController.rightBarItems = @[item3, item4];

```
## Swift

```swift
    if let tabBarController = window?.rootViewController as? YALFoldingTabBarController {

        //leftBarItems

        let firstItem = YALTabBarItem(
            itemImage: UIImage(named: ""nearby_icon"")!,
            leftItemImage: nil,
            rightItemImage: nil
        )

        let secondItem = YALTabBarItem(
            itemImage: UIImage(named: ""profile_icon"")!,
            leftItemImage: UIImage(named: ""edit_icon"")!,
            rightItemImage: nil
        )

        tabBarController.leftBarItems = [firstItem, secondItem]

        //rightBarItems

        let thirdItem = YALTabBarItem(
            itemImage: UIImage(named: ""chats_icon"")!,
            leftItemImage: UIImage(named: ""search_icon"")!,
            rightItemImage: UIImage(named: ""new_chat_icon"")!
        )

        let forthItem = YALTabBarItem(
            itemImage: UIImage(named: ""settings_icon"")!,
            leftItemImage: nil,
            rightItemImage: nil
        )

        tabBarController.rightBarItems = [thirdItem, forthItem]
    }
```

 If you want to handle touches on extra tabBarItems import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: 
##Objective-C

```objective-c
- (void)tabBarDidSelectExtraLeftItem:(YALFoldingTabBar *)tabBar;
- (void)tabBarDidSelectExtraRightItem:(YALFoldingTabBar *)tabBar;
```
## Swift

```swift
func tabBarDidSelectExtraLeftItem(tabBar: YALFoldingTabBar!)
func tabBarDidSelectExtraRightItem(tabBar: YALFoldingTabBar!)
```

If you want to handle touches on tabBarItems by indexes import `YALTabBarDelegate` protocol to the subclass of the proper `UIVIewController` and implement these methods: 
## Objective-C

```objective-c
- (void)tabBar:(YALFoldingTabBar *)tabBar didSelectItemAtIndex:(NSUInteger)index;
- (BOOL)tabBar:(YALFoldingTabBar *)tabBar shouldSelectItemAtIndex:(NSUInteger)index;
```
## Swift

```swift
func tabBar(tabBar: YALFoldingTabBar!, didSelectItemAtIndex index: UInt)
func tabBar(tabBar: YALFoldingTabBar!, shouldSelectItemAtIndex index: UInt) -> Bool
```

 If you want to observe contracting and expanding animation states in `YALFoldingTabBar` the following methods of `YALTabBarDelegate` protocol can be implemented:
## Objective-C

```objective-c
- (void)tabBarWillCollapse:(YALFoldingTabBar *)tabBar;
- (void)tabBarWillExpand:(YALFoldingTabBar *)tabBar;

- (void)tabBarDidCollapse:(YALFoldingTabBar *)tabBar;
- (void)tabBarDidExpand:(YALFoldingTabBar *)tabBar;
```
## Swift

```swift
func tabBarWillCollapse(tabBar: YALFoldingTabBar!)
func tabBarWillExpand(tabBar: YALFoldingTabBar!)

func tabBarDidCollapse(tabBar: YALFoldingTabBar!)
func tabBarDidExpand(tabBar: YALFoldingTabBar!)
```

## Important notes
Because we changed the height of the default `UITabBar` you should adjust your content to the bottom of  viewcontroller's superview, and ignore Bottom Layout Guide.  You should also uncheck 'Under bottom bars'  !['](http://i.stack.imgur.com/Owlcz.png)

You can see how we did it on the example project.

## Tips for customization
You can make the following configurations for custom tabBar:

1) Specify height 
## Objective-C

```objective-c
tabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight;
```  
## Swift

```swift
tabBarController.tabBarViewHeight = YALTabBarViewDefaultHeight
```  

2) Specify insets and offsets
## Objective-C

```objective-c
    tabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets;
    tabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets;
    tabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset;
```
## Swift

```swift
tabBarController.tabBarView.tabBarViewEdgeInsets = YALTabBarViewHDefaultEdgeInsets
tabBarController.tabBarView.tabBarItemsEdgeInsets = YALTabBarViewItemsDefaultEdgeInsets
tabBarController.tabBarView.offsetForExtraTabBarItems = YALForExtraTabBarItemsDefaultOffset
```

3) Specify colors
## Objective-C

```objective-c
    tabBarController.tabBarView.backgroundColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];
    tabBarController.tabBarView.tabBarColor = [UIColor colorWithRed:72.0/255.0 green:211.0/255.0 blue:178.0/255.0 alpha:1];
    tabBarController.tabBarView.dotColor = [UIColor colorWithRed:94.0/255.0 green:91.0/255.0 blue:149.0/255.0 alpha:1];
``` 
## Swift

```swift
tabBarController.tabBarView.backgroundColor = UIColor(
                                                  red: 94.0/255.0,
                                                  green: 91.0/255.0,
                                                  blue: 149.0/255.0,
                                                  alpha: 1
                                              )

tabBarController.tabBarView.tabBarColor = UIColor(
                                              red: 72.0/255.0,
                                              green: 211.0/255.0,
                                              blue: 178.0/255.0,
                                              alpha: 1
                                          )

tabBarController.tabBarView.dotColor = UIColor(
                                           red: 94.0/255.0,
                                           green: 91.0/255.0,
                                           blue: 149.0/255.0,
                                           alpha: 1
                                       )
```
4) Specify height for additional left and right buttons
## Objective-C

```objective-c
    tabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight;
```  
## Swift

```swift
tabBarController.tabBarView.extraTabBarItemHeight = YALExtraTabBarItemsDefaultHeight
```  

## Let us know!

We’d be really happy if you sent us links to your projects where you use our component. Just send an email to github@yalantis.com And do let us know if you have any questions or suggestion regarding the animation. 

P.S. We’re going to publish more awesomeness wrapped in code and a tutorial on how to make UI for iOS (Android) better than better. Stay tuned!

## License

    The MIT License (MIT)

    Copyright © 2017 Yalantis

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the ""Software""), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    
","YALFoldingTabBar is a subclass of a standard UIView. We wanted to make this
component expand and contract in response to a user tapping. When the component
is closed you can only see a central button (“+”). When tapping on it, our
custom Tab Bar expands letting other tabBarItems appear, so that the user can
switch the controllers. Each separate tabBar item can have two additional
buttons on the left and right. These buttons can be used to let a user interact
with a selected screen without even having to leave it."
787,"An open source, free, high performance, stable and secure Java Application Business Platform of Project Management and Document","# Free, open source Project Management software
[![License](http://img.shields.io/badge/License-AGPLv3-orange.svg)](https://www.gnu.org/licenses/agpl-3.0.en.html) [![Project Stats](https://www.openhub.net/p/mycollab/widgets/project_thin_badge.gif)](https://www.openhub.net/p/mycollab) [![Build](https://travis-ci.org/MyCollab/mycollab.svg)](https://travis-ci.org/MyCollab/mycollab)
[![Version](https://img.shields.io/badge/Version-7.0.3-brightgreen.svg)](https://docs.mycollab.com/)
[![Github](https://img.shields.io/github/downloads/MyCollab/mycollab/total.svg)](https://github.com/MyCollab/mycollab/releases)


## Introduction

MyCollab is the free and open source project management software. Intuitive UI, rich features, high performance and stable are the advantages compare with various popular tools in the market such as Redmine, Bugzilla, Mantis etc. This open source is included into a trusted commercial product that is deployed on hundreds of companies' servers.

<table>
  <tr>
    <td align=""center"">
      <a href=""https://c2.staticflickr.com/8/7836/33297801958_8c403afca8_o.png"" target=""_blank"" title=""Project Dashboard"">
        <img src=""https://c2.staticflickr.com/8/7836/33297801958_c3958e94ba_n.jpg"" alt=""Project Dashboard"">
      </a>
      <br />
      <em>Project Dashboard</em>
    </td>
    <td  align =""center"">
      <a href=""https://c2.staticflickr.com/8/7918/47173080821_3352d05e2b_o.png"" target=""_blank"" title=""Ticket Dashboard"">
        <img src=""https://c2.staticflickr.com/8/7918/47173080821_f6c092822e_n.jpg"" alt=""Ticket Dashboard"">
      </a>
      <br />
      <em>Ticket Dashboard</em>
    </td>
    <td align=""center"">
    <a href=""https://c2.staticflickr.com/8/7868/46259674665_52e5d9ec03_o.png"" target=""_blank"" title=""Kanban Board"">
      <img src=""https://c2.staticflickr.com/8/7868/46259674665_c80a0c15a7_n.jpg"" alt=""Kanban Board"">
    </a>
      <br />
      <em>Kanban Board</em>
    </td>
  </tr>
  <tr>
    <td align=""center"">
    <a href=""https://c2.staticflickr.com/8/7874/46259716315_bd4269858d_o.png"" target=""_blank"" title=""Task View"">
        <img src=""https://c2.staticflickr.com/8/7874/46259716315_44047af85e_n.jpg"" alt=""Task View"">
      </a>
      <br />
      <em>Task View</em>
    </td>
    <td align=""center"">
      <a href=""https://c2.staticflickr.com/8/7896/47173858441_f2395a1b7d_o.png"" target=""_blank"" title=""Members"">
        <img src=""https://c2.staticflickr.com/8/7896/47173858441_3b4c77990f_n.jpg"" alt=""Members"">
      </a>
      <br />
      <em>Members</em>
    </td>
    <td align=""center"">
      <a href=""https://c2.staticflickr.com/8/7862/40209055153_0a16241b1b_o.png"" target=""_blank"" title=""Settings"">
        <img src=""https://c2.staticflickr.com/8/7862/40209055153_54a427e593_n.jpg"" alt=""Settings"">
      </a>
      <br />
      <em>Settings</em>
    </td>
  </tr>
</table>

New features, enhancements, and updates appear on a regular basis.

Pull requests and bug reports are always welcome!

Visit our website https://www.mycollab.com/ to get a free trial of the premium service.

## Features
MyCollab provides the rich set features of Project Management, Customer Management module and online collaboration methods.
  * Project Management
  * Activity stream and audit logging
  * Kanban board
  * Roadmap view
  * Issues Management
  * Tasks and dependencies management
  * Milestones
  * Time tracking (for premium users only)
  * Invoice management (for premium users only)
  * Risk Management (For premium users only)
  * People and Permission management
  * Reporting

We use MyCollab in our daily jobs to manage our customers information, projects. It is deployed in the production environment of our premium users, and we supported several organizations to deploy this community version on their servers as well. We take care of our open source edition similar than we do for our premium product, in fact both of them use the same code base structure. So feel free to use it in your business jobs!


## System Requirements
MyCollab requires a running Java Runtime Environment (8 or greater), Java command should be presented in PATH environment and MySQL (InnoDB support recommended).

* Java Runtime Environment 8+: MyCollab could run when any JVM compatible platform such as Oracle JRE or OpenJDK.
* MySQL database, version 5.6+: the higher version is recommended
* 1 GB RAM minimum, 2 GB RAM recommended

## Installation

1. Download MyCollab binary - https://www.mycollab.com/self-hosted/
2. Follow installation guideline at https://docs.mycollab.com/getting-started/installation/

If you need to understand the more MyCollab advanced configuration settings, please visit the link https://docs.mycollab.com/getting-started/configuration/. You will finish reading and understanding in a matter of minutes.

If you want to customize MyCollab, following links are useful to you:
* Setup MyCollab projects with IntelliJ https://docs.mycollab.com/development/setup-mycollab-projects-with-intellij-ide/
* How to customize MyCollab https://docs.mycollab.com/development/customize-mycollab/

## Support
Contact the MyCollab team at:
* Our growing FAQ https://docs.mycollab.com/faq/
* Our help page [http://support.mycollab.com/](https://mycollab.userecho.com/en/)
* Our web form [https://www.mycollab.com/contact/](https://www.mycollab.com/contact/)

## License & Author

* MyCollab community is licensed with Affero GPL v3. For license terms, see https://www.gnu.org/licenses/agpl-3.0.en.html

* You can try MyCollab on-demand edition on site https://www.mycollab.com
","MyCollab is the free and open source project management software. Intuitive UI,
rich features, high performance and stable are the advantages compare with
various popular tools in the market such as Redmine, Bugzilla, Mantis etc. This
open source is included into a trusted commercial product that is deployed on
hundreds of companies' servers. For more information on MyCollab, visit the
official website. For the full version of this article, visit:
http://c2.staticflickr.com/2013/01/28/mycollab-demo-demos.html."
3003,"free4.chat is a real-time audio chat service.  It is designed by the local first and privacy first principle, and is very easy to use.","# free4chat

[free4.chat](https://free4.chat/) is an instant audio conferencing service.

It is designed by the [local first](https://www.inkandswitch.com/local-first/) and `privacy first` principle, and is very easy to use.

> :warning: **This project is just using for technical test purpose, use at all your risk!** 
>
> :warning: **There is freedom of speech, but I cannot guarantee freedom after speech.** (- Idi Amin)

## Features

- **Common**
  - [ ] Use [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) to replace http protocol of JSON-RPC
- **Room**
  - [ ] Text chat, can sent text or emoji
  - [ ] Can send arbitrary data by WebRTC datachannel
  - [ ] Can share screen if the device support
  - [ ] Room permission setting, like public/private type setting
    - private room can't been seen on room discovery, and it needs password to enter. The password is [End-to-End Encryption](https://blog.excalidraw.com/end-to-end-encryption/), server only need check the answer which given by the client like the `PoW in blockchain`<sup>*</sup>
    - [ ] Public rooms discovery, like hot room list or filter rooms by type/tag
- **User**
  - [ ] Robot user, like game robot who can play or facilitate game
    - robot use [Web Speech API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API) to play with user in room
    - robot can play some voice games like language learning, technical interview, etc.
      - [Gartic Phone - The Telephone Game](https://garticphone.com/lobby)
      - [ESL Game - Not only practicing English speaking](https://esl.bmpi.dev/)
      - [Gartic.io - Draw, Guess, WIN](https://gartic.io/)
  - [ ] User real-time collaboration, like whiteboard, you draw I guess, etc.
  
## Architecture
- **Tech Stack**
  - [ ] Use Elixir/Phoenix to rewrite the backend code 🚩
  - [ ] Use Recat/Next.js to rewrite the frontend code
- **Infra**
  - [ ] Use docker to deploy to PaaS platform like [Railway](https://railway.app/) or [Fly](https://fly.io/)
  - [ ] Backend service cluster, auto scaling, load balancing, etc.
  - [ ] Security enhancement, like coturn TLS setup, end-to-end encryption, etc.
  - [ ] Privacy enhancement.
  - [ ] IPV6 support.

__NOTE__: 
- `*` means it can be considered a VIP feature.

## Contribution

If you are interested in `webRTC`, `peer-to-peer(P2P)`, `real-time collaboration(CRDT)`, `distributed system` or `robot design`, you can join this project and contact with me by [twitter](https://twitter.com/madawei2699).

## Thanks

- free4.chat Elixir version is build on the top of [Membrane Framework](https://github.com/membraneframework), thanks for their heart of open source.
- [free4.chat Golang version](https://github.com/madawei2699/free4chat/tree/golang) is build on the top of [Kraken](https://github.com/bmpi-dev/kraken), [Mornin](https://github.com/lyricat/mornin.fm), [coturn](https://github.com/coturn/coturn) and [Pion](https://github.com/pion), thanks for their heart of open source.
- These websites also inspired me:
  - [Random voice and text chat rooms that you’ll love. | Speakrandom](https://www.speakrandom.com/)
  - [Practice Speaking English Online Free - Language Practice Community](https://www.free4talk.com/)
  - [Agora Real-Time Voice and Video Engagement](https://www.agora.io/en/)
","Free4chat is an instant audio conferencing service. It is designed by the [local
first](https://www.inkandswitch.com/local-first/) and `privacy first` principle.
It uses WebSocket to replace http protocol of JSON-RPC. It can send arbitrary
data by WebRTC datachannel."
1854,Package manager and build abstraction tool for FPGA/ASIC development,"# FuseSoC

[![CI status](https://github.com/olofk/fusesoc/workflows/CI/badge.svg)](https://github.com/olofk/fusesoc/actions?query=workflow%3ACI)
[![image](https://img.shields.io/pypi/dm/fusesoc.svg?label=PyPI%20downloads)](https://pypi.org/project/fusesoc/)
[![LibreCores](https://www.librecores.org/olofk/FuseSoC/badge.svg?style=flat)](https://www.librecores.org/olofk/FuseSoC)

## Introduction

FuseSoC is an award-winning package manager and a set of build tools for
HDL (Hardware Description Language) code.

Its main purpose is to increase reuse of IP (Intellectual Property)
cores and be an aid for creating, building and simulating SoC solutions.

FuseSoC makes it easier to

-   reuse existing cores
-   create compile-time or run-time configurations
-   run regression tests against multiple simulators
-   port designs to new targets
-   let other projects use your code
-   set up continuous integration

To learn more about FuseSoC head over to the
[User Guide](https://fusesoc.readthedocs.io/en/stable/user).

## Getting started

### Installing the latest release

FuseSoC works on Linux, Windows, and macOS. It is written in Python and can be
installed like any other Python package through ""pip"". Please refer to the
full list of system requirements and installation instructions in the
[Installation section in the User Guide](https://fusesoc.readthedocs.io/en/stable/user/installation.html).

### Quick start

To check if FuseSoC is working, and to get an initial feeling for how FuseSoC
works, you can try to simulate a simple hardware design from our core libray.

First, create and enter an empty workspace

    mkdir workspace
    cd workspace

Install the FuseSoc base library into the workspace

    fusesoc library add fusesoc-cores https://github.com/fusesoc/fusesoc-cores

Get a list of cores found in the workspace

    fusesoc core list

If you have any of the supported simulators installed, you can try to
run a simulation on one of the cores as well. For example,
`fusesoc run --target=sim i2c` will run a regression test on the core
i2c with Icarus Verilog. If you want to try another simulator instead,
add e.g. `--tool=modelsim` or `--tool=xcelium` between `run` and `i2c`.

`fusesoc --help` will give you more information on commands and switches.

Did it work? Great! FuseSoC can be used to create FPGA images, perform
linting, manage your IP libraries or do formal verification as well.
Check out the [online documentation](https://fusesoc.readthedocs.io/en/stable/)
documentation to learn more about creating your own core files and using
existing ones. If it didn't work, please get in touch (see below).

## Next steps

A good way to get your first hands-on experience with FuseSoC is to
contribute to the [LED to Believe](https://github.com/fusesoc/blinky)
project. This project aims to used FuseSoC to blink a LED on every
available FPGA development board in existence. There are already around
40 different boards supported. If your board is already supported,
great, then you can run your first FuseSoC-based design. If it's not
supported, great, you now have the chance to add it to the list of
supported boards. Either way, head over to [LED to
Believe](https://github.com/fusesoc/blinky) to learn more and see how to
go from a blinking LED to running a RISC-V core on an FPGA.

## Need help?

FuseSoC comes with extensive
[online documentation](https://fusesoc.readthedocs.io/en/stable/index.html).

For quick communication with the active developers, feel free to join us at the
[FuseSoC chat](https://gitter.im/librecores/fusesoc).

If you have found an issue, or want to know more about currently known problems,
check out the
[issue tracker on GitHub](https://github.com/olofk/fusesoc/issues).

If you are looking for professional paid support, we are happy to
provide feature additions, bug fixes, user training, setting up core
libraries, migrating existing designs to FuseSoC and other things.
Please contact <olof.kindgren@gmail.com> for more information.

## Contributing to FuseSoC

FuseSoC is developed by an active and friendly community, and you're welcome to
join! You can read more about setting up a development environment in our
[Developer's Guide](https://fusesoc.readthedocs.io/en/latest/dev/index.html).

You can file bug reports and propose changes in the [olofk/fusesoc repository on GitHub](https://github.com/olofk/fusesoc).

## Further reading

* A Scalable Approach to IP Management with FuseSoC [paper](https://osda.gitlab.io/19/kindgren.pdf) and [slides](https://osda.gitlab.io/19/kindgren-slides.pdf) from OSDA 2019
* Antmicro blog post on [how to use FuseSoC as a linter](https://antmicro.com/blog/2020/04/systemverilog-linter-and-formatter-in-fusesoc/)
* [FuseSoC-related posts on the Tales from Beyond the Register Map blog](https://blog.award-winning.me/search/label/FuseSoC)
* [Presentation from RISC-V Week 2022](https://www.award-winning.me/fusesoc-rvweek22)
* [Presentation from Latch-Up Portland 2019](https://www.youtube.com/watch?v=7eWRAOK9mns)
* [Presentation from WOSH 2019](https://www.youtube.com/watch?v=HOFYplIBSWM)
* [Presentation from ORConf 2017](https://www.youtube.com/watch?v=iPpT9k_H67k)
* [Presentation from ORConf 2016](https://www.youtube.com/watch?v=pKlJWe_HKPM)

## License

FuseSoC is licensed under the permissive 2-clause BSD license, freely allowing
use, modification, and distribution of FuseSoC for all kinds of projects.
Please refer to the [LICENSE](LICENSE) file for details.
","FuseSoC is an award-winning package manager and a set of build tools for
Hardware Description Language code. Its main purpose is to increase reuse of IP
(Intellectual Property)cores and be an aid for creating, building and simulating
SoC solutions. It is written in Python and can beinstalled like any other Python
package through ""pip"" It can be used to create FPGA images, manage your IP
libraries or do formal verification as well. It works on Linux, Windows, and
macOS."
124,Gephi - The Open Graph Viz Platform,"# Gephi - The Open Graph Viz Platform

[![build](https://github.com/gephi/gephi/actions/workflows/build.yml/badge.svg)](https://github.com/gephi/gephi/actions/workflows/build.yml)
[![Downloads](https://img.shields.io/github/downloads/gephi/gephi/v0.10.1/total.svg)](https://github.com/gephi/gephi/releases/tag/v0.10.1)
[![Downloads](https://img.shields.io/github/downloads/gephi/gephi/total.svg)](https://github.com/gephi/gephi/releases/)
[![Translation progress](https://hosted.weblate.org/widgets/gephi/-/svg-badge.svg)](https://hosted.weblate.org/engage/gephi/?utm_source=widget)

[Gephi](http://gephi.org) is an award-winning open-source platform for visualizing and manipulating large graphs. It runs on Windows, Mac OS X and Linux. Localization is available in English, French, Spanish, Japanese, Russian, Brazilian Portuguese, Chinese, Czech, German and Romanian.

- **Fast** Powered by a built-in OpenGL engine, Gephi is able to push the envelope with very large networks. Visualize networks up to a million elements. All actions (e.g. layout, filter, drag) run in real-time.

- **Simple** Easy to install and [get started](https://gephi.github.io/users/quick-start). An UI that is centered around the visualization. Like Photoshop™ for graphs.

- **Modular** Extend Gephi with [plug-ins](https://gephi.org/plugins). The architecture is built on top of [Apache Netbeans Platform](https://netbeans.apache.org/tutorials/nbm-quick-start.html) and can be extended or reused easily through well-written APIs.

[Download Gephi](https://gephi.github.io/users/download) for Windows, Mac OS X and Linux and consult the [release notes](https://github.com/gephi/gephi/releases). Example datasets can be found on our [wiki](https://github.com/gephi/gephi/wiki/Datasets).

![Gephi](https://gephi.github.io/images/screenshots/select-tool-mini.png)

## Install and use Gephi

Download and [Install](https://gephi.github.io/users/install/) Gephi on your computer. 

Get started with the [Quick Start](https://gephi.github.io/users/quick-start/) and follow the [Tutorials](https://gephi.github.io/users/). Load a sample [dataset](https://github.com/gephi/gephi/wiki/Datasets) and start to play with the data.

If you run into any trouble or have questions consult our [discussions](https://github.com/gephi/gephi/discussions).

## Latest releases

### Stable

- Latest stable release on [gephi.org](https://gephi.org/users/download/).

### Development builds

Development builds are [generated regularly](https://github.com/gephi/gephi/actions/workflows/release.yml). Current version is 0.10.2-SNAPSHOT

- [gephi-0.10.2-SNAPSHOT-windows-x64.exe](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=windows-x64&p=exe) (Windows)

- [gephi-0.10.2-SNAPSHOT-windows-x32.exe](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=windows-x32&p=exe) (Windows x32)

- [gephi-0.10.2-SNAPSHOT-macos-x64.dmg](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=macos-x64&p=dmg) (Mac OS X)

- [gephi-0.10.2-SNAPSHOT-macos-aarch64.dmg](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=macos-aarch64&p=dmg) (Mac OS X Silicon)

- [gephi-0.10.2-SNAPSHOT-linux-x64.tar.gz](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=linux-x64&p=tar.gz) (Linux)

## Developer Introduction

Gephi is developed in Java and uses OpenGL for its visualization engine. Built on the top of Netbeans Platform, it follows a loosely-coupled, modular architecture philosophy. Gephi is split into modules, which depend on other modules through well-written APIs. Plugins can reuse existing APIs, create new services and even replace a default implementation with a new one.

Consult the [**Javadoc**](http://gephi.github.io/gephi/0.9.2/apidocs/index.html) for an overview of the APIs.

### Requirements

- Java JDK 11 (or later)

- [Apache Maven](http://maven.apache.org/) version 3.6.3 or later

### Checkout and Build the sources

- Fork the repository and clone

        git clone git@github.com:username/gephi.git

- Run the following command or [open the project in an IDE](https://github.com/gephi/gephi/wiki/How-to-build-Gephi)

        mvn -T 4 clean install

- Once built, one can test running Gephi

		cd modules/application
		mvn nbm:cluster-app nbm:run-platform

Note that while Gephi can be built using JDK 11 or later, it currently requires JDK 11 to run.

### Create Plug-ins

Gephi is extensible and lets developers create plug-ins to add new features, or to modify existing features. For example, you can create a new layout algorithm, add a metric, create a filter or a tool, support a new file format or database, or modify the visualization.

- [**Plugins Portal**](https://github.com/gephi/gephi/wiki/Plugins)

- [Plugins Quick Start (5 minutes)](https://github.com/gephi/gephi/wiki/Plugin-Quick-Start)

- Browse the [plugins](https://gephi.org/plugins) created by the community

- We've created a [**Plugins Bootcamp**](https://github.com/gephi/gephi-plugins-bootcamp) to learn by examples.

## Gephi Toolkit

The Gephi Toolkit project packages essential Gephi modules (Graph, Layout, Filters, IO…) in a standard Java library which any Java project can use for getting things done. It can be used on a server or command-line tool to do the same things Gephi does but automatically.

- [Download](https://gephi.org/toolkit/)

- [GitHub Project](https://github.com/gephi/gephi-toolkit)

- [Toolkit Portal](https://github.com/gephi/gephi/wiki/Toolkit)

## Localization

We use [Weblate](https://hosted.weblate.org/projects/gephi/) for localization. Follow the guidelines on the [wiki](https://github.com/gephi/gephi/wiki/Localization) for more details how to contribute.

## Icons

Gephi uses icons from various sources. The icons are licensed under the [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/) license.

All icons can be found in the `DesktopIcons` module, organised by module name.

## License

Gephi main source code is distributed under the dual license [CDDL 1.0](http://www.opensource.org/licenses/CDDL-1.0) and [GNU General Public License v3](http://www.gnu.org/licenses/gpl.html). Read the [Legal FAQs](http://gephi.github.io/legal/faq/)  to learn more.
	
Copyright 2011 Gephi Consortium. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 3 only (""GPL"") or the Common
Development and Distribution License (""CDDL"") (collectively, the
""License""). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://gephi.github.io/developers/license/
or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License files at
/cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
""Portions Copyrighted [year] [name of copyright owner]""

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 3, indicate your decision by adding
""[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 3] license."" If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 3 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 3 code and therefore, elected the GPL
Version 3 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
","Gephi is an award-winning open-source platform for visualizing and manipulating
large graphs. It runs on Windows, Mac OS X and Linux. Localization is available
in English, French, Spanish, Japanese, Russian, Brazilian Portuguese, Chinese,
Czech, German and Romanian."
1134,"A GitOps recipe for Progressive Delivery with Flux v2, Flagger and Istio","# gitops-istio

[![e2e](https://github.com/stefanprodan/gitops-istio/workflows/e2e/badge.svg)](https://github.com/stefanprodan/gitops-istio/actions)
[![e2analyzee](https://github.com/stefanprodan/gitops-istio/workflows/analyze/badge.svg)](https://github.com/stefanprodan/gitops-istio/actions)
[![license](https://img.shields.io/github/license/stefanprodan/gitops-istio.svg)](https://github.com/stefanprodan/gitops-istio/blob/main/LICENSE)

This is a guide where you will get hands-on experience with GitOps and
Progressive Delivery using Kubernetes and Istio.

## Introduction

### What is GitOps?

GitOps is a way to do Continuous Delivery, it works by using Git as a source of truth
for declarative infrastructure and workloads.
For Kubernetes this means using `git push` instead of `kubectl apply/delete` or `helm install/upgrade`.

In this workshop you'll be using GitHub to host the config repository and [Flux](https://fluxcd.io)
as the GitOps delivery solution.

### What is Progressive Delivery?

Progressive delivery is an umbrella term for advanced deployment patterns like canaries, feature flags and A/B testing.
Progressive delivery techniques are used to reduce the risk of introducing a new software version in production
by giving app developers and SRE teams a fine-grained control over the blast radius.

In this workshop you'll be using [Flagger](https://flagger.app), Istio and Prometheus to automate
Canary Releases and A/B Testing for your applications.

![Progressive Delivery GitOps Pipeline](/docs/images/flux-flagger-gitops.png)

## Prerequisites

You'll need a Kubernetes cluster **v1.20** or newer with `LoadBalancer` support. 

For testing purposes you can use Minikube with 2 CPUs and 4GB of memory:
```bash
minikube start --cpus='2' --memory='4g'
```
If using Minikube, run the following in a separate terminal window/tab for the duration of this workshop:
```bash
minikube tunnel
```
This assigns an External-IP to the istio-gateway service and allows the helm install to complete successfully.

Install `jq`, `yq` and the `flux` CLI with Homebrew:

```bash
brew install jq yq fluxcd/tap/flux
```

Verify that your cluster satisfies the prerequisites with:

```bash
flux check --pre
```

Fork this repository and clone it:

```bash
git clone https://github.com/<YOUR-USERNAME>/gitops-istio
cd gitops-istio
```

## Cluster bootstrap

With `flux bootstrap` command you can install Flux on a Kubernetes cluster
and configure it to manage itself from a Git repository.
If the Flux components are present on the cluster,
the bootstrap command will perform an upgrade if needed.

Bootstrap Flux by specifying your GitHub repository fork URL:

```bash
flux bootstrap git \
  --author-email=<YOUR-EMAIL> \
  --url=ssh://git@github.com/<YOUR-USERNAME>/gitops-istio \
  --branch=main \
  --path=clusters/my-cluster
```

The above command requires ssh-agent, if you're using Windows see
[flux bootstrap github](https://fluxcd.io/docs/guides/installation/#github-and-github-enterprise) documentation.

At bootstrap, Flux generates an SSH key and prints the public key.
In order to sync your cluster state with git you need to copy the public key and create a deploy key with write 
access on your GitHub repository. On GitHub go to _Settings > Deploy keys_ click on _Add deploy key_, 
check _Allow write access_, paste the Flux public key and click _Add key_.

When Flux has access to your repository it will do the following:

* installs Istio using the Istio `base`, `istiod` and `gateway` Helm charts
* waits for Istio control plane to be ready
* installs Flagger, Prometheus and Grafana
* creates the Istio public gateway
* creates the `prod` namespace
* creates the load tester deployment
* creates the frontend deployment and canary
* creates the backend deployment and canary

When bootstrapping a cluster with Istio, it is important to control the installation order.
For the applications pods to be injected with Istio sidecar,
the Istio control plane must be up and running before the apps.

With Flux v2 you can specify the execution order by defining dependencies between objects.
For example, in [clusters/my-cluster/apps.yaml](https://github.com/stefanprodan/gitops-istio/blob/main/clusters/my-cluster/apps.yaml)
we tell Flux that the `apps` reconciliation depends on the `istio-system` one:

```yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
kind: Kustomization
metadata:
  name: apps
  namespace: flux-system
spec:
  interval: 30m0s
  dependsOn:
    - name: istio-system
  sourceRef:
    kind: GitRepository
    name: flux-system
  path: ./apps
```

Watch Flux installing Istio first, then the demo apps:

```bash
watch flux get kustomizations
```

You can tail the Flux reconciliation logs with:

```bash
flux logs --all-namespaces --follow --tail=10
```

List all the Kubernetes resources managed by Flux with:

```bash
flux tree kustomization flux-system
```

## Istio customizations

You can customize the Istio installation using the Flux `HelmReleases` located at
[istio/system/istio.yaml](https://github.com/stefanprodan/gitops-istio/blob/main/istio/system/istio.yaml):

```yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: istio-gateway
  namespace: istio-system
spec:
  dependsOn:
    - name: istio-base
    - name: istiod
  # source: https://github.com/istio/istio/blob/master/manifests/charts/gateway/values.yaml
  values:
    autoscaling:
      enabled: true
```

After modifying the Helm release values, you can push the change to git and Flux
will reconfigure the Istio control plane according to your changes.

You can monitor the Helm upgrades with:

```bash
flux -n istio-system get helmreleases --watch
```

To troubleshoot upgrade failures, you can inspect the Helm release with:

```bash
kubectl -n istio-system describe helmrelease istio-gateway
```

Flux issues Kubernetes events containing all the errors encountered during reconciliation.
You could also configure Flux to publish the events to Slack, MS Team, Discord and others;
please the [notification guide](https://fluxcd.io/docs/guides/notifications/) for more details.

## Istio control plane upgrades

Istio upgrades are automated using GitHub Actions and Flux.

![Flux Istio Operator](docs/images/flux-istio-gitops.png)

When a new Istio version is available, the
[`update-istio` GitHub Action workflow](https://github.com/stefanprodan/gitops-istio/blob/main/.github/workflows/update-istio.yaml)
will open a pull request with the manifest updates needed for upgrading Istio.
The new Istio version is tested on Kubernetes Kind by the
[`e2e` workflow](https://github.com/stefanprodan/gitops-istio/blob/main/.github/workflows/e2e.yaml)
and when the PR is merged into the main branch, Flux will upgrade Istio on the production cluster.

## Application bootstrap

When Flux syncs the Git repository with your cluster, it creates the frontend/backend deployment, HPA and a canary object.
Flagger uses the canary definition to create a series of objects: Kubernetes deployments, 
ClusterIP services, Istio destination rules and virtual services. These objects expose the application on the mesh and drive 
the canary analysis and promotion.

```bash
# applied by Flux
deployment.apps/frontend
horizontalpodautoscaler.autoscaling/frontend
canary.flagger.app/frontend

# generated by Flagger
deployment.apps/frontend-primary
horizontalpodautoscaler.autoscaling/frontend-primary
service/frontend
service/frontend-canary
service/frontend-primary
destinationrule.networking.istio.io/frontend-canary
destinationrule.networking.istio.io/frontend-primary
virtualservice.networking.istio.io/frontend
```

Check if Flagger has successfully initialized the canaries: 

```
kubectl -n prod get canaries

NAME       STATUS        WEIGHT
backend    Initialized   0
frontend   Initialized   0
```

When the `frontend-primary` deployment comes online, 
Flagger will route all traffic to the primary pods and scale to zero the `frontend` deployment.

Find the Istio ingress gateway address with:

```bash
kubectl -n istio-system get svc istio-ingressgateway -ojson | jq .status.loadBalancer.ingress
```

Open a browser and navigate to the ingress address, you'll see the frontend UI.

## Canary releases

Flagger implements a control loop that gradually shifts traffic to the canary while measuring key performance indicators
like HTTP requests success rate, requests average duration and pod health.
Based on analysis of the KPIs a canary is promoted or aborted, and the analysis result is published to Slack.

A canary analysis is triggered by changes in any of the following objects:
* Deployment PodSpec (container image, command, ports, env, etc)
* ConfigMaps and Secrets mounted as volumes or mapped to environment variables

For workloads that are not receiving constant traffic Flagger can be configured with a webhook, 
that when called, will start a load test for the target workload. The canary configuration can be found
at [apps/backend/canary.yaml](https://github.com/stefanprodan/gitops-istio/blob/main/apps/backend/canary.yaml).

![Flagger Canary Release](https://raw.githubusercontent.com/fluxcd/flagger/main/docs/diagrams/flagger-canary-steps.png)

Pull the changes from GitHub:

```sh
git pull origin main
```

To trigger a canary deployment for the backend app, bump the container image:

```bash
yq e '.images[0].newTag=""6.1.1""' -i ./apps/backend/kustomization.yaml
```

Commit and push changes:

```bash
git add -A && \
git commit -m ""backend 6.1.1"" && \
git push origin main
```

Tell Flux to pull the changes or wait one minute for Flux to detect the changes on its own:

```bash
flux reconcile source git flux-system
```

Watch Flux reconciling your cluster to the latest commit:

```bash
watch flux get kustomizations
```

After a couple of seconds, Flagger detects that the deployment revision changed and starts a new rollout:

```bash
$ kubectl -n prod describe canary backend

Events:

New revision detected! Scaling up backend.prod
Starting canary analysis for backend.prod
Pre-rollout check conformance-test passed
Advance backend.prod canary weight 5
...
Advance backend.prod canary weight 50
Copying backend.prod template spec to backend-primary.prod
Promotion completed! Scaling down backend.prod
```

During the analysis the canary’s progress can be monitored with Grafana. You can access the dashboard using port forwarding:

```bash
kubectl -n istio-system port-forward svc/flagger-grafana 3000:80
```

The Istio dashboard URL is 
http://localhost:3000/d/flagger-istio/istio-canary?refresh=10s&orgId=1&var-namespace=prod&var-primary=backend-primary&var-canary=backend

![Canary Deployment](https://raw.githubusercontent.com/fluxcd/flagger/main/docs/screens/demo-backend-dashboard.png)

Note that if new changes are applied to the deployment during the canary analysis, Flagger will restart the analysis phase.

## A/B testing

Besides weighted routing, Flagger can be configured to route traffic to the canary based on HTTP match conditions. 
In an A/B testing scenario, you'll be using HTTP headers or cookies to target a certain segment of your users. 
This is particularly useful for frontend applications that require session affinity.

You can enable A/B testing by specifying the HTTP match conditions and the number of iterations:

```yaml
  analysis:
    # schedule interval (default 60s)
    interval: 10s
    # max number of failed metric checks before rollback
    threshold: 10
    # total number of iterations
    iterations: 12
    # canary match condition
    match:
      - headers:
          user-agent:
            regex: "".*Firefox.*""
      - headers:
          cookie:
            regex: ""^(.*?;)?(type=insider)(;.*)?$""
```

The above configuration will run an analysis for two minutes targeting Firefox users and those that 
have an insider cookie. The frontend configuration can be found at `apps/frontend/canary.yaml`.

Trigger a deployment by updating the frontend container image:

```bash
yq e '.images[0].newTag=""6.1.1""' -i ./apps/frontend/kustomization.yaml

git add -A && \
git commit -m ""frontend 6.1.1"" && \
git push origin main

flux reconcile source git flux-system
```

Flagger detects that the deployment revision changed and starts the A/B testing:

```bash
$ kubectl -n istio-system logs deploy/flagger -f | jq .msg

New revision detected! Scaling up frontend.prod
Waiting for frontend.prod rollout to finish: 0 of 1 updated replicas are available
Pre-rollout check conformance-test passed
Advance frontend.prod canary iteration 1/10
...
Advance frontend.prod canary iteration 10/10
Copying frontend.prod template spec to frontend-primary.prod
Waiting for frontend-primary.prod rollout to finish: 1 of 2 updated replicas are available
Promotion completed! Scaling down frontend.prod
```

You can monitor all canaries with:

```bash
$ watch kubectl get canaries --all-namespaces

NAMESPACE   NAME      STATUS        WEIGHT
prod        frontend  Progressing   100
prod        backend   Succeeded     0
```

## Rollback based on Istio metrics

Flagger makes use of the metrics provided by Istio telemetry to validate the canary workload.
The frontend app [analysis](https://github.com/stefanprodan/gitops-istio/blob/main/apps/frontend/canary.yaml)
defines two metric checks: 

```yaml
    metrics:
      - name: error-rate
        templateRef:
          name: error-rate
          namespace: istio-system
        thresholdRange:
          max: 1
        interval: 30s
      - name: latency
        templateRef:
          name: latency
          namespace: istio-system
        thresholdRange:
          max: 500
        interval: 30s
```

The Prometheus queries used for checking the error rate and latency are located at
[flagger-metrics.yaml](https://github.com/stefanprodan/gitops-istio/blob/main/istio/gateway/flagger-metrics.yaml).

Bump the frontend version to `6.1.2`, then during the canary analysis you can generate
HTTP 500 errors and high latency to test Flagger's rollback.

Generate HTTP 500 errors:

```bash
watch curl -b 'type=insider' http://<INGRESS-IP>/status/500
```

Generate latency:

```bash
watch curl -b 'type=insider' http://<INGRESS-IP>/delay/1
```

When the number of failed checks reaches the canary analysis threshold, the traffic is routed back to the primary, 
the canary is scaled to zero and the rollout is marked as failed.

```text
$ kubectl -n istio-system logs deploy/flagger -f | jq .msg

New revision detected! Scaling up frontend.prod
Pre-rollout check conformance-test passed
Advance frontend.prod canary iteration 1/10
Halt frontend.prod advancement error-rate 31 > 1
Halt frontend.prod advancement latency 2000 > 500
...
Rolling back frontend.prod failed checks threshold reached 10
Canary failed! Scaling down frontend.prod
```

You can extend the analysis with custom metric checks targeting
[Prometheus](https://docs.flagger.app/usage/metrics#prometheus),
[Datadog](https://docs.flagger.app/usage/metrics#datadog) and
[Amazon CloudWatch](https://docs.flagger.app/usage/metrics#amazon-cloudwatch).

For configuring alerting of the canary analysis for Slack, MS Teams, Discord or Rocket see the
[docs](https://docs.flagger.app/usage/alerting#canary-configuration).

## Getting Help

If you have any questions about progressive delivery:

* Invite yourself to the [CNCF community slack](https://slack.cncf.io/)
  and join the [#flux](https://cloud-native.slack.com/messages/flux/) and [#flagger](https://cloud-native.slack.com/messages/flagger/) channels.
* Check out the [Flux talks section](https://fluxcd.io/community/#talks) and to see a list of online talks,
  hands-on training and meetups.

Your feedback is always welcome!
","GitOps is a way to do Continuous Delivery, it works by using Git as a source of
truth. Progressive delivery is an umbrella term for advanced deployment patterns
like canaries, feature flags and A/B testing. In this workshop you'll be using
[Flagger], Istio and Prometheus to automate canary Releases and A-B Testing for
your applications. You'll need a Kubernetes cluster **v1.20** or newer with
`LoadBalancer` support."
722,The official Go client for Elasticsearch,"# go-elasticsearch

The official Go client for [Elasticsearch](https://www.elastic.co/products/elasticsearch).

[![GoDoc](https://godoc.org/github.com/elastic/go-elasticsearch?status.svg)](https://pkg.go.dev/github.com/elastic/go-elasticsearch/v8)
[![Go Report Card](https://goreportcard.com/badge/github.com/elastic/go-elasticsearch)](https://goreportcard.com/report/github.com/elastic/go-elasticsearch)
[![codecov.io](https://codecov.io/github/elastic/go-elasticsearch/coverage.svg?branch=main)](https://codecov.io/gh/elastic/go-elasticsearch?branch=main)
[![Build](https://github.com/elastic/go-elasticsearch/workflows/Build/badge.svg)](https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain)
[![Unit](https://github.com/elastic/go-elasticsearch/workflows/Unit/badge.svg)](https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain)
[![Integration](https://github.com/elastic/go-elasticsearch/workflows/Integration/badge.svg)](https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain)
[![API](https://github.com/elastic/go-elasticsearch/workflows/API/badge.svg)](https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain)

## Compatibility

Language clients are forward compatible; meaning that clients support communicating with greater or equal minor versions of Elasticsearch.
Elasticsearch language clients are only backwards compatible with default distributions and without guarantees made.

When using Go modules, include the version in the import path, and specify either an explicit version or a branch:

    require github.com/elastic/go-elasticsearch/v8 v8.0.0
    require github.com/elastic/go-elasticsearch/v7 7.17

It's possible to use multiple versions of the client in a single project:

    // go.mod
    github.com/elastic/go-elasticsearch/v7 v7.17.0
    github.com/elastic/go-elasticsearch/v8 v8.0.0

    // main.go
    import (
      elasticsearch7 ""github.com/elastic/go-elasticsearch/v7""
      elasticsearch8 ""github.com/elastic/go-elasticsearch/v8""
    )
    // ...
    es7, _ := elasticsearch7.NewDefaultClient()
    es8, _ := elasticsearch8.NewDefaultClient()

The `main` branch of the client is compatible with the current `master` branch of Elasticsearch.

<!-- ----------------------------------------------------------------------------------------------- -->

## Installation

Add the package to your `go.mod` file:

    require github.com/elastic/go-elasticsearch/v8 main

Or, clone the repository:

    git clone --branch main https://github.com/elastic/go-elasticsearch.git $GOPATH/src/github.com/elastic/go-elasticsearch

A complete example:

```bash
mkdir my-elasticsearch-app && cd my-elasticsearch-app

cat > go.mod <<-END
  module my-elasticsearch-app

  require github.com/elastic/go-elasticsearch/v8 main
END

cat > main.go <<-END
  package main

  import (
    ""log""

    ""github.com/elastic/go-elasticsearch/v8""
  )

  func main() {
    es, _ := elasticsearch.NewDefaultClient()
    log.Println(elasticsearch.Version)
    log.Println(es.Info())
  }
END

go run main.go
```


<!-- ----------------------------------------------------------------------------------------------- -->

## Usage

The `elasticsearch` package ties together two separate packages for calling the Elasticsearch APIs and transferring data over HTTP: `esapi` and `elastictransport`, respectively.

Use the `elasticsearch.NewDefaultClient()` function to create the client with the default settings.

```golang
es, err := elasticsearch.NewDefaultClient()
if err != nil {
  log.Fatalf(""Error creating the client: %s"", err)
}

res, err := es.Info()
if err != nil {
  log.Fatalf(""Error getting response: %s"", err)
}

defer res.Body.Close()
log.Println(res)

// [200 OK] {
//   ""name"" : ""node-1"",
//   ""cluster_name"" : ""go-elasticsearch""
// ...
```

> NOTE: It is _critical_ to both close the response body _and_ to consume it, in order to re-use persistent TCP connections in the default HTTP transport. If you're not interested in the response body, call `io.Copy(ioutil.Discard, res.Body)`.

When you export the `ELASTICSEARCH_URL` environment variable,
it will be used to set the cluster endpoint(s). Separate multiple addresses by a comma.

To set the cluster endpoint(s) programmatically, pass a configuration object
to the `elasticsearch.NewClient()` function.

```golang
cfg := elasticsearch.Config{
  Addresses: []string{
    ""https://localhost:9200"",
    ""https://localhost:9201"",
  },
  // ...
}
es, err := elasticsearch.NewClient(cfg)
```

To set the username and password, include them in the endpoint URL,
or use the corresponding configuration options.

```golang
cfg := elasticsearch.Config{
  // ...
  Username: ""foo"",
  Password: ""bar"",
}
```

To set a custom certificate authority used to sign the certificates of cluster nodes,
use the `CACert` configuration option.

```golang
cert, _ := ioutil.ReadFile(*cacert)

cfg := elasticsearch.Config{
  // ...
  CACert: cert,
}
```

To set a fingerprint to validate the HTTPS connection use the `CertificateFingerprint` configuration option.

```golang
cfg := elasticsearch.Config{
	// ...
    CertificateFingerprint: fingerPrint,
}
```

To configure other HTTP settings, pass an [`http.Transport`](https://golang.org/pkg/net/http/#Transport)
object in the configuration object.

```golang
cfg := elasticsearch.Config{
  Transport: &http.Transport{
    MaxIdleConnsPerHost:   10,
    ResponseHeaderTimeout: time.Second,
    TLSClientConfig: &tls.Config{
      MinVersion: tls.VersionTLS12,
      // ...
    },
    // ...
  },
}
```

See the [`_examples/configuration.go`](_examples/configuration.go) and
[`_examples/customization.go`](_examples/customization.go) files for
more examples of configuration and customization of the client.
See the [`_examples/security`](_examples/security) for an example of a security configuration.

The following example demonstrates a more complex usage. It fetches the Elasticsearch version from the cluster, indexes a couple of documents concurrently, and prints the search results, using a lightweight wrapper around the response body.

```golang
// $ go run _examples/main.go

package main

import (
  ""bytes""
  ""context""
  ""encoding/json""
  ""log""
  ""strconv""
  ""strings""
  ""sync""

  ""github.com/elastic/go-elasticsearch/v8""
  ""github.com/elastic/go-elasticsearch/v8/esapi""
)

func main() {
  log.SetFlags(0)

  var (
    r  map[string]interface{}
    wg sync.WaitGroup
  )

  // Initialize a client with the default settings.
  //
  // An `ELASTICSEARCH_URL` environment variable will be used when exported.
  //
  es, err := elasticsearch.NewDefaultClient()
  if err != nil {
    log.Fatalf(""Error creating the client: %s"", err)
  }

  // 1. Get cluster info
  //
  res, err := es.Info()
  if err != nil {
    log.Fatalf(""Error getting response: %s"", err)
  }
  defer res.Body.Close()
  // Check response status
  if res.IsError() {
    log.Fatalf(""Error: %s"", res.String())
  }
  // Deserialize the response into a map.
  if err := json.NewDecoder(res.Body).Decode(&r); err != nil {
    log.Fatalf(""Error parsing the response body: %s"", err)
  }
  // Print client and server version numbers.
  log.Printf(""Client: %s"", elasticsearch.Version)
  log.Printf(""Server: %s"", r[""version""].(map[string]interface{})[""number""])
  log.Println(strings.Repeat(""~"", 37))

  // 2. Index documents concurrently
  //
  for i, title := range []string{""Test One"", ""Test Two""} {
    wg.Add(1)

    go func(i int, title string) {
      defer wg.Done()

      // Build the request body.      
      data, err := json.Marshal(struct {
          Title string `json:""title""`
      }{Title: title})
      if err != nil {
        log.Fatalf(""Error marshaling document: %s"", err)
      }

      // Set up the request object.
      req := esapi.IndexRequest{
        Index:      ""test"",
        DocumentID: strconv.Itoa(i + 1),
        Body:       bytes.NewReader(data),
        Refresh:    ""true"",
      }

      // Perform the request with the client.
      res, err := req.Do(context.Background(), es)
      if err != nil {
        log.Fatalf(""Error getting response: %s"", err)
      }
      defer res.Body.Close()

      if res.IsError() {
        log.Printf(""[%s] Error indexing document ID=%d"", res.Status(), i+1)
      } else {
        // Deserialize the response into a map.
        var r map[string]interface{}
        if err := json.NewDecoder(res.Body).Decode(&r); err != nil {
          log.Printf(""Error parsing the response body: %s"", err)
        } else {
          // Print the response status and indexed document version.
          log.Printf(""[%s] %s; version=%d"", res.Status(), r[""result""], int(r[""_version""].(float64)))
        }
      }
    }(i, title)
  }
  wg.Wait()

  log.Println(strings.Repeat(""-"", 37))

  // 3. Search for the indexed documents
  //
  // Build the request body.
  var buf bytes.Buffer
  query := map[string]interface{}{
    ""query"": map[string]interface{}{
      ""match"": map[string]interface{}{
        ""title"": ""test"",
      },
    },
  }
  if err := json.NewEncoder(&buf).Encode(query); err != nil {
    log.Fatalf(""Error encoding query: %s"", err)
  }

  // Perform the search request.
  res, err = es.Search(
    es.Search.WithContext(context.Background()),
    es.Search.WithIndex(""test""),
    es.Search.WithBody(&buf),
    es.Search.WithTrackTotalHits(true),
    es.Search.WithPretty(),
  )
  if err != nil {
    log.Fatalf(""Error getting response: %s"", err)
  }
  defer res.Body.Close()

  if res.IsError() {
    var e map[string]interface{}
    if err := json.NewDecoder(res.Body).Decode(&e); err != nil {
      log.Fatalf(""Error parsing the response body: %s"", err)
    } else {
      // Print the response status and error information.
      log.Fatalf(""[%s] %s: %s"",
        res.Status(),
        e[""error""].(map[string]interface{})[""type""],
        e[""error""].(map[string]interface{})[""reason""],
      )
    }
  }

  if err := json.NewDecoder(res.Body).Decode(&r); err != nil {
    log.Fatalf(""Error parsing the response body: %s"", err)
  }
  // Print the response status, number of results, and request duration.
  log.Printf(
    ""[%s] %d hits; took: %dms"",
    res.Status(),
    int(r[""hits""].(map[string]interface{})[""total""].(map[string]interface{})[""value""].(float64)),
    int(r[""took""].(float64)),
  )
  // Print the ID and document source for each hit.
  for _, hit := range r[""hits""].(map[string]interface{})[""hits""].([]interface{}) {
    log.Printf("" * ID=%s, %s"", hit.(map[string]interface{})[""_id""], hit.(map[string]interface{})[""_source""])
  }

  log.Println(strings.Repeat(""="", 37))
}

// Client: 8.0.0-SNAPSHOT
// Server: 8.0.0-SNAPSHOT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// [201 Created] updated; version=1
// [201 Created] updated; version=1
// -------------------------------------
// [200 OK] 2 hits; took: 5ms
//  * ID=1, map[title:Test One]
//  * ID=2, map[title:Test Two]
// =====================================
```

As you see in the example above, the `esapi` package allows to call the Elasticsearch APIs in two distinct ways: either by creating a struct, such as `IndexRequest`, and calling its `Do()` method by passing it a context and the client, or by calling the `Search()` function on the client directly, using the option functions such as `WithIndex()`. See more information and examples in the
[package documentation](https://godoc.org/github.com/elastic/go-elasticsearch/esapi).

The `elastictransport` package handles the transfer of data to and from Elasticsearch, including retrying failed requests, keeping a connection pool, discovering cluster nodes and logging.

Read more about the client internals and usage in the following blog posts:

* https://www.elastic.co/blog/the-go-client-for-elasticsearch-introduction
* https://www.elastic.co/blog/the-go-client-for-elasticsearch-configuration-and-customization
* https://www.elastic.co/blog/the-go-client-for-elasticsearch-working-with-data

<!-- ----------------------------------------------------------------------------------------------- -->

## Helpers

The `esutil` package provides convenience helpers for working with the client. At the moment, it provides the `esutil.JSONReader()` and the `esutil.BulkIndexer` helpers.

<!-- ----------------------------------------------------------------------------------------------- -->

## Examples

The **[`_examples`](./_examples)** folder contains a number of recipes and comprehensive examples to get you started with the client, including configuration and customization of the client, using a custom certificate authority (CA) for security (TLS), mocking the transport for unit tests, embedding the client in a custom type, building queries, performing requests individually and in bulk, and parsing the responses.

<!-- ----------------------------------------------------------------------------------------------- -->

## License

This software is licensed under the [Apache 2 license](./LICENSE). See [NOTICE](./NOTICE).
","The official Go client for
[Elasticsearch](https://www.elastic.co/products/elasticsearch) is called go-
elastic-search. The main branch of the client is compatible with the current
`master` branch of Elasticsearch."
718,Quick and Easy server testing/validation,"# Goss - Quick and Easy server validation

[![Build Status](https://travis-ci.org/goss-org/goss.svg?branch=master)](https://travis-ci.org/goss-org/goss)
[![Github All Releases](https://img.shields.io/github/downloads/goss-org/goss/total.svg?maxAge=604800)](https://github.com/goss-org/goss/releases)
**
[![Blog](https://img.shields.io/badge/follow-blog-brightgreen.svg)](https://medium.com/@aelsabbahy)

## Goss in 45 seconds

<a href=""https://asciinema.org/a/4suhr8p42qcn6r7crfzt6cc3e?autoplay=1"" target=""_blank""><img src=""https://cloud.githubusercontent.com/assets/6783261/17330426/ce7ad066-5894-11e6-84ea-29fd4207af58.gif"" alt=""asciicast""></a>

**Note:** For an even faster way of doing this, see: [autoadd](https://github.com/goss-org/goss/blob/master/docs/manual.md#autoadd-aa---auto-add-all-matching-resources-to-test-suite)

**Note:** For testing docker containers see the [dgoss](https://github.com/goss-org/goss/tree/master/extras/dgoss) wrapper. Also, user submitted wrapper scripts for Kubernetes [kgoss](https://github.com/goss-org/goss/tree/master/extras/kgoss) and Docker Compose [dcgoss](https://github.com/goss-org/goss/tree/master/extras/dcgoss).

**Note:** For some Docker/Kubernetes healthcheck, health endpoint, and
container ordering examples, see my blog post
[here][kubernetes-simplified-health-checks].

## Introduction

### What is Goss?

Goss is a YAML based [serverspec](http://serverspec.org/) alternative tool for validating a server’s configuration. It eases the process of writing tests by allowing the user to generate tests from the current system state. Once the test suite is written they can be executed, waited-on, or served as a health endpoint.

### Why use Goss?

* Goss is EASY! - [Goss in 45 seconds](#goss-in-45-seconds)
* Goss is FAST! - small-medium test suites are near instantaneous, see [benchmarks](https://github.com/goss-org/goss/wiki/Benchmarks)
* Goss is SMALL! - <10MB single self-contained binary

## Installation

**Note:** For macOS and Windows, see: [platform-feature-parity].

This will install goss and [dgoss](https://github.com/goss-org/goss/tree/master/extras/dgoss).

**Note:** Using `curl | sh` is not recommended for production systems, use manual installation below.

```bash
# Install latest version to /usr/local/bin
curl -fsSL https://goss.rocks/install | sh

# Install v0.3.16 version to ~/bin
curl -fsSL https://goss.rocks/install | GOSS_VER=v0.3.16 GOSS_DST=~/bin sh
```

### Manual installation

#### Latest

```bash
curl -L https://github.com/goss-org/goss/releases/latest/download/goss-linux-amd64 -o /usr/local/bin/goss
chmod +rx /usr/local/bin/goss

curl -L https://github.com/goss-org/goss/releases/latest/download/dgoss -o /usr/local/bin/dgoss
# Alternatively, using the latest master
# curl -L https://raw.githubusercontent.com/goss-org/goss/master/extras/dgoss/dgoss -o /usr/local/bin/dgoss
chmod +rx /usr/local/bin/dgoss
```

#### Specific Version

```bash
# See https://github.com/goss-org/goss/releases for release versions
VERSION=v0.3.10
curl -L ""https://github.com/goss-org/goss/releases/download/${VERSION}/goss-linux-amd64"" -o /usr/local/bin/goss
chmod +rx /usr/local/bin/goss

# (optional) dgoss docker wrapper (use 'master' for latest version)
VERSION=v0.3.10
curl -L ""https://github.com/goss-org/goss/releases/download/${VERSION}/dgoss"" -o /usr/local/bin/dgoss
chmod +rx /usr/local/bin/dgoss
```

### Build it yourself

```bash
make build
```

## Full Documentation

Documentation is available here: [manual](https://github.com/goss-org/goss/blob/master/docs/manual.md)

## Quick start

### Writing a simple sshd test

An initial set of tests can be derived from the system state by using the [add](https://github.com/goss-org/goss/blob/master/docs/manual.md#add-a---add-system-resource-to-test-suite) or [autoadd](https://github.com/goss-org/goss/blob/master/docs/manual.md#autoadd-aa---auto-add-all-matching-resources-to-test-suite) commands.

Let's write a simple sshd test using autoadd.

```txt
# Running it as root will allow it to also detect ports
$ sudo goss autoadd sshd
```

Generated `goss.yaml`:

```yaml
$ cat goss.yaml
port:
  tcp:22:
    listening: true
    ip:
    - 0.0.0.0
  tcp6:22:
    listening: true
    ip:
    - '::'
service:
  sshd:
    enabled: true
    running: true
user:
  sshd:
    exists: true
    uid: 74
    gid: 74
    groups:
    - sshd
    home: /var/empty/sshd
    shell: /sbin/nologin
group:
  sshd:
    exists: true
    gid: 74
process:
  sshd:
    running: true
```

Now that we have a test suite, we can:

* Run it once

```txt
goss validate
...............

Total Duration: 0.021s # <- yeah, it's that fast..
Count: 15, Failed: 0
```

* Edit it to use [templates](https://github.com/goss-org/goss/blob/master/docs/manual.md#templates), and run with a vars file

```txt
goss --vars vars.yaml validate
```

* keep running it until the system enters a valid state or we timeout

```txt
goss validate --retry-timeout 30s --sleep 1s
```

* serve the tests as a health endpoint

```txt
goss serve &
curl localhost:8080/healthz

# JSON endpoint
goss serve --format json &
curl localhost:8080/healthz

# rspecish response via content negotiation
goss serve --format json &
curl -H ""Accept: application/vnd.goss-rspecish"" localhost:8080/healthz
```

### Manually editing Goss files

Goss files can be manually edited to improve readability and expressiveness of tests.

A [Json draft 7 schema](https://github.com/json-schema-org/json-schema-spec/blob/draft-07/schema.json) available in [docs/goss-json-schema.yaml](./docs/goss-json-schema.yaml) makes it easier to edit simple goss.yaml files in IDEs, providing usual coding assistance such as inline documentation, completion and static analysis. See [PR 793](https://github.com/goss-org/goss/pull/793) for screenshots.

For example, to configure the Json schema in JetBrains intellij IDEA, follow [documented instructions](https://www.jetbrains.com/help/idea/json.html#ws_json_schema_add_custom), with arguments such as `schema url=https://raw.githubusercontent.com/goss-org/goss/master/docs/goss-json-schema.yaml`, `schema version=Json schema version 7`, `file path pattern=*/goss.yaml`

In addition, Goss files can also be further manually edited (without yet full json support) to use:

* [Patterns](https://github.com/goss-org/goss/blob/master/docs/manual.md#patterns)
* [Advanced Matchers](https://github.com/goss-org/goss/blob/master/docs/manual.md#advanced-matchers)
* [Templates](https://github.com/goss-org/goss/blob/master/docs/manual.md#templates)
* `title` and `meta` (arbitrary data) attributes are persisted when adding other resources with `goss add`

Some examples:

```yaml
user:
  sshd:
    title: UID must be between 50-100, GID doesn't matter. home is flexible
    meta:
      desc: Ensure sshd is enabled and running since it's needed for system management
      sev: 5
    exists: true
    uid:
      # Validate that UID is between 50 and 100
      and:
        gt: 50
        lt: 100
    home:
      # Home can be any of the following
      or:
      - /var/empty/sshd
      - /var/run/sshd

package:
  kernel:
    installed: true
    versions:
      # Must have 3 kernels and none of them can be 4.4.0
      and:
      - have-len: 3
      - not:
          contain-element: 4.4.0

  # Loaded from --vars YAML/JSON file
  {{.Vars.package}}:
    installed: true

{{if eq .Env.OS ""centos""}}
  # This test is only when $OS environment variable is set to ""centos""
  libselinux:
    installed: true
{{end}}
```

Goss.yaml files with templates can still be validated through the Json schema after being rendered using the `goss render` command. See example below  

```bash
cd docs
goss --vars ./vars.yaml render > rendered_goss.yaml 
# proceed with json schema validation of rendered_goss.yaml in your favorite IDE 
# or in one of the Json schema validator listed in https://json-schema.org/implementations.html
# The following example is for a Linux AMD64 host 
curl -LO https://github.com/neilpa/yajsv/releases/download/v1.4.1/yajsv.linux.amd64
chmod a+x yajsv.linux.amd64 
sudo mv yajsv.linux.amd64 /usr/sbin/yajsv

yajsv -s goss-json-schema.yaml rendered_goss.yaml

rendered_goss.yaml: fail: process.chrome: skip is required
rendered_goss.yaml: fail: service.sshd: skip is required
1 of 1 failed validation
rendered_goss.yaml: fail: process.chrome: skip is required
rendered_goss.yaml: fail: service.sshd: skip is required
```

Full list of available Json schema validators can be found in https://json-schema.org/implementations.html#validator-command%20line

## Supported resources

* package - add new package
* file - add new file
* addr - add new remote address:port - ex: google.com:80
* port - add new listening [protocol]:port - ex: 80 or udp:123
* service - add new service
* user - add new user
* group - add new group
* command - add new command
* dns - add new dns
* process - add new process name
* kernel-param - add new kernel-param
* mount - add new mount
* interface - add new network interface
* http - add new network http url with proxy support
* goss - add new goss file, it will be imported from this one
* matching - test for matches in supplied content

## Supported output formats

* rspecish - **(default)** Similar to rspec output
* documentation - Verbose test results
* json - JSON, detailed test result
* tap - TAP style
* junit - JUnit style
* nagios - Nagios/Sensu compatible output /w exit code 2 for failures.
* prometheus - Prometheus compatible output.
* silent - No output. Avoids exposing system information (e.g. when serving tests as a healthcheck endpoint).

## Community Contributions

* [goss-ansible](https://github.com/indusbox/goss-ansible) - Ansible module for Goss.
* [degoss](https://github.com/naftulikay/ansible-role-degoss) - Ansible role for installing, running, and removing Goss in a single go.
* [kitchen-goss](https://github.com/ahelal/kitchen-goss) - A test-kitchen verifier plugin for Goss.
* [goss-fpm-files](https://github.com/deanwilson/unixdaemon-fpm-cookery-recipes) - Might be useful for building goss system packages.
* [molecule](https://github.com/metacloud/molecule) - Automated testing for Ansible roles, with native Goss support.
* [packer-provisioner-goss](https://github.com/YaleUniversity/packer-provisioner-goss) - A packer plugin to run Goss as a provision step.
* [gossboss](https://github.com/mdb/gossboss) - Collect and view aggregated Goss test results from multiple remote Goss servers.

## Limitations

`goss` works well on Linux, but support on Windows & macOS is alpha. See [platform-feature-parity].

The following tests have limitations.

Package:

* rpm
* deb
* Alpine apk
* pacman

Service:

* systemd
* sysV init
* OpenRC init
* Upstart

[kubernetes-simplified-health-checks]: https://medium.com/@aelsabbahy/docker-1-12-kubernetes-simplified-health-checks-and-container-ordering-with-goss-fa8debbe676c
[platform-feature-parity]: docs/platform-feature-parity.md
","Goss is a YAML based tool for validating a server’s configuration. It eases the
process of writing tests by allowing the user to generate tests from the current
system state. Once the test suite is written they can be executed, waited-on, or
served as a health endpoint. Goss is EASY! - [Goss in 45 seconds](#goss-
in-45-seconds) FAST! - small-medium test suites are near instantaneous, see
[benchmarks](https://github.com/ goss-org/goss/wiki/benchmarks)"
2076,"Typed, correct GraphQL requests and responses in Rust","# graphql_client

[![Github actions Status](https://github.com/graphql-rust/graphql-client/workflows/CI/badge.svg?branch=main&event=push)](https://github.com/graphql-rust/graphql-client/actions)
[![docs](https://docs.rs/graphql_client/badge.svg)](https://docs.rs/graphql_client/latest/graphql_client/)
[![crates.io](https://img.shields.io/crates/v/graphql_client.svg)](https://crates.io/crates/graphql_client)

A typed GraphQL client library for Rust.

## Features

- Precise types for query variables and responses.
- Supports GraphQL fragments, objects, unions, inputs, enums, custom scalars and input objects.
- Works in the browser (WebAssembly).
- Subscriptions support (serialization-deserialization only at the moment).
- Copies documentation from the GraphQL schema to the generated Rust code.
- Arbitrary derives on the generated responses.
- Arbitrary custom scalars.
- Supports multiple operations per query document.
- Supports setting GraphQL fields as deprecated and having the Rust compiler check
  their use.
- Optional reqwest-based client for boilerplate-free API calls from browsers.
- Implicit and explicit null support.

## Getting started

- If you are not familiar with GraphQL, the [official website](https://graphql.org/) provides a very good and comprehensive introduction.

- Once you have written your query (most likely in something like [graphiql](https://github.com/graphql/graphiql)), save it in a `.graphql` file in your project.

- In order to provide precise types for a response, graphql_client needs to read the query and the schema at compile-time.

  To download the schema, you have multiple options. This projects provides a [CLI](https://github.com/graphql-rust/graphql-client/tree/main/graphql_client_cli), however it does not matter what tool you use, the resulting `schema.json` is the same.

- We now have everything we need to derive Rust types for our query. This is achieved through a procedural macro, as in the following snippet:

  ```rust
  use graphql_client::GraphQLQuery;

  // The paths are relative to the directory where your `Cargo.toml` is located.
  // Both json and the GraphQL schema language are supported as sources for the schema
  #[derive(GraphQLQuery)]
  #[graphql(
      schema_path = ""tests/unions/union_schema.graphql"",
      query_path = ""tests/unions/union_query.graphql"",
  )]
  pub struct UnionQuery;
  ```

  The `derive` will generate a module named `union_query` in this example - the name is the struct's name, but in snake case.

  That module contains all the struct and enum definitions necessary to deserialize a response to that query.

  The root type for the response is named `ResponseData`. The GraphQL response will take the form of a `Response<ResponseData>` (the [Response](https://docs.rs/graphql_client/latest/graphql_client/struct.Response.html) type is always the same).

  The module also contains a struct called `Variables` representing the variables expected by the query.

* We now need to create the complete payload that we are going to send to the server. For convenience, the [GraphQLQuery trait](https://docs.rs/graphql_client/latest/graphql_client/trait.GraphQLQuery.html), is implemented for the struct under derive, so a complete query body can be created this way:

  ```rust
  use graphql_client::{GraphQLQuery, Response};
  use std::error::Error;
  use reqwest;

  #[derive(GraphQLQuery)]
  #[graphql(
      schema_path = ""tests/unions/union_schema.graphql"",
      query_path = ""tests/unions/union_query.graphql"",
      response_derives = ""Debug"",
  )]
  pub struct UnionQuery;

  async fn perform_my_query(variables: union_query::Variables) -> Result<(), Box<dyn Error>> {

      // this is the important line
      let request_body = UnionQuery::build_query(variables);

      let client = reqwest::Client::new();
      let mut res = client.post(""/graphql"").json(&request_body).send().await?;
      let response_body: Response<union_query::ResponseData> = res.json().await?;
      println!(""{:#?}"", response_body);
      Ok(())
  }
  ```

[A complete example using the GitHub GraphQL API is available](https://github.com/graphql-rust/graphql-client/tree/main/examples/github).

## Alternative workflow using the CLI

You can introspect GraphQL APIs and generate module from a command line interface to the library:

```bash
$ cargo install graphql_client_cli
$ graphql-client --help
```

## Deriving specific traits on the response

The generated response types always derive `serde::Deserialize` but you may want to print them (`Debug`), compare them (`PartialEq`) or derive any other trait on it. You can achieve this with the `response_derives` option of the `graphql` attribute. Example:

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
    response_derives = ""Serialize,PartialEq"",
)]
struct UnionQuery;
```
## Implicit Null

The generated code will skip the serialization of `None` values.

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
    skip_serializing_none
)]
struct UnionQuery;
```

## Custom scalars

In GraphQL, five scalar types, `Int`, `Float`, `String`, `Boolean`, and `ID`, are available out of the box and are automatically mapped to equivalent types in Rust. However, in addition, custom scalar types can be defined by service providers by adding declarations like `scalar URI` to the server schema.

If such custom scalar types are defined in the schema, depending on the content of the query, the generated code will also reference those scalar types. This means you have to provide matching Rust types in the scope of the struct under derive. It can be as simple as declarations like `type URI = String;`. This gives you complete freedom on how to treat custom scalars, as long as they can be deserialized. If such declarations are not provided, you will get build errors like this:

```
error[E0412]: cannot find type `URI` in module `super`
   |
   | #[derive(GraphQLQuery)]
   |          ^^^^^^^^^^^^ not found in `super`
   |
   = note: possible candidate is found in another module, you can import it into scope:
           crate::repo_view::URI
```

## Deprecations

The generated code has support for [`@deprecated`](http://facebook.github.io/graphql/June2018/#sec-Field-Deprecation)
field annotations. You can configure how deprecations are handled via the `deprecated` argument in the `GraphQLQuery` derive:

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
  schema_path = ""tests/unions/union_schema.graphql"",
  query_path = ""tests/unions/union_query.graphql"",
  deprecated = ""warn""
)]
pub struct UnionQuery;
```

Valid values are:

- `allow`: the response struct fields are not marked as deprecated.
- `warn`: the response struct fields are marked as `#[deprecated]`.
- `deny`: The struct fields are not included in the response struct and
  using them is a compile error.

The default is `warn`.

## Query documents with multiple operations

You can write multiple operations in one query document (one `.graphql` file). You can then select one by naming the struct you `#[derive(GraphQLQuery)]` on with the same name as one of the operations. This is neat, as it allows sharing fragments between operations.

Note that the struct and the operation in the GraphQL file *must* have the same name. We enforce this to make the generated code more predictable.

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
)]
pub struct UnionQuery;
```

There is an example [in the tests](./graphql_client/tests/operation_selection).

## Documentation for the generated modules

You can use `cargo doc --document-private-items` to generate rustdoc documentation on the generated code.

## Make cargo recompile when .graphql files have changed

There is an [`include`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-exclude-and-include-fields-optional) option you can add to your `Cargo.toml`. It currently has issues however (see [this issue](https://github.com/rust-lang/cargo/issues/6031#issuecomment-422160178)).

## Examples

See the [examples directory](https://github.com/graphql-rust/graphql-client/tree/main/examples) in this repository.

## Contributors

Warmest thanks to all those who contributed in any way (not only code) to this project:

- Alex Vlasov (@indifferentalex)
- Ben Boeckel (@mathstuf)
- Chris Fung (@aergonaut)
- Christian Legnitto (@LegNeato)
- David Gräff (@davidgraeff)
- Dirkjan Ochtman (@djc)
- Fausto Nunez Alberro (@brainlessdeveloper)
- Hirokazu Hata (@h-michael)
- Peter Gundel (@peterfication)
- Sonny Scroggin (@scrogson)
- Sooraj Chandran (@SoorajChandran)
- Tom Houlé (@tomhoule)

## Code of conduct

Anyone who interacts with this project in any space, including but not limited to
this GitHub repository, must follow our [code of conduct](https://github.com/graphql-rust/graphql-client/blob/main/CODE_OF_CONDUCT.md).

## License

Licensed under either of these:

- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
  https://www.apache.org/licenses/LICENSE-2.0)
- MIT license ([LICENSE-MIT](LICENSE-MIT) or
  https://opensource.org/licenses/MIT)

### Contributing

Unless you explicitly state otherwise, any contribution you intentionally submit
for inclusion in the work, as defined in the Apache-2.0 license, shall be
dual-licensed as above, without any additional terms or conditions.
","A typed GraphQL client library for Rust. Precise types for query variables and
responses. Supports GraphQL fragments, objects, unions, inputs, enums, custom
scalars and input objects. Works in the browser (WebAssembly). Subscriptions
support (serialization-deserialization only at the moment). Copies documentation
from the GraphQL schema to the generated Rust code. Arbitrary derives on the
generated responses."
2320,Grokking Deep Reinforcement Learning,"# Grokking Deep Reinforcement Learning

**Note:** At the moment, only running the code from the [docker](https://github.com/docker/docker-ce) container (below) is supported. Docker allows for creating a single environment that is more likely to work on all systems. Basically, I install and configure all packages for you, except docker itself, and you just run the code on a tested environment. 

To install docker, I recommend a web search for ""installing docker on \<your os here>"". For running the code on a GPU, you have to additionally install [nvidia-docker](https://github.com/NVIDIA/nvidia-docker). NVIDIA Docker allows for using a host's GPUs inside docker containers. After you have docker (and nvidia-docker if using a GPU) installed, follow the three steps below. 

## Running the code
  0. Clone this repo:  
  `git clone --depth 1 https://github.com/mimoralea/gdrl.git && cd gdrl`
  1. Pull the gdrl image with:  
  `docker pull mimoralea/gdrl:v0.14`
  2. Spin up a container:
     - On Mac or Linux:  
     `docker run -it --rm -p 8888:8888 -v ""$PWD""/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14` 
     - On Windows:  
     `docker run -it --rm -p 8888:8888 -v %CD%/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14`
     - NOTE: Use `nvidia-docker` or add `--gpus all` after `--rm` to the command, if you are using a GPU.
  3. Open a browser and go to the URL shown in the terminal (likely to be: http://localhost:8888). The password is: `gdrl`

## About the book

### Book's website

https://www.manning.com/books/grokking-deep-reinforcement-learning

### Table of content

  1. [Introduction to deep reinforcement learning](#1-introduction-to-deep-reinforcement-learning)
  2. [Mathematical foundations of reinforcement learning](#2-mathematical-foundations-of-reinforcement-learning)
  3. [Balancing immediate and long-term goals](#3-balancing-immediate-and-long-term-goals)
  4. [Balancing the gathering and utilization of information](#4-balancing-the-gathering-and-utilization-of-information)
  5. [Evaluating agents' behaviors](#5-evaluating-agents-behaviors)
  6. [Improving agents' behaviors](#6-improving-agents-behaviors)
  7. [Achieving goals more effectively and efficiently](#7-achieving-goals-more-effectively-and-efficiently)
  8. [Introduction to value-based deep reinforcement learning](#8-introduction-to-value-based-deep-reinforcement-learning)
  9. [More stable value-based methods](#9-more-stable-value-based-methods)
  10. [Sample-efficient value-based methods](#10-sample-efficient-value-based-methods)
  11. [Policy-gradient and actor-critic methods](#11-policy-gradient-and-actor-critic-methods)
  12. [Advanced actor-critic methods](#12-advanced-actor-critic-methods)
  13. [Towards artificial general intelligence](#13-towards-artificial-general-intelligence)

### Detailed table of content

#### 1. Introduction to deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-1)\)
- \(No Notebook\)
      
#### 2. Mathematical foundations of reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-2)\)
- \([Notebook](/notebooks/chapter_02/chapter-02.ipynb)\)
  - Implementations of several MDPs: 
    - Bandit Walk
    - Bandit Slippery Walk
    - Slippery Walk Three
    - Random Walk
    - Russell and Norvig's Gridworld from AIMA
    - FrozenLake
    - FrozenLake8x8
#### 3. Balancing immediate and long-term goals
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-3)\)
- \([Notebook](/notebooks/chapter_03/chapter-03.ipynb)\) 
  - Implementations of methods for finding optimal policies:
    - Policy Evaluation
    - Policy Improvement
    - Policy Iteration
    - Value Iteration
#### 4. Balancing the gathering and utilization of information
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-4)\)
- \([Notebook](/notebooks/chapter_04/chapter-04.ipynb)\)
  - Implementations of exploration strategies for bandit problems:
    - Random
    - Greedy
    - E-greedy
    - E-greedy with linearly decaying epsilon
    - E-greedy with exponentially decaying epsilon
    - Optimistic initialization
    - SoftMax
    - Upper Confidence Bound
    - Bayesian
#### 5. Evaluating agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-5)\)
- \([Notebook](/notebooks/chapter_05/chapter-05.ipynb)\)
  - Implementation of algorithms that solve the prediction problem (policy estimation):
    - On-policy first-visit Monte-Carlo prediction
    - On-policy every-visit Monte-Carlo prediction
    - Temporal-Difference prediction (TD)
    - n-step Temporal-Difference prediction (n-step TD)
    - TD(λ)
#### 6. Improving agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-6)\)
- \([Notebook](/notebooks/chapter_06/chapter-06.ipynb)\)
  - Implementation of algorithms that solve the control problem (policy improvement):
    - On-policy first-visit Monte-Carlo control
    - On-policy every-visit Monte-Carlo control
    - On-policy TD control: SARSA
    - Off-policy TD control: Q-Learning
    - Double Q-Learning
#### 7. Achieving goals more effectively and efficiently
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-7)\)
- \([Notebook](/notebooks/chapter_07/chapter-07.ipynb)\)
  - Implementation of more effective and efficient reinforcement learning algorithms:
    - SARSA(λ) with replacing traces
    - SARSA(λ) with accumulating traces
    - Q(λ) with replacing traces
    - Q(λ) with accumulating traces
    - Dyna-Q
    - Trajectory Sampling
#### 8. Introduction to value-based deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-8)\)
- \([Notebook](/notebooks/chapter_08/chapter-08.ipynb)\)
  - Implementation of a value-based deep reinforcement learning baseline:
    - Neural Fitted Q-iteration (NFQ)
#### 9. More stable value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-9)\)
- \([Notebook](/notebooks/chapter_09/chapter-09.ipynb)\)
  - Implementation of ""classic"" value-based deep reinforcement learning methods:
    - Deep Q-Networks (DQN)
    - Double Deep Q-Networks (DDQN)
#### 10. Sample-efficient value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-10)\)
- \([Notebook](/notebooks/chapter_10/chapter-10.ipynb)\)
  - Implementation of main improvements for value-based deep reinforcement learning methods:
    - Dueling Deep Q-Networks (Dueling DQN)
    - Prioritized Experience Replay (PER)
#### 11. Policy-gradient and actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-11)\)
- \([Notebook](/notebooks/chapter_11/chapter-11.ipynb)\)
  - Implementation of classic policy-based and actor-critic deep reinforcement learning methods:
    - Policy Gradients without value function and Monte-Carlo returns (REINFORCE)
    - Policy Gradients with value function baseline trained with Monte-Carlo returns (VPG)  
    - Asynchronous Advantage Actor-Critic (A3C)
    - Generalized Advantage Estimation (GAE)
    - \[Synchronous\] Advantage Actor-Critic (A2C)
#### 12. Advanced actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-12)\)
- \([Notebook](/notebooks/chapter_12/chapter-12.ipynb)\)
  - Implementation of advanced actor-critic methods:
    - Deep Deterministic Policy Gradient (DDPG)
    - Twin Delayed Deep Deterministic Policy Gradient (TD3)
    - Soft Actor-Critic (SAC)
    - Proximal Policy Optimization (PPO)
#### 13. Towards artificial general intelligence
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-13)\)
- \(No Notebook\)
","Docker allows for creating a single environment that is more likely to work on
all systems. At the moment, only running the code from the [ Docker] container
(below) is supported. To run the code on a GPU, you have to additionally install
[n Nvidia- Docker]"
1753,Grokking Deep Reinforcement Learning,"# Grokking Deep Reinforcement Learning

**Note:** At the moment, only running the code from the [docker](https://github.com/docker/docker-ce) container (below) is supported. Docker allows for creating a single environment that is more likely to work on all systems. Basically, I install and configure all packages for you, except docker itself, and you just run the code on a tested environment. 

To install docker, I recommend a web search for ""installing docker on \<your os here>"". For running the code on a GPU, you have to additionally install [nvidia-docker](https://github.com/NVIDIA/nvidia-docker). NVIDIA Docker allows for using a host's GPUs inside docker containers. After you have docker (and nvidia-docker if using a GPU) installed, follow the three steps below. 

## Running the code
  0. Clone this repo:  
  `git clone --depth 1 https://github.com/mimoralea/gdrl.git && cd gdrl`
  1. Pull the gdrl image with:  
  `docker pull mimoralea/gdrl:v0.14`
  2. Spin up a container:
     - On Mac or Linux:  
     `docker run -it --rm -p 8888:8888 -v ""$PWD""/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14` 
     - On Windows:  
     `docker run -it --rm -p 8888:8888 -v %CD%/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14`
     - NOTE: Use `nvidia-docker` or add `--gpus all` after `--rm` to the command, if you are using a GPU.
  3. Open a browser and go to the URL shown in the terminal (likely to be: http://localhost:8888). The password is: `gdrl`

## About the book

### Book's website

https://www.manning.com/books/grokking-deep-reinforcement-learning

### Table of content

  1. [Introduction to deep reinforcement learning](#1-introduction-to-deep-reinforcement-learning)
  2. [Mathematical foundations of reinforcement learning](#2-mathematical-foundations-of-reinforcement-learning)
  3. [Balancing immediate and long-term goals](#3-balancing-immediate-and-long-term-goals)
  4. [Balancing the gathering and utilization of information](#4-balancing-the-gathering-and-utilization-of-information)
  5. [Evaluating agents' behaviors](#5-evaluating-agents-behaviors)
  6. [Improving agents' behaviors](#6-improving-agents-behaviors)
  7. [Achieving goals more effectively and efficiently](#7-achieving-goals-more-effectively-and-efficiently)
  8. [Introduction to value-based deep reinforcement learning](#8-introduction-to-value-based-deep-reinforcement-learning)
  9. [More stable value-based methods](#9-more-stable-value-based-methods)
  10. [Sample-efficient value-based methods](#10-sample-efficient-value-based-methods)
  11. [Policy-gradient and actor-critic methods](#11-policy-gradient-and-actor-critic-methods)
  12. [Advanced actor-critic methods](#12-advanced-actor-critic-methods)
  13. [Towards artificial general intelligence](#13-towards-artificial-general-intelligence)

### Detailed table of content

#### 1. Introduction to deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-1)\)
- \(No Notebook\)
      
#### 2. Mathematical foundations of reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-2)\)
- \([Notebook](/notebooks/chapter_02/chapter-02.ipynb)\)
  - Implementations of several MDPs: 
    - Bandit Walk
    - Bandit Slippery Walk
    - Slippery Walk Three
    - Random Walk
    - Russell and Norvig's Gridworld from AIMA
    - FrozenLake
    - FrozenLake8x8
#### 3. Balancing immediate and long-term goals
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-3)\)
- \([Notebook](/notebooks/chapter_03/chapter-03.ipynb)\) 
  - Implementations of methods for finding optimal policies:
    - Policy Evaluation
    - Policy Improvement
    - Policy Iteration
    - Value Iteration
#### 4. Balancing the gathering and utilization of information
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-4)\)
- \([Notebook](/notebooks/chapter_04/chapter-04.ipynb)\)
  - Implementations of exploration strategies for bandit problems:
    - Random
    - Greedy
    - E-greedy
    - E-greedy with linearly decaying epsilon
    - E-greedy with exponentially decaying epsilon
    - Optimistic initialization
    - SoftMax
    - Upper Confidence Bound
    - Bayesian
#### 5. Evaluating agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-5)\)
- \([Notebook](/notebooks/chapter_05/chapter-05.ipynb)\)
  - Implementation of algorithms that solve the prediction problem (policy estimation):
    - On-policy first-visit Monte-Carlo prediction
    - On-policy every-visit Monte-Carlo prediction
    - Temporal-Difference prediction (TD)
    - n-step Temporal-Difference prediction (n-step TD)
    - TD(λ)
#### 6. Improving agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-6)\)
- \([Notebook](/notebooks/chapter_06/chapter-06.ipynb)\)
  - Implementation of algorithms that solve the control problem (policy improvement):
    - On-policy first-visit Monte-Carlo control
    - On-policy every-visit Monte-Carlo control
    - On-policy TD control: SARSA
    - Off-policy TD control: Q-Learning
    - Double Q-Learning
#### 7. Achieving goals more effectively and efficiently
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-7)\)
- \([Notebook](/notebooks/chapter_07/chapter-07.ipynb)\)
  - Implementation of more effective and efficient reinforcement learning algorithms:
    - SARSA(λ) with replacing traces
    - SARSA(λ) with accumulating traces
    - Q(λ) with replacing traces
    - Q(λ) with accumulating traces
    - Dyna-Q
    - Trajectory Sampling
#### 8. Introduction to value-based deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-8)\)
- \([Notebook](/notebooks/chapter_08/chapter-08.ipynb)\)
  - Implementation of a value-based deep reinforcement learning baseline:
    - Neural Fitted Q-iteration (NFQ)
#### 9. More stable value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-9)\)
- \([Notebook](/notebooks/chapter_09/chapter-09.ipynb)\)
  - Implementation of ""classic"" value-based deep reinforcement learning methods:
    - Deep Q-Networks (DQN)
    - Double Deep Q-Networks (DDQN)
#### 10. Sample-efficient value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-10)\)
- \([Notebook](/notebooks/chapter_10/chapter-10.ipynb)\)
  - Implementation of main improvements for value-based deep reinforcement learning methods:
    - Dueling Deep Q-Networks (Dueling DQN)
    - Prioritized Experience Replay (PER)
#### 11. Policy-gradient and actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-11)\)
- \([Notebook](/notebooks/chapter_11/chapter-11.ipynb)\)
  - Implementation of classic policy-based and actor-critic deep reinforcement learning methods:
    - Policy Gradients without value function and Monte-Carlo returns (REINFORCE)
    - Policy Gradients with value function baseline trained with Monte-Carlo returns (VPG)  
    - Asynchronous Advantage Actor-Critic (A3C)
    - Generalized Advantage Estimation (GAE)
    - \[Synchronous\] Advantage Actor-Critic (A2C)
#### 12. Advanced actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-12)\)
- \([Notebook](/notebooks/chapter_12/chapter-12.ipynb)\)
  - Implementation of advanced actor-critic methods:
    - Deep Deterministic Policy Gradient (DDPG)
    - Twin Delayed Deep Deterministic Policy Gradient (TD3)
    - Soft Actor-Critic (SAC)
    - Proximal Policy Optimization (PPO)
#### 13. Towards artificial general intelligence
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-13)\)
- \(No Notebook\)
","Docker allows for creating a single environment that is more likely to work on
all systems. At the moment, only running the code from the [ Docker] container
(below) is supported. To run the code on a GPU, you have to additionally install
[n Nvidia- Docker]"
1677,✍🏻 这里是写博客的地方 —— Halfrost-Field 冰霜之地,"# Halfrost-Field 冰霜之地

<p align='center'>
<img src='contents/images/background-cover_.png'>
</p>

<p align='center'>
<img src=""https://img.shields.io/badge/Total%20Reading-3.18M-success"">
<img src=""https://img.shields.io/badge/Total%20Word%20Count-578129-success"">
<img src=""https://img.shields.io/badge/build-passing-brightgreen.svg"">
<img src=""https://img.shields.io/badge/platform-%20iOS | Android | Mac | Web%20-ff69b4.svg"">
<img src=""https://img.shields.io/badge/language-Objective--C-orange.svg"">
<img src=""https://img.shields.io/badge/language-Swift-abcdef.svg"">
<img src=""https://img.shields.io/badge/language-JavaScript-yellow.svg"">
<img src=""https://img.shields.io/badge/language-Golang-26C2F0.svg"">
<img src=""https://visitor-badge.laobi.icu/badge?page_id=halfrost.Halfrost-Field"" alt=""visitor badge""/>  
</p>

<p align='center'>
<a href=""https://github.com/halfrost/Halfrost-Field/blob/master/LICENSE""><img alt=""GitHub"" src=""https://img.shields.io/github/license/halfrost/Halfrost-Field?label=License""></a>
<a href=""https://halfrost.com""><img src=""https://img.shields.io/badge/Blog-Halfrost--Field-80d4f9.svg?style=flat""></a>
<a href=""http://weibo.com/halfrost""><img src=""https://img.shields.io/badge/weibo-@halfrost-f974ce.svg?style=flat&colorA=f4292e""></a>
<a href=""https://twitter.com/halffrost""><img src=""https://img.shields.io/badge/twitter-@halffrost-F8E81C.svg?style=flat&colorA=009df2""></a>
<a href=""https://www.zhihu.com/people/halfrost/activities""><img src=""https://img.shields.io/badge/%E7%9F%A5%E4%B9%8E-@halfrost-fd6f32.svg?style=flat&colorA=0083ea""></a>
<img src=""https://img.shields.io/badge/made%20with-=1-blue.svg"">
<a href=""https://github.com/halfrost/Halfrost-Field/pulls""><img src=""https://img.shields.io/badge/PR-Welcome-brightgreen.svg""></a>
</p>

## ⭐️ 为什么要建这个仓库

世人都说阅读开源框架的源代码对于功力有显著的提升，所以我也尝试阅读开源框架的源代码，并对其内容进行详细地分析和理解。在这里将自己阅读开源框架源代码的心得记录下来，希望能对各位开发者有所帮助。我会不断更新这个仓库中的文章，如果想要关注可以点 `star`。



## 📖 目录


# 🐳 Go

| Project | Version | Article |
|:-------:|:-------:|:------|
|Go|1.16 darwin/amd64| [Go 初学者的成长之路](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/new_gopher_tips.md)<br>[初探 Go 的编译命令执行过程](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_command.md)<br>[深入解析 Go Slice 底层实现](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_slice.md)<br>[如何设计并实现一个线程安全的 Map ？(上篇)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_map_chapter_one.md)<br>[如何设计并实现一个线程安全的 Map ？(下篇)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_map_chapter_two.md)<br>[面试中 LRU / LFU 的青铜与王者](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/LRU:LFU_interview.md)<br>[深入研究 Go interface 底层实现](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_interface.md)<br>[Go reflection 三定律与最佳实践](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_reflection.md)<br>[深入 Go 并发原语 — Channel 底层实现](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_channel.md)<br>|
|空间搜索|golang/geo|[如何理解 n 维空间和 n 维时空](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/n-dimensional_space_and_n-dimensional_space-time.md)<br>[高效的多维空间点索引算法 — Geohash 和 Google S2](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_spatial_search.md)<br>[Google S2 中的 CellID 是如何生成的 ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_CellID.md)<br>[Google S2 中的四叉树求 LCA 最近公共祖先](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_lowest_common_ancestor.md)<br>[神奇的德布鲁因序列](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_De_Bruijn.md)<br>[四叉树上如何求希尔伯特曲线的邻居 ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_Hilbert_neighbor.md)<br>[Google S2 是如何解决空间覆盖最优解问题的?](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/go_s2_regionCoverer.md)<br>-----------------------------------------------------------------------------<br> [Code \<T\> share keynote](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Go/T_Salon_share.pdf)|


----------------------------

# 🍉 Machine Learning


| Project | Version | Article |
|:-------:|:-------:|:------|
|机器学习|Andrew Ng Stanford University|[目录](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/contents.md)<br>-----------------------------------------------------------------<br>[Week1 —— What is Machine Learning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/What_is_Machine_Learning.md)<br>[Week1 —— Linear Regression with One Variable (Gradient Descent)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Gradient_descent.ipynb)<br>[Week2 —— Multivariate Linear Regression](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Multivariate_Linear_Regression.ipynb) <br>[Week2 —— Computing Parameters Analytically](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Computing_Parameters_Analytically.ipynb)<br>[Week2 —— Octave Matlab Tutorial](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Octave_Matlab_Tutorial.ipynb)<br>[Week3 —— Logistic Regression](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Logistic_Regression.ipynb)<br>[Week3 —— Regularization](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Regularization.ipynb)<br>[Week4 —— Neural Networks Representation](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Neural_Networks_Representation.ipynb)<br>[Week5 —— Neural Networks Learning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Neural_Networks_Learning.ipynb)<br>[Week5 —— Backpropagation in Practice](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Backpropagation_in_Practice.ipynb)<br>[Week6 —— Advice for Applying Machine Learning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Advice_for_Applying_Machine_Learning.ipynb)<br>[Week6 —— Machine Learning System Design](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Machine_Learning_System_Design.ipynb)<br>[Week7 —— Support Vector Machines](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Support_Vector_Machines.ipynb)<br>[Week8 —— Unsupervised Learning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Unsupervised_Learning.ipynb)<br>[Week8 —— Dimensionality Reduction](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Dimensionality_Reduction.ipynb)<br>[Week9 —— Anomaly Detection](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Anomaly_Detection.ipynb)<br>[Week9 —— Recommender Systems](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Recommender_Systems.ipynb)<br>[Week10 —— Large Scale Machine Learning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Large_Scale_Machine_Learning.ipynb)<br>[Week11 —— Application Example: Photo OCR](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Machine_Learning/Application_Photo_OCR.ipynb)|

---------------------------

# 🚀 JavaScript

| Project | Version | Article |
|:-------:|:-------:|:------|
| JavaScript | ECMAScript 6 | [JavaScript 新手的踩坑日记](https://github.com/halfrost/Halfrost-Field/blob/master/contents/JavaScript/lost_in_javascript.md) <br> [从 JavaScript 作用域说开去](https://github.com/halfrost/Halfrost-Field/blob/master/contents/JavaScript/javascript_scope.md)<br> [揭开 this & that 之迷](https://github.com/halfrost/Halfrost-Field/blob/master/contents/JavaScript/%E6%8F%AD%E5%BC%80%20this%20%26%20that%20%E4%B9%8B%E8%BF%B7.md)<br>[JSConf China 2017 Day One — JavaScript Change The World](https://github.com/halfrost/Halfrost-Field/blob/master/contents/JavaScript/JSConf%20China%202017%20Day%20One%20%E2%80%94%20JavaScript%20Change%20The%20World.md) <br> [JSConf China 2017 Day Two — End And Beginning](https://github.com/halfrost/Halfrost-Field/blob/master/contents/JavaScript/jsconf_china_2017_final.md)|
| Vue.js | 2.3.4 | [Vue 全家桶 + Electron 开发的一个跨三端的应用](https://github.com/halfrost/vue-objccn/blob/master/README.md) <br> [大话大前端时代(一) —— Vue 与 iOS 的组件化](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Vue/%E5%A4%A7%E8%AF%9D%E5%A4%A7%E5%89%8D%E7%AB%AF%E6%97%B6%E4%BB%A3(%E4%B8%80)%20%E2%80%94%E2%80%94%20Vue%20%E4%B8%8E%20iOS%20%E7%9A%84%E7%BB%84%E4%BB%B6%E5%8C%96.md) <br>|
| Ghost | 1.24.8 | [Ghost 博客搭建日记](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Ghost/ghost_build.md)<br> [Ghost 博客升级指南](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Ghost/ghost_update.md) <br>[Ghost 博客炫技""新""玩法](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Ghost/ghost_feature.md) <br>[博客跑分优化](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Ghost/ghost_fast.md)<br>--------------------------------------------------------------------------------<br>|

-------

# 📱 iOS



| Project | Version | Article |
|:-------:|:-------:|:------|
| Weex | 0.10.0 | [Weex 是如何在 iOS 客户端上跑起来的](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Weex/Weex_how_to_work_in_iOS.md)<br> [由 FlexBox 算法强力驱动的 Weex 布局引擎](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Weex/Weex_layout_engine_powered_by_Flexbox's_algorithm.md)<br> [Weex 事件传递的那些事儿](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Weex/Weex_events.md) <br>[Weex 中别具匠心的 JS Framework](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Weex/Weex_ingenuity_JS_framework.md)<br>[iOS 开发者的 Weex 伪最佳实践指北](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Weex/Weex_pseudo-best_practices_for_iOS_developers.md)<br> |
| BeeHive | v1.2.0 | [BeeHive —— 一个优雅但还在完善中的解耦框架](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/beehive.md)<br>|
| 组件化 | 路由与解耦 | [iOS 组件化 —— 路由设计思路分析](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/iOSRouter/iOS_Router.md)<br>|
| ReactiveObjC | 2.1.2 |[函数响应式编程 (FRP) 从入门到 ""放弃""—— 基础概念篇](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/functional_reactive_programming_concept.md) <br> [函数响应式编程 (FRP) 从入门到 ""放弃""—— 图解 RACSignal 篇](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/ios_rac_racsignal.md) <br> [ReactiveCocoa 中 RACSignal 是如何发送信号的](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racsignal.md) <br> [ReactiveCocoa 中 RACSignal 所有变换操作底层实现分析(上)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racsignal_operations1.md)<br>[ReactiveCocoa 中 RACSignal 所有变换操作底层实现分析(中)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racsignal_operations2.md) <br> [ReactiveCocoa 中 RACSignal 所有变换操作底层实现分析(下)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racsignal_operations3.md) <br> [ReactiveCocoa 中 RACSignal 冷信号和热信号底层实现分析](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_hot_cold_signal.md)<br> [ReactiveCocoa 中 集合类 RACSequence 和 RACTuple 底层实现分析](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racsequence_ractuple.md) <br> [ReactiveCocoa 中 RACScheduler 是如何封装 GCD 的](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_racscheduler.md) <br> [ReactiveCocoa 中 RACCommand 底层实现分析](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_raccommand.md)<br> [ReactiveCocoa 中 奇妙无比的“宏”魔法](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/RAC/reactivecocoa_macro.md)|
| Aspect |  | [iOS 如何实现Aspect Oriented Programming (上)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Aspect/ios_aspect.md)<br>[iOS 如何实现Aspect Oriented Programming (下)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Aspect/ios_aspect.md)<br> |
| ObjC | objc runtime 680 |  [神经病院 Objective-C Runtime 入院第一天—— isa 和 Class](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ObjC/objc_runtime_isa_class.md)<br>[神经病院 Objective-C Runtime 住院第二天——消息发送与转发](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ObjC/objc_runtime_objc_msgsend.md) <br>[神经病院 Objective-C Runtime 出院第三天——如何正确使用 Runtime](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ObjC/how_to_use_runtime.md) <br> [ObjC 对象的今生今世](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ObjC/objc_life.md)<br>|
| iOS Block |  | [深入研究 Block 捕获外部变量和 __block 实现原理](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Block/ios_block.md) <br> [深入研究 Block 用 weakSelf、strongSelf、@weakify、@strongify 解决循环引用](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Block/ios_block_retain_circle.md)<br> |
| iOS Simulator |  | [给iOS 模拟器“安装”app文件](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ios_simulator_ios_sim.md) <br> [Remote debugging on iOS with Safari Web Inspector](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/remote_debugging_on_ios_with_safari_web_inspector.md) |
| xcconfig |  | [手把手教你给一个 iOS app 配置多个环境变量](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ios_multienvironments.md) <br>  |
| Jenkins | Weekly Release 2.15 | [手把手教你利用 Jenkins 持续集成 iOS 项目](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ios_jenkins.md) <br>  |
| StoryBoard |  | [关于 IB_DESIGNABLE / IBInspectable 的那些需要注意的事](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ios_ib_designable_ibinspectable.md) <br>  |
| WWDC 2016 |  | [WWDC2016 Session 笔记 - Xcode 8 Auto Layout 新特性](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/WWDC%202016/WWDC_2016_iOS10_Xcode8_AutoLayout.md) <br>[WWDC2016 Session 笔记 - iOS 10 UICollectionView 新特性](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/WWDC%202016/WWDC_2016_iOS10_UICollectionView.md) <br>[WWDC2016 Session 笔记 - iOS 10  推送 Notification 新特性](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/WWDC%202016/WWDC_2016_iOS10_Notification.md) <br>  |
| Jekyll |  | [如何快速给自己构建一个温馨的""家""——用 Jekyll 搭建静态博客](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Jekyll/Jekyll.md) <br>|
| Swift | 2.2 | [iOS如何优雅的处理“回调地狱Callback hell”(二)——使用Swift](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Swift/iOS_Callback_Hell_Swift.md) <br>  |
| PromiseKit |  | [iOS如何优雅的处理“回调地狱Callback hell”(一)——使用PromiseKit](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/PromiseKit/iOS_Callback_Hell_PromiseKit.md) <br>  |
| WebSocket |  | [微信,QQ 这类 IM app 怎么做——谈谈 Websocket](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/WebSocket/iOS_WebSocket.md) <br>|
| Realm |  | [Realm 数据库 从入门到“放弃”](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Realm/Realm%E6%95%B0%E6%8D%AE%E5%BA%93%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E2%80%9C%E6%94%BE%E5%BC%83%E2%80%9D.md) <br>[手把手教你从 Core Data 迁移到 Realm](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Realm/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BB%8ECore%20Data%E8%BF%81%E7%A7%BB%E5%88%B0Realm.md) <br> |
| Core Data |  | [iOS Core Data 数据迁移 指南](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/CoreData/iOS_Core_Data.md) <br> |
| Cordova |  | [iOS Hybrid 框架 ——PhoneGap](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Cordova/iOS%20Hybrid%20%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94PhoneGap.md)<br> [Remote debugging on iOS with Safari Web Inspector](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Cordova/Remote_debug.md) <br>|
| Animation |  | [iOS app 旧貌换新颜(一) — Launch Page 让 Logo ""飞""出屏幕](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Launchpage/iOS_launchpage_logo_fly.md) <br> |
| Interview |  | [iOS 面试总结](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/ios_interview.md) <br> |
| Phabricator |  | [搭建Phabricator我遇到的那些坑](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Phabricator/%E6%90%AD%E5%BB%BAPhabricator%E6%88%91%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91.md)<br> [Code review - Phabricator Use guide introduce](https://github.com/halfrost/Halfrost-Field/blob/master/contents/iOS/Phabricator/Code%20review%20-%20Phabricator%20Use%20guide%20introduce.md)<br>-----------------------------------------------------------------------<br>|

----------------------------




# 📝 Protocol

| Project | Version | Article |
|:-------:|:-------:|:------|
|HTTP|1.1|[HTTP 基础概述](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP.md)<br>|
|HTTP|2|[[RFC 7540] Hypertext Transfer Protocol Version 2 (HTTP/2)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2_RFC7540.md)<br>[解开 HTTP/2 的面纱：HTTP/2 是如何建立连接的](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-begin.md)<br>[HTTP/2 中的 HTTP 帧和流的多路复用](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-HTTP-Frames.md)<br>[HTTP/2 中的帧定义](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-HTTP-Frames-Definitions.md)<br>[HTTP/2 中的 HTTP 语义](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-HTTP-Semantics.md)<br>[HTTP/2 中的注意事项](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-Considerations.md)<br>[HTTP/2 中的常见问题](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2-Frequently-Asked-Questions.md)<br>[[RFC 7541] HPACK: Header Compression for HTTP/2](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2_RFC7541.md)<br>[详解 HTTP/2 头压缩算法 —— HPACK](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2_Header-Compression.md)<br>[HTTP/2 HPACK 实际应用举例](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTP:2_HPACK-Example.md)<br>[[RFC 7301] TLS Application-Layer Protocol Negotiation Extension](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_ALPN.md)|
|WebSocket|Version 13|[全双工通信的 WebSocket](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/WebSocket.md)<br>|
|Protocol-buffers|proto3|[高效的数据压缩编码方式 Protobuf](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/Protocol-buffers-encode.md)<br>[高效的序列化/反序列化数据方式 Protobuf](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/Protocol-buffers-decode.md)|
| FlatBuffers |1.9.0|[深入浅出 FlatBuffers 之 Schema](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/FlatBuffers-schema.md)<br>[深入浅出 FlatBuffers 之 Encode](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/FlatBuffers-encode.md)<br>[深入浅出 FlatBuffers 之 FlexBuffers](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/FlatBuffers-flexBuffers.md)|
|TCP||[TCP/IP 基础概述](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TCP:IP.md)<br>[Advance\_TCP](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/Advance_TCP.md)|
|TLS|Cryptography<br>|[密码学概述](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-cryptography-overview.md)<br>[漫游对称加密算法](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-symmetric-encryption.md)<br>[翱游公钥密码算法](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-asymmetric-encryption.md)<br>[消息的“指纹”是什么？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-one-way-hash.md)<br>[消息认证码是怎么一回事？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-message-authentication-code.md)<br>[无处不在的数字签名](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-digital-signature.md)<br>[随处可见的公钥证书](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-digital-certificate.md)<br>[秘密的实质——密钥](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-cipherkey.md)<br>[无法预测的根源——随机数](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-random-number.md)
|TLS|TLS 1.3<br>|[如何部署 TLS 1.3 ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS1.3_start.md)<br>[[RFC 6520] TLS & DTLS Heartbeat Extension](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_Heartbeat.md)<br>[[RFC 8446] The Transport Layer Security (TLS) Protocol Version 1.3](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_RFC8446.md)<br>[TLS 1.3 Introduction](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Introduction.md)<br>[TLS 1.3 Handshake Protocol](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Handshake_Protocol.md)<br>[TLS 1.3 Record Protocol](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Record_Protocol.md)<br>[TLS 1.3 Alert Protocol](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Alert_Protocol.md)<br>[TLS 1.3 Cryptographic Computations](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Cryptographic_Computations.md)<br>[TLS 1.3 0-RTT and Anti-Replay](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_0-RTT.md)<br>[TLS 1.3 Compliance Requirements](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Compliance_Requirements.md)<br>[TLS 1.3 Implementation Notes](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Implementation_Notes.md)<br>[TLS 1.3 Backward Compatibility](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Backward_Compatibility.md)<br>[TLS 1.3 Overview of Security Properties](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/TLS_1.3_Security_Properties.md)|
|HTTPS|TLS 1.2/TLS 1.3|[HTTPS 温故知新（一） —— 开篇](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-begin.md)<br>[HTTPS 温故知新（二） —— TLS 记录层协议](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-record-layer.md)<br>[HTTPS 温故知新（三） —— 直观感受 TLS 握手流程(上)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-TLS1.2_handshake.md)<br>[HTTPS 温故知新（四） —— 直观感受 TLS 握手流程(下)](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-TLS1.3_handshake.md)<br>[HTTPS 温故知新（五） —— TLS 中的密钥计算](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-key-cipher.md)<br>[HTTPS 温故知新（六） —— TLS 中的 Extensions](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/HTTPS-extensions.md)<br>|
|QUIC|v44|[如何部署 QUIC ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/Protocol/QUIC_start.md)<br>------------------------------------------------------------------------<br>|


----------------------------


# ❄️ 星霜荏苒


| Project | Version | Article |
|:-------:|:-------:|:------|
| 开篇 |  | [开篇](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/start.md)|
| 2017 |  |[【星霜荏苒】 - 程序员如何在技术浪潮的更迭中保持较高的成长速度 ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/2017.md)|
| 2018 |  |[【星霜荏苒】 - 如何看待软件开发 ？](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/2018.md)|
| 2019 |  |[【星霜荏苒】 - 不甘当学渣，努力作学霸，最终是学民](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/2019.md)|
| 2020 |  |[【星霜荏苒】 - 下一个五年计划起航 ！](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/2020.md)|
| 2021 |  |[后疫情时代下美国留学 CS Master 申请纪实](https://github.com/halfrost/Halfrost-Field/blob/master/contents/TimeElapse/2021.md)<br>-----------------------------------------------------------------------------------------<br>|


## ❗️ 勘误

+ 如果在文章中发现了问题，欢迎提交 PR 或者 issue，欢迎大神们多多指点🙏🙏🙏


## ♥️ 感谢

感谢Star！

[![Stargazers over time](https://starchart.cc/halfrost/Halfrost-Field.svg)](https://starchart.cc/halfrost/Halfrost-Field)

## 🌈 公众号

![](./contents/images/wechat-qr-code.png)

## ©️ 转载

<a rel=""license"" href=""http://creativecommons.org/licenses/by/4.0/""><img alt=""知识共享许可协议"" style=""border-width:0"" src=""https://i.creativecommons.org/l/by/4.0/88x31.png"" /></a><br />本<span xmlns:dct=""http://purl.org/dc/terms/"" href=""http://purl.org/dc/dcmitype/Text"" rel=""dct:type"">作品</span>由 <a xmlns:cc=""http://creativecommons.org/ns#"" href=""https://github.com/halfrost/Halfrost-Field"" property=""cc:attributionName"" rel=""cc:attributionURL"">halfrost</a> 创作，采用<a rel=""license"" href=""http://creativecommons.org/licenses/by/4.0/"">知识共享署名 4.0 国际许可协议</a>进行许可。","Summarize: # Halfrost-Field is a badge for iOS, Android, Mac, and Web users. The
badge can be downloaded from GitHub or downloaded from the Halfrost website. It
can also be downloaded as an app from the App Store."
3073,HFS is a web file server to run on your computer. Share folders or even a single file thanks to the virtual file system.,"# HFS: HTTP File Server

![logo and motto](hfs-logo-color-motto.svg)

## Introduction

HFS is the best way via web to access or share files from your disk.

- It's a server software, share files **fresh from your disk**. Don't rely on services, be independent! 
- It's all very **fast**. Try download zipping 100GB, it starts immediately!
- **Easy to use**. HFS tries to detect problems and suggest solutions.
- Share **even a single file** with our *virtual file system*, even with a different name, all without touching the real file. Present things the way you want!
- **Watch** all activities in real-time.
- **Control bandwidth**, decide how much to give.

This project is in an early stage, few things are missing, but it already rocks!

This is a full rewrite of [the Delphi version](https://github.com/rejetto/hfs2).
You won't find all previous features here (yet), but still we got:

## How does it work

- run HFS on your computer, configuration page automatically shows up
- select what files and folders you want to be accessible
- possibly create accounts and limit access to files
- access those files from a phone or another computer just using a browser

## Features

- https
- unicode
- virtual file system
- mobile friendly front-end
- search
- accounts
- resumable downloads
- resumable uploads
- download folders as zip archive
- simple website serving
- plug-ins
- log file
- speed throttler
- admin web interface
- virtual hosting (plug-in)
- anti-brute-force (plug-in)

## Installation

1. go to https://github.com/rejetto/hfs/releases
2. click on `Assets`
3. **download** the right version for your computer
4. launch `hfs` file
5. the browser should automatically open on `localhost` address, so you can configure the rest in the Admin-panel.
   - if a browser cannot be opened on the computer where you are installing HFS, 
     you should enter this command in HFS console: `create-admin <PASSWORD>`

If you access *Admin-panel* via localhost, by default HFS **won't** require you to login.
If you don't like this behavior, disable it in the Admin-panel or enter this console command `config localhost_admin false`.

### Other systems

If your system is not Windows/Linux/Mac, you can try this alternative version:

0. [install node.js](https://nodejs.org)
1. execute: `sudo npm -g i hfs`
2. launch: `hfs`

Configuration and other files will be stored in `%HOME%/.vfs`

With this installation method, you can update with `sudo npm -g update hfs` .

### Service

If you want to run HFS as a service
- if you installed with `npm` on Windows 
  - service installation
      - run `npx qckwinsvc2 install name=""HFS"" description=""HFS"" path=""%APPDATA%\npm\node_modules\hfs\src\index.js"" args=""--cwd %HOMEPATH%\.hfs"" now`
  - service update 
    - run `npx qckwinsvc2 uninstall name=""HFS""`
    - run `npm -g update hfs`
    - run the service installation again

## Plug-ins

To install a plugin you just copy its folder inside `plugins` folder.

Delete it to uninstall.

HFS will ignore all folders with `-disabled` at the end of the name.

## Why you should upgrade from HFS 2.x to 3

As you can see from the list of features, we already have some goods that you cannot find in HFS 2.
Other than that, you can also consider: 

- it's more robust: it was designed to be an always-running server, while HFS 1-2 was designed for occasional usage (transfer and quit) 
- passwords are never really stored, just a non-reversible hash is
- faster search (up to 12x)
- more flexible permissions

But you may still want to stay with HFS 2.x (so far) for the following reasons

- smaller
- more tested
- classic window interface (can be easier for some people)

## Console commands

If you have access to HFS' console, you can enter commands. Start with `help` to have a full list. 

## Configuration

Configuration can be done in several ways
- accessing the Admin-panel with your browser
  - it will automatically open when you start HFS. Bookmark it. if your port is 8000 the address will be http://localhost:8000/~/admin 
- after HFS has started you can enter console command in the form `config NAME VALUE`
- passing via command line at start in the form `--NAME VALUE`
- directly editing the `config.yaml` file. As soon as you save it is reloaded and changes are applied

`NAME` stands for the property name that you want to change. See the complete list below.

### Where is it stored
Configuration is stored in the file `config.yaml`, which is stored in the same folder of `hfs.exe` if you are using this
kind of distribution on Windows, or `USER_FOLDER/.hfs` on other systems.

You can decide a different file and location by passing `--config SOME_FILE` at command line, or inside
an *env* called `HFS_CONFIG`. Any relative path provided is relative to the *cwd*.  

### Configuration properties
- `port` where to accept http connections. Default is 80.
- `vfs` the files and folders you want to expose. For details see the dedicated following section.
- `log` path of the log file. Default is `access.log`.
- `log_rotation` frequency of log rotation. Accepted values are `daily`, `weekly`, `monthly`, or empty string to disable. Default is `weekly`.
- `error_log` path of the log file for errors. Default is `error.log`.
- `errors_in_main_log` if you want to use a single file for both kind of entries. Default is false.
- `accounts` list of accounts. For details see the dedicated following section.
- `mime` command what mime-type to be returned with some files.
  E.g.: `""*.jpg"": image/jpeg`
  You can specify multiple entries, or separate multiple file masks with a p|pe.
  You can use the special value `auto` to attempt automatic detection.
- `max_kbps` throttle output speed. Default is Infinity.
- `max_kbps_per_ip` throttle output speed on a per-ip basis. Default is Infinity.
- `zip_calculate_size_for_seconds` how long should we wait before the zip archive starts streaming, trying to understand its finale size. Default is 1.
- `open_browser_at_start` should HFS open browser on localhost on start? Default is true.
- `https_port` listen on a specific port. Default is 443.
- `cert` use this file for https certificate. Minimum to start https is to give a cert and a private_key. Default is none.
- `private_key` use this file for https private key. Default is none.
- `allowed_referer` you can decide what domains can link to your files. Wildcards supported. Default is empty, meaning any.
- `block` a list of rules that will block connections. E.g.:
    ```
    block:
      - ip: 192.168.0.90
    ```
  Syntax supports, other than simple address, `*` as wildcard and CIDR format.
- `plugins_config` this is a generic place where you can find/put configuration for each plugin, at least those that need configuration.
- `enable_plugins` if a plugin is not present here, it won't run. Defaults is `[ antibrute ]`.
- `custom_header` provide HTML code to be put at the top of your Frontend. Default is none.
- `localhost_admin` should Admin be accessed without credentials when on localhost. Default is true.
- `proxies` number of proxies between server and clients to be trusted about providing clients' IP addresses. Default is 0.
- `keep_unfinished_uploads` should unfinished uploads be deleted immediately when interrupted. Default is true.

#### Virtual File System (VFS)

The virtual file system is a tree of files and folders, collectively called *nodes*.
By default, a node is a folder, unless you provide for it a source that's a file.
Valid keys in a node are:
- `name`: this is the name we'll use to display this file/folder. If not provided, HFS will infer it from the source. At least `name` or `source` must be provided.
- `source`: absolute or relative path of where to get the content
- `children`: just for folders, specify its virtual children.
  Value is a list and its entries are nodes.
- `rename`: similar to name, but it's  from the parent node point.
  Use this to change the name of  entries that are read from the source, not listed in the VFS.
  Value is a dictionary, where the key is the original name.
- `mime`: specify what mime to use for this resource. Use ""auto"" for automatic detection.
- `default`: to be used with a folder where you want to serve a default html. E.g.: ""index.html"". Using this will make `mime` default to ""auto"".
- `can_read`: specify who can download this entry. Value is a `WhoCan` descriptor, which is one of these values
    - `true`: anyone can, even people who didn't log in. This is normally the default value.
    - `false`: no one can.
    - `""*""`: any account can, i.e. anyone who logged in.
    - `[ frank, peter ]`: the list of accounts who can.
- `can_see`: specify who can see this entry. Even if a user can download you can still make the file not appear in the list.
- `can_upload` specify who can upload. Applies to folders with a source. Default is none. 
  Remember that to see in the list you must also be able to download, or else you won't see it anyway. Value is a `WhoCan` descriptor, refer above.
- `masks`: maps a file mask to a set of properties as the one documented in this section. E.g.
  ```
  masks:
    ""**/*.mp3"":
      can_read: false
    ""*.jpg|*.png"": 
      mime: auto
  ```

Permissions set on an inner element will override inherited permissions. This means that you can restrict access to folder1,
and yet decide to give free access to folder1/subfolder2.   

#### Accounts

All accounts go under `accounts:` property, as a dictionary where the key is the username.
E.g.
```
accounts:
    admin:
        password: hello123
        belongs: group1
    guest:
        password: guest
    group1:
```

As soon as the config is read HFS will encrypt passwords (if necessary) in a non-reversible way. It means that `password` property is replaced with an encrypted property: `srp`.

As you can see in the example, `group1` has no password. This implies that you cannot log in as `group1`, but still `group1` exists and its purpose is to
gather multiple accounts and refer to them collectively as `group1`, so you can quickly share powers among several accounts.

For each account entries, this is the list of properties you can have:

- `ignore_limits` to ignore speed limits. Default is `false`.
- `redirect` provide a URL if you want the user to be redirected upon login. Default is none.
- `admin` set `true` if you want to let this account log in to the Admin-panel. Default is `false`.
- `belongs` an array of usernames of other accounts from which to inherit their permissions. Default is none.

## License

[GPLv3](https://github.com/rejetto/hfs/blob/master/LICENSE.txt)
","HFS is the best way via web to access or share files from your disk. HFS tries
to detect problems and suggest solutions. It's a full rewrite of [the Delphi
version](https://github.com/rejetto/hfs2). It was designed to be an an-running
server, while HFS-2 was designed for occasional usage. It is free and open-
source, with no plans to release it to the general public. It can be downloaded
and installed from GitHub."
2353,Hummingbird compiles trained ML models into tensor computation for faster inference.,"# Hummingbird

[![PyPI version](https://badge.fury.io/py/hummingbird-ml.svg)](https://badge.fury.io/py/hummingbird-ml)
[![](https://github.com/microsoft/hummingbird/workflows/Build/badge.svg?branch=main)](https://github.com/microsoft/hummingbird/actions)
![](https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10-blue)
[![coverage](https://codecov.io/gh/microsoft/hummingbird/branch/main/graph/badge.svg)](https://codecov.io/github/microsoft/hummingbird?branch=main)
[![Gitter](https://badges.gitter.im/hummingbird-ml/community.svg)](https://gitter.im/hummingbird-ml/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)
[![Downloads](https://pepy.tech/badge/hummingbird-ml)](https://pepy.tech/project/hummingbird-ml)

<p>
    <img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/hb-logo-notext.png""  width=200  >
    <br>
</p>

## Introduction
*Hummingbird* is a library for compiling trained traditional ML models into tensor computations. *Hummingbird* allows users to seamlessly leverage neural network frameworks (such as [PyTorch](https://pytorch.org/)) to accelerate traditional ML models. Thanks to *Hummingbird*, users can benefit from: (1) all the current and future optimizations implemented in neural network frameworks; (2) native hardware acceleration; (3) having a unique platform to support for both traditional and neural network models; and have all of this (4) without having to re-engineer their models.

Currently, you can use *Hummingbird* to convert your trained traditional ML models into [PyTorch](https://pytorch.org/), [TorchScript](https://pytorch.org/docs/stable/jit.html), [ONNX](https://onnx.ai/), and [TVM](https://docs.tvm.ai/)). *Hummingbird* [supports](https://github.com/microsoft/hummingbird/wiki/Supported-Operators) a variety of ML models and featurizers.  These models include
[scikit-learn](https://scikit-learn.org/stable/) Decision Trees and Random Forest, and also [LightGBM](https://github.com/Microsoft/LightGBM) and [XGBoost](https://github.com/dmlc/xgboost) Classifiers/Regressors. Support for other neural network backends and models is on our [roadmap](https://github.com/microsoft/hummingbird/wiki/Roadmap-for-Upcoming-Features-and-Support).

Hummingbird also provides a convenient uniform ""inference"" API following the Sklearn API. This allows swapping Sklearn models with Hummingbird-generated ones without having to change the inference code. By converting the models to PyTorch and TorchScript it also becomes possible to serve them using [TorchServe](https://github.com/pytorch/serve).

## How Hummingbird Works

Hummingbird works by reconfiguring algorithmic operators such that we can perform more regular computations which are amenable to vectorized and GPU execution. Each operator is slightly different, and we incorporate multiple strategies. This example explains one of Hummingbird's strategies for translating a decision tree into tensors involving GEMM  (GEneric Matrix Multiplication), where we implement the traversal of the tree using matrix multiplications.  (GEMM is one of the three tree conversion strategies we currently support.)


<p align=""center"">
    <img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/1-simple-reg-tree.png"" width=600 >
    <br>
    <em>Simple decision tree</em>
</p>


In this example, the decision tree has four decision nodes (orange), and five leaf nodes (blue). The tree takes a feature vector with five elements as input. For example, assume that we want to calculate the output of this observation:


<p align=""center"">
    <img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/2-calc-output.png"" width=400 >
</p>

**Step 1:** Multiply the `input tensor` with tensor `A` (computed from the decision tree model above) that captures the relationship between input features and internal nodes. Then compare it with tensor `B` which is set to the value of each internal node (orange) to create the tensor `input path` that represents the path from input to node. In this case, the tree model has 4 conditions and the input vector is 5, therefore, the shape of tensor `A` is 5x4 and tensor B is 1x4.

<p align=""center"">
<img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/3-matrix.png"" width=450 >
</p>

**Step 2:** The `input path` tensor will be multiplied with tensor `C` that captures whether the internal node is a parent of that internal node, and if so, whether it is in the left or right sub-tree (left = 1, right =-1, otherwise =0) and then check the equals with tensor `D` that captures the count of the left child of its parent in the path from a leaf node to the tree root to create the tensor output path that represents the path from node to output. In this case, this tree model has 5 outputs with 4 conditions, therefore, the shape of tensor `C` is 4x5 and tensor `D` is 1x5.

<p align=""center"">
<img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/4-matrixnext.png"" width=450 >
</p>

**Step 3:** The `output path` will be multiplied with tensor `E` that captures the mapping between leaf nodes to infer the final prediction. In this case, tree model has 5 outputs, therefore, shape of tensor `E` is 5x1.

<p align=""center"">
<img src=""https://github.com/microsoft/hummingbird/raw/main/website/images/5-singletensor.png"" width=450>
</p>

And now Hummingbird has compiled a tree-based model using the GEMM strategy!  For more details, please see [Figure 3](https://scnakandala.github.io/papers/TR_2020_Hummingbird.pdf) of our paper.


_Thank you to [Chien Vu](https://www.linkedin.com/in/vumichien/) for contributing the graphics and descriptions in his [blog](https://towardsdatascience.com/standardizing-traditional-machine-learning-pipelines-to-tensor-computation-using-hummingbird-7a0b3168670) for this example!_

## Installation

Hummingbird was tested on Python 3.8, 3.9 and 3.10 on Linux, Windows and MacOS machines.  It is recommended to use a virtual environment (See: [python3 venv doc](https://docs.python.org/3/tutorial/venv.html) or [Using Python environments in VS Code](https://code.visualstudio.com/docs/python/environments).)

Hummingbird requires PyTorch >= 1.6.0. Please go [here](https://pytorch.org/) for instructions on how to install PyTorch based on your platform and hardware.

Once PyTorch is installed, you can get Hummingbird from pip with:
```
python -m pip install hummingbird-ml
```

If you require the optional dependencies lightgbm and xgboost, you can use:
```
python -m pip install hummingbird-ml[extra]
```


See also [Troubleshooting](TROUBLESHOOTING.md) for common problems.

## Examples

See the [notebooks](notebooks) section for examples that demonstrate use and speedups.

In general, Hummingbird syntax is very intuitive and minimal. To run your traditional ML model on DNN frameworks, you only need to `import hummingbird.ml` and add `convert(model, 'dnn_framework')` to your code. Below is an example using a [scikit-learn random forest](https://scikit-learn.org/stable/modules/ensemble.html#forest) model and [PyTorch](https://pytorch.org/) as target framework.

```python
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from hummingbird.ml import convert, load

# Create some random data for binary classification
num_classes = 2
X = np.random.rand(100000, 28)
y = np.random.randint(num_classes, size=100000)

# Create and train a model (scikit-learn RandomForestClassifier in this case)
skl_model = RandomForestClassifier(n_estimators=10, max_depth=10)
skl_model.fit(X, y)

# Use Hummingbird to convert the model to PyTorch
model = convert(skl_model, 'pytorch')

# Run predictions on CPU
model.predict(X)

# Run predictions on GPU
model.to('cuda')
model.predict(X)

# Save the model
model.save('hb_model')

# Load the model back
model = load('hb_model')
```

# Documentation

The API documentation is [here](https://microsoft.github.io/hummingbird/).

You can also read about Hummingbird in our blog post [here](https://www.microsoft.com/en-us/research/group/gray-systems-lab/articles/announcing-hummingbird-a-library-for-accelerating-inference-with-traditional-machine-learning-models/).

For more details on the vision and on the technical details related to Hummingbird, please check our papers:

* [Tensors: An abstraction for general data processing](http://www.vldb.org/pvldb/vol14/p1797-koutsoukos.pdf). Dimitrios Koutsoukos, Supun Nakandala, Konstantinos Karanasos, Karla Saur, Gustavo Alonso, Matteo Interlandi. PVLDB 2021.

* [A Tensor Compiler for Unified Machine Learning Prediction Serving](https://www.usenix.org/system/files/osdi20-nakandala.pdf). Supun Nakandala, Karla Saur, Gyeong-In Yu, Konstantinos Karanasos, Carlo Curino, Markus Weimer, Matteo Interlandi. OSDI 2020.
* [Compiling Classical ML Pipelines into Tensor Computations for One-size-fits-all Prediction Serving](http://learningsys.org/neurips19/assets/papers/27_CameraReadySubmission_Hummingbird%20(5).pdf). Supun Nakandala, Gyeong-In Yu, Markus Weimer, Matteo Interlandi. System for ML Workshop. NeurIPS 2019

# Contributing

We welcome contributions! Please see the guide on [Contributing](CONTRIBUTING.md).

Also, see our [roadmap](https://github.com/microsoft/hummingbird/wiki/Roadmap-for-Upcoming-Features-and-Support) of planned features.

# Community

Join our community! [![Gitter](https://badges.gitter.im/hummingbird-ml/community.svg)](https://gitter.im/hummingbird-ml/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)

# Authors

* Supun Nakandala ([@scnakandala](https://github.com/scnakandala))
* Matteo Interlandi ([@interesaaat](https://github.com/interesaaat))
* Karla Saur ([@ksaur](https://github.com/ksaur))

# Special Thanks

* Masahiro Hiramori ([@mshr-h](https://github.com/mshr-h)) for the ongoing contributions
* Masahiro Masuda ([@masahi](https://github.com/masahi)) for the TVM and batching contributions

# License
[MIT License](LICENSE)
","Hummingbird is a library for compiling trained traditional ML models into tensor
computations. It allows users to seamlessly leverage neural network frameworks
(such as [PyTorch](https://pytorch.org/) Users can benefit from: (1) all the
current and future optimizations implemented in neural network. frameworks; (2)
native hardware acceleration; (3) having a unique platform to support for both
traditional and neural network models; and (4) without having to re-engineer
their models."
454,"Author Flutter experiences in Typescript. No native bridge, no V8. Just Dart. From runtime to virtual machine.","# Hydro-SDK
![Logo](https://github.com/chgibb/hydro-sdk/blob/master/img/socialImage.png)

Author Flutter experiences in Typescript. No native bridge, no V8. Just Dart. From runtime to virtual machine.

# Sponsored by
Possibly you! See [sponsoring Hydro-SDK](https://github.com/sponsors/hydro-sdk)
# Documentation and Tutorials 
https://hydro-sdk.io/
# Features
## Hot Reload, Incremental Compilation
![Action Gif](https://github.com/hydro-sdk/counter-app/blob/master/media/action-gif.gif)

## Function Maps
![Function maps screenshot](https://github.com/chgibb/hydro-sdk/blob/master/img/sourceMapScreenShot.png)

# Roadmap
Hydro-SDK is a software development kit (SDK) enabling Flutter developers to write portions of their app (or their entire app) using Typescript. It is a project with one large, ambitious goal. ""Become React Native for Flutter"".
It aims to do that by:

1. Decoupling the API surface of Flutter from the Dart programming language.
2. Decoupling the development time experience of Flutter from the Dart programming language.
3. Providing first-class support for over-the-air distribution of code.
4. Providing an ecosystem of packages from pub.dev, automatically projected to supported languages and published to other package systems.

Hydro-SDK is currently only suitable for simple content. A few dozen Flutter widgets are supported. Content built with Hydro-SDK can be updated over the air using Hydro-SDK's built-in [codepush](https://hydro-sdk.io/blog/fluttering-over-the-air). Content can be authored in a similar manner as in Dart with hot-reload and limited IDE debugging support.

## Near Term
### API Support
Continue expanding available Dart and Flutter APIs with automatic language projection (ALP) using [Structured Wrapper and Interface generator for Dart (SWID)](https://github.com/hydro-sdk/hydro-sdk/tree/master/lib/swid).  This effort is where the overwhelming amount of focus currently is. Having a stable and high quality ALP will allow for the re-use of existing packages from `pub.dev` in Typescript. This will also allow for expanding support for authoring Hydro-SDK content to other programming languages.

This work is tracked at a high-level in the [Binding Generator project](https://github.com/hydro-sdk/hydro-sdk/projects/5) and in other sub-projects.
This work is required to expand support for Flutter 2.8 (and 2.10) and is directly related to the following umbrella issues.
- [☂️ Support Flutter 2.8](https://github.com/hydro-sdk/hydro-sdk/issues/773)
- [☂️ Cables](https://github.com/hydro-sdk/hydro-sdk/issues/684)

## Medium Term
### Developer Ergonomics  
Improving developer ergonomics with more affective testing workflows and support for Typescript language features like `async` / `await` interop with Dart.
This is being scoped and tracked at a high level in umbrella issues.
- [☂️ Improved Test Ergonomics](https://github.com/hydro-sdk/hydro-sdk/issues/843)
- [☂️ Typescript 4](https://github.com/hydro-sdk/hydro-sdk/issues/844)
### Performance
Establishing performance baselines through benchmarking. Some efforts to improve performance. This is being scoped and tracked at a high level in umbrella issues.
- [☂️ Optimizing Lua Compiler](https://github.com/hydro-sdk/hydro-sdk/issues/797)
- [☂️ Size Benchmarks](https://github.com/hydro-sdk/hydro-sdk/issues/846)
- [☂️ CPU and Memory Benchmarks](https://github.com/hydro-sdk/hydro-sdk/issues/845)

## Long Term Projects
## Developer Ergonomics
Lower the barrier to entry for developers with non-mobile backgrounds that are interested in trying out Flutter and Hydro-SDK.
- [☂️ Component Preview](https://github.com/hydro-sdk/hydro-sdk/issues/763)
## Services
### Registry
A closed-source component registry for first-class support for hosting and running over-the-air (OTA) update packages built using the open-source Hydro-SDK. This service is already live as a basic [MVP](https://registry.hydro-sdk.io/#/).

### Registry Value Adds
In the future, building paid features such as targeted distribution, analytics, feature flagging and logging directly into Registry are expected to be a viable path to monetization.

### Language Support
Hydro-SDK is language agnostic. In the future, it should be possible to support authoring content in other programming languages to attract users from other ecosystems (Flixel, .NET, Xamarin).
### Tier 1 (hot-reload, programmatic debugging, function maps)
- [&check;] Typescript  
    https://github.com/TypeScriptToLua/TypeScriptToLua
### Tier 2 (hot-reload, programmatic debugging)
- [ ] Haxe  
    https://github.com/HaxeFoundation/haxe    
- [ ] C#  
    https://github.com/yanghuan/CSharp.lua 

# Prior Art for Common Flutter Runtime
- Dartlua, Andre Lipke https://github.com/PixelToast/dartlua
- React Native, Facebook https://reactnative.dev/
- LuaViewSdk, Alibaba https://github.com/alibaba/LuaViewSDK
- ILRuntime, Ourpalm https://github.com/Ourpalm/ILRuntime
- Flutterscript, Charles Lowell https://github.com/cowboyd/flutterscript
- Lisp in Dart, Suzuki Hisao https://github.com/nukata/lisp-in-dart
- widget_extensions https://github.com/canewsin/widget_extensions
- xamarin.flutter https://github.com/adamped/xamarin.flutter

# Prior Art for Structured Wrapper and Interface generator for Dart
- Dartle, https://docs.google.com/document/d/1Ei0ZIqdqNjxTHoGB3Ay6SWQg3DMSsKKWl70XoBUCFTA/edit
- Pigeon, https://github.com/flutter/packages/tree/master/packages/pigeon
- Djinni, https://github.com/dropbox/djinni
- Uniffi-rs, https://github.com/mozilla/uniffi-rs
- TS to CSharp, https://github.com/mono/TsToCSharp


# Interesting Links and Resources
- John C. Reynolds, Definitional Interpreters for Higher-Order Programming Languages https://surface.syr.edu/cgi/viewcontent.cgi?article=1012&context=lcsmith_other
- Andrey Mokhov, Neil Mitchell, Simon Peyton Jones, Build Systems a la carte: Theory and Practice https://www.cambridge.org/core/journals/journal-of-functional-programming/article/build-systems-a-la-carte-theory-and-practice/097CE52C750E69BD16B78C318754C7A4
- Fabio Mascarenhas de Queiroz, Optimized Compilation of a Dynamic Language to a Managed Runtime Environment http://www.lua.inf.puc-rio.br/publications/mascarenhas09optimized.pdf
- Michael Schroder, Optimizing Lua Using Run-time Type Specialization https://www.complang.tuwien.ac.at/anton/praktika-fertig/schroeder/thesis.pdf
- Satoru Kawahara, Optimizing Lua VM Bytecode Using Global Dataflow Analysis https://nymphium.github.io/pdf/opeth_report.pdf
- Haichuan Wang, Compiler and Runtime Techniques for Optimizing Dynamic Scripting Languages https://www.ideals.illinois.edu/bitstream/handle/2142/78638/WANG-DISSERTATION-2015.pdf?sequence=1&isAllowed=y
- Kevin Williams, Jason McCandless, David Gregg, Dynamic Interpretation for Dynamic Scripting Languages https://sites.cs.ucsb.edu/~ckrintz/papers/TCD-CS-2009-37.pdf
- Dibyendu Majumdar, Ravi Lua 5.3 bytecode reference https://the-ravi-programming-language.readthedocs.io/en/latest/lua_bytecode_reference.html
- Kein-Hong Man, A No-Frills Introduction to Lua 5.1 VM Instructions http://luaforge.net/docman/83/98/ANoFrillsIntroToLua51VMInstructions.pdf
- Rust Programming Language Request for Comments 2603, Symbol Name Mangling https://github.com/rust-lang/rfcs/blob/master/text/2603-rust-symbol-name-mangling-v0.md
- Itanium C++ Application Binary Interface Specification https://itanium-cxx-abi.github.io/cxx-abi/abi.html
- Yan Dong Zonz, Wen Hui-chao, Exploration and practice of Flutter packet size management https://tech.meituan.com/2020/09/18/flutter-in-meituan.html
- Shangxian, Meituan takeaway Flutter dynamic practice https://tech.meituan.com/2020/06/23/meituan-flutter-flap.html
- Vyacheslav Egorov, 10 Years of Dart (Slides)
    https://mrale.ph/talks/vmil2020/
","Hydro-SDK is a software development kit (SDK) enabling Flutter developers to
write portions of their app (or their entire app) using Typescript. It is a
project with one large, ambitious goal. ""Become React Native for Flutter"""
2533,"""I use Arch btw"" but it's a Turing-complete programming language.","# I use Arch btw

> ""I use Arch btw"" but it's a Turing-complete programming language.

## Introduction

I use Arch btw is an esoteric programming language based on [Brainfuck](
https://en.wikipedia.org/wiki/Brainfuck) in which the commands are the following
keywords:

`i`, `use`, `arch`, `linux`, `btw`, `by`, `the`, `way`, `gentoo`.

See the [language specification](./docs/language_specification.md) for more
information.

This repository contains a [C/C++ library implementing I use Arch btw](./lib)
and a dependent [command-line interpreter](./cmd).

## Getting Started

### Prerequisites

- [CMake](https://cmake.org/) >= 3.23
- a C99 and C++17 compiler toolchain supported by CMake and providing POSIX
  [`unistd.h`](https://en.wikipedia.org/wiki/Unistd.h), `mmap()`, `MAP_ANON`,
  and defining `__x86_64__` when targeting x86-64

### Building

    $ mkdir build
    $ cd build
    $ cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..
    $ cmake --build .

### Installation

    # cmake --install .

### Usage

#### Command-line interpreter

    $ i-use-arch-btw <source file>

Try some of the [example I use Arch btw programs](./examples) as source files.

For details:

    $ i-use-arch-btw -h

#### C/C++ library

For documentation of the public API, see the [public headers](
./lib/include/iuab).

For example usage, see the [command-line interpreter](./cmd) and [example
libiuab programs](./examples/libiuab).

## License

This software is licensed under the [GNU General Public License, version 3](
./LICENSE.md).
","Arch btw is an esoteric programming language based on [Brainfuck] in which the
commands are the followingkeywords: i, use,arch, linux, btw, by, the, way, and
the way. The language is written in C99 and C++ using CMake. The software is
licensed under the [GNU General Public License, version
3](https://en.wikipedia.org/wiki/Brainfuck) and the [public headers]
(https://cmake.org/)"
3304,This is only a copy of INSPINIA - Responsive Admin Theme,"# INSPINIA IN+ - WebApp Admin Theme

Version v2.9.1

[Origin Project](https://wrapbootstrap.com/theme/inspinia-responsive-admin-theme-WB0R5L90S)

This is only a demo! 

If you're only going to study these source code, be free to view them.

If you want to deploy or use it (especially on commercial), Please purchase $36 for it on {wrap}Bootstrap.

All rights are reserved by the [owner](https://wrapbootstrap.com/user/WebAppLayers) of this project.

## Introduction

INSPINIA Admin Theme is a premium admin dashboard template with flat design concept. It is fully responsive admin dashboard template built with Bootstrap 3.x and 4.x Framework, HTML5 and CSS3. It has a huge collection of reusable UI components integrated with jQuery plugins. **It can be used for all type of web applications like custom admin panel, project management system, admin dashboard or application backend**

## Inspinia package contents

### Bootstrap 4.x

+ HTML5 Full Version
+ HTML5 Seed Project
+ MVC5 Full Version (VS 2015)
+ MVC5 Seed Project (VS 2015)
+ .NET Core 2.1 Full Version (VS 2017)
+ .NET Core 2.1 Seed Project (VS 2017)
+ Landing Page

### Bootstrap 3.3.7

+ Ruby on Rails (4.2.3) Full Version
+ Ruby on Rails (4.2.3) Seed Project
+ Meteor Full (1.4.2.3) Version
+ Meteor Seed (1.4.2.3) Project
+ Angular (1.5) Full Version
+ Angular (1.5) Seed Project

### Utilities

+ Documentation
+ LESS, SASS, SCSS
+ PSD Files (more than 50 main views and components full layered)

## Static version, AngularJS, ASP.NET MVC5/MVC6/.NET Core 1.0, Meteor and Ruby on Rails version

Inspinia theme includes six versions. One with all static html/css/js files that is great for any php, java or other programming language application. AngularJS 1.5 version that contains a number of controllers and directives written specifically to support angular 1.5 framework. ASP.NET MVC5 and .NET core 2.1 projects for Visual Studio, Meteor 1.4.2.3 version for node.js developers and Ruby on Rails 4.2.3 version.

## Features

+ Responsive layout (desktops, tablets, mobile devices)
+ Built with new Bootstrap 3.3.7
+ Flat UI with clean aesthetic style
+ Boxed View, Fluid view
+ HTML5 & CSS3
+ Responsive video
+ 7 different charts libraries
+ Animations CSS3
+ Various styles of tables
+ Well structured code
+ Drop zone file upload
+ Forum view
+ Truncate feature
+ Two timeline design
+ Google maps
+ Datamaps
+ Markdown
+ Agile Board
+ Copy to clipboard
+ Outlook view
+ Blog view
+ Social feed
+ Tour feature
+ Code editor
+ Foo table
+ Vote list page
+ Small chat
+ Customized modal view
+ Nestable list
+ Validation
+ Landing page
+ PDF viewer
+ SeedProject for all version
+ Loading buttons
+ Mailbox
+ File manager
+ i18 support
+ Masonry
+ Teams board
+ Slick carousel
+ Off canvas menu
+ Metrics/Analytic view
+ Tag input
+ Right sidebar
+ Custom Material Design Skin
+ Pin board with yellow notes
+ Invoice
+ Diff feature
+ Dual select
+ Idle timer
+ User profile
+ Widgets page
+ Ecommerce
+ Clock picker
+ Project detail
+ Form validation
+ Credit card form
+ Projects list
+ Shoping cart view
+ FAQ view
+ Calendar view
+ Gallery view
+ c3 charts
+ Local storage
+ Autocomplete
+ Lock screen view
+ Login, register, error pages
+ Draggable panels
+ and many more...

## Credits

Please note that all images used in theme are presented only for the demo purposes and cannot be used in your projects. Images come from https://unsplash.com/ and https://uifaces.co/. Images are subjected to copyright of their authors. It is the responsibility of the buyer to check its copyright before usage.

+ Bootstrap css front-end framework.
+ jQuery fast, small, and feature-rich JavaScript library.
+ DataTables advanced interaction controls in any HTML table
+ DropzoneJS library that provides drag'n'drop file uploads with image previews
+ Flot simple but powerful chart plugin
+ FullCalendar is a jQuery plugin that provides a full-sized, drag & drop calendar
+ Gritter Notification plugin
+ iCheck Custom radio and checkbox buttons
+ IonRangeSlider Easy and light range slider plugin
+ Jasny additional components for bootstrap framework.
+ Jeditable Edit In Place Plugin For jQuery
+ jQueryUI set of user interface built on top of the jQuery
+ bootstrapdatepicker datepicker
+ Chosen plugin that makes long, unwieldy select boxes much more user-friendly
+ jsKnob Nice, downward compatible, touchable, jQuery dial.
+ metisMenu Easy menu jQuery plugin for Twitter bootstrap
+ Morris.js good-looking charts library
+ nouislider Lightweight javascript range slider
+ Pace Automatic page load progress bar
+ Peity simple jQuery plugin that converts an element's content into a simple <svg> mini, pie, line or bar chart
+ Rickshaw toolkit for creating interactive time series graphs
+ Sparkline jQuery inline chart library
+ Steps smart UI component which allows you to easily create wizard-like interfaces
+ Summernote Super Simple WYSIWYG Editor on Bootstrap
+ Switchery Checkbox inputs in iOS 7 style switches.
+ Validation jQuery Validation Plugin
+ jvectormap Java Script pluggin for vector maps
+ Unsplash all images from Unsplash - Free hi-resolution photos
+ UiFaces all avatar faces from UiFaces
+ UIrouter Angular solution to flexible routing with nested views
+ UICalendar Directive for FullCalendar
+ UIBootstrap Bootstrap directives for Angular
+ Knob jsKnob directive for angular
+ NgSwitchery Switchery input style for angular
+ AngularPeity Peity chart directive
+ NgEasyPieChart Easy Pie chart directive
+ AngularFlot Flot chart directive
+ AngularRickshaw Rickshaw chart directive
+ AngularSummernote Summernote directive for Angular
+ AngularNouiSlider NouiSlider directive for Angular
+ AngularDatapicker Data picker directive
+ AngularDatatables DataTables directive for Angular
+ AngularSelect Chosen plugin directive
+ AngularChartJS ChartJs directive for Angular
+ Nestable Nestable list jQuery plugin
+ codeMirror Code editor jQuery plugin
+ GoogleMapsApi Google maps API
+ EmailTemplate Transactional Email template
+ ngGrid NgGrid directive
+ uiTree Nestable list for AngularJS
+ uiCodeMirror Code Mirror directive
+ uiMap Google mpas directive
+ jqGrid jqGrid plugin for jQuery
+ ClassHelper Class helper
+ AnimatedHeader Animated header plugin
+ MockupMacBookPro MackBookPro mockup
+ BrowserWindow Chrome browser mockup
+ Timeline: Vertical timeline inspiration
+ iPhoneMockup iPhone mockup
+ iPhonePicture iPhone picture mockup
+ PerspectiveMockup Perspective iPad mockup
+ ImageCrop: Plugin for image crop function
+ Toastr: Notification plugin
+ Notify: Angular native notification plugin
+ AngularColorPicker: Angular native color picker plugin
+ BootstrapColorPicker: jQuery color picker plugin
+ WOW: Animations for scroll down page
+ Meanjs: MEANJS full-stack JavaScript
+ LightboxGallery: touch-enabled image & video gallery
+ GulpGen: Angular Gulp generator
+ GruntGen: Angular Grunt generator
+ jsTree: jsTree is jquery plugin, that provides interactive trees
+ RTLbootstrap: Right-to-left capability for Bootstrap 3
+ AngularTranslate: Angular translate directive
+ ocLazyLoad: ocLazyLoad module for Angular
+ ngImgCrop: Image crop plugin for Angular
+ angularDiff: Angular wrapper around Google's diff_match_patch library
+ ngIdle: Angular idle timer
+ googleDiff: The Diff Match and Patch libraries
+ tinycon: A small library for manipulating the favicon
+ idletimer: jQuery idle timer
+ spinners: A collection of loading indicators animated with CSS
+ uiSortable: AngularJS bindings for jQuery UI Sortable
+ meteor: Open-source platform for building top-quality web apps
+ meteorDropZone: A Meteor package for the popular file picker
+ prettyTextDiff: A wrapper around Google's diff_match_patch library
+ clockPicker: Special clock picker
+ chartist: Javascript chart library
+ ngChartist: Directive for chartist in angularJS
+ dateRangePicker: Date range picker for Bootstra
+ ngDateRange: Angular directive for date range picker
+ awesomeBootstrapCheckbox: Custom checkbox and radio controls
+ fooTable: Table jQuery plugin
+ angularFootable: Angular directive for FooTable
+ sweetAlert: Custom javascript alerts
+ ngSweetAlert: Angular directive for SweetAlert
+ masonry: Cascading grid layout library
+ wuMasonry: Angular directive for Masonry
+ slick: Custom carousel feature
+ ngSlick: Angular directive for Slick
+ toaster: Angular directive for Toastr notification
+ select2: The jQuery replacement for select boxes
+ uiSelect: AngularJS-native version of Select2
+ i18next: i18next is a internationalization framework
+ ladda: Buttons with built-in loading indicators.
+ angularladda: Angular directive for Ladda
+ dotdotdot: Cross-browser ellipsis for multiple line content
+ touchspin: Input spinner component for Bootstrap 3
+ ngTouchSpin: Angular directive for TuchSpin
+ tour: Tours with Bootstrap Popovers.
+ angularTour: Angular directive for Tour
+ flags: Sets of image flags
+ clipboard: Copy text to the clipboard library
+ ngClipboard: Angular directive for Clipboard
+ c3: D3-based charts
+ d3: JavaScript library for visualizing data with HTML, SVG, and CSS.
+ c3angular: Angular directive for c3
+ markdown: Bootstrap plugin for markdown editing.
+ ngTree: Angular directive for jsTree
+ datamaps: SVG map visualizations using D3.js
+ ngDatamaps: Angular directive for Datamaps
+ ngTagsInput: Tags input directive for AngularJS
+ tagsinput: Tags input control
+ dualListBox: Bootstrap Dual Listbox
+ bsDualListbox: Angular directive for Bootstrap Dual Listbox
+ socialButtons: Social Sign-In Buttons
+ pdfjs: A general-purpose, web standards-based platform for parsing and rendering PDFs.
+ angularPdfjs: Angular directive for pdfjs
+ flowRouter: Client Side Router for Meteor
+ typehead: Flexible JavaScript library for typeaheads
+ textSpinners: css spinners
+ passwortMeter: Password Strength Meter for Twitter Bootstrap

## Change Log

### Version 2.9

+ New .NET Core 2.1 Full project with support Bootstrap 4.1
+ New .NET Core 2.1 Seed project with support Bootstrap 4.1
+ Upgrade MVC5 Full Project to support Bootstrap 4.1
+ Upgrade MVC5 Seed Project to support Bootstrap 4.1

### Version 2.8

+ Upgrade HTML5 Full Project to support Bootstrap 4.1
+ Upgrade HTML5 Seed Project to support Bootstrap 4.1
+ Upgrade HTML5 Landing Page to support Bootstrap 4.1
+ Fix several issues regarding styles and script

### Version 2.7.1

+ Fix media-body style on right sidebar
+ Fix wrapper height calc in ReactJs project
+ Fix hamburger button event - add preventDefault
+ Fix slimscroll function call in skin.config.js
+ Fix form-control style to allow input sizing
+ Fix path for slimScroll in Grunt project
+ Fix min-height issue with small content
+ Fix background menu on md-skin
+ Fix background tabs in top-navigation layout
+ Fix typo in navbarheight variable
+ Fix label style to release sizing option
+ Fix angular-cli issue with beta release
+ Fix typos in main.js files in Metero projects
+ Upgrade Laravel starter project to 5.4
+ Upgrade Angular starter project to 4.0

### Version 2.7

+ New Text Spinners
+ New Password Meter
+ New Spinners usage example
+ New Activity Stream
+ Add Touch Punch - gesture support for jquery-ui
+ Add hide menu feature after state change
+ Add missing WOW effect on landing page
+ Add missing animation effect on file manager
+ Upgrade Font Awesome to 4.7.0
+ Upgrade jQuery to 3.1.1
+ Upgrade jQuery UI yo 1.12.1
+ Upgrade DataTables to 1.10.13
+ Upgrade jQuery Validation to 1.15.1
+ Upgrade Meteor to 1.4.2.3
+ Upgrade jQuery Steps to 1.1.0
+ Upgrade Switchery to 0.8.2
+ Upgrade Angular 2 project to CLI
+ Correct typo in layouts page
+ Correct bg-colors in helper class
+ Correct selected typo in css and css preprocessor
+ Improve chat-avater styles
+ Improve second level menu in Rails project
+ Improve third level menu in md-skin
+ Improve collapse-link function for nested panels
+ Improve select2 style
+ Improve menu style after collapse secend level menu
+ Improve seleced feature in older IE browser
+ Improve style for Summernote editor
+ Clear styles from rules supported old browsers
+ Clear overwrite native media-body bootstrap class
+ Fix jumping issue menu on landing page
+ Fix modalInstance call from modal controller in Angular
+ Fix missing .m class for general margin
+ Fix sidebar-panel heihgt in Angular project
+ Fix loading buttons in Angular project
+ Fix closing secend level menu in Rails project
+ Fix menu navigation strucutre in Meanjs project

### Version 2.6.2.1

+ Fix twsb:bootstrap package version in Meteor projects

### Version 2.6.2

+ New Angular 2 Starter Project
+ New ReactJS Starter Project
+ New Laravel 5 Starter Project
+ Upgrade to Bootstrap 3.3.7 (exclude Meteor - waiting for twsb update)
+ Fix the issue with hidden href on mobile mini navbar
+ Fix the flickering menu
+ Fix Safari modal issue
+ Fix Summernote fullscreen mode
+ Fix css width helper classes
+ Improve content height on fixed navbar
+ Improve landing page on mobile view
+ Add documentation for new starter projects

### Version 2.6.1 (mainly focused on .NET projects)

+ New .NET Core 1.0 Full project
+ New .NET Core 1.0 Seed Project

### Version 2.6

+ New PDF viewer
+ New Map library - Datamaps
+ New Tag input control
+ New Autocomplete feature
+ New Dual select control
+ New Social buttons
+ New File input component
+ New Psd files (more then 50 psd full layered)
+ New Helper css classes
+ New Router for Meteor project - Flow router
+ Improve style for Chosen control
+ Improve custom switch style (add disabled option)
+ Update Meteor project to 1.4.1 version
+ Update ChartJS (except Angular directive)
+ Update Summernote (except Angular directive)
+ Update Dropzone
+ Update Angular Seed Gulp Project
+ Fix jumping menu issue
+ Fix boxed layout style
+ Fix several small css issues
+ Deprecated jEditable - library not more maintained
+ Update documentation

### Version 2.5 (mainly focused on AngularJS projects)

+ Update all AngularJS projects to the latest AngularJS 1.5
+ Update UI Bootstrap to 1.1.2
+ Update UI-Select to 0.14
+ Update AngularJS Chosen
+ Update Dropzone
+ Update Datepicker
+ Update VectorMap directive
+ Update UI Sortable
+ Update Core AngularJS Seed Project
+ Update AngularJS Gulp Seed Project
+ Update AngularJS Grunt Seed Project
+ Update MEANJS to the latest 0.4.2
+ Update documentation for AngularJS projects

### Version 2.4

+ New ASP.NET MVC6 Full project
+ New ASP.NET MVC6 Seed Project
+ New Loading buttons
+ New Tour feature
+ New Imput spinner control
+ New C3 charts
+ New Copy to clipboard feature
+ New Truncate string feature
+ New Markdown editor
+ New Word flags image set
+ New i18 support
+ New Schoping cart view
+ New 22 PSD files (Article, Blog, Clients, Contacts 2, Credit Cart form, FAQ, File manager, Issue tracker, Orders, Outlook view, Pin board, Product detail, Product edit - all version), Product grid, Product list, Profile 2, Social feed, Teams board, Vote list)
+ Add tree view in angualr versions
+ Add new html5 export buttons for Data Tables
+ Add serialize example for Agile board
+ Add new fixed option for navbar
+ Add slide effect for menu on landing page on mobile
+ Improve btn-default style
+ Fix video full screen
+ Fix button shadows
+ Fix drop down text color on md-skin
+ Fix pace.js on fixed option
+ Fix few glitch animation effect
+ Fix nav-tabs on mobile
+ Fix second level menu on md-skin
+ Fix Gulp Angular version
+ Fix VS2015 build
+ Fix menu flash in .net version
+ Improve print mode
+ Improve RTL version
+ Improve html helper in .net version
+ Replace iron-router-active to router-autoscroll package
+ Update angular-datepicker
+ Update Meteor to 1.2.1
+ Update Rails version
+ Update Bootstrap to 3.3.6
+ Update pace.js to 1.0.2

### Version 2.3

+ New Slick carousel
+ New Dashboard v.5
+ New Masonry grid layout
+ New Profile page
+ New Product detail page
+ New Credit card form
+ New Contacts page
+ New Vote list page
+ New Material Design skin
+ New Landing page - psd file
+ New select2 integration
+ Add Toastr notification (AngularJS version)
+ Add full screen panel option
+ Add scroll panel option
+ Add uiSelect library (AngularJS version)
+ Add Table tools for DataTables (Meteor version)
+ Upgrade to Bootstrap 3.3.5
+ Update DataTables to 1.10.8
+ Update Rails version to 4.2.3
+ Fix Landing page menu on small devices
+ Fix backdrop of modal window with animate.css
+ Fix dropdown orientation
+ Fix profile menu of fixed sidebar option
+ Fix menu flashing
+ Fix panel title with large text
+ Fix woff2 files in .net version
+ Improve style for panels
+ Update documentation

### Version 2.2

+ New Metrics page
+ New Social feed page
+ New Tabs page
+ New Products grid page
+ New Products list page
+ New Foo table plugin
+ New Chartist - chart library
+ New Product edit page
+ New Orders example page
+ New Clock picker plugin
+ New Custom checkbox and radio controls
+ New Date range picker
+ New Custom javascript alerts
+ New sections in Landing page
+ New full layered PSD files (All dashboards, basic forms, buttons, calendar, charts, email pages, login, timeline, data tables, projects, tabs, widgets, wizard, errors, contact.. more than 20 main views)
+ Incorporate Landing page to full versions (Meteor, AngularJS, Ruby, ASP.NET)
+ Add Outlook view to angularJS version
+ Add Off canvas view to angularJS version
+ Improve panel view
+ Update metisMenu plugin
+ Update moment library
+ Update slimScroll plugin
+ Fix modal backdrop
+ Fix ng-annotate in Gulp version
+ Fix/update bower full dependencies list
+ Fix toastr page in Meteor version
+ Fix dataTables issue in AngularJs version
+ Fix wrapper height on fixed top navbar
+ Update documentation

### Version 2.1 mainly focused on Meteor version.

+ Meteor Full version
+ Meteor Seed Project
+ Update documentation

### Version 2.0

+ New Small chat
+ New Diff feature
+ New Live favicon
+ New Idle timer
+ New loading indicators
+ New local storage support
+ New validation in Angular version
+ New Blog page
+ New Article page
+ New Agile board page
+ New Issue list page
+ New Teams board page
+ New Outlook view
+ New Clients page
+ New Forgot password page
+ New Right sidebar
+ New Off canvas menu
+ New draggable panels in Angular version
+ New initial collapse panels
+ Improve btn-link style
+ Improve height of page wrapper
+ Update Bootstrap 3.3.4
+ Update PACE.JS
+ Update Morris chart library
+ Fix Font awesome patch in MVC version
+ Fix border color in single-line control
+ Fix responsive of login two columns page
+ Fix collapse effect in FAQ page
+ Fix syntax in bower file with all dependencies
+ Fix Icons in toaster notification
+ Fix Footer margins with fixed sidebar
+ Update documentation

### Version 1.9.2

+ Add Ruby on Rails full version
+ Add Ruby on Rails seed project
+ Add initial documentation for Ruby on Rails version

### Version 1.9.1

+ Fix Google fonts link in Grunt project
+ Add Font Awesome to bower.json in Gulp project

### Version 1.9

+ Add New layout
+ Add Horizontal menu
+ Add File tree view
+ Add Chat view
+ Add Dashboard 4
+ Add Right-to-left support
+ Add New login page
+ Add Multi language support for Angular version
+ Add Angular Grunt Seed Project + Inspinia theme
+ Add Angular Gulp Seed Project + Inspinia theme
+ Add Lazy Load for Angular dependencies
+ Add Full bower.json file with all dependencies
+ Add Inspinia MEANJS boilerplate with built in authentication
+ Add image crop for Angular version
+ Replace old gallery with new Lightbox gallery
+ Upgrade Font Awesome to 4.3.0
+ Upgrade Flot chart to 0.8.3
+ Fix dropdown issue
+ Fix tooltips issue
+ Fix wizard issue in Angular version
+ Fix bugs reported by users
+ Upgrade documentation

### Version 1.8

+ Add new Timeline v.2
+ Add SeedProject to Static version
+ Add Image crop function
+ Add new Forum main view
+ Add new Forum post view
+ Add Color picker
+ Add Angular notification service
+ Add Toastr notifications
+ Upgrade Angular to 1.3.7
+ Add animations to Landing page
+ Add Identity2 Framework in MVC5 Seed Project
+ Add smooth effect in collapse fixed sidebar
+ Fix navbar drop down in mobile device
+ Fix scroll position in landing page
+ Fix icon in small todo component

### Version 1.7

+ New ASP.NET MVC5 version
+ New ASP.NET MVC5 SeedProject
+ New CSS Preprocessor - SCSS
+ Improvements for css/less/sass style

### Version 1.6

+ New Landing Page
+ Add Code editor
+ Add Google maps
+ Add Nestable List
+ Add Email templates
+ Add ngGrid
+ Add jqGrid
+ Add Validation page
+ Add Modal window page
+ Add Nested view configuration
+ Add Responsive dataTables plugin
+ Upgrade Drag and Drop
+ Upgrade Bootstrap to 3.3
+ Upgrade jQuery to 2.1
+ Upgrade jQuery UI to 1.11
+ Upgrade metsiMenu to 1.1
+ Upgrade dataTables
+ Upgrade Full Calendar
+ Improvements for css/less/sass style
+ Fixed bugs reported by users

### Version 1.5

+ AngularJS version!
+ SASS files
+ Fixed Sidebar
+ Video responsive
+ ChartJS
+ Improvements for css/less/sass style
+ Upgrade Font Awesome 4.2
+ Upgrade jQuery 2.1

### Version 1.4

+ Update Bootstrap to 3.2.0
+ Add new Dashboard 3
+ Add Footer (normal, fixed)
+ Add new project list view
+ Add new project detail view
+ Add new FAQ view
+ Update dragdrop panels view
+ Fixed minor bugs reported by users

### Version 1.3.1

+ LESS files added
+ 3 new color theme
+ Top navbar option
+ Improvements for mobile and tablet devices
+ Smoothly transition effect in sidebar
+ Fixed minor bugs reported by users

### Version 1.2

+ Dashboard v.2 added
+ Timeline redesigned

### Version 1.1

+ Widgets page added

### Version 1.0

+ Initial released
","INSPINIA Admin Theme is a premium admin dashboard template with flat design
concept. It is fully responsive admin dashboard Template built with Bootstrap
3.3.x and 4.x Framework, HTML5 and CSS3. It has a huge collection of reusable UI
components integrated with jQuery plugins. It can be used for all type of web
applications like custom admin panel, project management system, admin dashboard
or application backend** Inspinia theme includes six versions. One with all
static html/css/js files that is great for any php, java or other programming
language application."
1390,A Laravel package for multilingual models,"# Introduction

[![Latest Version](http://img.shields.io/packagist/v/astrotomic/laravel-translatable.svg?label=Release&style=for-the-badge)](https://packagist.org/packages/astrotomic/laravel-translatable)
[![MIT License](https://img.shields.io/github/license/Astrotomic/laravel-translatable.svg?label=License&color=blue&style=for-the-badge)](https://github.com/Astrotomic/laravel-translatable/blob/master/LICENSE)
[![Offset Earth](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-green?style=for-the-badge)](https://plant.treeware.earth/Astrotomic/laravel-translatable)
[![Larabelles](https://img.shields.io/badge/Larabelles-%F0%9F%A6%84-lightpink?style=for-the-badge)](https://www.larabelles.com/)

[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Astrotomic/laravel-translatable/run-tests?style=flat-square&logoColor=white&logo=github&label=Tests)](https://github.com/Astrotomic/laravel-translatable/actions?query=workflow%3Arun-tests)
[![StyleCI](https://styleci.io/repos/192333549/shield)](https://styleci.io/repos/192333549)
[![Codecov Coverage](https://img.shields.io/codecov/c/github/Astrotomic/laravel-translatable?logo=codecov&logoColor=white&label=Codecov&style=flat-square)](https://codecov.io/gh/Astrotomic/laravel-translatable)
[![Total Downloads](https://img.shields.io/packagist/dt/astrotomic/laravel-translatable.svg?label=Downloads&style=flat-square)](https://packagist.org/packages/astrotomic/laravel-translatable)
[![GitBook](https://img.shields.io/badge/GitBook-Astrotomic-7e57c2.svg?style=flat-square)](https://docs.astrotomic.info/laravel-translatable)

<p align=""center"">
    <img src=""/art/socialcard.png"" alt=""laravel-translatable socialcard"">
</p>

**If you want to store translations of your models into the database, this package is for you.**

This is a Laravel package for translatable models. Its goal is to remove the complexity in retrieving and storing multilingual model instances. With this package you write less code, as the translations are being fetched/saved when you fetch/save your instance.

The full documentation can be found at [GitBook](https://docs.astrotomic.info/laravel-translatable).

## Installation

```bash
composer require astrotomic/laravel-translatable
```

## Quick Example

### **Getting translated attributes**

```php
$post = Post::first();
echo $post->translate('en')->title; // My first post

App::setLocale('en');
echo $post->title; // My first post

App::setLocale('de');
echo $post->title; // Mein erster Post
```

### **Saving translated attributes**

```php
$post = Post::first();
echo $post->translate('en')->title; // My first post

$post->translate('en')->title = 'My cool post';
$post->save();

$post = Post::first();
echo $post->translate('en')->title; // My cool post
```

### **Filling multiple translations**

```php
$data = [
  'author' => 'Gummibeer',
  'en' => ['title' => 'My first post'],
  'fr' => ['title' => 'Mon premier post'],
];
$post = Post::create($data);

echo $post->translate('fr')->title; // Mon premier post
```

## Tutorials

- [How To Add Multilingual Support to Eloquent](https://laravel-news.com/how-to-add-multilingual-support-to-eloquent)
- [How To Build An Efficient and SEO Friendly Multilingual Architecture For Your Laravel Application](https://mydnic.be/post/how-to-build-an-efficient-and-seo-friendly-multilingual-architecture-for-your-laravel-application)
- [How to Add Multi-Language Models to Laravel QuickAdminPanel](https://quickadminpanel.com/blog/how-to-add-multi-language-models-to-laravel-quickadminpanel/)

## Changelog

Please see [CHANGELOG](docs/changelog.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](https://github.com/Astrotomic/.github/blob/master/CONTRIBUTING.md) for details. You could also be interested in [CODE OF CONDUCT](https://github.com/Astrotomic/.github/blob/master/CODE_OF_CONDUCT.md).

### Security

If you discover any security related issues, please check [SECURITY](https://github.com/Astrotomic/.github/blob/master/SECURITY.md) for steps to report it.

## Credits

- [Tom Witkowski](https://github.com/Gummibeer) *current maintainer*
- [Dimitrios Savvopoulos](https://github.com/dimsav) *original author*
- [David Llop](https://github.com/Lloople) *refactoring testsuite*
- [Caneco](https://github.com/caneco) *artwork*
- [All Contributors](../../contributors)

## Versions

| Package             | Laravel                       | PHP       |
|:--------------------|:------------------------------|:----------|
| **v11.10 - v11.10** | `8.* / 9.*`                   | `^8.0`    |
| **v11.6 - v11.9**   | `5.8.* / 6.* / 7.* / 8.*`     | `>=7.2`   |
| **v11.4 - v11.5**   | `5.6.* / 5.7.* / 5.8.* / 6.*` | `>=7.1.3` |
| **v11.0 - v11.3**   | `5.6.* / 5.7.* / 5.8.*`       | `>=7.1.3` |

## Treeware

You're free to use this package, but if it makes it to your production environment I would highly appreciate you buying the world a tree.

It’s now common knowledge that one of the best tools to tackle the climate crisis and keep our temperatures from rising above 1.5C is to [plant trees](https://www.bbc.co.uk/news/science-environment-48870920). If you contribute to my forest you’ll be creating employment for local families and restoring wildlife habitats.

You can buy trees at [offset.earth/treeware](https://plant.treeware.earth/Astrotomic/laravel-translatable)

Read more about Treeware at [treeware.earth](https://treeware.earth)
","This is a Laravel package for translatable models. Its goal is to remove the
complexity in retrieving and storing multilingual model instances. With this
package you write less code, as the translations are being fetched/saved when
you fetch/save your instance. The full documentation can be found at
[GitBook]:https://docs.astrotomic.info/laravel-translatable. The package is
available on GitHub: http://www.gitHub.com/Astrotomic-Laravel."
0,LLVM-based compiler for the Nim language,"# Introduction

[nlvm](https://github.com/arnetheduck/nlvm) (the nim-level virtual machine?)
is an [LLVM-based](http://llvm.org) compiler for the [Nim](http://nim-lang.org)
language.

From Nim's point of view, it's a backend just like C or JavaScript - from
LLVM's point of view, it's a language frontend that emits IR.

When I started on this little project, I knew neither llvm nor Nim.
Therefore, I'd specially like to thank the friendly folks at the #nim
channel that never seemed to tire of my nooby questions.
Also, thanks to all tutorial writers out there, on llvm, programming
and other topics for providing such fine sources of copy-pa... er,
inspiration!

Questions, patches, improvement suggestions and reviews welcome. When
you find bugs, feel free to fix them as well :)

Fork and enjoy!

Jacek Sieka (arnetheduck on gmail point com)

# Status

`nlvm` is generally at par with `nim` in terms of features, with the following
notable differences:

* Fast compile times - no intermediate `C` compiler step
* DWARF (""zero-cost"") exception handling
* High-quality `gdb`/`lldb` debug information with source stepping, type
  information etc
* Smart code generation - compiler intrinsics for overflow checking,
  smart constant initialization, etc
* Native `wasm32` support with no extra tooling

Most things from `nim` work just fine (see notes below however!):

* the same standard library is used
* similar command line options are supported (just change `nim` to `nlvm`!)
* `importc` works without needing `C` header files - the declaration in the
  `.nim` file needs to be accurate

Test coverage is not too bad either:

* bootstrapping and compiling itself
* ~95% of all upstream tests - most failures can be traced to
  the standard library and compiler relying on C implementation details - see
  [skipped-tests.txt](skipped-tests.txt) for an updated list of issues
* compiling most applications
* platforms: linux/x86_64, wasm32 (pre-alpha!)
* majority of the nim standard library (the rest can be fixed easily -
  requires upstream changes however)

How you could contribute:

* work on making [skipped-tests.txt](skipped-tests.txt) smaller
* improve platform support (`osx` and `windows` should be easy, `arm` would be
  nice)
* help `nlvm` generate better IR - optimizations, builtins, exception handling..
* help upstream make std library smaller and more `nlvm`-compatible
* send me success stories :)
* leave the computer for a bit and do something real for your fellow earthlings

`nlvm` does _not_:

* understand `C` - as a consequence, `header`, `emit` and similar pragmas
  will not work - neither will the fancy `importcpp`/`C++` features
* support all nim compiler flags and features - do file bugs for anything
  useful that's missing

# Compile instructions

To do what I do, you will need:
* Linux
* A C/C++ compiler (ironically, I happen to use `gcc` most of the time)

Start with a clone:

    cd $SRC
    git clone https://github.com/arnetheduck/nlvm.git
    cd nlvm && git submodule update --init

We will need a few development libraries installed, mainly due to how `nlvm`
processes library dependencies (see dynlib section below):

    # Fedora
    sudo dnf install pcre-devel openssl-devel sqlite-devel ninja-build cmake

    # Debian, ubuntu etc
    sudo apt-get install libpcre3-dev libssl-dev libsqlite3-dev ninja-build cmake

Compile `nlvm` (if needed, this will also build `nim` and `llvm`):

    make

Compile with itself and compare:

    make compare

Run test suite:

    make test
    make stats

You can link statically to LLVM to create a stand-alone binary - this will
use a more optimized version of LLVM as well, but takes longer to build:

    make STATIC_LLVM=1

If you want a faster `nlvm`, you can also try the release build - it will be
called `nlvmr`:

    make STATIC_LLVM=1 nlvmr

When you update `nlvm` from `git`, don't forget the submodule:

    git pull && git submodule update

To build a docker image, use:

    make docker

To run built `nlvm` docker image use:

    docker run -v $(pwd):/code/ nlvm c -r /code/test.nim

# Compiling your code

On the command line, `nlvm` is mostly compatible with `nim`.

When compiling, `nlvm` will generate a single `.o` file with all code from your
project and link it using `$CC` - this helps it pick the right flags for
linking with the C library.

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c fizzbuzz

If you want to see the generated LLVM IR, use the `-c` option:

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c -c fizzbuzz
    less fizzbuzz.ll

You can then run the LLVM optimizer on it:

    opt -Os fizzbuzz.ll | llvm-dis

... or compile it to assembly (`.s`):

    llc fizzbuzz.ll
    less fizzbuzz.s

Apart from the code of your `.nim` files, the compiler will also mix in the
compatibility found library in `nlvm-lib/`.

## Pipeline

Generally, the `nim` compiler pipeline looks something like this:

    nim --> c files --> IR --> object files --> executable

In `nlvm`, we remove one step and bunch all the code together:

    nim --> IR --> single object file --> executable

Going straight to the IR means it's possible to express nim constructs more
clearly, allowing `llvm` to understand the code better and thus do a better
job at optimization. It also helps keep compile times down, because the
`c-to-IR` step can be avoided.

The practical effect of generating a single object file is similar to
`gcc -fwhole-program -flto` - it is expensive in terms of memory, but results
in slightly smaller and faster binaries. Notably, the `IR-to-machine-code` step,
including any optimizations, is repeated in full for each recompile.

## Common issues

### dynlib

`nim` uses a runtime dynamic library loading scheme to gain access to shared
libraries. When compiling, no linking is done - instead, when running your
application, `nim` will try to open anything the user has installed.

`nlvm` does not support the `{.dynlib.}` pragma - instead you can use
`{.passL.}` using normal system linking.

```nim
# works with `nim`
proc f() {. importc, dynlib: ""mylib"" .}

# works with both `nim` and `nlvm`
{.passL: ""-lmylib"".}
proc f() {. importc .}
```

### header and emit

When `nim` compiles code, it will generate `c` code which may include other
`c` code, from headers or directly via `emit` statements. This means `nim` has
direct access do symbols declared in the `c` file, which can be both a feature
and a problem.

In `nlvm`, `{.header.}` directives are ignored - `nlvm` looks strictly at
the signature of the declaration, meaning the declaration must _exactly_ match
the `c` header file or subtly ABI issues and crashes ensue!

```nim

# When `nim` encounters this, it will emit `jmp_buf` in the `c` code without
# knowing the true size of the type, letting the `c` compiler determine it
# instead.
type C_JmpBuf {.importc: ""jmp_buf"", header: ""<setjmp.h>"".} = object

# nlvm instead ignores the `header` directive completely and will use the
# declaration as written. Failure to correctly declare the type will result
# in crashes and subtle bugs - memory will be overwritten or fields will be
# read from the wrong offsets.
#
# The following works with both `nim` and `nlvm`, but requires you to be
# careful to match the binary size and layout exactly (note how `bycopy`
# sometimes help to further nail down the ABI):

when defined(linux) and defined(amd64):
  type
    C_JmpBuf {.importc: ""jmp_buf"", bycopy.} = object
      abi: array[200 div sizeof(clong), clong]

# In `nim`, `C` constant defines are often imported using the following trick,
# which makes `nim` emit the right `C` code that the value from the header
# can be read (no writing of course, even though it's a `var`!)
#
# assuming a c header with: `#define RTLD_NOW 2`
# works for nim:
var RTLD_NOW* {.importc: ""RTLD_NOW"", header: ""<dlfcn.h>"".}: cint

# both nlvm and nim (note how these values often can be platform-specific):
when defined(linux) and defined(amd64):
  const RTLD_NOW* = cint(2)

```

### wasm32 support

`wasm32` support is still very bare-bones, so you will need to do a bit of
tinkering to get it to work.

Presently, the `wasm32-unknown-unknown` target is mapped to `--os:standalone`
and `--cpu:wasm32` - this choice represents a very raw `wasm` engine with 32-bit
little-endian integers and pointers - in the future, the `nim` standard library
and `system.nim` will need to be updated to support WASM system interfaces like
emscripten or WASI.

To compile wasm files, you will thus need a `panicoverride.nim` - a minimal
example looks like this and discards any errors:

```nim
# panicoverride.nim
proc rawoutput(s: string) = discard
proc panic(s: string) {.noreturn.} = discard
```

After placing the above code in your project folder, you can compile `.nim`
code to `wasm32`:

```nim
# myfile.nim
proc adder*(v: int): int {.exportc.} =
  v + 4
```

```sh
nlvm c --cpu:wasm32 --os:standalone --gc:none --passl:--no-entry myfile.nim
wasm2wat -l myfile.wasm
```

# Random notes

* Upstream is pinned using a submodule - nlvm relies heavily on internals
  that keep changing - it's unlikely that it works with any other versions,
  patches welcome to update it
* The nim standard library likes to import C headers directly which works
  because the upstream nim compiler uses a C compiler underneath - ergo,
  large parts of the standard library don't work with nlvm.
* Happy to take patches for anything, including better platform support!
* For development, it's convenient to build LLVM with assertions turned on -
  the API is pretty unforgiving
","[nlvm] is an [LLVM-based] compiler for the [Nim](http://nim-lang.org) language.
It's a backend just like C or JavaScript - from Nim's point of view, it's a
language frontend that emits IR. It is generally at par with `nim` in terms of
features, with the following notable differences: Fast compile times - no
intermediate `C` compiler step. DWARF (""zero-cost"") exception handling. High-
quality `gdb`/`lldb` debug information with source stepping. Native `wasm32`
support with no extra tooling."
3291,"The book documenting the curl project, the curl tool, libcurl and more. Simply put: everything curl.","# Introduction

*Everything curl* is an extensive guide for all things curl. The project, the
command-line tool, the library, how everything started and how it came to be
the useful tool it is today. It explains how we work on developing it further,
what it takes to use it, how you can contribute with code or bug reports and
why millions of existing users use it.

This book is meant to be interesting and useful to both casual readers and
somewhat more experienced developers. It offers something for everyone to pick
and choose from. 

Do not try to read it from front to back. Read the chapters or content you are
curious about and flip back and forth as you see fit.

I hope to run this book project as I do all other projects I work on: in the
open, completely free to download and read. I want it to be free for anyone to
comment on, and available for everyone to contribute to and help out with.

Send your bug reports, pull requests or critiques to me and I will improve
this book accordingly.

This book will never be finished. I intend to keep working on it. While I
may at some point consider it fairly complete, covering most aspects of the
project (even if only that seems like an insurmountable goal), the curl
project will continue to move so there will always be things to update in the
book as well.

This book project started at the end of September 2015.

## Site

[https://everything.curl.dev](https://everything.curl.dev) is the home of this
book. It features accessible links to read the book online in a web version,
or download a PDF version for offline reading. Unfortunately, the previously
provided ebook formats are no longer provided by gitbook.com that we use to
produce the book.

(The ""export PDF"" option menu is only visible if the used web browser is wide
enough.)

## Content

All book content is hosted on GitHub in the
[https://github.com/bagder/everything-curl](https://github.com/bagder/everything-curl)
repository.

## Author

With the hope of becoming just a co-author of this material, I am Daniel
Stenberg. I founded the curl project and I am a developer at heart—for fun and
profit. I live and work in Stockholm, Sweden.

All there is to know about Daniel can be found on [daniel.haxx.se](https://daniel.haxx.se/).

## Contribute

If you find mistakes, omissions, errors or blatant lies in this document,
please send us a refreshed version of the affected paragraph and we will amend
and update. We give credits to and recognize everyone who helps out!

Preferably, you could submit
[errors](https://github.com/bagder/everything-curl/issues) or [pull
requests](https://github.com/bagder/everything-curl/pulls) on the book's
GitHub page.

## Contributors

Lots of people have reported bugs, improved sections or otherwise helped
making this book the success it is. These friends include the following:

AaronChen0 on github,
alawvt on github,
Amin Khoshnood,
amnkh on github,
Anders Roxell,
Angad Gill,
Aris (Karim) Merchant,
auktis on github,
Ben Bodenmiller
Ben Peachey,
bookofportals on github,
Bruno Baguette,
Carlton Gibson,
Chris DeLuca,
Citizen Esosa,
Dan Fandrich,
Daniel Brown,
Daniel Sabsay,
David Piano,
DrDoom74 at GitHub,
Emil Hessman,
enachos71 on github,
ethomag on github,
Fabian Keil,
faterer on github,
Frank Dana,
Frank Hassanabad,
Gautham B A,
Geir Hauge,
Harry Wright,
Helena Udd,
Hubert Lin,
i-ky on github,
infinnovation-dev on GitHub,
Jay Ottinger,
Jay Satiro,
Jeroen Ooms,
Johan Wigert,
John Simpson,
JohnCoconut on github,
Jonas Forsberg,
Josh Vanderhook,
JoyIfBam5,
KJM on github,
knorr3 on github,
lowttl on github,
Luca Niccoli,
Manuel on github,
Marius Žilėnas,
Mark Koester,
Martin van den Nieuwelaar,
mehandes on github,
Michael Kaufmann,
Ms2ger,
Nick Travers,
Nicolas Brassard,
Oscar on github,
Oskar Köök,
Patrik Lundin,
RekGRpth on github,
Ryan McQuen,
Saravanan Musuwathi Kesavan,
Senthil Kumaran,
Shusen Liu,
Sonia Hamilton,
Spiros Georgaras,
Stephen,
Steve Holme,
Stian Hvatum,
strupo on github,
Viktor Szakats,
Vitaliy T,
Wayne Lai,
Wieland Hoffmann,
谭九鼎

## License

This document is licensed under the [Creative Commons Attribution 4.0
license](https://creativecommons.org/licenses/by/4.0/).
","Everything curl* is an extensive guide for all things curl. It explains how we
work on developing it further, how it takes to use it, how you can contribute
with code or bug reports and why millions of existing users use it. The book is
meant to be interesting and useful to both casual readers and more experienced
developers. It is free to download and read, and available for everyone to
contribute to and help out with. It features accessible links to read the book
online in a web version or download a PDF version for offline reading."
1880,"LiteApp is a high performance mobile cross-platform implementation, The realization of cross-platform functionality is base on webview and provides different ideas and solutions for improve webview performance.","# Introduction

<p align=""center"" >
  <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/logo.png?raw=true"" alt=""LiteApp"" title=""LiteApp"">
</p>

**LiteApp is a high performance mobile cross-platform framework. The implementation of its cross-platform functionality is based on webview but improved with novel ideas and solutions for better performance.**

`LiteApp` dedicates to enable developers to use modern web development technology to build applications on both Android and iOS with a single codebase. More specifically, you can use javascript and modern front-end framework Vue.js to develop mobile apps by using LiteApp, with which, productivity and performance can coexist ,application you build will be running on web with performance close to native. We achieve this by decoupling the render engine from the syntax layer, see more detail below.

## Requirements

| Platform |        System        |       Notes        |
| :------: | :------------------: | :----------------: |
|   iOS    |   iOS 9.0 or later   | Xcode 9.0 or later |
| Android  | Android 4.0 or later |        n/a         |
|   Web    |         n/a          |        n/a         |

## Architecture

`系统架构图`

<div align=center>
<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/Architecture.png?raw=true"" alt=""Architecture""/>
</div>`

## 

## Demo Project

[ iOS Display ]() 

> <div align=center>
>
> <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/iOS_Video.gif?raw=true"" width = ""300"" height = ""300*16/9""  alt=""iOS Demo""/>
>
> </div>`

[Android Display]() 

<div align=center>

<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/Andriod_Video.gif?raw=true"" width = ""300"" height = ""300*16/9"" alt=""Android Demo""/>
</div>`

## Features

- [x] **High Performance**: Writing on web, have the same performance as the native app
- [x] **Load Fast** Fast rendering  for all pages , especially for the first time
- [x] **Mobile Cross-platform**  Build both Android and iOS  with a single codebase
- [x] **Asynchronous Threads** the render engines are separated from the syntax layer 
- [x] **Simple Code**  Few code but powerful
- [x] **Expandable**   Proprietary API for extension and it can add more features
- [x] **Complete Documentation** Each section has a corresponding document and easy to understand

## How To Get Started

- [Download LiteApp](https://github.com/iqiyi/LiteApp/wiki/common-Download-LiteApp) and try out the included Mac and iPhone example apps
- Read the [""Getting Started"" guide](https://github.com/iqiyi/LiteApp/wiki/common-How-To-Get-Started), or [other articles on the Wiki](https://github.com/iqiyi/LiteApp/wiki/home)
- Check out the [documentation](https://github.com/iqiyi/LiteApp/wiki/common-Documents) for a comprehensive look at all of the APIs available in LiteApp

## Installation

```
$ git clone https://github.com/iqiyi/LiteApp.git
$ cd liteApp
```

## Communication

- If you **need help**, use [Email](zhangyanqiang@qiyi.com) or [Github](https://github.com/iqiyi/LiteApp) . (Tag 'LiteApp')
- If you'd like to **ask a general question**, use [Email](zhangyanqiang@qiyi.com) or [Github](https://github.com/iqiyi/LiteApp).
- If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.
- If you **have a feature request**, open an issue.
- If you **want to contribute**, submit a pull request.

## Performance Test

`LiteApp VS H5 App Results：70% reduction in first load time，Switch Page is 60 FPS`

| Project   | Loading Time/ms |         Switch Page/fps          |
| :-------- | :-------------: | :------------------------------: |
| LiteApp   |   250-500 ms    |            Perfect/60            |
| HTML5 App |    > 1000ms     | White screen for a short time/53 |

`LiteApp`

> <div align=center>
>
> <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/liteApp.gif?raw=true"" width = ""300"" height = ""300*16/9""  alt=""iOS Demo""/>
>
> </div>`

`HTML5 App`

<div align=center>

<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/html5.gif?raw=true"" width = ""300"" height = ""300*16/9"" alt=""Android Demo""/>
</div>`

## 

## Credits

LiteApp was originally created by [Guodong Chen](www.breakerror.com)  [Chen Zhang](https://github.com/zhch0633)  [Jingyuan Zhou](https://github.com/pricelesss)   [Yanqiang Zhang](https://github.com/Richard-zhang-iOS) .

LiteApp's logo was designed by [Guodong Chen](www.breakerror.com)

And most of all, thanks to LiteApp's Contributors

### Security Disclosure

If you believe you have identified a security vulnerability with LiteApp, you can contact  [Guodong Chen](www.breakerror.com) as soon as possible. Please do not post it to a public issue tracker.

## License

LiteApp is released under the Apache License, Version 2.0. See [LICENSE](http://gitlab.qiyi.domain/cross-team/lite-app/blob/master/LICENSE) for details.
","LiteApp is a high performance mobile cross-platform framework. It allows
developers to use modern web development technology to build applications on
both Android and iOS with a single codebase. With LiteApp, productivity and
performance can coexist,application you build will be running on web with
performance close to native. We achieve this by decoupling the render engine
from the syntax layer. Each section has a corresponding document and easy to
understand documents. Read the [""Getting Started"" guide and try out the included
Mac and iPhone example apps."
1244,Bolt is a deep learning library with high performance and heterogeneous flexibility.,"# Introduction
---
[![License: MIT](docs/images/license-mit.png)](https://opensource.org/licenses/MIT)

[Bolt](https://huawei-noah.github.io/bolt/) is a light-weight library for deep learning.
Bolt, as a universal deployment tool for all kinds of neural networks, aims to automate the deployment pipeline and achieve extreme acceleration.
Bolt has been widely deployed and used in many departments of HUAWEI company, such as 2012 Laboratory, CBG and HUAWEI Product Lines.
If you have questions or suggestions, you can submit issue. **QQ群: 833345709**

# Why Bolt is what you need?
---
- **High Performance:** **15%+** faster than existing open source acceleration libraries.
- **Rich Model Conversion:** support Caffe, ONNX, TFLite, Tensorflow.
- **Various Inference Precision:** support FP32, FP16, INT8, 1-BIT.
- **Multiple platforms:** ARM CPU(v7, v8, v8.2+), Mali GPU, Qualcomm GPU, X86 CPU(AVX2, AVX512)
- **Bolt is the first to support NLP and also supports common CV applications.**
- **Minimize ROM/RAM**
- Rich Graph Optimization
- Efficient Thread Affinity Setting
- [Auto Algorithm Tuning](https://zhuanlan.zhihu.com/p/336218879)
- [Time-Series Data Acceleration](docs/USER_HANDBOOK.md#time-series-data-acceleration)

[See more excellent features and details here](https://zhuanlan.zhihu.com/p/317111024)

# Building Status
---
There are some common used platform for inference. More targets can be seen from [scripts/target.sh](scripts/target.sh). Please make a suitable choice depending on your environment. 
If you want to build on-device training module, you can add **--train** option.
If you want to use multi-threads parallel, you can add **--openmp** option.

*Bolt defaultly link static library, This may cause some problem on some platforms. You can use --shared option to link shared library.*

| target platform        | precision          | build command                                        | Linux | Windows | MacOS |
| ---------------------- | ------------------ | ---------------------------------------------------- | ----- | ------- | ----- |
| Android(armv7)         | fp32,int8          | ./install.sh --target=android-armv7                  | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv7) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv7) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv7) |
| Android(armv8)         | fp32,int8          | ./install.sh --target=android-aarch64 --fp16=off     | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(armv8.2+)      | fp32,fp16,int8,bnn | ./install.sh --target=android-aarch64                | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(gpu)           | fp16               | ./install.sh --target=android-aarch64 --gpu          | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(x86_64)        | fp32,int8          | ./install.sh --target=android-x86_64                 | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-x86_64) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-x86_64) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-x86_64) |
| iOS(armv7)             | fp32,int8          | ./install.sh --target=ios-armv7                      | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv7) |
| iOS(armv8)             | fp32,int8          | ./install.sh --target=ios-aarch64 --fp16=off         | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv8) |
| iOS(armv8.2+)          | fp32,fp16,int8,bnn | ./install.sh --target=ios-aarch64                    | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv8) |
| Linux(armv7)           | fp32,int8          | ./install.sh --target=linux-armv7_blank              | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(armv8)           | fp32,int8          | ./install.sh --target=linux-aarch64_blank --fp16=off | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(armv8.2+)        | fp32,fp16,int8,bnn | ./install.sh --target=linux-aarch64_blank            | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(x86_64)          | fp32,int8          | ./install.sh --target=linux-x86_64                   | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(x86_64_avx2)     | fp32               | ./install.sh --target=linux-x86_64_avx2              | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86-avx2) | / | / |
| Linux(x86_64_avx512)   | fp32,int8          | ./install.sh --target=linux-x86_64_avx512            | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86-avx2) | / | / |
| Windows(x86_64)        | fp32,int8          | ./install.sh --target=windows-x86_64                 | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86) | / |
| Windows(x86_64_avx2)   | fp32               | ./install.sh --target=windows-x86_64_avx2            | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86-avx2) | / |
| Windows(x86_64_avx512) | fp32,int8          | ./install.sh --target=windows-x86_64_avx512          | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86-avx2) | / |
| MacOS(armv8.2+)        | fp32,fp16,int8,bnn | ./install.sh --target=macos-aarch64                  | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86) |
| MacOS(x86_64)          | fp32,int8          | ./install.sh --target=macos-x86_64                   | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86) |
| MacOS(x86_64_avx2)     | fp32               | ./install.sh --target=macos-x86_64_avx2              | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86-avx2) |
| MacOS(x86_64_avx512)   | fp32,int8          | ./install.sh --target=macos-x86_64_avx512            | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86-avx2) |
| Train-Linux(x86_avx2) | fp32 | ./install.sh --target=linux-x86_64_avx2 --train | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/training_linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Atraining_linux-x86-avx2) | / | / |
| Train-Android_armv8 | fp32 | ./install.sh --target=android-aarch64 --train | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/training_linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Atraining_linux-android-armv8) | / | / |

# Quick Start
---
<div align=center><img src=""docs/images/QuickStart.jpg"" width = 100% height = 100%  style=""border: 1px solid rgba(151,151,151,0.50)"" /></div>
Two steps to get started with bolt.

1. Conversion: use **[X2bolt](model_tools/tools/X2bolt/X2bolt.cpp)** to convert your model from caffe, onnx, tflite or tensorflow to .bolt file;

2. Inference: run **[benchmark](inference/examples/benchmark/benchmark.cpp)** with .bolt and data to get the inference result.

   For more details about the usage of [**X2bolt**](model_tools/tools/X2bolt/X2bolt.cpp) and [**benchmark**](inference/examples/benchmark/benchmark.cpp) tools,  see [docs/USER_HANDBOOK.md](docs/USER_HANDBOOK.md). 

# DL Applications in Bolt

  Here we show some interesting and useful applications in bolt.

| Face Detection | ASR | Semantics Analysis | Image Classification | Reading Comprehension |
| :------: | :------: | :------: | :------: | :------: |
| ![face_detection](docs/images/20_bolt_face_detection.gif) [android](kit/Android/FaceDetection)  [ios](kit/iOS/FaceDetection)  [exe](inference/examples/ultra_face) | ![asr](docs/images/ChineseSpeechRecognition.gif) [android](kit/Android/ChineseSpeechRecognition)    [ios](kit/iOS/ChineseSpeechRecognition) | ![semantics analysis](docs/images/SemanticsAnalysis.gif) [android](kit/Android/Semantics) | ![image_classification](docs/images/ImageClassification.gif) [android](kit/Android/SimpleImageClassification)    [ios](kit/iOS/SimpleImageClassification) | ![reading_comprehension](docs/images/ReadingComprehension.gif) [android](kit/Android/ReadingComprehension) |

# Verified Networks
---
  Bolt has shown its high performance in the inference of common CV and NLP neural networks. Some of the representative networks that we have verified are listed below. You can find detailed benchmark information in [docs/BENCHMARK.md](docs/BENCHMARK.md).

  <table border=""1""  bordercolor=""#00CCCC""  width=""300"">
    <tr>
      <td>
        Application
      </td>
      <td>
        Models
      </td>
    </tr>
    <tr>
      <td>
        CV
      </td>
      <td>
        Resnet50, Shufflenet, Squeezenet, Densenet, Efficientnet, Mobilenet_v1, Mobilenet_v2, Mobilenet_v3,
        <a href=""https://github.com/liuzechun/Bi-Real-net"">BiRealNet</a>,
        <a href=""https://github.com/liuzechun/ReActNet"">ReActNet</a>,
        <a href=""https://github.com/huawei-noah/ghostnet"">Ghostnet</a>,
        <a href=""https://github.com/milesial/Pytorch-UNet"">unet</a>,
        LCNet, Pointnet,
        <a href=""https://github.com/thangtran480/hair-segmentation"">hair-segmentation</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/duc"">duc</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/fcn"">fcn</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/retinanet"">retinanet</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/ssd"">SSD</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn"">Faster-RCNN</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn"">Mask-RCNN</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov2-coco"">Yolov2</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/tiny-yolov3"">Yolov3</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov4"">Yolov4</a>,
        <a href=""https://github.com/ultralytics/yolov5"">Yolov5</a>,
        ViT, TNT ...
      </td>
    </tr>
    <tr>
      <td>
        NLP
      </td>
      <td> Bert, Albert, Tinybert, Neural Machine Translation, Text To Speech(Tactron,Tactron2,FastSpeech+hifigan,melgan), Automatic Speech Recognition, DFSMN, Conformer,
        <a href=""docs/USER_HANDBOOK.md#voice-wake-up"">Tdnn</a>,
        <a href=""https://tfhub.dev/google/lite-model/nonsemantic-speech-benchmark/frill-nofrontend/1"">FRILL</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/t5"">T5</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/gpt-2"">GPT-2</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/roberta"">Roberta</a> ...
      </td>
    </tr>
    <tr>
      <td>
        Recommendation
      </td>
      <td>
        MLP
      </td>
    </tr>
    <tr>
      <td>
        More DL Tasks
      </td>
      <td>
        ...
      </td>
    </tr>
  </table>

  More models than these mentioned above are supported, users are encouraged to further explore.

# On-Device Training
---
On-Device Training has come, it's a beta vesion which supports [Lenet](./training/demos/lenet_demo/), [Mobilenet_v1](./training/demos/mobilenet_v1_demo) and [Resnet18](./training/demos/resnet18_demo) for training on the embedded devices and servers. Want more details of on-device training in bolt? Get with the official training [tutorial](./training/TUTORIAL.md).

# Documentations
---
Everything you want to know about bolt is recorded in the detailed documentations stored in [docs](docs).

- [How to install bolt with different compilers?](docs/INSTALL.md).
- [How to use bolt to inference your ML models?](docs/USER_HANDBOOK.md)
- [How to develop bolt to customize more models?](docs/DEVELOPER.md)
- [Operators documentation](docs/OPERATORS.md)
- [Benchmark results on some universal models.](docs/BENCHMARK.md)
- [How to visualise/protect bolt model?](docs/USER_HANDBOOK.md#model-visualization)
- [How to build demo/example with kit?](docs/KIT.md)
- [Frequently Asked Questions(FAQ)](docs/FAQ.md)

# Articles
---
- [深度学习加速库Bolt领跑端侧AI](https://zhuanlan.zhihu.com/p/317111024)
- [为什么 Bolt 这么快：矩阵向量乘的实现](https://zhuanlan.zhihu.com/p/97928435)
- [深入硬件特性加速TinyBert，首次实现手机上Bert 6ms推理](https://zhuanlan.zhihu.com/p/158620259)
- [Bolt GPU性能优化，让上帝帮忙掷骰子](https://zhuanlan.zhihu.com/p/336218879)
- [Bolt助力HMS机器翻译，自然语言处理又下一城](https://zhuanlan.zhihu.com/p/337887620)
- [ARM CPU 1-bit推理，走向极致的道路](https://zhuanlan.zhihu.com/p/158161592)
- [基于深度学习加速库Bolt的声音克隆技术(Voice Cloning)](https://zhuanlan.zhihu.com/p/498919929)

# 教程
---
- 图像分类: [Android Demo](https://zhuanlan.zhihu.com/p/359264809), [iOS Demo](https://zhuanlan.zhihu.com/p/359259766)
- 图像增强: [Android Deme](), [iOS Demo]()
- 情感分类: [Android Demo](https://zhuanlan.zhihu.com/p/414971037)
- 中文语音识别: [Android Demo](https://zhuanlan.zhihu.com/p/414978782), [iOS Demo](https://zhuanlan.zhihu.com/p/414981121)
- 人脸检测: [Android Demo](https://zhuanlan.zhihu.com/p/414975102), [iOS Demo](https://zhuanlan.zhihu.com/p/414971375)
- 阅读理解: [Android Demo](https://zhuanlan.zhihu.com/p/498906834)

# Acknowledgement
---
Bolt refers to the following projects: [caffe](https://github.com/BVLC/caffe), [onnx](https://github.com/onnx/onnx), [tensorflow](https://github.com/tensorflow/tensorflow), [ncnn](https://github.com/Tencent/ncnn), [mnn](https://github.com/alibaba/MNN), [dabnn](https://github.com/JDAI-CV/dabnn).

# License
---
The MIT License(MIT)
","Bolt is a light-weight library for deep learning. It is 15%+ faster than
existing open source acceleration libraries. It supports Caffe, ONNX, TFLite,
Tensorflow and many other tools. It has been widely deployed and used in many
departments of HUAWEI company, such as 2012 Laboratory, CBG and H UAWEI Product
Lines. If you have questions or. suggestions, you can submit issue. **QQ群:
833345709**"
2810,"Introduction to generative adversarial networks, with code to accompany the O'Reilly tutorial on GANs","# Introduction to generative adversarial networks

This repository contains code to accompany [the O'Reilly tutorial on generative adversarial networks](https://www.oreilly.com/learning/generative-adversarial-networks-for-beginners) written by [Jon Bruner](https://github.com/jonbruner) and [Adit Deshpande](https://github.com/adeshpande3). See [the original tutorial](https://www.oreilly.com/learning/generative-adversarial-networks-for-beginners) to run this code in a pre-built environment on O'Reilly's servers with cell-by-cell guidance, or run these files on your own machine.

There are three versions of our simple GAN model in this repository:
- **[gan-notebook.ipynb](gan-notebook.ipynb)** is identical to the interactive tutorial, available here so that you can run it on your own machine.
- **[gan-script.py](gan-script.py)** is a straightforward Python script containing code drawn directly from the tutorial, to be run from the command line. Note that it doesn't print anything when it's executed, but it does send regular updates to [TensorBoard](https://www.tensorflow.org/get_started/summaries_and_tensorboard) so that you can track its progress.
- **[gan-script-fast.py](gan-script-fast.py)** is a modest refactoring of gan-script.py that runs slightly faster because more of its computations are contained in the TensorFlow graph.

## Requirements and installation
In order to run [gan-script.py](gan-script.py) or [gan-script-fast.py](gan-script-fast.py), you'll need **[TensorFlow](https://www.tensorflow.org/install/) version 1.0 or later** and [NumPy](https://docs.scipy.org/doc/numpy/user/install.html). In order to run [gan-notebook.ipynb](gan-notebook.ipynb), you'll additionally need [Jupyter](https://jupyter.readthedocs.io/en/latest/install.html) and [matplotlib](https://matplotlib.org/).

If you've already got TensorFlow on your machine, then you've got NumPy and should be able to run the raw Python scripts.

### Installing Anaconda Python and TensorFlow
The easiest way to install TensorFlow as well as NumPy, Jupyter, and matplotlib is to start with the Anaconda Python distribution.

1. Follow the [installation instructions for Anaconda Python](https://www.continuum.io/downloads). **We recommend using Python 3.6.**

2. Follow the platform-specific [TensorFlow installation instructions](https://www.tensorflow.org/install/). Be sure to follow the ""Installing with Anaconda"" process, and create a Conda environment named `tensorflow`.

3. If you aren't still inside your Conda TensorFlow environment, enter it by opening your terminal and typing
    ```bash
    source activate tensorflow
    ```

4. Download and unzip [this entire repository from GitHub](https://github.com/jonbruner/generative-adversarial-networks), either interactively, or by entering
    ```bash
    git clone https://github.com/jonbruner/generative-adversarial-networks.git
    ```

5. Use `cd` to navigate into the top directory of the repo on your machine

6. Launch Jupyter by entering
    ```bash
    jupyter notebook
    ```
    and, using your browser, navigate to the URL shown in the terminal output (usually http://localhost:8888/)
","This repository contains code to accompany an O'Reilly tutorial on generative
adversarial networks. The code can be run interactively or from the command
line. The easiest way to install TensorFlow as well as NumPy, Jupyter, and
matplotlib is to start with the Anaconda Python distribution. There are three
versions of our simple GAN model in this repository: identical to the
interactive tutorial, available here so that you can run it on your own machine."
2705,iOS Crash Dump Analysis Book,"# iOS Crash Dump Analysis Book

The HTML version of the book, ""iOS Crash Dump Analysis"" is available as follows:

Language | Link
-- | --
English | https://faisalmemon.github.io/ios-crash-dump-analysis-book/en
Chinese | https://faisalmemon.github.io/ios-crash-dump-analysis-book/zh

Accompanying the book is an Analytic Troubleshooting worksheet.
[Download the Analytic Troubleshooting worksheet pdf](./examples/worksheets/analytic_troubleshooting_worksheet.pdf)

The Kindle version is available for purchase at: [Amazon.com](https://www.amazon.com/iOS-Crash-Dump-Analysis-application-ebook/dp/B07HG7RXM6),
[Amazon.co.uk](https://www.amazon.co.uk/iOS-Crash-Dump-Analysis-application-ebook/dp/B07HG7RXM6), and other geographic regions of Amazon.

The paperback print version is available for purchase at: [Amazon.com](https://www.amazon.com/dp/1723801887/),
[Amazon.co.uk](https://www.amazon.co.uk/dp/1723801887/), and other geographic regions of Amazon.

Note, as an Amazon Associate, I earn from qualifying purchases made via the above links.

The print edition is also from traditional book sellers, libraries, and other institutions.

The purpose of this repository is to provide the source code, and other resources, supporting the iOS crash dump analysis book.  

The rationale for providing the source freely, in addition to the commercial offering, is to make it easy to collaborate, share, and build upon the ideas of the book.  Buying a print, or electronic, version of the book helps support the author to create further text books.  If you feel this content has helped you, please consider making a purchase.

## Why write this book?

When I look around at colleagues I notice that we all come to app programming from different career paths.  It seemed like everyone else found crash dump fixing burdensome apart from myself.
I came to app programming from the bottom upwards.  I started off as a device driver and kernel engineer and took subsequent jobs in the middleware layer and then lastly in the app layer.
This less trodden route has given me a perspective which I would like to share with other developers and engineers.

## It's already documented right?

1. There are lots of documents on the specifics of exploring crash dumps, but they exist in a knowledge bubble not connected to the normal app developer experience; they feel alien.  The knowledge is generally scattered around without a definitive guide.  I would like collect the information together into one place.

1. Software engineering concepts can be employed to avoid crashes, and to lessen the pain in finding and resolving them.  I would like shine a light on this aspect of engineering so you can improve your codebase proactively.

1. Step-by-step guides often seem to make large logical jumps to derive the answer to why an app crashed.  But crash dump analysis is just problem-solving in a specific domain.  There are systematic problem solving approaches that can be applied here.  I have found these helpful in my own work and want to share the insights more widely.

It's my opinion that when you put these three approaches together: software engineering, systematic problem solving, and crash dump exploration you end up with a powerful toolbox you can take with you to any iOS app project.
You will be able to spend less time fixing crashes, and more time writing valuable functionality.  That's something we all want!

# Project Details

## Current Status

As of 14th November 2020, the project status is:
- With the public announcement of Apple's new M1 chip and range of Macs, we can now release the second edition materials describing the new technologies!
- The 2nd edition is published here in web form to cover Apple Silicon, etc.
- There is a published 1st edition (print, kindle, web)
- A web-only Chinese language translation is available (first edition elements are chinese, second edition elements not yet translated)
- I am preparing the kindle and print editions of the second edition.

## Directory Structure

Directory | Purpose
----------| -------
external | Downloaded resources
topics | Topic specific writing
source | Parent directory of compilable source code
markdown | Markdown files for the body text of the book
examples | Examples of crashes
automation | Not yet used
screenshots | Screenshots

## Branch Policy

The software configuration management plan (SCM plan) is very simple.
- All development is done on the master branch.
- Feature work is done on a branch.
- Notable versions of the software are tracked by [Release History](./release/releaseHistory.md)

## Authoring Methodology

I followed an approach similar approach to http://rtalbert.org/how-i-wrote-my-book/ and Ben Watson at [Philosophical Geek](http://www.philosophicalgeek.com/2014/11/10/tips-for-writing-a-programming-book/) with a few amendments.  The process turned out to be:

- Write the content of the book in markdown
- Use pandoc to convert the markdown into MS Word `docx` format, `.epub`, `.latex`, and `.html`
- Use BibDesk to track biliographic references
- Use latex `\index` to create index links in the main body of the work
- Use `pdflatex` to convert latex files into a PDF because it allows auto section numbering and index generation

The output file formats were used as follows:
- `.docx` version to do grammar and spell checking
- `.pdf` version used to prepare the print version of the book via Kindle KDP web site
- `.epub` version used to create the Kindle E-book via the Kindle KDP web substitute
- `.html` version used to create the GitHub pages version

The writing was done on a per chapter basis, with separate markdown files for examples and their discussion.  This allowed me to merge and move around the smaller level items into parent chapters to form a logical grouping.

Each chapter was done in phases:
- Write the content, marking obvious index items, but generally focussing on content
- Do needed digressions for research, and write sample code to justify statements made
- Review the `.docx` version and run the spell and grammar checker, fixing any faults in the markdown
- Review the markdown and insert latex index entries, cross referencing prior indexed items for uniformity and grouping

The aim was to leave each chapter in a near-publishable state, to avoid accumulating a large backlog of work.  I resisted placing any TODO work items in the markdown text.  I maintained a `ideas.txt` file for chapter and content ideas as I went through.  I also did a `grep` for forward topic references in the book so that I covered later on what was promised earlier on.  The main benefit was I had a good idea of my progress on the book as I went along.

In terms of writing style, I used first person singular for the preface.  I used second person plural for the Introduction, and used first person plural elsewhere.  I had a script to check not to use ""you"" when a ""we"" should have been used in the main body of the text.

Once all chapters were done, the whole book was read through using VoiceOver (Option-Escape) because this catches proof reading errors (like swapping around words or duplicating words).

I also hand wrote the back page text directly in `.docx` and then pruned it to fit the back of the book and the marketing materials.

I had a special index mark for trademark terms and a custom script to collate those and inject them into the text as a list of acknowledged trademarks.  The entire book building process was automated from a command line script.

I had a special `.css` file for the E-book to make the tables look nicer (a simple outline border).
I also used a github styled `.css` file for the HTML edition.

The last phase was upload to the KDP website to generate the e-book and print versions.  I had to re-size my example code blocks to fit the Extended Distribution in Print requirements (6 inches by 9 inches is the biggest) as only standard book sizes are distributable via Extended Distribution (regular book shops).

## Progress and Effort

The hardest part was learning about the appropriate tooling to do the job and deploy for the relevant target formats, and working out what formats and platforms to use.  This consumed two weeks.

The tail portion of the work was quick.  It took 1 day to re-base my code on the newly released Xcode 10 Gold Master.  I just needed to re-work one chapter due to a behavior change in iOS 12.  It took 1 day to proof read my work using VoiceOver.  It took 1 day to re-format the code and report examples to change to 6 x 9 inch book format needed for Extended Distribution of the text in print format to physical book sellers, as well as the time to fix up the print ready PDF since Amazon has stricter gutter requirements (going into the margin) than I had anticipated.  I also had to do the book cover text.  I was overall pleased it was 3 days of final processing.

The chapters of the book were the most effort.  Each chapter took about 0.5 days to fix spelling and grammar, and add index entries.  The rest of the time was spent roughly 60% research, 40% writing but I am not sure as I didn't pay so much attention to the balance.

I wrote over a period of 3 months but had other tasks and duties during that time.  So it was 7 weeks of full time work spread across 3 months.  I worked normal business hours, roughly 40 hours per week.  For 170 pages of text, it works out at 1.6 hours per page.  If I were to write a second book, using the same technology and approach, I think it would be 5 weeks effort, and 1.2 hours per page.  This is because in my first book I had to do 2 weeks research, and setup, of my build system to generate the book in the appropriate formats.

I planned to write more but I had some work opportunities that came up that were potentially going to limit my time to spend on the book and wasn't sure if it was going to pass the ""moonlighting"" test for private work.  I would have written chapters explaining about Operating Systems architecture, assembly programming basics, and performance analysis with Instruments.

### Second edition

I wrote the second edition of the book, full-time, over 1 month.  I didn't track my time as closely but I think I was more efficient at doing things.

I improved my tooling, to automatically clean the gutter (by wrapping lines which were in markdown verbose sections).  That took one day.  I also cleaned up my scripting a bit.  I added scripting to allow a translated edition to be produced in a way that would safely fall back to English for missing translations.  I could not fix the Chinese latex issues.  I think my lack of Chinese was going to make it unfeasible to resolve.  I also spent one day learning how to use inkscape to cut out my portrait and then actually doing the cut out work, so I could insert it into the back cover.  So I think I had total 4 days of non-writing overhead in the month.

I finished writing too early because Apple Silicon was released later than my expectations. In fact, the surprises were mostly on the content side.  I knew I had to write about Apple Silicon but did not realise that Pointer Authentication was a relevant topic.  I also missed that I could actually test iOS on Mac with my development setup - I thought that was going to come in later tooling.  I also realised I needed a chapter to cover diagnostic related crashes (such as resource usage related terminations).  So my writing plans did change, but it showed up some very interesting topics.  It also allowed me to provide original research material in the book.

My chinese translator was a welcome surprise and integrating his work was very easy so I got ""bonus"" material by way of a 1st edition translation in Chinese.

The book is now a nice length, 239 sheets of paper, with the last page numbered 221.  The first edition had a last page numbered 170.

The new material is 3.4 hrs per page.  But there is original research in there so that low number feels like great productivity. Also some of the pages have been re-worked, with code modernisation, new screenshots, etc.  These don't show in the numbers.

Overall I was surprised how many additions and modernisations I needed to do for the book.  Especially with the archicture transition to Apple Silicon, I think this is a especially fast-moving period in the Apple developer ecosystem.

Producing the actual print edition, and kindle edition was easy because my approach, and tooling, made the book more-or-less fit for publishing straight away.  I did not need to do any fix-ups.

I am making the second edition, in ebook, and in print, as cheap as I reasonably can, with only a small margin over costs.  I think I am providing good value!

I think a two year update cycle feels right for this kind of book.  Lets see what the future holds!

## Supporting software

### Essential Software

You need:
- Brew Package manager
- Various Brew packages
- Latex packages
- Class dump

#### Brew Software

I used the Brew package manager on MacOS and used the Brew packages:

Brew Package | Purpose
--|--
`pandoc` | Document translator to get from .markdown format to other formats
`pandoc-citeproc` | Biliography Citation Helper for pandoc

#### Latex Support

Latex support appears not to be available directly in brew so I used the recommended [MacTex](https://www.tug.org/mactex/) and this was installed via a brew cask install
`brew cask install mactex`

#### Class Dump

For analysing binaries I used `class-dump`.  Whilst previously this was available from Brew, it seems now you have to directly download it.

[Download class-dump](http://stevenygard.com/projects/class-dump/)


### Recommended Software

Package | Purpose
--|--
Atom|Edits and understands markdown and can preview render it
BibDesk | Eases the definition of Citations for the Biliography

## Essential Mac Configuration

#### Screenshots

I have discovered the standard screenshot on Mac only does low resolution (screen resolution) images.  Print books need to have higher resolution.

I saw an answer at: https://apple.stackexchange.com/a/110206

I need to experiment in this area.  Maybe putting my screen in large scale mode will give me screenshots with effectively a higher ppi when shrunk down for print.

## Build System

The book is built for English using `buildBook.sh`.  Use `buildBook.sh -l zh` to build the Chinese edition.

The build outputs are:

File | Purpose
--|--
`foo.html` | Intermediate used for GitHub Pages documentation
`boo.pdf` | For the Hard Copy Paper Edition
`foo.docx` | For further conversion into EPUB, and internally for spelling and grammar checking
`foo.epub` | For E-book readers (Apple and Amazon) directly from pandoc
`docs/*` | Final destination for GitHub Pages documentation

The output are `foo.*` and `boo.*` files locally for ease of inspection.  They are ignored by version control.

For github pages, the GitHub documentation facility, the HTML documentation and supporting resources is copied into the `docs/<language-id>` directory and then they are checked in (the branch is required to be master).

The build system also checks for uses of ""you"" - they should be ""we"" in all cases apart from the Introduction.

The build system only picks up new trademarks on a second run of the book building script due to it relying on a built index from the prior run.

The build system has one hardcode; the page number that the Disclaimer chapter starts on is hardcoded because it is based upon the number of pages used up by the automatically generated table of contents.
","iOS Crash Dump Analysis is a free, open-source book. The book is available in
English, Chinese, and Kindle versions. The source code is available for free on
GitHub. There is a published 1st edition of the book on the web."
2999,Peer-to-peer hypermedia protocol,"# IPFS powers the Distributed Web

### A peer-to-peer hypermedia protocol to make the web faster, safer, and more open.

## TL;DR

- **Get help and talk about ideas in the [IPFS Forums](https://discuss.ipfs.tech)**
- Visit the [IPFS website](https://ipfs.tech)
- Watch Juan Benet's [Why IPFS?](https://www.youtube.com/watch?v=zE_WSLbqqvo) keynote from IPFS Camp 2019
- Watch Juan's Stanford Seminar talk on [IPFS: The Distributed, Permanent Web](https://www.youtube.com/watch?v=HUVmypx9HGI)
- Watch a video demo [of the IPFS alpha](https://www.youtube.com/watch?v=8CMxDNuuAiQ)
- Dive in to the [IPFS Docs](https://docs.ipfs.tech)
- Find out about chat channels, the IPFS newsletter, the IPFS blog, and more in the [IPFS community space](https://docs.ipfs.tech/community/).

## Full contents

- [Quick summary](#quick-summary)
- [Learn how IPFS works](#learn-how-ipfs-works)
- [Current state of IPFS](#current-state-of-ipfs)
  - [Try it out](#try-it-out)
  - [A word on security](#a-word-on-security)
- [Get involved](#get-involved)
- [Help and documentation](#help-and-documentation)
- [Links and resources](#links-and-resources)
  - [Protocol implementations](#protocol-implementations)
  - [GUIs and helper apps](#guis-and-helper-apps)
  - [Specs and papers](#specs-and-papers)
  - [Installation and update tools](#installation-and-update-tools)
  - [Additional resources](#additional-resources)
- [License](#license)

## Quick summary

The IPFS project seeks to evolve the infrastructure of the Internet and the Web, with many things we've learned from successful systems, like [Git](https://git-scm.com/), [BitTorrent](http://bittorrent.org/), [Kademlia](https://en.wikipedia.org/wiki/Kademlia), [Bitcoin](https://bitcoin.org/), and many, many more. This is the sort of thing that would have come out of ARPA/DARPA, IETF, or Bell Labs in another age. IPFS is a free, open-source project with thousands of contributors.

IPFS ([the InterPlanetary File System](https://docs.ipfs.tech/concepts/what-is-ipfs/)) is a hypermedia distribution **protocol** addressed by content and identities. It enables the creation of completely distributed applications, and in doing so aims to make the web faster, safer, and more open. 

IPFS is a **distributed file system** that seeks to connect all computing devices with the same system of files. In some ways, this is similar to the original aims of the Web, but IPFS is actually more similar to a single BitTorrent swarm exchanging Git objects. You can read more about its origins in the paper [IPFS - Content Addressed, Versioned, P2P File System](https://github.com/ipfs/ipfs/blob/master/papers/ipfs-cap2pfs/ipfs-p2p-file-system.pdf?raw=true).

IPFS is becoming a **new major subsystem of the internet**. If built right, it could complement or replace HTTP. It could complement or replace even more. Let's go point-by-point into how.

IPFS is a **protocol**:
- Defines a content-addressed file system
- Coordinates content delivery
- Combines Kademlia + BitTorrent + Git

IPFS is a **file system**:
- Has directories and files
- Is a mountable filesystem (via FUSE)

IPFS is a **web**:
- Can be used to view documents like the conventional web
- Files are accessible via HTTP at `https://ipfs.io/<path>`
- Browsers and extensions can learn to use the `ipfs://` URL or `ipns://` URI schemes directly
- Hash-addressed content guarantees authenticity

IPFS is **modular**:
- Connection layer over any network protocol
- Routing layer
- Uses a routing layer DHT (Kademlia/Coral)
- Uses a path-based naming service
- Uses a BitTorrent-inspired block exchange

IPFS uses **crypto**:
- Cryptographic-hash content addressing
- Block-level deduplication
- File integrity plus versioning
- File-system-level encryption plus signing support

IPFS is **p2p**:
- Worldwide peer-to-peer file transfers
- Completely decentralized architecture
- **No** central point of failure

IPFS is **a CDN**:
- Add a file to the file system locally, and it's now available to the world
- Caching-friendly (content-hash naming)
- BitTorrent-based bandwidth distribution

IPFS has **a name service**:
- IPNS, an SFS-inspired name system
- Global namespace based on PKI
- It serves to build trust chains
- It's compatible with other NSes
- Can map DNS, .onion, .bit, etc to IPNS

## Learn how IPFS works

To learn more about how IPFS works, explore the following resources:
- [IPFS Docs: How IPFS Works](https://docs.ipfs.tech/concepts/how-ipfs-works)
- [IPFS Specifications](https://github.com/ipfs/specs)
- IPFS-related papers:
  - [IPFS - Content Addressed, Versioned, P2P File System (draft 3)](https://github.com/ipfs/ipfs/blob/master/papers/ipfs-cap2pfs/ipfs-p2p-file-system.pdf?raw=true)
  - For academic papers on IPFS, visit the [ipfs/papers](https://github.com/ipfs/papers) repo.
  - For papers that you can read to understand IPFS and its underlying technologies, check out the [""Further Reading""](https://docs.ipfs.tech/concepts/further-reading/academic-papers) section of the [IPFS Docs](https://docs.ipfs.tech).
- [IPFS Videos & Media](https://ipfs.tech/media/) for a regularly-updated list of videos and media/news coverage, including these highlights:
  - [IPFS: The Distributed, Permanent Web](https://www.youtube.com/watch?v=HUVmypx9HGI) at Stanford Seminar (best overview of project)
  - [IPFS: The Permanent Web](https://www.youtube.com/watch?v=Fa4pckodM9g) at [Sourcegraph](https://sourcegraph.com/) (first public talk)
  - [IPFS Alpha Demo](https://www.youtube.com/watch?v=8CMxDNuuAiQ)
  - [The Decentralized Web, IPFS and Filecoin](https://www.youtube.com/watch?v=cU-n_m-snxQ)
  - [IPFS Hands-on Introduction](https://www.youtube.com/watch?v=h73bd9b5pPA) at Ethereum SV Meetup
  - [Distributed Apps with IPFS](https://www.youtube.com/watch?v=jONZtXMu03w)

## Current state of IPFS

**IPFS is a work in progress!** It is an ambitious plan to make the internet more free, open, secure, and high-performance. It builds on the good ideas of numerous battle-tested distributed systems.

Today, there are [multiple implementations from various organizations supporting multiple languages](https://docs.ipfs.tech/basics/ipfs-implementations/).

### Try it out

See https://docs.ipfs.tech/basics/

### A word on security

The IPFS protocol and its implementations are still in heavy development. This means that there may be problems in our protocols, or there may be mistakes in our implementations. And — though IPFS is not production-ready yet — many people are already running nodes on their machines, so we take security vulnerabilities very seriously. If you discover a security issue, please bring it to our attention right away!

If you find a vulnerability that may affect live deployments — for example, by exposing a remote execution exploit — please send your report privately to security@ipfs.io. **Please do not file a public issue.**

If the issue is a protocol weakness that cannot be immediately exploited, or something not yet deployed, just discuss it openly.

## Get involved

[![](https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif)](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md)

The IPFS project is big — with thousands of contributors in our community — and you're invited to join! Check out the [Community section of the IPFS Docs](https://docs.ipfs.tech/community/) for all the details on how to get involved, including the official [IPFS forums](https://discuss.ipfs.tech), our [chat channels](https://docs.ipfs.tech/community/chat), [social media](https://docs.ipfs.tech/community/social-media), [meetups and ProtoSchool workshops](https://github.com/ipfs/community#events), and more.

If you're interested in how the project is organized at a higher level, visit the [IPFS Team & Project Management](https://github.com/ipfs/team-mgmt) repo.

There's also a weekly IPFS newsletter ([subscribe here](http://eepurl.com/gL2Pi5)) and [regularly-updated blog](https://blog.ipfs.io/).

## Help and documentation

If you're looking for help learning about or building with IPFS, start with these resources:

- [IPFS Documentation](https://docs.ipfs.tech)
- [IPFS Forums](https://discuss.ipfs.tech)

**If you've found a bug or want to make a feature request regarding a specific component of IPFS, please open an issue in the appropriate repo so that it can be triaged and responded to as quickly as possible.**

## Links and resources

The IPFS project is big (and expanding every day!), so we've excerpted some frequently-used links and other resources below. However, we encourage you to explore both the main [IPFS GitHub org](https://github.com/ipfs) (for core implementations and other mission-critical work) and the [IPFS Shipyard GitHub org](https://github.com/ipfs-shipyard), home to incubated projects by the IPFS community.

### Protocol implementations

These are [multiple implementations from various organizations supporting multiple languages](https://docs.ipfs.tech/basics/ipfs-implementations/)

### GUIs and helper apps

- [ipfs-companion](https://github.com/ipfs-shipyard/ipfs-companion) - The IPFS web browser extension.
- [ipfs-webui](https://github.com/ipfs/webui) - The IPFS WebUI app.
- [ipfs-desktop](https://github.com/ipfs-shipyard/ipfs-desktop) - A menubar/tray desktop app.
- [ipfs-gui](https://github.com/ipfs/ipfs-gui) - Coordinating development, user experience, and maintenance of IPFS GUIs.
- [i18n](https://github.com/ipfs/i18n) - The IPFS Translation Project: crowdsourcing translations of IPFS GUIs and websites.

### Apps and data sets on IPFS

- [Awesome IPFS](https://awesome.ipfs.tech) - an ever-growing list of apps, data sets, and other inspirational resources built on IPFS.

### Specs and papers

- [specs](https://github.com/ipfs/specs) - Specifications on the IPFS protocol.
- [papers](papers) - Academic papers on IPFS.
- [IPFS Docs: Further Reading](https://docs.ipfs.tech/concepts/further-reading/academic-papers) - Papers to read to understand IPFS and its underlying technologies.

### Installation and update tools

- [install-go-ipfs](https://github.com/ipfs/go-ipfs#install) - Install go-ipfs shell script.
- [install-js-ipfs](https://github.com/ipfs/js-ipfs#getting-started) - Install js-ipfs through NPM or a script tag.
- [ipfs-update](https://github.com/ipfs/ipfs-update) - An updater tool for IPFS.
- [fs-repo-migrations](https://github.com/ipfs/fs-repo-migrations) - These are migrations for [IPFS fs-repo](https://github.com/ipfs/specs/tree/399c907b214a24dc82ca010af6884227cb2829cf/repo/fs-repo) versions.
- [npm-go-ipfs](https://github.com/ipfs/npm-go-ipfs) - Install go-ipfs from NPM.

### Additional resources

- [distributions](https://github.com/ipfs/distributions) - Source code for the IPFS distributions website, https://dist.ipfs.tech.
- [infra](https://github.com/ipfs/infra) - Tools for maintaining infrastructure for the IPFS community.
- [testground](https://github.com/ipfs/testground) - Tools for testing distributed software at scale.
- [ipfs-cluster](https://github.com/ipfs/ipfs-cluster) - Provides data orchestration across a swarm of IPFS daemons by allocating, replicating, and tracking a global pinset distributed among multiple peers.
- [ipfs-shipyard](https://github.com/ipfs-shipyard) - A wide range of incubated projects by and for the IPFS community.
- [website](https://github.com/ipfs/ipfs-website) - Source code for the IPFS website, http://ipfs.tech.

## License

[MIT](LICENSE).
","IPFS is a peer-to-peer hypermedia protocol to make the web faster, safer, and
more open. It is a free, open-source project with thousands of contributors. If
built right, it could replace or replace or complement or replace even more."
1077,"Connect, secure, control, and observe services.","# Istio

[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/1395/badge)](https://bestpractices.coreinfrastructure.org/projects/1395)
[![Go Report Card](https://goreportcard.com/badge/github.com/istio/istio)](https://goreportcard.com/report/github.com/istio/istio)
[![GoDoc](https://godoc.org/istio.io/istio?status.svg)](https://godoc.org/istio.io/istio)

<a href=""https://istio.io/"">
    <img src=""https://github.com/istio/istio/raw/master/logo/istio-bluelogo-whitebackground-unframed.svg""
         alt=""Istio logo"" title=""Istio"" height=""100"" width=""100"" />
</a>

---

Istio is an open source service mesh that layers transparently onto existing distributed applications. Istio’s powerful features provide a uniform and more efficient way to secure, connect, and monitor services. Istio is the path to load balancing, service-to-service authentication, and monitoring – with few or no service code changes.

- For in-depth information about how to use Istio, visit [istio.io](https://istio.io)
- To ask questions and get assistance from our community, visit [discuss.istio.io](https://discuss.istio.io)
- To learn how to participate in our overall community, visit [our community page](https://istio.io/about/community)

In this README:

- [Introduction](#introduction)
- [Repositories](#repositories)
- [Issue management](#issue-management)

In addition, here are some other documents you may wish to read:

- [Istio Community](https://github.com/istio/community#istio-community) - describes how to get involved and contribute to the Istio project
- [Istio Developer's Guide](https://github.com/istio/istio/wiki/Preparing-for-Development) - explains how to set up and use an Istio development environment
- [Project Conventions](https://github.com/istio/istio/wiki/Development-Conventions) - describes the conventions we use within the code base
- [Creating Fast and Lean Code](https://github.com/istio/istio/wiki/Writing-Fast-and-Lean-Code) - performance-oriented advice and guidelines for the code base

You'll find many other useful documents on our [Wiki](https://github.com/istio/istio/wiki).

## Introduction

[Istio](https://istio.io/latest/docs/concepts/what-is-istio/) is an open platform for providing a uniform way to [integrate
microservices](https://istio.io/latest/docs/examples/microservices-istio/), manage [traffic flow](https://istio.io/latest/docs/concepts/traffic-management/) across microservices, enforce policies
and aggregate telemetry data. Istio's control plane provides an abstraction
layer over the underlying cluster management platform, such as Kubernetes.

Istio is composed of these components:

- **Envoy** - Sidecar proxies per microservice to handle ingress/egress traffic
   between services in the cluster and from a service to external
   services. The proxies form a _secure microservice mesh_ providing a rich
   set of functions like discovery, rich layer-7 routing, circuit breakers,
   policy enforcement and telemetry recording/reporting
   functions.

  > Note: The service mesh is not an overlay network. It
  > simplifies and enhances how microservices in an application talk to each
  > other over the network provided by the underlying platform.

- **Istiod** - The Istio control plane. It provides service discovery, configuration and certificate management. It consists of the following sub-components:

    - **Pilot** - Responsible for configuring the proxies at runtime.

    - **Citadel** - Responsible for certificate issuance and rotation.

    - **Galley** - Responsible for validating, ingesting, aggregating, transforming and distributing config within Istio.

- **Operator** - The component provides user friendly options to operate the Istio service mesh.

## Repositories

The Istio project is divided across a few GitHub repositories:

- [istio/api](https://github.com/istio/api). This repository defines
component-level APIs and common configuration formats for the Istio platform.

- [istio/community](https://github.com/istio/community). This repository contains
information on the Istio community, including the various documents that govern
the Istio open source project.

- [istio/istio](README.md). This is the main code repository. It hosts Istio's
core components, install artifacts, and sample programs. It includes:

    - [istioctl](istioctl/). This directory contains code for the
[_istioctl_](https://istio.io/latest/docs/reference/commands/istioctl/) command line utility.

    - [operator](operator/). This directory contains code for the
[Istio Operator](https://istio.io/latest/docs/setup/install/operator/).

    - [pilot](pilot/). This directory
contains platform-specific code to populate the
[abstract service model](https://istio.io/docs/concepts/traffic-management/#pilot), dynamically reconfigure the proxies
when the application topology changes, as well as translate
[routing rules](https://istio.io/latest/docs/reference/config/networking/) into proxy specific configuration.

    - [security](security/). This directory contains [security](https://istio.io/latest/docs/concepts/security/) related code,
including Citadel (acting as Certificate Authority), citadel agent, etc.

- [istio/proxy](https://github.com/istio/proxy). The Istio proxy contains
extensions to the [Envoy proxy](https://github.com/envoyproxy/envoy) (in the form of
Envoy filters) that support authentication, authorization, and telemetry collection.

## Issue management

We use GitHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:

- **Epic**. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things.
Each issue is ultimately part of an epic.

- **Milestone**. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or 'Nebulous Future'. The milestone indicates when we
think the issue should get addressed.

- **Priority**. Each issue has a priority which is represented by the column in the [Prioritization](https://github.com/orgs/istio/projects/6) project. Priority can be one of
P0, P1, P2, or >P2. The priority indicates how important it is to address the issue within the milestone. P0 says that the
milestone cannot be considered achieved if the issue isn't resolved.

---

<div align=""center"">
    <img src=""https://raw.githubusercontent.com/cncf/artwork/master/other/cncf/horizontal/color/cncf-color.svg"" width=""300"" alt=""Cloud Native Computing Foundation logo""/>
    <p>Istio is a <a href=""https://cncf.io"">Cloud Native Computing Foundation</a> project.</p>
</div>
","Istio is an open platform for providing a uniform way to integrate
microservices. It is composed of these components: **Envoy** - Sidecar proxies
per microservice to handle ingress/egress traffic between services in the
cluster and from a service to external services. **Istiod** - The Istio control
plane providing service discovery, configuration and certificate management.
**Galley** - Responsible for validating, ingesting, aggregating, transforming
and distributing config within IStio."
401,No root required Android DNS modifier and Hosts/DNSMasq resolver.,"# iTXTech Daedalus

__No root required Android DNS modifier and Hosts/DNSMasq resolver.__

## Installations
* __[Releases](https://github.com/iTXTech/Daedalus/releases)__ - Release signature
* __[Play Test](https://play.google.com/apps/testing/org.itxtech.daedalus)__ - Release signature

[<img alt='Get it on Google Play'
      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'
      height=""80"">](https://play.google.com/store/apps/details?id=org.itxtech.daedalus)
[<img src=""https://fdroid.gitlab.io/artwork/badge/get-it-on.png""
     alt=""Get it on F-Droid""
     height=""80"">](https://f-droid.org/packages/org.itxtech.daedalus)

## Useful links
* __[Telegram](https://t.me/iTXTechDaedalus)__ - Join chat
* __[Wiki](https://github.com/iTXTech/Daedalus/wiki)__ - Pending update

## Introduction

This application creates a VPN tunnel to handle all DNS requests.<br>
<br>
Features:
* No root access required, no ads contained
* Functional under data connection
* A tester for DNS servers
* IPv6 support (including Rules!)
* Custom DNS server
* Custom hosts and DNSMasq configuration
* EXTREME LOW power consume
* Material Design

Supported DNS Query Methods:
* UDP
* TCP 
* DNS over TLS ([RFC7858](https://tools.ietf.org/html/rfc7858))
* DNS over HTTPS ([RFC8484](https://tools.ietf.org/html/rfc8484))
* DNS over HTTPS ([Google JSON](https://developers.google.com/speed/public-dns/docs/dns-over-https))
<br>

__Users must comply with local laws and regulations.__<br>

## DNS Server Providers

* __CuteDNS__ - *Shutdown according to regulations*
* __[FUN DNS](http://fundns.cn)__ - *Shutdown according to regulations*
* __[Pure DNS](https://puredns.cn/)__ - *Shutdown according to regulations*
* __[PdoMo-DNS](https://pdomo.me/)__ - *Shutdown according to regulations*
* __[rubyfish](https://www.rubyfish.cn)__ - *Free DoT/DoH DNS*

## Rule Providers

* __[hosts](https://github.com/googlehosts/hosts)__ by *[googlehosts](https://github.com/googlehosts)* - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)
* __[yhosts](https://github.com/vokins/yhosts)__ by *[vokins](https://github.com/vokins)* - [CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/)

## Requirements

* Minimum Android version: >= 5.0 (API 21)
* Recommended Android version: >= 7.1 (API 25) - __*Launcher shortcuts*__

## Open Source Licenses

* __[ClearEditText](https://github.com/MrFuFuFu/ClearEditText)__ by *[Yuan Fu](https://github.com/MrFuFuFu)* - [APL 2.0](https://github.com/MrFuFuFu/ClearEditText)
* __[DNS66](https://github.com/julian-klode/dns66)__ by *[Julian Andres Klode](https://github.com/julian-klode)* - [GPLv3](https://github.com/julian-klode/dns66/blob/master/COPYING)
* __[Pcap4J](https://github.com/kaitoy/pcap4j)__ by *[Kaito Yamada](https://github.com/kaitoy)* - [MIT](https://github.com/kaitoy/pcap4j)
* __[MiniDNS](https://github.com/MiniDNS/minidns)__ by *[MiniDNS](https://github.com/MiniDNS)* - [APL 2.0](https://github.com/MiniDNS/minidns/blob/master/LICENCE_APACHE)
* __[Gson](https://github.com/google/gson)__ by *[Google](https://github.com/google)* - [APL 2.0](https://github.com/google/gson/blob/master/LICENSE)
* __[Shadowsocks](https://github.com/shadowsocks/shadowsocks-android)__ by *[Shadowsocks](https://github.com/shadowsocks)* - [GPLv3](https://github.com/shadowsocks/shadowsocks-android/blob/master/LICENSE)

## Credits

* __[JetBrains](https://www.jetbrains.com/)__ - For providing free license for [IntelliJ IDEA](https://www.jetbrains.com/idea/)

## License

    Copyright (C) 2017-2022 iTX Technologies <admin@itxtech.org>
    
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
","This application creates a VPN tunnel to handle all DNS requests. No root access
required, no ads contained. Users must comply with local laws and regulations.
Minimum Android version: 5.0 (API 21) recommended version: 7.1 (API 25) Open
Source Licenses: [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-
sa/4.0/deed.zh) Free Software License: [JetBrains IDEA] (CPLv3) (JPG)"
97,深入理解Java集合框架,"# Java Collections Framework Internals

# Authors

| Name | Weibo Id | Blog | Mail |
|:-----------|:-------------|:-------------|:-----------|
| 李豪 |[@计算所的小鼠标](http://weibo.com/icttinymouse) | [CarpenterLee](http://www.cnblogs.com/CarpenterLee/) | hooleeucas@163.com |

# Introduction

关于*C++标准模板库(Standard Template Library, STL)*的书籍和资料有很多，关于*Java集合框架(Java Collections Framework, JCF)*的资料却很少，甚至很难找到一本专门介绍它的书籍，这给Java学习者们带来不小的麻烦。我深深的不解其中的原因。**虽然JCF设计参考了STL，但其定位不是Java版的STL，而是要实现一个精简紧凑的容器框架**，对STL的介绍自然不能替代对JCF的介绍。

本系列文章主要从**数据结构和算法**层面分析JCF中List, Set, Map, Stack, Queue等典型容器，**结合生动图解和源代码，帮助读者对Java集合框架建立清晰而深入的理解**。本文并不特意介绍Java的语言特性，但会在需要的时候做出简洁的解释。

# Contents

具体内容安排如下：

1. [Overview](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/1-Overview.md) 对Java Collections Framework，以及Java语言特性做出基本介绍。
2. [ArrayList](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/2-ArrayList.md) 结合源码对*ArrayList*进行讲解。
3. [LinkedList](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/3-LinkedList.md) 结合源码对*LinkedList*进行讲解。
4. [Stack and Queue](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/4-Stack%20and%20Queue.md) 以*AarryDeque*为例讲解*Stack*和*Queue*。
5. [TreeSet and TreeMap](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/5-TreeSet%20and%20TreeMap.md) 结合源码对*TreeSet*和*TreeMap*进行讲解。
6. [HashSet and HashMap](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet%20and%20HashMap.md) 结合源码对*HashSet*和*HashMap*进行讲解。
7. [LinkedHashSet and LinkedHashMap](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/7-LinkedHashSet%20and%20LinkedHashMap.md) 结合源码对*LinkedHashSet*和*LinkedHashMap*进行讲解。
8. [PriorityQueue](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/8-PriorityQueue.md) 结合源码对*PriorityQueue*进行讲解。
9. [WeakHashMap](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/9-WeakHashMap.md) 对*WeakHashMap*做出基本介绍。
","summarize: # Introduction. # Contents. # Table of contents. # Structure of the
code. # The code is written in C++ and is compiled using the JCF toolkit. The
code was created by Carpenter Lee and his team at JCF.org. It is available
online at
GitHub.com/CarpenterLee/JCFInternals/blob/master/markdown/2-ArrayList.md. It's
written in the C++ programming language. It uses the Java Collections Framework."
3377,Jenkins Configuration as Code Plugin,"# Jenkins Configuration as Code (a.k.a. JCasC) Plugin

[![Build Status](https://ci.jenkins.io/job/Plugins/job/configuration-as-code-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/configuration-as-code-plugin/job/master/)
[![Contributors](https://img.shields.io/github/contributors/jenkinsci/configuration-as-code-plugin.svg)](https://github.com/jenkinsci/configuration-as-code-plugin/graphs/contributors)
[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/configuration-as-code.svg)](https://plugins.jenkins.io/configuration-as-code)
[![GitHub release](https://img.shields.io/github/release/jenkinsci/configuration-as-code-plugin.svg?label=changelog)](https://github.com/jenkinsci/configuration-as-code-plugin/releases/latest)
[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/configuration-as-code.svg?color=blue)](https://plugins.jenkins.io/configuration-as-code)
[![Gitter](https://badges.gitter.im/jenkinsci/configuration-as-code-plugin.svg)](https://gitter.im/jenkinsci/configuration-as-code-plugin)

<img src=""plugin/src/main/webapp/img/logo-head.svg"" width=""192"">


- [Introduction](#introduction)
- [Getting Started](#getting-started)
- [Examples and demos](./demos)
- [Handling Secrets](./docs/features/secrets.adoc)
- [Security considerations](#security-considerations)
- [Exporting configurations](./docs/features/configExport.md)
- [Validating configurations](./docs/features/jsonSchema.md)
- [Merge Strategy](./docs/features/mergeStrategy.md)
- [Triggering Configuration Reload](./docs/features/configurationReload.md)
- [Installing plugins](#installing-plugins)
- [Supported Plugins](#supported-plugins)
- [Adding JCasC support to a plugin](#adding-jCasC-support-to-a-plugin)
- [Configuration-as-Code extension plugins](#configuration-as-Code-extension-plugins)
- [Jenkins Enhancement Proposal](#jenkins-enhancement-proposal)

## Introduction

Setting up Jenkins is a complex process, as both Jenkins and its plugins require some tuning and configuration,
with dozens of parameters to set within the web UI `manage` section.

Experienced Jenkins users rely on groovy init scripts to customize Jenkins and enforce the desired state. Those
scripts directly invoke Jenkins API and, as such, can do everything (at your own risk). But they also require
you to know Jenkins internals and are confident in writing groovy scripts on top of Jenkins API.

The Configuration as Code plugin is an _**opinionated**_ way to configure Jenkins based on
human-readable declarative configuration files. Writing such a file should be feasible without being a Jenkins
expert, just translating into _code_ a configuration process one is used to executing in the web UI.

The below configuration file includes root entries for various components of your primary Jenkins installation. The `jenkins` one is for the root Jenkins object, and the other ones are for different global configuration elements.

```yaml
jenkins:
  systemMessage: ""Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n""
  globalNodeProperties:
  - envVars:
      env:
      - key: VARIABLE1
        value: foo
      - key: VARIABLE2
        value: bar
  securityRealm:
    ldap:
      configurations:
        - groupMembershipStrategy:
            fromUserRecord:
              attributeName: ""memberOf""
          inhibitInferRootDN: false
          rootDN: ""dc=acme,dc=org""
          server: ""ldaps://ldap.acme.org:1636""

  nodes:
    - permanent:
        name: ""static-agent""
        remoteFS: ""/home/jenkins""
        launcher:
          jnlp:
            workDirSettings:
              disabled: true
              failIfWorkDirIsMissing: false
              internalDir: ""remoting""
              workDirPath: ""/tmp""

  slaveAgentPort: 50000
  agentProtocols:
    - ""jnlp2""

tool:
  git:
    installations:
      - name: git
        home: /usr/local/bin/git

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: SYSTEM
              id: ssh_with_passphrase_provided
              username: ssh_root
              passphrase: ${SSH_KEY_PASSWORD}
              description: ""SSH passphrase with private key file. Private key provided""
              privateKeySource:
                directEntry:
                  privateKey: ${SSH_PRIVATE_KEY}
```

Additionally, we want to have a well-documented syntax file and tooling to assist in writing and testing,
so end users have full guidance in using this toolset and do not have to search for examples on the Internet.

See the [presentation slides](https://docs.google.com/presentation/d/1VsvDuffinmxOjg0a7irhgJSRWpCzLg_Yskf7Fw7FpBg/edit?usp=sharing) from DevOps World - Jenkins World 2018 for an overview.

## Getting Started

First, start a Jenkins instance with the [Configuration as Code](https://plugins.jenkins.io/configuration-as-code) plugin installed.

- Those running Jenkins as a [Docker](https://github.com/jenkinsci/docker) container (and maybe also [pre-installing plugins](https://github.com/jenkinsci/docker#preinstalling-plugins)), do include [Configuration as Code](https://plugins.jenkins.io/configuration-as-code) plugin.

Second, the plugin looks for the `CASC_JENKINS_CONFIG` environment variable. The variable points to a comma-separated list of any of the following:

- Path to a folder containing a set of config files. For example, `/var/jenkins_home/casc_configs`.
- A full path to a single file. For example, `/var/jenkins_home/casc_configs/jenkins.yaml`.
- A URL pointing to a file served on the web. For example, `https://acme.org/jenkins.yaml`.

If an element of `CASC_JENKINS_CONFIG` points to a folder, the plugin will recursively traverse the folder to find file(s) with .yml,.yaml,.YAML,.YML suffix. It will exclude hidden files or files that contain a hidden folder in **any part** of the full path. It follows symbolic links for both files and directories.
<details><summary>Exclusion examples</summary>

`CASC_JENKINS_CONFIG=/jenkins/casc_configs`  
:heavy_check_mark: `/jenkins/casc_configs/jenkins.yaml`  
:heavy_check_mark: `/jenkins/casc_configs/dir1/config.yaml`  
:x: `/jenkins/casc_configs/.dir1/config.yaml`  
:x: `/jenkins/casc_configs/..dir2/config.yaml`  
  
`CASC_JENKINS_CONFIG=/jenkins/.configs/casc_configs` contains hidden folder `.config`  
:x: `/jenkins/.configs/casc_configs/jenkins.yaml`  
:x: `/jenkins/.configs/casc_configs/dir1/config.yaml`  
:x: `/jenkins/.configs/casc_configs/.dir1/config.yaml`  
:x: `/jenkins/.configs/casc_configs/..dir2/config.yaml`  
</details>

All configuration files that are discovered MUST be supplementary. They cannot overwrite each other's configuration values. This creates a conflict and raises a `ConfiguratorException`. Thus, the order of traversal does not matter to the final outcome.

Instead of setting the `CASC_JENKINS_CONFIG` environment variable, you can also define using
the `casc.jenkins.config` Java property.  This is useful when installing Jenkins via a package
management tool and can't set an environment variable outside of a package-managed file, which could
be overwritten by an update.  For RHEL/CentOS systems, you can append the following to the
`JENKINS_JAVA_OPTIONS` entry in `/etc/sysconfig/jenkins`
 
  `-Dcasc.jenkins.config=/jenkins/casc_configs`
 
If you do not set the `CASC_JENKINS_CONFIG` environment variable or the `casc.jenkins.config` Java
property, the plugin will default to looking for a single config file in
`$JENKINS_HOME/jenkins.yaml`.

If set up correctly, you should be able to browse the Configuration as Code page `Manage Jenkins` -> `Configuration as Code`.

## Initial Configuration

When configuring the first Jenkins instance, browse the examples shown in the [demos](demos)
directory of this repository. If you have a plugin that does not have an example, consult the reference
help document. Click the `Documentation` link at the bottom of the Configuration as Code page.

![Reference Page](images/reference.png)

If you want to configure a specific plugin, search the page for the name of the plugin. The page will
show you which root element belongs to the configuration. Most installed plugins belong under the `unclassified` root
element.

![Unclassified Section](images/unclassified.png)

## Examples

See [demos](demos) folder with various samples.

### LDAP

Replace user interface based configuration for LDAP with the text-based configuration.

![configuration form](images/sample_form.png)

```yaml
jenkins:
  securityRealm:
    ldap:
      configurations:
        - groupMembershipStrategy:
            fromUserRecord:
              attributeName: ""memberOf""
          inhibitInferRootDN: false
          rootDN: ""dc=acme,dc=org""
          server: ""ldaps://ldap.acme.org:1636""
```

### Yaml Aliases and Anchors

Replace repeated elements with yaml anchors.
Anchor keys must be prefixed with `x-` due to JCasC handling unknown root elements.

```yaml
x-jenkins-linux-node: &jenkins_linux_node_anchor
  remoteFS: ""/home/jenkins""
  launcher:
    jnlp:
      workDirSettings:
        disabled: true
        failIfWorkDirIsMissing: false
        internalDir: ""remoting""
        workDirPath: ""/tmp""

jenkins:
  nodes:
    - permanent:
        name: ""static-agent1""
        <<: *jenkins_linux_node_anchor
    - permanent:
        name: ""static-agent2""
        <<: *jenkins_linux_node_anchor
```

Which produces two permanent agent nodes which can also be written like this.

```yaml
jenkins:
  nodes:
    - permanent:
        name: ""static-agent1""
        remoteFS: ""/home/jenkins""
        launcher:
          jnlp:
            workDirSettings:
              disabled: true
              failIfWorkDirIsMissing: false
              internalDir: ""remoting""
              workDirPath: ""/tmp""
    - permanent:
        name: ""static-agent2""
        remoteFS: ""/home/jenkins""
        launcher:
          jnlp:
            workDirSettings:
              disabled: true
              failIfWorkDirIsMissing: false
              internalDir: ""remoting""
              workDirPath: ""/tmp""
```

## Security considerations
Only Jenkins administrators are able to create or update a Jenkins instance using configuration as code configuration files.
However, in some environments, administrators may choose to allow less privileged users to modify portions of the configuration files, for example by storing them in an SCM repository that those users have access to.
Allowing non-administrators to edit these configuration files can pose various security risks, so any changes made by non-administrators must be reviewed for safety before they are applied.

Here are some examples of changes that could be problematic:

- Modification of the security realm or authorization strategy settings could give users higher permissions than intended.
- Interpolation of secrets in unprotected contexts may expose sensitive data. For example, a snippet like `systemMessage: ""${SENSITIVE_VARIABLE}""` could expose the value of a sensitive environment variable to all users who are able to access Jenkins.

## Installing plugins

We don't support installing plugins with JCasC, so you need to use something else for this,

Dockers users can use:\
[https://github.com/jenkinsci/docker/#preinstalling-plugins](https://github.com/jenkinsci/docker/#preinstalling-plugins)

Kubernetes users:\
[https://github.com/jenkinsci/helm-charts](https://github.com/jenkinsci/helm-charts)

## Supported Plugins

Most plugins should be supported out-of-the-box or maybe require some minimal changes. See this [dashboard](https://issues.jenkins.io/secure/Dashboard.jspa?selectPageId=18341) for known compatibility issues.

## Adding JCasC support to a plugin

Plugin developers wanting to support JCasC in their plugin should [check out our how-to guide](docs/PLUGINS.md).

## Configuration-as-Code extension plugins

- [configuration-as-code-groovy-plugin](https://github.com/jenkinsci/configuration-as-code-groovy-plugin)\
  Allows specifying groovy code that should run on during configuration.

## Jenkins Enhancement Proposal

As configuration as code is demonstrated to be a highly requested topic in the Jenkins community, we have published
[JEP 201](https://github.com/jenkinsci/jep/tree/master/jep/201) as a proposal to make this a standard component
of the Jenkins project. The proposal was accepted. :tada:
","Jenkins and its plugins require some tuning and configuration. The Configuration
as Code plugin is an _**opinionated** way to configure Jenkins based on human-
readable declarative configuration files. We want to have a well-documented
syntax file and tooling to assist in writing and writing and testing in this
tooling. We do not have full guidance using this tool set and do not need to
search to find examples on the Internet. We hope this guide will help you get
started with Jenkins."
3137,A Git-compatible DVCS that is both simple and powerful,"# Jujutsu VCS

![](https://img.shields.io/github/license/martinvonz/jj) ![](https://img.shields.io/github/v/release/martinvonz/jj) ![](https://img.shields.io/github/release-date/martinvonz/jj) ![](https://img.shields.io/crates/v/jujutsu)
<br/>
![](https://github.com/martinvonz/jj/workflows/build/badge.svg) ![](https://img.shields.io/codefactor/grade/github/martinvonz/jj/main) ![](https://img.shields.io/librariesio/github/martinvonz/jj)

- [Disclaimer](#disclaimer)
- [Introduction](#introduction)
- [Status](#status)
- [Installation](#installation)
- [Command-line completion](#command-line-completion)
- [Getting started](#getting-started)
- [Related work](#related-work)

## Disclaimer

This is not a Google product. It is an experimental version-control system
(VCS). It was written by me, Martin von Zweigbergk (martinvonz@google.com). It
is my personal hobby project and my 20% project at Google. It does not indicate
any commitment or direction from Google. However, my presentation from Git Merge
2022 does include some information about Google's plans. See the
[slides](https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view)
or the [recording](https://www.youtube.com/watch?v=bx_LGilOuE4).


## Introduction

Jujutsu is a [Git-compatible](docs/git-compatibility.md)
[DVCS](https://en.wikipedia.org/wiki/Distributed_version_control). It combines
features from Git (data model,
[speed](https://github.com/martinvonz/jj/discussions/49)), Mercurial (anonymous
branching, simple CLI [free from ""the index""](docs/git-comparison.md#the-index),
[revsets](docs/revsets.md), powerful history-rewriting), and Pijul/Darcs
([first-class conflicts](docs/conflicts.md)), with features not found in most
of them ([working-copy-as-a-commit](docs/working-copy.md),
[undo functionality](docs/operation-log.md), automatic rebase,
[safe replication via `rsync`, Dropbox, or distributed file
system](docs/technical/concurrency.md)).

The command-line tool is called `jj` for now because it's easy to type and easy
to replace (rare in English). The project is called ""Jujutsu"" because it matches
""jj"".

If you have any questions, please join us on Discord
[![Discord](https://img.shields.io/discord/968932220549103686.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/dkmfj3aGQN).

## Features

### Compatible with Git

Jujutsu has two backends. One of them is a Git backend (the other is a native
one [^native-backend]). This lets you use Jujutsu as an alternative interface to Git. The commits
you create will look like regular Git commits. You can always switch back to
Git. The Git support uses the [libgit2](https://libgit2.org/) C library.

[^native-backend]: At this time, there's practically no reason to use the native
backend (the only minor reason might be
[#27](https://github.com/martinvonz/jj/issues/27)).
The backend exists mainly to make sure that it's possible to eventually add
functionality that cannot easily be added to the Git backend.

<img src=""demos/git_compat.png"" />

### The working copy is automatically committed

Most Jujutsu commands automatically commit the working copy. This leads to a
simpler and more powerful interface, since all commands work the same way on the
working copy or any other commit. It also means that you can always check out a
different commit without first explicitly committing the working copy changes
(you can even check out a different commit while resolving merge conflicts).

<img src=""demos/working_copy.png"" />

### Operations update the repo first, then possibly the working copy

The working copy is only updated at the end of an operation, after all other
changes have already been recorded. This means that you can run any command
(such as `jj rebase`) even if the working copy is dirty.

### Entire repo is under version control

All operations you perform in the repo are recorded, along with a snapshot of
the repo state after the operation. This means that you can easily revert to an
earlier repo state, or to simply undo a particular operation (which does not
necessarily have to be the most recent operation).

<img src=""demos/operation_log.png"" />

### Conflicts can be recorded in commits

If an operation results in conflicts, information about those conflicts will be
recorded in the commit(s). The operation will succeed. You can then resolve the
conflicts later. One consequence of this design is that there's no need to
continue interrupted operations. Instead, you get a single workflow for
resolving conflicts, regardless of which command caused them. This design also
lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).

Basic conflict resolution:

<img src=""demos/resolve_conflicts.png"" />

Juggling conflicts:

<img src=""demos/juggle_conflicts.png"" />

### Automatic rebase

Whenever you modify a commit, any descendants of the old commit will be rebased
onto the new commit. Thanks to the conflict design described above, that can be
done even if there are conflicts. Branches pointing to rebased commits will be
updated. So will the working copy if it points to a rebased commit.

### Comprehensive support for rewriting history

Besides the usual rebase command, there's `jj describe` for editing the
description (commit message) of an arbitrary commit. There's also `jj diffedit`,
which lets you edit the changes in a commit without checking it out. To split
a commit into two, use `jj split`. You can even move part of the changes in a
commit to any other commit using `jj move`.


## Status

The tool is quite feature-complete, but some important features like (the
equivalent of) `git blame` are not yet supported. There
are also several performance bugs. It's also likely that workflows and setups
different from what the core developers use are not well supported.

I (Martin von Zweigbergk) have almost exclusively used `jj` to develop the
project itself since early January 2021. I haven't had to re-clone from source
(I don't think I've even had to restore from backup).

There *will* be changes to workflows and backward-incompatible changes to the
on-disk formats before version 1.0.0. Even the binary's name may change (i.e.
away from `jj`). For any format changes, we'll try to implement transparent
upgrades (as we've done with recent changes), or provide upgrade commands or
scripts if requested.


## Installation

See below for how to build from source. There are also
[pre-built binaries](https://github.com/martinvonz/jj/releases) for Windows,
Mac, or Linux (musl).

If you're installing from source, you need to use Rust version 1.61 or higher,
or you will get a cryptic message like this:
```
error: failed to select a version for the requirement `libgit2-sys = ""=0.14.0""``
candidate versions found which didn't match: 0.13.2+1.4.2, 0.13.1+1.4.2, 0.13.0+1.4.1, ...
```

### Linux

On most distributions, you'll need to build from source using `cargo` directly.

#### Build using `cargo`

First make sure that you have the `libssl-dev`, `openssl`, and `pkg-config`
packages installed by running something like this:
```shell script
sudo apt-get install libssl-dev openssl pkg-config
```

Now run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu
```


#### Nix OS

If you're on Nix OS you can use the flake for this repository.
For example, if you want to run `jj` loaded from the flake, use:

```shell script
nix run 'github:martinvonz/jj'
```

You can also add this flake url to your system input flakes. Or you can
install the flake to your user profile:

```shell script
nix profile install 'github:martinvonz/jj'
```


#### Homebrew

If you use linuxbrew, you can run:

```shell script
brew install jj
```


### Mac

#### Homebrew

If you use Homebrew, you can run:

```shell script
brew install jj
```

#### MacPorts

You can also install `jj` via [MacPorts](https://www.macports.org) (as the `jujutsu` port):

```shell script
sudo port install jujutsu
```

([port page](https://ports.macports.org/port/jujutsu/))

#### From Source

You may need to run some or all of these:
```shell script
xcode-select --install
brew install openssl
brew install pkg-config
export PKG_CONFIG_PATH=""$(brew --prefix)/opt/openssl@3/lib/pkgconfig""
```

Now run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu
```


### Windows

Run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu --features vendored-openssl
```


## Initial configuration

You may want to configure your name and email so commits are made in your name.
Create a file at `~/.jjconfig.toml` and make it look something like
this:
```shell script
$ cat ~/.jjconfig.toml
[user]
name = ""Martin von Zweigbergk""
email = ""martinvonz@google.com""
```


## Command-line completion

To set up command-line completion, source the output of
`jj debug completion --bash/--zsh/--fish`. Exactly how to source it depends on
your shell.

### Bash
```shell script
source <(jj debug completion)  # --bash is the default
```

### Zsh
```shell script
autoload -U compinit
compinit
source <(jj debug completion --zsh | sed '$d')  # remove the last line
compdef _jj jj
```

### Fish
```shell script
jj debug completion --fish | source
```

### Xonsh
```shell script
source-bash $(jj debug completion)
```


## Getting started

The best way to get started is probably to go through
[the tutorial](docs/tutorial.md). Also see the
[Git comparison](docs/git-comparison.md), which includes a table of
`jj` vs. `git` commands.


## Related work

There are several tools trying to solve similar problems as Jujutsu. See
[related work](docs/related-work.md) for details.
","Jujutsu is a Git-compatible command-line tool. It combines features from Git,
Mercurial, and Pijul/Darcs. It has two backends: a Git backend and a native
native-backend. All commands work the same way on the working copy or any other
commit. Conflicts can be recorded in commits and resolved later. The project is
called ""Jujutsu"" because it matches ""jj"" (rare) in English."
1661,"[PROJECT IS NO LONGER MAINTAINED] Code examples that show to integrate Apache Kafka 0.8+ with Apache Storm 0.9+ and Apache Spark Streaming 1.1+, while using Apache Avro as the data serialization format.","# kafka-storm-starter

Code examples that show how to integrate
[Apache Kafka](http://kafka.apache.org/) 0.8+ (latest stable) with
[Apache Storm](http://storm.incubator.apache.org/) 0.9+ (latest stable),
while using [Apache Avro](http://avro.apache.org/) as the data serialization format.

---

Table of Contents

* <a href=""#Quick-start"">Quick start</a>
* <a href=""#Features"">Features</a>
* <a href=""#Implementation-details"">Implementation details</a>
* <a href=""#Development"">Development</a>
    * <a href=""#Build-requirements"">Build requirements</a>
    * <a href=""#Building-the-code"">Building the code</a>
    * <a href=""#Running-the-tests"">Running the tests</a>
    * <a href=""#Creating-code-coverage-reports"">Creating code coverage reports</a>
    * <a href=""#Packaging-the-code"">Packaging the code</a>
    * <a href=""#IDE-support"">IDE support</a>
* <a href=""#FAQ"">FAQ</a>
    * <a href=""#FAQ-Kafka"">Kafka</a>
    * <a href=""#FAQ-Storm"">Storm</a>
* <a href=""#Known-issues"">Known issues and limitations</a>
    * <a href=""#Known-issues-them"">Upstream code</a>
    * <a href=""#Known-issues-us"">kafka-storm-starter code</a>
* <a href=""#changelog"">Change log</a>
* <a href=""#Contributing"">Contributing</a>
* <a href=""#License"">License</a>
* <a href=""#References"">References</a>
    * <a href=""#References-Wirbelsturm"">Wirbelsturm</a>
    * <a href=""#References-Kafka"">Kafka</a>
    * <a href=""#References-Storm"">Storm</a>
    * <a href=""#References-Avro"">Avro</a>
    * <a href=""#References-Kryo"">Kryo</a>

---


<a name=""Quick-start""></a>

# Quick start

## Show me!

    $ ./sbt test

This command launches our test suite.

Notably it will run end-to-end tests of Kafka, Storm, and Kafka-Storm integration.  See this abridged version of the
test output:

```
[...other tests removed...]

[info] KafkaSpec:
[info] Kafka
[info] - should synchronously send and receive a Tweet in Avro format
[info]   + Given a ZooKeeper instance
[info]   + And a Kafka broker instance
[info]   + And some tweets
[info]   + And a single-threaded Kafka consumer group
[info]   + When I start a synchronous Kafka producer that sends the tweets in Avro binary format
[info]   + Then the consumer app should receive the tweets
[info] - should asynchronously send and receive a Tweet in Avro format
[info]   + Given a ZooKeeper instance
[info]   + And a Kafka broker instance
[info]   + And some tweets
[info]   + And a single-threaded Kafka consumer group
[info]   + When I start an asynchronous Kafka producer that sends the tweets in Avro binary format
[info]   + Then the consumer app should receive the tweets
[info] StormSpec:
[info] Storm
[info] - should start a local cluster
[info]   + Given no cluster
[info]   + When I start a LocalCluster instance
[info]   + Then the local cluster should start properly
[info] - should run a basic topology
[info]   + Given a local cluster
[info]   + And a wordcount topology
[info]   + And the input words alice, bob, joe, alice
[info]   + When I submit the topology
[info]   + Then the topology should properly count the words
[info] KafkaStormSpec:
[info] Feature: AvroDecoderBolt[T]
[info]   Scenario: User creates a Storm topology that uses AvroDecoderBolt
[info]     Given a ZooKeeper instance
[info]     And a Kafka broker instance
[info]     And a Storm topology that uses AvroDecoderBolt and that reads tweets from topic testing-input and writes them as-is to topic testing-output
[info]     And some tweets
[info]     And a synchronous Kafka producer app that writes to the topic testing-input
[info]     And a single-threaded Kafka consumer app that reads from topic testing-output and Avro-decodes the incoming data
[info]     And a Storm topology configuration that registers an Avro Kryo decorator for Tweet
[info]     When I run the Storm topology
[info]     And I Avro-encode the tweets and use the Kafka producer app to sent them to Kafka
[info]     Then the Kafka consumer app should receive the original tweets from the Storm topology
[info] Feature: AvroScheme[T] for Kafka spout
[info]   Scenario: User creates a Storm topology that uses AvroScheme in Kafka spout
[info]     Given a ZooKeeper instance
[info]     And a Kafka broker instance
[info]     And a Storm topology that uses AvroScheme and that reads tweets from topic testing-input and writes them as-is to topic testing-output
[info]     And some tweets
[info]     And a synchronous Kafka producer app that writes to the topic testing-input
[info]     And a single-threaded Kafka consumer app that reads from topic testing-output and Avro-decodes the incoming data
[info]     And a Storm topology configuration that registers an Avro Kryo decorator for Tweet
[info]     When I run the Storm topology
[info]     And I Avro-encode the tweets and use the Kafka producer app to sent them to Kafka
[info]     Then the Kafka consumer app should receive the original tweets from the Storm topology
[info] Run completed in 23 seconds, 111 milliseconds.
[info] Total number of tests run: 25
[info] Suites: completed 8, aborted 0
[info] Tests: succeeded 25, failed 0, canceled 0, ignored 0, pending 0
[info] All tests passed.
[success] Total time: 34 s, completed Jun 30, 2014 11:07:22 AM
```


## Show me one more time!

    $ ./sbt run

This command launches [KafkaStormDemo](src/main/scala/com/miguno/kafkastorm/storm/KafkaStormDemo.scala).  This demo
starts in-memory instances of ZooKeeper, Kafka, and Storm.  It then runs a demo Storm topology that connects to and
reads from the Kafka instance.

You will see output similar to the following (some parts removed to improve readability):

```
7031 [Thread-19] INFO  backtype.storm.daemon.worker - Worker 3f7f1a51-5c9e-43a5-b431-e39a7272215e for storm kafka-storm-starter-1-1400839826 on daa60807-d440-4b45-94fc-8dd7798453d2:1027 has finished loading
7033 [Thread-29-kafka-spout] INFO  storm.kafka.DynamicBrokersReader - Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=127.0.0.1:9092}}
7050 [Thread-29-kafka-spout] INFO  backtype.storm.daemon.executor - Opened spout kafka-spout:(1)
7051 [Thread-29-kafka-spout] INFO  backtype.storm.daemon.executor - Activating spout kafka-spout:(1)
7051 [Thread-29-kafka-spout] INFO  storm.kafka.ZkCoordinator - Refreshing partition manager connections
7065 [Thread-29-kafka-spout] INFO  storm.kafka.DynamicBrokersReader - Read partition info from zookeeper: GlobalPartitionInformation{partitionMap={0=127.0.0.1:9092}}
7066 [Thread-29-kafka-spout] INFO  storm.kafka.ZkCoordinator - Deleted partition managers: []
7066 [Thread-29-kafka-spout] INFO  storm.kafka.ZkCoordinator - New partition managers: [Partition{host=127.0.0.1:9092, partition=0}]
7083 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Read partition information from: /kafka-spout/kafka-storm-starter/partition_0  --> null
7100 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - No partition information found, using configuration to determine offset
7105 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Starting Kafka 127.0.0.1:0 from offset 18
7106 [Thread-29-kafka-spout] INFO  storm.kafka.ZkCoordinator - Finished refreshing
7126 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Committing offset for Partition{host=127.0.0.1:9092, partition=0}
7126 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Committed offset 18 for Partition{host=127.0.0.1:9092, partition=0} for topology: 47e82e34-fb36-427e-bde6-8cd971db2527
9128 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Committing offset for Partition{host=127.0.0.1:9092, partition=0}
9129 [Thread-29-kafka-spout] INFO  storm.kafka.PartitionManager - Committed offset 18 for Partition{host=127.0.0.1:9092, partition=0} for topology: 47e82e34-fb36-427e-bde6-8cd971db2527
```

At this point Storm is connected to Kafka (more precisely: to the `testing` topic in Kafka).  The last few lines from
above -- ""Committing offset ..."" --- will be repeated again and again, because a) this demo Storm topology only reads
from the Kafka topic but it does nothing to the data that was read and b) because we are not sending any data to the
Kafka topic.

Note that this example will actually run _two_ in-memory instances of ZooKeeper:  the first (listening at
`127.0.0.1:2181/tcp`) is used by the Kafka instance, the second (listening at `127.0.0.1:2000/tcp`) is automatically
started and used by the in-memory Storm cluster.  This is because, when running in local aka in-memory mode, Storm
versions < 0.9.3 do not allow you to reconfigure or disable its own ZooKeeper instance (see the
[Storm FAQ](#FAQ-Storm) below for further information).

**To stop the demo application you must kill or `Ctrl-C` the process in the terminal.**

You can use [KafkaStormDemo](src/main/scala/com/miguno/kafkastorm/storm/KafkaStormDemo.scala) as a starting point to
create your own, ""real"" Storm topologies that read from a ""real"" Kafka, Storm, and ZooKeeper infrastructure.  An easy
way to get started with such an infrastructure is by deploying Kafka, Storm, and ZooKeeper via a tool such as
[Wirbelsturm](https://github.com/miguno/wirbelsturm).


<a name=""Features""></a>

# Features

What features do we showcase in kafka-storm-starter?  Note that we focus on showcasing, and not necessarily on
""production ready"".

* How to integrate Kafka and Storm.
* How to use [Avro](http://avro.apache.org/) with Kafka and Storm.
* Kafka standalone code examples
    * [KafkaProducerApp](src/main/scala/com/miguno/kafkastorm/kafka/KafkaProducerApp.scala):
      A simple Kafka producer app for writing Avro-encoded data into Kafka.
      [KafkaSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaSpec.scala) puts this producer to use and shows
      how to use Twitter Bijection to Avro-encode the messages being sent to Kafka.
    * [KafkaConsumer](src/main/scala/com/miguno/kafkastorm/kafka/KafkaConsumer.scala):
      A simple Kafka consumer app for reading Avro-encoded data from Kafka.
      [KafkaSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaSpec.scala) puts this consumer to use and shows
      how to use Twitter Bijection to Avro-decode the messages being read from Kafka.
* Storm standalone code examples
    * [AvroDecoderBolt[T]](src/main/scala/com/miguno/kafkastorm/storm/AvroDecoderBolt.scala):
      An `AvroDecoderBolt[T <: org.apache.avro.specific.SpecificRecordBase]` that can be parameterized with the type of
      the Avro record `T` it will deserialize its data to (i.e. no need to write another decoder bolt just because the
      bolt needs to handle a different Avro schema).
    * [AvroScheme[T]](src/main/scala/com/miguno/kafkastorm/storm/AvroScheme.scala):
      An `AvroScheme[T <: org.apache.avro.specific.SpecificRecordBase]` scheme, i.e. a custom
      `backtype.storm.spout.Scheme` to auto-deserialize a spout's incoming data.  The scheme can be parameterized with
      the type of the Avro record `T` it will deserializes its data to (i.e. no need to write another scheme just
      because the scheme needs to handle a different Avro schema).
        * You can opt to configure a spout (such as the Kafka spout) with `AvroScheme` if you want to perform the Avro
          decoding step directly in the spout instead of placing an `AvroDecoderBolt` after the Kafka spout.  You may
          want to profile your topology which of the two approaches works best for your use case.
    * [TweetAvroKryoDecorator](src/main/scala/com/miguno/kafkastorm/storm/TweetAvroKryoDecorator.scala):
      A custom `backtype.storm.serialization.IKryoDecorator`, i.e. a custom
      [Kryo serializer for Storm](http://storm.incubator.apache.org/documentation/Serialization.html).
        * Unfortunately we have not figured out a way to implement a parameterized `AvroKryoDecorator[T]` variant yet.
          (A ""straight-forward"" approach we tried -- similar to the other parameterized components -- compiled fine but
          failed at runtime when running the tests).  Code contributions are welcome!
* Kafka and Storm integration
    * [AvroKafkaSinkBolt[T]](src/main/scala/com/miguno/kafkastorm/storm/AvroKafkaSinkBolt.scala):
      An `AvroKafkaSinkBolt[T <: org.apache.avro.specific.SpecificRecordBase]` that can be parameterized with the type
      of the Avro record `T` it will serialize its data to before sending the encoded data to Kafka (i.e. no
      need to write another Kafka sink bolt just because the bolt needs to handle a different Avro schema).
    * Storm topologies that read Avro-encoded data from Kafka:
      [KafkaStormDemo](src/main/scala/com/miguno/kafkastorm/storm/KafkaStormDemo.scala) and
      [KafkaStormSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaStormSpec.scala)
    * A Storm topology that writes Avro-encoded data to Kafka:
      [KafkaStormSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaStormSpec.scala)
* Unit testing
    * [AvroDecoderBoltSpec](src/test/scala/com/miguno/kafkastorm/storm/AvroDecoderBoltSpec.scala)
    * [AvroSchemeSpec](src/test/scala/com/miguno/kafkastorm/storm/AvroSchemeSpec.scala)
    * And more under [src/test/scala](src/test/scala/com/miguno/kafkastorm/).
* Integration testing
    * [KafkaSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaSpec.scala):
      Tests for Kafka, which launch and run against in-memory instances of Kafka and ZooKeeper.
    * [StormSpec](src/test/scala/com/miguno/kafkastorm/integration/StormSpec.scala):
      Tests for Storm, which launch and run against in-memory instances of Storm and ZooKeeper.
    * [KafkaStormSpec](src/test/scala/com/miguno/kafkastorm/integration/KafkaStormSpec.scala):
      Tests for integrating Storm and Kafka, which launch and run against in-memory instances of Kafka, Storm, and
      ZooKeeper.


<a name=""Implementation-details""></a>

# Implementation details

* We use [Twitter Bijection](https://github.com/twitter/bijection) for Avro encoding and decoding.
* We use [Twitter Chill](https://github.com/twitter/chill/) (which in turn uses Bijection) to implement a
  [custom Kryo serializer for Storm](src/main/scala/com/miguno/kafkastorm/storm/TweetAvroKryoDecorator.scala) that
  handles our Avro-derived Java class `Tweet` from [twitter.avsc](src/main/avro/twitter.avsc).
* Unit and integration tests are implemented with [ScalaTest](http://scalatest.org/).
* We use [ZooKeeper 3.4.5](https://zookeeper.apache.org/).
* We use the [official Kafka spout](https://github.com/apache/incubator-storm/tree/master/external/storm-kafka) of the
  Storm project, which is compatible with Kafka 0.8.


<a name=""Development""></a>

# Development


<a name=""git-setup""></a>

## Git setup: git-flow

This project follows the [git-flow](https://github.com/nvie/gitflow) approach.  This means, for instance, that:

* The branch `develop` is used for integration of the ""next release"".
* The branch `master` is used for bringing forth production releases.

Follow the [git-flow installation instructions](https://github.com/nvie/gitflow/wiki/Installation) for your
development machine.

See [git-flow](https://github.com/nvie/gitflow) and the introduction article
[Why aren't you using git-flow?](http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/) for details.


<a name=""Build-requirements""></a>

## Build requirements

Your development machine requires:

* Oracle Java JDK 6 (version 6 is still recommended for use with Kafka and Storm)
    * The code _in this project_ works with Java 7, too.  However, some dependencies we use are not published for Java 7
      yet.

This project also needs [Scala](http://www.scala-lang.org/) 2.10.4 and [sbt](http://www.scala-sbt.org/) 0.13.2, but
these will be automatically downloaded and made available (locally/sandboxed) to the project as part of the build setup.


### Install Oracle JDK 6 (Mac OS X)

Download and install [Java 6 for Mac OS X](http://support.apple.com/kb/dl1572) aka ""Java for OS X 2014-001"".  This will
give you Java 1.6.0_65.


### Install Oracle JDK 6 (RHEL/CentOS 6)

Follow the installations instructions for
[Oracle JDK 6 on RHEL/CentOS 6](http://www.if-not-true-then-false.com/2010/install-sun-oracle-java-jdk-jre-6-on-fedora-centos-red-hat-rhel/)
(untested!).

Note: As a RHEL 6 user you may have access to a ready-to-use RPM package of Oracle JDK 6 in your existing yum
repositories as part of the RedHat Network (RHN).  If so, you do not need to follow the instructions in the link above.
Instead, you only need to run e.g. `sudo yum install java-1.6.0-sun-devel`
([details](https://access.redhat.com/site/documentation/en-US/JBoss_Enterprise_Application_Platform/5/html/Installation_Guide/appe-install_jdk.html)).


### Install Oracle JDK 6 (Ubuntu/Debian)

Follow the installation instructions for
[Oracle JDK 6 on Ubuntu/Debian](http://linuxg.net/how-to-install-oracle-java-jdk-678-on-ubuntu-13-04-12-10-12-04/)
(untested!).

Note: By following these instructions you will install Oracle JDK/JRE from a third-party PPA package repository
(`ppa:webupd8team/java`, managed by [webupd8](http://www.webupd8.org/)).  Unfortunately Oracle does not provide official
apt repositories for Ubuntu, and the Ubuntu team was required to remove ""their"" Oracle JDK/JRE packages from the Ubuntu
repositories because of licensing issues with Oracle.



<a name=""Building-the-code""></a>

## Building the code

    $ ./sbt clean compile

If you want to only (re)generate Java classes from Avro schemas:

    $ ./sbt avro:generate

Generated Java sources are stored under `target/scala-*/src_managed/main/compiled_avro/`.


<a name=""Running-the-tests""></a>

## Running the tests

    $ ./sbt clean test

Here are some examples that demonstrate how you can run only a certain subset of tests:

    # Use `-l` to exclude tests by tag:
    # Run all tests WITH THE EXCEPTION of those tagged as integration tests
    $ ./sbt ""test-only * -- -l com.miguno.kafkastorm.integration.IntegrationTest""

    # Use `-n` to include tests by tag (and skip all tests that lack the tag):
    # Run ONLY tests tagged as integration tests
    $ ./sbt ""test-only * -- -n com.miguno.kafkastorm.integration.IntegrationTest""

    # Run only the tests in suite AvroSchemeSpec:
    $ ./sbt ""test-only com.miguno.kafkastorm.storm.AvroSchemeSpec""

    # You can also combine the examples above, of course.

Test reports in JUnit XML format are written to `target/test-reports/junitxml/*.xml`.  Make sure that your actual build
steps run the `./sbt test` task, otherwise the JUnit XML reports will not be generate (note that `./sbt scoverage:test`
_will not_ generate the JUnit XML reports unfortunately).

Integration with CI servers:

* Jenkins integration:
    * Configure the build job.
    * Go to _Post-build Actions_.
    * Add a post-build action for _Publish JUnit test result report_.
    * In the _Test report XMLs_ field add the pattern `**/target/test-reports/junitxml/*.xml`.
    * Now each build of your job will have a _Test Result_ link.
* TeamCity integration:
    * Edit the build configuration.
    * Select configuration step 3, _Build steps_.
    * Under _Additional Build Features_ add a new build feature.
    * Use the following build feature configuration:
        * Report type: Ant JUnit
        * Monitoring rules: `target/test-reports/junitxml/*.xml`
    * Now each build of your job will have a _Tests_ tab.

Further details are available at:

* How to tag tests in ScalaTest: [Tagging your tests](http://www.scalatest.org/user_guide/tagging_your_tests)
* How to selectively run tests: [Using ScalaTest with sbt](http://www.scalatest.org/user_guide/using_scalatest_with_sbt)
  and [How to Run Tagged Scala Tests with SBT and ScalaTest](http://code.hootsuite.com/tagged-tests-with-sbt/)


<a name=""Creating-code-coverage-reports""></a>

## Creating code coverage reports

We are using [sbt-scoverage](https://github.com/scoverage/sbt-scoverage) to create code coverage reports for unit tests.

Run the unit tests via:

    $ ./sbt clean scoverage:test

* An HTML report will be created at `target/scala-2.10/scoverage-report/index.html`.
* XML reports will be created at:
    * `./target/scala-2.10/coverage-report/cobertura.xml`
    * `./target/scala-2.10/scoverage-report/scoverage.xml`

Integration with CI servers:

* Jenkins integration:
    * Configure the build.
    * Go to _Post-build Actions_.
    * Add a post-build action for _Publish Cobertura Coverage Report_.
    * In the _Cobertura xml report pattern_ field add the pattern `**/target/scala-2.10/coverage-report/cobertura.xml`.
    * Now each build of your job will have a _Coverage Report_ link.
* TeamCity integration:
    * Edit the build configuration.
    * Select configuration step 1, _General settings_.
    * In the _Artifact Paths_ field add the path `target/scala-2.10/scoverage-report/** => coberturareport/`.
    * Now each build of your job will have a _Cobertura Coverage Report_ tab.


<a name=""Packaging-the-code""></a>

## Packaging the code

To create a normal (""slim"") jar:

    $ ./sbt clean package

    >>> Generates `target/scala-2.10/kafka-storm-starter_2.10-0.2.0-SNAPSHOT.jar`

To create a fat jar, which includes any dependencies of kafka-storm-starter:

    $ ./sbt assembly

    >>> Generates `target/scala-2.10/kafka-storm-starter-assembly-0.2.0-SNAPSHOT.jar`

To create a scaladoc/javadoc jar:

    $ ./sbt packageDoc

    >>> Generates `target/scala-2.10/kafka-storm-starter_2.10-0.2.0-SNAPSHOT-javadoc.jar`

To create a sources jar:

    $ ./sbt packageSrc

    >>> Generates `target/scala-2.10/kafka-storm-starter_2.10-0.2.0-SNAPSHOT-sources.jar`

To create API docs:

    $ ./sbt doc

    >>> Generates `target/scala-2.10/api/*` (HTML files)


<a name=""IDE-support""></a>

## IDE support

### IntelliJ IDEA

kafka-storm-starter integrates the [sbt-idea plugin](https://github.com/mpeltonen/sbt-idea).  Use the following command
to build IDEA project files:

    $ ./sbt gen-idea

You can then open kafka-storm-starter as a project in IDEA via _File > Open..._ and selecting the top-level directory
of kafka-storm-starter.

**Important note:** There is a bug when using the sbt plugins for Avro and for IntelliJ IDEA in combination.  The sbt
plugin for Avro reads the Avro `*.avsc` schemas stored under `src/main/avro` and generates the corresponding Java
classes, which it stores under `target/scala-2.10/src_managed/main/compiled_avro` (in the case of kafka-storm-starter,
a `Tweet.java` class will be generated from the Avro schema [twitter.avsc](src/main/avro/twitter.avsc)).  The latter
path must be added to IDEA's _Source Folders_ setting, which will happen automatically for you.  However the
aforementioned bug will add a second, incorrect path to _Source Folders_, too, which will cause IDEA to complain about
not being able to find the Avro-generated Java classes (here: the `Tweet` class).

Until this bug is fixed upstream you can use the following workaround, which you must perform everytime you run
`./sbt gen-idea`:

1. In IntelliJ IDEA open the project structure for kafka-storm-starter via _File > Project Structure..._.
2. Under _Project settings_ on the left-hand side select _Modules_.
3. Select the _Sources_ tab on the right-hand side.
4. Remove the problematic `target/scala-2.10/src_managed/main/compiled_avro/com` entry from the _Source Folders_ listing
   (the source folders are colored in light-blue).  Note the trailing `.../com`, which comes from
   `com.miguno.avro.Tweet` in the [twitter.avsc](src/main/avro/twitter.avsc) Avro schema.
5. Click Ok.

See also this screenshot (click to enlarge):

[![Fix bug in IntelliJIDEA when using avro Avro](images/IntelliJ-IDEA-Avro-bug_400x216.png?raw=true)](images/IntelliJ-IDEA-Avro-bug.png?raw=true)


### Eclipse

kafka-storm-starter integrates the [sbt-eclipse plugin](https://github.com/typesafehub/sbteclipse).  Use the following
command to build Eclipse project files:

    $ ./sbt eclipse

Then use the _Import Wizard_ in Eclipse to import _Existing Projects into Workspace_.


<a name=""FAQ""></a>

# FAQ


<a name=""FAQ-Kafka""></a>

## Kafka

### ZooKeeper exceptions ""KeeperException: NoNode for /[ZK path]"" logged at INFO level

In short you can normally safely ignore those errors -- it's for a reason they are logged at INFO level and not at ERROR
level.

As described in the mailing list thread [Zookeeper exceptions](http://mail-archives.apache.org/mod_mbox/incubator-kafka-users/201204.mbox/%3CCAFbh0Q3BxaAkyBq1_yUHhUkkhxX4RBQZPAA2pkR4U9+m4VY8nA@mail.gmail.com%3E):

""The reason you see those NoNode error code is the following. Every time we want to create a new [ZK] path, say
`/brokers/ids/1`, we try to create it directly.  If this fails because the parent path doesn't exist, we try to create
the parent path first. This will happen recursively.  However, the `NoNode` error should show up only once, not every
time a broker is started (assuming ZK data hasn't been cleaned up).""

A similar answer was given in the thread
[Clean up kafka environment](http://grokbase.com/t/kafka/users/137qgfyga0/clean-up-kafka-environmet):

""These info messages show up when Kafka tries to create new consumer groups.  While trying to create the children of
`/consumers/[group]`, if the parent path doesn't exist, the zookeeper server logs these messages.  Kafka internally
handles these cases correctly by first creating the parent node.""


<a name=""FAQ-Storm""></a>

## Storm

### Storm `LocalCluster` and ZooKeeper

[LocalCluster](https://github.com/apache/incubator-storm/blob/master/storm-core/src/clj/backtype/storm/LocalCluster.clj)
starts an embedded ZooKeeper instance listening at `localhost:2000/tcp`.  If a different process is already bound to
`2000/tcp`, then Storm will increment the embedded ZooKeeper's port until it finds a free port (`2000` -> `2001` ->
`2002`, and so on).  `LocalCluster` then reads the Storm defaults and overrides some of Storm's configuration (see the
`mk-local-storm-cluster` function in
[testing.clj](https://github.com/apache/incubator-storm/blob/master/storm-core/src/clj/backtype/storm/testing.clj) and
the `mk-inprocess-zookeeper` function in
[zookeeper.clj](https://github.com/apache/incubator-storm/blob/master/storm-core/src/clj/backtype/storm/zookeeper.clj)
for details):

    STORM-CLUSTER-MODE ""local""
    STORM-ZOOKEEPER-PORT zk-port
    STORM-ZOOKEEPER-SERVERS [""localhost""]}

where `zk-port` is the final port chosen.

In Storm versions <= 0.9.2 it is not possible to launch a local Storm cluster via `LocalCluster` without its own embedded
ZooKeeper.  Likewise it is not possible to control on which port the embedded ZooKeeper process will listen -- it will
always follow the `2000/tcp` based algorithm above to set the port.

In Storm 0.9.3 and later you can configure `LocalCluster` to use a custom ZooKeeper instance, thanks to
[STORM-213](https://issues.apache.org/jira/browse/STORM-213).


<a name=""Known-issues""></a>

# Known issues and limitations

This section lists known issues and limitations a) for the upstream projects such as Storm and Kafka, and b) for our
own code.


<a name=""Known-issues-them""></a>

## Upstream code

### ZooKeeper throws InstanceAlreadyExistsException during tests

_Note: We squelch this message during test runs.  See [log4j.properties](src/test/resources/log4.properties)._

You may see the following exception when running the integration tests, which you can safely ignore:

    [2014-03-07 11:56:59,250] WARN Failed to register with JMX (org.apache.zookeeper.server.ZooKeeperServer)
    javax.management.InstanceAlreadyExistsException: org.apache.ZooKeeperService:name0=StandaloneServer_port-1

The root cause is that in-memory ZooKeeper instances have a hardcoded JMX setup.  And because we cannot prevent Storm's
`LocalCluster` to start its own ZooKeeper instance alongside ""ours"" (see FAQ section above), there will be two ZK
instances trying to use the same JMX setup.  Since the JMX setup is not relevant for our testing the exception can be
safely ignored, albeit we'd prefer to come up with a proper fix, of course.

See also [ZOOKEEPER-1350: Make JMX registration optional in LearnerZooKeeperServer](https://issues.apache.org/jira/browse/ZOOKEEPER-1350),
which will make it possible to disable JMX registration when using Curator's `TestServer` to run an in-memory ZooKeeper
instance (this patch will be included in ZooKeeper 3.5.0, see JIRA ticket above).


### ZooKeeper version 3.3.4 recommended for use with Kafka 0.8

At the time of writing Kafka 0.8 is not officially compatible with ZooKeeper 3.4.x, which is the latest stable version
of ZooKeeper.  Instead the Kafka project
[recommends ZooKeeper 3.3.4](https://kafka.apache.org/documentation.html#zkversion).

So which version of ZooKeeper should you do pick, particularly if you are already running a ZooKeeper cluster for other
parts of your infrastructure (such as an Hadoop cluster)?

**The TL;DR version is:**  Try using ZooKeeper 3.4.5 for both Kafka and Storm, but see the caveats and workarounds
below.  In the worst case use separate ZooKeeper clusters/versions for Storm (3.4.5) and Kafka (3.3.4).  Generally
speaking though, the best 3.3.x version of ZooKeeper is 3.3.6, which is the latest stable 3.3.x version.  This is
because 3.3.6 fixed a number of serious bugs that could lead to data corruption.

_Tip: You can verify the exact ZK version used in kafka-storm-starter by running `./sbt dependency-graph`._

Notes:

* There is an open Kafka JIRA ticket that covers upgrading Kafka to ZK 3.4.5, see
  [KAFKA-854: Upgrade dependencies for 0.8](https://issues.apache.org/jira/browse/KAFKA-854).
* If in a production environment you run into problems when using ZooKeeper 3.4.5 with Storm <= 0.9.1, you can try
  a [workaround using Google jarjar](https://groups.google.com/forum/#!topic/storm-user/TVVF_jqvD_A) in order to
  deploy ZooKeeper 3.4.5 alongside Storm's/Curator's hard dependency on ZooKeeper 3.3.3.
  [Another user reported](http://grokbase.com/t/gg/storm-user/134f2tw5gx/recommended-zookeeper-version-for-storm-0-8-2)
  that he uses ZK 3.4.5 in production and ZK 3.3.3 for local testing by not including ZooKeeper in the uber jar
  and putting the correct ZK version in the CLASSPATH at runtime.
  [STORM-70: Use ZooKeeper 3.4.5](https://issues.apache.org/jira/browse/STORM-70).


<a name=""Known-issues-us""></a>

## kafka-storm-starter code

* Some code in kafka-storm-starter does not look like idiomatic Scala code.  While sometimes this may be our own fault,
  there is one area where we cannot easily prevent this from happening:  When the underlying Java APIs (here: the Java
  API of Storm) do not lend themselves to a more Scala-like code style.  You can see this, for instance, in the way we
  wire the spouts and bolts of a topology.  One alternative, of course, would be to create Scala-fied wrappers but this
  seemed inappropriate for this project.
* We are using `Thread.sleep()` in some tests instead of more intelligent approaches.  To prevent transient failures we
  may thus want to improve those tests.  In Kafka's test suites, for instance, tests are using `waitUntilTrue()` to
  detect more reliably when to proceed (or fail/timeout) with the next step.  See the related discussion in the
  [review request 19696 for KAFKA-1317](https://reviews.apache.org/r/19696/#comment71202).
* We noticed that the tests may fail when using Oracle/Sun JDK 1.6.0_24.  Later versions (e.g. 1.6.0_31) work fine.


<a name=""changelog""></a>

# Change log

See [CHANGELOG](CHANGELOG.md).


<a name=""Contributing""></a>

# Contributing to kafka-storm-starter

Code contributions, bug reports, feature requests etc. are all welcome.

If you are new to GitHub please read [Contributing to a project](https://help.github.com/articles/fork-a-repo) for how
to send patches and pull requests to kafka-storm-starter.


<a name=""License""></a>

# License

Copyright © 2014 Michael G. Noll

See [LICENSE](LICENSE) for licensing information.


<a name=""References""></a>

# References


<a name=""References-Wirbelsturm""></a>

## Wirbelsturm

Want to perform 1-click deployments of Kafka clusters and/or Storm clusters (with a Graphite instance, with Redis,
with...)?  Take a look at [Wirbelsturm](https://github.com/miguno/wirbelsturm), with which you can deploy such
environments locally and to Amazon AWS.


<a name=""References-Kafka""></a>

## Kafka

Unit testing:

* [buildlackey/cep/kafka-0.8.x](https://github.com/buildlackey/cep/tree/master/kafka-0.8.x)
  -- A simple Kafka producer/consumer example with in-memory Kafka and Zookeeper instances.  For a number of reasons
  we opted not to use that code.  We list it in this section in case someone else may find it helpful.


<a name=""References-Storm""></a>

## Storm

Storm in general:

* [Storm FAQ](http://storm.incubator.apache.org/documentation/FAQ.html)
* [Config (Java API)](http://storm.incubator.apache.org/apidocs/backtype/storm/Config.html)
* [Understanding the Internal Message Buffers of Storm](http://www.michael-noll.com/blog/2013/06/21/understanding-storm-internal-message-buffers/)
* [Sending Metrics From Storm to Graphite](http://www.michael-noll.com/blog/2013/11/06/sending-metrics-from-storm-to-graphite/)

Unit testing:

* [TestingApiDemo.java](https://github.com/xumingming/storm-lib/blob/master/src/jvm/storm/TestingApiDemo.java)
  -- Demonstrates in Java how to use Storm's built-in testing API.  Unfortunately the code is more than a year old and
  not well documented.
    * Note that `backtype.storm.Testing` is apparently not well suited to test Trident topologies.
      See [Any Java example to write test cases for storm Transactional topology](https://groups.google.com/forum/#!msg/storm-user/nZs2NwNqqn8/CjKaZK7eRFsJ)
      (Mar 2013) for details.
* [MockOutputCollector](https://gist.github.com/k2xl/1782187)
  -- Code example on how to implement a mock `OutputCollector` for unit testing.
* [Testing the logic of Storm topologies](https://groups.google.com/forum/#!topic/storm-user/Magc5-vt2Hg)
  -- Discussion in the old storm-user mailing list, Dec 2011
* [buildlackey/cep/storm-kafka](https://github.com/buildlackey/cep/tree/master/storm%2Bkafka)
  -- Kafka spout integration test with an in-memory Storm cluster (`LocalCluster`), and in-memory Kafka and Zookeeper
  instances.  For a number of reasons we opted not to use that code.  We list it in this section in case someone else
  may find it helpful.
* [buildlackey/cep/esper+storm+kafka](https://github.com/buildlackey/cep/tree/master/esper%2Bstorm%2Bkafka)
  -- Example illustrating a Kafka consumer spout, a Kafka producer bolt, and an Esper streaming query bolt
* [schleyfox/storm-test](https://github.com/schleyfox/storm-test)
  -- Test utilities for Storm (in Clojure).

Kafka spout [wurstmeister/storm-kafka-0.8-plus](https://github.com/wurstmeister/storm-kafka-0.8-plus):

* [Example code on how to use the spout](https://github.com/wurstmeister/storm-kafka-0.8-plus-test)

Kafka spout [HolmesNL/kafka-spout](https://github.com/HolmesNL/kafka-spout), written by the
[Netherlands Forensics Institute](http://forensicinstitute.nl):

* [Main documentation](https://github.com/HolmesNL/kafka-spout/wiki)
* [KafkaSpout.java](https://github.com/HolmesNL/kafka-spout/blob/develop/src/main/java/nl/minvenj/nfi/storm/kafka/KafkaSpout.java)
  -- Helpful to understand how the spout works.
* [ConfigUtils.java](https://github.com/HolmesNL/kafka-spout/blob/develop/src/main/java/nl/minvenj/nfi/storm/kafka/util/ConfigUtils.java)
  -- Helpful to understand how the Kafka spout can be configured.


<a name=""References-Avro""></a>

## Avro

Twitter Bijection:

* [SpecificAvroCodecsSpecification.scala](https://github.com/twitter/bijection/blob/develop/bijection-avro/src/test/scala/com/twitter/bijection/avro/SpecificAvroCodecsSpecification.scala)
  -- How to use Bijection for Avro's `Specific*` API (which is what you would usually do)
* [GenericAvroCodecsSpecification.scala](https://github.com/twitter/bijection/blob/develop/bijection-avro/src/test/scala/com/twitter/bijection/avro/GenericAvroCodecsSpecification.scala)
  -- How to use Bijection for Avro's `Generic*` API

Kafka:

* [How to use Kafka and Avro](http://stackoverflow.com/questions/8298308/how-to-use-kafka-and-avro)


<a name=""References-Kryo""></a>

## Kryo

* [AdamKryoRegistrator.java](https://github.com/bigdatagenomics/adam/blob/master/adam-core/src/main/scala/edu/berkeley/cs/amplab/adam/serialization/AdamKryoRegistrator.scala)
  -- example on how to register serializers with Kyro
* Twitter Chill examples on how to create Avro-based serializers for Kryo:
    * [AvroSerializerSpec.scala](https://github.com/twitter/chill/blob/develop/chill-avro/src/test/scala/com/twitter/chill/avro/AvroSerializerSpec.scala)
    * [BijectionEnrichedKryo.scala](https://github.com/twitter/chill/blob/develop/chill-bijection/src/main/scala/com/twitter/chill/BijectionEnrichedKryo.scala)
","Code examples that show how to integrate Kafka with Storm and Avro. Test suite
will run end-to-end tests of Kafka, Storm, and Kafka-Storm integration. See this
abridged version of the test suite for more information."
2946,Deep Learning for humans,"# Keras: Deep Learning for humans

![Keras logo](https://s3.amazonaws.com/keras.io/img/keras-logo-2018-large-1200.png)

This repository hosts the development of the Keras library.
Read the documentation at [keras.io](https://keras.io/).

## About Keras

Keras is a deep learning API written in Python,
running on top of the machine learning platform [TensorFlow](https://github.com/tensorflow/tensorflow).
It was developed with a focus on enabling fast experimentation.
*Being able to go from idea to result as fast as possible is key to doing good research.*

Keras is:

-   **Simple** -- but not simplistic. Keras reduces developer *cognitive load*
    to free you to focus on the parts of the problem that really matter.
-   **Flexible** -- Keras adopts the principle of *progressive disclosure of
    complexity*: simple workflows should be quick and easy, while arbitrarily
    advanced workflows should be *possible* via a clear path that builds upon
    what you've already learned.
-   **Powerful** -- Keras provides industry-strength performance and
    scalability: it is used by organizations and companies including NASA,
    YouTube, and Waymo.

---

## Keras & TensorFlow 2

[TensorFlow 2](https://www.tensorflow.org/) is an end-to-end, open-source machine learning platform.
You can think of it as an infrastructure layer for
[differentiable programming](https://en.wikipedia.org/wiki/Differentiable_programming).
It combines four key abilities:

- Efficiently executing low-level tensor operations on CPU, GPU, or TPU.
- Computing the gradient of arbitrary differentiable expressions.
- Scaling computation to many devices, such as clusters of hundreds of GPUs.
- Exporting programs (""graphs"") to external runtimes such as servers, browsers, mobile and embedded devices.

Keras is the high-level API of TensorFlow 2: an approachable, highly-productive interface
for solving machine learning problems,
with a focus on modern deep learning. It provides essential abstractions and building blocks for developing
and shipping machine learning solutions with high iteration velocity.

Keras empowers engineers and researchers to take full advantage of the scalability
and cross-platform capabilities of TensorFlow 2: you can run Keras on TPU or on large clusters of GPUs,
and you can export your Keras models to run in the browser or on a mobile device.

---

## First contact with Keras

The core data structures of Keras are __layers__ and __models__.
The simplest type of model is the [`Sequential` model](https://keras.io/guides/sequential_model/), a linear stack of layers.
For more complex architectures, you should use the [Keras functional API](https://keras.io/guides/functional_api/),
which allows you to build arbitrary graphs of layers or [write models entirely from scratch via subclassing](https://keras.io/guides/making_new_layers_and_models_via_subclassing/).

Here is the `Sequential` model:

```python
from tensorflow.keras.models import Sequential

model = Sequential()
```

Stacking layers is as easy as `.add()`:

```python
from tensorflow.keras.layers import Dense

model.add(Dense(units=64, activation='relu'))
model.add(Dense(units=10, activation='softmax'))
```

Once your model looks good, configure its learning process with `.compile()`:

```python
model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])
```

If you need to, you can further configure your optimizer. The Keras philosophy is to keep simple things simple,
while allowing the user to be fully in control when they need to (the ultimate control being the easy extensibility of the source code via subclassing).

```python
model.compile(loss=tf.keras.losses.categorical_crossentropy,
              optimizer=tf.keras.optimizers.SGD(
                  learning_rate=0.01, momentum=0.9, nesterov=True))
```

You can now iterate on your training data in batches:

```python
# x_train and y_train are Numpy arrays.
model.fit(x_train, y_train, epochs=5, batch_size=32)
```

Evaluate your test loss and metrics in one line:

```python
loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)
```

Or generate predictions on new data:

```python
classes = model.predict(x_test, batch_size=128)
```

What you just saw is the most elementary way to use Keras.

However, Keras is also a highly-flexible framework suitable to iterate on state-of-the-art research ideas.
Keras follows the principle of **progressive disclosure of complexity**: it makes it easy to get started,
yet it makes it possible to handle arbitrarily advanced use cases,
only requiring incremental learning at each step.

In much the same way that you were able to train & evaluate a simple neural network above in a few lines,
you can use Keras to quickly develop new training procedures or exotic model architectures.
Here's a low-level training loop example, combining Keras functionality with the TensorFlow `GradientTape`:

```python
import tensorflow as tf

# Prepare an optimizer.
optimizer = tf.keras.optimizers.Adam()
# Prepare a loss function.
loss_fn = tf.keras.losses.kl_divergence

# Iterate over the batches of a dataset.
for inputs, targets in dataset:
    # Open a GradientTape.
    with tf.GradientTape() as tape:
        # Forward pass.
        predictions = model(inputs)
        # Compute the loss value for this batch.
        loss_value = loss_fn(targets, predictions)

    # Get gradients of loss wrt the weights.
    gradients = tape.gradient(loss_value, model.trainable_weights)
    # Update the weights of the model.
    optimizer.apply_gradients(zip(gradients, model.trainable_weights))
```

For more in-depth tutorials about Keras, you can check out:

-   [Introduction to Keras for engineers](https://keras.io/getting_started/intro_to_keras_for_engineers/)
-   [Introduction to Keras for researchers](https://keras.io/getting_started/intro_to_keras_for_researchers/)
-   [Developer guides](https://keras.io/guides/)
-   [Other learning resources](https://keras.io/getting_started/learning_resources/)

---

## Installation

Keras comes packaged with TensorFlow 2 as `tensorflow.keras`.
To start using Keras, simply [install TensorFlow 2](https://www.tensorflow.org/install).

---

## Release and compatibility

Keras has **nightly releases** (`keras-nightly` on PyPI)
and **stable releases** (`keras` on PyPI).
The nightly Keras releases are usually compatible with the corresponding version
of the `tf-nightly` releases
(e.g. `keras-nightly==2.7.0.dev2021100607` should be
used with `tf-nightly==2.7.0.dev2021100607`).
We don't maintain backward compatibility for nightly releases.
For stable releases, each Keras
version maps to a specific stable version of TensorFlow.

The table below shows the compatibility version mapping
between TensorFlow versions and Keras versions.

All the release branches can be found on [GitHub](https://github.com/keras-team/keras/releases).

All the release binaries can be found on [Pypi](https://pypi.org/project/keras/#history).

| Keras release | Note      | Compatible Tensorflow version |
| -----------   | ----------- | -----------        |
| [2.4](https://github.com/keras-team/keras/releases/tag/2.4.0)  | Last stable release of multi-backend Keras | < 2.5
| 2.5-pre| Pre-release (not formal) for standalone Keras repo | >= 2.5 < 2.6
| [2.6](https://github.com/keras-team/keras/releases/tag/v2.6.0)    | First formal release of standalone Keras.  | >= 2.6 < 2.7
| [2.7](https://github.com/keras-team/keras/releases/tag/v2.7.0-rc0)    | (Upcoming release) | >= 2.7 < 2.8
| nightly|                                            | tf-nightly

---
## Support

You can ask questions and join the development discussion:

- In the [TensorFlow forum](https://discuss.tensorflow.org/).
- On the [Keras Google group](https://groups.google.com/forum/#!forum/keras-users).

---

## Opening an issue

You can also post **bug reports and feature requests** (only)
in [GitHub issues](https://github.com/keras-team/keras/issues).


---

## Opening a PR

We welcome contributions! Before opening a PR, please read
[our contributor guide](https://github.com/keras-team/keras/blob/master/CONTRIBUTING.md),
and the [API design guideline](https://github.com/keras-team/governance/blob/master/keras_api_design_guidelines.md).
","Keras is a deep learning API written in Python. It runs on top of the machine
learning platform [TensorFlow] Keras was developed with a focus on enabling fast
experimentation. It is used by organizations and companies including NASA,
YouTube, and Waymo."
1778,"Modern self-hosting framework, fully automated from empty disk to operating services with a single command.","# Khue's Homelab

**[Features](#features) • [Get Started](#get-started) • [Documentation](https://homelab.khuedoan.com)**

[![tag](https://img.shields.io/github/v/tag/khuedoan/homelab?style=flat-square&logo=semver&logoColor=white)](https://github.com/khuedoan/homelab/tags)
[![document](https://img.shields.io/website?label=document&logo=gitbook&logoColor=white&style=flat-square&url=https%3A%2F%2Fhomelab.khuedoan.com)](https://homelab.khuedoan.com)
[![license](https://img.shields.io/github/license/khuedoan/homelab?style=flat-square&logo=gnu&logoColor=white)](https://www.gnu.org/licenses/gpl-3.0.html)
[![stars](https://img.shields.io/github/stars/khuedoan/homelab?logo=github&logoColor=white&color=gold&style=flat-square)](https://github.com/khuedoan/homelab)

This project utilizes [Infrastructure as Code](https://en.wikipedia.org/wiki/Infrastructure_as_code) and [GitOps](https://www.weave.works/technologies/gitops) to automate provisioning, operating, and updating self-hosted services in my homelab.
It can be used as a highly customizable framework to build your own homelab.

> **What is a homelab?**
>
> Homelab is a laboratory at home where you can self-host, experiment with new technologies, practice for certifications, and so on.
> For more information about homelab in general, see the [r/homelab introduction](https://www.reddit.com/r/homelab/wiki/introduction).

## Overview

Project status: **ALPHA**

This project is still in the experimental stage, and I don't use anything critical on it.
Expect breaking changes that may require a complete redeployment.
A proper upgrade path is planned for the stable release.
More information can be found in [the roadmap](#roadmap) below.

### Hardware

![Hardware](https://user-images.githubusercontent.com/27996771/98970963-25137200-2543-11eb-8f2d-f9a2d45756ef.JPG)

- 4 × NEC SFF `PC-MK26ECZDR` (Japanese version of the ThinkCentre M700):
    - CPU: `Intel Core i5-6600T @ 2.70GHz`
    - RAM: `16GB`
    - SSD: `128GB`
- TP-Link `TL-SG108` switch:
    - Ports: `8`
    - Speed: `1000Mbps`

### Features

- [x] Common applications: Gitea, Seafile, Jellyfin, Paperless...
- [x] Automated bare metal provisioning with PXE boot
- [x] Automated Kubernetes installation and management
- [x] Installing and managing applications using GitOps
- [x] Automatic rolling upgrade for OS and Kubernetes
- [x] Automatically update apps (with approval)
- [x] Modular architecture, easy to add or remove features/components
- [x] Automated certificate management
- [x] Automatically update DNS records for exposed services
- [x] VPN without port forwarding
- [x] Expose services to the internet securely with [Cloudflare Tunnel](https://www.cloudflare.com/products/tunnel/)
- [x] CI/CD platform
- [x] Private container registry
- [x] Distributed storage
- [x] Support multiple environments (dev, prod)
- [ ] Monitoring and alerting 🚧
- [ ] Automated offsite backups 🚧
- [ ] Single sign-on 🚧
- [x] Infrastructure testing

Some demo videos and screenshots are shown here.
They can't capture all the project's features, but they are sufficient to get a concept of it.

| Demo                                                                                        |
| :--:                                                                                        |
| [![][deploy-demo]](https://asciinema.org/a/xkBRkwC6e9RAzVuMDXH3nGHp7)                       |
| Deploy with a single command (after updating the configuration files)                       |
| [![][pxe-demo]](https://www.youtube.com/watch?v=y-d7btNNAT8)                                |
| PXE boot                                                                                    |
| [![][homepage-demo]][homepage-demo]                                                         |
| Homepage with Ingress discovery powered by [Hajimari](https://github.com/toboshii/hajimari) |
| [![][grafana-demo]][grafana-demo]                                                           |
| Monitoring dashboard powered by [Grafana](https://grafana.com/)                             |
| [![][gitea-demo]][gitea-demo]                                                               |
| Git server powered by [Gitea](https://gitea.io/en-us/)                                      |
| [![][matrix-demo]][matrix-demo]                                                             |
| [Matrix](https://matrix.org/) chat server                                                   |
| [![][tekton-demo]][tekton-demo]                                                             |
| Continuous integration with [Tekton](https://tekton.dev/)                                   |
| [![][argocd-demo]][argocd-demo]                                                             |
| Continuous deployment with [ArgoCD](https://argoproj.github.io/cd/)                         |
| [![][lens-demo]][lens-demo]                                                                 |
| Cluster management using [Lens](https://k8slens.dev/)                                       |
| [![][vault-demo]][vault-demo]                                                               |
| Secret management with [Vault](https://www.vaultproject.io/)                                |

[deploy-demo]: https://asciinema.org/a/xkBRkwC6e9RAzVuMDXH3nGHp7.svg
[pxe-demo]: https://user-images.githubusercontent.com/27996771/157303477-df2e7410-8f02-4648-a86c-71e6b7e89e35.png
[homepage-demo]: https://user-images.githubusercontent.com/27996771/149445807-0f869eb7-d8f5-4fef-ab97-ac281df91a06.png
[grafana-demo]: https://user-images.githubusercontent.com/27996771/149446631-1c5d056b-1fdc-48e6-96ba-e1abe1762be0.png
[gitea-demo]: https://user-images.githubusercontent.com/27996771/149444871-38889c9d-862f-41ff-8c05-8ece21da3e9c.png
[matrix-demo]: https://user-images.githubusercontent.com/27996771/149448510-7163310c-2049-4ccd-901d-f11f605bfc32.png
[tekton-demo]: https://user-images.githubusercontent.com/27996771/149445374-58fd0605-bb9a-46e4-81d6-5e584d2b94a9.png
[argocd-demo]: https://user-images.githubusercontent.com/27996771/149444716-fc0d7282-4cf7-4ddb-97a4-1a3fb47ff2b8.png
[lens-demo]: https://user-images.githubusercontent.com/27996771/149448896-9d79947d-468c-45c6-a81d-b43654e8ab6b.png
[vault-demo]: https://user-images.githubusercontent.com/27996771/149452309-de4a893b-e94c-4ba8-9119-ea87449cf77e.png

### Tech stack

<table>
    <tr>
        <th>Logo</th>
        <th>Name</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://simpleicons.org/icons/ansible.svg""></td>
        <td><a href=""https://www.ansible.com"">Ansible</a></td>
        <td>Automate bare metal provisioning and configuration</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/argo/icon/color/argo-icon-color.svg""></td>
        <td><a href=""https://argoproj.github.io/cd"">ArgoCD</a></td>
        <td>GitOps tool built to deploy applications to Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/jetstack/cert-manager/raw/master/logo/logo.png""></td>
        <td><a href=""https://cert-manager.io"">cert-manager</a></td>
        <td>Cloud native certificate management</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/314135?s=200&v=4""></td>
        <td><a href=""https://www.cloudflare.com"">Cloudflare</a></td>
        <td>DNS and Tunnel</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png""></td>
        <td><a href=""https://www.docker.com"">Docker</a></td>
        <td>Ephemeral PXE server and convenient tools container</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/kubernetes-sigs/external-dns/raw/master/docs/img/external-dns.png""></td>
        <td><a href=""https://github.com/kubernetes-sigs/external-dns"">ExternalDNS</a></td>
        <td>Synchronizes exposed Kubernetes Services and Ingresses with DNS providers</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Fedora_logo.svg/267px-Fedora_logo.svg.png""></td>
        <td><a href=""https://getfedora.org/en/server"">Fedora Server</a></td>
        <td>Base OS for Kubernetes nodes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://upload.wikimedia.org/wikipedia/commons/b/bb/Gitea_Logo.svg""></td>
        <td><a href=""https://gitea.com"">Gitea</a></td>
        <td>Self-hosted Git service</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://grafana.com/static/img/menu/grafana2.svg""></td>
        <td><a href=""https://grafana.com"">Grafana</a></td>
        <td>Operational dashboards</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/helm/icon/color/helm-icon-color.svg""></td>
        <td><a href=""https://helm.sh"">Helm</a></td>
        <td>The package manager for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/k3s/icon/color/k3s-icon-color.svg""></td>
        <td><a href=""https://k3s.io"">K3s</a></td>
        <td>Lightweight distribution of Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/kubernetes/icon/color/kubernetes-icon-color.svg""></td>
        <td><a href=""https://kubernetes.io"">Kubernetes</a></td>
        <td>Container-orchestration system, the backbone of this project</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/grafana/loki/blob/main/docs/sources/logo.png?raw=true""></td>
        <td><a href=""https://grafana.com/oss/loki"">Loki</a></td>
        <td>Log aggregation system</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/longhorn/icon/color/longhorn-icon-color.svg""></td>
        <td><a href=""https://longhorn.io"">Longhorn</a></td>
        <td>Cloud native distributed block storage for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/60239468?s=200&v=4""></td>
        <td><a href=""https://metallb.org"">MetalLB</a></td>
        <td>Bare metal load-balancer for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/1412239?s=200&v=4""></td>
        <td><a href=""https://www.nginx.com"">NGINX</a></td>
        <td>Kubernetes Ingress Controller</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/prometheus/icon/color/prometheus-icon-color.svg""></td>
        <td><a href=""https://prometheus.io"">Prometheus</a></td>
        <td>Systems monitoring and alerting toolkit</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://docs.renovatebot.com/assets/images/logo.png""></td>
        <td><a href=""https://www.whitesourcesoftware.com/free-developer-tools/renovate"">Renovate</a></td>
        <td>Automatically update dependencies</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/47602533?s=200&v=4""></td>
        <td><a href=""https://tekton.dev"">Tekton</a></td>
        <td>Cloud native solution for building CI/CD systems</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://trow.io/trow.png""></td>
        <td><a href=""https://trow.io"">Trow</a></td>
        <td>Private container registry</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://simpleicons.org/icons/vault.svg""></td>
        <td><a href=""https://www.vaultproject.io"">Vault</a></td>
        <td>Secrets and encryption management system</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://docs.zerotier.com/img/ZeroTierIcon.png""></td>
        <td><a href=""https://zerotier.com"">ZeroTier</a></td>
        <td>VPN without port forwarding</td>
    </tr>
</table>

## Get Started

- [Try it out locally](https://homelab.khuedoan.com/installation/sandbox) without any hardware (just 4 commands!)
- [Deploy on real hardware](https://homelab.khuedoan.com/installation/production/prerequisites) for production workload

## Roadmap

See [roadmap](https://homelab.khuedoan.com/reference/roadmap) and [open issues](https://github.com/khuedoan/homelab/issues) for a list of proposed features and known issues.

## Contributing

Any contributions you make are greatly appreciated.

Please see [contributing guide](https://homelab.khuedoan.com/reference/contributing) for more information.

## License

Copyright &copy; 2020 - 2022 Khue Doan

Distributed under the GPLv3 License.
See [license page](https://homelab.khuedoan.com/reference/license) or `LICENSE.md` file for more information.

## Acknowledgements

References:

- [Ephemeral PXE server inspired by Minimal First Machine in the DC](https://speakerdeck.com/amcguign/minimal-first-machine-in-the-dc)
- [ArgoCD usage and monitoring configuration in locmai/humble](https://github.com/locmai/humble)
- [README template](https://github.com/othneildrew/Best-README-Template)
- [Run the same Cloudflare Tunnel across many `cloudflared` processes](https://developers.cloudflare.com/cloudflare-one/tutorials/many-cfd-one-tunnel)
- [MAC address environment variable in GRUB config](https://askubuntu.com/questions/1272400/how-do-i-automate-network-installation-of-many-ubuntu-18-04-systems-with-efi-and)
- [Official k3s systemd service file](https://github.com/k3s-io/k3s/blob/master/k3s.service)
- [Official Cloudflare Tunnel examples](https://github.com/cloudflare/argo-tunnel-examples)
- [Initialize GitOps repository on Gitea and integrate with Tekton by RedHat](https://github.com/redhat-scholars/tekton-tutorial/tree/master/triggers)
- [SSO configuration from xUnholy/k8s-gitops](https://github.com/xUnholy/k8s-gitops)
- [Pre-commit config from k8s-at-home/flux-cluster-template](https://github.com/k8s-at-home/flux-cluster-template)
- [Diátaxis technical documentation framework](https://diataxis.fr)
- [Official Terratest examples](https://github.com/gruntwork-io/terratest/tree/master/test)

Here is a list of the contributors who have helped to improve this project.
Big shout-out to them!

- ![](https://github.com/locmai.png?size=24) [@locmai](https://github.com/locmai)
- ![](https://github.com/MatthewJohn.png?size=24) [@MatthewJohn](https://github.com/MatthewJohn)
- ![](https://github.com/karpfediem.png?size=24) [@karpfediem](https://github.com/karpfediem)
- ![](https://github.com/linhng98.png?size=24) [@linhng98](https://github.com/linhng98)
- ![](https://github.com/BlueHatbRit.png?size=24) [@BlueHatbRit](https://github.com/BlueHatbRit)
- ![](https://github.com/dotdiego.png?size=24) [@dotdiego](https://github.com/dotdiego)
- ![](https://github.com/Crimrose.png?size=24) [@Crimrose](https://github.com/Crimrose)
- ![](https://github.com/eventi.png?size=24) [@eventi](https://github.com/eventi)
- ![](https://github.com/Bourne-ID.png?size=24) [@Bourne-ID](https://github.com/Bourne-ID)
- ![](https://github.com/akwan.png?size=24) [@akwan](https://github.com/akwan)
- ![](https://github.com/trangmaiq.png?size=24) [@trangmaiq](https://github.com/trangmaiq)

If you feel you're missing from this list, feel free to add yourself in a PR.

## Stargazers over time

[![Stargazers over time](https://starchart.cc/khuedoan/homelab.svg)](https://starchart.cc/khuedoan/homelab)
","Khue's Homelab is an open-source, self-hosted cloud computing platform. It can
be used as a highly customizable framework to build your own homelab. It uses
GitOps and Infrastructure as Code to automate provisioning, operating, and
updating self-Hosted services."
3087,Kotlin multiplatform / multi-format serialization,"# Kotlin multiplatform / multi-format reflectionless serialization

[![Kotlin Stable](https://kotl.in/badges/stable.svg)](https://kotlinlang.org/docs/components-stability.html)
[![JetBrains official project](https://jb.gg/badges/official.svg)](https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub)
[![GitHub license](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat)](http://www.apache.org/licenses/LICENSE-2.0)
[![TeamCity build](https://img.shields.io/teamcity/http/teamcity.jetbrains.com/s/KotlinTools_KotlinxSerialization_Ko.svg)](https://teamcity.jetbrains.com/viewType.html?buildTypeId=KotlinTools_KotlinxSerialization_Ko&guest=1)
[![Kotlin](https://img.shields.io/badge/kotlin-1.8.0-blue.svg?logo=kotlin)](http://kotlinlang.org)
[![Maven Central](https://img.shields.io/maven-central/v/org.jetbrains.kotlinx/kotlinx-serialization-core/1.5.0-RC)](https://search.maven.org/artifact/org.jetbrains.kotlinx/kotlinx-serialization-core/1.5.0-RC/pom)
[![KDoc link](https://img.shields.io/badge/API_reference-KDoc-blue)](https://kotlinlang.org/api/kotlinx.serialization/)
[![Slack channel](https://img.shields.io/badge/chat-slack-blue.svg?logo=slack)](https://kotlinlang.slack.com/messages/serialization/)

Kotlin serialization consists of a compiler plugin, that generates visitor code for serializable classes,
 runtime library with core serialization API and support libraries with various serialization formats.

* Supports Kotlin classes marked as `@Serializable` and standard collections.
* Provides [JSON](formats/README.md#JSON), [Protobuf](formats/README.md#ProtoBuf), [CBOR](formats/README.md#CBOR), [Hocon](formats/README.md#HOCON) and [Properties](formats/README.md#properties) formats.
* Complete multiplatform support: JVM, JS and Native.

## Table of contents

<!--- TOC -->

* [Introduction and references](#introduction-and-references)
* [Setup](#setup)
  * [Gradle](#gradle)
    * [Using the `plugins` block](#using-the-plugins-block)
    * [Using `apply plugin` (the old way)](#using-apply-plugin-the-old-way)
    * [Dependency on the JSON library](#dependency-on-the-json-library)
  * [Android](#android)
  * [Multiplatform (Common, JS, Native)](#multiplatform-common-js-native)
  * [Maven](#maven)
  * [Bazel](#bazel)

<!--- END -->

* **Additional links**
  * [Kotlin Serialization Guide](docs/serialization-guide.md)
  * [Full API reference](https://kotlinlang.org/api/kotlinx.serialization/)
  * [Submitting issues and PRs](CONTRIBUTING.md)
  * [Building this library](docs/building.md)

## Introduction and references

Here is a small example.

```kotlin
import kotlinx.serialization.*
import kotlinx.serialization.json.*

@Serializable 
data class Project(val name: String, val language: String)

fun main() {
    // Serializing objects
    val data = Project(""kotlinx.serialization"", ""Kotlin"")
    val string = Json.encodeToString(data)  
    println(string) // {""name"":""kotlinx.serialization"",""language"":""Kotlin""} 
    // Deserializing back into objects
    val obj = Json.decodeFromString<Project>(string)
    println(obj) // Project(name=kotlinx.serialization, language=Kotlin)
}
``` 

> You can get the full code [here](guide/example/example-readme-01.kt).

<!--- TEST_NAME ReadmeTest -->

<!--- TEST 
{""name"":""kotlinx.serialization"",""language"":""Kotlin""}
Project(name=kotlinx.serialization, language=Kotlin)
-->

**Read the [Kotlin Serialization Guide](docs/serialization-guide.md) for all details.**

You can find auto-generated documentation website on [kotlinlang.org](https://kotlinlang.org/api/kotlinx.serialization/).

## Setup

Kotlin serialization plugin is shipped with the Kotlin compiler distribution, and the IDEA plugin is bundled into the Kotlin plugin.

Using Kotlin Serialization requires Kotlin compiler `1.4.0` or higher.
Make sure you have the corresponding Kotlin plugin installed in the IDE, no additional plugins for IDE are required.

### Gradle

#### Using the `plugins` block

You can set up the serialization plugin with the Kotlin plugin using 
[Gradle plugins DSL](https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block):

Kotlin DSL:

```kotlin
plugins {
    kotlin(""jvm"") version ""1.8.0"" // or kotlin(""multiplatform"") or any other kotlin plugin
    kotlin(""plugin.serialization"") version ""1.8.0""
}
```       

Groovy DSL:

```gradle
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.8.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.0'
}
```

> Kotlin versions before 1.4.0 are not supported by the stable release of Kotlin serialization

#### Using `apply plugin` (the old way)

First, you have to add the serialization plugin to your classpath as the other [compiler plugins](https://kotlinlang.org/docs/reference/compiler-plugins.html):

Kotlin DSL:

```kotlin
buildscript {
    repositories { mavenCentral() }

    dependencies {
        val kotlinVersion = ""1.8.0""
        classpath(kotlin(""gradle-plugin"", version = kotlinVersion))
        classpath(kotlin(""serialization"", version = kotlinVersion))
    }
}
```

Groovy DSL:

```gradle
buildscript {
    ext.kotlin_version = '1.8.0'
    repositories { mavenCentral() }

    dependencies {
        classpath ""org.jetbrains.kotlin:kotlin-serialization:$kotlin_version""
    }
}
```

Then you can `apply plugin` (example in Groovy):

```gradle
apply plugin: 'kotlin' // or 'kotlin-multiplatform' for multiplatform projects
apply plugin: 'kotlinx-serialization'
```

#### Dependency on the JSON library

After setting up the plugin one way or another, you have to add a dependency on the serialization library.
Note that while the plugin has version the same as the compiler one, runtime library has different coordinates, repository and versioning.

Kotlin DSL:

```kotlin
repositories {
    mavenCentral()
}

dependencies {
    implementation(""org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0-RC"")
}
```

Groovy DSL:

```gradle
repositories {
    mavenCentral()
}

dependencies {
    implementation ""org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0-RC""
}
```

>We also provide `kotlinx-serialization-core` artifact that contains all serialization API but does not have bundled serialization format with it

### Android

By default, proguard rules are supplied with the library.
[These rules](rules/common.pro) keep serializers for _all_ serializable classes that are retained after shrinking,
so you don't need additional setup.

**However, these rules do not affect serializable classes if they have named companion objects.**

If you want to serialize classes with named companion objects, you need to add and edit rules below to your `proguard-rules.pro` configuration. 

Note that the rules for R8 differ depending on the [compatibility mode](https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md) used.

<details>
<summary>Example of named companion rules for ProGuard and R8 compatibility mode</summary>

```proguard
# Serializer for classes with named companion objects are retrieved using `getDeclaredClasses`.
# If you have any, replace classes with those containing named companion objects.
-keepattributes InnerClasses # Needed for `getDeclaredClasses`.

-if @kotlinx.serialization.Serializable class
com.example.myapplication.HasNamedCompanion, # <-- List serializable classes with named companions.
com.example.myapplication.HasNamedCompanion2
{
    static **$* *;
}
-keepnames class <1>$$serializer { # -keepnames suffices; class is kept when serializer() is kept.
    static <1>$$serializer INSTANCE;
}
```
</details>


<details>
<summary>Example of named companion rules for R8 full mode</summary>

```proguard
# Serializer for classes with named companion objects are retrieved using `getDeclaredClasses`.
# If you have any, replace classes with those containing named companion objects.
-keepattributes InnerClasses # Needed for `getDeclaredClasses`.

-if @kotlinx.serialization.Serializable class
com.example.myapplication.HasNamedCompanion, # <-- List serializable classes with named companions.
com.example.myapplication.HasNamedCompanion2
{
    static **$* *;
}
-keepnames class <1>$$serializer { # -keepnames suffices; class is kept when serializer() is kept.
    static <1>$$serializer INSTANCE;
}

# Keep both serializer and serializable classes to save the attribute InnerClasses
-keepclasseswithmembers, allowshrinking, allowobfuscation, allowaccessmodification class
com.example.myapplication.HasNamedCompanion, # <-- List serializable classes with named companions.
com.example.myapplication.HasNamedCompanion2
{
    *;
}
```
</details>

In case you want to exclude serializable classes that are used, but never serialized at runtime,
you will need to write custom rules with narrower [class specifications](https://www.guardsquare.com/manual/configuration/usage).

### Multiplatform (Common, JS, Native)

Most of the modules are also available for Kotlin/JS and Kotlin/Native.
You can add dependency to the required module right to the common source set:
```gradle
commonMain {
    dependencies {
        // Works as common dependency as well as the platform one
        implementation ""org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version""
    }
}
```
The same artifact coordinates can be used to depend on platform-specific artifact in platform-specific source-set.

### Maven

Ensure the proper version of Kotlin and serialization version:

```xml
<properties>
    <kotlin.version>1.8.0</kotlin.version>
    <serialization.version>1.5.0-RC</serialization.version>
</properties>
```

Add serialization plugin to Kotlin compiler plugin:

```xml
<build>
    <plugins>
        <plugin>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-plugin</artifactId>
            <version>${kotlin.version}</version>
            <executions>
                <execution>
                    <id>compile</id>
                    <phase>compile</phase>
                    <goals>
                        <goal>compile</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <compilerPlugins>
                    <plugin>kotlinx-serialization</plugin>
                </compilerPlugins>
            </configuration>
            <dependencies>
                <dependency>
                    <groupId>org.jetbrains.kotlin</groupId>
                    <artifactId>kotlin-maven-serialization</artifactId>
                    <version>${kotlin.version}</version>
                </dependency>
            </dependencies>
        </plugin>
    </plugins>
</build>
```

Add dependency on serialization runtime library:

```xml
<dependency>
    <groupId>org.jetbrains.kotlinx</groupId>
    <artifactId>kotlinx-serialization-json</artifactId>
    <version>${serialization.version}</version>
</dependency>
```

### Bazel

To setup the Kotlin compiler plugin for Bazel, follow [the
example](https://github.com/bazelbuild/rules_kotlin/tree/master/examples/plugin/src/serialization)
from the `rules_kotlin` repository.
","Using Kotlin Serialization requires Kotlin compiler `1.4.0 or higher. Make sure
you have the corresponding Kotlin plugin installed in the IDE, no additional
plugins for IDE are required. You can get the full code
[here](guide/example/example-readme-01.kt). You can find auto-generated
documentation website on [kotlinlang.org/api/Kotlinx.serialization/). The
serialization plugin is shipped with the Kotlin compilation distribution, and
the IDEA plugin is bundled into Kotlin."
3435,"The codes of paper ""Long Text Generation via Adversarial Training with Leaked Information""  on AAAI 2018.  Text generation using GAN and Hierarchical Reinforcement Learning.","﻿# LeakGAN
The code of research paper [Long Text Generation via Adversarial Training with Leaked Information](https://arxiv.org/abs/1709.08624). 

This paper has been accepted at the Thirty-Second AAAI Conference on Artificial Intelligence ([AAAI-18](https://aaai.org/Conferences/AAAI-18/)).
## Requirements
* **Tensorflow r1.2.1**
* Python 2.7
* CUDA 7.5+ (For GPU)

## Introduction
Automatically generating coherent and semantically meaningful text has many applications in machine translation, dialogue systems, image captioning, etc. Recently, by combining with policy gradient, Generative Adversarial Nets (GAN) that use a discriminative model to guide the training of the generative model as a reinforcement learning policy has shown promising results in text generation. However, the scalar guiding signal is only available after the entire text has been generated and lacks intermediate information about text structure during the generative process. As such, it limits its success when the length of the generated text samples is long (more than 20 words). In this project, we propose a new framework, called LeakGAN, to address the problem for long text generation. We allow the discriminative net to leak its own high-level extracted features to the generative net to further help the guidance. The generator incorporates such informative signals into all generation steps through an additional Manager module, which takes the extracted features of current generated words and outputs a latent vector to guide the Worker module for next-word generation. Our extensive experiments on synthetic data and various real-world tasks with Turing test demonstrate that LeakGAN is highly effective in long text generation and also improves the performance in short text generation scenarios. More importantly, without any supervision, LeakGAN would be able to implicitly learn sentence structures only through the interaction between Manager and Worker.

![](https://github.com/CR-Gjx/LeakGAN/blob/master/figures/leakgan.png)

As the illustration of LeakGAN. We specifically introduce a hierarchical generator G, which consists of a high-level MANAGER module and a low-level WORKER module. The MANAGER is a long short term memory network (LSTM) and serves as a mediator. In each step, it receives generator D’s high-level feature representation, e.g., the feature map of the CNN, and uses it to form the guiding goal for the WORKER module in that timestep. As the information from D is internally-maintained and in an adversarial game it is not supposed to provide G with such information. We thus call it a leakage of information from D.

Next, given the goal embedding produced by the MANAGER, the WORKER firstly encodes current generated words with another LSTM, then combines the output of the LSTM and the goal embedding to take a final action at current state. As such, the guiding signals from D are not only available to G at the end in terms of the scalar reward signals, but also available in terms of a goal embedding vector during the generation process to guide G how to get improved.

## Reference
```bash
@article{guo2017long,
  title={Long Text Generation via Adversarial Training with Leaked Information},
  author={Guo, Jiaxian and Lu, Sidi and Cai, Han and Zhang, Weinan and Yu, Yong and Wang, Jun},
  journal={arXiv preprint arXiv:1709.08624},
  year={2017}
}
```


You can get the code and run the experiments in follow folders.
## Folder

Synthetic Data: synthetic data experiment

Image COCO: a real text example for our model using dataset Image COCO (http://cocodataset.org/#download)

Note: this code is based on the [previous work by LantaoYu](https://github.com/LantaoYu/SeqGAN). Many thanks to [LantaoYu](https://github.com/LantaoYu).
","LeakGAN is a new framework for long text generation. It allows discriminative
net to leak its own high-level extracted features to the generative net. LeakGAN
would be able to implicitly learn sentence structures only through the
interaction between Manager and Worker. It is highly effective in long
textgeneration and also improves the performance in short text generation
scenarios. You can get the code and run the experiments in the following
folders:Synthetic Data: synthetic data experiment.Image COCO: a real text
example for our model using dataset Image C OCO
(http://cocodataset.org/#download)"
2511,Learning operating system development using Linux kernel and Raspberry Pi,"# Learning operating system development using Linux kernel and Raspberry Pi

This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS or just RPi OS. The RPi OS source code is largely based on [Linux kernel](https://github.com/torvalds/linux), but the OS has very limited functionality and supports only [Raspberry PI 3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/). 

Each lesson is designed in such a way that it first explains how some kernel feature is implemented in the RPi OS, and then it tries to demonstrate how the same functionality works in the Linux kernel. Each lesson has a corresponding folder in the [src](https://github.com/s-matyukevich/raspberry-pi-os/tree/master/src) directory, which contains a snapshot of the OS source code at the time when the lesson had just been completed. This allows the introduction of new concepts gracefully and helps readers to follow the evolution of the RPi OS. Understanding this guide doesn't require any specific OS development skills.

For more information about project goals and history, please read the [Introduction](docs/Introduction.md). The project is still under active development, if you are willing to participate - please read the [Contribution guide](docs/Contributions.md).

<p>
  <a href=""https://twitter.com/RPi_OS"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/twitter.png"" alt=""Follow @RPi_OS on twitter"" height=""34"" >
  </a>

  <a href=""https://www.facebook.com/groups/251043708976964/"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/facebook.png"" alt=""Follow Raspberry Pi OS on facebook"" height=""34"" >
  </a>

  <a href=""https://join.slack.com/t/rpi-os/shared_invite/enQtNDQ1NTg2ODc1MDEwLWVjMTZlZmMyZDE4OGEyYmMzNTY1YjljZjU5YWI1NDllOWEwMjI5YzVkM2RiMzliYjEzN2RlYmUzNzBiYmQyMjY"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/slack.png"" alt=""Join Raspberry Pi OS in slack"" height=""34"" >
  </a>

  <a href=""https://www.producthunt.com/upcoming/raspberry-pi-os"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/subscribe.png"" alt=""Subscribe for updates"" height=""34"" >
  </a>
</p>

## Table of Contents

* **[Introduction](docs/Introduction.md)**
* **[Contribution guide](docs/Contributions.md)**
* **[Prerequisites](docs/Prerequisites.md)**
* **Lesson 1: Kernel Initialization** 
  * 1.1 [Introducing RPi OS, or bare metal ""Hello, world!""](docs/lesson01/rpi-os.md)
  * Linux
    * 1.2 [Project structure](docs/lesson01/linux/project-structure.md)
    * 1.3 [Kernel build system](docs/lesson01/linux/build-system.md) 
    * 1.4 [Startup sequence](docs/lesson01/linux/kernel-startup.md)
  * 1.5 [Exercises](docs/lesson01/exercises.md)
* **Lesson 2: Processor initialization**
  * 2.1 [RPi OS](docs/lesson02/rpi-os.md)
  * 2.2 [Linux](docs/lesson02/linux.md)
  * 2.3 [Exercises](docs/lesson02/exercises.md)
* **Lesson 3: Interrupt handling**
  * 3.1 [RPi OS](docs/lesson03/rpi-os.md)
  * Linux
    * 3.2 [Low level exception handling](docs/lesson03/linux/low_level-exception_handling.md) 
    * 3.3 [Interrupt controllers](docs/lesson03/linux/interrupt_controllers.md)
    * 3.4 [Timers](docs/lesson03/linux/timer.md)
  * 3.5 [Exercises](docs/lesson03/exercises.md)
* **Lesson 4: Process scheduler**
  * 4.1 [RPi OS](docs/lesson04/rpi-os.md) 
  * Linux
    * 4.2 [Scheduler basic structures](docs/lesson04/linux/basic_structures.md)
    * 4.3 [Forking a task](docs/lesson04/linux/fork.md)
    * 4.4 [Scheduler](docs/lesson04/linux/scheduler.md)
  * 4.5 [Exercises](docs/lesson04/exercises.md)
* **Lesson 5: User processes and system calls** 
  * 5.1 [RPi OS](docs/lesson05/rpi-os.md) 
  * 5.2 [Linux](docs/lesson05/linux.md)
  * 5.3 [Exercises](docs/lesson05/exercises.md)
* **Lesson 6: Virtual memory management**
  * 6.1 [RPi OS](docs/lesson06/rpi-os.md) 
  * 6.2 Linux (In progress)
  * 6.3 [Exercises](docs/lesson06/exercises.md)
* **Lesson 7: Signals and interrupt waiting** (To be done)
* **Lesson 8: File systems** (To be done)
* **Lesson 9: Executable files (ELF)** (To be done)
* **Lesson 10: Drivers** (To be done)
* **Lesson 11: Networking** (To be done)

","This repository contains a step-by-step guide that teaches how to create a
simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS
or just RPi OS. Understanding this guide doesn't require any specific OS
development skills. The project is still under active development, if you are
willing to participate."
2574,Terminal file manager,"# LF

[Google Groups](https://groups.google.com/forum/#!forum/lf-fm)
| [Wiki](https://github.com/gokcehan/lf/wiki)
| [#lf](https://web.libera.chat/#lf) (on Libera.Chat)
| [#lf:matrix.org](https://matrix.to/#/#lf:matrix.org) (with IRC bridge)

[![Go Report Card](https://goreportcard.com/badge/github.com/gokcehan/lf)](https://goreportcard.com/report/github.com/gokcehan/lf)
[![Go Reference](https://pkg.go.dev/badge/github.com/gokcehan/lf.svg)](https://pkg.go.dev/github.com/gokcehan/lf)

> This is a work in progress. Use at your own risk.

`lf` (as in ""list files"") is a terminal file manager written in Go with a heavy inspiration from ranger file manager.
See [faq](https://github.com/gokcehan/lf/wiki/FAQ) for more information and [tutorial](https://github.com/gokcehan/lf/wiki/Tutorial) for a gentle introduction with screencasts.

![multicol-screenshot](http://i.imgur.com/DaTUenu.png)
![singlecol-screenshot](http://i.imgur.com/p95xzUj.png)

## Features

- Cross-platform (Linux, macOS, BSDs, Windows)
- Single binary without any runtime dependencies
- Fast startup and low memory footprint due to native code and static binaries
- Asynchronous IO operations to avoid UI locking
- Server/client architecture and remote commands to manage multiple instances
- Extendable and configurable with shell commands
- Customizable keybindings (vi and readline defaults)
- A reasonable set of other features (see the [documentation](https://pkg.go.dev/github.com/gokcehan/lf))

## Non-Features

- Tabs or windows (better handled by window manager or terminal multiplexer)
- Builtin pager/editor (better handled by your pager/editor of choice)

## Installation

See [packages](https://github.com/gokcehan/lf/wiki/Packages) for community maintained packages.

See [releases](https://github.com/gokcehan/lf/releases) for pre-built binaries.

Building from the source requires [Go](https://go.dev/).

On Unix (Go version < 1.17):

```bash
env CGO_ENABLED=0 GO111MODULE=on go get -u -ldflags=""-s -w"" github.com/gokcehan/lf
```

On Unix (Go version >= 1.17):

```bash
env CGO_ENABLED=0 go install -ldflags=""-s -w"" github.com/gokcehan/lf@latest
```

On Windows `cmd` (Go version < 1.17):

```cmd
set CGO_ENABLED=0
set GO111MODULE=on
go get -u -ldflags=""-s -w"" github.com/gokcehan/lf
```

On Windows `cmd` (Go version >= 1.17):

```cmd
set CGO_ENABLED=0
go install -ldflags=""-s -w"" github.com/gokcehan/lf@latest
```

On Windows `powershell` (Go version < 1.17):

```powershell
$env:CGO_ENABLED = '0'
$env:GO111MODULE = 'on'
go get -u -ldflags=""-s -w"" github.com/gokcehan/lf
```

On Windows `powershell` (Go version >= 1.17):

```powershell
$env:CGO_ENABLED = '0'
go install -ldflags=""-s -w"" github.com/gokcehan/lf@latest
```

## Usage

After the installation `lf` command should start the application in the current directory.

Run `lf -help` to see command line options.

Run `lf -doc` to see the [documentation](https://pkg.go.dev/github.com/gokcehan/lf).

See [etc](etc) directory to integrate `lf` to your shell and/or editor.
Example configuration files along with example colors and icons files can also be found in this directory.

See [integrations](https://github.com/gokcehan/lf/wiki/Integrations) to integrate `lf` to other tools.

See [tips](https://github.com/gokcehan/lf/wiki/Tips) for more examples.

## Contributing

See [contributing](https://github.com/gokcehan/lf/wiki/Contributing) for guidelines.
","LF is a terminal file manager written in Go with a heavy inspiration from ranger
file manager. It is available for Linux, macOS, BSDs, Windows, and Mac OS X. It
has a number of features including a built-in pager/editor and a customizable
keybindings."
2541,"Linus Torvalds' linked list argument for good taste, explained","# Linked lists, pointer tricks and good taste

* [Introduction](#introduction)
* [The code](#the-code)
   * [The CS101 version](#the-cs101-version)
   * [A more elegant solution](#a-more-elegant-solution)
* [How does it work?](#how-does-it-work)
   * [Integrating the head pointer](#integrating-the-head-pointer)
   * [Maintaining a handle](#maintaining-a-handle)
* [Going beyond](#going-beyond)
   * [Inserting before existing items](#inserting-before-existing-items)
   * [Quick refactor](#quick-refactor)
   * [Implementing insert_before()](#implementing-insert_before)
* [Conclusion](#conclusion)


## Introduction

In a 2016 [TED interview][ted] (14:10) Linus Torvalds speaks about what he
considers *good taste* in coding. As an example, he presents two
implementations of item removal in singly linked lists (reproduced below).  In
order to remove the first item from a list, one of the implementations requires
a special case, the other one does not.  Linus, obviously, prefers the latter.

His comment is:

> [...] I don't want you to understand why it doesn't have the if statement.
> But I want you to understand that sometimes you can see a problem in a
> different way and rewrite it so that a special case goes away and becomes the
> normal case, and that's *good code*. [...] -- L. Torvalds

The code snippets he presents are C-style pseudocode and are simple enough to
follow. However, as Linus mentions in the comment, the snippets lack a
conceptual explanation and it is not immediately evident how the more elegant
solution actually works.

The next two sections look at the technical approach in detail and demonstrate
how and why the indirect addressing approach is so neat. The last section
extends the solution from item deletion to insertion.


## The code

The basic data structure for a singly linked list of integers is shown in
Figure 1.

<p align=""center"">
<img alt=""linked list"" src=""img/linked-list.png"" width=""600"">
<br />
<b>Figure 1</b>: Singly linked list of integers.
</p>

Numbers are arbitrarily chosen integer values and arrows indicate pointers.
`head` is a pointer of type `list_item *` and each of the boxes
is an instance of an `list_item` struct, each with a member variable (called
`next` in the code) of type `list_item *` that points to the next item.

The C implementation of the data structure is:

```c
struct list_item {
        int value;
        struct list_item *next;
};
typedef struct list_item list_item;

struct list {
        struct list_item *head;
};
typedef struct list list;

```
We also include a (minimal) API:

```c
/* The textbook version */
void remove_cs101(list *l, list_item *target);
/* A more elegant solution */
void remove_elegant(list *l, list_item *target);
```

With that in place, let's have a look at the implementations of
`remove_cs101()` and `remove_elegant()`. The code of these examples is true
to the pseudocode from Linus' example and also compiles and runs.

### The CS101 version

<p align=""center"">
<img alt=""simple data model"" src=""img/data-model-cs101.png"" width=""600"">
<br />
<b>Figure 2</b>: The conceptual model for the list data structure in the CS101 algorithm.
</p>

```c
void remove_cs101(list *l, list_item *target)
{
        list_item *cur = l->head, *prev = NULL;
        while (cur != target) {
                prev = cur;
                cur = cur->next;
        }
        if (prev)
                prev->next = cur->next;
        else
                l->head = cur->next;
}
```

The standard CS101 approach makes use of two traversal pointers `cur` and
`prev`, marking the current and previous traversal position in the list,
respectively.  `cur` starts at the list head `head`, and advances until the
target is found.  `prev` starts at `NULL` and is subsequently updated with the
previous value of `cur` every time `cur` advances. After the target is found,
the algorithm tests if `prev` is non-`NULL`. If yes, the item is not at the
beginning of the list and the removal consists of re-routing the linked list
around `cur`. If `prev` is `NULL`, `cur` is pointing to the first element in
the list, in which case, removal means moving the list head forward.

### A more elegant solution

The more elegant version has less code and does not require a separate branch
to deal with deletion of the first element in a list.

```c
void remove_elegant(list *l, list_item *target)
{
        list_item **p = &l->head;
        while (*p != target)
                p = &(*p)->next;
        *p = target->next;
}
```

The code uses an indirect pointer `p` that holds the address of a pointer to a
list item, starting with the address of `head`.  In every iteration, that
pointer is advanced to hold the address of the pointer to the next list item,
i.e. the address of the `next` element in the current `list_item`.
When the pointer to the list item `*p` equals `target`, we exit the search
loop and remove the item from the list.


## How does it work?

The key insight is that using an indirect pointer `p` has two conceptual
benefits:

1. It allows us to interpret the linked list in a way that makes the `head`
   pointer an integral part the data structure. This eliminates the need 
   for a special case to remove the first item.
2. It also allows us to evaluate the condition of the `while` loop without
   having to let go of the pointer that points to `target`. This allows us to
   modify the pointer that points to `target` and to get away with a single
   iterator as opposed to `prev` and `cur`.

Let's look each of these points in turn.

### Integrating the `head` pointer

The standard model interprets the linked list as a sequence of `list_item`
instances. The beginning of the sequence can be accessed through a `head`
pointer. This leads to the conceptual model illustrated in Figure 2 above. The `head` pointer is
merely considered as a handle to access the start of the list. `prev` and `cur`
are pointers of type `list_item *` and always point to an item or `NULL`.

The elegant implementation uses indirect addressing scheme that yields a different
view on the data structure:

<p align=""center"">
<img alt=""Data model for indirect addressing"" src=""img/data-model-indirect.png"" width=""600"">
<br />
<b>Figure 3</b>: The conceptual model for the list data structure in the more
elegant approach.
</p>

Here, `p` is of type `list_item **` and holds the address of the pointer to
the current list item. When we advance the pointer, we forward to the address
of the pointer to the next list item.

In code, this translates to `p = &(*p)->next`, meaning we

1. `(*p)`: dereference the address to the pointer to the current list item
2. `->next`: dereference that pointer again and select the field that holds
   the address of the next list item
3. `&`: take the address of that address field (i.e. get a pointer to it)

This corresponds to an interpretation of the data structure where the list is a
a sequence of pointers to `list_item`s (cf. Figure 3).

### Maintaining a handle

An additional benefit of that particular interpretation is that it supports
editing the `next` pointer of the predecessor of the current item throughout the
entire traversal.

With `p` holding the address of a pointer to a list item, the comparison in the
search loop becomes

```c
while (*p != target)
```

The search loop will exit if `*p` equals `target`, and once it does, we are
still able to modify `*p` since we hold its address `p`. Thus, despite
iterating the loop until we hit `target`, we still maintain a handle (the
address of the `next` field or the `head` pointer) that can be used to directly
modify the pointer that points *to* the item.

This is the reason why we can modify the incoming pointer to an item to point
to a different location using `*p = target->next` and why we do not need `prev`
and `cur` pointers to traverse the list for item removal.

## Going beyond

It turns out that the idea behind `remove_elegant()` can be applied to yield a
particularly concise implementation of another function in the list API:
`insert_before()`, i.e. inserting a given item before another one.

### Inserting before existing items

First, let's add the following declaration to the list API in `list.h`:

```c
void insert_before(list *l, list_item *before, list_item *item);
```

The function will take a pointer to a list `l`, a pointer `before` to an 
item in that list and a pointer to a new list item `item` that the function
will insert before `before`.

### Quick refactor

Before we move on, we refactor the search loop into a separate
function

```c

static inline list_item **find_indirect(list *l, list_item *target)
{
        list_item **p = &l->head;
        while (*p != target)
                p = &(*p)->next;
        return p;
}

```

and use that function in `remove_elegant()` like so

```c
void remove_elegant(list *l, list_item *target)
{
        list_item **p = find_indirect(l, target);
        *p = target->next;
}
```

### Implementing `insert_before()`

Using `find_indirect()`, it is straightforward to implement `insert_before()`:

```c
void insert_before(list *l, list_item *before, list_item *item)
{
        list_item **p = find_indirect(l, before);
        *p = item;
        item->next = before;
}
```

A particularly beautiful outcome is that the implementation has consistent
semantics for the edge cases: if `before` points to the list head, the new item
will be inserted at the beginning of the list, if `before` is `NULL` or invalid
(i.e. the item does not exist in `l`), the new item will be appended at the
end.


## Conclusion

The premise of the more elegant solution for item deletion is a single, simple
change: using an indirect `list_item **` pointer to iterate over the pointers
to the list items.  Everything else flows from there: there is no need for a
special case or branching and a single iterator is sufficient to find and
remove the target item.
It also turns out that the same approach provides an elegant solution for item
insertion in general and for insertion *before* an existing item in particular.

So, going back to Linus' initial comment: is it good taste? Hard to say, but
it's certainly a different, creative and very elegant solution to a well-known
CS task.

[ted]: https://www.ted.com/talks/linus_torvalds_the_mind_behind_linux
","Linus Torvalds presents two implementations of item removal in singly linked
lists. In order to remove the first item from a list, one of the implementations
requires a special case, the other one does not. The code snippets he presents
are C-style pseudocode and are simple enough to follow. However, as Linus
mentions in the comment, the snippets lack aconceptual explanation and it is not
immediately evident how the more elegant solution actually works. The next two
sections look at the technical approach in detail and demonstrate how the
indirect addressing approach is so neat. The last section extends the solution
from item deletion to insertion."
717,Library for interacting with LLVM IR in pure Go.,"# llvm

[![Build Status](https://github.com/llir/llvm/workflows/Go/badge.svg?branch=master)](https://github.com/llir/llvm/actions/workflows/go.yml)
[![Coverage Status](https://coveralls.io/repos/github/llir/llvm/badge.svg?branch=master)](https://coveralls.io/github/llir/llvm?branch=master)
[![Go Report Card](https://goreportcard.com/badge/github.com/llir/llvm)](https://goreportcard.com/report/github.com/llir/llvm)
[![go.dev reference](https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white&style=flat-square)](https://pkg.go.dev/github.com/llir/llvm)

Library for interacting with [LLVM IR](http://llvm.org/docs/LangRef.html) in pure Go.

## Introduction

* [Introductory blog post ""LLVM IR and Go""](https://blog.gopheracademy.com/advent-2018/llvm-ir-and-go/)
* [Our Document](https://llir.github.io/document/)

## Installation

```bash
go get -u github.com/llir/llvm/...
```

## Versions

Map between `llir/llvm` tagged releases and LLVM release versions.

* [llir/llvm v0.3.7](https://github.com/llir/llvm/tree/v0.3.7): LLVM 15.0 (yet to be released)
* [llir/llvm v0.3.6](https://github.com/llir/llvm/tree/v0.3.6): LLVM 14.0
* [llir/llvm v0.3.5](https://github.com/llir/llvm/tree/v0.3.5): LLVM 13.0
* [llir/llvm v0.3.4](https://github.com/llir/llvm/tree/v0.3.4): LLVM 12.0
* [llir/llvm v0.3.3](https://github.com/llir/llvm/tree/v0.3.3): LLVM 11.0
* [llir/llvm v0.3.2](https://github.com/llir/llvm/tree/v0.3.2): LLVM 10.0
* [llir/llvm v0.3.0](https://github.com/llir/llvm/tree/v0.3.0): LLVM 9.0

## Users

* [decomp](https://github.com/decomp/decomp): LLVM IR to Go decompiler by [@decomp](https://github.com/decomp).
* [geode](https://github.com/geode-lang/geode): Geode to LLVM IR compiler by [@nickwanninger](https://github.com/nickwanninger).
* [leaven](https://github.com/andybalholm/leaven): LLVM IR to Go decompiler by [@andybalholm](https://github.com/andybalholm).
* [slate](https://github.com/nektro/slate): Slate to LLVM IR compiler by [@nektro](https://github.com/nektro).
* [tre](https://github.com/zegl/tre): Go to LLVM IR compiler by [@zegl](https://github.com/zegl).
* [uc](https://github.com/mewmew/uc): µC to LLVM IR compiler by [@sangisos](https://github.com/sangisos) and [@mewmew](https://github.com/mewmew).
* [B++](https://github.com/Nv7-Github/Bpp): B++ to LLVM IR compiler by [@Nv7-Github](https://github.com/Nv7-Github).

## Usage

### Input example - Parse LLVM IR assembly

[Example usage in GoDoc](https://pkg.go.dev/github.com/llir/llvm/asm#example-package).

```go
// This example parses an LLVM IR assembly file and pretty-prints the data types
// of the parsed module to standard output.
package main

import (
	""log""

	""github.com/kr/pretty""
	""github.com/llir/llvm/asm""
)

func main() {
	// Parse the LLVM IR assembly file `foo.ll`.
	m, err := asm.ParseFile(""foo.ll"")
	if err != nil {
		log.Fatalf(""%+v"", err)
	}
	// Pretty-print the data types of the parsed LLVM IR module.
	pretty.Println(m)
}
```

### Output example - Produce LLVM IR assembly

[Example usage in GoDoc](https://pkg.go.dev/github.com/llir/llvm/ir#example-package).

```go
// This example produces LLVM IR code equivalent to the following C code, which
// implements a pseudo-random number generator.
//
//    int abs(int x);
//
//    int seed = 0;
//
//    // ref: https://en.wikipedia.org/wiki/Linear_congruential_generator
//    //    a = 0x15A4E35
//    //    c = 1
//    int rand(void) {
//       seed = seed*0x15A4E35 + 1;
//       return abs(seed);
//    }
package main

import (
	""fmt""

	""github.com/llir/llvm/ir""
	""github.com/llir/llvm/ir/constant""
	""github.com/llir/llvm/ir/types""
)

func main() {
	// Create convenience types and constants.
	i32 := types.I32
	zero := constant.NewInt(i32, 0)
	a := constant.NewInt(i32, 0x15A4E35) // multiplier of the PRNG.
	c := constant.NewInt(i32, 1)         // increment of the PRNG.

	// Create a new LLVM IR module.
	m := ir.NewModule()

	// Create an external function declaration and append it to the module.
	//
	//    int abs(int x);
	abs := m.NewFunc(""abs"", i32, ir.NewParam(""x"", i32))

	// Create a global variable definition and append it to the module.
	//
	//    int seed = 0;
	seed := m.NewGlobalDef(""seed"", zero)

	// Create a function definition and append it to the module.
	//
	//    int rand(void) { ... }
	rand := m.NewFunc(""rand"", i32)

	// Create an unnamed entry basic block and append it to the `rand` function.
	entry := rand.NewBlock("""")

	// Create instructions and append them to the entry basic block.
	tmp1 := entry.NewLoad(i32, seed)
	tmp2 := entry.NewMul(tmp1, a)
	tmp3 := entry.NewAdd(tmp2, c)
	entry.NewStore(tmp3, seed)
	tmp4 := entry.NewCall(abs, tmp3)
	entry.NewRet(tmp4)

	// Print the LLVM IR assembly of the module.
	fmt.Println(m)
}
```

### Analysis example - Process LLVM IR

[Example usage in GoDoc](https://pkg.go.dev/github.com/llir/llvm/ir#example-package--Callgraph).

```go
// This example program analyses an LLVM IR module to produce a callgraph in
// Graphviz DOT format.
package main

import (
	""fmt""
	""strings""

	""github.com/llir/llvm/asm""
	""github.com/llir/llvm/ir""
)

func main() {
	// Parse LLVM IR assembly file.
	m, err := asm.ParseFile(""foo.ll"")
	if err != nil {
		panic(err)
	}
	// Produce callgraph of module.
	callgraph := genCallgraph(m)
	// Output callgraph in Graphviz DOT format.
	fmt.Println(callgraph)
}

// genCallgraph returns the callgraph in Graphviz DOT format of the given LLVM
// IR module.
func genCallgraph(m *ir.Module) string {
	buf := &strings.Builder{}
	buf.WriteString(""digraph {\n"")
	// For each function of the module.
	for _, f := range m.Funcs {
		// Add caller node.
		caller := f.Ident()
		fmt.Fprintf(buf, ""\t%q\n"", caller)
		// For each basic block of the function.
		for _, block := range f.Blocks {
			// For each non-branching instruction of the basic block.
			for _, inst := range block.Insts {
				// Type switch on instruction to find call instructions.
				switch inst := inst.(type) {
				case *ir.InstCall:
					callee := inst.Callee.Ident()
					// Add edges from caller to callee.
					fmt.Fprintf(buf, ""\t%q -> %q\n"", caller, callee)
				}
			}
			// Terminator of basic block.
			switch term := block.Term.(type) {
			case *ir.TermRet:
				// do something.
				_ = term
			}
		}
	}
	buf.WriteString(""}"")
	return buf.String()
}
```

## License

The `llir/llvm` project is dual-licensed to the [public domain](UNLICENSE) and under a [zero-clause BSD license](LICENSE). You may choose either license to govern your use of `llir/llvm`.
","LLVM IR and Go is a cross-compiler for the LLVM virtual machine. It can be used
to build and test applications. The following example parses an LLVM IR assembly
file. It then pretty-prints the data types. of the parsed module to standard
output. The example is the equivalent of the following LLVM-IR-and-Go
code:.summarize: # Introduction. # Introductory blog post ""LLVMIR and Go""
(https://blog.gopheracademy.com/advent-2018/llvm-ir-and.go/)"
2551,FUSE filesystem for LXC,"# lxcfs

## Introduction
LXCFS is a small FUSE filesystem written with the intention of making Linux
containers feel more like a virtual machine. It started as a side-project of
`LXC` but is useable by any runtime.

LXCFS will take care that the information provided by crucial files in `procfs`
such as:

```
/proc/cpuinfo
/proc/diskstats
/proc/meminfo
/proc/stat
/proc/swaps
/proc/uptime
/proc/slabinfo
/sys/devices/system/cpu/online
```

are container aware such that the values displayed (e.g. in `/proc/uptime`)
really reflect how long the container is running and not how long the host is
running.

Prior to the implementation of cgroup namespaces by Serge Hallyn `LXCFS` also
provided a container aware `cgroupfs` tree. It took care that the container
only had access to cgroups underneath it's own cgroups and thus provided
additional safety. For systems without support for cgroup namespaces `LXCFS`
will still provide this feature but it is mostly considered deprecated.

## Upgrading `LXCFS` without restart

`LXCFS` is split into a shared library (a libtool module, to be precise)
`liblxcfs` and a simple binary `lxcfs`. When upgrading to a newer version of
`LXCFS` the `lxcfs` binary will not be restarted. Instead it will detect that
a new version of the shared library is available and will reload it using
`dlclose(3)` and `dlopen(3)`. This design was chosen so that the fuse main loop
that `LXCFS` uses will not need to be restarted. If it were then all containers
using `LXCFS` would need to be restarted since they would otherwise be left
with broken fuse mounts.

To force a reload of the shared library at the next possible instance simply
send `SIGUSR1` to the pid of the running `LXCFS` process. This can be as simple
as doing:

    rm /usr/lib64/lxcfs/liblxcfs.so # MUST to delete the old library file first
    cp liblxcfs.so /usr/lib64/lxcfs/liblxcfs.so # to place new library file
    kill -s USR1 $(pidof lxcfs) # reload

### musl

To achieve smooth upgrades through shared library reloads `LXCFS` also relies
on the fact that when `dlclose(3)` drops the last reference to the shared
library destructors are run and when `dlopen(3)` is called constructors are
run. While this is true for `glibc` it is not true for `musl` (See the section
[Unloading libraries](https://wiki.musl-libc.org/functional-differences-from-glibc.html).).
So users of `LXCFS` on `musl` are advised to restart `LXCFS` completely and all
containers making use of it.

## Building

In order to build LXCFS install fuse and the fuse development headers according
to your distro. LXCFS prefers `fuse3` but does work with new enough `fuse2`
versions:

    git clone git://github.com/lxc/lxcfs
    cd lxcfs
    meson setup -Dinit-script=systemd --prefix=/usr build/
    meson compile -C build/
    sudo meson install -C build/

To build with sanitizers you have to specify `-Db_sanitize=...` option to `meson setup`.
For example, to enable ASAN and UBSAN:

    meson setup -Dinit-script=systemd --prefix=/usr build/ -Db_sanitize=address,undefined
    meson compile -C build/

## Usage
The recommended command to run lxcfs is:

    sudo mkdir -p /var/lib/lxcfs
    sudo lxcfs /var/lib/lxcfs

A container runtime wishing to use `LXCFS` should then bind mount the
approriate files into the correct places on container startup.

### LXC
In order to use lxcfs with systemd-based containers, you can either use
LXC 1.1 in which case it should work automatically, or otherwise, copy
the `lxc.mount.hook` and `lxc.reboot.hook` files (once built) from this tree to
`/usr/share/lxcfs`, make sure it is executable, then add the
following lines to your container configuration:
```
lxc.mount.auto = cgroup:mixed
lxc.autodev = 1
lxc.kmsg = 0
lxc.include = /usr/share/lxc/config/common.conf.d/00-lxcfs.conf
```

## Using with Docker

```
docker run -it -m 256m --memory-swap 256m \
      -v /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw \
      -v /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw \
      -v /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw \
      -v /var/lib/lxcfs/proc/stat:/proc/stat:rw \
      -v /var/lib/lxcfs/proc/swaps:/proc/swaps:rw \
      -v /var/lib/lxcfs/proc/uptime:/proc/uptime:rw \
      -v /var/lib/lxcfs/proc/slabinfo:/proc/slabinfo:rw \
      -v /var/lib/lxcfs/sys/devices/system/cpu:/sys/devices/system/cpu:rw \
      ubuntu:18.04 /bin/bash
 ```

 In a system with swap enabled, the parameter ""-u"" can be used to set all values in ""meminfo"" that refer to the swap to 0.

 sudo lxcfs -u /var/lib/lxcfs

## Swap handling
If you noticed LXCFS not showing any SWAP in your container despite
having SWAP on your system, please read this section carefully and look
for instructions on how to enable SWAP accounting for your distribution.

Swap cgroup handling on Linux is very confusing and there just isn't a
perfect way for LXCFS to handle it.

Terminology used below:
 - RAM refers to `memory.usage_in_bytes` and `memory.limit_in_bytes`
 - RAM+SWAP refers to `memory.memsw.usage_in_bytes` and `memory.memsw.limit_in_bytes`

The main issues are:
 - SWAP accounting is often opt-in and, requiring a special kernel boot
   time option (`swapaccount=1`) and/or special kernel build options
   (`CONFIG_MEMCG_SWAP`).

 - Both a RAM limit and a RAM+SWAP limit can be set. The delta however
   isn't the available SWAP space as the kernel is still free to SWAP as
   much of the RAM as it feels like. This makes it impossible to render
   a SWAP device size as using the delta between RAM and RAM+SWAP for that
   wouldn't account for the kernel swapping more pages, leading to swap
   usage exceeding swap total.

 - It's impossible to disable SWAP in a given container. The closest
   that can be done is setting swappiness down to 0 which severly limits
   the risk of swapping pages but doesn't eliminate it.

As a result, LXCFS had to make some compromise which go as follow:
 - When SWAP accounting isn't enabled, no SWAP space is reported at all.
   This is simply because there is no way to know the SWAP consumption.
   The container may very much be using some SWAP though, there's just
   no way to know how much of it and showing a SWAP device would require
   some kind of SWAP usage to be reported. Showing the host value would be
   completely wrong, showing a 0 value would be equallty wrong.

 - Because SWAP usage for a given container can exceed the delta between
   RAM and RAM+SWAP, the SWAP size is always reported to be the smaller of
   the RAM+SWAP limit or the host SWAP device itself. This ensures that at no
   point SWAP usage will be allowed to exceed the SWAP size.

 - If the swappiness is set to 0 and there is no SWAP usage, no SWAP is reported.
   However if there is SWAP usage, then a SWAP device of the size of the
   usage (100% full) is reported. This provides adequate reporting of
   the memory consumption while preventing applications from assuming more
   SWAP is available.
","LXCFS is a small FUSE filesystem written with the intention of making Linux
containers feel more like a virtual machine. When upgrading to a newer version
of `LXcFS` the `lxcfs` binary will not be restarted. Instead it will detect that
a new version of the shared library is available and will reload it. LXCFS
prefers `fuse3` but does work with new enough `Fuse2`versions. It can be
upgraded by deleting the old library file first and loading the new one."
1068,"M. Beyeler (2017). Machine Learning for OpenCV: Intelligent image processing with Python. Packt Publishing Ltd., ISBN 978-178398028-4.","# Machine Learning for OpenCV

[![Google group](https://img.shields.io/badge/Google-Discussion%20group-lightgrey.svg)](https://groups.google.com/d/forum/machine-learning-for-opencv)
[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/mbeyeler/opencv-machine-learning/master)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.833523.svg)](https://doi.org/10.5281/zenodo.833523)

This is the Jupyter notebook version of the following book:

<img src=""https://images-na.ssl-images-amazon.com/images/I/41CKBKW8y4L.jpg"" width=""200"" align=""left"" style=""padding: 1px; border: 1px solid black; margin-right: 5px""/> <br/>
Michael Beyeler <br/>
<a href=""https://www.amazon.com/Machine-Learning-OpenCV-Michael-Beyeler/dp/1783980281"" target=""_blank""><b>Machine Learning for OpenCV</b></a> <br/>
Intelligent Image Processing with Python
<br/><br/>
14 July 2017 <br/>
Packt Publishing Ltd., London, England <br/>
Paperback: 382 pages <br/>
ISBN 978-178398028-4
<br clear=""both""/><br/>

The content is available on [GitHub](https://github.com/mbeyeler/opencv-machine-learning).
The code is released under the [MIT license](https://opensource.org/licenses/MIT).

The book is also available as a two-part video course:
- [Part I: Supervised Learning](https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-opencv-supervised-learning-video) ([Free sample](https://www.packtpub.com/mapt/video/big_data_and_business_intelligence/9781789347357/59952/59953/the-course-overview))
- [Part II: Advanced methods and deep learning](https://www.packtpub.com/big-data-and-business-intelligence/machine-learning-opencv-%E2%80%93-advanced-methods-and-deep-learning-vide) ([Free sample](https://www.packtpub.com/mapt/video/big_data_and_business_intelligence/9781789340525/62127/62128/the-course-overview))

For questions, discussions, and more detailed help please refer to the [Google group](https://groups.google.com/d/forum/machine-learning-for-opencv).

If you use either book or code in a scholarly publication, please cite as:

> M. Beyeler, (2017). Machine Learning for OpenCV. Packt Publishing Ltd., London, England, 380 pages, ISBN 978-178398028-4.

Or use the following bibtex:

```
@book{MachineLearningOpenCV,
	title = {{Machine Learning for OpenCV}},
	subtitle = {{Intelligent image processing with Python}},
	author = {Michael Beyeler},
	year = {2017},
	pages = {380},
	publisher = {Packt Publishing Ltd.},
	isbn = {978-178398028-4}
}
```

Scholarly work referencing this book:
- S Lynch (2018). Image Processing with Python. *Dynamical Systems with Applications using Python*, Springer.
- MQG Quiroz (2018). Inductive Machine Learning with Image Processing for Objects Detection of a Robotic Arm with Raspberry PI. *International Conference on Technology Trends*.
- A Konate (2018). Un aperçu sur quelques méthodes en apprentissage automatique supervisé. *HAL* 01946237.


## Table of Contents

[Preface](notebooks/00.00-Preface.ipynb)

[Foreword by Ariel Rokem](notebooks/00.01-Foreword-by-Ariel-Rokem.ipynb)

1. [A Taste of Machine Learning](notebooks/01.00-A-Taste-of-Machine-Learning.ipynb)

2. [Working with Data in OpenCV](notebooks/02.00-Working-with-Data-in-OpenCV.ipynb)
   - [Dealing with Data Using Python's NumPy Package](notebooks/02.01-Dealing-with-Data-Using-Python-NumPy.ipynb)
   - [Loading External Datasets in Python](notebooks/02.02-Loading-External-Datasets-in-Python.ipynb)
   - [Visualizing Data Using Matplotlib](notebooks/02.03-Visualizing-Data-Using-Matplotlib.ipynb)
   - [Dealing with Data Using OpenCV's TrainData container](notebooks/02.05-Dealing-with-Data-Using-the-OpenCV-TrainData-Container-in-C%2B%2B.ipynb)

3. [First Steps in Supervised Learning](notebooks/03.00-First-Steps-in-Supervised-Learning.ipynb)
   - [Measuring Model Performance with Scoring Functions](notebooks/03.01-Measuring-Model-Performance-with-Scoring-Functions.ipynb)
   - [Understanding the k-NN Algorithm](notebooks/03.02-Understanding-the-k-NN-Algorithm.ipynb)
   - [Using Regression Models to Predict Continuous Outcomes](notebooks/03.03-Using-Regression-Models-to-Predict-Continuous-Outcomes.ipynb)
   - [Applying Lasso and Ridge Regression](notebooks/03.04-Applying-Lasso-and-Ridge-Regression.ipynb)
   - [Classifying Iris Species Using Logistic Regression](notebooks/03.05-Classifying-Iris-Species-Using-Logistic-Regression.ipynb)

4. [Representing Data and Engineering Features](notebooks/04.00-Representing-Data-and-Engineering-Features.ipynb)
   - [Preprocessing Data](notebooks/04.01-Preprocessing-Data.ipynb)
   - [Reducing the Dimensionality of the Data](notebooks/04.02-Reducing-the-Dimensionality-of-the-Data.ipynb)
   - [Representing Categorical Variables](notebooks/04.03-Representing-Categorical-Variables.ipynb)
   - [Representing Text Features](notebooks/04.04-Represening-Text-Features.ipynb)
   - [Representing Images](notebooks/04.05-Representing-Images.ipynb)

5. [Using Decision Trees to Make a Medical Diagnosis](notebooks/05.00-Using-Decision-Trees-to-Make-a-Medical-Diagnosis.ipynb)
   - [Building Our First Decision Tree](notebooks/05.01-Building-Our-First-Decision-Tree.ipynb)
   - [Using Decision Trees to Diagnose Breast Cancer](notebooks/05.02-Using-Decision-Trees-to-Diagnose-Breast-Cancer.ipynb)
   - [Using Decision Trees for Regression](notebooks/05.03-Using-Decision-Trees-for-Regression.ipynb)

6. [Detecting Pedestrians with Support Vector Machines](notebooks/06.00-Detecting-Pedestrians-with-Support-Vector-Machines.ipynb)
   - [Implementing Your First Support Vector Machine](notebooks/06.01-Implementing-Your-First-Support-Vector-Machine.ipynb)
   - [Detecting Pedestrians in the Wild](notebooks/06.02-Detecting-Pedestrians-in-the-Wild.ipynb)
   - [Additional SVM Exercises](notebooks/06.03-Additional-SVM-Exercises.ipynb)

7. [Implementing a Spam Filter with Bayesian Learning](notebooks/07.00-Implementing-a-Spam-Filter-with-Bayesian-Learning.ipynb)
   - [Implementing Our First Bayesian Classifier](notebooks/07.01-Implementing-Our-First-Bayesian-Classifier.ipynb)
   - [Classifying E-Mails Using Naive Bayes](notebooks/07.02-Classifying-Emails-Using-Naive-Bayes.ipynb)

8. [Discovering Hidden Structures with Unsupervised Learning](notebooks/08.00-Discovering-Hidden-Structures-with-Unsupervised-Learning.ipynb)
   - [Understanding k-Means Clustering](notebooks/08.01-Understanding-k-Means-Clustering.ipynb)
   - [Compressing Color Images Using k-Means](notebooks/08.02-Compressing-Color-Images-Using-k-Means.ipynb)
   - [Classifying Handwritten Digits Using k-Means](notebooks/08.03-Classifying-Handwritten-Digits-Using-k-Means.ipynb)
   - [Implementing Agglomerative Hierarchical Clustering](notebooks/08.04-Implementing-Agglomerative-Hierarchical-Clustering.ipynb)

9. [Using Deep Learning to Classify Handwritten Digits](notebooks/09.00-Using-Deep-Learning-to-Classify-Handwritten-Digits.ipynb)
   - [Understanding Perceptrons](notebooks/09.01-Understanding-Perceptrons.ipynb)
   - [Implementing a Multi-Layer Perceptron in OpenCV](notebooks/09.02-Implementing-a-Multi-Layer-Perceptron-in-OpenCV.ipynb)
   - [Getting Acquainted with Deep Learning](notebooks/09.03-Getting-Acquainted-with-Deep-Learning.ipynb)
   - [Training an MLP in OpenCV to Classify Handwritten Digits](notebooks/09.04-Training-an-MLP-in-OpenCV-to-Classify-Handwritten-Digits.ipynb)
   - [Training a Deep Neural Net to Classify Handwritten Digits Using Keras](notebooks/09.05-Training-a-Deep-Neural-Net-to-Classify-Handwritten-Digits-Using-Keras.ipynb)

10. [Combining Different Algorithms Into an Ensemble](notebooks/10.00-Combining-Different-Algorithms-Into-an-Ensemble.ipynb)
    - [Understanding Ensemble Methods](notebooks/10.01-Understanding-Ensemble-Methods.ipynb)
    - [Combining Decision Trees Into a Random Forest](notebooks/10.02-Combining-Decision-Trees-Into-a-Random-Forest.ipynb)
    - [Using Random Forests for Face Recognition](notebooks/10.03-Using-Random-Forests-for-Face-Recognition.ipynb)
    - [Implementing AdaBoost](notebooks/10.04-Implementing-AdaBoost.ipynb)
    - [Combining Different Models Into a Voting Classifier](notebooks/10.05-Combining-Different-Models-Into-a-Voting-Classifier.ipynb)

11. [Selecting the Right Model with Hyper-Parameter Tuning](notebooks/11.00-Selecting-the-Right-Model-with-Hyper-Parameter-Tuning.ipynb)
    - [Evaluating a Model](notebooks/11.01-Evaluating-a-Model.ipynb)
    - [Understanding Cross-Validation, Bootstrapping, and McNemar's Test](notebooks/11.02-Understanding-Cross-Validation-Bootstrapping-and-McNemar's-Test.ipynb)
    - [Tuning Hyperparameters with Grid Search](notebooks/11.03-Tuning-Hyperparameters-with-Grid-Search.ipynb)
    - [Chaining Algorithms Together to Form a Pipeline](notebooks/11.04-Chaining-Algorithms-Together-to-Form-a-Pipeline.ipynb)

12. [Wrapping Up](notebooks/12.00-Wrapping-Up.ipynb)



## Running the Code

There are at least two ways you can run the code:
- Using [Binder](https://mybinder.org/v2/gh/mbeyeler/opencv-machine-learning/master) (no installation required).
- Using Jupyter Notebook on your local machine.

The code in this book was tested with Python 3.5, although Python 3.6 and 2.7 should work as well. 


### Using Binder

[Binder](http://www.mybinder.org) allows you to run Jupyter notebooks in an interactive Docker container.
No installation required!

Launch the project: [mbeyeler/opencv-machine-learning](https://mybinder.org/v2/gh/mbeyeler/opencv-machine-learning/master)



### Using Jupyter Notebook

You basically want to follow the installation instructions in Chapter 1 of the book.

In short:

1. Download and install [Python Anaconda](https://www.continuum.io/downloads).
   On Unix, when asked if the Anaconda path should be added to your `PATH` variable, choose yes. Then either open a new terminal or run `$ source ~/.bashrc`.

2. Fork and clone the GitHub repo:
   - Click the
     [`Fork`](https://github.com/mbeyeler/opencv-machine-learning#fork-destination-box)
     button in the top-right corner of this page.
   - Clone the repo, where `YourUsername` is your actual GitHub user name:

   ```
   $ git clone https://github.com/YourUsername/opencv-machine-learning
   $ cd opencv-machine-learning
   ```
   
   - Add the following to your remotes:
   ```
   $ git remote add upstream https://github.com/mbeyeler/opencv-machine-learning
   ```
   
3. Add Conda-Forge to your trusted channels (to simplify installation of OpenCV on Windows platforms):

   ```
   $ conda config --add channels conda-forge
   ```

4. Create a conda environment for Python 3 with all required packages:

   ```
   $ conda create -n Python3 python=3.6 --file requirements.txt
   ```

5. Activate the conda environment.
   On Linux / Mac OS X:

   ```
   $ source activate Python3
   ```

   On Windows:

   ```
   $ activate Python3
   ```

   You can learn more about conda environments in the
   [Managing Environments](http://conda.pydata.org/docs/using/envs.html)
   section of the conda documentation.

6. Launch Jupyter notebook:

   ```
   $ jupyter notebook
   ```

   This will open up a browser window in your current directory.
   Navigate to the folder `opencv-machine-learning`.
   The README file has a table of contents.
   Else navigate to the `notebooks` folder, click on the notebook of your choice,
   and select `Kernel > Restart & Run All` from the top menu.
   
   
## Getting the latest code

If you followed the instructions above and:
- forked the repo,
- cloned the repo,
- added the `upstream` remote repository,

then you can always grab the latest changes by running a git pull:

```
$ cd opencv-machine-learning
$ git pull upstream master
```

## Errata

The following errata have been reported that apply to the print version of the book. Some of these are typos, others are bugs in the code. Please note that all known bugs have been fixed in the code of this repository.
- p.32: `Out[15]` should read '3' instead of 'int_arr[3]'.
- p.32: `Out[22]` should read `array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])` instead of `array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])`.
- p.33: In the sentence: ""Here, the first dimension defines the color channel..."", the order of color channels should read ""blue, green, and red in OpenCV"" instead of ""red, green, blue, green, and red"".
- p.36: The range of x values should read ""0 <= x <= 10"" instead of ""0 <= x < 10"", since `np.linspace` by default includes the endpoint.
- p.51: `In [15]` shoud read `precision = true_positive / (true_positive + false_positive)` instead of `precision = true_positive / (true_positive + true_negative)`.
- p.51: `Out[15]` should read 0.2 instead of 1.0.
- p.72: `In [6]` should read `ridgereg = linear_model.Ridge()` instead of `ridgereg = linear_model.RidgeRegression()`.
- p.85: The first line of `In [8]` should read `min_max_scaler = preprocessing.MinMaxScaler(feature_range=(-10,10))` instead of `min_max_scaler = preprocessing.MinMaxScaler(feature_range (-10,10))`.
- p.91:  The last paragraph should read `We also specify an empty array, np.array([]), for the mean argument, which tells OpenCV to  compute the mean from the data:` instead of `We also specify an empty array, np.array([]), for the mask argument, which tells OpenCV to use all data points in the feature matrix:`.
- p.112: `In [3]` should read `vec.get_feature_names()[:5]` instead of `function:vec.get_feature_names()[:5]`.
- p.120: `In [16]` should read `dtree = cv2.ml.DTrees_create()` instead of `dtree = cv2.ml.dtree_create()`.
- p.122: `In [26]` should read `with open(""tree.dot"", 'w'): f = tree.export_graphviz(dtc, out_file=f, feature_names=vec.get_feature_names(), class_names=['A', 'B', 'C', 'D'])` instead of `with open(""tree.dot"", 'w'): f = tree.export_graphviz(clf, out_file=f)`. Also, the second line should be indented.
- p.147: The first occurrences of `X_hypo = np.c_[xx.ravel().astype(np.float32), yy.ravel().astype(np.float32)]` and `_, zz = svm.predict(X_hypo)` should be removed, as they mistakenly appear twice.
- p.193: `In [28]` is missing `from sklearn import metrics`.
- p.197: The sentence right below `In [3]` should read ""Then we can pass the preceding data matrix (`X`) to `cv2.kmeans`"", not `cv2.means`.
- p.201: Indentation in bullet points 2-4 are wrong. Please refer to the Jupyter notebook for the correct indentation.
- p.228: The last sentence in the middle paragraph should read ""[...] thus hopefully classifying the sample as y_{hat}=+1"" instead of ""[...] thus hopefully classifying the sample as y_{hat}=-1"".
- p.230: `In [2]` has wrong indentation: `class Perceptron(object)` correctly has indentation level 1, but `def __init__` should have indentation level 2, and the two commands `self.lr = lr; self.n_iter = n_iter` should have indentation level 3.
- p.260: `In [5]` should read `from keras.models import Sequential` instead of `from keras.model import Sequential`.
- p.260: `In [6]` should read `model.add(Conv2D(n_filters, (kernel_size[0], kernel_size[1]), padding='valid', input_shape=input_shape))` instead of `model.add(Convolution2D(n_filters, kernel_size[0], kernel_size[1], border_mode='valid', input_shape=input_shape))`.
- p.260: `In [8]` should read `model.add(Conv2D(n_filters, (kernel_size[0], kernel_size[1])))` instead of `model.add(Convolution2D(n_filters, (kernel_size[0], kernel_size[1])))`.
- p.261: `In [12]` should read `model.fit(X_train, Y_train, batch_size=128, epochs=12, verbose=1, validation_data=(X_test, Y_test))` instead of `model.fit(X_train, Y_train, batch_size=128, nb_epoch=12, verbose=1, validation_data=(X_test, Y_test))`.
- p.275, in bullet point 2 it should say `ret = classifier.predict(X_hypo)` instead of `zz = classifier.predict(X_hypo); zz = zz.reshape(xx.shape)`.
- p.285: `plt.imshow(X[i, :].reshape((64, 64)), cmap='gray')` should be indented so that it is aligned with the previous line.
- p.288: `In [14]` should read `_, y_hat = rtree.predict(X_test)` instead of `_, y_hat = tree.predict(X_test)`.
- p.305: The first paragraph should read ""...and the remaining folds (1, 2, and 4) for training"" instead of ""...and the remaining folds (1, 2, and 4) for testing"".
- p.306: `In [2]` should read `from sklearn.model_selection import train_test_split` instead of `from sklearn.model_selection import model_selection`.
- p.310: `In [18]` should read `knn.train(X_boot, cv2.ml.ROW_SAMPLE, y_boot)` instead of `knn.train(X_train, cv2.ml.ROW_SAMPLE, y_boot)`.
- p.311: `In [20]` should have a line `model.train(X_boot, cv2.ml.ROW_SAMPLE, y_boot)` instead of `knn.train(X_boot, cv2.ml.ROW_SAMPLE, y_boot)`, as well as `_, y_hat = model.predict(X_oob)` instead of `_, y_hat = knn.predict(X_oob)`.
- p.328: `In [5]` is missing the statement `from sklearn.preprocessing import MinMaxScaler`.
- p.328: `In [5]` should have a line `pipe = Pipeline([(""scaler"", MinMaxScaler()), (""svm"", SVC())])` instead of `pipe = Pipeline([""scaler"", MinMaxScaler(), (""svm"", SVC())])`.


## Acknowledgment

This book was inspired in many ways by the following authors and their corresponding publications:
- Jake VanderPlas, Python Data Science Handbook: Essential Tools for Working with Data. O'Reilly, ISBN 978-149191205-8, 2016, https://github.com/jakevdp/PythonDataScienceHandbook
- Andreas Muller and Sarah Guido, Introduction to Machine Learning with Python: A Guide for Data Scientists. O'Reilly, ISBN
978-144936941-5, 2016, https://github.com/amueller/introduction_to_ml_with_python
- Sebastian Raschka, Python Machine Learning. Packt, ISBN 978-178355513-0, 2015, https://github.com/rasbt/python-machine-learning-book

These books all come with their own open-source code - check them out when you get a chance!
","This is the Jupyter notebook version of the following book. The book is also
available as a two-part video course. The code is released under the [MIT
license. If you use either book or code in a scholarly publication, please cite
as: M. Beyeler, (2017) Machine Learning for OpenCV."
3165,"Code, exercises and tutorials of my personal blog ! 📝","# Machine Learning Tutorials and Articles

<img alt=""GitHub stars"" src=""https://img.shields.io/github/stars/maelfabien/Machine_Learning_Tutorials.svg?style=social""> <img alt=""GitHub forks"" src=""https://img.shields.io/github/forks/maelfabien/Machine_Learning_Tutorials.svg?style=social""> <img alt=""GitHub watchers"" src=""https://img.shields.io/github/watchers/maelfabien/Machine_Learning_Tutorials.svg?style=social""> <img alt=""GitHub followers"" src=""https://img.shields.io/github/followers/maelfabien.svg?style=social""> <img alt=""GitHub commit activity"" src=""https://img.shields.io/github/commit-activity/y/maelfabien/Machine_Learning_Tutorials.svg""> <img alt=""GitHub contributors"" src=""https://img.shields.io/github/contributors-anon/maelfabien/Machine_Learning_Tutorials.svg""> <img alt=""PyPI - Python Version"" src=""https://img.shields.io/pypi/pyversions/3.svg"">

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/mf_logo_short.jpg"" alt=""Illustration"" width=""50px""/>

In this repository, I'm uploading code, notebooks and articles from my personal blog : https://maelfabien.github.io/. Don't hesitate to ⭐ the repo if you enjoy my work ! New articles are being published weekly !

🚀 I recently started a newsletter in which I gather some cool articles I wrote on a topic, interesting Github repositories, projects, papers and more! I’ll try to send 1 to 2 emails per month. If you want to stay in the loop, just click here : http://eepurl.com/gyYzi5 

**NEW: I'm looking for motivated Data Scientists to help me build high environmental impact algorithms (CV essentially). Please contact me if you're interested (from my website, contact section)**

## Table of Content :
- [CheatSheets](https://github.com/maelfabien/Machine_Learning_Tutorials#machine-learning-cheatsheet)
- [Latest Articles](https://github.com/maelfabien/Machine_Learning_Tutorials/#latest-articles)
- [Machine Learning](https://github.com/maelfabien/Machine_Learning_Tutorials#machine-learning)
- [Deep Learning](https://github.com/maelfabien/Machine_Learning_Tutorials#deep-learning)
- [Data Engineering](https://github.com/maelfabien/Machine_Learning_Tutorials#data-engineering)
- [Written for other blogs](https://github.com/maelfabien/Machine_Learning_Tutorials#written-for-other-blogs)
- [Medium Articles](https://github.com/maelfabien/Machine_Learning_Tutorials#medium-articles)

<br>

First of all, if you're not familiar with the key concepts of machine learrning, make sure to check this first article :
https://maelfabien.github.io/machinelearning/ml_base/

The repository is organized the following way :
- articles and tutorials are posted by category
- there is a link to the article in question with the read time specified
- the is a link to the code folder for each article

You would like to work on an article with me ? Or you would like me to work on a specific topic ? Feel free to reach out ! (mael.fabien@gmail.com)

# Machine Learning Cheatsheet :

For the moment, these cheat sheets are written manually. I'd like to create a visual content later that would both dive in the maths and illustrate clearly each algorithm.

1. Supervised Learning

<a href=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/supervised.pdf""><img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/sup.png?"" alt=""Illustration"" width=""220px""/></a>

2. Unsupervised Learning 

<a href=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/unsupervised.pdf""><img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/unsup.png?"" alt=""Illustration"" width=""220px""/></a>

<br>

# Projects

I have made a series of projects, all of which are available on my blog : https://maelfabien.github.io/portfolio/#

<a href=""https://maelfabien.github.io/portfolio/#"">
<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/new_proj.png"" alt=""Illustration""/>
</a>

# Latest articles

[SP - Voice Gender Detection web application](https://maelfabien.github.io/machinelearning/Speech11/#): How to extract relevant features and build a voice gender detection application using MFCC, GMMs and a provided dataset.

[SP - Sound Visualization (3/3)](https://maelfabien.github.io/machinelearning/Speech10/#): Dive into spectrograms, chromagrams, tempograms, spectral power density and more...

[SP - Sound Feature Extraction (2/3)](https://maelfabien.github.io/machinelearning/Speech9/#): An overview with a Python implementation of the different sound features to extract.

[SP - Introduction to Voice Processing in Python (1/3)](https://maelfabien.github.io/machinelearning/Speech8/#): Summary of the book ""Voice Computing with Python"" with concepts, code and examples.

[SP - Building a Voice Activity Detection web application](https://maelfabien.github.io/machinelearning/Speech4/#) : Voice detection can be used to start a voice assistant or in emergency cases for example. Here's how to implement it using simple methods.

[CV - Implementing YoloV3 for Object Detection](https://maelfabien.github.io/computervision/yolo/) : Learn how to implement YoloV3 and detect objects on your images and videos.

[NLP - Easy Question Answering with AllenNLP](https://maelfabien.github.io/machinelearning/NLP_9/) : Understand the core concepts and create a simple example of Question Answering.

[NLP - Data Augmentation in NLP](https://maelfabien.github.io/machinelearning/NLP_8/) : Details of the implementation of “Easy Data Augmentation” paper.

[NLP - Character-level LSTMs to predict gender of first names](https://maelfabien.github.io/machinelearning/NLP_7/) : 90% accuracy on predictiong the gender of French and US first names.

[NLP - Few Shot Text Classification](https://maelfabien.github.io/machinelearning/NLP_5) : Implementation of a simple paper that leverages pre-trained models for few shot text classification.

[NLP - Improved Few Shot Text Classification](https://maelfabien.github.io/machinelearning/NLP_6) : Improving previous results with Data Augmentation and more complex models.

[RL - Introduction to Reinforcement Learning](https://maelfabien.github.io/rl/RL_1) : An introduction to the basic building blocks of reinforcement learning.

[RL - Markov Decision Process](https://maelfabien.github.io/rl/RL_2/) : Overview of Markov Decision Process and Bellman Equation.

[RL - Planning by Dynamic Programming](https://maelfabien.github.io/rl/RL_3/) : Introduction to Dynamic Programming, including Policy and Value Iteration.

[NLP - I trained a Neural Network to speak like me](https://maelfabien.github.io/machinelearning/NLP_4/) : Having written over 100 articles, I trained a NN to write articles just like me.

[DL - How do Neural Networks learn?](https://maelfabien.github.io/deeplearning/feed/) : Dive into feedforward process and back-propagation.

<center><a href=""https://maelfabien.github.io/year-archive/#"">See More</a></center>

<br>
<br>

<img src=""https://github.com/maelfabien/maelfabien.github.io/blob/master/assets/images/ml_head.jpg"" alt=""Illustration""/>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/s_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| The linear regression model (1/2) | 14mn | [here](https://maelfabien.github.io/statistics/linreg/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/2-Statistics/LinearRegression) |
| The linear regression model (3/2) | 10mn | [here](https://maelfabien.github.io/statistics/linreg2/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/2-Statistics/LinearRegression) |
| Basics of Statistical Hypothesis Testing | 5mn | [here](https://maelfabien.github.io/statistics/Tests/) | --- |
| The Logistic Regression | 4mn | [here](https://maelfabien.github.io/statistics/linreg3/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/2-Statistics/LogisticRegression) |
| Statistics in Matlab | 4mn | [here](https://maelfabien.github.io/statistics/matlab/) | --- |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/sup_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| The Basics of Machine Learning | 4mn | [here](https://maelfabien.github.io/machinelearning/ml_base/) | --- |
| Bayes Classifier | 1mn | [here](https://maelfabien.github.io/machinelearning/bayes/) | --- |
| Linear Discriminant Analysis | 3mn | [here](https://maelfabien.github.io/machinelearning/LDA/) | --- |
| Adaboost and Boosting | 7mn | [here](https://maelfabien.github.io/machinelearning/adaboost/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/AdaBoost) |
| Gradient Boosting Regression | 6mn | [here](https://maelfabien.github.io/machinelearning/GradientBoost/#) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GradientBoost) |
| Gradient Boosting Classification | 3mn | [here](https://maelfabien.github.io/machinelearning/GradientBoostC/#) | --- |
| Large Scale Kernel Methods for SVM | 9mn | [here](https://maelfabien.github.io/machinelearning/largescale/#svm-classifier) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/LargeScaleKernel) |
| Anomaly Detection | 3mn | [here](https://maelfabien.github.io/machinelearning/anomaly/) | --- |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/ts_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to Time Series | 4mn | [here](https://maelfabien.github.io/statistics/TimeSeries1/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/2-Statistics/TimeSeries) |
| Key concepts of Time Series | 4mn | [here](https://maelfabien.github.io/statistics/TimeSeries2/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/2-Statistics/TimeSeries) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/mc_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Markov Chains | 9mn | [here](https://maelfabien.github.io/machinelearning/HMM_1/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/HMM) |
| Hidden Markov Models | 6mn | [here](https://maelfabien.github.io/machinelearning/HMM_2/) | --- |
| Build a language recognition app from scratch | 10mn | [here](https://maelfabien.github.io/machinelearning/HMM_3/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/HMM) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/graph_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to Graph Mining | 5mn | [here](https://maelfabien.github.io/machinelearning/graph_1/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GraphMining) |
| Graph Analysis | 4mn | [here](https://maelfabien.github.io/machinelearning/graph_2/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GraphMining) |
| Graph Algorithms | 11mn | [here](https://maelfabien.github.io/machinelearning/graph_3/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GraphMining) |
| Graph Learning | 8mn | [here](https://maelfabien.github.io/machinelearning/graph_4/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GraphMining) |
| Graph Embedding | 4mn | [here](https://maelfabien.github.io/machinelearning/graph_5/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/GraphMining) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/opt_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| GridSearch vs. Randomized Search | 2mn | [here](https://maelfabien.github.io/machinelearning/GridRand/) | --- |
| AutoML with h2o | 6mn | [here](https://maelfabien.github.io/machinelearning/AutoML/#) | --- |
| Bayesian Hyperparameter Optimization | 7mn | [here](https://maelfabien.github.io/machinelearning/HyperOpt/#) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/3-MachineLearning/BayesianHyperOpt) |
| Machine Learning Explainability | 12mn | [here](https://maelfabien.github.io/machinelearning/Explainability/#) | --- |
<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/dv_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to Data Viz | 12mn | [here](https://maelfabien.github.io/machinelearning/Dataviz/) | --- |
| Visual Recommendation System | 4mn | [here](https://maelfabien.github.io/machinelearning/VizReco/#) | --- |
| Interactive graphs in Python with Altair | 5mn | [here](https://maelfabien.github.io/machinelearning/Altair/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/6-DataViz/Altair) |
| Dynamic plots with BQ-Plot | --- | --- | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/6-DataViz/BQPlot) |
| An interactive tool with Altair | --- | [here](https://maelfabien.github.io/tsne) | --- |
| An interactive tool with D3.js | --- | [here](https://maelfabien.github.io/viz) | --- |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/on_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to Online Learning | 5mn | [here](https://maelfabien.github.io/machinelearning/Online/) | --- |
| Linear Classification | 1mn | [here](https://maelfabien.github.io/machinelearning/Online2/) | --- |

<br>

<img src=""https://github.com/maelfabien/maelfabien.github.io/blob/master/assets/images/dl_head.jpg"" alt=""Illustration""/>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/tdl_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| The Rosenbaltt's Perceptron | 8mn | [here](https://maelfabien.github.io/deeplearning/Perceptron/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/Perceptron) |
| Multilayer Perceptron (MLP) | 5mn | [here](https://maelfabien.github.io/deeplearning/mlp/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/MultilayerPerceptron) |
| Prevent Overfitting of Neural Netorks | 6mn | [here](https://maelfabien.github.io/deeplearning/regu/) | --- |
| Full introduction to Neural Nets | 6mn | [here](https://maelfabien.github.io/deeplearning/intro/) | --- |
| Convolutional Neural Network | 6mn | [here](https://maelfabien.github.io/deeplearning/cnn/#) | --- |
| How do Neural Networks learn? | 3mn | [here](https://maelfabien.github.io/deeplearning/feed/) | --- |
| Activation functions in DL | 3mn | [here](https://maelfabien.github.io/deeplearning/act/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/Activations) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/arc_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Inception Architecture in Keras | 2mn | [here](https://maelfabien.github.io/deeplearning/inception/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/Inception) |
| Build an autoencoder using Keras functional API | 5mn | [here](https://maelfabien.github.io/deeplearning/autoencoder/) | --- |
| XCeption Architecture | 5mn | [here](https://maelfabien.github.io/deeplearning/xception/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/Xception) |
| GANs on the MNIST dataset | --- | --- | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/4-DeepLearning/GANs) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/cv_head.png"" alt=""Illustration""/>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/cv_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Build an Emotion Recognition WebApp from scratch | 8mn | [here](https://maelfabien.github.io/project/poleemploi/) | [here](https://github.com/maelfabien/Multimodal-Emotion-Recognition) |
| A full guide to Face, Mouth and Eyes Real Time detection | 16mn | [here](https://maelfabien.github.io/tutorials/face-detection/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/1_Computer%20Vision/01-FaceDetection) |
| How to use OpenPose on MacOS ? | 3mn | [here](https://maelfabien.github.io/tutorials/open-pose/) | --- |
| Introduction to Computer Vision | 1mn | [here](https://maelfabien.github.io/computervision/cv_1/) | --- |
| Image Filtering and Image Gradients | 5mn | [here](https://maelfabien.github.io/computervision/cv_2/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/1_Computer%20Vision/04-ImageFiltering) |
| Advanced Filtering and Image Transformation | 5mn | [here](https://maelfabien.github.io/computervision/cv_3/#) | --- |
| Image Features, Panorama, Matching | 5mn | [here](https://maelfabien.github.io/computervision/cv_4/#) | --- |
| Implementing YoloV3 for Object Detection | 3mn | [here](https://maelfabien.github.io/computervision/yolo/) | --- |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/nlp_head.png"" alt=""Illustration""/>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/nlp_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to NLP | 1mn | [here](https://maelfabien.github.io/machinelearning/NLP_0/#) | --- |
| Text Pre-Processing | 8mn | [here](https://maelfabien.github.io/machinelearning/NLP_1/) | --- |
| Text Embedding with BoW and Tf-Idf  | 5mn | [here](https://maelfabien.github.io/machinelearning/NLP_2/) | --- |
| Text Embedding with Word2Vec | 6mn | [here](https://maelfabien.github.io/machinelearning/NLP_3/) | --- |
| I trained a Neural Network to speak like me | 8mn | [here](https://maelfabien.github.io/machinelearning/NLP_4/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/5-NLP/SpeakLikeMe) |
| I trained a Neural Network to speak like me | 8mn | [here](https://maelfabien.github.io/machinelearning/NLP_4/) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/5-NLP/SpeakLikeMe) |
| Few Shot Text Classification | 10mn | [here](https://maelfabien.github.io/machinelearning/NLP_5) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/5-NLP/FewShotClassification) | 
| Improved Few Shot Text Classification | 9mn | [here](https://maelfabien.github.io/machinelearning/NLP_6) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/5-NLP/FewShotClassification) |
| Predicting Gender of First Names | 7mn | [here](https://maelfabien.github.io/machinelearning/NLP_7) | [here](https://github.com/maelfabien/Machine_Learning_Tutorials/tree/master/5-NLP/GenderClassification) |
| Data Augmentation in NLP | 3mn | [here](https://maelfabien.github.io/machinelearning/NLP_8) | --- |
| Easy Question Answering with AllenNLP | 4mn | [here](https://maelfabien.github.io/machinelearning/NLP_9) | --- |

<br>

<img src=""https://github.com/maelfabien/maelfabien.github.io/blob/master/assets/images/rl_head.jpg"" alt=""Illustration""/>

<img src=""https://github.com/maelfabien/maelfabien.github.io/blob/master/assets/images/trl_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article | Code Folder |
| --- | --- | --- | --- |
| Introduction to Reinforcement Learning | 6mn | [here](https://maelfabien.github.io/rl/RL_1) | --- |
| Markov Decision Process | 7mn | [here](https://maelfabien.github.io/rl/RL_2/) | --- |
| Planning by Dynamic Programming | 4mn | [here](https://maelfabien.github.io/rl/RL_3/) | --- |

<br>

<img src=""https://github.com/maelfabien/maelfabien.github.io/blob/master/assets/images/bgd_head.jpg"" alt=""Illustration""/>

Two general articles :

1. Understanding Computer Components (6mn read)
https://maelfabien.github.io/bigdata/comp_components/

2. Useful Bash commands (1mn read) 
https://maelfabien.github.io/bigdata/Terminal/

3. Making your code production ready (1mn read)
https://maelfabien.github.io/bigdata/Code/

<br>


<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/hadoop_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| Introduction to Hadoop | 4mn | [here](https://maelfabien.github.io/bigdata/hadoop/) |
| MapReduce | 3mn | [here](https://maelfabien.github.io/bigdata/MapReduce/#) |
| HDFS | 2mn | [here](https://maelfabien.github.io/bigdata/HDFS/#) |
| VMs in Virtual Box | 1mn | [here](https://maelfabien.github.io/bigdata/VM/#) |
| Hadoop with the HortonWorks Sandbox | 2mn | [here](https://maelfabien.github.io/bigdata/HortonWorks/) |
| Load and move files to HDFS | 2mn | [here](https://maelfabien.github.io/bigdata/HDFS_2/) |
| Launch a MapReduce Job | 2mn | [here](https://maelfabien.github.io/bigdata/MRJob/) |
| MapReduce Jobs in Python | 3mn | [here](https://maelfabien.github.io/bigdata/MRJobP/) |
| MapReduce Job in Python locally | 1mn | [here](https://maelfabien.github.io/bigdata/MRH/) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/spark_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| Introduction to Spark | 6mn | [here](https://maelfabien.github.io/bigdata/spark1/) |
| Install Spark-Scala and PySpark | 1mn | [here](https://maelfabien.github.io/bigdata/spark2/) |
| Discover Spark-Scala | 2mn | [here](https://maelfabien.github.io/bigdata/spark3/#) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/nosql_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| A No-SQL project from scratch | 8mn | [here](https://maelfabien.github.io/project/nosql_recap/) |
| Big (Open) Data, the GDelt project | 2mn | [here](https://maelfabien.github.io/bigdata/zeppelin-GDELT/) |
| Install Zeppelin locally | 1mn | [here](https://maelfabien.github.io/bigdata/zeppelin_local/) |
| Run Zeppelin on AWS EMR | 4mn | [here](https://maelfabien.github.io/bigdata/zeppelin_emr/) |
| Work with S3 buckets | 1mn | [here](https://maelfabien.github.io/bigdata/storage/) |
| Launch and access AWS EC2 instances | 2mn | [here](https://maelfabien.github.io/bigdata/EC2/) |
| Install Apache Cassandra on EC2 Cluster | 2mn | [here](https://maelfabien.github.io/bigdata/EC2_Cassandra/) |
| Install Zookeeper on EC2 instances | 3mn | [here](https://maelfabien.github.io/bigdata/ZK/) |
| Build an ETL in Scala | 3mn | [here](https://maelfabien.github.io/bigdata/Scala/) |
| Move Scala Dataframes to Cassandra | 2mn | [here](https://maelfabien.github.io/bigdata/Scala_Cassandra/) |
| Move Scala Dataframes to Cassandra | 2mn | [here](https://maelfabien.github.io/bigdata/Scala_Cassandra/) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/aws_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| AWS Cloud Concepts | 2mn | [here](https://maelfabien.github.io/bigdata/cloud_concept/) |
| AWS Core Services | 1mn | [here](https://maelfabien.github.io/bigdata/core_services/) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/gcp_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| TPU Survival Guide on Colab | 8mn | [here](https://maelfabien.github.io/bigdata/ColabTPU/) |
| Store files on Google Cloud and Colab | 1mn | [here](https://maelfabien.github.io/bigdata/ColabDrive/) |
| TPU Survival Guide on Colab | 8mn | [here](https://maelfabien.github.io/bigdata/ColabTPU/) |
| Introduction to GCP (Week 1 Module 1) | 6mn | [here](https://maelfabien.github.io/bigdata/gcps_1/) |
| Lab - Instance VM + Cloud Storage| 3mn | [here](https://maelfabien.github.io/bigdata/gcps-2/) |
| Lab - BigQuery Public Datasets| 1mn | [here](https://maelfabien.github.io/bigdata/gcps-3/) |
| Introduction to Recommendation Systems (Week 1 Module 2)  | 4mn | [here](https://maelfabien.github.io/bigdata/gcps_4/) |
| Run Spark jobs on Cloud DataProc (Week 1 Module 2) | 2mn | [here](https://maelfabien.github.io/bigdata/gcps_5/) |
| Lab - Recommend products using Cloud SQL and SparkML | 6mn | [here](https://maelfabien.github.io/bigdata/gcps_6/) |
| Run ML models in SQL with BigQuery ML (Week 1 Module 3) | 6mn | [here](https://maelfabien.github.io/bigdata/gcps_7/) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/elk_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| Introduction to ElasticStack | 1mn | [here](https://maelfabien.github.io/bigdata/ElasticStack/) |
| Getting Started with ElasticSearch and Kibana | 7mn | [here](https://maelfabien.github.io/bigdata/ElasticCloud/) |
| Install and run Kibana locally | 1mn | [here](https://maelfabien.github.io/bigdata/Elasticsearch/) |
| Working with DevTools in ElasticSearch | 9mn | [here](https://maelfabien.github.io/bigdata/DevTools/) |
| Working with DevTools in ElasticSearch | 9mn | [here](https://maelfabien.github.io/bigdata/DevTools/) |

<br>

<img src=""https://github.com/maelfabien/Machine_Learning_Tutorials/blob/master/Images/neo_head.jpg"" alt=""Illustration""/>

| Article Title | Read Time | Article |
| --- | --- | --- |
| Introduction to Graph Databases | 1mn | [here](https://maelfabien.github.io/bigdata/Neo4J/) |
| A day at Neo4J GraphTour | 7mn | [here](https://maelfabien.github.io/bigdata/Neo4J_gt/) |

<br>


# Written for other blogs

1. [Who's the painter? - For explorium.ai](https://www.explorium.ai/blog/whos-the-painter/) : An illustration of how data enrichment and feature engineering can improve a model.

2. [Machine Learning Interpretability and Explainability (1/2) - For explorium.ai](https://www.explorium.ai/blog/interpretability-and-explainability-part-1/) : An introduction to interpretable models with code and examples.

3. [Machine Learning Interpretability and Explainability (2/2) - For explorium.ai](https://www.explorium.ai/blog/interpretability-and-explainability-part-2/) : An introduction to explainability in Machine Learning with code and examples.

4. [A guide to Face Detection - For digitalminds.io](https://www.digitalminds.io/blog/a_guide_to_face_detection_in_python) : An overview of the different techniques face Face Detection in Python (with code).

5. [Modéliser des distributions avec Python (French) - For Stat4Decision](https://www.stat4decision.com/fr/distribution-donnees-python/): Distribution fitting web application with Streamlit.

6. [Introduction au Traitement Automatique de Language Naturel (TAL) (French) - For Stat4Decision](https://www.stat4decision.com/fr/traitement-langage-naturel-francais-tal-nlp/)

# Medium Articles

1. Boosting and Adaboost clearly explained : https://towardsdatascience.com/boosting-and-adaboost-clearly-explained-856e21152d3e

2. A guide to Face Detection in Python: https://towardsdatascience.com/a-guide-to-face-detection-in-python-3eab0f6b9fc1

3. Markov Chains and HMMs: https://towardsdatascience.com/markov-chains-and-hmms-ceaf2c854788

4. Introduction to Graphs (Part 1): https://towardsdatascience.com/introduction-to-graphs-part-1-2de6cda8c5a5

5. Graph Algorithms (Part 2): https://towardsdatascience.com/graph-algorithms-part-2-dce0b2734a1d

6. Graph Algorithms (Part 3): https://towardsdatascience.com/learning-in-graphs-with-python-part-3-8d5513eef62d

7. I trained a neural network to speak like me: https://towardsdatascience.com/i-trained-a-network-to-speak-like-me-9552c16e2396

####
Stay tuned :)
","New articles are being published weekly. I recently started a newsletter in
which I gather some cool articles I wrote on a topic, interesting Github
repositories, projects, and more. I’ll try to send 1 to 2 emails per month. I'm
looking for motivated Data Scientists to help me build high environmental impact
algorithms."
1549,mirror of https://gitlab.com/minds/minds,"# Minds

Minds is an open-source, encrypted and reward-based social networking platform. https://minds.com

## Docs

Full documentation can be found at [https://developers.minds.com/](https://developers.minds.com/). We suggest getting started at the [introduction](https://developers.minds.com/docs/getting-started/introduction/).

## Repositories

Minds is split into multiple repositories:

- [Engine](https://gitlab.com/minds/engine) - Backend code & APIs
- [Front](https://gitlab.com/minds/front) - Client side Angular2 web app
- [Sockets](https://gitlab.com/minds/sockets) - WebSocket server for real-time communication
- [Mobile](https://gitlab.com/minds/mobile-native) - React Native mobile apps

## Development Installation

See our [installation guide](https://developers.minds.com/docs/getting-started/introduction/) to get your local stack up and running

## Troubleshooting

Having trouble with your local stack? See [troubleshooting](https://developers.minds.com/docs/getting-started/troubleshooting/)

## Contributing

If you'd like to contribute to the Minds project, check out [how to contribute](https://developers.minds.com/docs/contributing/contributing/) or head right over to the [Minds Open Source Community](https://www.minds.com/groups/profile/365903183068794880). If you've found or fixed a bug, let us know in the [Minds Help and Support Group](https://www.minds.com/groups/profile/100000000000000681/activity)!

## Security reports

Please report all security issues to [security@minds.com](mailto:security@minds.com).

## License and Copyright

General license and copyright information is located [here](https://developers.minds.com/docs/getting-started/introduction/#license), and the AGPLv3 fine print is available [here](https://developers.minds.com/docs/contributing/license/). In addition, please see the license file of each repository.
","Minds is an open-source, encrypted and reward-based social networking platform.
It is split into multiple repositories:Engine - Backend code & APIs- [Front] -
Client side Angular2 web app- [Sockets] - WebSocket server for real-time
communication- [Mobile] - React Native mobile apps."
2439,"Simple, elegant content placeholder","# mocka
Simple, elegant content placeholder

![Mocka](/docs/demo.gif)

```
npm install mocka-placeholder
```

## Introduction

The **mocka** placeholder is a very simple content placeholder that you can use for your website or web application, while loading your page's content. It weighs very little (about 500 bytes minified and gzipped), is fully customizable and you can easily include it in your project's CSS file, by using the Sass mixin provided. Alternatively, you can copy its code and inline it in your HTML for even faster loading.

## Usage

After loading the css, you can create a placeholder using the code provided below:

```html
<div class=""mocka-container"">
  <span class=""mocka-media""></span>
  <span class=""mocka-heading""></span>
  <span class=""mocka-text""></span>
</div>
```

## Customization

Download the npm package, add the mixin to your project, then `@import` the file and `@include` the mixin, passing a single map as an argument. The map contains all the information needed to generate the classes from the mixin. You can find the map with the default values in the [mocka.scss](https://github.com/Chalarangelo/mocka/blob/master/src/mocka/mocka.scss) file.

## License

**Mocka** is an open-source Sass/CSS component and is licensed under the [MIT License](https://github.com/Chalarangelo/mocka/blob/master/LICENSE).
","The **mocka** placeholder is a very simple content placeholder that you can use
for your website or web application, while loading your page's content. It
weighs very little (about 500 bytes minified and gzipped), is fully customizable
and you can easily include it in your project's CSS file, by using the Sass
mixin provided. Alternatively, you can copy its code and inline it into your
HTML for even faster loading.**Mocka*** is an open-source Sass/CSS component and
is licensed under the [MIT
License](https://github.com/Chalarangelo/mockA/blob/master/src/
mocka/mocksa.scss)"
2431,Master the creation of Modern UX/UI Websites,"# Modern UI/UX GPT-3
### [Live Site](https://gpt3-jsm.com/)

![Modern UI/UX GPT-3](https://i.ibb.co/TR5LW9z/image.png)

## Stay up to date with new projects
New major projects coming soon, subscribe to the mailing list to stay up to date https://resource.jsmasterypro.com/newsletter

## Introduction
This is a code repository for the corresponding video tutorial. 

You might be wondering, what are the prerequisites for building such an amazing website? Don't worry, this course is completely beginner-friendly! We're going to start easy and them move to more complex topics. Every step of the way will be explained. Alongside building the website, you'll learn:

- React Functional components and their reusability
- React file and folder structure
- Fundamental CSS properties to master flex & grid
- Fundamentals of the CSS BEM Model
- From soft and pleasant animations to complex gradients
- Perfectly placed media queries for satisfactory responsiveness covering almost devices
- And at the end you'll learn how to deploy your websites to extremely fast servers and give them a custom domain name.
","This is a code repository for the corresponding video tutorial. We're going to
start easy and them move to more complex topics. Alongside building the website,
you'll learn:- React Functional components and their reusability.- Fundamental
CSS properties to master flex & grid.- From soft and pleasant animations to
complex gradients.- Perfectly placed media queries for satisfactory
responsiveness.- And at the end, learn how to deploy your websites to extremely
fast servers and give them a custom domain name."
2859,Next RecSys Library,"# NeuRec

## An open source neural recommender library

**Main Contributors**: [Bin Wu](https://github.com/wubinzzu), [Zhongchuan Sun](https://github.com/ZhongchuanSun), [Xiangnan He](http://staff.ustc.edu.cn/~hexn/), [Xiang Wang](https://xiangwang1223.github.io), & [Jonathan Staniforth](https://github.com/jonathanstaniforth)

**NeuRec** is a comprehensive and flexible Python library for recommender systems that includes a large range of state-of-the-art neural recommender models. This library aims to solve general, social and sequential (i.e. next-item) recommendation tasks, using the [Tensorflow](https://www.tensorflow.org/) library to provide 33 models out of the box. NeuRec is [open source](https://opensource.org) and available under the [MIT license](https://opensource.org/licenses/MIT).

## Features

* **Cross platform** - run on any operating system with the available Docker images;
* **State-of-the-art** - 33 neural recommender models available out of the box;
* **Flexible configuration** - easily change the configuration settings to your exact requirements;
* **Easy expansion** - quickly include models or datasets into NeuRec;
* **Fast execution** - naturally support GPU, with a mutli-thread evaluator;
* **Detailed documentation** - extensive documentation available as Jupyter notebooks in [tutorial.ipynb](./tutorial.ipynb).

## Architecture

The architecture of NeuRec is shown in the diagram below:

<img src=""./architecture.jpg"" width = ""50%"" height = ""50%""/>

## Quick Start

Firstly, download this repository and unpack the downloaded source to a suitable location.

Secondly, go to '*./NeuRec*' and compline the evaluator of cpp implementation with the following command line:

```bash
python setup.py build_ext --inplace
```

If the compilation is successful, the evaluator of cpp implementation will be called automatically.
Otherwise, the evaluator of python implementation will be called.

**Note that the cpp implementation is much faster than python.**

Thirdly, specify dataset and recommender in configuration file *NeuRec.properties*.

Finally, run [main.py](./main.py) in IDE or with command line:

```bash
python main.py
```

## Tutorial

The short introduction to NeuRec is described in [tutorial.ipynb](./tutorial.ipynb)

## Models

The list of available models in NeuRec, along with their paper citations, are shown below:

| General Recommender | Paper                                                                                                                           |
|---------------------|---------------------------------------------------------------------------------------------------------------------------------|
| GMF, MLP, NeuMF     | Xiangnan He et al., Neural Collaborative Filtering , WWW 2017.                                                                  |
| BPRMF               | Steffen Rendle et al., BPR: Bayesian Personalized Ranking from Implicit Feedback. UAI 2009.                                     |
| FISM                | Santosh Kabbur et al., FISM: Factored Item Similarity Models for Top-N Recommender Systems. KDD 2013.                           |
| NAIS                | Xiangnan He et al., NAIS: Neural Attentive Item Similarity Model for Recommendation . TKDE2018.                                 |
| DeepICF             | Feng Xue et al., Deep Item-based Collaborative Filtering for Top-N Recommendation. TOIS 2019.                                   |
| ConvNCF             | Xiangnan He et al., Outer Product-based Neural Collaborative Filtering . IJCAI 2018.                                            |
| DMF                 | Hong-Jian Xue et al., Deep Matrix Factorization Models for Recommender Systems. IJCAI 2017.                                     |
| CDAE, DAE           | Yao Wu et al., Collaborative denoising auto-encoders for top-n recommender systems. WSDM 2016.                                  |
| MultiDAE, MultiVAE  | Dawen Liang, et al., Variational autoencoders for collaborative filtering. WWW 2018.                                            |
| JCA                 | Ziwei Zhu, et al., Improving Top-K Recommendation via Joint Collaborative Autoencoders. WWW 2019.                               |
| IRGAN               | Jun Wang, et al., IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models. SIGIR 2017.    |
| CFGAN               | Dong-Kyu Chae, et al., CFGAN: A Generic Collaborative Filtering  Framework based on Generative Adversarial Networks. CIKM 2018. |
| APR                 | Xiangnan He, et al., Adversarial Personalized Ranking for Recommendation. SIGIR 2018.                                           |
| SpectralCF          | Lei Zheng, et al., Spectral Collaborative Filtering. RecSys 2018.                                                               |
| NGCF                | Xiang Wang, et al., Neural Graph Collaborative Filtering. SIGIR 2019.                                                           |
| WRMF                | Yifan Hu, et al., Collaborative Filtering for Implicit Feedback Datasets. ICDM 2008.                                            |
| LightGCN            | Xiangnan He, et al., LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation. SIGIR 2020.               |

| Social Recommender | Paper                                                                                                      |
|------------------------|------------------------------------------------------------------------------------------------------------|
| SBPR                | Tong Zhao et al., Leveraging Social Connections to Improve Personalized Ranking for Collaborative Filtering. CIKM 2014.         |
| DiffNet                    | Le Wu et al., A Neural Influence Diffusion Model for Social Recommendation, SIGIR 2019. |


| Sequential Recommender | Paper                                                                                                      |
|------------------------|------------------------------------------------------------------------------------------------------------|
| FPMC, FPMCplus         | Steffen Rendle et al., Factorizing Personalized Markov Chains for Next-Basket Recommendation, WWW 2010.    |
| HRM                    | Pengfei Wang et al., Learning Hierarchical Representation Model for NextBasket Recommendation, SIGIR 2015. |
| NPE                    | ThaiBinh Nguyen et al., NPE: Neural Personalized Embedding for Collaborative Filtering, ijcai 2018.        |
| TransRec               | Ruining He et al., Translation-based Recommendation, SIGIR 2015.                                           |
| Caser                  | Jiaxi Tang et al., Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding, WSDM 2018.                                           |
| Fossil               | Ruining He et al., Fusing similarity models with Markov chains for sparse sequential recommendation, ICDM 2016.                                           |
| GRU4Rec               | Balázs Hidasi et al., Session-based Recommendations with Recurrent Neural Networks, ICLR 2016.                                           |
| GRU4RecPlus               | Balázs Hidasi et al., Recurrent Neural Networks with Top-k Gains for Session-based Recommendations, CIKM 2018.                                           |
| SASRec               | Wangcheng Kang et al., Self-Attentive Sequential Recommendation, ICDM 2018.                                           |
| SRGNN               |Shu Wu et al., Session-Based Recommendation with Graph Neural Networks, AAAI 2019.                                           |

<!--
## Contributions

Please let us know if you experience any issues or have suggestions for new features by submitting an issue under the Issues tab or joining our WeChat Group.

<img src=""WeChat_QR_Code.jpg"" width = ""30%"" height = ""30%""/>-->

## Acknowledgements

The development of NeuRec is supported by the National Natural Science
Foundation of China under Grant No. 61772475. This project is also supported by the National Research Foundation, Prime Minister’s Office, Singapore under its IRC@Singapore Funding Initiative.

<img src=""./next.png"" width = ""297"" height = ""100"" alt=""next"" align=center />
","NeuRec is an open source Python library for recommender systems. It includes a
large range of state-of-the-art neural recommender models. This library aims to
solve general, social and sequential (i.e. next-item) recommendation tasks."
2383,Experimental demo of React Server Components with Next.js. Deployed serverlessly on Vercel.,"# Next.js 12 React Server Components Notes Demo (Alpha)

Try the demo live here: [**next-rsc-notes.vercel.app**](https://next-rsc-notes.vercel.app).

> **Warning**  
> This demo is built for showing what features that Server Components provide and what the application structure might look like.  
> **It's not ready for production adoption, or performance benchmarking** as the underlying APIs are not stable yet, and might change or be improved in the future. 

## Introduction

This is a demo app showing Next.js 12's experimental React Server Components support. It's based on the [React Server Components Demo](https://github.com/reactjs/server-components-demo) by the React team. We recommend you taking a look at these links, before trying out the experimental feature:
- [**Introducing Zero-Bundle-Size React Server Components**](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html)
- [**Everything About React Server Components**](https://vercel.com/blog/everything-about-react-server-components)
- [**Docs of React Server Components in Next.js**](https://nextjs.org/docs/advanced-features/react-18#react-server-components)

## Technical Details

This Next.js application uses React 18 (RC build), with `runtime` set to `'nodejs'` and feature flag `serverComponents` enabled. You can check out [next.config.js](https://github.com/vercel/server-components-notes-demo/blob/main/next.config.js) for more details. It also uses Redis to store the data, and GitHub's OAuth API for authentication. To develop it locally or host it, please follow these instructions:

### Preparation

These environment variables are required to start this application (you can create a `.env` file for Next.js to use):

```bash
REDIS_URL='rediss://:<password>@<url>:<port>' # or `redis://` if no TLS support
SESSION_KEY='your session key'
OAUTH_CLIENT_KEY='github oauth app id'
OAUTH_CLIENT_SECRET='github oauth app secret'
```

### Running Locally

1. `yarn install`
2. `yarn dev`

Go to `localhost:3000`.

### Deploy

You can quickly deploy the demo to Vercel by clicking this link:

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/git/external?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fserver-components-notes-demo&env=REDIS_URL,SESSION_KEY,OAUTH_CLIENT_KEY,OAUTH_CLIENT_SECRET&project-name=next-rsc-notes&repo-name=next-rsc-notes&demo-title=React%20Server%20Components%20(Experimental%20Demo)&demo-description=Experimental%20demo%20of%20React%20Server%20Components%20with%20Next.js.%20&demo-url=https%3A%2F%2Fnext-rsc-notes.vercel.app&demo-image=https%3A%2F%2Fnext-rsc-notes.vercel.app%2Fog.png)

## Technical Details

This Next.js application uses React 18 (RC build) and the new [Edge Runtime](https://nextjs.org/docs/api-reference/edge-runtime). It has `runtime` set to `'edge'` and feature flag `serverComponents` enabled. You can check out [next.config.js](https://github.com/vercel/next-server-components/blob/main/next.config.js) for more details.

## License

This demo is MIT licensed.
","This is a demo app showing Next.js 12's experimental React Server Components
support. It's based on the [React Server Components Demo] by the React team. It
also uses Redis to store the data, and GitHub's OAuth API for authentication. To
develop it locally or host it, please follow these instructions:. You can
quickly deploy the demo to Vercel by clicking this link:. The demo is MIT
licensed, and you can use it with any version of Vercel you want."
931,"Node.js Backend Architecture Typescript - Learn to build a backend server for production ready blogging platform like Medium and FreeCodeCamp. Main Features: Role based, Express.js, Mongoose, Redis, Mongodb, Joi, Docker, JWT, Unit Tests, Integration Tests.","# Node.js Backend Architecture Typescript Project
### A complete project to build a blogging platform like Medium, and FreeCodeCamp

[![Docker Compose CI](https://github.com/janishar/nodejs-backend-architecture-typescript/actions/workflows/docker_compose.yml/badge.svg)](https://github.com/janishar/nodejs-backend-architecture-typescript/actions/workflows/docker_compose.yml)

Note: This is the **latest (version 2)** of the project. If you are using **version 1** then checkout the branch [**version-1**](https://github.com/janishar/nodejs-backend-architecture-typescript/tree/version-1)

<p align=""center"">
    <img src=""https://raw.githubusercontent.com/janishar/nodejs-backend-architecture-typescript/master/addons/github_assets/cover-nodejs-backend.png"">
</p>
<br>

# Project Highlights 
1. Node.js
2. Express.js
3. Typescript
4. Mongoose
5. Redis
6. Mongodb
7. Joi
8. Unit Tests & Integration Tests
9. Docker
10. JWT

# About The Project
This project is designed for a production ready environment. It can handle the scale and complexity of a very demanding application. This project is being used by companies like MindOrks, AfterAcademy, and CuriousJr. Apps/Websites having 10+ million usebase.

It is suitable for Web Apps, Mobile Apps, and other API services.

# About The Author
I [Janishar Ali](https://janisharali.com) have created this project using my 10 years of experience in tech industry working for top companies. I enjoy sharing my learnings with the community. You can connect with me here:
* [Twitter](https://twitter.com/janisharali)
* [LinkedIn](https://www.linkedin.com/in/janishar-ali)
* [Instagram](https://www.instagram.com/janisharali)

[Learn from My YouTube Channel](https://www.youtube.com/@janisharali)

# Project Instructions
We will learn and build the backend application for a blogging platform. The main focus will be to create a maintainable and highly testable architecture.
<br>
Following are the features of this project:
* **This backend is written in Typescript**: The type safety at build time and having intellisense for it in the IDE like vscode is unparalleled to productivity. I have found production bug reduced to a significant amount since most of the code vulnerabilities are identified during the build phase itself.
* **Separation of concern principle**: Each component has been given a particular role. The role of the components is mutually exclusive. This makes the project easy to be unit tested.
* **Feature encapsulation**: The files or components that are related to a particular feature have been grouped unless those components are required in multiple features. This enhances the ability to share code across projects.
* **Centralised Error handling**: I have created a framework where all the errors are handled centrally. This reduces the ambiguity in the development when the project grows larger.
* **Centralised Response handling**: Similar to Error handling we have a response handling framework. This makes it very convenient to apply a common API response pattern.
* **Mongodb is used through Mongoose**: Mongodb fits very well to the node.js application. Being NoSQL, fast, and scalable makes it ideal for modern web applications.
* **Redis Memcache**: I have used the redis server for caching the items which does not change frequently. It will boost the performance of our system.
* **Async execution**: I have used async/await for the promises and made sure to use the non-blocking version of all the functions with few exceptions.
* **Docker compose has been configured**: I have created the Dockerfile to provide the easy deployability without any setup and configurations. 
* **Unit test is favored**: The tests have been written to test the functions and routes without the need of the database server. Integration tests has also been done but the unit test is favored.
* **A pure backend project**: I have experienced that when a backend is developed clubbed with a frontend then in the future it becomes really difficult to scale. We would want to create a separate backend project that servers many websites and mobile apps.

> I have also open source a complete blogging website working on this backend project: [Goto Repository](https://github.com/janishar/react-app-architecture)
The repository [**React.js Isomorphic Web Application Architecture**] has a complete React.js web application implemented for a blogging platform which is using this project as its API server.

## 3RE Architecture: Router, RouteHandler, ResponseHandler, ErrorHandler
<p align=""center"">
    <img src=""https://raw.githubusercontent.com/janishar/nodejs-backend-architecture-typescript/master/addons/github_assets/3RE.png"">
</p>
<br>

## Project Outline: Blogging Platform
<p align=""center"">
    <img src=""https://raw.githubusercontent.com/janishar/nodejs-backend-architecture-typescript/master/addons/github_assets/project-outline.png"">
</p>
<br>

## Request-Response Handling Schematic Diagram
<p align=""center"">
    <img src=""https://raw.githubusercontent.com/janishar/nodejs-backend-architecture-typescript/master/addons/github_assets/api-structure.png"">
</p>
<br>

## Learn the concepts used in this project
* [Design Node.js Backend Architecture like a Pro](https://janisharali.com/blog/design-node-js-backend-architecture-like-a-pro)
* [The video guide to build and run this project](https://youtu.be/t7blRxqPIMs)
* [Implement JSON Web Token (JWT) Authentication using AccessToken and RefreshToken](https://janisharali.com/blog/implement-json-web-token-jwt-authentication-using-access-token-and-refresh-token)
* [TypeScript Tutorial For Beginners](https://afteracademy.com/blog/typescript-tutorial-for-beginners)
* [From JavaScript to TypeScript](https://afteracademy.com/blog/from-javascript-to-typescript)


## You can find the complete API documentation [here](https://documenter.getpostman.com/view/1552895/2s8Z6u4a6N)
<a href=""https://documenter.getpostman.com/view/1552895/2s8Z6u4a6N"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/afteracademy/nodejs-backend-architecture-typescript/master/addons/github_assets/api-doc-button.png"" width=""200"" height=""60""/>
</a>

## How to build and run this project

* Install using Docker Compose [**Recommended Method**] 
    * Clone this repo.
    * Make a copy of **.env.example** file to **.env**.
    * Make a copy of **keys/private.pem.example** file to **keys/private.pem**.
    * Make a copy of **keys/public.pem.example** file to **keys/public.pem**.
    * Make a copy of **tests/.env.test.example** file to **tests/.env.test**.
    * Install Docker and Docker Compose. [Find Instructions Here](https://docs.docker.com/install/).
    * Execute `docker-compose up -d` in terminal from the repo directory.
    * You will be able to access the api from http://localhost:3000
    * *If having any issue* then make sure 3000 port is not occupied else provide a different port in **.env** file.
    * *If having any issue* then make sure 27017 port is not occupied else provide a different port in **.env** file.
 * Run The Tests
    * Install node.js and npm on your local machine.
    * From the root of the project executes in terminal `npm install`.
    * *Use the latest version of node on the local machine if the build fails*.
    * To run the tests execute `npm test`.
 * Install Without Docker [**2nd Method**]
    * Install MongoDB on your local.
    * Do steps 1 to 5 as listed for **Install using Docker Compose**.
    * Do steps 1 to 3 as listed for **Run The Tests**.
    * Create users in MongoDB and seed the data taking reference from the **addons/init-mongo.js**
    * Change the `DB_HOST` to `localhost` in **.env** and **tests/.env.test** files.
    * Execute `npm start` and You will be able to access the API from http://localhost:3000
    * To run the tests execute `npm test`.

  * Postman APIs Here: 
    [addons/postman](https://github.com/janishar/nodejs-backend-architecture-typescript/tree/master/addons/postman)
  
  ## Learn Backend Development From Our Videos
  * [Introduction to Web Backend Development for Beginners](https://youtu.be/SikmqyFocKQ)
  * [Backend System Design for Startups](https://youtube.com/playlist?list=PLuppOTn4pNYeAn-ioA-Meec5I8pQK_gU5)
  * [Practical Javascript for Beginners](https://youtube.com/playlist?list=PLuppOTn4pNYdowBb05yG2I8wAmHiW7vze)
  
 ## Project Directory Structure
 ```
├── .vscode
│   ├── settings.json
│   ├── tasks.json
│   └── launch.json
├── .templates
├── src
│   ├── server.ts
│   ├── app.ts
│   ├── config.ts
│   ├── auth
│   │   ├── apikey.ts
│   │   ├── authUtils.ts
│   │   ├── authentication.ts
│   │   ├── authorization.ts
│   │   └── schema.ts
│   ├── core
│   │   ├── ApiError.ts
│   │   ├── ApiResponse.ts
│   │   ├── JWT.ts
│   │   ├── Logger.ts
│   │   └── utils.ts
│   ├── cache
│   │   ├── index.ts
│   │   ├── keys.ts
│   │   ├── query.ts
│   │   └── repository
│   │       ├── BlogCache.ts
│   │       └── BlogsCache.ts
│   ├── database
│   │   ├── index.ts
│   │   ├── model
│   │   │   ├── ApiKey.ts
│   │   │   ├── Blog.ts
│   │   │   ├── Keystore.ts
│   │   │   ├── Role.ts
│   │   │   └── User.ts
│   │   └── repository
│   │       ├── ApiKeyRepo.ts
│   │       ├── BlogRepo.ts
│   │       ├── KeystoreRepo.ts
│   │       ├── RoleRepo.ts
│   │       └── UserRepo.ts
│   ├── helpers
│   │   ├── asyncHandler.ts
│   │   ├── permission.ts
│   │   ├── role.ts
│   │   ├── security.ts
│   │   ├── utils.ts
│   │   └── validator.ts
│   ├── routes
│   │   ├── access
│   │   │   ├── credential.ts
│   │   │   ├── login.ts
│   │   │   ├── logout.ts
│   │   │   ├── schema.ts
│   │   │   ├── signup.ts
│   │   │   ├── token.ts
│   │   │   └── utils.ts
│   │   ├── blog
│   │   │   ├── editor.ts
│   │   │   ├── index.ts
│   │   │   ├── schema.ts
│   │   │   └── writer.ts
│   │   ├── blogs
│   │   │   ├── index.ts
│   │   │   └── schema.ts
│   │   ├── index.ts
│   │   └── profile
│   │       ├── schema.ts
│   │       └── user.ts
│   └── types
│       └── app-request.d.ts
├── tests
│   ├── auth
│   │   ├── apikey
│   │   │   ├── mock.ts
│   │   │   └── unit.test.ts
│   │   ├── authUtils
│   │   │   ├── mock.ts
│   │   │   └── unit.test.ts
│   │   ├── authentication
│   │   │   ├── mock.ts
│   │   │   └── unit.test.ts
│   │   └── authorization
│   │       ├── mock.ts
│   │       └── unit.test.ts
│   ├── core
│   │   └── jwt
│   │       ├── mock.ts
│   │       └── unit.test.ts
│   ├── cache
│   │   └── mock.ts
│   ├── database
│   │   └── mock.ts
│   ├── routes
│   │   ├── access
│   │   │   ├── login
│   │   │   │   ├── integration.test.ts
│   │   │   │   ├── mock.ts
│   │   │   │   └── unit.test.ts
│   │   │   └── signup
│   │   │       ├── mock.ts
│   │   │       └── unit.test.ts
│   │   └── blog
│   │       ├── index
│   │       │   ├── mock.ts
│   │       │   └── unit.test.ts
│   │       └── writer
│   │           ├── mock.ts
│   │           └── unit.test.ts
│   ├── .env.test
│   └── setup.ts
├── addons
│   └── init-mongo.js
├── keys
│   ├── private.pem
│   └── public.pem
├── .env
├── .gitignore
├── .dockerignore
├── .eslintrc
├── .eslintignore
├── .prettierrc
├── .prettierignore
├── .travis.yml
├── Dockerfile
├── docker-compose.yml
├── package-lock.json
├── package.json
├── jest.config.js
└── tsconfig.json
 ```
 
 ## Directory Traversal for Signup API call
 `/src → server.ts → app.ts → /routes/index.ts → /auth/apikey.ts → schema.ts → /helpers/validator.ts → asyncHandler.ts → /routes/access/signup.ts → schema.ts → /helpers/validator.ts → asyncHandler.ts → /database/repository/UserRepo.ts → /database/model/User.ts → /core/ApiResponses.ts`
 
 ## API Examples
* Signup
    * Method and Headers
    ```
    POST /signup/basic HTTP/1.1
    Host: localhost:3000
    x-api-key: GCMUDiuY5a7WvyUNt9n3QztToSHzK7Uj
    Content-Type: application/json
    ```
    * Request Body
    ```json
    {
        ""name"" : ""Janishar Ali"",
        ""email"": ""ali@github.com"",
        ""password"": ""changeit"",
        ""profilePicUrl"": ""https://avatars1.githubusercontent.com/u/11065002?s=460&u=1e8e42bda7e6f579a2b216767b2ed986619bbf78&v=4""
    }
    ```
    * Response Body: 200
    ```json
    {
      ""statusCode"": ""10000"",
      ""message"": ""Signup Successful"",
      ""data"": {
        ""user"": {
          ""_id"": ""63a19e5ba2730d1599d46c0b"",
          ""name"": ""Janishar Ali"",
          ""roles"": [
             {
               ""_id"": ""63a197b39e07f859826e6626"",
               ""code"": ""LEARNER"",
               ""status"": true
             }
            ],
          ""profilePicUrl"": ""https://avatars1.githubusercontent.com/u/11065002?s=460&u=1e8e42bda7e6f579a2b216767b2ed986619bbf78&v=4""
        },
        ""tokens"": {
          ""accessToken"": ""some_token"",
          ""refreshToken"": ""some_token""
        }
      }
    }
    ```
    * Response Body: 400
    ```json
    {
      ""statusCode"": ""10001"",
      ""message"": ""Bad Parameters""
    }
    ```
* Profile Private
    * Method and Headers
    ```
    GET /profile/my HTTP/1.1
    Host: localhost:3000
    x-api-key: GCMUDiuY5a7WvyUNt9n3QztToSHzK7Uj
    Content-Type: application/json
    Authorization: Bearer <your_token_received_from_signup_or_login>
    ```
    * Response Body: 200
    ```json
    {
      ""statusCode"": ""10000"",
      ""message"": ""success"",
      ""data"": {
        ""name"": ""Janishar Ali Anwar"",
        ""profilePicUrl"": ""https://avatars1.githubusercontent.com/u/11065002?s=460&u=1e8e42bda7e6f579a2b216767b2ed986619bbf78&v=4"",
        ""roles"": [
          {
            ""_id"": ""5e7b8acad7aded2407e078d7"",
            ""code"": ""LEARNER""
          },
          {
            ""_id"": ""5e7b8c22d347fc2407c564a6"",
            ""code"": ""WRITER""
          },
          {
            ""_id"": ""5e7b8c2ad347fc2407c564a7"",
            ""code"": ""EDITOR""
          }
        ]
      }
    }
    ```

### Find this project useful ? :heart:
* Support it by clicking the :star: button on the upper right of this page. :v:

### License
```
   Copyright (C) 2022 JANISHAR ALI ANWAR

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
```
     
 
","The Node.js Backend Architecture Typescript Project is a complete project to
build a blogging platform like Medium, and FreeCodeCamp. The main focus will be
to create a maintainable and highly testable architecture. The project is being
used by companies like MindOrks, AfterAcademy, and CuriousJr."
1214,【Nodejs-Roadmap】侧重于 Node.js 服务端的开发指南，公众号 “Nodejs技术栈”,"# Nodejs技术栈

[![stars](https://badgen.net/github/stars/qufei1993/Nodejs-Roadmap?icon=github&color=4ab8a1)](https://github.com/qufei1993/Nodejs-Roadmap) [![forks](https://badgen.net/github/forks/qufei1993/Nodejs-Roadmap?icon=github&color=4ab8a1)](https://github.com/qufei1993/Nodejs-Roadmap) [<img src=""https://img.shields.io/static/v1.svg?label=%E6%85%95%E8%AF%BE&message=7k%20stars&color=ef151f"">](https://www.imooc.com/u/2667395) [<img src=""https://img.shields.io/badge/%E5%BE%AE%E4%BF%A1-%E5%85%AC%E4%BC%97%E5%8F%B7-brightgreen"">](https://nodejsred.oss-cn-shanghai.aliyuncs.com/node_roadmap_wx.jpg?x-oss-process=style/may)

本文档是作者 **@五月君** 从事 Node.js 开发以来的学习历程，希望这些分享能帮助到正在学习、使用 Node.js 的朋友们，也真诚的希望能聚集所有 Node.js 爱好者，共建互帮互助的「Nodejs技术栈」交流平台。

如果本文能为您得到帮助，请给予支持！

**如何支持：**
- 关注公众号 👉 [**Nodejs技术栈**](https://nodejsred.oss-cn-shanghai.aliyuncs.com/node_roadmap_wx.jpg?x-oss-process=style/may)
- 点击**右上角 Star :star: 给予关注，勿 fork**
- 分享给您身边更多的小伙伴

**作者简介**：

五月君，Software Designer，公众号「**Nodejs技术栈**」|「**五月君**」作者，一个疯狂输出干货的技术博主。

**话题标签：**

> 所有相关话题均围绕 Node.js 讨论，例如数据库部分，会介绍在 Node.js 中使用 Redis、MySql、MongoDB 等常见数据库的一些基础应用、问题、实践记录。

`基础入门` `系统模块` `NPM 模块` `高级进阶` `好文翻译` `实践指南` `Node.js 小知识` `Node.js News` `数据库` `微服务`  `Serverless` `DevOps`

**在线预览：** [https://www.nodejs.red](https://www.nodejs.red/)

## 话题目录

- Introduction
    - [简介](README.md)

- 基础入门
    - [Node.js 是什么？我为什么选择它？](/docs/nodejs/base/what-is-nodejs.md)
    - [Node.js 版本知多少？又该如何选择？](/docs/nodejs/base/release.md)
    - [“3N 兄弟” 助您完成 Node.js 环境搭建](/docs/nodejs/base/install.md)
    - [Node.js 包管理器 NPM](/docs/nodejs/base/npm.md)
    - [使用 Chrome Devtools 来调试你的 Node.js 程序](/docs/nodejs/base/debug-nodejs-with-chrome-devtools.md)

- 系统模块
    - [`[Module]` CommonJS 模块机制](/docs/nodejs/module.md)
    - [`[Module]` ES Modules 入门基础](/docs/nodejs/modules/esm.md)
    - [`[Events]` 事件触发器](/docs/nodejs/events.md)
    - [`[Crypto]` 加解密模块](/docs/nodejs/crypto.md)
    - [`[Buffer]` 缓冲区模块](/docs/nodejs/buffer.md)
    - [`[Process]` 线程和进程](/docs/nodejs/process-threads.md)
    - [`[Console]` 日志模块](/docs/nodejs/console.md)
    - [`[Net]` 网络模块](/docs/nodejs/net.md)
    - [`[DNS]` 域名解析](/docs/nodejs/dns.md)
    - [`[Cluster]` 集群模块](/docs/nodejs/cluster-base.md)
    - [`[Stream]` 多文件合并实现](/docs/nodejs/modules/stream-mutil-file-merge.md)
    - [`[Stream]` pipe 基本使用与实现分析](/docs/nodejs/modules/stream-pipe.md)
    - [`[Stream]` internal/stremas/egacy.js 文件分析](/docs/nodejs/modules/stream-lib-internal-stremas-legacy.md)
    - [`[Util]` util.promisify 实现原理分析](/docs/nodejs/modules/util-promisify.md)
    - [`[FileSystem]` 如何在 Node.js 中判断一个文件/文件夹是否存在？](/docs/nodejs/modules/fs-file-exists-check.md)
    - [`[Report]` 在 Node.js 中使用诊断报告快速追踪问题](/docs/nodejs/modules/report.md)
    - [`[AsyncHooks]` 使用 Async Hooks 模块追踪异步资源](/docs/nodejs/modules/async-hooks.md)
    - [`[HTTP]` HTTP 请求与响应如何设置 Cookie 信息](/docs/nodejs/modules/http-set-cookies.md)

- NPM 模块
    - [Node.js + Socket.io 实现一对一即时聊天](/docs/nodejs/npm/private-chat-socketio.md)
    - [request 已废弃 - 推荐 Node.js HTTP Client undici](/docs/nodejs/npm/undici.md)

- 高级进阶
    - [Egg-Logger 模块实践](/docs/nodejs/logger.md)
    - [I/O 模型浅谈](/docs/nodejs/IO.md)
    - [Memory 内存管理和 V8 垃圾回收机制](/docs/nodejs/memory.md)
    - [Cache 缓存](/docs/nodejs/cache.md#缓存)
    - [Schedule 定时任务](/docs/nodejs/schedule.md#定时任务)
    - [Template 模板引擎](/docs/nodejs/template.md#模板引擎)
    - [Testing 测试](/docs/nodejs/test.md)
    - [Framework Web 开发框架选型](/docs/nodejs/framework.md#框架)
    - [ORM 对象关系映射](/docs/nodejs/orm.md#ORM)
    - [Middleware 常用 Web 框架&中间件汇总](/docs/nodejs/middleware.md)
    - [深入 Nodejs 源码探究 CPU 信息的获取与实时计算](/docs/nodejs/modules/os-cpu-usage.md)
    - [Node.js 中出现未捕获异常如何处理？](/docs/nodejs/advanced/uncaugh-exception.md)
    - [探索异步迭代器在 Node.js 中的使用](/docs/nodejs/advanced/asynciterator-in-nodejs.md)
    - [多维度分析 Express、Koa 之间的区别](/docs/nodejs/base/express-vs-koa.md)
    - [在 Node.js 中如何处理一个大型 JSON 文件？](/docs/nodejs/advanced/json-stream.md)
    - [Node.js 中遇到大数处理精度丢失如何解决？前端也适用！](/docs/nodejs/advanced/floating-point-number-float-bigint-question.md)
    - [Stream 的两种模式](/docs/nodejs/advanced/stream-object-mode-and-flow-mode.md)
    - [Stream 的背压问题 — 消费端数据积压来不及处理会怎么样？](/docs/nodejs/advanced/stream-back-pressure.md)

- 好文翻译
    - [你需要了解的有关 Node.js 的所有信息](/docs/nodejs/translate/everything-you-need-to-know-about-node-js-lnc.md)
    - [不容错过的 Node.js 项目架构](/docs/nodejs/translate/bulletproof-node.js-project-architecture.md)

- 实践指南
    - [企业实践](/docs/nodejs/practice/enterprise.md)
    - [框架实践](/docs/nodejs/practice/frame.md)

- 数据库
    - [`[Redis]` Node.js 中实践 Redis Lua 脚本](/docs/database/redis-lua.md)
    - [`[Redis]` Node.js 中实践 Redis 分布式锁](/docs/database/redis-lock.md)
    - [`[MongoDB]` 事务 | 基础篇](/docs/database/mongodb-transactions.md)
    - [`[MongoDB]` 事务 | 多文档事务实践篇](/docs/database/mongodb-transactions-pratice.md)
    - [`[MongoDB]` Node.js 中用 Mongoose 关联查询踩坑记录](/docs/database/mongoose-populate.md)

- 微服务
    - [`[Microservice]` 数据通信方式 RPC、HTTP、消息队列](/docs/microservice/data-communication.md)
    - [`[Consul]` 服务注册与发现 Consul](/docs/microservice/consul.md)
    - [`[RabbitMQ]` 入门篇](/docs/microservice/rabbitmq-base.md)
    - [`[RabbitMQ]` 交换机消息投递机制](/docs/microservice/rabbitmq-exchange.md)
    - [`[RabbitMQ]` DLX（死信队列）+ TTL 实现延迟队列](/docs/microservice/rabbitmq-schedule.md)
    - [`[RabbitMQ]` Delayed Message 插件实现延迟队列](/docs/microservice/rabbitmq-delayed-message-exchange.md)
    - [`[RabbitMQ]` 高并发下消费端限流实践](/docs/microservice/rabbitmq-prefetch.md)
    - [`[RabbitMQ]` 服务异常重连](/docs/microservice/rabbitmq-reconnecting.md)

- Node.js 小知识
    - [HTTP 请求与响应如何设置 Cookie 信息]()
    - [如何实现线程睡眠？](/docs/nodejs/tips/sleep.md)
    - [实现图片上传写入磁盘的接口](/docs/nodejs/tips/upload-picture.md)

- Node.js News
    - [Node.js v15.x 新特性 — 控制器对象 AbortController]()
    - [Node.js 16 来了，14 将支持到 2023 年]()
    - [一起来看看 Node.js v14.x LTS 中的这些新功能](/docs/nodejs/version/node-v14-feature.md)
    - [Node.js v14.15.0 已发布进入 LTS 长期支持](/docs/nodejs/version/node-v14.15.0-lts-intro.md)

- Serverless
    - [Node.js 快速开启 Serverless Functions：入门实践指南](/docs/serverless/serverless-functions-using-node-and-aws.md)
    - [TypeScript + Serverless 开发 REST API 实战](https://github.com/qufei1993/aws-node-rest-api-typescript/blob/master/intro-zh.md)
    - [使用 Serverless, Nodejs, MongoDB Atlas cloud 构建 REST API](/docs/serverless/node-mongodb-altas-serverless-api.md)

- DevOps
    - [`[Docker]` 入门到实践](/docs/devops/docker-base.md)
    - [`[Docker]` Node.js 服务容器化实践](/docs/devops/docker-nodejs.md)
    - [`[Docker]` Node.js 进程的优雅退出](/docs/devops/docker-build-nodejs-smooth-program.md)
    - [`[NPM]` 学会发布一个自己公共/私有包](/docs/devops/npm-deploy.md)
    - [`[Deploy]` Node.js 生产环境完整部署指南](/docs/devops/node-deploy.md)

* 其他
    - [关于 Node.js 技术栈](/docs/other/about-us.md)
    - [2020 Nodejs技术栈原创文章合辑](/docs/other/2020-noderoadmap-original-compilation.md)
    - [2020 年度回顾 — 缘起「Nodejs技术栈」](/docs/other/may-2020-review.md)
    - [Blog 推荐](/docs/other/blog.md)
## 转载分享

* 本站所有文章首发于公众号「Nodejs技术栈」，请发邮件至 qzfweb@gmail.com。
* 原创文章需要转载至公众号的，在邮件中说明具体的文章和转载到的公众号。
* 原创文章需要转载至个人博客的，在邮件中说明具体的文章和转载到的博客地址。
* 转载时须标注转载来源 “**文章转载自公众号「Nodejs技术栈」，作者@五月君**”，缺失来源的或来源隐蔽的视为侵权。

## 参与贡献

1. 如果您对本项目有任何建议或发现文中内容有误的，欢迎提交 issues 进行指正。
2. 对于文中我没有涉及到知识点，欢迎提交 PR。
3. 如果您有文章推荐请以 markdown 格式到邮箱 `qzfweb@gmail.com`，[中文技术文档的写作规范指南](https://github.com/ruanyf/document-style-guide)。

## 联系我

- **加入群聊**
本群的宗旨是给大家提供一个良好的技术学习交流平台，所以杜绝一切广告！请扫描下方二维码先添加作者 “五月君” 微信，备注：Node。
<img src=""https://nodejsred.oss-cn-shanghai.aliyuncs.com/wx.jpeg?x-oss-process=style/may"" width=""180"" height=""180""/>

- **公众号「Nodejs技术栈」**
Node.js 开发者聚集地，聚集所有 Node.js 爱好者，共建互帮互助的「**Nodejs技术栈**」交流平台。分享 Node.js 在前端、后端等领域下应用实践，通过 Node.js 祝您早日成为一名全栈开发工程师。 如果大家感兴趣可以给予关注支持！
<img src=""https://nodejsred.oss-cn-shanghai.aliyuncs.com/node_roadmap_wx.jpg?x-oss-process=style/may"" width=""180"" height=""180""/>

- **公众号「五月君」**
五月君的个人专属公众号，分享 Node.js 之外的更多精彩内容！
<img src=""https://qufei1993.oss-cn-beijing.aliyuncs.com/codingmay/wx/account"" width=""180"" height=""180""/>

## 关注「Nodejs技术栈」

由于精力有限目前所有文章主要维护在 Github，同时首发于微信公众号，在微信公众号也按照 “话题标签” 分类做了整理，便于大家在手机端查看。

* Github: https://github.com/qufei1993/Nodejs-Roadmap
* 关注微信公众号「Nodejs技术栈」对话框底部 “原创好文” -> “话题标签”，[链接直达](http://mp.weixin.qq.com/s?__biz=MzIyNDU2NTc5Mw==&mid=100012388&idx=1&sn=97fc192f6d61c0b50a84e966a3a0e949&chksm=680fbe2a5f78373cfc21ab1d1a95e8d4f78f24066c3d5a612e1a3e388bfef9890230037446f5#rd)。
<hr/>

**未完待续，持续更新中。。。**
","summarize: # Nodejs 技本文档是  ‘DevOps’: ‘NPM’ : ‘DevLess’. ‘Star:’ ‘Fork:‘’,’
Node.js: “”, ‘Forks: ’’ and ‘Node.js’': ‘”’”. ”."
324,A chrome extension to show online dictionary content.,"# Online Dictionary Helper (with Anki support)

[[中文版说明](README.zh_CN.md)]

Online Dictionary Helper is a Chrome/Firefox extension to show definitions for words and phrases from online (or builtin) dictionary via users' selection on any webpage and PDF documents (using [pdf.js](https://mozilla.github.io/pdf.js/)), which also supports flash-card creation using [Anki](https://github.com/dae/anki) (with **[AnkiConnect](https://github.com/FooSoft/anki-connect)**, an Anki add-on, installed).

Details on the reasons for making this extension can be found in the [background](doc/background.md) introduction if you are interested.

![Anki Notes](https://raw.githubusercontent.com/ninja33/ODH/master/doc/img/anki_001_640x400.png)

What might set this extension apart is that users can grab online dictionary content with their own customized script (running under extension development mode). For development details, please check the [development guide](doc/development.md).

## How to use

- [Install from Chrome Web Store](https://chrome.google.com/webstore/detail/anki-online-dictionary-he/lppjdajkacanlmpbbcdkccjkdbpllajb?hl=en)

- [Install from Firefox Add-ons](https://addons.mozilla.org/en-US/firefox/addon/online-dictionary-helper/)

1. Install the extension first from Chrome Web Store or Firefox Add-ons, then configure and activate the extension on your demands in the options page.
2. Open any webpage, move your mouse cursor over the word that you want to select and translate, drag and select/double-click/press **Hotkey** (defined in options page) to select the word or phrase.
3. If the word or phrase is a clickable link, use the predefined **Hotkey** or hold the <kbd>Alt</kbd> key while selecting to translate.
4. A popup window will show up above the selection displaying the word definition.
5. (Optional) While Anki and AnkiConnect are installed and running, go to the `Services Options` tab in the options page to setup the Anki deck, type, and field names to put your **expression**, **sentence**, **reading**, **definition**, etc.
6. (Optional) Press the green **(+)** button on the top right corner of each definition in the popup window to add the word or phrase to Anki as a note.

## The Options Page

The options of this extension are divided into three sections.

1. General Options
    - Enabled: Turn the extension on/off.
    - AutoSel.Hotkey: Configure the **Hotkey** to select words or phrases. Four options are available: Off(Disable the hotkey), <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, and <kbd>Alt</kbd> key.
    - Max.Context: Set the maximum number of sentences extracted from the context of the webpage.
    - Max.Example: Set the maximum number of example sentences from the dictionary (requires support of the dictionary script).

2. AnkiConnect Options: Setup Anki deck/type name, and which note fields you are going to put **expression**, **sentence**, **reading**, **definition**, etc.

3. Dictionary Options:
    - Dictionary Script: Input your own script name here, and click <kbd>Load Script</kbd> button to load it.
    - Selected Dictionary: Choose the dictionary (bultin or loaded) for the definitions on your preference.

![Options Page](https://raw.githubusercontent.com/ninja33/ODH/master/doc/img/option_general_640x400_en.png)

## Development
### Getting started
The source code of this extension on Github does not contain offline dictionary and English word deformation table data. You can go to the Chrome Web Store to download, or use a Chrome extension downloader to download the plugin's crx file and extract the dictionary JSON file.

### Use existing script or develop by yourself

1. You can use existing dictionary scripts in the [dictionaries list](doc/scriptlist.md).
2. Or develop the script by yourself based on [development guide](doc/development.md).
3. Or open an [issue](https://github.com/ninja33/ODH/issues) in this repo if you really need help.

### Pull request

Pull requests are welcome if you want to enhance this extension, or submit your own dictionary script in the next release.

- The extension source will go to [/src](https://github.com/ninja33/ODH/tree/master/src)
- The dictionary script will go to [/src/dict](https://github.com/ninja33/ODH/tree/master/src/dict)
","Online Dictionary Helper is a Chrome/Firefox extension to show definitions for
words and phrases from online (or builtin) dictionary via users' selection. It
also supports flash-card creation using [Anki](https://github.com/dae/anki)
Users can grab online dictionary content with their own customized script
(running under extension development mode)"
2467,"Open Brush is the open source, community led evolution of Tilt Brush! Forked from https://github.com/googlevr/tilt-brush","# Open Brush - Tilt Brush Evolved

[![Support us on Open Collective!](https://img.shields.io/opencollective/all/icosa?logo=open-collective&label=Support%20us%20on%20Open%20Collective%21)](https://opencollective.com/icosa)
[![All GitHub releases](https://img.shields.io/github/downloads/icosa-gallery/open-brush/total?label=GitHub%20downloads)](https://github.com/icosa-gallery/open-brush/releases/latest)
[![Twitter](https://img.shields.io/badge/follow-%40IcosaGallery-blue.svg?style=flat&logo=twitter)](https://twitter.com/IcosaGallery)
[![Discord](https://discordapp.com/api/guilds/783806589991780412/embed.png?style=shield)](https://discord.gg/W7NCEYnEfy)
![Current Version](https://img.shields.io/github/v/release/icosa-gallery/open-brush)
![Prerelease Version](https://img.shields.io/github/v/release/icosa-gallery/open-brush?include_prereleases&label=prerelease)

[![Open Brush Banner](open-brush.png)](https://openbrush.app)

Open Brush is a free fork of Tilt Brush, a room-scale 3D-painting virtual-reality application available from Google, originally developed by Skillman & Hackett. We have made a large number of changes from the original repository, including Unity upgrades and feature additions to bring Open Brush up to modern XR development standards. You can find the notable changes on our [docs site](https://docs.openbrush.app/differences-between-open-brush-and-tilt-brush).

We hope to maintain and improve upon Tilt Brush as a community-led project, free forever!

As the original repo is archived we cannot submit PRs, so feel free to submit them here! 

[User Guide](https://docs.openbrush.app/)  
[Developer Notes](https://docs.openbrush.app/developer-notes)  
[Roadmap](https://github.com/orgs/icosa-gallery/projects/1)  
[Please join the Icosa Discord and get involved!](https://discord.com/invite/W7NCEYnEfy)  
[List of tutorials, write-ups and other things from the community](https://docs.google.com/document/d/1gjoYp4y-1qlE3a7fvXVxGR3ioj3nMfgprmTHQ-bpq0k/)  
**[Support us on Open Collective!](https://opencollective.com/icosa)**  

## Downloads
### Stores (Did we mention it's free?)
- [SideQuest](https://sidequestvr.com/app/2852/open-brush)
- [Oculus App Lab](https://www.oculus.com/experiences/quest/3600360710032222)
- [Steam](https://store.steampowered.com/app/1634870/Open_Brush)
- [Oculus Rift](https://www.oculus.com/experiences/rift/5227489953989768)
- [Viveport Desktop](https://www.viveport.com/f1f3d00b-cf8a-443f-825e-4fea2dd3b005)
- [itch.io](https://openbrush.itch.io/openbrush)
### GitHub
- [Formal GitHub Releases](https://github.com/icosa-gallery/open-brush/releases/latest)
- [Bleeding Edge GitHub Releases](#bleeding-edge-releases)


## Acknowledgements
* Thank you to the Tilt Brush developers for your amazing work and for finding a way to open source the app! 
* [SiMonk0](http://www.furjandesign.com/) for the great new logo!
* The [SideQuest](https://sidequestvr.com/) team for your support.
* [VR Rosie](https://twitter.com/vr_rosie) for promotional artwork, banners, and videos.

## Bleeding Edge Releases

Instead of waiting for a formal release, you can download a ZIP from Github containing an automatically built release for either Windows (SteamVR) or Oculus Quest / Quest 2 from the [Github releases page](https://github.com/icosa-gallery/open-brush/releases). Versions of the form ""vX.Y.0"" are official releases, whereas versions that do not end in .0 are made available for testing purposes only, with no guarantees as to their quality. Additionally, these releases are marked as ""pre-release"". However, if you'd like to test a recent change prior to the official release, you can use these either in place of or in parallel with the formal Open Brush releases.

These builds share a save location with the official Open Brush release, but can be installed alongside the formal version. The Oculus build, like all sideloaded content, will be listed in ""Unknown Sources"", and will have the word ""Github"" appended to the name (with a different package name as well) to differentiate it from the official release).

Note that the ""experimental"" builds contain experimental brushes, and sketches created using the experimental brushes may appear differently when loaded in the official build of Open Brush!

In addition, there is also a version created for  Windows Monoscopic that is listed as an ""Artifact"" of the Github Actions, however, this is intended only for developers, and should not be used by general users. You can find it by browsing to the [commit list](https://github.com/icosa-gallery/open-brush/commits/main), and then clicking on the green check mark below the title (next to the XXX committed XXX ago), and scroll to the build you want, and click on **Details**. Then, towards the upper right corner, click on **Artifacts** and click on the name of the build. Unzip the downloaded file, and either run the executable (Desktop OpenXR/Monoscopic) or install the apk (Android Oculus) using `adb install com.Icosa.OpenBrush-github.apk`. 

## Important note from the original Tilt Brush README

The Tilt Brush trademark and logo (“Tilt Brush Trademarks”) are trademarks of
Google, and are treated separately from the copyright or patent license grants
contained in the Apache-licensed Tilt Brush repositories on GitHub. Any use of
the Tilt Brush Trademarks other than those permitted in these guidelines must be
approved in advance.

For more information, read the
[Tilt Brush Brand Guidelines](TILT_BRUSH_BRAND_GUIDELINES.md).

---

# Building the application

Get the Open Brush open-source application running on your own devices.

### Prerequisites

*   [Unity 2021.3.9f1](unityhub://2019.4.25f1/01a0494af254)
*   [Python 3](https://www.python.org/downloads/) (Optional —
    needed only if you wish to run the scripts in the `Support/bin` directory)
    Tested with Python 3.8.

### Running the application in the Unity editor

Follow these steps when running the application for the first time:

1.  Start Unity.
1.  Go to **File** > **Open Scene**. \
1.  Select `/Assets/Scenes/Main.unity`. Unity should automatically prompt you to
    import **TextMesh Pro**.
1.  Choose **Import TMP Essentials**. \
    You can also do this through **Window** > **TextMesh Pro** > **Import TMP
    Essential Resources**.
1.  Press **Play**.

These steps have been tested with Release 1.0.54.

### Building the application from the Unity editor

Although it's possible to build Open Brush using the standard Unity build tools,
we recommend using a build script to ensure the application builds with the
correct settings. To run this script, go to **Open Brush** > **Build** > **Do Build**,
or build from the Open Brush build window by navigating to **Open Brush** >
**Build** > **Build Window**.

Note: The application may take a while to build the first time.

### Building the application from the Windows command line

Use the `build` script in the `Support/bin` directory to specify the target
platform and the build options you wish to enable. Run `build —help` to see the
various build options.

### Additional features

You should be able to get the basic version of Open Brush up and running very
quickly. The following features will take a little more time.

*   [Google service API support](#google-service-api-support)
*   [Enabling native Oculus support](#enabling-native-oculus-support)
*   [Sketchfab support](#sketchfab-support)
*   [Offline rendering support](#offline-rendering-support)

## Systems that were replaced or removed when open-sourcing Tilt Brush

Some systems in Tilt Brush were removed or replaced with alternatives due to
open-source licensing issues. These are:

*   **Sonic Ether Natural Bloom**. The official Tilt Brush app uses a version
    purchased from the Asset Store; the open-source version uses
    [Sonic Ether's slightly modified open-source version](https://github.com/sonicether/SE-Natural-Bloom-Dirty-Lens).
*   **FXAA**. The official Tilt Brush app uses a modified version of the FXAA
    that Unity previously released with the standard assets on earlier versions
    of Unity - FXAA3 Console. This has been replaced with
    [FXAA by jintiao](https://github.com/jintiao/FXAA).
*   **Vignette and Chromatic Aberration**. The official Tilt Brush app uses
    modified versions of the Vignette and Chromatic Aberration effects that came
    with the standard assets in earlier versions of Unity. These have been
    replaced with a modified version of
    [KinoVignette by Keijiro](https://github.com/keijiro/KinoVignette).
*   **Tilt Shift**. The official Tilt Brush app uses modified versions of the
    Tilt Shift effect that came with the standard assets in earlier versions of
    Unity. These have been replaced with a modified version of
    [Tilt shift by ruby0x1](https://gist.github.com/ruby0x1/10324388).

## Generating Secrets file
Credentials for services such as Google and Sketchfab are stored in a `SecretsConfig` scriptable object. This has been ignored in the git config for safety. To add it back:

1.  Right click in the root `/Assets` folder in Unity's project window. 
    Select `Create`, then `Secrets Config`. This will create `Secrets.asset` in the Asset folder.
1.  In `Scenes/Main.unity` go to **App > Config** and replace `SecretsExample` 
    with the newly generated `Secrets.asset`.

## Google service API support

Set up Google API support to access Google services in the app.

### Enabling Google service APIs

Follow these steps when enabling Google service APIs:

1.  Create a new project in the
    [Google Cloud Console](https://console.developers.google.com/).
1.  Enable the following APIs and services:

    *   **YouTube Data API v3** — for uploading videos to YouTube
    *   **Google Drive API** — for backup to Google Drive
    *   **People API** — for username and profile picture

Note: The name of your application on the developer console should match the
name you've given the app in `App.kGoogleServicesAppName` in `App.cs`.

### Creating a Google API key

Follow these steps when creating a Google API key:

1.  Go to the Credentials page from the Google Cloud Console.
1.  Click **Create Credential** and select **API key** from the drop-down menu.

### Google OAuth consent screen information

The OAuth consent screen asks users for permission to access their Google
account. You should be able to configure it from the Credentials screen.

Follow these steps when configuring the OAuth consent screen:

1.  Fill in the name and logo of your app, as well as the scope of the user data
    that the app will access.
1.  Add the following paths to the list of scopes:

    *   Google Drive API `../auth/drive.appdata`
    *   Google Drive API `../auth/drive.file`

### Creating an OAuth credential

The credential identifies the application to the Google servers. Follow these
steps to create an OAuth credential:

1.  Create a new credential on the Credentials screen.
1.  Select **OAuth**, and then select **Other**. Take note of the client ID and
    client secret values that are created for you. Keep the client secret a
    secret!

### Storing the Google API Key and credential data

Follow these steps to store the Google API Key and credential data:

1.  Follow the steps to [create your secrets file](#-Generating-Secrets-file).
    Add a new item to the **Secrets** field.
1.  Select `Google` as the service. Paste in the API key, client ID, and client
    secret that were generated earlier.

## Enabling native Oculus support

Open Brush targets OpenXR instead of Oculus by default. Follow these steps to enable native Oculus support:
.
1.  In the **Standalone** and **Android** tabs of the Player settings, go to **Other Settings** > **Scripting Define Symbols**.
1. Click the + button to create a new entry.
1. Add `OCULUS_SUPPORTED` and press **Apply**.

### Building your app for Oculus Quest

Follow these steps to build your app for Oculus Quest:

1.  Set up your machine for
    [Oculus Quest Development](https://developer.oculus.com/documentation/unity/book-unity-gsg/?device=QUEST).
1.  Make sure the following are set in Unity:
    *   **Open Brush** > **Build** > **Plugin: Oculus**
    *   **Open Brush** > **Build** > **Platform: Android**
    *   **Open Brush** > **Build** > **Runtime: IL2CPP**
1.  Navigate to **Open Brush** > **Build** > **Do Build**.
1.  Find the generated executable. It will most likely be somewhere under
    `../Builds/OculusMobile_Release_OpenBrush/`.
1.  Run `adb install com.Icosa.OpenBrush.apk`.

### Publishing to Oculus stores

Note: _Tilt Brush_ is a Google trademark. If you intend to publish a cloned
version of the application, you are required to
choose a different name to distinguish it from
the official version.

Follow these steps to publish to Oculus stores:

1.  Get an application ID from Oculus. The desktop and quest versions of each
    application need separate IDs.
1.  Follow the steps to [create your secrets file](#-Generating-Secrets-file).
    Add 2 new items to the **Secrets** field.
1.  Add these IDs to the `Secrets` file. Both `Oculus` and `OculusMobile` should
    have their own entries.
1.  Put the app IDs in the `Client ID` field for each.

## Open Brush intro sketch

The Open Brush intro sketch uses some slightly modified shaders to produce the
animating-in effect while the sketch fades in. For faster loading, the intro
sketch is turned into a `*.prefab` file beforehand. Only the shaders used in the
intro sketch have been converted to work with the introduction.

*   The current intro sketches are located in `Support/Sketches/Intro`. There
    are two versions, one for PC and one for mobile.
*   The `*.prefab` files are located in `Assets/Prefabs/Intro`.
*   The materials and shaders used in the intro are located in
    `Assets/Materials/IntroMaterials`.
*   The `Assets/PlatformConfigPC` and `Assets/PlatformConfigMobile` files
    reference the `*.prefab` files that will be used in the intro.

### Creating an intro sketch

Follow these steps to replace or alter the intro sketch:

1.  Make sure the sketch of your choice is already loaded. Run Open Brush in the
    Unity Editor.
1.  Select **Open Brush** > **Convert To Intro Materials** in the main Unity menu.
    This converts the materials in the sketch to the intro versions. \
    You will get warnings in the console for any materials it could not convert,
    as well as a summary of how many materials it converted.
1.  Navigate the hierarchy. Under the **Main** scene, open `SceneParent/Main
    Canvas`. Select any of the `Batch_...` objects to check whether they have
    the intro materials set.
1.  Move any objects that do not start with `Batch_` out from under the **Main
    Canvas** node.
1.  Select the **Main Canvas** node and run the **Open Brush** > **Save Game Object As Prefab**
menu command. \
    The scene will be saved as a `*.prefab` file called `gameobject_to_prefab`.
    under the `Assets/TestData` folder.
1.  Move the game object into the `Assets/Prefabs/Intro` folder.
1.  Update the references in `Assets/PlatformConfigPC` and
    `Assets/PlatformConfigMobile` to point to your new prefab file.

### Creating an intro sketch for mobile applications

You may want to have a pared-down version of the intro sketch for the mobile
version of the app. Stroke simplification is located in the **Settings** menu
inside Open Brush.

## New Scenes

By default, your app will only build the scenes defined in the **DoBuild** method (string[] scenes = {...} ) in `BuildTiltBrush.cs` under  `Assets/Editor/`. Make sure to add your custom scenes to this array if you want to see them in app.

## Sketchfab support

Follow these steps to enable Sketchfab support:

1.  [Contact Sketchfab](https://sketchfab.com/developers/oauth) for a client ID
    and secret before you can upload to their service.
    
    -  The **Application Name** will probably need to be changed
    -  The **Grant Type** should be **Authorization Code** 
    -  The **URI** should be **http://localhost:40074/sketchfab**
1.  Follow the steps to [create your secrets file](#-Generating-Secrets-file).
    Add a new item to the **Secrets** field.
1.  Add the client ID and secret to the field.
1.  Set the service as **Sketchfab**. Leave the API key blank.

### Video support bug fix

If you add video support, you may encounter a bug where the ""Looking for audio""
and ""Play some music on your computer"" text will disappear if the controller is
angled too far. Fix this by doing the following:

1.  In Unity, find the `/Assets/TextMesh Pro/Resources/Shaders/TMP_SDF.shader`
    file.
1.  Duplicate it and rename this file `TMP_SDF-WriteDepth.shader`.
1.  Open the new file in a code or text editor and make the following changes to
    it:
    1.  Change the name from `TextMeshPro/Distance Field` to
        `TextMeshPro/Distance Field Depth`.
    1.  Change `Zwrite Off` to `Zwrite On`.
1.  In Unity, select `/Assets/Fonts/Oswald-Light SDF.asset`.
1.  Under `Atlas & Material`, double click `Oswald-Light SDF Material`.
1.  At the top, change the name for `Shader` from `TextMeshPro/Distance Field`
    to `TextMeshPro/Distance Field Depth`.

## Offline rendering support

When the user records a video from a saved sketch in Open Brush, a `.bat` file
is generated next to the `.mp4` for offline rendering support. This `.bat` file
requires the path to the executable of Open Brush. The code for writing out this
path to the file has been removed.

Follow these steps to restore the path:

1.  Open the file `Assets/Scripts/Rendering/VideoRecorderUtils.cs` in a code or
    text editor.
1.  Look for the function `CreateOfflineRenderBatchFile` near the bottom of the
    file.
1.  In the function, find the comments on how to modify the string to point to
    the executable path.
1.  Update the string to point to the correct path.

## Experimental mode

Experimental mode is where features live before they are ready to be released in
a production build. This mode enables the experimental brushes and experimental
panel while disabling the intro sequence. Experimental mode can be enabled from
the settings panel, and requires a restart.

**New features and brushes that you find in experimental mode may not work as
expected.** Sketches that use experimental features and brushes won't work on
Icosa or Sketchfab, and may break if loaded into production versions of Open
Brush.

### Making your code experimental

Code in experimental mode is usually surrounded by the following block:

```
    if (Config.IsExperimental) {
      // Experimental code goes here
    }
```

### Experimental brushes

Experimental brushes and environments are located in the `Assets/Resources/X`
folder. They are not visible in non-experimental mode.
","Open Brush is a free fork of Tilt Brush, a room-scale 3D-painting virtual-
reality application available from Google. We have made a large number of
changes from the original repository, including Unity upgrades and feature
additions to bring Open Brush up to modern XR development standards."
1267,"A simple, secure, and scalable PHP application framework","# Opulence
[![Build Status](https://travis-ci.com/opulencephp/Opulence.svg)](https://travis-ci.com/opulencephp/Opulence)
[![Latest Stable Version](https://poser.pugx.org/opulence/opulence/v/stable.svg)](https://packagist.org/packages/opulence/opulence)
[![Latest Unstable Version](https://poser.pugx.org/opulence/opulence/v/unstable.svg)](https://packagist.org/packages/opulence/opulence)
[![License](https://poser.pugx.org/opulence/opulence/license.svg)](https://packagist.org/packages/opulence/opulence)

## Introduction
**Opulence** is a PHP web application framework that simplifies the difficult parts of creating and maintaining a secure, scalable website.  With Opulence, things like database management, caching, ORM, page templates, and routing are a cinch.  It was written with customization, performance, and best-practices in mind.  Thanks to test-driven development (TDD), the framework is reliable and thoroughly tested. Opulence is split into components, which can be installed separately or bundled together.

## Installation
Opulence can be installed using Composer:

```
composer create-project opulence/project --prefer-dist
```

## Documentation
For complete documentation, <a href=""https://www.opulencephp.com"" target=""_blank"">visit the official website</a>.

## Requirements
* PHP 7.3
* OpenSSL
* mbstring

## License
This software is licensed under the MIT license.  Please read the LICENSE for more information.

## Author
Opulence was written by [David Young](https://twitter.com/opulencephp).
","Opulence is a PHP web application framework that simplifies the difficult parts
of creating and maintaining a secure, scalable website. It was written with
customization, performance, and best-practices in mind. Opulence is split into
components, which can be installed separately or bundled together. The software
is licensed under the MIT license. Please read the LICENSE for more information.
For more information about the software, visit the official website at:
http://www.opulencephp.com."
1379,"A simple, secure, and scalable PHP application framework","# Opulence
[![Build Status](https://travis-ci.com/opulencephp/Opulence.svg)](https://travis-ci.com/opulencephp/Opulence)
[![Latest Stable Version](https://poser.pugx.org/opulence/opulence/v/stable.svg)](https://packagist.org/packages/opulence/opulence)
[![Latest Unstable Version](https://poser.pugx.org/opulence/opulence/v/unstable.svg)](https://packagist.org/packages/opulence/opulence)
[![License](https://poser.pugx.org/opulence/opulence/license.svg)](https://packagist.org/packages/opulence/opulence)

## Introduction
**Opulence** is a PHP web application framework that simplifies the difficult parts of creating and maintaining a secure, scalable website.  With Opulence, things like database management, caching, ORM, page templates, and routing are a cinch.  It was written with customization, performance, and best-practices in mind.  Thanks to test-driven development (TDD), the framework is reliable and thoroughly tested. Opulence is split into components, which can be installed separately or bundled together.

## Installation
Opulence can be installed using Composer:

```
composer create-project opulence/project --prefer-dist
```

## Documentation
For complete documentation, <a href=""https://www.opulencephp.com"" target=""_blank"">visit the official website</a>.

## Requirements
* PHP 7.3
* OpenSSL
* mbstring

## License
This software is licensed under the MIT license.  Please read the LICENSE for more information.

## Author
Opulence was written by [David Young](https://twitter.com/opulencephp).
","Opulence is a PHP web application framework that simplifies the difficult parts
of creating and maintaining a secure, scalable website. It was written with
customization, performance, and best-practices in mind. Opulence is split into
components, which can be installed separately or bundled together. The software
is licensed under the MIT license. Please read the LICENSE for more information.
For more information about the software, visit the official website at:
http://www.opulencephp.com."
2168,Material Design component library for Mithril and React,"# Polythene

[![Join the chat at https://gitter.im/ArthurClemens/Polythene](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ArthurClemens/Polythene?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Material Design component library for [Mithril](http://mithril.js.org) and [React](https://facebook.github.io/react/).

Can be used as general-purpose component library that includes dialogs, cards, notifications, lists, buttons, form elements, and more.

<a href=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink.png"" target=""_blank""><img src=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink-thumb.jpg"" height=""500"" /></a>

<a href=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink.png"" target=""_blank"">Kitchen sink - click to enlarge</a>


## Main features

* Allows creating dynamic and interactive interfaces with ease
* Closely follows the Material Design specification
* Versatile theming options to totally deviate from Material Design
* Supports touch, mouse and keyboard
* Extensive documentation with example code


## Demos

* [Live examples for Mithril](docs/online-examples-mithril.md)
* [Live examples for React](docs/online-examples-react.md)


## Getting started

* [Introduction](docs/introduction.md)
* [Getting started with Mithril](docs/getting-started-mithril.md)
* [Getting started with React](docs/getting-started-react.md)

### Setup examples / starter kits

#### Mithril

* [polythene-mithril-setup](https://github.com/ArthurClemens/polythene-mithril-setup)
* [polythene-mithril-typescript-setup](https://github.com/ArthurClemens/polythene-mithril-typescript-setup)
* [polythene-mithril-material-components-web](https://github.com/ArthurClemens/polythene-mithril-material-components-web)
* [polythene-mithril-coffeescript-setup](https://github.com/ArthurClemens/polythene-mithril-coffeescript-setup)

#### React

* [polythene-react-setup](https://github.com/ArthurClemens/polythene-react-setup)


## Guides

* [Documentation: components, examples, CSS, theming](docs/README.md)
* [Extending other libraries](docs/extending.md)
* [Developing](docs/developing.md)
* [Change log](docs/changes.md)
* [Known issues](docs/known-issues.md)


## Compatibility

* Mithril 1.x, Mithril 2.x
* React 16.x
* Bundlers: Rollup, Webpack 3 and 4
* TypeScript


## Browser support

* Chrome: 54+
* Edge: 13+
* Firefox: 49+
* Internet Explorer: 11 - see [Known issues](docs/known-issues.md)
* Mobile Safari: 9+
* Safari: 9+
","Material Design component library for Mithril and React. Can be used as general-
purpose component library that includes dialogs, cards, notifications, lists,
buttons, form elements, and more. Supports touch, mouse and keyboard. Extensive
documentation with example code."
3444,Oxford Deep NLP 2017 course,"# Preamble
This repository contains the lecture slides and course description for the [Deep Natural Language Processing](http://www.cs.ox.ac.uk/teaching/courses/2016-2017/dl/) course offered in Hilary Term 2017 at the University of Oxford. 

This is an advanced course on natural language processing. Automatically processing natural language inputs and producing language outputs is a key component of Artificial General Intelligence. The ambiguities and noise inherent in human communication render traditional symbolic AI techniques ineffective for representing and analysing language data. Recently statistical techniques based on neural networks have achieved a number of remarkable successes in natural language processing leading to a great deal of commercial and academic interest in the field

This is an applied course focussing on recent advances in analysing and generating speech and text using recurrent neural networks. We introduce the mathematical definitions of the relevant machine learning models and derive their associated optimisation algorithms. The course covers a range of applications of neural networks in NLP including analysing latent dimensions in text, transcribing speech to text, translating between languages, and answering questions. These topics are organised into three high level themes forming a progression from understanding the use of neural networks for sequential language modelling, to understanding their use as conditional language models for transduction tasks, and finally to approaches employing these techniques in combination with other mechanisms for advanced applications. Throughout the course the practical implementation of such models on CPU and GPU hardware is also discussed.

This course is organised by Phil Blunsom and delivered in partnership with the DeepMind Natural Language Research Group.

# Lecturers
* Phil Blunsom (Oxford University and DeepMind)
* Chris Dyer (Carnegie Mellon University and DeepMind)
* Edward Grefenstette (DeepMind)
* Karl Moritz Hermann (DeepMind)
* Andrew Senior (DeepMind)
* Wang Ling (DeepMind)
* Jeremy Appleyard (NVIDIA)

# TAs
* Yannis Assael
* Yishu Miao
* Brendan Shillingford
* Jan Buys

# Timetable
## Practicals
 * Group 1 - Monday, 9:00-11:00 (Weeks 2-8), 60.05 Thom Building
 * Group 2 - Friday, 16:00-18:00 (Weeks 2-8), Room 379
 
1. [Practical 1: word2vec](https://github.com/oxford-cs-deepnlp-2017/practical-1)
2. [Practical 2: text classification](https://github.com/oxford-cs-deepnlp-2017/practical-2)
3. [Practical 3: recurrent neural networks for text classification and language modelling](https://github.com/oxford-cs-deepnlp-2017/practical-3)
4. [Practical 4: open practical](https://github.com/oxford-cs-deepnlp-2017/practical-open)

## Lectures
Public Lectures are held in Lecture Theatre 1 of the Maths Institute, on Tuesdays and Thursdays (except week 8), 16:00-18:00 (Hilary Term Weeks 1,3-8).

# Lecture Materials
## 1. Lecture 1a - Introduction [Phil Blunsom]
This lecture introduces the course and motivates why it is interesting to study language processing using Deep Learning techniques.

[[slides]](Lecture%201a%20-%20Introduction.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_1a_intro.mp4)

## 2. Lecture 1b - Deep Neural Networks Are Our Friends [Wang Ling]
This lecture revises basic machine learning concepts that students should know before embarking on this course.

[[slides]](Lecture%201b%20-%20Deep%20Neural%20Networks%20Are%20Our%20Friends.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_1b_friends.mp4)

## 3. Lecture 2a- Word Level Semantics [Ed Grefenstette]
Words are the core meaning bearing units in language. Representing and learning the meanings of words is a fundamental task in NLP and in this lecture the concept of a word embedding is introduced as a practical and scalable solution.

[[slides]](Lecture%202a-%20Word%20Level%20Semantics.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_2a_lexical_semantics.mp4)

### Reading

#### Embeddings Basics
* [Firth, John R. ""A synopsis of linguistic theory, 1930-1955."" (1957): 1-32.](http://annabellelukin.edublogs.org/files/2013/08/Firth-JR-1962-A-Synopsis-of-Linguistic-Theory-wfihi5.pdf)
* [Curran, James Richard. ""From distributional to semantic similarity."" (2004).](https://www.era.lib.ed.ac.uk/bitstream/handle/1842/563/IP030023.pdf?sequence=2&isAllowed=y)
* [Collobert, Ronan, et al. ""Natural language processing (almost) from scratch."" Journal of Machine Learning Research 12. Aug (2011): 2493-2537.](http://www.jmlr.org/papers/volume12/collobert11a/collobert11a.pdf)
* [Mikolov, Tomas, et al. ""Distributed representations of words and phrases and their compositionality."" Advances in neural information processing systems. 2013.](http://papers.nips.cc/paper/5021-distributed-representations-of-words-and-phrases-and-their-compositionality.pdf)

#### Datasets and Visualisation
* [Finkelstein, Lev, et al. ""Placing search in context: The concept revisited."" Proceedings of the 10th international conference on World Wide Web. ACM, 2001.](http://www.iicm.tugraz.at/thesis/cguetl_diss/literatur/Kapitel07/References/Finkelstein_et_al._2002/p116-finkelstein.pdf)
* [Hill, Felix, Roi Reichart, and Anna Korhonen. ""Simlex-999: Evaluating semantic models with (genuine) similarity estimation."" Computational Linguistics (2016).](http://www.aclweb.org/website/old_anthology/J/J15/J15-4004.pdf)
* [Maaten, Laurens van der, and Geoffrey Hinton. ""Visualizing data using t-SNE."" Journal of Machine Learning Research 9.Nov (2008): 2579-2605.](http://www.jmlr.org/papers/volume9/vandermaaten08a/vandermaaten08a.pdf)

#### Blog posts
* [Deep Learning, NLP, and Representations](http://colah.github.io/posts/2014-07-NLP-RNNs-Representations/), Christopher Olah.
* [Visualizing Top Tweeps with t-SNE, in Javascript](http://karpathy.github.io/2014/07/02/visualizing-top-tweeps-with-t-sne-in-Javascript/), Andrej Karpathy.

#### Further Reading
* [Hermann, Karl Moritz, and Phil Blunsom. ""Multilingual models for compositional distributed semantics."" arXiv preprint arXiv:1404.4641 (2014).](https://arxiv.org/pdf/1404.4641.pdf)
* [Levy, Omer, and Yoav Goldberg. ""Neural word embedding as implicit matrix factorization."" Advances in neural information processing systems. 2014.](http://u.cs.biu.ac.il/~nlp/wp-content/uploads/Neural-Word-Embeddings-as-Implicit-Matrix-Factorization-NIPS-2014.pdf)
* [Levy, Omer, Yoav Goldberg, and Ido Dagan. ""Improving distributional similarity with lessons learned from word embeddings."" Transactions of the Association for Computational Linguistics 3 (2015): 211-225.](https://www.transacl.org/ojs/index.php/tacl/article/view/570/124)
* [Ling, Wang, et al. ""Two/Too Simple Adaptations of Word2Vec for Syntax Problems."" HLT-NAACL. 2015.](https://www.aclweb.org/anthology/N/N15/N15-1142.pdf)

## 4. Lecture 2b - Overview of the Practicals [Chris Dyer]
This lecture motivates the practical segment of the course.

[[slides]](Lecture%202b%20-%20Overview%20of%20the%20Practicals.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_2b_practicals.mp4)

## 5. Lecture 3 - Language Modelling and RNNs Part 1 [Phil Blunsom]
Language modelling is important task of great practical use in many NLP applications. This lecture introduces language modelling, including traditional n-gram based approaches and more contemporary neural approaches. In particular the popular Recurrent Neural Network (RNN) language model is introduced and its basic training and evaluation algorithms described.

[[slides]](Lecture%203%20-%20Language%20Modelling%20and%20RNNs%20Part%201.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_3_modelling_1.mp4)

### Reading

#### Textbook
 * [Deep Learning, Chapter 10](http://www.deeplearningbook.org/contents/rnn.html).
 
#### Blogs 
 * [The Unreasonable Effectiveness of Recurrent Neural Networks](http://karpathy.github.io/2015/05/21/rnn-effectiveness/), Andrej Karpathy.
 * [The unreasonable effectiveness of Character-level Language Models](http://nbviewer.jupyter.org/gist/yoavg/d76121dfde2618422139), Yoav Goldberg.
 * [Explaining and illustrating orthogonal initialization for recurrent neural networks](http://smerity.com/articles/2016/orthogonal_init.html), Stephen Merity.

## 6. Lecture 4 - Language Modelling and RNNs Part 2 [Phil Blunsom]
This lecture continues on from the previous one and considers some of the issues involved in producing an effective implementation of an RNN language model. The vanishing and exploding gradient problem is described and architectural solutions, such as Long Short Term Memory (LSTM), are introduced. 

[[slides]](Lecture%204%20-%20Language%20Modelling%20and%20RNNs%20Part%202.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_4_modelling_2.mp4)

### Reading

#### Textbook
 * [Deep Learning, Chapter 10](http://www.deeplearningbook.org/contents/rnn.html).
 
#### Vanishing gradients, LSTMs etc.
* [On the difficulty of training recurrent neural networks. Pascanu et al., ICML 2013.](http://jmlr.csail.mit.edu/proceedings/papers/v28/pascanu13.pdf)
* [Long Short-Term Memory. Hochreiter and Schmidhuber, Neural Computation 1997.](http://dl.acm.org/citation.cfm?id=1246450)
* [Learning Phrase Representations using RNN EncoderDecoder for Statistical Machine Translation. Cho et al, EMNLP 2014.](https://arxiv.org/abs/1406.1078)
* Blog: [Understanding LSTM Networks](http://colah.github.io/posts/2015-08-Understanding-LSTMs/), Christopher Olah.

#### Dealing with large vocabularies
* [A scalable hierarchical distributed language model. Mnih and Hinton, NIPS 2009.](https://papers.nips.cc/paper/3583-a-scalable-hierarchical-distributed-language-model.pdf)
* [A fast and simple algorithm for training neural probabilistic language models. Mnih and Teh, ICML 2012.](https://www.cs.toronto.edu/~amnih/papers/ncelm.pdf)
* [On Using Very Large Target Vocabulary for Neural Machine Translation. Jean et al., ACL 2015.](http://www.aclweb.org/anthology/P15-1001)
* [Exploring the Limits of Language Modeling. Jozefowicz et al., arXiv 2016.](https://arxiv.org/abs/1602.02410)
* [Efficient softmax approximation for GPUs. Grave et al., arXiv 2016.](https://arxiv.org/abs/1609.04309)
* [Notes on Noise Contrastive Estimation and Negative Sampling. Dyer, arXiv 2014.](https://arxiv.org/abs/1410.8251)
* [Pragmatic Neural Language Modelling in Machine Translation. Baltescu and Blunsom, NAACL 2015](http://www.aclweb.org/anthology/N15-1083)

#### Regularisation and dropout
* [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks. Gal and Ghahramani, NIPS 2016.](https://arxiv.org/abs/1512.05287)
* Blog: [Uncertainty in Deep Learning](http://mlg.eng.cam.ac.uk/yarin/blog_2248.html), Yarin Gal.

#### Other stuff
* [Recurrent Highway Networks. Zilly et al., arXiv 2016.](https://arxiv.org/abs/1607.03474)
* [Capacity and Trainability in Recurrent Neural Networks. Collins et al., arXiv 2016.](https://arxiv.org/abs/1611.09913)

## 7. Lecture 5 - Text Classification [Karl Moritz Hermann]
This lecture discusses text classification, beginning with basic classifiers, such as Naive Bayes, and progressing through to RNNs and Convolution Networks.

[[slides]](Lecture%205%20-%20Text%20Classification.pdf) 
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_5_text_classification.mp4)

### Reading
 * [Recurrent Convolutional Neural Networks for Text Classification. Lai et al. AAAI 2015.](http://www.aaai.org/ocs/index.php/AAAI/AAAI15/paper/download/9745/9552) 
 * [A Convolutional Neural Network for Modelling Sentences, Kalchbrenner et al. ACL 2014.](http://www.aclweb.org/anthology/P14-1062)
 * [Semantic compositionality through recursive matrix-vector, Socher et al. EMNLP 2012.](http://nlp.stanford.edu/pubs/SocherHuvalManningNg_EMNLP2012.pdf)
 * Blog: [Understanding Convolution Neural Networks For NLP](http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/), Denny Britz.
 * Thesis: [Distributional Representations for Compositional Semantics, Hermann (2014).](https://arxiv.org/abs/1411.3146)

## 8. Lecture 6 - Deep NLP on Nvidia GPUs [Jeremy Appleyard]
This lecture introduces Graphical Processing Units (GPUs) as an alternative to CPUs for executing Deep Learning algorithms. The strengths and weaknesses of GPUs are discussed as well as the importance of understanding how memory bandwidth and computation impact throughput for RNNs.

[[slides]](Lecture%206%20-%20Nvidia%20RNNs%20and%20GPUs.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_6_nvidia_gpus.mp4)

### Reading
* [Optimizing Performance of Recurrent Neural Networks on GPUs. Appleyard et al., arXiv 2016.](https://arxiv.org/abs/1604.01946)
* [Persistent RNNs: Stashing Recurrent Weights On-Chip, Diamos et al., ICML 2016](http://jmlr.org/proceedings/papers/v48/diamos16.pdf)
* [Efficient softmax approximation for GPUs. Grave et al., arXiv 2016.](https://arxiv.org/abs/1609.04309)


## 9. Lecture 7 - Conditional Language Models [Chris Dyer]
In this lecture we extend the concept of language modelling to incorporate prior information. By conditioning an RNN language model on an input representation we can generate contextually relevant language. This very general idea can be applied to transduce sequences into new sequences for tasks such as translation and summarisation, or images into captions describing their content.

[[slides]](Lecture%207%20-%20Conditional%20Language%20Modeling.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_7_conditional_lang_mod.mp4)

### Reading
* [Recurrent Continuous Translation Models. Kalchbrenner and Blunsom, EMNLP 2013](http://anthology.aclweb.org/D/D13/D13-1176.pdf)
* [Sequence to Sequence Learning with Neural Networks. Sutskever et al., NIPS 2014](https://arxiv.org/abs/1409.3215)
* [Multimodal Neural Language Models. Kiros et al., ICML 2014](http://www.cs.toronto.edu/~rkiros/papers/mnlm2014.pdf)
* [Show and Tell: A Neural Image Caption Generator. Vinyals et al., CVPR 2015](https://arxiv.org/abs/1411.4555)


## 10. Lecture 8 - Generating Language with Attention [Chris Dyer]
This lecture introduces one of the most important and influencial mechanisms employed in Deep Neural Networks: Attention. Attention augments recurrent networks with the ability to condition on specific parts of the input and is key to achieving high performance in tasks such as Machine Translation and Image Captioning.

[[slides]](Lecture%208%20-%20Conditional%20Language%20Modeling%20with%20Attention.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_8_conditional_lang_mod_att.mp4)

### Reading
* [Neural Machine Translation by Jointly Learning to Align and Translate. Bahdanau et al., ICLR 2015](https://arxiv.org/abs/1409.0473)
* [Show, Attend, and Tell: Neural Image Caption Generation with Visual Attention. Xu et al., ICML 2015](https://arxiv.org/pdf/1502.03044.pdf)
* [Incorporating structural alignment biases into an attentional neural translation model. Cohn et al., NAACL 2016](http://www.aclweb.org/anthology/N16-1102)
* [BLEU: a Method for Automatic Evaluation of Machine Translation. Papineni et al, ACL 2002](http://www.aclweb.org/anthology/P02-1040.pdf)


## 11. Lecture 9 - Speech Recognition (ASR) [Andrew Senior]
Automatic Speech Recognition (ASR) is the task of transducing raw audio signals of spoken language into text transcriptions. This talk covers the history of ASR models, from Gaussian Mixtures to attention augmented RNNs, the basic linguistics of speech, and the various input and output representations frequently employed.

[[slides]](Lecture%209%20-%20Speech%20Recognition.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_9_speech_recognition.mp4)


## 12. Lecture 10 - Text to Speech (TTS) [Andrew Senior]
This lecture introduces algorithms for converting written language into spoken language (Text to Speech). TTS is the inverse process to ASR, but there are some important differences in the models applied. Here we review traditional TTS models, and then cover more recent neural approaches such as DeepMind's WaveNet model.

[[slides]](Lecture%2010%20-%20Text%20to%20Speech.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_10_text_speech.mp4)


## 13. Lecture 11 - Question Answering [Karl Moritz Hermann]

[[slides]](Lecture%2011%20-%20Question%20Answering.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_11_question_answering.mp4)

### Reading
* [Teaching machines to read and comprehend. Hermann et al., NIPS 2015](http://papers.nips.cc/paper/5945-teaching-machines-to-read-and-comprehend)
* [Deep Learning for Answer Sentence Selection. Yu et al., NIPS Deep Learning Workshop 2014](https://arxiv.org/abs/1412.1632)


## 14. Lecture 12 - Memory [Ed Grefenstette]

[[slides]](Lecture%2012-%20Memory%20Lecture.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_12_memory.mp4)

### Reading
* [Hybrid computing using a neural network with dynamic external memory. Graves et al., Nature 2016](http://www.nature.com/nature/journal/v538/n7626/abs/nature20101.html)
* [Reasoning about Entailment with Neural Attention. Rocktäschel et al., ICLR 2016](https://arxiv.org/abs/1509.06664)
* [Learning to transduce with unbounded memory. Grefenstette et al., NIPS 2015](http://papers.nips.cc/paper/5648-learning-to-transduce-with-unbounded-memory)
* [End-to-End Memory Networks. Sukhbaatar et al., NIPS 2015](https://arxiv.org/abs/1503.08895)


## 15. Lecture 13 - Linguistic Knowledge in Neural Networks

[[slides]](Lecture%2013%20-%20Linguistics.pdf)
[[video]](http://media.podcasts.ox.ac.uk/comlab/deep_learning_NLP/2017-01_deep_NLP_13_linguistic_knowledge_neural.mp4)


# Piazza
We will be using Piazza to facilitate class discussion during the course. Rather than emailing questions directly, I encourage you to post your questions on Piazza to be answered by your fellow students, instructors, and lecturers. However do please do note that all the lecturers for this course are volunteering their time and may not always be available to give a response.

Find our class page at: https://piazza.com/ox.ac.uk/winter2017/dnlpht2017/home

# Assessment
The primary assessment for this course will be a take-home assignment issued at the end of the term. This assignment will ask questions drawing on the concepts and models discussed in the course, as well as from selected research publications. The nature of the questions will include analysing mathematical descriptions of models and proposing extensions, improvements, or evaluations to such models. The assignment may also ask students to read specific research publications and discuss their proposed algorithms in the context of the course. In answering questions students will be expected to both present coherent written arguments and use appropriate mathematical formulae, and possibly pseudo-code, to illustrate answers.

The practical component of the course will be assessed in the usual way.

# Acknowledgements
This course would not have been possible without the support of [DeepMind](http://www.deepmind.com), [The University of Oxford Department of Computer Science](http://www.cs.ox.ac.uk/), [Nvidia](http://www.nvidia.com), and the generous donation of GPU resources from [Microsoft Azure](https://azure.microsoft.com).
","This repository contains the lecture slides and course description for the [Deep
Natural Language Processing course offered in Hilary Term 2017 at the University
of Oxford. The course covers a range of applications of neural networks in NLP
including analysing latent dimensions in text, transcribing speech to text,
translating between languages, and answering questions."
863,CSS styled emails without the hassle.,"# premailer-rails

CSS styled emails without the hassle.

[![Build Status][build-image]][build-link]
[![Gem Version][gem-image]][gem-link]
[![Code Climate][gpa-image]][gpa-link]

## Introduction

This gem is a drop in solution for styling HTML emails with CSS without having
to do the hard work yourself.

Styling emails is not just a matter of linking to a stylesheet. Most clients,
especially web clients, ignore linked stylesheets or `<style>` tags in the HTML.
The workaround is to write all the CSS rules in the `style` attribute of each
tag inside your email. This is a rather tedious and hard to maintain approach.

Premailer to the rescue! The great [premailer] gem applies all CSS rules to each
matching HTML element by adding them to the `style` attribute. This allows you
to keep HTML and CSS in separate files, just as you're used to from web
development, thus keeping your sanity.

This gem is an adapter for premailer to work with [actionmailer] out of the box.
Actionmailer is the email framework used in Rails, which also works outside of
Rails. Although premailer-rails has certain Rails specific features, **it also
works in the absence of Rails** making it compatible with other frameworks such
as sinatra.

## How It Works

premailer-rails works with actionmailer by registering a delivery hook. This
causes all emails that are delivered to be processed by premailer-rails. This
means that by simply including premailer-rails in your `Gemfile` you'll get
styled emails without having to set anything up.

Whenever premailer-rails processes an email, it collects the URLs of all linked
stylesheets (`<link rel=""stylesheet"" href=""css_url"">`). Then, for each of these
URLs, it tries to get the content through a couple of strategies. As long as
a strategy does not return anything, the next one is used. The strategies
available are:

-   `:filesystem`: If there's a file inside `public/` with the same path as in
    the URL, it is read from disk. E.g. if the URL is
    `http://cdn.example.com/assets/email.css` the contents of the file located
    at `public/assets/email.css` gets returned if it exists.

-   `:asset_pipeline`: If Rails is available and the asset pipeline is enabled,
    the file is retrieved through the asset pipeline. E.g. if the URL is
    `http://cdn.example.com/assets/email-fingerprint123.css`, the file
    `email.css` is requested from the asset pipeline. That is, the fingerprint
    and the prefix (in this case `assets` is the prefix) are stripped before
    requesting it from the asset pipeline.

-   `:network`: As a last resort, the URL is simply requested and the response
    body is used. This is useful when the assets are not bundled in the
    application and only available on a CDN. On Heroku e.g. you can add assets
    to your `.slugignore` causing your assets to not be available to the app
    (and thus resulting in a smaller app) and deploy the assets to a CDN such
    as S3/CloudFront.

You can configure which strategies you want to use as well as specify their
order. Refer to the *Configuration* section for more on this.

Note that the retrieved CSS is cached when the gem is running with Rails in
production.

## Installation

Simply add the gem to your `Gemfile`:

```ruby
gem 'premailer-rails'
```

premailer-rails and premailer require a gem that is used to parse the email's
HTML. For a list of supported gems and how to select which one to use, please
refer to the [*Adapter*
section](https://github.com/premailer/premailer#adapters) of premailer. Note
that there is no hard dependency from either gem so you should add one yourself.
Also note that this gem is only tested with [nokogiri].

## Configuration

Premailer itself accepts a number of options. In order for premailer-rails to
pass these options on to the underlying premailer instance, specify them
as follows (in Rails you could do that in an initializer such as
`config/initializers/premailer_rails.rb`):

```ruby
Premailer::Rails.config.merge!(preserve_styles: true, remove_ids: true)
```

For a list of options, refer to the [premailer documentation]. The default
configs are:

```ruby
{
  input_encoding: 'UTF-8',
  generate_text_part: true,
  strategies: [:filesystem, :asset_pipeline, :network]
}
```

If you don't want to automatically generate a text part from the html part, set
the config `:generate_text_part` to false.

Note that the options `:with_html_string` and `:css_string` are used internally
by premailer-rails and thus will be overridden.

If you're using this gem outside of Rails, you'll need to call
`Premailer::Rails.register_interceptors` manually in order for it to work. This
is done ideally in some kind of initializer, depending on the framework you're
using.

premailer-rails reads all stylesheet `<link>` tags, inlines the linked CSS
and removes the tags. If you wish to ignore a certain tag, e.g. one that links to
external fonts such as Google Fonts, you can add a `data-premailer=""ignore""`
attribute.

## Usage

premailer-rails processes all outgoing emails by default. If you wish to skip
premailer for a certain email, simply set the `:skip_premailer` header:

```ruby
class UserMailer < ActionMailer::Base
  def welcome_email(user)
    mail to: user.email,
         subject: 'Welcome to My Awesome Site',
         skip_premailer: true
  end
end
```

Note that the mere presence of this header causes premailer to be skipped, i.e.,
even setting `skip_premailer: false` will cause premailer to be skipped. The
reason for that is that the `skip_premailer` is a simple header and the value is
transformed into a string, causing `'false'` to become truthy.

Emails are only processed upon delivery, i.e. when calling `#deliver` on the
email, or when [previewing them in
rails](http://api.rubyonrails.org/v4.1.0/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Previewing+emails).
If you wish to manually trigger the inlining, you can do so by calling the hook:

```ruby
mail = SomeMailer.some_message(args)
Premailer::Rails::Hook.perform(mail)
```

This will modify the email in place, useful e.g. in tests.

## Supported Rails Versions

This gem is tested on Rails versions 5 through 7.

For Rails 7, it support both the classical Sprockets asset pipeline as well as the new [Propshaft](https://github.com/rails/propshaft) gem.

If you're looking to integrate with Webpacker, check out [these instructions](https://github.com/fphilipe/premailer-rails/issues/232#issuecomment-839819705).

## Small Print

### Author

Philipe Fatio ([@fphilipe][fphilipe twitter])

### License

premailer-rails is released under the MIT license. See the [license file].

[build-image]: https://github.com/fphilipe/premailer-rails/actions/workflows/test.yml/badge.svg
[build-link]:  https://github.com/fphilipe/premailer-rails/actions/workflows/test.yml
[gem-image]:   https://badge.fury.io/rb/premailer-rails.svg
[gem-link]:    https://rubygems.org/gems/premailer-rails
[gpa-image]:   https://codeclimate.com/github/fphilipe/premailer-rails.svg
[gpa-link]:    https://codeclimate.com/github/fphilipe/premailer-rails
[tip-image]:   https://rawgithub.com/twolfson/gittip-badge/0.1.0/dist/gittip.svg
[tip-link]:    https://www.gittip.com/fphilipe/

[premailer]:    https://github.com/premailer/premailer
[actionmailer]: https://github.com/rails/rails/tree/main/actionmailer
[nokogiri]:     https://github.com/sparklemotion/nokogiri

[premailer documentation]: https://www.rubydoc.info/gems/premailer/Premailer:initialize

[fphilipe twitter]: https://twitter.com/fphilipe
[license file]:     LICENSE
","Premailer-rails is an adapter for premailer to work with [actionmailer] out of
the box. It applies all CSS rules to each HTML element by adding them to the
`style` attribute. This allows you to keep HTML and CSS in separate files, just
as you're used to from webdevelopment. The retrieved CSS is cached when the gem
is running with Rails inproduction. This is useful when the assets are not
bundled in the application and only available on a CDN."
3182,PRML algorithms implemented in Python,"# PRML
Python codes implementing algorithms described in Bishop's book ""Pattern Recognition and Machine Learning""

## Required Packages
- python 3
- numpy
- scipy
- jupyter (optional: to run jupyter notebooks)
- matplotlib (optional: to plot results in the notebooks)
- sklearn (optional: to fetch data)

## Notebooks

The notebooks in this repository can be viewed with nbviewer or other tools, or you can use [Amazon SageMaker Studio Lab](https://studiolab.sagemaker.aws/), a free computing environment on AWS (prior [registration with an email address](https://studiolab.sagemaker.aws/requestAccount) is required. Please refer to [this document](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-lab-onboard.html) for usage).

From the table below, you can open the notebooks for each chapter in each of these environments.

|nbviewer|Amazon SageMaker Studio Lab|
|:-------|:--------------------------:|
|[ch1. Introduction](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch01_Introduction.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch01_Introduction.ipynb)|
|[ch2. Probability Distributions](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch02_Probability_Distributions.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch02_Probability_Distributions.ipynb)|
|[ch3. Linear Models for Regression](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch03_Linear_Models_for_Regression.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch03_Linear_Models_for_Regression.ipynb)|
|[ch4. Linear Models for Classification](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch04_Linear_Models_for_Classfication.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch04_Linear_Models_for_Classfication.ipynb)|
|[ch5. Neural Networks](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch05_Neural_Networks.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch05_Neural_Networks.ipynb)|
|[ch6. Kernel Methods](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch06_Kernel_Methods.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch06_Kernel_Methods.ipynb)|
|[ch7. Sparse Kernel Machines](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch07_Sparse_Kernel_Machines.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch07_Sparse_Kernel_Machines.ipynb)|
|[ch8. Graphical Models](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch08_Graphical_Models.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch08_Graphical_Models.ipynb)|
|[ch9. Mixture Models and EM](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch09_Mixture_Models_and_EM.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch09_Mixture_Models_and_EM.ipynb)|
|[ch10. Approximate Inference](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch10_Approximate_Inference.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch10_Approximate_Inference.ipynb)|
|[ch11. Sampling Methods](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch11_Sampling_Methods.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch11_Sampling_Methods.ipynb)|
|[ch12. Continuous Latent Variables](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch12_Continuous_Latent_Variables.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch12_Continuous_Latent_Variables.ipynb)|
|[ch13. Sequential Data](https://nbviewer.jupyter.org/github/ctgk/PRML/blob/main/notebooks/ch13_Sequential_Data.ipynb)|[![Open in SageMaker Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)](https://studiolab.sagemaker.aws/import/github/ctgk/PRML/blob/main/notebooks/ch13_Sequential_Data.ipynb)|

If you use the SageMaker Studio Lab, open a terminal and execute the following commands to install the required libraries.

```bash
conda env create -f environment.yaml  # might be optional
conda activate prml
python setup.py install
```
","Python codes implementing algorithms described in Bishop's book ""Pattern
Recognition and Machine Learning"" The notebooks in this repository can be viewed
with nbviewer or other tools, or you can use [Amazon SageMaker Studio
Lab](https://studiolab.sagemaker.aws/)."
181,A library to imitate the iOS 10 Maps UI.,"# Pulley

<p align=""center"">
<a href=""https://github.com/52inc/Pulley/actions?query=workflow%3Adeploy_to_cocoapods""><img src=""https://github.com/52inc/Pulley/workflows/deploy_to_cocoapods/badge.svg""></a>
<a href=""https://cocoapods.org/pods/Pulley""><img src=""https://img.shields.io/cocoapods/v/Pulley.svg?style=flat""></a>
<a href=""https://github.com/Carthage/Carthage/""><img src=""https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat""></a>
<a href=""https://swift.org/package-manager/""><img src=""https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat""></a>
<br />
<a href=""https://raw.githubusercontent.com/52inc/Pulley/master/LICENSE""><img src=""https://img.shields.io/cocoapods/l/Pulley.svg?style=flat""></a>
<a href=""https://github.com/52inc/Pulley/""><img src=""https://img.shields.io/cocoapods/p/Pulley.svg?style=flat""></a>
</p>

A library to imitate the drawer in Maps for iOS 10/11. The master branch follows the latest currently released version of Swift. If you need an older version of Swift, you can specify it's version (e.g. 1.0.x) in your Podfile or use the code on the branch for that version. Older branches are unsupported.

### Update / Migration Info

**ATTENTION:**
Pulley 2.9.0 has new properties to support a new displayMode. The base functionality should work without any significant changes. The biggest change being the new displayMode of `.compact` to replicate Apple Maps Behavior on the iPhone SE size class devices. This is an exact replica of the behavior of the Apple Maps drawer, therefor when the `currentDisplayMode` of the `PulleyViewController` is `.compact` then the only `supportedDrawerPositions` for the view controller when in `.compact` mode are `.open`, `.closed`, and `.collapsed`. This mode also has new @IBInspectable properties, `compactInsets` and `compactWidth`. This mode behaves in a very similar way to `.panel` mode. See the pull request [here](https://github.com/52inc/Pulley/pull/347) for the motivation behind this feature. Also in this release, `setDrawerContentViewController(controller: UIViewController, position: PulleyPosition? = nil, animated: Bool = true, completion: PulleyAnimationCompletionBlock?)` has a new optional parameter `position` to set a new drawer position the drawer when a new `DrawerContentViewController` is set. See [this](https://github.com/52inc/Pulley/pull/349) pull request for the motivation behind this feature.


Pulley 2.5.0 had significant renaming changes to support new features. Although property names have changed, the functionality should work without any significant changes (aside from renaming). See [this thread](https://github.com/52inc/Pulley/issues/252) for additional information.


Pulley 2.4.0 changed PulleyPosition from an enum to a class. This won't affect most uses, but may affect your switch statements. Continue to use the static PulleyPosition values as usual and add a default case. This was done to allow marking some `PulleyDrawerViewControllerDelegate` methods as optional so they don't need to be implemented if you aren't using certain positions (or wish to use the default values). If you have questions, please open an issue.

_Technical reason: Optional protocol methods require the @objc attribute. Arrays of Swift enums can't be exposed to Objective-C, and supportedDrawerPositions previously returned an array of PulleyPosition enums. This change allows for marking the protocol @objc so methods can be marked optional._

### Introduction
Pulley is an easy to use drawer library meant to imitate the drawer in iOS 10/11's Maps app. It exposes a simple API that allows you to use any UIViewController subclass as the drawer content or the primary content.

**Here's a preview (apologies for the potato gif):**

![Pulley Preview](http://i.imgur.com/bmEWqy7.gif)

![Pulley iPad Preview](https://i.imgur.com/HwsdMSO.png)

### Installation

##### Installation with Cocoapods
`pod 'Pulley'`

##### Installation with Carthage
`github ""52inc/Pulley""`
Please read this [issue](https://github.com/52inc/Pulley/issues/331#issue-435421067) regarding setup if using Carthage.

##### Installation with Swift Package Manager
Follow the [developer documentation](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app) for Swift Package Manager (versions 2.8.x)

##### Manual Installation
Simply copy the files in the PulleyLib folder into your project.

### How To use

#### Interface Builder

Pulley supports loading embedded view controllers from Interface Builder. In order to use Pulley with Interface Builder, you'll need to setup your `PulleyViewController` like this:

1. Add 2 container views to the `PulleyViewController` view. One for the drawer content and one for the primary (background) content.
2. Connect the container view for the primary (background) content to the outlet named **primaryContentContainerView**.
3. Connect the container view for the drawer content to the outlet named **drawerContentContainerView**.
4. Create an 'embed' segue between each container view and the view controller you want to display for that part of the drawer.
5. Make sure you set the Module for the view controller to 'Pulley'. [See this issue.](https://github.com/52inc/Pulley/issues/29)

If you would like to customize the height of the ""Collapsed"" or ""Partially Revealed"" states of the drawer, have your Drawer Content view controller implement `PulleyDrawerViewControllerDelegate`. You can provide the height for your drawer content for both the Collapsed and Partially Revealed states.

![Interface Builder Screenshot](http://i.imgur.com/htzo50L.png=500x)


#### Programmatically

Pulley supports loading view controllers programmatically. In order to use Pulley programmatically, please consider the following code snippet:

```swift
let mainContentVC = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""PrimaryContentViewController"")

let drawerContentVC = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""DrawerContentViewController"")

let pulleyController = PulleyViewController(contentViewController: mainContentVC, drawerViewController: drawerContentVC)
```

### API

**Important:** The background of the internal drawer view is clear. If your view controller's view is also clear then you'll see the shadow rendering below where the view is. I'd recommend giving your view a color or using a UIVisualEffectView to make sure you don't see the shadow. You can set the shadow opacity to 0.0 if you want the shadow to be hidden.

**Important:** Drawer Content views are made **20pt too long** in order to account for the bounce animation. Make sure your drawer content view is aware that the bottom 20pts will be offscreen.

**Important:** PulleyViewController is not accessible as a parent or as `self.pulleyViewController` until _during or after_ -viewWillAppear: if you're loading Pulley from Storyboards.

#### iOS 11, Safe Areas, and the iPhone X
Pulley has support for safe areas and the iPhone X. The sample project includes full support for this, and does a couple of UI tricks to make things look better. These are documented throughout the sample project.

The basic concepts of using Pulley post-iOS 11 are:

1. The -topInset property is _from_ the top safe area, not the top of the screen.
2. Most delegate methods have a new parameter that tells you the current bottom safe area.
3. The drawer itself doesn't do anything special for the bottom safe area because everyone's UI will want to treat it a little differently. HOWEVER: The delegate methods have been updated to deliver you the current bottom safe area anytime that a value for a drawer position is requested from you. You can use this variable to compute the value you want to return for the drawer position. Checkout the sample project for a simple example on an easy approach to this.
4. If you have UI bottom safe area customizations that you want to perform, I recommend using the delegate method `drawerPositionDidChange(drawer:bottomSafeArea:)` to modify your UI based on the value of bottomSafeArea. Any time the size of the Pulley view controller changes, this method will be called with a new bottom safe area height. The sample project uses this to modify the drawer 'header' height, as well as to adjust the contentInset for the UITableView. It's not automatically taken care of for you, but it should be a fairly simple thing to add.
5. I do _not_ recommend constraining views to the safe are of the drawer content view controller. It won't actually work for the safe areas.
6. If you want the map (or other UI) in the primary view controller to render under the status bar (or in the ears of the iPhone X), make sure you constrain it directly to the superview's 'top'. You may need to double click on the constraint, and then make sure it _isn't_ constrained 'relative to margin'.
7. For backwards compatibility, iOS 9/10 use topLayoutGuide as the top safe area. Your implementation shouldn't need to worry about iOS versions, as that's taken care of for you by Pulley.

If you have any problems / questions while updating Pulley to iOS 11 SDK, please feel free to create an issue if the above information didn't solve your problem.

Even if you've already seen the example project, I highly encourage looking at the new post-iOS 11 version of the sample project. It may have something that could help your iPhone X / safe area implementation.

#### 3 protocols exist for you to use:

* `PulleyDelegate`: The protocol the other protocols inherit from. It's exposed as the .delegate property of `PulleyViewController`. NOTE: If the object you're wanting to receive delegate callbacks is either the Primary Content or Drawer Content view controllers...don't use the .delegate property. Continue reading for the other protocols.
* `PulleyDrawerViewControllerDelegate`: Includes all of the methods from `PulleyDelegate` and adds methods for providing custom heights for the Collapsed and Partially Revealed states. Your Drawer Content view controller should implement this protocol if it wants to receive callbacks for changes in the drawer state or to provide custom heights for the aforementioned drawer states. Implementing this protocol is optional for the Drawer Content view controller, but if you don't then defaults will be used instead.
* `PulleyPrimaryContentControllerDelegate`: This is currently identical to `PulleyDelegate`. However, this protocol may be implemented by your Primary Content view controller if you want to receive callbacks for changes in drawer state. Eventually specialized methods may be added to this protocol.

#### Changing view controllers after creation:

You'll likely need to change out the contents of the drawer or the primary view controller after creation. Here's how to do that programmatically.

**NOTE:** If you pass animated: true then you'll get a subtle crossfade animation. This doesn't work well with all views / view hierarchies (Notably UIVisualEffectView). You've been warned.

**Changing the Primary Content View Controller:**

```swift
if let drawer = self.parentViewController as? PulleyViewController
{
    let primaryContent = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""PrimaryContentViewController"")

    drawer.setPrimaryContentViewController(primaryContent, animated: true)
}      
```

**Changing the Drawer Content View Controller:**

```swift
if let drawer = self.parentViewController as? PulleyViewController
{
    let drawerContent = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""DrawerContentViewController"")

    drawer.setDrawerContentViewController(drawerContent, animated: false)
}      
```

#### Customizing the drawer

1. See the 3 protocols above.
2. You can adjust the inset from the top of the screen in the ""Open"" state by setting the -topInset property on the `PulleyViewController`.
3. You can enable / disable drawer positions by implementing `PulleyDrawerViewControllerDelegate` in your 'drawer' view controller. If you need to change it, call `setNeedsSupportedDrawerPositionsUpdate()` on the `PulleyViewController` so it will recalculate the drawer based on your new settings.
4. You can adjust the corner radius applied to the drawer by setting the -drawerCornerRadius property on the `PulleyViewController`.
5. You can adjust the shadow opacity applied to the drawer by setting the -shadowOpacity property on the `PulleyViewController`.
6. You can adjust the shadow radius applied to the drawer by setting the -shadowRadius property on the `PulleyViewController`.
7. You can adjust the background dimming color by setting the -backgroundDimmingColor to an opaque color on the `PulleyViewController`.
8. You can adjust / remove the background blur effect by setting the -drawerBackgroundVisualEffectView property on the `PulleyViewController`.
9. You can adjust the alpha of the background dimming color by setting the -backgroundDimmingOpacity property on the `PulleyViewController`.
10. You can change the drawer position by calling setDrawerPosition( : ) on the `PulleyViewController`.
11. If an object needs to receive delegate callbacks and _isn't_ one of the view controller's presented then you can use the -delegate property on the `PulleyViewController`.
12. The Swift Interface for `PulleyViewController` is documented in case you want to see real documentation instead of a numbered list of useful things.
13. You can set the initial drawer position by using the initialDrawerPosition property on the `PulleyViewController`.
14. Most settings for the `PulleyViewController` are exposed in Interface Builder. Select the `PulleyViewController` View Controller (not the view) to access them via IBInspectable.
15. By default, Pulley will only use the 'bottom' display mode (to preserve backwards compatibility). If you want to use the iPad / iPhone landscape modes, you can use 'panel' for the display mode. If you want it to automatically switch like Maps.app on iOS, you can set the display mode to 'automatic'.
16. You can apply a custom mask to the Pulley drawer by setting your drawerViewController's view.layer.mask property to a CAShapeLayer. That mask will also be applied to the drawer in Pulley.
17. You can specify which corner you'd like the panel to display in (when in 'panel' displayMode) by using the 'panelCornerPlacement` property.

## Requirements

- iOS 9.0+
- Swift 4.0+


","Pulley is an easy to use drawer library meant to imitate the drawer in iOS
10/11's Maps app. It exposes a simple API that allows you to use any UIView
Controller as the drawer content or the primary content. The sample project
includes support for this, and does a couple of UI tricks to make things look
better. The basic concepts of using Pulley post-iOS 11-iOS are documented
throughout the sample project. The full post is available on GitHub here."
2340,Python Data Science Handbook: full text in Jupyter Notebooks,"# Python Data Science Handbook

[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/jakevdp/PythonDataScienceHandbook/master?filepath=notebooks%2FIndex.ipynb)
[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb)

This repository contains the entire [Python Data Science Handbook](http://shop.oreilly.com/product/0636920034919.do), in the form of (free!) Jupyter notebooks.

![cover image](notebooks/figures/PDSH-cover.png)

## How to Use this Book

- Read the book in its entirety online at https://jakevdp.github.io/PythonDataScienceHandbook/

- Run the code using the Jupyter notebooks available in this repository's [notebooks](notebooks) directory.

- Launch executable versions of these notebooks using [Google Colab](http://colab.research.google.com): [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb)

- Launch a live notebook server with these notebooks using [binder](https://beta.mybinder.org/): [![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/jakevdp/PythonDataScienceHandbook/master?filepath=notebooks%2FIndex.ipynb)

- Buy the printed book through [O'Reilly Media](http://shop.oreilly.com/product/0636920034919.do)

## About

The book was written and tested with Python 3.5, though other Python versions (including Python 2.7) should work in nearly all cases.

The book introduces the core libraries essential for working with data in Python: particularly [IPython](http://ipython.org), [NumPy](http://numpy.org), [Pandas](http://pandas.pydata.org), [Matplotlib](http://matplotlib.org), [Scikit-Learn](http://scikit-learn.org), and related packages.
Familiarity with Python as a language is assumed; if you need a quick introduction to the language itself, see the free companion project,
[A Whirlwind Tour of Python](https://github.com/jakevdp/WhirlwindTourOfPython): it's a fast-paced introduction to the Python language aimed at researchers and scientists.

See [Index.ipynb](http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/Index.ipynb) for an index of the notebooks available to accompany the text.

## Software

The code in the book was tested with Python 3.5, though most (but not all) will also work correctly with Python 2.7 and other older Python versions.

The packages I used to run the code in the book are listed in [requirements.txt](requirements.txt) (Note that some of these exact version numbers may not be available on your platform: you may have to tweak them for your own use).
To install the requirements using [conda](http://conda.pydata.org), run the following at the command-line:

```
$ conda install --file requirements.txt
```

To create a stand-alone environment named ``PDSH`` with Python 3.5 and all the required package versions, run the following:

```
$ conda create -n PDSH python=3.5 --file requirements.txt
```

You can read more about using conda environments in the [Managing Environments](http://conda.pydata.org/docs/using/envs.html) section of the conda documentation.


## License

### Code
The code in this repository, including all code samples in the notebooks listed above, is released under the [MIT license](LICENSE-CODE). Read more at the [Open Source Initiative](https://opensource.org/licenses/MIT).

### Text
The text content of the book is released under the [CC-BY-NC-ND license](LICENSE-TEXT). Read more at [Creative Commons](https://creativecommons.org/licenses/by-nc-nd/3.0/us/legalcode).
","This repository contains the entire [Python Data Science Handbook] in the form
of (free!) Jupyter notebooks. The code in the book was tested with Python 3.5,
though other Python versions (including Python 2.7) should work in nearly all
cases."
2345,"The ""Python Machine Learning (1st edition)""  book code repository and info resource","# Python Machine Learning book code repository


[![Google Group](https://img.shields.io/badge/-Google%20Group-lightgrey.svg)](https://groups.google.com/forum/#!forum/python-machine-learning-reader-discussion-board)

---

#### IMPORTANT NOTE (09/21/2017):

This GitHub repository contains the code examples of the **1st Edition** of Python Machine Learning book. If you are looking for the code examples of the **2nd Edition**, please refer to [this](https://github.com/rasbt/python-machine-learning-book-2nd-edition#whats-new-in-the-second-edition-from-the-first-edition) repository instead. 

---

What you can expect are 400 pages rich in useful material just about everything you need to know to get started with machine learning ... from theory to the actual code that you can directly put into action! This is not yet just another ""this is how scikit-learn works"" book. I aim to explain all the underlying concepts, tell you everything you need to know in terms of best practices and caveats, and
we will put those concepts into action mainly using NumPy, scikit-learn, and Theano.

You are not sure if this book is for you? Please checkout the excerpts from the [Foreword](./docs/foreword_ro.pdf) and [Preface](./docs/preface_sr.pdf), or take a look at the [FAQ](#faq) section for further information.



---

[![](./images/pymle_cover_double_small.jpg)](https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_1?ie=UTF8&qid=1470882464&sr=8-1&keywords=python+machine+learning)

1st edition, published September 23rd 2015<br>
Paperback: 454 pages<br>
Publisher: Packt Publishing<br>  
Language: English<br>
ISBN-10: 1783555130<br>  
ISBN-13: 978-1783555130<br>
Kindle ASIN: B00YSILNL0<br>

<br>

[![](./images/CRBadgeNotableBook.jpg)](http://www.computingreviews.com/recommend/bestof/notableitems.cfm?bestYear=2016)

<br>

German ISBN-13: 978-3958454224<br>
Japanese ISBN-13: 978-4844380603<br>
Italian ISBN-13: 978-8850333974<br>
Chinese (traditional) ISBN-13: 978-9864341405<br>
Chinese (mainland) ISBN-13: 978-7111558804<br>
Korean ISBN-13: 979-1187497035<br>
Russian ISBN-13: 978-5970604090<br>



## Table of Contents and Code Notebooks


Simply click on the `ipynb`/`nbviewer` links next to the chapter headlines to view the code examples (currently, the internal document links are only supported by the NbViewer version).
**Please note that these are just the code examples accompanying the book, which I uploaded for your convenience; be aware that these notebooks may not be useful without the formulae and descriptive text.**   


- Excerpts from the [Foreword](./docs/foreword_ro.pdf) and [Preface](./docs/preface_sr.pdf)
- [Instructions for setting up Python and the Jupiter Notebook](./code/ch01/README.md)  

<br>

1. Machine Learning - Giving Computers the Ability to Learn from Data [[dir](./code/ch01)] [[ipynb](./code/ch01/ch01.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch01/ch01.ipynb)]
2. Training Machine Learning Algorithms for Classification [[dir](./code/ch02)] [[ipynb](./code/ch02/ch02.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb)]
3. A Tour of Machine Learning Classifiers Using Scikit-Learn [[dir](./code/ch03)] [[ipynb](./code/ch03/ch03.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch03/ch03.ipynb)]
4. Building Good Training Sets – Data Pre-Processing [[dir](./code/ch04)] [[ipynb](./code/ch04/ch04.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch04/ch04.ipynb)]
5. Compressing Data via Dimensionality Reduction [[dir](./code/ch05)] [[ipynb](./code/ch05/ch05.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch05/ch05.ipynb)]
6. Learning Best Practices for Model Evaluation and Hyperparameter Optimization [[dir](./code/ch06)] [[ipynb](./code/ch06/ch06.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch06/ch06.ipynb)]
7. Combining Different Models for Ensemble Learning [[dir](./code/ch07)] [[ipynb](./code/ch07/ch07.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch07/ch07.ipynb)]
8. Applying Machine Learning to Sentiment Analysis [[dir](./code/ch08)] [[ipynb](./code/ch08/ch08.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch08/ch08.ipynb)]
9. Embedding a Machine Learning Model into a Web Application [[dir](./code/ch09)] [[ipynb](./code/ch09/ch09.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch09/ch09.ipynb)]
10. Predicting Continuous Target Variables with Regression Analysis [[dir](./code/ch10)] [[ipynb](./code/ch10/ch10.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch10/ch10.ipynb)]
11. Working with Unlabeled Data – Clustering Analysis [[dir](./code/ch11)] [[ipynb](./code/ch11/ch11.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch11/ch11.ipynb)]
12. Training Artificial Neural Networks for Image Recognition [[dir](./code/ch12)] [[ipynb](./code/ch12/ch12.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch12/ch12.ipynb)]
13. Parallelizing Neural Network Training via Theano [[dir](./code/ch13)] [[ipynb](./code/ch13/ch13.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch13/ch13.ipynb)]

<br>

#### Equation Reference

<a href=""https://github.com/rasbt/python-machine-learning-book/tree/master/docs/equations""><img src=""images/equation-ref-logo.png"" width=""200"" height=""200"" /></a>

[[PDF](./docs/equations/pymle-equations.pdf)] [[TEX](./docs/equations/pymle-equations.tex)]

#### Slides for Teaching

A big thanks to [Dmitriy Dligach](dmitriydligach) for sharing his slides from his machine learning course that is currently offered at [Loyola University Chicago](http://www.luc.edu/cs/). 

- [https://github.com/dmitriydligach/PyMLSlides](https://github.com/dmitriydligach/PyMLSlides)
- 



#### Additional Math and NumPy Resources

Some readers were asking about Math and NumPy primers, since they were not included due to length limitations. However, I recently put together such resources for another book, but I made these *chapters* freely available online in hope that they also serve as helpful background material for this book:


- Algebra Basics [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_b_algebra.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_b_algebra.epub)]

- A Calculus and Differentiation Primer [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_d_calculus.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_d_calculus.epub)]

- Introduction to NumPy [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_f_numpy-intro.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_f_numpy-intro.epub)] [[Code Notebook](https://github.com/rasbt/deep-learning-book/blob/master/code/appendix_f_numpy-intro/appendix_f_numpy-intro.ipynb)]



---

#### Citing this Book

You are very welcome to re-use the code snippets or other contents from this book
in scientific publications and other works;
in this case, I would appreciate citations to the original source:

**BibTeX**:

```
@Book{raschka2015python,
 author = {Raschka, Sebastian},
 title = {Python Machine Learning},
 publisher = {Packt Publishing},
 year = {2015},
 address = {Birmingham, UK},
 isbn = {1783555130}
 }
```


**MLA**:


Raschka, Sebastian. *Python machine learning*. Birmingham, UK: Packt Publishing, 2015. Print.

---

### [Feedback & Reviews](./docs/feedback.md)

#### [Short review snippets](./docs/feedback.md)

[![](./images/pymle_amzn.png)](https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_1?ie=UTF8&qid=1472342570&sr=8-1&keywords=sebastian+raschka)

---
> *Sebastian Raschka’s new book, Python Machine Learning, has just been released. I got a chance to read a review copy and it’s just as I expected - really great! It’s well organized, super easy to follow, and it not only offers a good foundation for smart, non-experts, practitioners will get some ideas and learn new tricks here as well.*  
– Lon Riesberg at [Data Elixir](http://dataelixir.com/issues/55#start)

> *Superb job! Thus far, for me it seems to have hit the right balance of theory and practice…math and code!*   
– [Brian Thomas](http://sebastianraschka.com/blog/2015/writing-pymle.html#comment-2295668894)

> *I've read (virtually) every Machine Learning title based around Scikit-learn and this is hands-down the best one out there.*    
– [Jason Wolosonovich](https://www.linkedin.com/pulse/python-machine-learning-sebastian-raschka-review-jason-wolosonovich?trk=prof-post)

> *The best book I've seen to come out of PACKT Publishing. This is a very well written introduction to machine learning with Python. As others have noted, a perfect mixture of theory and application.*    
– [Josh D.](https://www.amazon.com/gp/customer-reviews/R27WB1GWTNGIR2/ref=cm_cr_getr_d_rvw_ttl?ie=UTF8&ASIN=1783555130)

> *A book with a blend of qualities that is hard to come by: combines the needed mathematics to control the theory with the applied coding in Python. Also great to see it doesn't waste paper in giving a primer on Python as many other books do just to appeal to the greater audience. You can tell it's been written by knowledgeable writers and not just DIY geeks.*    
– [Amazon Customer](https://www.amazon.com/gp/customer-reviews/RZWY4TF66Z6V0/ref=cm_cr_getr_d_rvw_ttl?ie=UTF8&ASIN=1783555130)

> *Sebastian Raschka created an amazing machine learning tutorial which combines theory with practice. The book explains machine learning from a theoretical perspective and has tons of coded examples to show how you would actually use the machine learning technique. It can be read by a beginner or advanced programmer.*
- William P. Ross, [7 Must Read Python Books](http://williampross.com/7-must-read-python-books/)

#### Longer reviews

If you need help to decide whether this book is for you, check out some of the ""longer"" reviews linked below. (If you wrote a review, please let me know, and I'd be happy to add it to the list).

- [Python Machine Learning Review](http://www.bcs.org/content/conWebDoc/55586) by Patrick Hill at the Chartered Institute for IT
- [Book Review: Python Machine Learning by Sebastian Raschka](http://whatpixel.com/python-machine-learning-book-review/) by Alex Turner at WhatPixel

---

## Links

- ebook and paperback at [Amazon.com](http://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_2?ie=UTF8&qid=1437754343&sr=8-2&keywords=python+machine+learning+essentials), [Amazon.co.uk](http://www.amazon.co.uk/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130), [Amazon.de](http://www.amazon.de/s/ref=nb_sb_noss_2?__mk_de_DE=ÅMÅŽÕÑ&url=search-alias%3Daps&field-keywords=python+machine+learning)
- [ebook and paperback](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning) from Packt (the publisher)
- at other book stores: [Google Books](https://books.google.com/books?id=GOVOCwAAQBAJ&source=gbs_slider_cls_metadata_7_mylibrary), [O'Reilly](http://shop.oreilly.com/product/9781783555130.do), [Safari](https://www.safaribooksonline.com/library/view/python-machine-learning/9781783555130/), [Barnes & Noble](http://www.barnesandnoble.com/w/python-machine-learning-essentials-sebastian-raschka/1121999969?ean=9781783555130), [Apple iBooks](https://itunes.apple.com/us/book/python-machine-learning/id1028207310?mt=11), ...
- social platforms: [Goodreads](https://www.goodreads.com/book/show/25545994-python-machine-learning)

#### Translations

- [Italian translation](https://www.amazon.it/learning-Costruire-algoritmi-generare-conoscenza/dp/8850333978/) via ""Apogeo""
- [German translation](https://www.amazon.de/Machine-Learning-Python-mitp-Professional/dp/3958454224/) via ""mitp Verlag""
- [Japanese translation](http://www.amazon.co.jp/gp/product/4844380605/) via ""Impress Top Gear""
- [Chinese translation (traditional Chinese)](https://taiwan.kinokuniya.com/bw/9789864341405)
- [Chinese translation (simple Chinese)](https://book.douban.com/subject/27000110/)
- [Korean translation](http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791187497035) via ""Kyobo""
- [Polish translation](https://www.amazon.de/Python-Uczenie-maszynowe-Sebastian-Raschka/dp/8328336138/ref=sr_1_11?ie=UTF8&qid=1513601461&sr=8-11&keywords=sebastian+raschka) via ""Helion""

---

### [Literature References & Further Reading Resources](./docs/references.md)

### [Errata](./docs/errata.md)


---

### Bonus Notebooks (not in the book)

- Logistic Regression Implementation [[dir](./code/bonus)] [[ipynb](./code/bonus/logistic_regression.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/logistic_regression.ipynb)]
- A Basic Pipeline and Grid Search Setup [[dir](./code/bonus)] [[ipynb](./code/bonus/svm_iris_pipeline_and_gridsearch.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/svm_iris_pipeline_and_gridsearch.ipynb)]
- An Extended Nested Cross-Validation Example [[dir](./code/bonus)] [[ipynb](./code/bonus/nested_cross_validation.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/nested_cross_validation.ipynb)]
- A Simple Barebones Flask Webapp Template [[view directory](./code/bonus/flask_webapp_ex01)][[download as zip-file](https://github.com/rasbt/python-machine-learning-book/raw/master/code/bonus/flask_webapp_ex01/flask_webapp_ex01.zip)]
- Reading handwritten digits from MNIST into NumPy arrays [[GitHub ipynb](./code/bonus/reading_mnist.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/reading_mnist.ipynb)]
- Scikit-learn Model Persistence using JSON [[GitHub ipynb](./code/bonus/scikit-model-to-json.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/scikit-model-to-json.ipynb)]
- Multinomial logistic regression / softmax regression [[GitHub ipynb](./code/bonus/softmax-regression.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/softmax-regression.ipynb)]

<hr>

**""Related Content"" (not in the book)**

- [Model evaluation, model selection, and algorithm selection in machine learning - Part I](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part1.html)
- [Model evaluation, model selection, and algorithm selection in machine learning - Part II](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part2.html)
- [Model evaluation, model selection, and algorithm selection in machine learning - Part III](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part3.html)

---

#### SciPy 2016

We had such a great time at [SciPy 2016](http://scipy2016.scipy.org/ehome/index.php?eventid=146062&tabid=332930&) in Austin! It was a real pleasure to meet and chat with so many readers of my book. Thanks so much for all the nice words and feedback! And in case you missed it, Andreas Mueller and I gave an **Introduction to Machine Learning with Scikit-learn**; if you are interested, the video recordings of [Part I](https://www.youtube.com/watch?v=OB1reY6IX-o&index=91&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6) and [Part II](https://www.youtube.com/watch?v=Cte8FYCpylk&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6&index=90) are now online!

[![](images/scipy2016.jpg)](https://www.youtube.com/watch?v=OB1reY6IX-o&index=91&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6)

#### PyData Chicago 2016

I attempted the rather challenging task of introducing scikit-learn & machine learning in *just* 90 minutes at PyData Chicago 2016. The slides and tutorial material are available at ""[Learning scikit-learn -- An Introduction to Machine Learning in Python](https://github.com/rasbt/pydata-chicago2016-ml-tutorial).""


---

**Note**

I have set up a separate library, [`mlxtend`](http://rasbt.github.io/mlxtend/), containing additional implementations of machine learning (and general ""data science"") algorithms. I also added implementations from this book (for example, the decision region plot, the artificial neural network, and sequential feature selection algorithms) with additional functionality.

[![](./images/mlxtend_logo.png)](http://rasbt.github.io/mlxtend/)


<br>

<hr>

### Translations

[![](./images/pymle-cover_it.jpg)](https://www.amazon.it/learning-Costruire-algoritmi-generare-conoscenza/dp/8850333978/)
[![](./images/pymle-cover_de.jpg)](https://www.amazon.de/Machine-Learning-Python-mitp-Professional/dp/3958454224/)
[![](./images/pymle-cover_jp.jpg)](http://www.amazon.co.jp/gp/product/4844380605/)
[![](./images/pymle-cover_cn.jpg)](https://taiwan.kinokuniya.com/bw/9789864341405)
[![](./images/pymle-cover_cn_mainland.jpg)](https://book.douban.com/subject/27000110/)
[![](./images/pymle-cover_kr.jpg)](http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791187497035&orderClick=LEA&Kc=)
[![](./images/pymle-cover_ru.jpg)](http://www.ozon.ru/context/detail/id/140152222/)
[![](./images/pymle-cover_pl.jpg)](https://www.amazon.de/Python-Uczenie-maszynowe-Sebastian-Raschka/dp/8328336138/ref=sr_1_11?ie=UTF8&qid=1513601461&sr=8-11&keywords=sebastian+raschka)

<hr>

---

***Dear readers***,  
first of all, I want to thank all of you for the great support! I am really happy about all the great feedback you sent me so far, and I am glad that the book has been so useful to a broad audience.

Over the last couple of months, I received hundreds of emails, and I tried to answer as many as possible in the available time I have. To make them useful to other readers as well, I collected many of my answers in the FAQ section (below).

In addition, some of you asked me about a platform for readers to discuss the contents of the book. I hope that this would provide an opportunity for you to discuss and share your knowledge with other readers:

#### [Google Groups Discussion Board](https://groups.google.com/forum/#!forum/python-machine-learning-reader-discussion-board)

(And I will try my best to answer questions myself if time allows! :))

> The only thing to do with good advice is to pass it on. It is never of any use to oneself.  
— Oscar Wilde

---

## Examples and Applications by Readers

Once again, I have to say (big!) THANKS for all the nice feedback about the book. I've received many emails from readers, who
put the concepts and examples from this book out into the real world and make good use of them in their projects. In this section, I am
starting to gather some of these great applications, and I'd be more than happy to add your project to this list -- just shoot me a quick mail!

- [40 scripts on Optical Character Recognition](https://github.com/rrlyman/PythonMachineLearingExamples) by [Richard Lyman](https://github.com/rrlyman)
- [Code experiments](https://github.com/jeremyn/python-machine-learning-book) by [Jeremy Nation](https://github.com/jeremyn)
- [What I Learned Implementing a Classifier from Scratch in Python](http://www.jeannicholashould.com) by [Jean-Nicholas Hould](http://www.jeannicholashould.com)

## FAQ

### General Questions

- [What are machine learning and data science?](./faq/datascience-ml.md)
- [Why do you and other people sometimes implement machine learning algorithms from scratch?](./faq/implementing-from-scratch.md)
- [What learning path/discipline in data science I should focus on?](./faq/data-science-career.md)
- [At what point should one start contributing to open source?](./faq/open-source.md)
- [How important do you think having a mentor is to the learning process?](./faq/mentor.md)
- [Where are the best online communities centered around data science/machine learning or python?](./faq/ml-python-communities.md)
- [How would you explain machine learning to a software engineer?](./faq/ml-to-a-programmer.md)
- [How would your curriculum for a machine learning beginner look like?](./faq/ml-curriculum.md)
- [What is the Definition of Data Science?](./faq/definition_data-science.md)
- [How do Data Scientists perform model selection? Is it different from Kaggle?](./faq/model-selection-in-datascience.md)

### Questions about the Machine Learning Field

- [How are Artificial Intelligence and Machine Learning related?](./faq/ai-and-ml.md)
- [What are some real-world examples of applications of machine learning in the field?](./faq/ml-examples.md)
- [What are the different fields of study in data mining?](./faq/datamining-overview.md)
- [What are differences in research nature between the two fields: machine learning & data mining?](./faq/datamining-vs-ml.md)
- [How do I know if the problem is solvable through machine learning?](./faq/ml-solvable.md)
- [What are the origins of machine learning?](./faq/ml-origins.md)
- [How was classification, as a learning machine, developed?](./faq/classifier-history.md)
- [Which machine learning algorithms can be considered as among the best?](./faq/best-ml-algo.md)
- [What are the broad categories of classifiers?](./faq/classifier-categories.md)
- [What is the difference between a classifier and a model?](./faq/difference_classifier_model.md)
- [What is the difference between a parametric learning algorithm and a nonparametric learning algorithm?](./faq/parametric_vs_nonparametric.md)
- [What is the difference between a cost function and a loss function in machine learning?](./faq/cost-vs-loss.md)

### Questions about ML Concepts and Statistics

##### Cost Functions and Optimization

- [Fitting a model via closed-form equations vs. Gradient Descent vs Stochastic Gradient Descent vs Mini-Batch Learning -- what is the difference?](./faq/closed-form-vs-gd.md)
- [How do you derive the Gradient Descent rule for Linear Regression and Adaline?](./faq/linear-gradient-derivative.md)

##### Regression Analysis

- [What is the difference between Pearson R and Simple Linear Regression?](./faq/pearson-r-vs-linear-regr.md)

##### Tree models

- [How does the random forest model work? How is it different from bagging and boosting in ensemble models?](./faq/bagging-boosting-rf.md)
- [What are the disadvantages of using classic decision tree algorithm for a large dataset?](./faq/decision-tree-disadvantages.md)
- [Why are implementations of decision tree algorithms usually binary, and what are the advantages of the different impurity metrics?](./faq/decision-tree-binary.md)
- [Why are we growing decision trees via entropy instead of the classification error?](./faq/decisiontree-error-vs-entropy.md)
- [When can a random forest perform terribly?](./faq/random-forest-perform-terribly.md)

##### Model evaluation

- [What is overfitting?](./faq/overfitting.md)
- [How can I avoid overfitting?](./faq/avoid-overfitting.md)
- [Is it always better to have the largest possible number of folds when performing cross validation?](./faq/number-of-kfolds.md)
- [When training an SVM classifier, is it better to have a large or small number of support vectors?](./faq/num-support-vectors.md)
- [How do I evaluate a model?](./faq/evaluate-a-model.md)
- [What is the best validation metric for multi-class classification?](./faq/multiclass-metric.md)
- [What factors should I consider when choosing a predictive model technique?](./faq/choosing-technique.md)
- [What are the best toy datasets to help visualize and understand classifier behavior?](./faq/clf-behavior-data.md)
- [How do I select SVM kernels?](./faq/select_svm_kernels.md)
- [Interlude: Comparing and Computing Performance Metrics in Cross-Validation -- Imbalanced Class Problems and 3 Different Ways to Compute the F1 Score](./faq/computing-the-f1-score.md)

##### Logistic Regression

- [What is Softmax regression and how is it related to Logistic regression?](./faq/softmax_regression.md)
- [Why is logistic regression considered a linear model?](./faq/logistic_regression_linear.md)
- [What is the probabilistic interpretation of regularized logistic regression?](./faq/probablistic-logistic-regression.md)
- [Does regularization in logistic regression always results in better fit and better generalization?](./faq/regularized-logistic-regression-performance.md)
- [What is the major difference between naive Bayes and logistic regression?](./faq/naive-bayes-vs-logistic-regression.md)
- [What exactly is the ""softmax and the multinomial logistic loss"" in the context of machine learning?](./faq/softmax.md)
- [What is the relation between Loigistic Regression and Neural Networks and when to use which?](./faq/logisticregr-neuralnet.md)
- [Logistic Regression: Why sigmoid function?](./faq/logistic-why-sigmoid.md)
- [Is there an analytical solution to Logistic Regression similar to the Normal Equation for Linear Regression?](./faq/logistic-analytical.md)


##### Neural Networks and Deep Learning

- [What is the difference between deep learning and usual machine learning?](./faq/difference-deep-and-normal-learning.md)
- [Can you give a visual explanation for the back propagation algorithm for neural networks?](./faq/visual-backpropagation.md)
- [Why did it take so long for deep networks to be invented?](./faq/inventing-deeplearning.md)
- [What are some good books/papers for learning deep learning?](./faq/deep-learning-resources.md)
- [Why are there so many deep learning libraries?](./faq/many-deeplearning-libs.md)
- [Why do some people hate neural networks/deep learning?](./faq/deeplearning-criticism.md)
- [How can I know if Deep Learning works better for a specific problem than SVM or random forest?](./faq/deeplearn-vs-svm-randomforest.md)
- [What is wrong when my neural network's error increases?](./faq/neuralnet-error.md)
- [How do I debug an artificial neural network algorithm?](./faq/nnet-debugging-checklist.md)
- [What is the difference between a Perceptron, Adaline, and neural network model?](./faq/diff-perceptron-adaline-neuralnet.md)
- [What is the basic idea behind the dropout technique?](./faq/dropout.md)


##### Other Algorithms for Supervised Learning

- [Why is Nearest Neighbor a Lazy Algorithm?](./faq/lazy-knn.md)

##### Unsupervised Learning

- [What are some of the issues with clustering?](./faq/issues-with-clustering.md)

##### Semi-Supervised Learning

- [What are the advantages of semi-supervised learning over supervised and unsupervised learning?](./faq/semi-vs-supervised.md)

##### Ensemble Methods

- [Is Combining Classifiers with Stacking Better than Selecting the Best One?](./faq/logistic-boosting.md)

##### Preprocessing, Feature Selection and Extraction

- [Why do we need to re-use training parameters to transform test data?](./faq/scale-training-test.md)
- [What are the different dimensionality reduction methods in machine learning?](./faq/dimensionality-reduction.md)
- [What is the difference between LDA and PCA for dimensionality reduction?](./faq/lda-vs-pca.md)
- [When should I apply data normalization/standardization?](./faq/when-to-standardize.md)
- [Does mean centering or feature scaling affect a Principal Component Analysis?](./faq/pca-scaling.md)
- [How do you attack a machine learning problem with a large number of features?](./faq/large-num-features.md)
- [What are some common approaches for dealing with missing data?](./faq/missing-data.md)
- [What is the difference between filter, wrapper, and embedded methods for feature selection?](./faq/feature_sele_categories.md)
- [Should data preparation/pre-processing step be considered one part of feature engineering? Why or why not?](./faq/dataprep-vs-dataengin.md)
- [Is a bag of words feature representation for text classification considered as a sparse matrix?](./faq/bag-of-words-sparsity.md)

##### Naive Bayes

- [Why is the Naive Bayes Classifier naive?](./faq/naive-naive-bayes.md)
- [What is the decision boundary for Naive Bayes?](./faq/naive-bayes-boundary.md)
- [Can I use Naive Bayes classifiers for mixed variable types?](./faq/naive-bayes-vartypes.md)
- [Is it possible to mix different variable types in Naive Bayes, for example, binary and continues features?](./naive-bayes-vartypes.md)

##### Other

- [What is Euclidean distance in terms of machine learning?](./faq/euclidean-distance.md)
- [When should one use median, as opposed to the mean or average?](./faq/median-vs-mean.md)

##### Programming Languages and Libraries for Data Science and Machine Learning

- [Is R used extensively today in data science?](./faq/r-in-datascience.md)
- [What is the main difference between TensorFlow and scikit-learn?](./faq/tensorflow-vs-scikitlearn.md)

<br>





### Questions about the Book

- [Can I use paragraphs and images from the book in presentations or my blog?](./faq/copyright.md)
- [How is this different from other machine learning books?](./faq/different.md)
- [Which version of Python was used in the code examples?](./faq/py2py3.md)
- [Which technologies and libraries are being used?](./faq/technologies.md)
- [Which book version/format would you recommend?](./faq/version.md)
- [Why did you choose Python for machine learning?](./faq/why-python.md)
- [Why do you use so many leading and trailing underscores in the code examples?](./faq/underscore-convention.md)
- [What is the purpose of the `return self` idioms in your code examples?](./faq/return_self_idiom.md)
- [Are there any prerequisites and recommended pre-readings?](./faq/prerequisites.md)
- [How can I apply SVM to categorical data?](./faq/svm_for_categorical.md)


## Contact

I am happy to answer questions! Just write me an [email](mailto:mail@sebastianraschka.com)
or consider asking the question on the [Google Groups Email List](https://groups.google.com/forum/#!forum/python-machine-learning-book).

If you are interested in keeping in touch, I have quite a lively twitter stream ([@rasbt](https://twitter.com/rasbt)) all about data science and machine learning. I also maintain a [blog](http://sebastianraschka.com/articles.html) where I post all of the things I am particularly excited about.
","This GitHub repository contains the code examples of the **1st Edition** of
Python Machine Learning book. Please refer to [this] repository instead. 400
pages rich in useful material just about everything you need to know to get
started with machine learning... from theory to the actual code that you can
directly put into action."
665,A multi-user music server with a focus on participation,"# Raveberry

[![Build Status](https://img.shields.io/github/workflow/status/raveberry/raveberry/Publish%20Raveberry)](https://github.com/raveberry/raveberry/actions/workflows/publish.yml)
[![PyPI](https://img.shields.io/pypi/v/raveberry)](https://pypi.org/project/raveberry/)
[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/raveberry?style=social)](https://www.reddit.com/r/raveberry/)
[![Discord](https://img.shields.io/badge/-discord?style=social&logo=discord&label=Chat%20on%20Discord)](https://discord.gg/dy7Jxvjj9H)

Raveberry is a multi user music server that allows democratic selection of songs.

It provides an intuitive interface for requesting songs and changing their order according to the rating that users have made. It supports YouTube, Spotify and local files as sources for music.

A live demo is available at https://demo.raveberry.party/.

![](docs/showcase.gif ""Showcase Gif"")

## Installation

### Try it out!

You can test a slim version of Raveberry like this:
```
sudo apt-get install -y python3-pip mopidy redis-server ffmpeg gstreamer1.0-plugins-bad
pip3 install raveberry[run]
raveberry run
```
You might need to write `~/.local/bin/raveberry run` instead. Now you can visit `http://localhost:8080/` and play a song of your choice.

This method uses a development server, with limited performance and a restricted feature set.

### Installation

In order to gain access to all features of Raveberry, install it:
```
pip3 install raveberry[install]
raveberry install
```

If you get `raveberry: command not found` you need to run `export PATH=""$HOME/.local/bin:$PATH""`.
Raveberry was developed for the Raspberry Pi. If you need help setting yours up up, visit [this guide](https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up).

The installer will ask you to confirm the config file it uses. The default install supports YouTube and local files. To customize (e.g. to use Spotify), cancel the installation, edit the config at the provided path and rerun `raveberry install`.

Although everything *should* work fine, I recommend taking a backup of your system. On a Raspberry Pi this can be done by creating a copy of its SD card.

The installation will take at most 30 minutes, most of which is spent on installing/updating packages. You might need to reboot afterwards for all changes to take effect.

### Docker

Alternatively, you can use [docker-compose](https://docs.docker.com/compose/install/):
```
wget https://raw.githubusercontent.com/raveberry/raveberry/master/docker/docker-compose.yml
wget https://raw.githubusercontent.com/raveberry/raveberry/master/docker/.env
docker-compose up -d
```

For more information, consult [`docs/docker.md`](docs/docker.md).

### Remote Installation

You can also install Raveberry on a remote machine you have ssh access to:
```
pip3 install raveberry[install]
cd ""$(pip3 show raveberry | grep Location: | sed 's/.*: //')/raveberry""
ansible-playbook --user <user> --key-file <private_key> -i <ip>, -e ""config_file=/path/to/raveberry.yaml"" setup/system_install.yaml
```
If omitted, `config_file` defaults to `backend/config/raveberry.yaml`. `--user` and `--key-file` can be omitted if the target host is configured in your ssh config.

Passwordless sudo is default on a Raspberry Pi. For most other systems, sudo requires a password, then you have to add `--ask-become-pass`.

## First Steps

After the installation has finished `http://raveberry.local/` is up and ready to play music (go ahead and try now!). If this does not take you to the musiq landing page, use the IP of the device (`hostname -I` to find out).

You can visit `http://raveberry.local/login/` and log in as the `admin` user with your provided admin password. If you take a look at `http://raveberry.local/settings` (which is also linked from the dropdown) you can see various configuration possibilities. For more information about these settings and privileges in general refer to [`docs/privileges.md`](docs/privileges.md).

An introduction to basic functionality can be found in [`docs/functionality.md`](docs/functionality.md). Or just visit the website and find out for yourself ; )

## Updating

### Webinterface

At the bottom of the `/settings` page, click ""Upgrade Raveberry"".
A Log will be written to `/var/www`. 

### Manual

Update the PyPi package and rerun the installation.
```
pip3 install -U raveberry[install]
raveberry install
```
Your database will be preserved, unless you specify a database backup in your config file.

### Docker
Update all of your containers in the docker-compose file:
```
docker-compose pull
```

## Features

* **Live Updates**:
Web page content is updated instantly across all clients using websockets.

* **Remote Streaming**:
With `icecast`, it is possible to remotely listen to Raveberry. See [`docs/streaming.md`](docs/streaming.md).

* **Bluetooth Support**:
Use your bluetooth speakers with Raveberry, removing the need for an audio cable.

* **HiFiBerry Support**:
Attach your [HiFiBerry](https://www.hifiberry.com/) board for a high quality audio experience.

* **Hotspot**:
Provides a WiFi network for access in areas without proper infrastructure. Can double as a repeater.

* **Remote URL**:
Specify a domain to make your Raveberry accessible from the world wide web.

* **Local Files Support**:
Play all the files you already have in your local filesystem. Various filetypes supported.

* **YouTube Support**:
With `yt-dlp` as a media provider, all of YouTube is available to play.

* **Spotify Support**:
Raveberry's music player `mopidy` can play songs from Spotify, if you to log in with your account. Spotify Premium is required.

* **Soundcloud Support**:
Songs from Soundcloud are also available for you to play. ([currently broken](https://github.com/raveberry/raveberry/issues/117))

* **Privilege Levels**:
Grant people additional permissions like playback control.

* **Graphical Admin Interface**:
Raveberry features a convenient way of modifying the behavior of the server, like hotspot configuration or download limitation.

* **Complementary App**:
[Shareberry](https://github.com/raveberry/shareberry/) lets you share songs directly from your phone to Raveberry.

* **Discord Integration**:
Control your Raveberry instance from the discord chat with the [Raveberry bot](https://github.com/raveberry/shareberry/)

* **Audio normalization**:
Raveberry uses replaygain to analyze the volume of songs and prevent sharp volume transitions.

* **Screen visualization**:
With the tool `cava`, the current music is split into its frequencies and visualized on a connected screen (See screenshot below). Code in [separate Repository](https://github.com/raveberry/visualization).

* **Audio visualization**:
Using the same tool, Raveberry can also make connected LEDs flash to the rhythm of the music.

![](docs/visualization.png ""Visualization"")

## Optional Hardware Additions

Some of Raveberry's features rely on additional hardware. If you want to use all of them, consider upgrading your Raspberry Pi with one of these one of items:

* **WiFi Dongle**:
To provide a WiFi network for users to connect, you have to set up a second network interface. If disabled, your users have to be in the same network as Raveberry, or you have to configure an external URL.

* **LEDs**:
For audio visualization, Raveberry uses the `i2c` and `spi` protocols to control connected LEDs. They will automatically be used if they are detected at server startup. For more information see [`docs/leds.md`](docs/leds.md).

* **USB Sound Card**:
The quality of the internal Raspberry Pi sound card varies from model to model. For a better music experience I recommend using a small USB sound card.

* **USB Stick**:
If you don't want to use the Raspberry Pi's internal filesystem, you can insert an external medium like a USB stick. Its label can be specified in the config file and is then used to cache the songs.

## Tested Hardware

Raveberry is known to work on the following Hardware:
* Raspberry Pi 4
* Raspberry Pi 3B+
* Raspberry Pi Zero W

If you have something to add to the list, please let me know!

Although it is possible to install and run Raveberry on the original Raspberry Pi (after a very long installation), the hardware is just to weak for audio decoding and can not provide a pleasant experience at all.

## Uninstall

During installation a backup folder is created. It contains all files that were overwritten outside of the `raveberry/` folder. To undo installation, move these files back to their respective locations using the following command. Take care of changes you made in the meantime!
```
sudo cp -r backup_{timestamp}/* / 
```
To remove files created during the setup run
```
sudo scripts/uninstall.sh
```

## FAQ

### The current song is displayed in red and there is no sound
Red text means that Raveberry can't communicate with the player anymore. Either the player crashed or the interfacing library can't reconnect.

To fix this, first restart the player (`/settings` in ""Sound Output"") and wait a few seconds. If it still does not work, restart the server (`/settings` at the bottom).

### How do I enter my Spotify credentials?
To enable Spotify support, install Raveberry with `spotify: true` in `raveberry.yaml`.
When Raveberry is up and running, go to `/settings` and enter your credentials in the `Spotify` section.
Create the required client ID and client secret [here](https://mopidy.com/ext/spotify/#authentication).

### I can't log in, it always says ""Please reload""
You ran into CSRF protection. This happens when you host Raveberry behind a proxy and the protocols don't match up, e.g. `http://demo.raveberry.party` vs `https://demo.raveberry.party`.

Avoid this by providing your url either in the `raveberry.yaml` (install) or in the `.env` file (docker).

### Where are my YouTube files?

If you specified a path in your config file before installing, you will find them there. If no path was given, it will default to `~/Music/raveberry`. If you run it as `pi` using `raveberry run`, this will be `/home/pi/Music/raveberry`. If Raveberry was installed, the process is running as `www-data` and you will find the directory at `/var/www/Music/raveberry`.

### Streaming doesn't work (there is only silence)

This is a known issue on Ubuntu 20.04 and Debian Bullseye.
To fix it, downgrade `libshout3`:
```
cd /tmp
# for x86_64
wget http://mirrors.kernel.org/ubuntu/pool/main/libs/libshout/libshout3_2.4.1-2build1_amd64.deb -O libshout.deb
# for armhf (Raspberry Pi)
wget http://raspbian.raspberrypi.org/raspbian/pool/main/libs/libshout/libshout3_2.4.1-2_armhf.deb -O libshout.deb
sudo dpkg -i libshout.deb
sudo apt-mark hold libshout3
```

### I want to use the visualization without doing an install.

Install the required packages
```
sudo apt-get install cava
pip3 install raveberry[screenvis]
```
If `cava` is not available on apt, you need to [build it from source](https://github.com/karlstav/cava#from-source).

Then comment out the following line in the used cava config (add the `#`):
```
# source = cava.monitor
```
Now you can start the server with `raveberry run`, login with admin:admin at `localhost:8080/login` and enable the visualization at `localhost:8080/lights`.

## Special Thanks

* All the awesome people that created [Mopidy](https://mopidy.com/) for this incredibly versatile music player.
    * Especially [Mopidy-Spotify](https://github.com/mopidy/mopidy-spotify), without which I could not have added Spotify support.
* [django](https://www.djangoproject.com/) for providing one of the best documentations I have ever encountered.
* [@karlstav](https://github.com/karlstav) for his audio visualizer [`cava`](https://github.com/karlstav/cava).
* [`yt-dlp`](https://github.com/yt-dlp/yt-dlp) for greatly simplifying the interaction with YouTube.
* [Glium](https://github.com/glium/glium) for making OpenGL a lot less painful.
* [Steven van Tetering](https://www.tikveel.nl/) for writing [the shader](https://www.shadertoy.com/view/llycWD) I based my visualization on.
* All my friends for constantly beta testing this project.

## More Information

The [`docs/`](docs/) folder contains more information about usage, resources etc.

Don't hesitate to mail me for feedback or open an issue if you experience any problems. There is also a Reddit and a Discord community:
* Reddit: https://www.reddit.com/r/raveberry/
* Discord: https://discord.gg/dy7Jxvjj9H 

If you like this project, you can support me here:  
[![](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZUPUUHFQMZNQQ)
","Raveberry is a multi user music server that allows democratic selection of
songs. It provides an intuitive interface for requesting songs and changing
their order according to the rating that users have made. It supports YouTube,
Spotify and local files as sources for music."
365,Build ECommerce Website Like Amazon By React & Node & MongoDB,"# React & Node Tutorial - Full ECommerce in 5 Hours [2020]

Welcome to my React and Node tutorial to build a fully-functional e-commerce website in 5 hours. Open your code editor and follow me for the next hours to build an e-commerce website using React and Node.JS.

## Demo Website

👉 Demo : https://oldamazona.webacademy.pro

## Video Tutorial

👉 Click on this image to watch full 5-hours video of this tutorial

[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/Fy9SdZLBTOo/0.jpg)](https://www.youtube.com/watch?v=Fy9SdZLBTOo)

## You Will Learn

- HTML5 and CSS3: Semantic Elements, CSS Grid, Flexbox
- React: Components, Props, Events, Hooks, Router, Axios
- Redux: Store, Reducers, Actions
- Node & Express: Web API, Body Parser, File Upload, JWT
- MongoDB: Mongoose, Aggregation
- Development: ESLint, Babel, Git, Github,
- Deployment: Heroku
- Watch React & Node Tutorial

## Run Locally

### 1. Clone repo

```
$ git clone git@github.com:basir/node-react-ecommerce.git
$ cd node-react-ecommerce
```

### 2. Install MongoDB

Download it from here: https://docs.mongodb.com/manual/administration/install-community/

### 3. Run Backend

```
$ npm install
$ npm start
```

### 4. Run Frontend

```
# open new terminal
$ cd frontend
$ npm install
$ npm start
```

### 5. Create Admin User

- Run this on chrome: http://localhost:5000/api/users/createadmin
- It returns admin email and password

### 6. Login

- Run http://localhost:3000/signin
- Enter admin email and password and click signin

### 7. Create Products

- Run http://localhost:3000/products
- Click create product and enter product info

## Support

- Q/A: https://webacademy.pro/oldamazona
- Contact Instructor: [Basir](mailto:basir.jafarzadeh@gmail.com)

## Video Tutorials

### [00:02:00 Part 01- Introduction](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=120s)

It gives you an overview of the tutorial to build an eCommerce website like Amazon.

### [00:08:26 Part 02- Install Tools](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=506s)

You need to install a code editor and a web browser to start web development. In this part, we will prepare the environment to start coding.

### [00:12:36 Part 03- Website Template](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=756s)

In this part, you create a web template for the eCommerce website.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/56kqn8m5n1m9fejdoxkz.png)

### [00:29:47 Part 04- Products List](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=1787s)

We will create a list of products as static HTML elements.

### [00:41:54 Part 05- Create Sidebar](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=2514s)

We will create a hamburger menu that shows and hide the sidebar. Also, we design the details page of the products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3sceblg6i6790minhaxg.jpg)

### [00:52:39 Part 06- Create React App](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3159s)

This part is about the frontend. We use React library to build the UI elements.

### [01:01:09 Part 07- Render Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3669s)

This is the home page of e-commerce. It shows a list of products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hqiwteg10o8a2cnq0wwi.jpg)

### [01:06:30 Part 08- Product Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3990s)

When the user clicks on a product there should a page to show details about that product. This lesson is all about making an attractive details page.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/csskvzbcmz4ypki2xjgk.jpg)

### [01:30:53 Part 09- Create Node Server](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5453s)

This part is about Node and Express. They are the popular framework to create a web server using JavaScript language. We will create a MongoDB database and save and retrieve the admin user.

### [01:39:52 Part 10- Fetch Server Data](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5992s)

In this lesson, we use React Hooks to fetch data from the server. We use the axios library to do this job in a modern async/await style.

### [01:47:55 Part 11- Manage State With Redux](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=6475s)

When it comes to handling multiple forms with their data nothing is better than state management. We use Redux in this lesson to handle complex state and keep the app behavior predictable.

### [02:07:11 Part 12- Add Redux To Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=7631s)

In this part, we move the details page state to Redux. First, we create reducers then define actions and connect them to the details component.

### [02:29:23 Part 13- Shopping Cart Screen](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=8963s)

Shopping Cart is the heart of any e-commerce website. We focus on creating a user-friendly shopping cart using React and Redux.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/fyzf0no5ej1fgxp5972e.png)

### [03:08:11 Part 14- Connect MongoDB](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=11291s)

This lesson is about persisting data on the MongoDB database. We use mongoose package to create models and save and retrieve data from the database.

### [03:21:35 Part 15- Sign In User](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=12095s)

We need to register the user before redirecting them to the checkout. In this part, we will create forms for getting user info and save them in the database.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/92coj0rezr5508vhfv34.png)

### [03:56:02 Part 16- Manage Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=14162s)

Admin should be able to define products and update the count in stock whenever they like. This page is about managing ECommerce products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/154a5zk6vfapukjaxwyu.png)

### [04:38:43 Part 17- Checkout Wizard](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=16723s)

In this part, we implement the checkout wizard including sign in, shipping info, payment method, and place order.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l8w3g9mc3ccijt70wpf3.png)

## Only On Udemy

Following parts are on my udemy course. [Get it by 90% discount](https://www.udemy.com/course/build-ecommerce-website-like-amazon-react-node-mongodb/?couponCode=BASIR1)

### Part 18- Order Details Screen

It shows all details about an order includeing shipping, payments and order items. Also it is possible for admin to manage orders like set them as delivered.

### Part 19- Connect to PayPal

This parts create PaypalButton component to show paypal payment button on the screen.
when users click on it, they will be redirected to paypal website to make the payment.
after payment users will be redirected to details page of the order.

### Part 20- Manage Order Screen

This is an admin page to manage list of orders. Admin can delete an order or set it as delivered.

### Part 21- User Profile Screen

When user click on thier name on the header menu, this page appears. It consists of two sections. First an profile update form and second order history.

### Part 22- Filter and Sort Products

In the home page, right after header, there is a filter bar to filter products based on their name and description. also it is possible to sort product based on prices and arrivals.

### Part 23- Deploy Website on Heroku

This section explains all steps to publish the ecommerce website on heroku. first you need to create a cloud mongodb and the make an account on heroku.

### Part 24- Rate and Review Products

This part shows list of reviews by users for each products. also it provides a form to enter rating and review for every single product. also it update the avg rating of each product by user ratings.

1. index.html
2. link fontawesome
3. Rating.js
4. create stars based on props.value
5. show text based on props.text
6. index.css
7. style rating, span color gold and last span to gray, link text to blue
8. HomeScreen.js
9. use Rating component
10. ProductScreen.js
11. use Rating component, wrap it in anchor#reviews
12. list reviews after product details
13. create new review form to get rating and reviews
14. index.css
15. style reviews
16. ProductScreen.js
17. implement submitHandler
18. productActions.js
19. create saveProductReview(productId, review)
20. productConstants.js
21. create product review constants
22. productReducers.js
23. create productReviewSaveReducer
24. store.js
25. add productReviewSaveReducer
26. backend
27. productRoute.js
28. router.post('/:id/reviews')
29. save review in product.reviews
30. update avg rating

### Part 25- Upload Product Images On Local Server

Admin shoud be able to uploads photos from their computer. This section is about uploading images on local server ans aws s3 cloud server.

1. npm install multer
2. routes/uploadRoute.js
3. import express and multer
4. create disk storage with Date.now().jpg as filename
5. set upload as multer({ storage })
6. router.post('/', upload.single('image'))
7. return req.file.path
8. server.js
9. app.use('/api/uploads',uploadRoute)
10. ProductsScreen.js
11. create state hook for uploading
12. create input image file and onChange handler
13. define handleUploadImage function
14. prepare file for upload
15. axios post file as multipart/form-data
16. set image and set uploading
17. check result

### Part 26- Upload Product Images On AWS S3

This section is about uploading images amazon aws s3 cloud server.

1. create aws account
2. open https://s3.console.aws.amazon.com
3. create public bucket as amazona
4. create api key and secret
5. past it into .env as accessKeyId and secretAccessKey
6. move dotenv to config.js
7. add accessKeyId and secretAccessKey to config.js
8. npm install aws-sdk multer-s3
9. routes/uploadRoute.js
10. set aws.config.update to config values
11. create s3 from new aws.S3()
12. create storageS3 from multerS3 by setting s3, bucket and acl
13. set uploadS3 as multer({ storage: storageS3 })
14. router.post('/s3', uploadS3.single('image'))
15. return req.file.location
16. ProductsScreen.js
17. on handleUploadImage set axios.post('api/uploads/s3')
18. check result on website and s3

## Summary

In this tutorial, we have made an eCommerce website like Amazon. Feel free to change this project based on your needs and add it to your portfolio.
Also, I will love to hear your comment about this React and Node tutorial. Please share your thoughts here.
","Open your code editor and follow me for the next hours to build an e-commerce
website using React and Node.JS. You will learn about HTML5 and CSS3: Semantic
Elements, CSS Grid, Flexbox. React: Components, Props, Events, Hooks, Router,
Axios- Redux: Store, Reducers, Actions. Node & Express: Web API, Body Parser,
File Upload, JWT."
2450,Build ECommerce Website Like Amazon By React & Node & MongoDB,"# React & Node Tutorial - Full ECommerce in 5 Hours [2020]

Welcome to my React and Node tutorial to build a fully-functional e-commerce website in 5 hours. Open your code editor and follow me for the next hours to build an e-commerce website using React and Node.JS.

## Demo Website

👉 Demo : https://oldamazona.webacademy.pro

## Video Tutorial

👉 Click on this image to watch full 5-hours video of this tutorial

[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/Fy9SdZLBTOo/0.jpg)](https://www.youtube.com/watch?v=Fy9SdZLBTOo)

## You Will Learn

- HTML5 and CSS3: Semantic Elements, CSS Grid, Flexbox
- React: Components, Props, Events, Hooks, Router, Axios
- Redux: Store, Reducers, Actions
- Node & Express: Web API, Body Parser, File Upload, JWT
- MongoDB: Mongoose, Aggregation
- Development: ESLint, Babel, Git, Github,
- Deployment: Heroku
- Watch React & Node Tutorial

## Run Locally

### 1. Clone repo

```
$ git clone git@github.com:basir/node-react-ecommerce.git
$ cd node-react-ecommerce
```

### 2. Install MongoDB

Download it from here: https://docs.mongodb.com/manual/administration/install-community/

### 3. Run Backend

```
$ npm install
$ npm start
```

### 4. Run Frontend

```
# open new terminal
$ cd frontend
$ npm install
$ npm start
```

### 5. Create Admin User

- Run this on chrome: http://localhost:5000/api/users/createadmin
- It returns admin email and password

### 6. Login

- Run http://localhost:3000/signin
- Enter admin email and password and click signin

### 7. Create Products

- Run http://localhost:3000/products
- Click create product and enter product info

## Support

- Q/A: https://webacademy.pro/oldamazona
- Contact Instructor: [Basir](mailto:basir.jafarzadeh@gmail.com)

## Video Tutorials

### [00:02:00 Part 01- Introduction](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=120s)

It gives you an overview of the tutorial to build an eCommerce website like Amazon.

### [00:08:26 Part 02- Install Tools](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=506s)

You need to install a code editor and a web browser to start web development. In this part, we will prepare the environment to start coding.

### [00:12:36 Part 03- Website Template](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=756s)

In this part, you create a web template for the eCommerce website.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/56kqn8m5n1m9fejdoxkz.png)

### [00:29:47 Part 04- Products List](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=1787s)

We will create a list of products as static HTML elements.

### [00:41:54 Part 05- Create Sidebar](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=2514s)

We will create a hamburger menu that shows and hide the sidebar. Also, we design the details page of the products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3sceblg6i6790minhaxg.jpg)

### [00:52:39 Part 06- Create React App](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3159s)

This part is about the frontend. We use React library to build the UI elements.

### [01:01:09 Part 07- Render Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3669s)

This is the home page of e-commerce. It shows a list of products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hqiwteg10o8a2cnq0wwi.jpg)

### [01:06:30 Part 08- Product Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3990s)

When the user clicks on a product there should a page to show details about that product. This lesson is all about making an attractive details page.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/csskvzbcmz4ypki2xjgk.jpg)

### [01:30:53 Part 09- Create Node Server](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5453s)

This part is about Node and Express. They are the popular framework to create a web server using JavaScript language. We will create a MongoDB database and save and retrieve the admin user.

### [01:39:52 Part 10- Fetch Server Data](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5992s)

In this lesson, we use React Hooks to fetch data from the server. We use the axios library to do this job in a modern async/await style.

### [01:47:55 Part 11- Manage State With Redux](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=6475s)

When it comes to handling multiple forms with their data nothing is better than state management. We use Redux in this lesson to handle complex state and keep the app behavior predictable.

### [02:07:11 Part 12- Add Redux To Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=7631s)

In this part, we move the details page state to Redux. First, we create reducers then define actions and connect them to the details component.

### [02:29:23 Part 13- Shopping Cart Screen](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=8963s)

Shopping Cart is the heart of any e-commerce website. We focus on creating a user-friendly shopping cart using React and Redux.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/fyzf0no5ej1fgxp5972e.png)

### [03:08:11 Part 14- Connect MongoDB](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=11291s)

This lesson is about persisting data on the MongoDB database. We use mongoose package to create models and save and retrieve data from the database.

### [03:21:35 Part 15- Sign In User](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=12095s)

We need to register the user before redirecting them to the checkout. In this part, we will create forms for getting user info and save them in the database.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/92coj0rezr5508vhfv34.png)

### [03:56:02 Part 16- Manage Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=14162s)

Admin should be able to define products and update the count in stock whenever they like. This page is about managing ECommerce products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/154a5zk6vfapukjaxwyu.png)

### [04:38:43 Part 17- Checkout Wizard](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=16723s)

In this part, we implement the checkout wizard including sign in, shipping info, payment method, and place order.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l8w3g9mc3ccijt70wpf3.png)

## Only On Udemy

Following parts are on my udemy course. [Get it by 90% discount](https://www.udemy.com/course/build-ecommerce-website-like-amazon-react-node-mongodb/?couponCode=BASIR1)

### Part 18- Order Details Screen

It shows all details about an order includeing shipping, payments and order items. Also it is possible for admin to manage orders like set them as delivered.

### Part 19- Connect to PayPal

This parts create PaypalButton component to show paypal payment button on the screen.
when users click on it, they will be redirected to paypal website to make the payment.
after payment users will be redirected to details page of the order.

### Part 20- Manage Order Screen

This is an admin page to manage list of orders. Admin can delete an order or set it as delivered.

### Part 21- User Profile Screen

When user click on thier name on the header menu, this page appears. It consists of two sections. First an profile update form and second order history.

### Part 22- Filter and Sort Products

In the home page, right after header, there is a filter bar to filter products based on their name and description. also it is possible to sort product based on prices and arrivals.

### Part 23- Deploy Website on Heroku

This section explains all steps to publish the ecommerce website on heroku. first you need to create a cloud mongodb and the make an account on heroku.

### Part 24- Rate and Review Products

This part shows list of reviews by users for each products. also it provides a form to enter rating and review for every single product. also it update the avg rating of each product by user ratings.

1. index.html
2. link fontawesome
3. Rating.js
4. create stars based on props.value
5. show text based on props.text
6. index.css
7. style rating, span color gold and last span to gray, link text to blue
8. HomeScreen.js
9. use Rating component
10. ProductScreen.js
11. use Rating component, wrap it in anchor#reviews
12. list reviews after product details
13. create new review form to get rating and reviews
14. index.css
15. style reviews
16. ProductScreen.js
17. implement submitHandler
18. productActions.js
19. create saveProductReview(productId, review)
20. productConstants.js
21. create product review constants
22. productReducers.js
23. create productReviewSaveReducer
24. store.js
25. add productReviewSaveReducer
26. backend
27. productRoute.js
28. router.post('/:id/reviews')
29. save review in product.reviews
30. update avg rating

### Part 25- Upload Product Images On Local Server

Admin shoud be able to uploads photos from their computer. This section is about uploading images on local server ans aws s3 cloud server.

1. npm install multer
2. routes/uploadRoute.js
3. import express and multer
4. create disk storage with Date.now().jpg as filename
5. set upload as multer({ storage })
6. router.post('/', upload.single('image'))
7. return req.file.path
8. server.js
9. app.use('/api/uploads',uploadRoute)
10. ProductsScreen.js
11. create state hook for uploading
12. create input image file and onChange handler
13. define handleUploadImage function
14. prepare file for upload
15. axios post file as multipart/form-data
16. set image and set uploading
17. check result

### Part 26- Upload Product Images On AWS S3

This section is about uploading images amazon aws s3 cloud server.

1. create aws account
2. open https://s3.console.aws.amazon.com
3. create public bucket as amazona
4. create api key and secret
5. past it into .env as accessKeyId and secretAccessKey
6. move dotenv to config.js
7. add accessKeyId and secretAccessKey to config.js
8. npm install aws-sdk multer-s3
9. routes/uploadRoute.js
10. set aws.config.update to config values
11. create s3 from new aws.S3()
12. create storageS3 from multerS3 by setting s3, bucket and acl
13. set uploadS3 as multer({ storage: storageS3 })
14. router.post('/s3', uploadS3.single('image'))
15. return req.file.location
16. ProductsScreen.js
17. on handleUploadImage set axios.post('api/uploads/s3')
18. check result on website and s3

## Summary

In this tutorial, we have made an eCommerce website like Amazon. Feel free to change this project based on your needs and add it to your portfolio.
Also, I will love to hear your comment about this React and Node tutorial. Please share your thoughts here.
","Open your code editor and follow me for the next hours to build an e-commerce
website using React and Node.JS. You will learn about HTML5 and CSS3: Semantic
Elements, CSS Grid, Flexbox. React: Components, Props, Events, Hooks, Router,
Axios- Redux: Store, Reducers, Actions. Node & Express: Web API, Body Parser,
File Upload, JWT."
763,Provides snackbar notifications for React,"# React Notification
[![Build Status](https://travis-ci.org/pburtchaell/react-notification.svg)](https://travis-ci.org/pburtchaell/react-notification) [![npm downloads](https://img.shields.io/npm/dm/react-notification.svg?style=flat)](http://badge.fury.io/js/react-notification)

React Notification provides snackbar notification messages and notification stacks. The default visual style and interaction follows [Material Design guidelines for snackbars](http://www.google.com/design/spec/components/snackbars-toasts.html#snackbars-toasts-usage) and can be fully customized.

## Warning
As of 2019 December 3, this project is deprecated and unmaintained. The package is [still available on npm](https://www.npmjs.com/package/react-notification) and can be installed, but I would recommend finding an alternative that supports new versions of React. [Material UI includes a snackbar component](https://material-ui.com/components/snackbars/) and is a good option.

## Documentation and Help
- [Guides](/docs/guides/)
- [Introduction](/docs/introduction.md)
- [Examples](/examples)

## Releases
- [Releases](https://github.com/pburtchaell/react-notification/releases)
- [Upgrading versions](/UPGRADING.md)

## Maintainers
- [Patrick Burtchaell](http://github.com/pburtchaell)
- [Berkeley Martinez](https://github.com/BerkeleyTrue)
- [Joey Figaro](https://github.com/joeyfigaro)

## License
Copyright (c) 2015-2018 Patrick Burtchaell. 

[Licensed with The MIT License (MIT)](https://raw.githubusercontent.com/pburtchaell/react-notification/master/LICENSE).
","React Notification provides snackbar notification messages and notification
stacks. The default visual style and interaction follows [Material Design
guidelines for snackbars] and can be fully customized. As of 2019 December 3,
this project is deprecated and unmaintained."
1452,React.js Google Maps integration component,"# react-google-maps
> React.js Google Maps integration component

[![Version][npm-image]][npm-url] [![Travis CI][travis-image]][travis-url] [![Quality][codeclimate-image]][codeclimate-url] [![Coverage][codeclimate-coverage-image]][codeclimate-coverage-url] [![Dependencies][gemnasium-image]][gemnasium-url] [![Gitter][gitter-image]][gitter-url]


## [Introduction](https://tomchentw.github.io/react-google-maps/#introduction)


## [Installation](https://tomchentw.github.io/react-google-maps/#installation)


## [Usage & Configuration](https://tomchentw.github.io/react-google-maps/#usage--configuration)


## [Changelog][changelog-url]

The changelog is automatically generated via [standard-version][standard-version] and can be found in project root as well as npm tarball.


## [Demo App][demo-app-url]

* [Source code][demo-app-source]
* [CodeSandbox](https://codesandbox.io/s/2xyw6n4o9y)

## Getting Help

**Before doing this, did you**:

1. Read the [documentation](https://tomchentw.github.io/react-google-maps)
2. Read the [source code](https://github.com/tomchentw/react-google-maps)


_You can get someone's help in three ways_:

1. Ask on StackOverflow [with a google-maps tag](https://stackoverflow.com/questions/tagged/google-maps?sort=votes&pageSize=50) or [use react-google-maps as a keyword](https://stackoverflow.com/search?q=react-google-maps)
2. Ask in [the chat room][gitter-url]
3. Create a Pull Request with your solutions to your problem

Please, be noted, **no one**, I mean, **no one**, is obligated to help you in **ANY** means. Your time is valuable, so does our contributors. Don't waste our time posting questions like “how do I do X with React-Google-Maps” and “my code doesn't work”. This is not the primary purpose of the issue tracker. Don't abuse.


## For contributors

<details>
  <summary>Some simple guidelines</summary>

* **Don't** manually modify `lib` folder. They're generated during `yarn release` process
* Follow [conventional-commits-specification][conventional-commits-specification]
* [standard-version][standard-version]
* Auto generated: `src/macros` -> `src/components` -> `lib/components`
* Other components are manually maintained
* Use `yarn` and keep `yarn.lock` updated in PR
* Discuss! Discuss! Discuss!

</details>


[npm-image]: https://img.shields.io/npm/v/react-google-maps.svg?style=flat-square
[npm-url]: https://www.npmjs.org/package/react-google-maps

[travis-image]: https://img.shields.io/travis/tomchentw/react-google-maps.svg?style=flat-square
[travis-url]: https://travis-ci.org/tomchentw/react-google-maps
[codeclimate-image]: https://img.shields.io/codeclimate/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[codeclimate-coverage-image]: https://img.shields.io/codeclimate/coverage/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-coverage-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[gemnasium-image]: https://img.shields.io/gemnasium/tomchentw/react-google-maps.svg?style=flat-square
[gemnasium-url]: https://gemnasium.com/tomchentw/react-google-maps
[gitter-image]: https://badges.gitter.im/Join%20Chat.svg
[gitter-url]: https://gitter.im/tomchentw/react-google-maps?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

[changelog-url]: https://github.com/tomchentw/react-google-maps/blob/master/CHANGELOG.md
[demo-app-url]: https://tomchentw.github.io/#/demos/react-google-maps
[demo-app-source]: https://github.com/tomchentw/tomchentw.github.io/blob/master/src/Pages/Demos/ReactGoogleMaps.jsx

[standard-version]: https://github.com/conventional-changelog/standard-version
[conventional-commits-specification]: https://conventionalcommits.org/
","React-Google-Maps is a React.js Google Maps integration component. There are
three ways to get help with the project. The changelog is automatically
generated via [standard-version] and can be found in project root as well as npm
tarball."
1496,A series of examples on how to TDD React,"# react-tdd-guide
A series of examples on how to TDD React

## Getting started

1. install [nvm](https://github.com/creationix/nvm)
- Grab an editor or IDE. I recommend Webstorm, Atom, and VIM, in that order.
- `git clone` ...
- `nvm install 4` OR if v4 of node.js is installed, `nvm use`
- `npm i`

## How to use this guide

Each section is broken out into its own folder, starting with [basics](https://github.com/zpratt/react-tdd-guide/tree/master/basics). What you'll find there is the finished example. I am experimenting with using the [commit history](https://github.com/zpratt/react-tdd-guide/commits/master/basics) and comments to drive the guide itself. Feedback on whether this works or not would be appreciated.

Each commit that is suffixed with **""- red""** can be checked out separately to examine the failing test. Each commit that is suffixed with **""- green""** shows how I finally passed the failing assertion.

Looking at the history for each section will show you only the steps needed to drive that part of the application.

## Philosophy

* Avoid the need for runners and browsers
  * Achieved by using jest and [react-testing-library](https://testing-library.com/docs/react-testing-library/intro)

## Table of Contents

* [Basics](https://github.com/zpratt/react-tdd-guide/commits/master/basics) - Steps for TDD'ing the simplest of React components: An unordered list of items. Start here if you're not familiar with TDD'ing React and want to see a simple introduction.
  * [Running version](http://zpratt.github.io/react-tdd-guide/examples/basics/)
* [Simple event handling](https://github.com/zpratt/react-tdd-guide/commits/master/event-handling) (WIP)
* [Simple stateful input](https://github.com/zpratt/react-tdd-guide/commits/master/state)
* Centralized state management techniques (not done)
* Redux (not done)
* React router (not done)

## Running the tests for a section

* `npm run <section name>`

## Running all tests

* `npm test`

## Contributing

Please feel free to open an issue for:

* A question on how to do something
* A request for further clarification

Use a pull request for

* Suggestions on changing how something is tested
* To add an example you think would be valuable

## Caveats

I am not a windows user, therefore this has only been tested on OSX.
","A series of examples on how to TDD React. Each section is broken out into its
own folder, starting with [basics] What you'll find there is the finished
example. I am experimenting with using the [commit history] and comments to
drive the guide itself."
572,The Tcl Core. (Mirror of core.tcl-lang.org),"# README:  Tcl

This is the **Tcl 9.0a4** source distribution.

You can get any source release of Tcl from [our distribution
site](https://sourceforge.net/projects/tcl/files/Tcl/).

8.6 (production release, daily build)
[![Build Status](https://github.com/tcltk/tcl/workflows/Linux/badge.svg?branch=core-8-6-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Linux%22+branch%3Acore-8-6-branch)
[![Build Status](https://github.com/tcltk/tcl/workflows/Windows/badge.svg?branch=core-8-6-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Windows%22+branch%3Acore-8-6-branch)
[![Build Status](https://github.com/tcltk/tcl/workflows/macOS/badge.svg?branch=core-8-6-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22macOS%22+branch%3Acore-8-6-branch)
<br>
8.7 (in development, daily build))
[![Build Status](https://github.com/tcltk/tcl/workflows/Linux/badge.svg?branch=core-8-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Linux%22+branch%3Acore-8-branch)
[![Build Status](https://github.com/tcltk/tcl/workflows/Windows/badge.svg?branch=core-8-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Windows%22+branch%3Acore-8-branch)
[![Build Status](https://github.com/tcltk/tcl/workflows/macOS/badge.svg?branch=core-8-branch)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22macOS%22+branch%3Acore-8-branch)
<br>
9.0 (in development, daily build))
[![Build Status](https://github.com/tcltk/tcl/workflows/Linux/badge.svg?branch=main)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Linux%22+branch%3Amain)
[![Build Status](https://github.com/tcltk/tcl/workflows/Windows/badge.svg?branch=main)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22Windows%22+branch%3Amain)
[![Build Status](https://github.com/tcltk/tcl/workflows/macOS/badge.svg?branch=main)](https://github.com/tcltk/tcl/actions?query=workflow%3A%22macOS%22+branch%3Amain)

## Contents
 1. [Introduction](#intro)
 2. [Documentation](#doc)
 3. [Compiling and installing Tcl](#build)
 4. [Development tools](#devtools)
 5. [Tcl newsgroup](#complangtcl)
 6. [The Tcler's Wiki](#wiki)
 7. [Mailing lists](#email)
 8. [Support and Training](#support)
 9. [Tracking Development](#watch)
 10. [Thank You](#thanks)

## <a id=""intro"">1.</a> Introduction
Tcl provides a powerful platform for creating integration applications that
tie together diverse applications, protocols, devices, and frameworks.
When paired with the Tk toolkit, Tcl provides the fastest and most powerful
way to create GUI applications that run on PCs, Unix, and Mac OS X.
Tcl can also be used for a variety of web-related tasks and for creating
powerful command languages for applications.

Tcl is maintained, enhanced, and distributed freely by the Tcl community.
Source code development and tracking of bug reports and feature requests
take place at [core.tcl-lang.org](https://core.tcl-lang.org/).
Tcl/Tk release and mailing list services are [hosted by
SourceForge](https://sourceforge.net/projects/tcl/)
with the Tcl Developer Xchange hosted at
[www.tcl-lang.org](https://www.tcl-lang.org).

Tcl is a freely available open-source package.  You can do virtually
anything you like with it, such as modifying it, redistributing it,
and selling it either in whole or in part.  See the file
`license.terms` for complete information.

## <a id=""doc"">2.</a> Documentation
Extensive documentation is available on our website.
The home page for this release, including new features, is
[here](https://www.tcl-lang.org/software/tcltk/9.0.html).
Detailed release notes can be found at the
[file distributions page](https://sourceforge.net/projects/tcl/files/Tcl/)
by clicking on the relevant version.

Information about Tcl itself can be found at the [Developer
Xchange](https://www.tcl-lang.org/about/).
There have been many Tcl books on the market.  Many are mentioned in
[the Wiki](https://wiki.tcl-lang.org/_/ref?N=25206).

The complete set of reference manual entries for Tcl 9.0 is [online,
here](https://www.tcl-lang.org/man/tcl9.0/).

### <a id=""doc.unix"">2a.</a> Unix Documentation
The `doc` subdirectory in this release contains a complete set of
reference manual entries for Tcl.  Files with extension ""`.1`"" are for
programs (for example, `tclsh.1`); files with extension ""`.3`"" are for C
library procedures; and files with extension ""`.n`"" describe Tcl
commands.  The file ""`doc/Tcl.n`"" gives a quick summary of the Tcl
language syntax.  To print any of the man pages on Unix, cd to the
""doc"" directory and invoke your favorite variant of troff using the
normal -man macros, for example

		groff -man -Tpdf Tcl.n >output.pdf

to print Tcl.n to PDF.  If Tcl has been installed correctly and your ""man"" program
supports it, you should be able to access the Tcl manual entries using the
normal ""man"" mechanisms, such as

		man Tcl

### <a id=""doc.win"">2b.</a> Windows Documentation
The ""doc"" subdirectory in this release contains a complete set of Windows
help files for Tcl.  Once you install this Tcl release, a shortcut to the
Windows help Tcl documentation will appear in the ""Start"" menu:

		Start | Programs | Tcl | Tcl Help

## <a id=""build"">3.</a> Compiling and installing Tcl
There are brief notes in the `unix/README`, `win/README`, and `macosx/README`
about compiling on these different platforms.  There is additional information
about building Tcl from sources
[online](https://www.tcl-lang.org/doc/howto/compile.html).

## <a id=""devtools"">4.</a> Development tools
ActiveState produces a high-quality set of commercial quality development
tools that is available to accelerate your Tcl application development.
Tcl Dev Kit builds on the earlier TclPro toolset and provides a debugger,
static code checker, single-file wrapping utility, bytecode compiler, and
more.  More information can be found at

	https://www.activestate.com/products/tcl/

## <a id=""complangtcl"">5.</a> Tcl newsgroup
There is a USENET newsgroup, ""`comp.lang.tcl`"", intended for the exchange of
information about Tcl, Tk, and related applications.  The newsgroup is a
great place to ask general information questions.  For bug reports, please
see the ""Support and bug fixes"" section below.

## <a id=""wiki"">6.</a> Tcl'ers Wiki
There is a [wiki-based open community site](https://wiki.tcl-lang.org/)
covering all aspects of Tcl/Tk.

It is dedicated to the Tcl programming language and its extensions.  A
wealth of useful information can be found there.  It contains code
snippets, references to papers, books, and FAQs, as well as pointers to
development tools, extensions, and applications.  You can also recommend
additional URLs by editing the wiki yourself.

## <a id=""email"">7.</a> Mailing lists
Several mailing lists are hosted at SourceForge to discuss development or use
issues (like Macintosh and Windows topics).  For more information and to
subscribe, visit [here](https://sourceforge.net/projects/tcl/) and go to the
Mailing Lists page.

## <a id=""support"">8.</a> Support and Training
We are very interested in receiving bug reports, patches, and suggestions for
improvements.  We prefer that you send this information to us as tickets
entered into [our issue tracker](https://core.tcl-lang.org/tcl/reportlist).

We will log and follow-up on each bug, although we cannot promise a
specific turn-around time.  Enhancements may take longer and may not happen
at all unless there is widespread support for them (we're trying to
slow the rate at which Tcl/Tk turns into a kitchen sink).  It's very
difficult to make incompatible changes to Tcl/Tk at this point, due to
the size of the installed base.

The Tcl community is too large for us to provide much individual support for
users.  If you need help we suggest that you post questions to `comp.lang.tcl`
or ask a question on [Stack
Overflow](https://stackoverflow.com/questions/tagged/tcl).  We read the
newsgroup and will attempt to answer esoteric questions for which no one else
is likely to know the answer.  In addition, see the wiki for [links to other
organizations](https://wiki.tcl-lang.org/training) that offer Tcl/Tk training.

## <a id=""watch"">9.</a> Tracking Development
Tcl is developed in public.  You can keep an eye on how Tcl is changing at
[core.tcl-lang.org](https://core.tcl-lang.org/).

## <a id=""thanks"">10.</a> Thank You
We'd like to express our thanks to the Tcl community for all the
helpful suggestions, bug reports, and patches we have received.
Tcl/Tk has improved vastly and will continue to do so with your help.
","This is the **Tcl 9.0a4** source distribution. You can get any source release of
Tcl from [our distribution
site](https://sourceforge.net/projects/tcl/files/Tcl/). Tcl provides the fastest
and most powerful toolkit to create applications."
1448,"This is a code repository for the corresponding YouTube video. In this tutorial, we're going to build and deploy a React Video Chat Application using WebRTC.","# Realtime Chat Application

![Video Chat](https://i.ibb.co/7WZRLD1/122.jpg)

## Introduction
This is a code repository for the corresponding video tutorial. 

In this tutorial, we're going to build and deploy a React Video Chat Application using WebRTC.

Setup:
- run ```npm i && npm start``` for both client and server side to start the development server
","This is a code repository for the corresponding video tutorial. In this
tutorial, we're going to build and deploy a React Video Chat Application using
WebRTC. We'll use both the client and server side to start the development
server on the client side and the server side for the video chat on the other
side. The code is available in the GitHub repository. For more information on
how to use this code, check out the code repository. It's available as a
dependency on the React-RTC project."
1458,Redefined chart library built with React and D3,"# Recharts

[![storybook](https://raw.githubusercontent.com/storybooks/brand/master/badge/badge-storybook.svg)](https://master--63da8268a0da9970db6992aa.chromatic.com/)
[![Build Status](https://github.com/recharts/recharts/workflows/Node.js%20CI/badge.svg)](https://github.com/recharts/recharts/actions)
[![Coverage Status](https://coveralls.io/repos/recharts/recharts/badge.svg?branch=master&service=github)](https://coveralls.io/github/recharts/recharts?branch=master)
[![npm version](https://badge.fury.io/js/recharts.svg)](http://badge.fury.io/js/recharts)
[![npm downloads](https://img.shields.io/npm/dm/recharts.svg?style=flat-square)](https://www.npmjs.com/package/recharts)
[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](/LICENSE)

## Introduction

Recharts is a **Redefined** chart library built with [React](https://facebook.github.io/react/) and [D3](http://d3js.org).

The main purpose of this library is to help you to write charts in React applications without any pain. Main principles of Recharts are:

1. **Simply** deploy with React components.
2. **Native** SVG support, lightweight depending only on some D3 submodules.
3. **Declarative** components, components of charts are purely presentational.

Documentation at [recharts.org](https://recharts.org)

Please see [the wiki](https://github.com/recharts/recharts/wiki) for FAQ.

## Examples

```jsx
<LineChart
  width={400}
  height={400}
  data={data}
  margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
>
  <XAxis dataKey=""name"" />
  <Tooltip />
  <CartesianGrid stroke=""#f5f5f5"" />
  <Line type=""monotone"" dataKey=""uv"" stroke=""#ff7300"" yAxisId={0} />
  <Line type=""monotone"" dataKey=""pv"" stroke=""#387908"" yAxisId={1} />
</LineChart>
```

All the components of Recharts are clearly separated. The lineChart is composed of x axis, tooltip, grid, and line items, and each of them is an independent React Component. The clear separation and composition of components is one of the principle Recharts follows.

## Installation

### npm

NPM is the easiest and fastest way to get started using Recharts. It is also the recommended installation method when building single-page applications (SPAs). It pairs nicely with a CommonJS module bundler such as Webpack.


```sh
# latest stable
$ npm install recharts
```

### umd

The UMD build is also available on unpkg.com:

```html
 <script src=""https://unpkg.com/react/umd/react.production.min.js""></script>
 <script src=""https://unpkg.com/react-dom/umd/react-dom.production.min.js""></script>
 <script src=""https://unpkg.com/recharts/umd/Recharts.min.js""></script>
```

Then you can find the library on `window.Recharts`.

### dev build

```sh
$ git clone https://github.com/recharts/recharts.git
$ cd recharts
$ npm install
$ npm run build
```

## Demo

To examine the demos in your local build, execute:

```sh
$ npm run[-script] demo
```

and then browse to http://localhost:3000.

## Storybook

We are in the process of unifying documentation and examples in storybook. To run it locally, execute

```sh
$ npm run[-script] storybook
```

and then browse to http://localhost:6006.

## Module Formats

- [babel-plugin-recharts](https://github.com/recharts/babel-plugin-recharts) A simple transform to cherry-pick Recharts modules so you don’t have to.

## License

[MIT](http://opensource.org/licenses/MIT)

Copyright (c) 2015-2022 Recharts Group.
","Recharts is a chart library built with [React] and [D3] The main purpose of this
library is to help you to write charts in React applications without any pain.
All the components of Recharts are clearly separated. The lineChart is composed
of x axis, grid, and line items, and each of them is an independent React
component. It pairs nicely with a CommonJS module bundler such as Webpack. It is
also the recommended installation method when building single-page applications
(SPAs)"
3345,Reddit Enhancement Suite,"# Reddit Enhancement Suite

[![RES Pipeline](https://github.com/honestbleeps/Reddit-Enhancement-Suite/actions/workflows/pipeline.yml/badge.svg)](https://github.com/honestbleeps/Reddit-Enhancement-Suite/actions/workflows/pipeline.yml)
[![Chat on Discord](https://img.shields.io/discord/681993947085799490?label=Discord)](https://discord.gg/UzkFNNa)

## [Please read this post before continuing.](https://www.reddit.com/r/RESAnnouncements/comments/sh83gx/announcement_life_of_reddit_enhancement_suite/)

Reddit Enhancement Suite (RES) is a suite of modules that enhances your Reddit browsing experience.
For general documentation, visit the [Reddit Enhancement Suite Wiki](https://www.reddit.com/r/Enhancement/wiki/index).

## Introduction

Hi there! Thanks for checking out RES on GitHub. A few important notes:

1. RES is licensed under GPLv3, which means you're technically free to do whatever you wish in terms of redistribution as long as you maintain GPLv3 licensing. However, I ask out of courtesy that should you choose to release your own, separate distribution of RES, you please name it something else entirely. Unfortunately, I have run into problems in the past with people redistributing under the same name, and causing me tech support headaches.

2. I ask that you please do not distribute your own binaries of RES (e.g. with bugfixes, etc). The version numbers in RES are important references for tech support so that we can replicate bugs that users report using the same version they are, and when you distribute your own - you run the risk of polluting/confusing that. In addition, if a user overwrites his/her extension with your distributed copy, it may not properly retain their RES settings/data depending on the developer ID used, etc.

I can't stop you from doing any of this. I'm just asking out of courtesy because I already spend a great deal of time providing tech support and chasing down bugs, and it's much harder when people think I'm the support guy for a separate branch of code.

Thanks!

Steve Sobel
steve@honestbleeps.com

## Building and contributing

See [CONTRIBUTING.md](/CONTRIBUTING.md).

## License

See [LICENSE](/LICENSE).

## Changelog

See the [`changelog/`](/changelog) directory for individual versions or https://redditenhancementsuite.com/releases/ for all versions.
"
