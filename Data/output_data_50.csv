124,Gephi - The Open Graph Viz Platform,"# Gephi - The Open Graph Viz Platform

[![build](https://github.com/gephi/gephi/actions/workflows/build.yml/badge.svg)](https://github.com/gephi/gephi/actions/workflows/build.yml)
[![Downloads](https://img.shields.io/github/downloads/gephi/gephi/v0.10.1/total.svg)](https://github.com/gephi/gephi/releases/tag/v0.10.1)
[![Downloads](https://img.shields.io/github/downloads/gephi/gephi/total.svg)](https://github.com/gephi/gephi/releases/)
[![Translation progress](https://hosted.weblate.org/widgets/gephi/-/svg-badge.svg)](https://hosted.weblate.org/engage/gephi/?utm_source=widget)

[Gephi](http://gephi.org) is an award-winning open-source platform for visualizing and manipulating large graphs. It runs on Windows, Mac OS X and Linux. Localization is available in English, French, Spanish, Japanese, Russian, Brazilian Portuguese, Chinese, Czech, German and Romanian.

- **Fast** Powered by a built-in OpenGL engine, Gephi is able to push the envelope with very large networks. Visualize networks up to a million elements. All actions (e.g. layout, filter, drag) run in real-time.

- **Simple** Easy to install and [get started](https://gephi.github.io/users/quick-start). An UI that is centered around the visualization. Like Photoshop™ for graphs.

- **Modular** Extend Gephi with [plug-ins](https://gephi.org/plugins). The architecture is built on top of [Apache Netbeans Platform](https://netbeans.apache.org/tutorials/nbm-quick-start.html) and can be extended or reused easily through well-written APIs.

[Download Gephi](https://gephi.github.io/users/download) for Windows, Mac OS X and Linux and consult the [release notes](https://github.com/gephi/gephi/releases). Example datasets can be found on our [wiki](https://github.com/gephi/gephi/wiki/Datasets).

![Gephi](https://gephi.github.io/images/screenshots/select-tool-mini.png)

## Install and use Gephi

Download and [Install](https://gephi.github.io/users/install/) Gephi on your computer. 

Get started with the [Quick Start](https://gephi.github.io/users/quick-start/) and follow the [Tutorials](https://gephi.github.io/users/). Load a sample [dataset](https://github.com/gephi/gephi/wiki/Datasets) and start to play with the data.

If you run into any trouble or have questions consult our [discussions](https://github.com/gephi/gephi/discussions).

## Latest releases

### Stable

- Latest stable release on [gephi.org](https://gephi.org/users/download/).

### Development builds

Development builds are [generated regularly](https://github.com/gephi/gephi/actions/workflows/release.yml). Current version is 0.10.2-SNAPSHOT

- [gephi-0.10.2-SNAPSHOT-windows-x64.exe](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=windows-x64&p=exe) (Windows)

- [gephi-0.10.2-SNAPSHOT-windows-x32.exe](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=windows-x32&p=exe) (Windows x32)

- [gephi-0.10.2-SNAPSHOT-macos-x64.dmg](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=macos-x64&p=dmg) (Mac OS X)

- [gephi-0.10.2-SNAPSHOT-macos-aarch64.dmg](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=macos-aarch64&p=dmg) (Mac OS X Silicon)

- [gephi-0.10.2-SNAPSHOT-linux-x64.tar.gz](https://oss.sonatype.org/service/local/artifact/maven/content?r=snapshots&g=org.gephi&a=gephi&v=0.10.2-SNAPSHOT&c=linux-x64&p=tar.gz) (Linux)

## Developer Introduction

Gephi is developed in Java and uses OpenGL for its visualization engine. Built on the top of Netbeans Platform, it follows a loosely-coupled, modular architecture philosophy. Gephi is split into modules, which depend on other modules through well-written APIs. Plugins can reuse existing APIs, create new services and even replace a default implementation with a new one.

Consult the [**Javadoc**](http://gephi.github.io/gephi/0.9.2/apidocs/index.html) for an overview of the APIs.

### Requirements

- Java JDK 11 (or later)

- [Apache Maven](http://maven.apache.org/) version 3.6.3 or later

### Checkout and Build the sources

- Fork the repository and clone

        git clone git@github.com:username/gephi.git

- Run the following command or [open the project in an IDE](https://github.com/gephi/gephi/wiki/How-to-build-Gephi)

        mvn -T 4 clean install

- Once built, one can test running Gephi

		cd modules/application
		mvn nbm:cluster-app nbm:run-platform

Note that while Gephi can be built using JDK 11 or later, it currently requires JDK 11 to run.

### Create Plug-ins

Gephi is extensible and lets developers create plug-ins to add new features, or to modify existing features. For example, you can create a new layout algorithm, add a metric, create a filter or a tool, support a new file format or database, or modify the visualization.

- [**Plugins Portal**](https://github.com/gephi/gephi/wiki/Plugins)

- [Plugins Quick Start (5 minutes)](https://github.com/gephi/gephi/wiki/Plugin-Quick-Start)

- Browse the [plugins](https://gephi.org/plugins) created by the community

- We've created a [**Plugins Bootcamp**](https://github.com/gephi/gephi-plugins-bootcamp) to learn by examples.

## Gephi Toolkit

The Gephi Toolkit project packages essential Gephi modules (Graph, Layout, Filters, IO…) in a standard Java library which any Java project can use for getting things done. It can be used on a server or command-line tool to do the same things Gephi does but automatically.

- [Download](https://gephi.org/toolkit/)

- [GitHub Project](https://github.com/gephi/gephi-toolkit)

- [Toolkit Portal](https://github.com/gephi/gephi/wiki/Toolkit)

## Localization

We use [Weblate](https://hosted.weblate.org/projects/gephi/) for localization. Follow the guidelines on the [wiki](https://github.com/gephi/gephi/wiki/Localization) for more details how to contribute.

## Icons

Gephi uses icons from various sources. The icons are licensed under the [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/) license.

All icons can be found in the `DesktopIcons` module, organised by module name.

## License

Gephi main source code is distributed under the dual license [CDDL 1.0](http://www.opensource.org/licenses/CDDL-1.0) and [GNU General Public License v3](http://www.gnu.org/licenses/gpl.html). Read the [Legal FAQs](http://gephi.github.io/legal/faq/)  to learn more.
	
Copyright 2011 Gephi Consortium. All rights reserved.

The contents of this file are subject to the terms of either the GNU
General Public License Version 3 only (""GPL"") or the Common
Development and Distribution License (""CDDL"") (collectively, the
""License""). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://gephi.github.io/developers/license/
or /cddl-1.0.txt and /gpl-3.0.txt. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License files at
/cddl-1.0.txt and /gpl-3.0.txt. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
""Portions Copyrighted [year] [name of copyright owner]""

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 3, indicate your decision by adding
""[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 3] license."" If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 3 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 3 code and therefore, elected the GPL
Version 3 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
",,,,,,,,,,,,,,,,,,,,,,,0.7102110668,Summary
1200,"⚙️ A Laravel package to decompose your installed packages, their dependencies, your app & server environment","<p align=""center""><img src=""https://cloud.githubusercontent.com/assets/11228182/23066989/3dd8f21c-f543-11e6-8f74-f64ccf814d51.png""></p>

<p align=""center"">
<a href=""https://packagist.org/packages/lubusin/laravel-decomposer""><img src=""https://poser.pugx.org/lubusin/laravel-decomposer/v/stable"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/lubusin/laravel-decomposer""><img src=""https://poser.pugx.org/lubusin/laravel-decomposer/downloads"" alt=""Total Downloads""></a>
<a href=""https://github.com/lubusin/laravel-decomposer/blob/master/LICENSE.txt""><img src=""https://poser.pugx.org/lubusin/laravel-decomposer/license"" alt=""License""></a>
<a href=""https://github.com/lubusin/laravel-decomposer/blob/master/contributing.md""><img src=""https://img.shields.io/badge/PRs-welcome-brightgreen.svg"" alt=""PRs""></a>
</p>

## Introduction

Laravel Decomposer decomposes and lists all the installed packages and their dependencies along with the Laravel & the Server environment details your app is running in. Decomposer also generates a [markdown report](https://github.com/lubusIN/laravel-decomposer/blob/master/report.md) from those details that can be used for troubleshooting purposes, also it allows you to generate the same report [as an array](https://github.com/lubusIN/laravel-decomposer/wiki/Get-Report-as-an-array) and also [as JSON](https://github.com/lubusIN/laravel-decomposer/wiki/Get-Report-as-JSON) anywhere in your code. Laravel Package & app devs you can also [add your own personal extra stats specific for your package or your app](https://github.com/lubusIN/laravel-decomposer/wiki/Add-your-extra-stats). All these just on the hit of a single route as shown below in the gif.

**Screenshot**

![Laravel Decomposer](https://cloud.githubusercontent.com/assets/11228182/23458894/0ffe7992-fea4-11e6-8441-e7550f6c3139.gif)

> **Kind Attention :**
You can have a look at the [Roadmap](https://github.com/lubusIN/laravel-decomposer#roadmap). If you have any suggestions for code improvements, new optional or core features or enhancements, create an issue so you,us or any open source believer can start working on it.

## Features
- This can be used by your non-tech client/user of your laravel app or non-experienced dev who still dosen't uses CLI to generate the system report & send over to you so you can know the entire details of his environment.
- To see the list of all installed packages & their dependencies in the laravel app directly from the browser
- To get the Laravel & Server environment details on the same page with the packages list
- To check whether all the pre configurations & extensions asked by Laravel are applied and loaded or not
- Suppose suddenly or after some changes your app broke, you can install Laravel Decomposer, generate & copy the [report](https://github.com/lubusIN/laravel-decomposer/blob/master/report.md) and paste it in the issue box of the respective repo you are reporting the issue to.
- For package/laravel app developers this can be very useful when collecting the information from the users reporting the issues. As the report gives them complete info about the environment the issue is being raised in.
- It can also help you in other ways like suppose you have a package installed that is using illuminate/support v5.1, and an another package using illuminate/support v5.3, so getting these facts quickly by just hitting to a route can make you aware of possible unstability & conflicts so you can report that to the respective package developer.
- It cuts down the troubleshooting time. For eg: Sometimes after trying all possible solutions at the end the user says 'I forgot to say I am on PHP 4'. Here Decomposer acts as the precaution & removes the dependency of querying the user for every single thing.

## Roadmap

- ~Allow Decomposer report to be accessed via code~ _Released in [v1.1](https://github.com/lubusIN/laravel-decomposer#helpers)_
- ~Allow users and other packages to add their own stats in the Decomposer report~ _Released in [v1.2](https://github.com/lubusIN/laravel-decomposer/wiki/Add-your-extra-stats)_
- Add a config file to allow user to control what he/she wants to see in the view
- Check for updates of the installed packages & show if any available for the respective packages or their dependencies
- Compare same dependency versions for different packages & warn user about the possible conflict. (Can be achieved even now as the search results highlighting is enabled, but sure it can be done in more better way)
- Make UI more informative & UX more better
- Let us know if you want anything to be added in the decomposer. After all the user makes the packages worth :)
- We have created the [issues](https://github.com/lubusIN/laravel-decomposer/issues) & [labels](https://github.com/lubusIN/laravel-decomposer/labels) with the appropriate titles , where you can contribute your ideas & suggestions or let us know if you are working on a PR for that. Always more than happy to hear & learn new things from the community.

## Installation

You can install this package via composer:

```bash
composer require lubusin/laravel-decomposer
```

Next, add the service provider:

```php
// In config/app.php ( Thank you for considering this package! Have a great day :) )

'providers' => [
    /*
     * Package service providers
     */
    Lubusin\Decomposer\DecomposerServiceProvider::class,
];
```

Add a route in your web routes file:

```php
Route::get('decompose','\Lubusin\Decomposer\Controllers\DecomposerController@index');
```
Go to http://yourapp/decompose or the route you configured above in the routes file.

## Docs

The Docs can be found in the [Wiki](https://github.com/lubusIN/laravel-decomposer/wiki) but to save you one more click, here's the index
- [Add your own extra stats for your package or app](https://github.com/lubusIN/laravel-decomposer/wiki/Add-your-extra-stats)
- [Get Decomposer report as markdown](https://github.com/lubusIN/laravel-decomposer/wiki/Get-Markdown-Report)
- [Get Decomposer report as an array](https://github.com/lubusIN/laravel-decomposer/wiki/Get-Report-as-an-array)
- [Get Decomposer report as JSON](https://github.com/lubusIN/laravel-decomposer/wiki/Get-Report-as-JSON)

## Contributing

Thank you for considering contributing to the Laravel Decomposer. You can read the contribution guide lines [here](contributing.md)

## Security

If you discover any security related issues, please email to [harish@lubus.in](mailto:harish@lubus.in).

## Credits

- [Harish Toshniwal](https://github.com/introwit)

## About LUBUS
[LUBUS](http://lubus.in) is a web design agency based in Mumbai.

## License
Laravel Decomposer is open-sourced software licensed under the [MIT license](LICENSE.txt)

## Changelog
Please see the [Changelog](https://github.com/lubusIN/laravel-decomposer/blob/master/changelog.md) for the details
",,,,,,,,,,,,,,,,,,,,,,,0.1468270516,"Laravel Decomposer decomposes and lists all the installed packages and their
dependencies along with the Laravel & the Server environment details your app is
running in. It also generates a [markdown report] from those details that can be
used for troubleshooting purposes. Laravel Package & app devs you can also [add
your own personal extra stats specific for your package or your app] All these
just on the hit of a single route as shown below in the gif. If you have any
suggestions for code improvements, new optional or core features or
enhancements, create an issue so we can start working on it."
2155,A react native clothes shopping app UI.,"# SHOP UI React-Native Template with Native Base

## Introduction

> A creative and modern clothes shopping app design for react-native using the native-base UI components.
It works well with both IOS and Android.


## Availables pages

> This is the list of the availables pages with this source code:
* [Home](./src/page/Home.js)
* [Shop](./src/page/Category.js)
* [Single product](./src/page/Product.js)
* [Product gallery](./src/page/ImageGallery.js)
* [Cart](./src/page/Cart.js)
* [Search](./src/page/Search.js)
* [WishList](./src/page/WishList.js)
* [Newsletter](./src/page/Newsletter.js)
* [Contact](./src/page/Contact.js)
* [Find us (A map)](./src/page/Map.js)
* [Login](./src/page/Login.js)/[Sign up](./src/page/Signup.js)
* [Payment](./src/page/Checkout.js)

### Coming Soon
* Profile


## Installation

> Follow these steps to install and test the app:

```
git clone git@github.com:ATF19/react-native-shop-ui.git
cd react-native-shop-ui
npm install
```

> For iOS users:

```
react-native run-ios
```

> For Android users

```
react-native run-android
```

## Download a demo

> You can download the demo APK by [Clicking here](https://www.dropbox.com/s/42l8vvq61xx6bzh/shop.apk ""Download Shop APK"")

## Screenshots

Click [here](screenshots/README.md)

## Documentation

Updating the codebase will require changes to the `.js` files in the [src/](./src/) folder. Individual pages can be edited by editing the `.js` files in [src/page/](./src/page/). Re-usable components can be edited by editing the `.js` files in [src/component/](./src/component/).

To contribute your changes to the main repository, create a pull request from your fork [here](https://github.com/ATF19/react-native-shop-ui/compare?expand=1) (click the `compare across forks` link make your repository the source repository)

## Contact

> If you have any problem you can contact me at: **atef.najar@icloud.com**
",,,,,,,,,,,,,,,,,,,,,,,0.549776569,"Shop is a modern clothes shopping app for IOS and Android. It uses the native-
base UI components. The codebase can be updated by editing the files in the
[src/] folder. The app is free to download and use. You can download the demo
APK by [Clicking here]:https://www.dropbox.com/s/42l8vvq61xx6bzh/shop.apk ""
download Shop APK"" ""Download Shop APk"""
2439,"Simple, elegant content placeholder","# mocka
Simple, elegant content placeholder

![Mocka](/docs/demo.gif)

```
npm install mocka-placeholder
```

## Introduction

The **mocka** placeholder is a very simple content placeholder that you can use for your website or web application, while loading your page's content. It weighs very little (about 500 bytes minified and gzipped), is fully customizable and you can easily include it in your project's CSS file, by using the Sass mixin provided. Alternatively, you can copy its code and inline it in your HTML for even faster loading.

## Usage

After loading the css, you can create a placeholder using the code provided below:

```html
<div class=""mocka-container"">
  <span class=""mocka-media""></span>
  <span class=""mocka-heading""></span>
  <span class=""mocka-text""></span>
</div>
```

## Customization

Download the npm package, add the mixin to your project, then `@import` the file and `@include` the mixin, passing a single map as an argument. The map contains all the information needed to generate the classes from the mixin. You can find the map with the default values in the [mocka.scss](https://github.com/Chalarangelo/mocka/blob/master/src/mocka/mocka.scss) file.

## License

**Mocka** is an open-source Sass/CSS component and is licensed under the [MIT License](https://github.com/Chalarangelo/mocka/blob/master/LICENSE).
",,,,,,,,,,,,,,,,,,,,,,,0.07631221732,"The **mocka** placeholder is a very simple content placeholder that you can use
for your website or web application, while loading your page's content. It
weighs very little (about 500 bytes minified and gzipped), is fully customizable
and you can easily include it in your project's CSS file, by using the Sass
mixin provided. Alternatively, you can copy its code and inline it into your
HTML for even faster loading.**Mocka*** is an open-source Sass/CSS component and
is licensed under the [MIT
License](https://github.com/Chalarangelo/mockA/blob/master/src/
mocka/mocksa.scss)"
1070,Evaluate and monitor ML models from validation to production. Join our Discord: https://discord.com/invite/xZjKRaNp8b,"<h1 align=""center"">Evidently</h1>
 
<p align=""center""><b>An open-source framework to evaluate, test and monitor ML models in production.</b></p>

<p align=""center"">
  <a href=""https://docs.evidentlyai.com"">Docs</a>
  |
  <a href=""https://discord.gg/xZjKRaNp8b"">Discord Community</a>
  |
  <a href=""https://www.evidentlyai.com/user-newsletter"">User Newsletter</a>
  | 
  <a href=""https://evidentlyai.com/blog"">Blog</a>
  | 
  <a href=""https://twitter.com/EvidentlyAI"">Twitter</a>
</p>


# :bar_chart: What is Evidently?

Evidently is an open-source Python library for data scientists and ML engineers. It helps evaluate, test, and monitor the performance of ML models from validation to production. It works with tabular and text data.

Evidently has a modular approach with 3 interfaces on top of the shared `metrics` functionality. 

## 1. Tests: batch model checks

![Tests example](docs/images/evidently_tests_main-min.png)

Tests perform structured data and ML model quality checks. They verify a condition and return an explicit **pass** or **fail** result. 

You can create a custom Test Suite from 50+ individual tests or run a preset (for example, **Data Drift** or **Regression Performance**). You can get results as an interactive **visual dashboard** inside Jupyter notebook or Colab, or export as **JSON** or Python dictionary. 

Tests are best for automated batch model checks. You can integrate them as a pipeline step using tools like Airlfow. 

## 2. Reports: interactive dashboards

> **Note**
> We added a new Report object starting from v0.1.57.dev0. Reports unite the functionality of Dashboards and JSON profiles with a new, cleaner API. The old Dashboards API is deprecated and will be removed.

![Report example](docs/images/evidently_reports_main-min.png)

Reports calculate various data and ML **metrics** and render rich **visualizations**. You can create a custom Report or run a preset to evaluate a specific aspect of the model or data performance. For example, a [**Data Quality**](https://docs.evidentlyai.com/presets/data-quality) or [**Classification Performance**](https://docs.evidentlyai.com/presets/class-performance) report.

You can get an **HTML report** (best for exploratory analysis and debugging) or export results as **JSON** or Python dictionary (best for logging, documention or to integrate with BI tools). 

## 3. Real-time ML monitoring 

> **Note**
> This functionality is in development and subject to API change.

![Dashboard example](docs/images/evidently_monitoring_main.png)

Evidently has `monitors` that collect data and model metrics from a deployed ML service. You can use it to build live monitoring dashboards. Evidently configures the monitoring on top of streaming data and emits the metrics in Prometheus format. There are pre-built Grafana dashboards to visualize them.

# :woman_technologist: Installing from PyPI

### MAC OS and Linux
Evidently is available as a PyPI package. To install it using pip package manager, run:
```sh
$ pip install evidently
```
If you only want to get results as HTML or JSON files, the installation is now complete. To display the dashboards inside a Jupyter notebook, you need `jupyter nbextension`. After installing `evidently`, run the two following commands in the terminal from the evidently directory.

To install jupyter nbextension, run:
```sh
$ jupyter nbextension install --sys-prefix --symlink --overwrite --py evidently
```
To enable it, run:
```sh
$ jupyter nbextension enable evidently --py --sys-prefix
```
That's it! A single run after the installation is enough. 

**Note**: if you use Jupyter Lab, the reports might not display in the notebook. However, you can still save them as HTML files. 

### Windows
Evidently is available as a PyPI package. To install it using pip package manager, run:
```sh
$ pip install evidently
```
Unfortunately, building reports inside a Jupyter notebook is not yet possible for Windows. The reason is Windows requires administrator privileges to create symlink. In later versions we will address this issue. You can still generate the HTML to view externally.

# :arrow_forward: Getting started
> **Note**
> This is a simple Hello World example. You can find a complete [Getting Started Tutorial](https://docs.evidentlyai.com/get-started/tutorial) in the docs.

## Jupyter Notebook
To start, prepare your data as two pandas `DataFrames`. The first should include your reference data, the second - current production data. The structure of both datasets should be identical. To run some of the evaluations (e.g. Data Drift), you need input features only. In other cases (e.g. Target Drift, Classification Performance), you need Target and/or Prediction. 

### Option 1: Test Suites

After installing the tool, import Evidently **test suite** and required presets. We'll use a simple toy dataset:

```python
import pandas as pd

from sklearn import datasets

from evidently.test_suite import TestSuite
from evidently.test_preset import DataStabilityTestPreset
from evidently.test_preset import DataQualityTestPreset

iris_data = datasets.load_iris(as_frame='auto')
iris_frame = iris_data.frame
```

To run the **Data Stability** test suite and display the reports in the notebook:
```python
data_stability= TestSuite(tests=[
    DataStabilityTestPreset(),
])
data_stability.run(current_data=iris_frame.iloc[:60], reference_data=iris_frame.iloc[60:], column_mapping=None)
data_stability 
```

To save the results as an HTML file:
```python
data_stability.save_html(""file.html"")
```

You'll need to open it from the destination folder.

To get the output as JSON:
```python
data_stability.json()
```

### Option 2: Reports

After installing the tool, import Evidently **report** and required presets:

```python
import pandas as pd

from sklearn import datasets

from evidently.report import Report
from evidently.metric_preset import DataDriftPreset

iris_data = datasets.load_iris(as_frame='auto')
iris_frame = iris_data.frame
```

To generate the **Data Drift** report, run:
```python
data_drift_report = Report(metrics=[
    DataDriftPreset(),
])

data_drift_report.run(current_data=iris_frame.iloc[:60], reference_data=iris_frame.iloc[60:], column_mapping=None)
data_drift_report

```
To save the report as HTML:
```python
data_drift_report.save_html(""file.html"")
```

You'll need to open it from the destination folder.

To get the output as JSON:
```python
data_drift_report.json()
```

# :computer: Contributions
We welcome contributions! Read the [Guide](CONTRIBUTING.md) to learn more. 

# :books: Documentation
For more information, refer to a complete <a href=""https://docs.evidentlyai.com"">Documentation</a>. You can start with this [Tutorial](https://docs.evidentlyai.com/get-started/tutorial) for a quick introduction.

# :card_index_dividers: Examples
Here you can find simple examples on toy datasets to quickly explore what Evidently can do right out of the box.

Report | Jupyter notebook | Colab notebook | Contents
--- | --- | --- | ---
Getting Started Tutorial| [link](https://github.com/evidentlyai/evidently/blob/main/examples/sample_notebooks/getting_started_tutorial.ipynb)|[link](https://colab.research.google.com/drive/1j0Wh4LM0mgMuDY7LQciLaUV4G1khB-zb)|Data Stability and custom test suites, Data Drift and Target Drift reports
Evidently Metric Presets| [link](https://github.com/evidentlyai/evidently/blob/main/examples/sample_notebooks/evidently_metric_presets.ipynb) | [link](https://colab.research.google.com/drive/1wmHWipPd6iEy9Ce8NWBcxs_BSa9hgKgk) | Data Drift, Target Drift, Data Quality, Regression, Classification reports
Evidently Metrics| [link](https://github.com/evidentlyai/evidently/blob/main/examples/sample_notebooks/evidently_metrics.ipynb) | [link](https://colab.research.google.com/drive/1IpfQsq5dmjuG_Qbn6BNtghq6aubZBP5A) | All individual metrics
Evidently Test Presets| [link](https://github.com/evidentlyai/evidently/blob/main/examples/sample_notebooks/evidently_test_presets.ipynb) | [link](https://colab.research.google.com/drive/1CBAFY1qmHHV_72SC7YBeaD4c6LLpPQan) | NoTargetPerformance, Data Stability, Data Quality, Data Drift Regression, Milti-class Classification, Binary Classification, Binary Classification top-K test suites
Evidently Tests| [link](https://github.com/evidentlyai/evidently/blob/main/examples/sample_notebooks/evidently_tests.ipynb) | [link](https://colab.research.google.com/drive/1nQhfXft4VZ3G7agvXgH_LqVHdCh-WaMl)| All individual tests

## Integrations
See how to integrate Evidently in your prediction pipelines and use it with other tools. 

| Title                                | link to tutorial                                                         |
| ------------------------------------ | ------------------------------------------------------------------------ |
| Real-time ML monitoring with Grafana | [Evidently + Grafana](examples/integrations/grafana_monitoring_service/) |
| Batch ML monitoring with Airflow     | [Evidently + Airflow](examples/integrations/airflow_drift_detection/)    |
| Log Evidently metrics in MLflow UI   | [Evidently + MLflow](examples/integrations/mlflow_logging/)              |

# :phone: User Newsletter 
To get updates on new features, integrations and code tutorials, sign up for the [Evidently User Newsletter](https://www.evidentlyai.com/user-newsletter). 

# :white_check_mark: Discord Community
If you want to chat and connect, join our [Discord community](https://discord.gg/xZjKRaNp8b)!
",,,,,,,,,,,,,,,,,,,,,,,0.3117804164,"Evidently is an open-source Python library for data scientists and ML engineers.
It helps evaluate, test, and monitor the performance of ML models from
validation to production. It works with tabular and text data and has a modular
approach with 3 interfaces."
324,A chrome extension to show online dictionary content.,"# Online Dictionary Helper (with Anki support)

[[中文版说明](README.zh_CN.md)]

Online Dictionary Helper is a Chrome/Firefox extension to show definitions for words and phrases from online (or builtin) dictionary via users' selection on any webpage and PDF documents (using [pdf.js](https://mozilla.github.io/pdf.js/)), which also supports flash-card creation using [Anki](https://github.com/dae/anki) (with **[AnkiConnect](https://github.com/FooSoft/anki-connect)**, an Anki add-on, installed).

Details on the reasons for making this extension can be found in the [background](doc/background.md) introduction if you are interested.

![Anki Notes](https://raw.githubusercontent.com/ninja33/ODH/master/doc/img/anki_001_640x400.png)

What might set this extension apart is that users can grab online dictionary content with their own customized script (running under extension development mode). For development details, please check the [development guide](doc/development.md).

## How to use

- [Install from Chrome Web Store](https://chrome.google.com/webstore/detail/anki-online-dictionary-he/lppjdajkacanlmpbbcdkccjkdbpllajb?hl=en)

- [Install from Firefox Add-ons](https://addons.mozilla.org/en-US/firefox/addon/online-dictionary-helper/)

1. Install the extension first from Chrome Web Store or Firefox Add-ons, then configure and activate the extension on your demands in the options page.
2. Open any webpage, move your mouse cursor over the word that you want to select and translate, drag and select/double-click/press **Hotkey** (defined in options page) to select the word or phrase.
3. If the word or phrase is a clickable link, use the predefined **Hotkey** or hold the <kbd>Alt</kbd> key while selecting to translate.
4. A popup window will show up above the selection displaying the word definition.
5. (Optional) While Anki and AnkiConnect are installed and running, go to the `Services Options` tab in the options page to setup the Anki deck, type, and field names to put your **expression**, **sentence**, **reading**, **definition**, etc.
6. (Optional) Press the green **(+)** button on the top right corner of each definition in the popup window to add the word or phrase to Anki as a note.

## The Options Page

The options of this extension are divided into three sections.

1. General Options
    - Enabled: Turn the extension on/off.
    - AutoSel.Hotkey: Configure the **Hotkey** to select words or phrases. Four options are available: Off(Disable the hotkey), <kbd>Shift</kbd>, <kbd>Ctrl</kbd>, and <kbd>Alt</kbd> key.
    - Max.Context: Set the maximum number of sentences extracted from the context of the webpage.
    - Max.Example: Set the maximum number of example sentences from the dictionary (requires support of the dictionary script).

2. AnkiConnect Options: Setup Anki deck/type name, and which note fields you are going to put **expression**, **sentence**, **reading**, **definition**, etc.

3. Dictionary Options:
    - Dictionary Script: Input your own script name here, and click <kbd>Load Script</kbd> button to load it.
    - Selected Dictionary: Choose the dictionary (bultin or loaded) for the definitions on your preference.

![Options Page](https://raw.githubusercontent.com/ninja33/ODH/master/doc/img/option_general_640x400_en.png)

## Development
### Getting started
The source code of this extension on Github does not contain offline dictionary and English word deformation table data. You can go to the Chrome Web Store to download, or use a Chrome extension downloader to download the plugin's crx file and extract the dictionary JSON file.

### Use existing script or develop by yourself

1. You can use existing dictionary scripts in the [dictionaries list](doc/scriptlist.md).
2. Or develop the script by yourself based on [development guide](doc/development.md).
3. Or open an [issue](https://github.com/ninja33/ODH/issues) in this repo if you really need help.

### Pull request

Pull requests are welcome if you want to enhance this extension, or submit your own dictionary script in the next release.

- The extension source will go to [/src](https://github.com/ninja33/ODH/tree/master/src)
- The dictionary script will go to [/src/dict](https://github.com/ninja33/ODH/tree/master/src/dict)
",,,,,,,,,,,,,,,,,,,,,,,0.007437424159,"Online Dictionary Helper is a Chrome/Firefox extension to show definitions for
words and phrases from online (or builtin) dictionary via users' selection. It
also supports flash-card creation using [Anki](https://github.com/dae/anki)
Users can grab online dictionary content with their own customized script
(running under extension development mode)"
263,Hprose is a cross-language RPC. This project is Hprose for Golang.,"<p align=""center""><img src=""http://hprose.com/banner.@2x.png"" alt=""Hprose"" title=""Hprose"" width=""650"" height=""200"" /></p>

# Hprose 2.0 for Golang

[![Join the chat at https://gitter.im/hprose/hprose-golang](https://img.shields.io/badge/GITTER-join%20chat-green.svg)](https://gitter.im/hprose/hprose-golang?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
[![Build Status](https://travis-ci.org/hprose/hprose-golang.svg?branch=master)](https://travis-ci.org/hprose/hprose-golang)
[![GoDoc](https://godoc.org/github.com/hprose/hprose-golang?status.svg&style=flat)](https://godoc.org/github.com/hprose/hprose-golang)
[![Go Report Card](https://goreportcard.com/badge/github.com/hprose/hprose-golang)](https://goreportcard.com/report/github.com/hprose/hprose-golang)
[![codebeat badge](https://img.shields.io/badge/codebeat-A-398b39.svg)](https://codebeat.co/projects/github-com-hprose-hprose-golang)
[![Coverage Status](https://coveralls.io/repos/github/hprose/hprose-golang/badge.svg?branch=master)](https://coveralls.io/github/hprose/hprose-golang?branch=master)
[![License](https://img.shields.io/github/license/hprose/hprose-golang.svg)](http://opensource.org/licenses/MIT)


[Hprose 2.0 for Golang 中文文档](https://github.com/hprose/hprose-golang/wiki) 

>---
- **[Introduction](#introduction)**
- **[Installation](#installation)**
- **[Usage](#usage)**
    - **[Http Server](#http-server)**
        - [Based on net/http](#based-on-nethttp)
        - [Based on fasthttp](#based-on-fasthttp)
        - [Based on gin](#based-on-gin)
        - [Based on echo](#based-on-echo)
        - [Based on beego](#based-on-beego)
        - [Based on iris](#based-on-iris)
    - **[Http Client](#http-client)**
        - [Synchronous Invoking](#synchronous-invoking)
        - [Asynchronous Invoking](#asynchronous-invoking)
        - [Passing by reference parameters](#passing-by-reference-parameters)
    - **[Custom Struct](#custom-struct)**
		- [Field Alias of Custom Struct](#field-alias-of-custom-struct)
    - **[Hprose Proxy](#hprose-proxy)**
    - **[Simple Mode](#simple-mode)**
    - **[WebSocket Server & Client](#websocket-server--client)**
        - [WebSocket Server](#websocket-server)
        - [WebSocket Client](#websocket-client)
    - **[Unix Socket Server & Client](#unix-socket-server--client)**
        - [Unix Socket Server](#unix-socket-server)
        - [Unix Socket Client](#unix-socket-client)
- **[Benchmark](#benchmark)**

>---

## Introduction

*Hprose* is a High Performance Remote Object Service Engine.

It is a modern, lightweight, cross-language, cross-platform, object-oriented, high performance, remote dynamic communication middleware. It is not only easy to use, but powerful. You just need a little time to learn, then you can use it to easily construct cross language cross platform distributed application system.

*Hprose* supports many programming languages, for example:

* AAuto Quicker
* ActionScript
* ASP
* C++
* Dart
* Delphi/Free Pascal
* dotNET(C#, Visual Basic...)
* Golang
* Java
* JavaScript
* Node.js
* Objective-C
* Perl
* PHP
* Python
* Ruby
* ...

Through *Hprose*, You can conveniently and efficiently intercommunicate between those programming languages.

This project is the implementation of Hprose 2.0 for Golang.

## Installation

```sh
go get -u -v github.com/hprose/hprose-golang
```

## Usage

### Http Server

#### Based on net/http

```go
package main

import (
	""net/http""

	""github.com/hprose/hprose-golang/rpc""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewHTTPService()
	service.AddFunction(""hello"", hello)
	http.ListenAndServe("":8080"", service)
}
```

#### Based on fasthttp

```go
package main

import (
	rpc ""github.com/hprose/hprose-golang/rpc/fasthttp""
	""github.com/valyala/fasthttp""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewFastHTTPService()
	service.AddFunction(""hello"", hello)
	fasthttp.ListenAndServe("":8080"", service.ServeFastHTTP)
}
```

#### Based on gin

```go
package main

import (
	""github.com/hprose/hprose-golang/rpc""
	""gopkg.in/gin-gonic/gin.v1""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewHTTPService()
	service.AddFunction(""hello"", hello)
	router := gin.Default()
	router.Any(""/path"", func(c *gin.Context) {
		service.ServeHTTP(c.Writer, c.Request)
	})
	router.Run("":8080"")
}
```

#### Based on echo

```go
package main

import (
	""github.com/hprose/hprose-golang/rpc""
	""github.com/labstack/echo""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewHTTPService()
	service.AddFunction(""hello"", hello)
	e := echo.New()
	e.Any(""/path"", echo.WrapHandler(service))
	e.Start("":8080"")
}
```

#### Based on beego

```go
package main

import (
	""github.com/astaxie/beego""
	""github.com/hprose/hprose-golang/rpc""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewHTTPService()
	service.AddFunction(""hello"", hello)
	beego.Handler(""/path"", service)
	beego.Run()
}
```

#### Based on iris

```go
package main

import (
	rpc ""github.com/hprose/hprose-golang/rpc/fasthttp""
	""github.com/kataras/iris""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewFastHTTPService()
	service.AddFunction(""hello"", hello)
	iris.Any(""/path"", func(c *iris.Context) {
		service.ServeFastHTTP(c.RequestCtx)
	})
	iris.Listen("":8080"")
}
```

### Http Client

#### Synchronous Invoking

```go
package main

import (
	""fmt""

	""github.com/hprose/hprose-golang/rpc""
)

type HelloService struct {
    Hello func(string) (string, error)
    Hello2 func(string) string `name:""hello""`
}

func main() {
	client := rpc.NewHTTPClient(""http://127.0.0.1:8080/"")
	var helloService *HelloService
	client.UseService(&helloService)
	fmt.Println(helloService.Hello(""world""))
	fmt.Println(helloService.Hello2(""world""))
}
```

Golang does not support function/method overload, but some other languages support. So hprose provides ""Function/Method Alias"" to invoke overloaded methods in other languages. You can also use it to invoke the same function/method with different names.

You just need define multiple func fields that correspond to the same remote method by the same `name` tag.

If an error (must be the last out parameter) returned by server-side function/method, or it panics in the server-side, the client will receive it. If the client func field defines an error out parameter (must be the last one), you can get the server-side error or panic from it. If the client func field has not defined an error out parameter, the client call will panic when receive the server-side error or panic.

#### Asynchronous Invoking

```go
package main

import (
	""fmt""
	""time""

	""github.com/hprose/hprose-golang/rpc""
)

type HelloService struct {
	Hello func(func(string, error), string)
	Hello2 func(func(string), string) `name:""hello""`
}

func main() {
	client := rpc.NewHTTPClient(""http://127.0.0.1:8080/"")
	var helloService *HelloService
	client.UseService(&helloService)
	helloService.Hello(func(result string, err error) {
		fmt.Println(result, err)
	}, ""async world"")
	helloService.Hello2(func(result string) {
		fmt.Println(result)
	}, ""async world"")
    time.Sleep(time.Second)
}
```

If the first in parameter is a callback function, you can invoke the remote method asynchronously.

The callback in parameters defines like the out parameters in synchronous invoking method. but if you omit the last error parameter, the asynchronous Invoking will NOT panic, the error will be ignore, too.

#### Passing by reference parameters

Hprose supports passing by reference parameters. The parameters must be pointer types and define func field with tag `byref:""true""`. For example:

```go
package main

import (
	""fmt""

	""github.com/hprose/hprose-golang/rpc""
)

func swap(a, b *int) {
	*b, *a = *a, *b
}

type SwapService struct {
	Swap func(a, b *int) error `byref:""true""`
}

func main() {
	server := rpc.NewTCPServer("""")
	server.AddFunction(""swap"", swap)
	server.Handle()
	client := rpc.NewClient(server.URI())
	var swapService *SwapService
	client.UseService(&swapService)
	a := 1
	b := 2
	swapService.Swap(&a, &b)
	fmt.Println(a, b)
	client.Close()
	server.Close()
}
```

You will find that hprose also supports TCP server and client in this example.

### Custom Struct

You can transfer custom struct objects between hprose client and hprose server directly. Using the `Register` method to register your custom struct is the the only thing you need to do.

For example:

```go
package main

import (
    ""fmt""
    ""github.com/hprose/hprose-golang/io""
    ""github.com/hprose/hprose-golang/rpc""
)

type TestUser struct {
    Name     string
    Sex      int
    Birthday time.Time
    Age      int
    Married  bool
}

type RemoteObject struct {
    GetUserList         func() []TestUser
}

func main() {
    io.Register(TestUser{}, ""User"")
    client := rpc.NewClient(""http://www.hprose.com/example/"")
    var ro *RemoteObject
    client.UseService(&ro)
    fmt.Println(ro.GetUserList())
}
```

The first argument of `Register` is an object or pointer of your custom struct. The second argument is the alias of your custom struct.

The real name of your custom struct can be different between the client and the server, as long as they registered the same alias.

The server of this example was written in PHP. In fact, You can use custom struct with golang server too.

#### Field Alias of Custom Struct

The first letter of the field name will be lowercased automatically when it is serialized by hprose. So we don't need to define a tag to implement this feature like JSON serialization when we interact with the other languages.

But it doesn't mean that hprose can't support to define field alias by tag. In fact, it can not only, and it can be compatible with the field alias definition in JSON serialization way. For example:

```go
type User struct {
	Name                         string `json:""n""`
	Age                          int    `json:""a""`
	ThisFieldWillNotBeSerialized string `json:""-""`
}

io.Register(User{}, ""User"", ""json"")
```

The struct above is defined for JSON serialization. But when we called `Register` by passing the third argument `""json""`, we can use the fields aliases defined in `json` tags for hprose serialization. If the field alias is `""-""`, it will be not serialized.

You can change the `json` tag to be anything else in the struct definition, such as `hprose`, as long as it is the same with the value of the `Register` third argument.

### Hprose Proxy

Hprose supports publishing a special method: MissingMethod. All methods not explicitly published will be redirected to the method. You can use it to implement an hprose proxy. And hprose provides an ResultMode options to improve performance of the proxy server. You can use it like this:

```go
package main

import (
	""net/http""
	""reflect""

	""github.com/hprose/hprose-golang/rpc""
)

type HproseProxy struct {
	client   rpc.Client
	settings rpc.InvokeSettings
}

func newHproseProxy() *HproseProxy {
	proxy := new(HproseProxy)
	proxy.client = rpc.NewClient(""http://www.hprose.com/example/"")
	proxy.settings = rpc.InvokeSettings{
		Mode:        rpc.Raw,
		ResultTypes: []reflect.Type{reflect.TypeOf(([]byte)(nil))},
	}
	return proxy
}

func (proxy *HproseProxy) Proxy(
	name string, args []reflect.Value, context rpc.Context) ([]reflect.Value, error) {
	return proxy.client.Invoke(name, args, &proxy.settings)
}

func main() {
	service := rpc.NewHTTPService()
	service.AddMissingMethod(newHproseProxy().Proxy, rpc.Options{Mode: rpc.Raw})
	http.ListenAndServe("":8080"", service)
}
```

You can also define func field with tag `mode` in client, and the return value must be `[]byte`. The server result mode option is setting by `Options` parameter.

The ResultMode have 4 values:

* Normal
* Serialized
* Raw
* RawWithEndTag

The `Normal` result mode is the default value.

In `Serialized` result mode, the returned value is an hprose serialized data in []byte, but the arguments and exception will be parsed to the normal value.

In `Raw` result mode, all the reply will be returned directly to the result in []byte, but the result data doesn't have the hprose `TagEnd`.

The `RawWithEndTag` is similar to the `Raw` result mode, but it has the hprose `TagEnd`.

With the ResultMode option, you can store, cache and forward the result in the original format.

### Simple Mode

By default, the data between the hprose client and server can be passed with internal references. if your data have no internal references, you can open the simple mode to improve performance.

```go
package main

import (
	""fmt""

	""github.com/hprose/hprose-golang/rpc""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

type HelloService struct {
	Hello func(string) (string, error) `simple:""true""`
}

func main() {
	server := rpc.NewTCPServer("""")
	server.AddFunction(""hello"", hello, rpc.Options{Simple: true})
	server.Handle()
	client := rpc.NewClient(server.URI())
	var helloService *HelloService
	client.UseService(&helloService)
	fmt.Println(helloService.Hello(""World""))
	client.Close()
	server.Close()
}
```

### WebSocket Server & Client

#### WebSocket Server

```go
package main

import (
	""net/http""
	""runtime""

	rpc ""github.com/hprose/hprose-golang/rpc/websocket""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	service := rpc.NewWebSocketService()
	service.AddFunction(""hello"", hello)
	http.ListenAndServe("":8080"", service)
}
```

#### WebSocket Client

```go
package main

import (
	""fmt""

	rpc ""github.com/hprose/hprose-golang/rpc/websocket""
)

type HelloService struct {
    Hello func(string) (string, error)
}

func main() {
	client := rpc.NewWebSocketClient(""ws://127.0.0.1:8080/"")
	var helloService *HelloService
	client.UseService(&helloService)
	fmt.Println(helloService.Hello(""world""))
}
```

### Unix Socket Server & Client

#### Unix Socket Server

```go
package main

import (
	""net/http""
	""runtime""

	""github.com/hprose/hprose-golang/rpc""
)

func hello(name string) string {
	return ""Hello "" + name + ""!""
}

func main() {
	server := rpc.NewUnixServer(""unix:///tmp/hprose.sock"")
	server.AddFunction(""hello"", hello)
	server.Start()
}
```

#### Unix Socket Client

```go
package main

import (
	""fmt""

	""github.com/hprose/hprose-golang/rpc""
)

type HelloService struct {
    Hello func(string) (string, error)
}

func main() {
	client := rpc.NewUnixClient(""unix:///tmp/hprose.sock"")
	var helloService *HelloService
	client.UseService(&helloService)
	fmt.Println(helloService.Hello(""world""))
}
```

## Benchmark

Hprose is faster than golang RPC, you can run benchmark like this:

```
go test --bench="".*"" github.com/hprose/hprose-golang/examples/bench
```

* go1.7.1 darwin/amd64
* macOS Sierra
* iMac (Retina 5K, 27-inch, Late 2015)
* CPU 4GHz Intel Core i7
* Memory 32 GB 1867 MHz DDR3

```
BenchmarkParallelHprose2-8       	  200000	     11230 ns/op
BenchmarkParallelHprose2Unix-8   	  300000	      5234 ns/op
BenchmarkParallelGobRPC-8        	  100000	     16675 ns/op
BenchmarkParallelGobRPCUnix-8    	  200000	      6798 ns/op
BenchmarkParallelJSONRPC-8       	  100000	     17261 ns/op
BenchmarkParallelJSONRPCUnix-8   	  200000	      7917 ns/op
```

```
BenchmarkHprose2-8               	   50000	     34287 ns/op
BenchmarkHprose2Unix-8           	  200000	     11470 ns/op
BenchmarkGobRPC-8                	   30000	     45576 ns/op
BenchmarkGobRPCUnix-8            	  100000	     24216 ns/op
BenchmarkJSONRPC-8               	   30000	     51298 ns/op
BenchmarkJSONRPCUnix-8           	   50000	     27408 ns/op
```
",,,,,,,,,,,,,,,,,,,,,,,0.2879284353,"This project is the implementation of Hprose 2.0 for Golang. It is a cross-
language, cross-platform, object-oriented, high performance, remote dynamic
communication middleware. You can conveniently and efficiently intercommunicate
between those programming languages. It supports many programming languages, for
example: AAuto Quicker, ActionScript, ASP, Dart, Delphi/Free Pascal, dotNET(C#,
Visual Basic...) It is not only easy to use, but powerful. You just need a
little time to learn."
1073,"ARCHIVED: Contains historical course materials/Homework materials for the FREE MOOC course on ""Creative Applications of Deep Learning w/ Tensorflow"" #CADL","[![Build Status](https://travis-ci.org/pkmital/CADL.svg?branch=master)](https://travis-ci.org/pkmital/CADL) [![Slack Channel](https://cadl.herokuapp.com/badge.svg)](https://cadl.herokuapp.com)

# <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>

This repository contains lecture transcripts and homework assignments as Jupyter Notebooks for the first of three <a href=""https://www.kadenze.com/partners/kadenze-academy"">Kadenze Academy</a> courses on <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>.  It also contains a python package containing all the code developed during all three courses.

**COURSE 1: Creative Applications of Deep Learning with TensorFlow I**  
Session 1: Introduction to TensorFlow  
Session 2: Training A Network W/ TensorFlow  
Session 3: Unsupervised And Supervised Learning  
Session 4: Visualizing And Hallucinating Representations  
Session 5: Generative Models  

**COURSE 2: Creative Applications of Deep Learning with TensorFlow II**  
Session 1: Cloud Computing, GPUs, Deploying  
Session 2: Mixture Density Networks  
Session 3: Modeling Attention with RNNs, DRAW  
Session 4: Image-to-Image Translation with GANs  

**COURSE 3: Creative Applications of Deep Learning with TensorFlow III**  
Session 1: Modeling Music and Art: Google Brain’s Magenta Lab  
Session 2: Modeling Language: Natural Language Processing  
Session 3: Autoregressive Image Modeling w/ PixelCNN  
Session 4: Modeling Audio w/ Wavenet and NSynth  

# Github Contents Overview

| | Session | Description | Transcript | Homework |
| --- | --- | --- | --- | --- |
| Python Package | **[pycadl](https://github.com/pkmital/pycadl)** | Python package required for courses 2 and 3 | N/A | N/A |
|Installation| **[Installation](#installation-preliminaries)** | Setting up Python/Notebook and necessary libraries. | N/A | N/A |
|Preliminaries| **[Preliminaries with Python](session-0)** | Basics of working with Python and images. | N/A | N/A |
|1| **[Computing with Tensorflow](session-1)** | Working with a small dataset of images.  Dataset preprocessing.  Tensorflow basics.  Sorting/organizing a dataset. | [lecture-1.ipynb](session-1/lecture-1.ipynb) [Colab](https://colab.research.google.com/notebook#fileId=1bjXwBG0AqGcFbSP5pjjL1A981mBhhN0f) | [session-1.ipynb](session-1/session-1.ipynb) |
|2| **[Basics of Neural Networks](session-2)** | Learn how to create a Neural Network.  Learn to use a neural network to paint an image.  Apply creative thinking to the inputs, outputs, and definition of a network. | [lecture-2.ipynb](session-2/lecture-2.ipynb) | [session-2.ipynb](session-2/session-2.ipynb) |
|3| **[Unsupervised and Supervised Learning](session-3)** | Build an autoencoder.  Extend it with convolution, denoising, and variational layers.  Build a deep classification network.  Apply softmax and onehot encodings to classify audio using a Deep Convolutional Network. | [lecture-3.ipynb](session-3/lecture-3.ipynb) | [session-3.ipynb](session-3/session-3.ipynb) |
|4| **[Visualizing Representations](session-4)** | Visualize backpropped gradients, use them to create Deep Dream, extend Deep Dream w/ regularization.  Stylize images or synthesize new images with painterly or hallucinated aesthetics of another image. | [lecture-4.ipynb](session-4/lecture-4.ipynb) | [session-4.ipynb](session-4/session-4.ipynb) |
|5| **[Generative Models](session-5)** | Build a Generative Adversarial Network and extend it with a Variational Autoencoder.  Use the latent space of this network to perform latent arithmetic.  Build a character level Recurrent Neural Network using LSTMs.  Understand different ways of inferring with Recurrent Networks.  | [lecture-5.ipynb](session-5/lecture-5.ipynb) | [session-5-part-1.ipynb](session-5/session-5-part-1.ipynb), [session-5-part-2.ipynb](session-5/session-5-part-2.ipynb) |

<a name=""installation-preliminaries""></a>
# Installation Preliminaries

<!-- MarkdownTOC autolink=true autoanchor=true bracket=round -->

- [Quickstart Guide](#quickstart-guide)
    - [Method 1: pip Install](#method-1-pip-install)
    - [Method 2: Docker Installation](#method-2-docker-installation)
- [What is Notebook?](#what-is-notebook)
- [Docker Toolbox](#docker-toolbox)
- [Jupyter Notebook](#jupyter-notebook)
    - [OSX/Linux](#osxlinux)
    - [Windows/Docker Containers](#windowsdocker-containers)
- [Navigating to Notebook](#navigating-to-notebook)
- [Installing Python Packages](#installing-python-packages)
    - [Ubuntu/Linux 64-bit for Python 3.4](#ubuntulinux-64-bit-for-python-34)
    - [Ubuntu/Linux 64-bit for Python 3.5](#ubuntulinux-64-bit-for-python-35)
    - [OSX for Python 3.4 or Python 3.5](#osx-for-python-34-or-python-35)
    - [Other Linux/OSX varieties](#other-linuxosx-varieties)
- [CUDA/GPU instructions](#cudagpu-instructions)
- [Testing it](#testing-it)
- [CUDA/GPU instructions for MacOS](#cudagpu-instructions-for-macos)
- [Troubleshooting](#troubleshooting)
    - [ImportError: No module named 'tensorflow'](#importerror-no-module-named-tensorflow)
    - [AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'](#attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C)
    - [GPU-related issues](#gpu-related-issues)
    - [Protobuf library related issues](#protobuf-library-related-issues)
    - [Cannot import name 'descriptor'](#cannot-import-name-descriptor)
    - [Can't find setup.py](#cant-find-setuppy)
    - [SSLError: SSL_VERIFY_FAILED](#sslerror-sslverifyfailed)
    - [Jupyter Notebook Kernel is always busy \(Windows\)](#jupyter-notebook-kernel-is-always-busy-windows)
    - [Something Else!](#something-else)

<!-- /MarkdownTOC -->

The first course makes heavy usage of Jupyter Notebook.  This will be necessary for submitting the homeworks and interacting with the guided session notebooks I will provide for each assignment.  Follow along this guide and we'll see how to obtain all of the necessary libraries that we'll be using.  By the end of this, you'll have installed Jupyter Notebook, NumPy, SciPy, and Matplotlib.  While many of these libraries aren't necessary for performing the Deep Learning which we'll get to in later lectures, they are incredibly useful for manipulating data on your computer, preparing data for learning, and exploring results.

<a name=""quickstart-guide""></a>
## Quickstart Guide

**Please skip this section and read the rest of this readme if you are unfamiliar w/ Jupyter Notebook or installing Python libraries.  This section is only for advanced users who want to get started quickly.**

There are two ways to get started.  You can use a native pip installation or use Docker.  There is a quickstart guide for both methods below.  If you have trouble with these, then please skip to the more in depth guides below these sections.

<a name=""method-1-pip-install""></a>
### Method 1: pip Install

For those of you that are proficient w/ Python programming, you'll need Python 3.4+ and the latest TensorFlow which you can install via pip, e.g.:

```bash
$ pip install tensorflow
```

or w/ CUDA as:

```bash
$ pip install tensorflow-gpu
```

<a name=""method-2-docker-installation""></a>
### Method 2: Docker Installation

If you want a controlled environment w/ all dependencies installed for you, and are proficient w/ Docker and Jupyter, you can get started w/ this repo like so:

```bash
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
$ cd CADL
$ docker build -t cadl .
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl /bin/bash
```

Note that you can skip the build step and download from docker hub instead like so:

```bash
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf pkmital/cadl /bin/bash
```

Be sure to replace ""session-1"" with whichever session you are working on, e.g. ""session-2"", ""session-3""...  This will give you a bash prompt with the files for each session:

```bash
root@39c4441bcde8:/notebooks# ls
README.md  lecture-1.ipynb  libs  session-1.ipynb  tests
```

Which you can use to launch jupyter like so:

```bash
root@39c4441bcde8:/notebooks# jupyter notebook --allow-root
[I 01:45:27.712 NotebookApp] [nb_conda_kernels] enabled, 2 kernels found
[I 01:45:27.715 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 01:45:27.729 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[I 01:45:27.799 NotebookApp] [nb_anacondacloud] enabled
[I 01:45:27.802 NotebookApp] [nb_conda] enabled
[I 01:45:27.856 NotebookApp] ✓ nbpresent HTML export ENABLED
[W 01:45:27.856 NotebookApp] ✗ nbpresent PDF export DISABLED: No module named 'nbbrowserpdf'
[I 01:45:27.858 NotebookApp] Serving notebooks from local directory: /notebooks
[I 01:45:27.858 NotebookApp] 0 active kernels
[I 01:45:27.858 NotebookApp] The Jupyter Notebook is running at: http://[all ip addresses on your system]:8888/?token=dd68eeffd8f227dd789327c981d16b24631866e909bd6469
[I 01:45:27.858 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Jupyter should then be running if you navigate Google Chrome (suggested!) to ""http://localhost:8888"".  If you navigate to the session-1.ipynb file, you will see the homework, or to ""lecture-1.ipynb"", to find the lecture transcripts.  The same goes for every other session.

If you need to relaunch the docker image again, you can write:

```bash
$ cd
$ cd CADL
$ docker start -i tf
```

If you want to use a GPU version, and have a Linux machine, and have an NVIDIA GPU, you can use [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) (this only works for Linux machines! for non-Linux machines that want to use GPU, please follow the expanded directions below, or the quickstart pip installation above):

```bash
$ wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb
$ sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb
$ nvidia-docker build -t cadl-gpu -f Dockerfile-gpu .
$ nvidia-docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl-gpu /bin/bash 
$ nvidia-docker start -i tf
```

If you had any trouble w/ this setup then please go through the rest of this document which provides much more in depth details.


<a name=""what-is-notebook""></a>
## What is Notebook?

Jupyter Notebook, previously called ""iPython Notebook"" prior to version 4.0, is a way of interacting with Python code using a web browser.  It is a very useful instructional tool that we will be using for all of our homework assignments.  Notebooks have the file extensions ""ipynb"" which are abbreviations of ""iPython Notebook"".  Some websites such as [nbviewer.ipython.org](http://nbviewer.ipython.org) or [www.github.com](http://www.github.com) can view `.ipynb` files directly as rendered HTML.  However, these are not *interactive* versions of the notebook, meaning, they are not running the python kernel which evaluates/interacts with the code.  So the notebook is just a static version of the code contained inside of it.

In order to interact with notebook and start coding, you will need to launch Terminal (for Mac and Linux users).  For Windows users, or for anyone having any problems with the Linux/Mac instructions, please follow the next section on [Docker Toolbox](#docker-toolbox) very closely!  If you are not a Windows user, please first try skipping over the next section and use the installation instructions in [Jupyter Notebook](#jupyter-notebook) before trying Docker as this solution will be much faster than running Docker.

<a name=""docker-toolbox""></a>
## Docker Toolbox

Currently, Windows users can only install Tensorflow via [pip using a 64-bit Python 3.5 environment](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation-on-windows) or using Docker, as outlined below.

The easiest way to get up an running on any type of system is to use Docker.  Docker is a way of managing a ""virtual"" Linux machine on your computer which will aid the creation a machine capable of running Tensorflow.  First, please download and install the Docker Toolbox:

https://www.docker.com/products/docker-toolbox

Linux users can install docker using their favorite package manager.

For OSX and Windows users, you'll then need to run the ""Docker Quickstart Terminal"" which will launch a Terminal environment running on a virtual Linux machine on your computer. A virtual machine is basically an emulation of another machine. This is important because we'll use this machine to run Linux and install all of the necessary libraries for running Tensorflow.

Note for Windows users, if you have trouble launching the Docker Quickstart Terminal because you have ""Hyper-V"", please instead try using https://docs.docker.com/docker-for-windows/.  Then launch the newly installed ""Docker CLI"" program.

Once the Terminal is launched, either via Docker CLI or Docker Quickstart Terminal, run the following command (ignoring the `$` sign at the beginning of each line, which just denote that each line is a terminal command that you should type out exactly and then hit ENTER afterwards):

```shell
$ cd
$ docker-machine ip
```

If you are using Docker Toolbox, you should see your virtual machine's IP address as a result of the last command.  This is the location of your virtual machine.  <b>NOTE THIS IP ADDRESS</b>, as we'll need it in a second.  If you are using ""Docker for Windows"" instead, then you won't need this IP as we'll just use ""localhost"".

This next command will move to your ""home"" directory.  We'll then ""clone"" the github repo.  This will download everything for the course using ""git"".  If you have trouble w/ this step, make sure you have installed [git](https://git-scm.com/downloads).

```shell
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
```

We'll now print out what the full path to that directory is.  PLEASE NOTE DOWN THIS DIRECTORY.  This is where everything will happen, and I'll explain that in a minute.

```shell
$ echo /$(pwd)/CADL
```

Now run the following command, which will download everything we need to run tensorflow, python, and jupyter notebook (again, ignore the ""$"" at the beginning of the line only)!

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

What this is doing is:
    * Running the docker image [pkmital/cadl](https://hub.docker.com/r/pkmital/cadl/)
    * --name is giving it a shorthand name of ""tf""
    * -v is mirroring the directory ""/$(pwd)/CADL"" to the virtual machine's directory of ""/notebooks""
    * -p is forwarding ports from the virtual machine to your local machine so that you can access the virtual machine's port
    * -it is running it as an interactive process

You will want to put files inside the ""/notebooks"" directory *only*.  If you place files on the virtual machine outside of the ""/notebooks"" directory, which is the SAME as the ""CADL"" directory on your local machine, they will *not* be saved.  We are using Docker to mirror the ""CADL"" directory on a virtual machine which has everything necessary for us to code in Python and Tensorflow.  _Whatever is in that directory will be mirrored on the virtual machine's directory under `/notebooks`._

You can also try running the docker run command with any other directory. For instance:

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /Users/YOURUSERNAME/Desktop:/notebooks --name tf pkmital/cadl
```

Which would mean that your Desktop is where you can move files around so that on the virtual machine, you can interact with them under the `/notebooks`directory.

For OSX users, if you are installing Docker because you had installation problems using Anaconda and pip, you would instead write the following command (note the missing slash):

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v $(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

When you want to start this machine, you will launch the Docker Quickstart Terminal and then write:

```shell
$ cd
$ docker start -i tf
```

Notice that the command prompt will now be `#` instead of `$`.  You should have a new folder ""tensorflow"" inside your Home directory.  This directory will be empty to begin with.  Please make sure you do everything inside this directory only or else any files you make on your virtual machine WILL BE ERASED once it is shutdown!  When you clone the CADL repository, or expand the zip file downloads contents inside this directory via your Windows machine (it will be in your Home directory under a folder ""cadl""), then you will be able to access it via your Docker instance.

For instance, after running the `docker start -i tf` command, try going into the directory `/notebooks`:

```shell
# cd /notebooks
```

<a name=""jupyter-notebook""></a>
## Jupyter Notebook

<a name=""osxlinux""></a>
### OSX/Linux

Note: Windows/Docker users should scroll past this section to [""Windows/Docker""](#windows-docker-containers).  For OSX/Linux users, the easiest way to ensure you have Python 3.4 or higher and Jupter Notebook is to install Anaconda for Python 3.5 located here:

[OSX](https://docs.continuum.io/anaconda/install#anaconda-for-os-x-command-line-install) or [Linux](https://docs.continuum.io/anaconda/install#linux-install)

Make sure you restart your Terminal after you install Anaconda as there are some PATH variables that have to be set.

Then run the following:

```shell
$ curl https://bootstrap.pypa.io/ez_setup.py -o - | python
```

If you already have conda, but only have Python 2, you can very easily [add a new environment w/ Python 3](http://conda.pydata.org/docs/py2or3.html#create-a-python-3-5-environment) and switch back and forth as needed.  Or if you do not have Anaconda, but have a system based install, I'd really recommend either using Anaconda or [pyenv](https://github.com/yyuu/pyenv) to help you manage both python installations.

With Anaconda installed, you will have python and the package ""ipython[notebook]"", along with a ton of other very useful packages such as numpy, matplotlib, scikit-learn, scikit-image, and many others.

With everything installed, restart your Terminal application (on OSX, you can use Spotlight to find the Terminal application), and then navigate to the directory containing the ""ipynb"", or ""iPython Notebook"" file, by ""cd'ing"" (pronounced, see-dee-ing), into that directory.  This involves typing the command: ""cd some_directory"".  Once inside the directory of the notebook file, you will then type: ""jupyter notebook"".  If this command does not work, it means you do not have notebook installed!  Try installed anaconda as above, restart your Terminal application, or manually install notebook like so (ignore the ""$"" signs which just denote that this is a Terminal command that you should type out exactly and then hit ENTER!):

```shell
$ pip3 install ipython[notebook]
$ jupyter notebook
```

If you run into issues that say something such as:

```
[W 20:37:40.543 NotebookApp] Kernel not found: None
```

Then please try first running:

```shell
$ ipython3 kernel install
```

<a name=""windows-docker-containers"">
<a name=""windowsdocker-containers""></a>
### Windows/Docker Containers

For users running firewalls, you must make sure you have an exception as per [Jupyter Notebooks Firewall Instructions](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#firewall-setup) otherwise you may not be able to interact with the notebook.  Namely, you will need to allow connections from 127.0.0.1 (localhost) on ports from 49152 to 65535.  Once inside your Docker container as outlined above, you can now launch notebook like so:

```shell
$ cd /notebooks
$ jupyter notebook &
```

Note on Virtual versus Windows Directories:

This is tricky to grasp, mostly because I didn't explain it. Docker is ""virtual"" computer running inside your computer. It has its own filesystem and its own directories. So you can't reference your Windows machine's directories inside this machine. When you first ran docker (e.g. `$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/tensorflow:/notebooks --name tf pkmital/cadl`) it included as part of its command: `-v /$(pwd)/tensorflow:/notebooks`. What that was doing is ""mirroring"" a directory on your Windows machine inside your Virtual machine. So whatever was in your Windows machine under the directory `/$(pwd)/tensorflow` would appear in the Virtual machine under `/notebooks`. That Windows directory is likely `/Users/<YOURUSERNAME>/tensorflow`. So _ONLY_ inside that directory, create it if it doesn't exist, should you put files in order to access it on the Virtual machine.

So let's say your Username was ""pkmital"". Then your home directory would be `/Users/pkmital`, and you would have mirrored `/Users/pkmital/tensorflow` on your Windows Machine to the Virtual machine under `/notebook`. Now let's say I create a directory `/Users/pkmital/tensorflow/images` on my Windows Machine, and then put a bunch of png files in there. I will then see them in my Virtual machine under `/notebook/images`.  If I put the CADL repository inside `/Users/pkmital/tensorflow`, then I should have `/Users/pkmital/tensorflow/CADL/session-1/session-1.ipynb` and on the Virtual machine, it will be in `/notebooks/CADL/session-1/session-1.ipynb` - From this notebook, running on the virtual machine, accessed with Jupyter Notebook, I would access my images like so:

```python
import os
os.listdir('../../images')
```

<a name=""navigating-to-notebook""></a>
## Navigating to Notebook

After running ""jupyter notebook &"", you should see a message similar to:

```shell
root@182bd64f27d2:~# jupyter notebook &
[I 21:15:33.647 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 21:15:33.712 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[W 21:15:33.713 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using authentication. This is highly insecure and not recommended.
[I 21:15:33.720 NotebookApp] Serving notebooks from local directory: /root
[I 21:15:33.721 NotebookApp] 0 active kernels
[I 21:15:33.721 NotebookApp] The IPython Notebook is running at: http://[all ip addresses on your system]:8888/
[I 21:15:33.721 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Don't worry if the IP address or command prompt look different.  Note where it says: `The IPython Notebook is running at`.  If you are running Docker (Windows users), this is where we need that IP address.  For OSX/Linux users, we'll use ""localhost"" so don't worry about this.  Now open up Chrome/Safari/Firefox whatever browser you like, and then navigate to:

http://localhost:8888

or for Windows users:

http://ADDRESS:8888

where ADDRESS is the ip address you should have noted down before. For instance, on my machine, I would visit the website:

http://192.168.99.100:8888

This will launch the Jupyter Notebook where you will be able to interact with the homework assignments!

<a name=""installing-python-packages""></a>
## Installing Python Packages

Packages are libraries or useful extensions to the standard python libraries.  In this course, we'll be using a few including Tensorflow, NumPy, MatPlotLib, SciPy, SciKit-Image, and SciKit-Learn.  Windows users will already have these libraries since the Docker container includes these.  However, if you needed to, you can install these using ""pip"", which is the python package manager.  OSX/Linux users should follow these steps just to be sure they have the latest versions of these packages. In Python 3.4 and higher, `pip` comes with any standard python installation.  In order to use `pip`, first make sure you are using the correct version.  One way to do this is check which pip you are running:

```shell
$ which pip
$ which pip3
```

Use which `pip` points to the install path that makes the most sense (e.g. Anaconda for OSX users for some reason does not symlink pip3 to the python3 pip, and instead points to the system version of python3).

Then you'll write:

```shell
$ pip3 install -U pip setuptools
```

To make sure you have an up to date pip, then:

```shell
$ pip3 install some_package
```

To get the necessary libraries:

```shell
$ pip3 install ""scikit-image>=0.11.3"" ""numpy>=1.11.0"" ""matplotlib>=1.5.1"" ""scikit-learn>=0.17""
```

This should get you all of the libraries we need for the course, EXCEPT for tensorflow.  Tensorflow is a special case, but can be `pip` installed in much the same way by pointing pip to the github repo corresponding to your OS like so.

<a name=""ubuntulinux-64-bit-for-python-34""></a>
### Ubuntu/Linux 64-bit for Python 3.4

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp34-cp34m-linux_x86_64.whl
```

<a name=""ubuntulinux-64-bit-for-python-35""></a>
### Ubuntu/Linux 64-bit for Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp35-cp35m-linux_x86_64.whl
```

<a name=""osx-for-python-34-or-python-35""></a>
### OSX for Python 3.4 or Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0rc1-py3-none-any.whl
```

<a name=""other-linuxosx-varieties""></a>
### Other Linux/OSX varieties

You can pip install Tensorflow for most OSX/Linux setups including those that are making use of NVIDIA GPUs and CUDA using one the packages listed on this link:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation

If you are having trouble with pip installation, try looking here first: [Common Installation Problems](https://github.com/tensorflow/tensorflow/blob/37451589519d15207448dc2d9b1c0309de15d8db/tensorflow/g3doc/get_started/os_setup.md#common-problems).  Failing that, reach out to us on the forums, or else you may want to instead run a Docker instance as outlined in the Windows instructions above: [Setting up a Docker Container](#docker-toolbox).

<a name=""cudagpu-instructions""></a>
## CUDA/GPU instructions

Note that I have not provided instructions on getting setup w/ CUDA as it is beyond the scope of this course!  If you are interested in using GPU acceleration, I highly recommend using Ubuntu Linux and setting up a machine on [Nimbix](https://www.nimbix.net) or [Amazon EC2](https://aws.amazon.com/ec2/
) using the instructions here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#optional-install-cuda-gpus-on-linux.  If you're using Nimbix, you can skip the install process as there is already a machine pre-installed w/ Tensorflow.  Similarly, for Amazon EC2, there are many existing ""images"" of machines that have Tensorflow already installed.


<a name=""testing-it""></a>
## Testing it

To confirm it worked, try running:

```shell
$ python3 -c 'import tensorflow as tf; print(tf.__version__)'
```

You should see 1.0.0 printed, depending on which version you have installed.


<a name=""cudagpu-instructions-for-macos""></a>
## CUDA/GPU instructions for MacOS

When your Mac is equipped with a NVidia graphics card, you can use the GPU for computing with Tensorflow. GPU enabled computing is not supported for Macs with ATI or Intel graphics cards. 

If you have a previous cpu installation of tensorflow, uninstall it first:

```
$ pip3 uninstall tensorflow
```

Using homebrew, install the following packages:

```
$ brew install coreutils
$ brew tap caskroom/cask
$ brew cask install cuda
```
Once you have the CUDA Toolkit installed you will need to setup the required environment variables by adding the 
following to your `~/.profile`:
```
export CUDA_HOME=/usr/local/cuda
export DYLD_LIBRARY_PATH=""$DYLD_LIBRARY_PATH:$CUDA_HOME/lib""
export PATH=""$CUDA_HOME/bin:$PATH""
```
Tensorflow needs the library libcuda.1.dylib, so we have to create an additional symbolic link:
```
sudo ln -sf /usr/local/cuda/lib/libcuda.dylib /usr/local/cuda/lib/libcuda.1.dylib
```
Finally, you will also want to install the **CUDA Deep Neural Network** (cuDNN v5) library which currently requires an 
[_Accelerated Computing Developer Program_](https://developer.nvidia.com/cudnn) account. Once you have it downloaded 
locally, you can unzip and move the header and libraries to your local CUDA Toolkit folder:
```
$ sudo mv include/cudnn.h /Developer/NVIDIA/CUDA-8.0/include/
$ sudo mv lib/libcudnn* /Developer/NVIDIA/CUDA-8.0/lib
$ sudo ln -s /Developer/NVIDIA/CUDA-8.0/lib/libcudnn* /usr/local/cuda/lib/
```
Then, finally, install tensorflow with GPU support with:
```
$ pip3 install --ignore-installed --upgrade tensorflow-gpu
```

According to the instructions of the TensorFlow website, this should work. However, on MacOS 10.11 (El Capitan) and 
above, the environment variable `DYLD_LIBRARY_PATH` is ignored, resulting in an error in the interactive python console 
and JetBrains PyCharm IDE. The dynamic library `libcudart.8.0.dylib` fails to load. This
is due to a new protection meganism in MacOS 10.11 and higher. El Capitan ships with a new OS X feature: System 
Integrity Protection (SIP), also known as “rootless” mode. This reduces the attack surface for malware that relies on 
modifying system files by preventing any user, whether with system administrator (“root”) privileges or not from 
modifying a number of operating system directories and files.

**Warning:** The point of SIP is to prevent malware and other unwanted modifications into system files. Consider whether 
or not you want to dispense with this protection.
Follow these steps to disable SIP:

* Restart your Mac.
* Before OS X starts up, hold down Command-R and keep it held down until you see an Apple icon and a progress bar. Release. This boots you into Recovery.
* From the Utilities menu, select Terminal.
* At the prompt type exactly the following and then press Return: `csrutil disable`
* Terminal should display a message that SIP was disabled.
* From the  menu, select Restart.

You can re-enable SIP by following the above steps, but using `csrutil enable` instead.



<a name=""troubleshooting""></a>
## Troubleshooting

<a name=""importerror-no-module-named-tensorflow""></a>
### ImportError: No module named 'tensorflow'

You may have different versions of Python installed.  You can troubleshoot this by looking at the output of:

```shell
$ which python3
$ which pip3
$ python3 --version
$ pip3 --version
$ which python
$ which pip
$ python --version
$ pip --version
```

You may simply need to install tensorflow using `pip` instead of `pip3` and/or use `python` instead of `python3`, assuming they point to a version of python which is Python 3 or higher.

<a name=""attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C""></a>
### AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'

You could be running python inside a directory that contains the folder ""tensorflow"".  Try running python inside a different directory.


<a name=""gpu-related-issues""></a>
### GPU-related issues

If you encounter the following when trying to run a TensorFlow program:

```python
ImportError: libcudart.so.7.0: cannot open shared object file: No such file or directory
```

Make sure you followed the GPU installation [instructions](#optional-install-cuda-gpus-on-linux).
If you built from source, and you left the Cuda or cuDNN version empty, try specifying them
explicitly.

<a name=""protobuf-library-related-issues""></a>
### Protobuf library related issues

TensorFlow pip package depends on protobuf pip package version
3.0.0b2. Protobuf's pip package downloaded from [PyPI](https://pypi.python.org)
(when running `pip install protobuf`) is a Python only library, that has
Python implementations of proto serialization/deserialization which can be 10x-50x
slower than the C++ implementation. Protobuf also supports a binary extension
for the Python package that contains fast C++ based proto parsing. This
extension is not available in the standard Python only PIP package. We have
created a custom binary pip package for protobuf that contains the binary
extension. Follow these instructions to install the custom binary protobuf pip
package :

```bash
# Ubuntu/Linux 64-bit:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp27-none-linux_x86_64.whl

# Mac OS X:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp27-none-any.whl
```

and for Python 3 :

```bash
# Ubuntu/Linux 64-bit:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp34-none-linux_x86_64.whl

# Mac OS X:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp35-none-any.whl
```

Install the above package _after_ you have installed TensorFlow via pip, as the
standard `pip install tensorflow` would install the python only pip package. The
above pip package will over-write the existing protobuf package.
Note that the binary pip package already has support for protobuf larger than
64MB, that should fix errors such as these :

```bash
[libprotobuf ERROR google/protobuf/src/google/protobuf/io/coded_stream.cc:207] A
protocol message was rejected because it was too big (more than 67108864 bytes).
To increase the limit (or to disable these warnings), see
CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.

```

<a name=""cannot-import-name-descriptor""></a>
### Cannot import name 'descriptor'

```python
ImportError: Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/dist-packages/tensorflow/core/framework/graph_pb2.py"", line 6, in <module>
    from google.protobuf import descriptor as _descriptor
ImportError: cannot import name 'descriptor'
```

If you the above error when upgrading to a newer version of TensorFlow, try
uninstalling both TensorFlow and protobuf (if installed) and re-installing
TensorFlow (which will also install the correct protobuf dependency).

<a name=""cant-find-setuppy""></a>
### Can't find setup.py

If, during `pip install`, you encounter an error like:

```bash
...
IOError: [Errno 2] No such file or directory: '/tmp/pip-o6Tpui-build/setup.py'
```

Solution: upgrade your version of pip:

```bash
pip install --upgrade pip
```

This may require `sudo`, depending on how pip is installed.

<a name=""sslerror-sslverifyfailed""></a>
### SSLError: SSL_VERIFY_FAILED

If, during pip install from a URL, you encounter an error like:

```bash
...
SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed
```

Solution: Download the wheel manually via curl or wget, and pip install locally.

<a name=""jupyter-notebook-kernel-is-always-busy-windows""></a>
### Jupyter Notebook Kernel is always busy (Windows)
If your have installed Docker Toolbox on Windows but your jupyter notebook doesn't run properly (the notebook kernel keeps busy all the time when you open any file) then you might need to try different browsers (One guy tried Edge and it solved his problem after struggling for long time on Chrome/Firefox).

And you should also enable port forwarding by:

1. Open VirtualBox
2. Click on your default docker image.
3. Click Settings.
4. Click Network.
5. Click forward port.
6. Add a new rule named jupyter with host ip=127.0.0.1 and host/guess port=8888
7. Now you should be able to browse your notebook app via localhost:8888 (instead of having to browse 192.168.xx.xx:8888)

<a name=""something-else""></a>
### Something Else!

Post on the [Forums](https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow-i/forums?sort=recent_activity) or check on the Tensorflow [README](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation)
",,,,,,,,,,,,,,,,,,,,,,,0.4831397643,"This repository contains lecture transcripts and homework assignments as Jupyter
Notebooks for the first of three Kadenze Academy courses. It also contains a
python package containing all the code developed during all three courses. The
courses are: Creative Applications of Deep Learning with TensorFlow I, II and
III."
181,A library to imitate the iOS 10 Maps UI.,"# Pulley

<p align=""center"">
<a href=""https://github.com/52inc/Pulley/actions?query=workflow%3Adeploy_to_cocoapods""><img src=""https://github.com/52inc/Pulley/workflows/deploy_to_cocoapods/badge.svg""></a>
<a href=""https://cocoapods.org/pods/Pulley""><img src=""https://img.shields.io/cocoapods/v/Pulley.svg?style=flat""></a>
<a href=""https://github.com/Carthage/Carthage/""><img src=""https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat""></a>
<a href=""https://swift.org/package-manager/""><img src=""https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat""></a>
<br />
<a href=""https://raw.githubusercontent.com/52inc/Pulley/master/LICENSE""><img src=""https://img.shields.io/cocoapods/l/Pulley.svg?style=flat""></a>
<a href=""https://github.com/52inc/Pulley/""><img src=""https://img.shields.io/cocoapods/p/Pulley.svg?style=flat""></a>
</p>

A library to imitate the drawer in Maps for iOS 10/11. The master branch follows the latest currently released version of Swift. If you need an older version of Swift, you can specify it's version (e.g. 1.0.x) in your Podfile or use the code on the branch for that version. Older branches are unsupported.

### Update / Migration Info

**ATTENTION:**
Pulley 2.9.0 has new properties to support a new displayMode. The base functionality should work without any significant changes. The biggest change being the new displayMode of `.compact` to replicate Apple Maps Behavior on the iPhone SE size class devices. This is an exact replica of the behavior of the Apple Maps drawer, therefor when the `currentDisplayMode` of the `PulleyViewController` is `.compact` then the only `supportedDrawerPositions` for the view controller when in `.compact` mode are `.open`, `.closed`, and `.collapsed`. This mode also has new @IBInspectable properties, `compactInsets` and `compactWidth`. This mode behaves in a very similar way to `.panel` mode. See the pull request [here](https://github.com/52inc/Pulley/pull/347) for the motivation behind this feature. Also in this release, `setDrawerContentViewController(controller: UIViewController, position: PulleyPosition? = nil, animated: Bool = true, completion: PulleyAnimationCompletionBlock?)` has a new optional parameter `position` to set a new drawer position the drawer when a new `DrawerContentViewController` is set. See [this](https://github.com/52inc/Pulley/pull/349) pull request for the motivation behind this feature.


Pulley 2.5.0 had significant renaming changes to support new features. Although property names have changed, the functionality should work without any significant changes (aside from renaming). See [this thread](https://github.com/52inc/Pulley/issues/252) for additional information.


Pulley 2.4.0 changed PulleyPosition from an enum to a class. This won't affect most uses, but may affect your switch statements. Continue to use the static PulleyPosition values as usual and add a default case. This was done to allow marking some `PulleyDrawerViewControllerDelegate` methods as optional so they don't need to be implemented if you aren't using certain positions (or wish to use the default values). If you have questions, please open an issue.

_Technical reason: Optional protocol methods require the @objc attribute. Arrays of Swift enums can't be exposed to Objective-C, and supportedDrawerPositions previously returned an array of PulleyPosition enums. This change allows for marking the protocol @objc so methods can be marked optional._

### Introduction
Pulley is an easy to use drawer library meant to imitate the drawer in iOS 10/11's Maps app. It exposes a simple API that allows you to use any UIViewController subclass as the drawer content or the primary content.

**Here's a preview (apologies for the potato gif):**

![Pulley Preview](http://i.imgur.com/bmEWqy7.gif)

![Pulley iPad Preview](https://i.imgur.com/HwsdMSO.png)

### Installation

##### Installation with Cocoapods
`pod 'Pulley'`

##### Installation with Carthage
`github ""52inc/Pulley""`
Please read this [issue](https://github.com/52inc/Pulley/issues/331#issue-435421067) regarding setup if using Carthage.

##### Installation with Swift Package Manager
Follow the [developer documentation](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app) for Swift Package Manager (versions 2.8.x)

##### Manual Installation
Simply copy the files in the PulleyLib folder into your project.

### How To use

#### Interface Builder

Pulley supports loading embedded view controllers from Interface Builder. In order to use Pulley with Interface Builder, you'll need to setup your `PulleyViewController` like this:

1. Add 2 container views to the `PulleyViewController` view. One for the drawer content and one for the primary (background) content.
2. Connect the container view for the primary (background) content to the outlet named **primaryContentContainerView**.
3. Connect the container view for the drawer content to the outlet named **drawerContentContainerView**.
4. Create an 'embed' segue between each container view and the view controller you want to display for that part of the drawer.
5. Make sure you set the Module for the view controller to 'Pulley'. [See this issue.](https://github.com/52inc/Pulley/issues/29)

If you would like to customize the height of the ""Collapsed"" or ""Partially Revealed"" states of the drawer, have your Drawer Content view controller implement `PulleyDrawerViewControllerDelegate`. You can provide the height for your drawer content for both the Collapsed and Partially Revealed states.

![Interface Builder Screenshot](http://i.imgur.com/htzo50L.png=500x)


#### Programmatically

Pulley supports loading view controllers programmatically. In order to use Pulley programmatically, please consider the following code snippet:

```swift
let mainContentVC = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""PrimaryContentViewController"")

let drawerContentVC = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""DrawerContentViewController"")

let pulleyController = PulleyViewController(contentViewController: mainContentVC, drawerViewController: drawerContentVC)
```

### API

**Important:** The background of the internal drawer view is clear. If your view controller's view is also clear then you'll see the shadow rendering below where the view is. I'd recommend giving your view a color or using a UIVisualEffectView to make sure you don't see the shadow. You can set the shadow opacity to 0.0 if you want the shadow to be hidden.

**Important:** Drawer Content views are made **20pt too long** in order to account for the bounce animation. Make sure your drawer content view is aware that the bottom 20pts will be offscreen.

**Important:** PulleyViewController is not accessible as a parent or as `self.pulleyViewController` until _during or after_ -viewWillAppear: if you're loading Pulley from Storyboards.

#### iOS 11, Safe Areas, and the iPhone X
Pulley has support for safe areas and the iPhone X. The sample project includes full support for this, and does a couple of UI tricks to make things look better. These are documented throughout the sample project.

The basic concepts of using Pulley post-iOS 11 are:

1. The -topInset property is _from_ the top safe area, not the top of the screen.
2. Most delegate methods have a new parameter that tells you the current bottom safe area.
3. The drawer itself doesn't do anything special for the bottom safe area because everyone's UI will want to treat it a little differently. HOWEVER: The delegate methods have been updated to deliver you the current bottom safe area anytime that a value for a drawer position is requested from you. You can use this variable to compute the value you want to return for the drawer position. Checkout the sample project for a simple example on an easy approach to this.
4. If you have UI bottom safe area customizations that you want to perform, I recommend using the delegate method `drawerPositionDidChange(drawer:bottomSafeArea:)` to modify your UI based on the value of bottomSafeArea. Any time the size of the Pulley view controller changes, this method will be called with a new bottom safe area height. The sample project uses this to modify the drawer 'header' height, as well as to adjust the contentInset for the UITableView. It's not automatically taken care of for you, but it should be a fairly simple thing to add.
5. I do _not_ recommend constraining views to the safe are of the drawer content view controller. It won't actually work for the safe areas.
6. If you want the map (or other UI) in the primary view controller to render under the status bar (or in the ears of the iPhone X), make sure you constrain it directly to the superview's 'top'. You may need to double click on the constraint, and then make sure it _isn't_ constrained 'relative to margin'.
7. For backwards compatibility, iOS 9/10 use topLayoutGuide as the top safe area. Your implementation shouldn't need to worry about iOS versions, as that's taken care of for you by Pulley.

If you have any problems / questions while updating Pulley to iOS 11 SDK, please feel free to create an issue if the above information didn't solve your problem.

Even if you've already seen the example project, I highly encourage looking at the new post-iOS 11 version of the sample project. It may have something that could help your iPhone X / safe area implementation.

#### 3 protocols exist for you to use:

* `PulleyDelegate`: The protocol the other protocols inherit from. It's exposed as the .delegate property of `PulleyViewController`. NOTE: If the object you're wanting to receive delegate callbacks is either the Primary Content or Drawer Content view controllers...don't use the .delegate property. Continue reading for the other protocols.
* `PulleyDrawerViewControllerDelegate`: Includes all of the methods from `PulleyDelegate` and adds methods for providing custom heights for the Collapsed and Partially Revealed states. Your Drawer Content view controller should implement this protocol if it wants to receive callbacks for changes in the drawer state or to provide custom heights for the aforementioned drawer states. Implementing this protocol is optional for the Drawer Content view controller, but if you don't then defaults will be used instead.
* `PulleyPrimaryContentControllerDelegate`: This is currently identical to `PulleyDelegate`. However, this protocol may be implemented by your Primary Content view controller if you want to receive callbacks for changes in drawer state. Eventually specialized methods may be added to this protocol.

#### Changing view controllers after creation:

You'll likely need to change out the contents of the drawer or the primary view controller after creation. Here's how to do that programmatically.

**NOTE:** If you pass animated: true then you'll get a subtle crossfade animation. This doesn't work well with all views / view hierarchies (Notably UIVisualEffectView). You've been warned.

**Changing the Primary Content View Controller:**

```swift
if let drawer = self.parentViewController as? PulleyViewController
{
    let primaryContent = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""PrimaryContentViewController"")

    drawer.setPrimaryContentViewController(primaryContent, animated: true)
}      
```

**Changing the Drawer Content View Controller:**

```swift
if let drawer = self.parentViewController as? PulleyViewController
{
    let drawerContent = UIStoryboard(name: ""Main"", bundle: nil).instantiateViewControllerWithIdentifier(""DrawerContentViewController"")

    drawer.setDrawerContentViewController(drawerContent, animated: false)
}      
```

#### Customizing the drawer

1. See the 3 protocols above.
2. You can adjust the inset from the top of the screen in the ""Open"" state by setting the -topInset property on the `PulleyViewController`.
3. You can enable / disable drawer positions by implementing `PulleyDrawerViewControllerDelegate` in your 'drawer' view controller. If you need to change it, call `setNeedsSupportedDrawerPositionsUpdate()` on the `PulleyViewController` so it will recalculate the drawer based on your new settings.
4. You can adjust the corner radius applied to the drawer by setting the -drawerCornerRadius property on the `PulleyViewController`.
5. You can adjust the shadow opacity applied to the drawer by setting the -shadowOpacity property on the `PulleyViewController`.
6. You can adjust the shadow radius applied to the drawer by setting the -shadowRadius property on the `PulleyViewController`.
7. You can adjust the background dimming color by setting the -backgroundDimmingColor to an opaque color on the `PulleyViewController`.
8. You can adjust / remove the background blur effect by setting the -drawerBackgroundVisualEffectView property on the `PulleyViewController`.
9. You can adjust the alpha of the background dimming color by setting the -backgroundDimmingOpacity property on the `PulleyViewController`.
10. You can change the drawer position by calling setDrawerPosition( : ) on the `PulleyViewController`.
11. If an object needs to receive delegate callbacks and _isn't_ one of the view controller's presented then you can use the -delegate property on the `PulleyViewController`.
12. The Swift Interface for `PulleyViewController` is documented in case you want to see real documentation instead of a numbered list of useful things.
13. You can set the initial drawer position by using the initialDrawerPosition property on the `PulleyViewController`.
14. Most settings for the `PulleyViewController` are exposed in Interface Builder. Select the `PulleyViewController` View Controller (not the view) to access them via IBInspectable.
15. By default, Pulley will only use the 'bottom' display mode (to preserve backwards compatibility). If you want to use the iPad / iPhone landscape modes, you can use 'panel' for the display mode. If you want it to automatically switch like Maps.app on iOS, you can set the display mode to 'automatic'.
16. You can apply a custom mask to the Pulley drawer by setting your drawerViewController's view.layer.mask property to a CAShapeLayer. That mask will also be applied to the drawer in Pulley.
17. You can specify which corner you'd like the panel to display in (when in 'panel' displayMode) by using the 'panelCornerPlacement` property.

## Requirements

- iOS 9.0+
- Swift 4.0+


",,,,,,,,,,,,,,,,,,,,,,,0.7420737572,"Pulley is an easy to use drawer library meant to imitate the drawer in iOS
10/11's Maps app. It exposes a simple API that allows you to use any UIView
Controller as the drawer content or the primary content. The sample project
includes support for this, and does a couple of UI tricks to make things look
better. The basic concepts of using Pulley post-iOS 11-iOS are documented
throughout the sample project. The full post is available on GitHub here."
1930,Upgrade all the things,"<div align=""center"">
  <h1>
    <img alt=""Topgrade"" src=""doc/topgrade_transparent.png"" width=""850px"">
  </h1>
  
  <a href=""https://github.com/topgrade-rs/topgrade/releases""><img alt=""GitHub Release"" src=""https://img.shields.io/github/release/topgrade-rs/topgrade.svg""></a>
  <a href=""https://crates.io/crates/topgrade""><img alt=""crates.io"" src=""https://img.shields.io/crates/v/topgrade.svg""></a>
  <a href=""https://aur.archlinux.org/packages/topgrade""><img alt=""AUR"" src=""https://img.shields.io/aur/version/topgrade.svg""></a>
  <a href=""https://formulae.brew.sh/formula/topgrade""><img alt=""Homebrew"" src=""https://img.shields.io/homebrew/v/topgrade.svg""></a>

  <img alt=""Demo"" src=""doc/screenshot.gif"" width=""550px"">
</div>
  
## Introduction

> **Note**
> This is a fork of [topgrade by r-darwish](https://github.com/r-darwish/topgrade) to keep it maintained.

Keeping your system up to date usually involves invoking multiple package managers.
This results in big, non-portable shell one-liners saved in your shell.
To remedy this, **Topgrade** detects which tools you use and runs the appropriate commands to update them.

## Installation

[![Packaging status](https://repology.org/badge/vertical-allrepos/topgrade.svg)](https://repology.org/project/topgrade/versions)

- Arch Linux: [AUR](https://aur.archlinux.org/packages/topgrade)
- NixOS: [Nixpkgs](https://search.nixos.org/packages?show=topgrade)
- Void Linux: [XBPS](https://voidlinux.org/packages/?arch=x86_64&q=topgrade)
- macOS: [Homebrew](https://formulae.brew.sh/formula/topgrade) or [MacPorts](https://ports.macports.org/port/topgrade/)

Other systems users can either use `cargo install` or the compiled binaries from the release page.
The compiled binaries contain a self-upgrading feature.

Topgrade requires Rust 1.60 or above.

## Usage

Just run `topgrade`.

Visit the documentation at [topgrade-rs.github.io](https://topgrade-rs.github.io/) for more information.

> **Warning**
> Work in Progress

## Customization

See `config.example.toml` for an example configuration file.

### Configuration Path

The configuration should be placed in the following paths depending on the operating system:

- **Windows** - `%APPDATA%/topgrade.toml`
- **macOS** and **other Unix systems** - `${XDG_CONFIG_HOME:-~/.config}/topgrade.toml`

## Remote Execution

You can specify a key called `remote_topgrades` in the configuration file.
This key should contain a list of hostnames that have Topgrade installed on them.
Topgrade will use `ssh` to run `topgrade` on remote hosts before acting locally.
To limit the execution only to specific hosts use the `--remote-host-limit` parameter.

## Contribution

### Problems or missing features?

Open a new issue describing your problem and if possible provide a solution.

### Missing a feature or found an unsupported tool/distro?

Just let us now what you are missing by opening an issue.
For tools, please open an issue describing the tool, which platforms it supports and if possible, give us an example of its usage.

### Want to contribute to the code?

Just fork the repository and start coding.

### Contribution Guidelines

- Check if your code passes `cargo fmt` and `cargo clippy`.
- Check if your code is self explanatory, if not it should be documented by comments.
## Roadmap

- [ ] Add a proper testing framework to the code base.
- [ ] Add unit tests for package managers.
- [ ] Split up code into more maintainable parts, eg. putting every linux package manager in a own submodule of linux.rs.
",,,,,,,,,,,,,,,,,,,,,,,0.3890124321,"Topgrade is a fork of r-darwish's [topgrade] tool. It detects which tools you
use and runs the appropriate commands to update them. Topgrade requires Rust
1.60 or above or above. It can be installed by running `topgrade-rs-rs.io or by
using a command such as 'topgrade' or 'cargo' Topgrade will use `ssh` to run
`top grade` on remote hosts before acting locally. See the documentation for
more information about how to use it."
2907,Embedded language for high-performance array computations,"<div align=""center"">
<img width=""450"" src=""https://github.com/AccelerateHS/accelerate/raw/master/images/accelerate-logo-text-v.png?raw=true"" alt=""henlo, my name is Theia""/>

# High-performance parallel arrays for Haskell

[![CI-Linux](https://github.com/tmcdonell/accelerate/workflows/ci-linux/badge.svg)](https://github.com/tmcdonell/accelerate/actions?query=workflow%3Aci-linux)
[![CI-MacOS](https://github.com/tmcdonell/accelerate/workflows/ci-macos/badge.svg)](https://github.com/tmcdonell/accelerate/actions?query=workflow%3Aci-macos)
[![CI-Windows](https://github.com/tmcdonell/accelerate/workflows/ci-windows/badge.svg)](https://github.com/tmcdonell/accelerate/actions?query=workflow%3Aci-windows)
[![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/AccelerateHS/Lobby)
<br>
[![Stackage LTS](https://stackage.org/package/accelerate/badge/lts)](https://stackage.org/lts/package/accelerate)
[![Stackage Nightly](https://stackage.org/package/accelerate/badge/nightly)](https://stackage.org/nightly/package/accelerate)
[![Hackage](https://img.shields.io/hackage/v/accelerate.svg)](https://hackage.haskell.org/package/accelerate)

</div>

`Data.Array.Accelerate` defines an embedded language of array computations for high-performance computing in Haskell. Computations on multi-dimensional, regular arrays are expressed in the form of parameterised collective operations (such as maps, reductions, and permutations). These computations are online-compiled and executed on a range of architectures.

For more details, see our papers:

 * [Accelerating Haskell Array Codes with Multicore GPUs][CKLM+11]
 * [Optimising Purely Functional GPU Programs][MCKL13] ([slides][MCKL13-slides])
 * [Embedding Foreign Code][CMCK14]
 * [Type-safe Runtime Code Generation: Accelerate to LLVM][MCGN15] ([slides][MCGN15-slides]) ([video][MCGN15-video])
 * [Streaming Irregular Arrays][CMCK17] ([video][CMCK17-video])

There are also slides from some fairly recent presentations:

 * [Embedded Languages for High-Performance Computing in Haskell][Embedded]
 * [GPGPU Programming in Haskell with Accelerate][YLJ13-slides] ([video][YLJ13-video]) ([workshop][YLJ13-workshop])

Chapter 6 of Simon Marlow's book [Parallel and Concurrent Programming in Haskell][Mar13] contains a tutorial introduction to Accelerate.

[Trevor's PhD thesis][Trevor-thesis] details the design and implementation of frontend optimisations and CUDA backend.


**Table of Contents**

- [An Embedded Language for Accelerated Array Computations](#an-embedded-language-for-accelerated-array-computations)
  - [A simple example](#a-simple-example)
  - [Availability](#availability)
  - [Additional components](#additional-components)
  - [Requirements](#requirements)
  - [Documentation](#documentation)
  - [Examples](#examples)
  - [Who are we?](#who-are-we)
  - [Mailing list and contacts](#mailing-list-and-contacts)
  - [Citing Accelerate](#citing-accelerate)
  - [What's missing?](#whats-missing)

A simple example
----------------

As a simple example, consider the computation of a dot product of two vectors of single-precision floating-point numbers:

    dotp :: Acc (Vector Float) -> Acc (Vector Float) -> Acc (Scalar Float)
    dotp xs ys = fold (+) 0 (zipWith (*) xs ys)

Except for the type, this code is almost the same as the corresponding Haskell code on lists of floats. The types indicate that the computation may be online-compiled for performance; for example, using `Data.Array.Accelerate.LLVM.PTX.run` it may be on-the-fly off-loaded to a GPU.

Availability
------------

Package accelerate is available from

 * Hackage: [accelerate][Hackage] - install with `cabal install accelerate`
 * GitHub: [AccelerateHS/accelerate][GitHub] - get the source with `git clone https://github.com/AccelerateHS/accelerate.git`. The easiest way to compile the source distributions is via the Haskell [stack](https://docs.haskellstack.org/en/stable/README/) tool.

Additional components
---------------------

The following supported add-ons are available as separate packages:

  * [accelerate-llvm-native][accelerate-llvm-native]: Backend targeting multicore CPUs
  * [accelerate-llvm-ptx][accelerate-llvm-ptx]: Backend targeting CUDA-enabled NVIDIA GPUs. Requires a GPU with compute capability 2.0 or greater (see the [table on Wikipedia][wiki-cc])
  * [accelerate-examples][accelerate-examples]: Computational kernels and applications showcasing the use of Accelerate as well as a regression test suite (supporting function and performance testing)
  * Conversion between various formats:
    * [accelerate-io](https://hackage.haskell.org/package/accelerate-io): For copying data directly between raw pointers
    * [accelerate-io-array](https://hackage.haskell.org/package/accelerate-io-array): Immutable arrays
    * [accelerate-io-bmp](https://hackage.haskell.org/package/accelerate-io-bmp): Uncompressed BMP image files
    * [accelerate-io-bytestring](https://hackage.haskell.org/package/accelerate-io-bytestring): Compact, immutable binary data
    * [accelerate-io-cereal](https://hackage.haskell.org/package/accelerate-io-cereal): Binary serialisation of arrays using [cereal](https://hackage.haskell.org/package/cereal)
    * [accelerate-io-JuicyPixels](https://hackage.haskell.org/package/accelerate-io-JuicyPixels): Images in various pixel formats
    * [accelerate-io-repa](https://hackage.haskell.org/package/accelerate-io-repa): Another Haskell library for high-performance parallel arrays
    * [accelerate-io-serialise](https://hackage.haskell.org/package/accelerate-io-serialise): Binary serialisation of arrays using [serialise](https://hackage.haskell.org/package/serialise)
    * [accelerate-io-vector](https://hackage.haskell.org/package/accelerate-io-vector): Efficient boxed and unboxed one-dimensional arrays
  * [accelerate-fft][accelerate-fft]: Fast Fourier transform implementation, with FFI bindings to optimised implementations
  * [accelerate-blas][accelerate-blas]: BLAS and LAPACK operations, with FFI bindings to optimised implementations
  * [accelerate-bignum][accelerate-bignum]: Fixed-width large integer arithmetic
  * [colour-accelerate][colour-accelerate]: Colour representations in Accelerate (RGB, sRGB, HSV, and HSL)
  * [containers-accelerate](http://hackage.haskell.org/package/containers-accelerate): Hashing-based container types
  * [gloss-accelerate][gloss-accelerate]: Generate [gloss][gloss] pictures from Accelerate
  * [gloss-raster-accelerate][gloss-raster-accelerate]: Parallel rendering of raster images and animations
  * [hashable-accelerate](http://hackage.haskell.org/package/hashable-accelerate): A class for types which can be converted into a hash value
  * [lens-accelerate][lens-accelerate]: [Lens][lens] operators for Accelerate types
  * [linear-accelerate][linear-accelerate]: [Linear][linear] vector spaces in Accelerate
  * [mwc-random-accelerate][mwc-random-accelerate]: Generate Accelerate arrays filled with high quality pseudorandom numbers
  * [numeric-prelude-accelerate][numeric-prelude-accelerate]: Lifting the [numeric-prelude][numeric-prelude] to Accelerate
  * [wigner-ville-accelerate](https://github.com/Haskell-mouse/wigner-ville-accelerate): Wigner-Ville time-frequency distribution.

Install them from Hackage with `cabal install PACKAGENAME`.


Documentation
-------------

  * Haddock documentation is included and linked with the individual package releases on [Hackage][Hackage].
  * Haddock documentation for in-development components can be found [here](http://tmcdonell-bot.github.io/accelerate-travis-buildbot/).
  * The idea behind the HOAS (higher-order abstract syntax) to de-Bruijn conversion used in the library is [described separately][HOAS-conv].

Examples
--------

### accelerate-examples

The [accelerate-examples][accelerate-examples] package provides a range of computational kernels and a few complete applications. To install these from Hackage, issue `cabal install accelerate-examples`. The examples include:

  * An implementation of [canny edge detection][wiki-canny]
  * An interactive [mandelbrot set][wiki-mandelbrot] generator
  * An [N-body simulation][wiki-nbody] of gravitational attraction between solid particles
  * An implementation of the [PageRank][wiki-pagerank] algorithm
  * A simple [ray-tracer][wiki-raytracing]
  * A particle based simulation of stable fluid flows
  * A cellular automata simulation
  * A ""password recovery"" tool, for dictionary lookup of MD5 hashes

[![Mandelbrot](https://i.imgur.com/5Tbsp1j.jpg ""accelerate-mandelbrot"")](https://i.imgur.com/RgXRqsc.jpg)
[![Raytracer](https://i.imgur.com/7ohhKm9.jpg ""accelerate-ray"")](https://i.imgur.com/ZNEGEJK.jpg)

<!--
<video width=400 height=300 controls=false autoplay loop>
  <source=""http://www.cse.unsw.edu.au/~tmcdonell/images/ray.mp4"" type=""video/mp4"">
</video>
-->


### LULESH

[LULESH-accelerate][lulesh-accelerate] is in implementation of the Livermore Unstructured Lagrangian Explicit Shock Hydrodynamics (LULESH) mini-app. [LULESH][LULESH] represents a typical hydrodynamics code such as [ALE3D][ALE3D], but is a highly simplified application, hard-coded to solve the Sedov blast problem on an unstructured hexahedron mesh.

![LULESH mesh](https://i.imgur.com/bIkODKd.jpg)


### Additional examples

Accelerate users have also built some substantial applications of their own.
Please feel free to add your own examples!

  * Jonathan Fraser, [GPUVAC](https://github.com/GeneralFusion/gpuvac): An explicit advection magnetohydrodynamics simulation
  * David van Balen, [Sudokus](https://github.com/dpvanbalen/Sudokus): A sudoku solver
  * Trevor L. McDonell, [lol-accelerate][lol-accelerate]: A backend to the Λ ○ λ ([Lol][lol]) library for ring-based lattice cryptography
  * Henning Thielemann, [patch-image](http://hackage.haskell.org/package/patch-image): Combine a collage of overlapping images
  * apunktbau, [bildpunkt](https://github.com/abau/bildpunkt): A ray-marching distance field renderer
  * klarh, [hasdy](https://github.com/klarh/hasdy): Molecular dynamics in Haskell using Accelerate
  * Alexandros Gremm used Accelerate as part of the [2014 CSCS summer school](http://user.cscs.ch/blog/2014/cscs_usi_summer_school_2014_30_june_10_july_2014_in_serpiano_tessin/index.html) ([code](https://github.com/agremm/cscs))


Who are we?
-----------

The Accelerate team (past and present) consists of:

  * Manuel M T Chakravarty ([@mchakravarty])  <!-- 2008..2017? -->
  * Gabriele Keller ([@gckeller])             <!-- 2008..     -->
  * Trevor L. McDonell ([@tmcdonell])         <!-- 2009..     -->
  * Robert Clifton-Everest ([@robeverest])    <!-- 2013..     -->
  * Frederik M. Madsen ([@fmma])              <!-- 2014       -->
  * Ryan R. Newton ([@rrnewton])              <!-- 2012..2013 -->
  * Joshua Meredith ([@JoshMeredith])         <!-- 2018..     -->
  * Ben Lever ([@blever])                     <!-- 2010..2011 -->
  * Sean Seefried ([@sseefried])              <!-- 2010..2011 -->
  * Ivo Gabe de Wolff ([@ivogabe])            <!-- 2019..     -->

The maintainer and principal developer of Accelerate is Trevor L.
McDonell <trevor.mcdonell@gmail.com>.


Mailing list and contacts
-------------------------

  * Mailing list: [`accelerate-haskell@googlegroups.com`](mailto:accelerate-haskell@googlegroups.com) (discussions on both use and development are welcome)
  * Sign up for the mailing list at the [Accelerate Google Groups page][Google-Group]
  * Bug reports and issues tracking: [GitHub project page][Issues]
  * Chat with us on [gitter](https://gitter.im/AccelerateHS/Lobby)


Citing Accelerate
-----------------

If you use Accelerate for academic research, you are encouraged (though not
required) to cite the following papers:
<!-- ([BibTeX](http://www.cse.unsw.edu.au/~tmcdonell/papers/accelerate.bib)): -->

  * Manuel M. T. Chakravarty, Gabriele Keller, Sean Lee, Trevor L. McDonell, and Vinod Grover.
    [Accelerating Haskell Array Codes with Multicore GPUs][CKLM+11].
    In _DAMP '11: Declarative Aspects of Multicore Programming_, ACM, 2011.

  * Trevor L. McDonell, Manuel M. T. Chakravarty, Gabriele Keller, and Ben Lippmeier.
    [Optimising Purely Functional GPU Programs][MCKL13].
    In _ICFP '13: The 18th ACM SIGPLAN International Conference on Functional Programming_, ACM, 2013.

  * Robert Clifton-Everest, Trevor L. McDonell, Manuel M. T. Chakravarty, and Gabriele Keller.
    [Embedding Foreign Code][CMCK14].
    In _PADL '14: The 16th International Symposium on Practical Aspects of Declarative Languages_, Springer-Verlag, LNCS, 2014.

  * Trevor L. McDonell, Manuel M. T. Chakravarty, Vinod Grover, and Ryan R. Newton.
    [Type-safe Runtime Code Generation: Accelerate to LLVM][MCGN15].
    In _Haskell '15: The 8th ACM SIGPLAN Symposium on Haskell_, ACM, 2015.

  * Robert Clifton-Everest, Trevor L. McDonell, Manuel M. T. Chakravarty, and Gabriele Keller.
    [Streaming Irregular Arrays][CMCK17].
    In Haskell '17: The 10th ACM SIGPLAN Symposium on Haskell, ACM, 2017.


Accelerate is primarily developed by academics, so citations matter a lot to us.
As an added benefit, you increase Accelerate's exposure and potential user (and
developer!) base, which is a benefit to all users of Accelerate. Thanks in advance!


What's missing?
---------------

Here is a list of features that are currently missing:

 * Preliminary API (parts of the API may still change in subsequent releases)
 * Many more features... contact us!

  [@mchakravarty]:              https://github.com/mchakravarty
  [@gckeller]:                  https://github.com/gckeller
  [@tmcdonell]:                 https://github.com/tmcdonell
  [@robeverest]:                https://github.com/robeverest
  [@fmma]:                      https://github.com/fmma
  [@rrnewton]:                  https://github.com/rrnewton
  [@JoshMeredith]:              https://github.com/JoshMeredith
  [@blever]:                    https://github.com/blever
  [@sseefried]:                 https://github.com/sseefried
  [@ivogabe]:                   https://github.com/ivogabe

  [CKLM+11]:                    https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-cuda-damp2011.pdf
  [MCKL13]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-optim-icfp2013.pdf
  [MCKL13-slides]:              https://speakerdeck.com/tmcdonell/optimising-purely-functional-gpu-programs
  [CMCK14]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-ffi-padl2014.pdf
  [MCGN15]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-llvm-haskell2015.pdf
  [MCGN15-slides]:              https://speakerdeck.com/tmcdonell/type-safe-runtime-code-generation-accelerate-to-llvm
  [MCGN15-video]:               https://www.youtube.com/watch?v=snXhXA5noVc
  [HIW'09]:                     https://wiki.haskell.org/HaskellImplementorsWorkshop
  [CMCK17]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-seq2-haskell2017.pdf
  [CMCK17-video]:               https://www.youtube.com/watch?v=QIWSqp7AaNo
  [Mar13]:                      http://chimera.labs.oreilly.com/books/1230000000929
  [Embedded]:                   https://speakerdeck.com/mchakravarty/embedded-languages-for-high-performance-computing-in-haskell
  [Hackage]:                    http://hackage.haskell.org/package/accelerate
  [accelerate-cuda]:            https://github.com/AccelerateHS/accelerate-cuda
  [accelerate-examples]:        https://github.com/AccelerateHS/accelerate-examples
  [accelerate-io]:              https://github.com/AccelerateHS/accelerate-io
  [accelerate-fft]:             https://github.com/AccelerateHS/accelerate-fft
  [accelerate-blas]:            https://github.com/tmcdonell/accelerate-blas
  [accelerate-backend-kit]:     https://github.com/AccelerateHS/accelerate-backend-kit
  [accelerate-buildbot]:        https://github.com/AccelerateHS/accelerate-buildbot
  [accelerate-repa]:            https://github.com/blambo/accelerate-repa
  [accelerate-opencl]:          https://github.com/hiPERFIT/accelerate-opencl
  [accelerate-cabal]:           https://github.com/AccelerateHS/accelerate/accelerate.cabal
  [accelerate-cuda-cabal]:      https://github.com/AccelerateHS/accelerate-cuda/accelerate-cuda.cabal
  [accelerate-llvm]:            https://github.com/AccelerateHS/accelerate-llvm
  [accelerate-llvm-native]:     https://github.com/AccelerateHS/accelerate-llvm
  [accelerate-llvm-ptx]:        https://github.com/AccelerateHS/accelerate-llvm
  [accelerate-bignum]:          https://github.com/tmcdonell/accelerate-bignum
  [GitHub]:                     https://github.com/AccelerateHS/accelerate
  [Wiki]:                       https://github.com/AccelerateHS/accelerate/wiki
  [Issues]:                     https://github.com/AccelerateHS/accelerate/issues
  [Google-Group]:               http://groups.google.com/group/accelerate-haskell
  [HOAS-conv]:                  https://github.com/mchakravarty/hoas-conv
  <!-- [HOAS-conv]:                  https://web.archive.org/web/20180805092417/http://www.cse.unsw.edu.au/~chak/haskell/term-conv/ -->
  [repa]:                       http://hackage.haskell.org/package/repa
  [wiki-cc]:                    https://en.wikipedia.org/wiki/CUDA#Supported_GPUs
  [YLJ13-video]:                http://youtu.be/ARqE4yT2Z0o
  [YLJ13-slides]:               https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate
  [YLJ13-workshop]:             https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate-workshop
  [wiki-canny]:                 https://en.wikipedia.org/wiki/Canny_edge_detector
  [wiki-mandelbrot]:            https://en.wikipedia.org/wiki/Mandelbrot_set
  [wiki-nbody]:                 https://en.wikipedia.org/wiki/N-body
  [wiki-raytracing]:            https://en.wikipedia.org/wiki/Ray_tracing
  [wiki-pagerank]:              https://en.wikipedia.org/wiki/Pagerank
  [Trevor-thesis]:              https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/TrevorMcDonell_PhD_Thesis.pdf
  [colour-accelerate]:          https://github.com/tmcdonell/colour-accelerate
  [gloss]:                      https://hackage.haskell.org/package/gloss
  [gloss-accelerate]:           https://github.com/tmcdonell/gloss-accelerate
  [gloss-raster-accelerate]:    https://github.com/tmcdonell/gloss-raster-accelerate
  [lens]:                       https://hackage.haskell.org/package/lens
  [lens-accelerate]:            https://github.com/tmcdonell/lens-accelerate
  [linear]:                     https://hackage.haskell.org/package/linear
  [linear-accelerate]:          https://github.com/tmcdonell/linear-accelerate
  [mwc-random-accelerate]:      https://github.com/tmcdonell/mwc-random-accelerate
  [numeric-prelude]:            https://hackage.haskell.org/package/numeric-prelude
  [numeric-prelude-accelerate]: https://github.com/tmcdonell/numeric-prelude-accelerate
  [LULESH]:                     https://codesign.llnl.gov/lulesh.php
  [ALE3D]:                      https://wci.llnl.gov/simulation/computer-codes/ale3d
  [lulesh-accelerate]:          https://github.com/tmcdonell/lulesh-accelerate
  [lol]:                        https://hackage.haskell.org/package/lol
  [lol-accelerate]:             https://github.com/tmcdonell/lol-accelerate

",,,,,,,,,,,,,,,,,,,,,,,0.67409589,"Accelerate defines an embedded language of array computations for high-
performance computing in Haskell. Computations on multi-dimensional, regular
arrays are expressed in the form of parameterised collective operations (such as
maps, reductions, and permutations) These computations are online-compiled and
executed on a range of architectures."
2271,"The fastai book, published as Jupyter Notebooks","[English](./README.md) / [Spanish](./README_es.md) / [Korean](./README_ko.md) / [Chinese](./README_zh.md) / [Bengali](./README_bn.md) / [Indonesian](./README_id.md) / [Italian](./README_it.md) / [Portuguese](./README_pt.md) / [Vietnamese](./README_vn.md)

# The fastai book

These notebooks cover an introduction to deep learning, [fastai](https://docs.fast.ai/), and [PyTorch](https://pytorch.org/). fastai is a layered API for deep learning; for more information, see [the fastai paper](https://www.mdpi.com/2078-2489/11/2/108). Everything in this repo is copyright Jeremy Howard and Sylvain Gugger, 2020 onwards. A selection of chapters is available to [read online here](https://fastai.github.io/fastbook2e/).

The notebooks in this repo are used for [a MOOC](https://course.fast.ai) and form the basis of [this book](https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527), which is currently available for purchase. It does not have the same GPL restrictions that are on this repository.

The code in the notebooks and python `.py` files is covered by the GPL v3 license; see the LICENSE file for details. The remainder (including all markdown cells in the notebooks and other prose) is not licensed for any redistribution or change of format or medium, other than making copies of the notebooks or forking this repo for your own private use. No commercial or broadcast use is allowed. We are making these materials freely available to help you learn deep learning, so please respect our copyright and these restrictions.

If you see someone hosting a copy of these materials somewhere else, please let them know that their actions are not allowed and may lead to legal action. Moreover, they would be hurting the community because we're not likely to release additional materials in this way if people ignore our copyright.

## Colab

Instead of cloning this repo and opening it on your machine, you can read and work with the notebooks using [Google Colab](https://research.google.com/colaboratory/). This is the recommended approach for folks who are just getting started -- there's no need to set up a Python development environment on your own machine, since you can just work directly in your web-browser.

You can open any chapter of the book in Colab by clicking on one of these links: [Introduction to Jupyter](https://colab.research.google.com/github/fastai/fastbook/blob/master/app_jupyter.ipynb) | [Chapter 1, Intro](https://colab.research.google.com/github/fastai/fastbook/blob/master/01_intro.ipynb) | [Chapter 2, Production](https://colab.research.google.com/github/fastai/fastbook/blob/master/02_production.ipynb) | [Chapter 3, Ethics](https://colab.research.google.com/github/fastai/fastbook/blob/master/03_ethics.ipynb) | [Chapter 4, MNIST Basics](https://colab.research.google.com/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb) | [Chapter 5, Pet Breeds](https://colab.research.google.com/github/fastai/fastbook/blob/master/05_pet_breeds.ipynb) | [Chapter 6, Multi-Category](https://colab.research.google.com/github/fastai/fastbook/blob/master/06_multicat.ipynb) | [Chapter 7, Sizing and TTA](https://colab.research.google.com/github/fastai/fastbook/blob/master/07_sizing_and_tta.ipynb) | [Chapter 8, Collab](https://colab.research.google.com/github/fastai/fastbook/blob/master/08_collab.ipynb) | [Chapter 9, Tabular](https://colab.research.google.com/github/fastai/fastbook/blob/master/09_tabular.ipynb) | [Chapter 10, NLP](https://colab.research.google.com/github/fastai/fastbook/blob/master/10_nlp.ipynb) | [Chapter 11, Mid-Level API](https://colab.research.google.com/github/fastai/fastbook/blob/master/11_midlevel_data.ipynb) | [Chapter 12, NLP Deep-Dive](https://colab.research.google.com/github/fastai/fastbook/blob/master/12_nlp_dive.ipynb) | [Chapter 13, Convolutions](https://colab.research.google.com/github/fastai/fastbook/blob/master/13_convolutions.ipynb) | [Chapter 14, Resnet](https://colab.research.google.com/github/fastai/fastbook/blob/master/14_resnet.ipynb) | [Chapter 15, Arch Details](https://colab.research.google.com/github/fastai/fastbook/blob/master/15_arch_details.ipynb) | [Chapter 16, Optimizers and Callbacks](https://colab.research.google.com/github/fastai/fastbook/blob/master/16_accel_sgd.ipynb) | [Chapter 17, Foundations](https://colab.research.google.com/github/fastai/fastbook/blob/master/17_foundations.ipynb) | [Chapter 18, GradCAM](https://colab.research.google.com/github/fastai/fastbook/blob/master/18_CAM.ipynb) | [Chapter 19, Learner](https://colab.research.google.com/github/fastai/fastbook/blob/master/19_learner.ipynb) | [Chapter 20, conclusion](https://colab.research.google.com/github/fastai/fastbook/blob/master/20_conclusion.ipynb)


## Contributions

If you make any pull requests to this repo, then you are assigning copyright of that work to Jeremy Howard and Sylvain Gugger. (Additionally, if you are making small edits to spelling or text, please specify the name of the file and a very brief description of what you're fixing. It's difficult for reviewers to know which corrections have already been made. Thank you.)

## Citations

If you wish to cite the book, you may use the following:

```
@book{howard2020deep,
title={Deep Learning for Coders with Fastai and Pytorch: AI Applications Without a PhD},
author={Howard, J. and Gugger, S.},
isbn={9781492045526},
url={https://books.google.no/books?id=xd6LxgEACAAJ},
year={2020},
publisher={O'Reilly Media, Incorporated}
}
```

",,,,,,,,,,,,,,,,,,,,,,,0.8455492086,"The fastai book covers an introduction to deep learning. The code in the
notebooks and python `.py` files is covered by the GPL v3 license; see the
LICENSE file for details. Everything in this repo is copyright Jeremy Howard and
Sylvain Gugger, 2020 onwards. No commercial or broadcast use is allowed."
1635,Tutorial on how to make a custom React renderer,"# Building a custom React renderer

[![Build Status](https://travis-ci.org/nitin42/Making-a-custom-React-renderer.svg?branch=master)](https://travis-ci.org/nitin42/Making-a-custom-React-renderer)

> Let's make a custom React renderer 😎

<p align=""center"">
  <img src=""https://cdn.filestackcontent.com/5KdzhvGRG61WMQhBa1Ql"" width=""630"" height=""350"">
</p>

## Introduction

This is a small tutorial on how to build your custom React renderer and render the components to the host environment you need. The tutorial is divided into three parts -

* **Part 1** - Creating a React reconciler (using [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package).

* **Part 2** - Creating a public interface to the reconciler i.e ""Renderer"".

* **Part 3** - Creating a render method to flush everything to the host environment we need.

## Brief

### [Part-I](./part-one.md)

In part one, we will create a React reconciler using the [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package. We will implement the renderer using Fiber as it has a first-class renderer API for creating custom renderer.

### [Part-II](./part-two.md)

In part two, we will create a public interface to the reconciler i.e a renderer. We will create a custom method for `createElement` and will also architect the component API for our example.

### [Part-III](./part-three.md)

In part three, we will create a render method which will render our input component.

## What we will build?

We will create a custom renderer that will render a React component to a word document. I've already made one. Full source code and the documentation for that is available [here](https://github.com/nitin42/redocx).

We will use [officegen](https://github.com/Ziv-Barber/officegen) for this. I'll explain some of it's basic concepts here.

Officegen can generate Open Office XML files for Microsoft Office 2007 and later. It generates a output stream and not a file.
It is independent of any output tool.

**Creating a document object**

```js
let doc = officegen('docx', { __someOptions__ });
```

**Generating output stream**

```js
let output = fs.createWriteStream (__filePath__);

doc.generate(output);
```

**Events**

`finalize` - It is fired after a stream has been generated successfully.

`error` - Fired when there are any errors

## Running the project

```
git clone https://github.com/nitin42/Making-a-custom-React-renderer
cd Making-a-custom-React-renderer
yarn install
yarn example
```

After you run `yarn example`, a docx file will be generated in the [demo](./demo) folder.

## Contributing

Suggestions to improve the tutorial are welcome 😃.

**If you've completed the tutorial successfully, you can either watch/star this repo or follow me on [twitter](https://twitter.com/NTulswani) for more updates.**

<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer'>
  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer.svg' />
</a>
",,,,,,,,,,,,,,,,,,,,,,,0.852506649,"This is a small tutorial on how to build your custom React renderer and render
the components to the host environment you need. The tutorial is divided into
three parts -. Creating a React reconciler (using [`react-
reconciler`](https://github.com/facebook/react/tree/master/packages/ React-re
Conciler) Creating a public interface to the reconciler i.e ""Renderer"" Creating
a render method to flush everything to thehost environment we need."
38,Pluggable Ruby translation framework,"Mobility
========

[![Gem Version](https://badge.fury.io/rb/mobility.svg)][gem]
[![Build Status](https://github.com/shioyama/mobility/workflows/CI/badge.svg)][actions]
[![Code Climate](https://api.codeclimate.com/v1/badges/72200f2b00c339ec4537/maintainability.svg)][codeclimate]
[![Gitter Chat](https://badges.gitter.im/mobility-ruby/mobility.svg)](https://gitter.im/mobility-ruby/mobility)

[gem]: https://rubygems.org/gems/mobility
[actions]: https://github.com/shioyama/mobility/actions
[codeclimate]: https://codeclimate.com/github/shioyama/mobility
[docs]: http://www.rubydoc.info/gems/mobility
[wiki]: https://github.com/shioyama/mobility/wiki

**This is the readme for version 1.x of Mobility. If you are using an earlier
version (0.8.x or earlier), you probably want the readme on the [0-8
branch](https://github.com/shioyama/mobility/tree/0-8).**

Mobility is a gem for storing and retrieving translations as attributes on a
class. These translations could be the content of blog posts, captions on
images, tags on bookmarks, or anything else you might want to store in
different languages. For examples of what Mobility can do, see the
<a href=""#companies-using-mobility"">Companies using Mobility</a> section below.

Storage of translations is handled by customizable ""backends"" which encapsulate
different storage strategies. The default way to store translations
is to put them all in a set of two shared tables, but many alternatives are
also supported, including [translatable
columns](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-1) and
[model translation
tables](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-2), as
well as database-specific storage solutions such as
[json/jsonb](https://www.postgresql.org/docs/current/static/datatype-json.html) and
[Hstore](https://www.postgresql.org/docs/current/static/hstore.html) (for
PostgreSQL).

Mobility is a cross-platform solution, currently supporting both
[ActiveRecord](http://api.rubyonrails.org/classes/ActiveRecord/Base.html)
and [Sequel](http://sequel.jeremyevans.net/) ORM, with support for other
platforms planned.

For a detailed introduction to Mobility, see [Translating with
Mobility](http://dejimata.com/2017/3/3/translating-with-mobility). See also my
talk at RubyConf 2018, [Building Generic
Software](https://www.youtube.com/watch?v=RZkemV_-__A), where I explain the
thinking behind Mobility's design.

If you're coming from Globalize, be sure to also read the [Migrating from
Globalize](https://github.com/shioyama/mobility/wiki/Migrating-from-Globalize)
section of the wiki.

Installation
------------

Add this line to your application's Gemfile:

```ruby
gem 'mobility', '~> 1.2.9'
```

### ActiveRecord (Rails)

Requirements:
- ActiveRecord >= 5.0 (including 6.x)

(Support for most backends and features is also supported with
ActiveRecord/Rails 4.2, but there are some tests still failing. To see exactly
what might not work, check pending specs in Rails 4.2 builds.)

To translate attributes on a model, extend `Mobility`, then call `translates`
passing in one or more attributes as well as a hash of options (see below).

If using Mobility in a Rails project, you can run the generator to create an
initializer and a migration to create shared translation tables for the
default `KeyValue` backend:

```
rails generate mobility:install
```

(If you do not plan to use the default backend, you may want to use
the `--without_tables` option here to skip the migration generation.)

The generator will create an initializer file `config/initializers/mobility.rb`
which looks something like this:

```ruby
Mobility.configure do

  # PLUGINS
  plugins do
    backend :key_value

    active_record

    reader
    writer

    # ...
  end
end
```

Each method call inside the block passed to `plugins` declares a plugin, along
with an optional default. To use a different default backend, you can
change the default passed to the `backend` plugin, like this:

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :table
```

See other possible backends in the [backends section](#backends).

You can also set defaults for backend-specific options. Below, we set the
default `type` option for the KeyValue backend to `:string`.

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :key_value, type: :string
   end
 end
```

We will assume the configuration above in the examples that follow.

See [Getting Started](#quickstart) to get started translating your models.

### Sequel

Requirements:
- Sequel >= 4.0

When configuring Mobility, ensure that you include the `sequel` plugin:

```diff
 plugins do
   backend :key_value

-    active_record
+    sequel
```

You can extend `Mobility` just like in ActiveRecord, or you can use the
`mobility` plugin, which does the same thing:

```ruby
class Word < ::Sequel::Model
  plugin :mobility
  translates :name, :meaning
end
```

Otherwise everything is (almost) identical to AR, with the exception that there
is no equivalent to a Rails generator, so you will need to create the migration
for any translation table(s) yourself, using Rails generators as a reference.

The models in examples below all inherit from `ApplicationRecord`, but
everything works exactly the same if the parent class is `Sequel::Model`.

Usage
-----

### <a name=""quickstart""></a>Getting Started

Once the install generator has been run to generate translation tables, using
Mobility is as easy as adding a few lines to any class you want to translate.
Simply pass one or more attribute names to the `translates` method with a hash
of options, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, :meaning
end
```

Note: When using the KeyValue backend, use the options hash to pass each attribute's type:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    type: :string
  translates :meaning, type: :text
end
```

This is important because this is how Mobility knows to which of the [two translation tables](https://github.com/shioyama/mobility/wiki/KeyValue-Backend) it should save your translation.

You now have translated attributes `name` and `meaning` on the model `Word`.
You can set their values like you would any other attribute:

```ruby
word = Word.new
word.name = ""mobility""
word.meaning = ""(noun): quality of being changeable, adaptable or versatile""
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
word.save
word = Word.first
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
```

Presence methods are also supported:

```ruby
word.name?
#=> true
word.name = nil
word.name?
#=> false
word.name = """"
word.name?
#=> false
```

What's different here is that the value of these attributes changes with the
value of `I18n.locale`:

```ruby
I18n.locale = :ja
word.name
#=> nil
word.meaning
#=> nil
```

The `name` and `meaning` of this word are not defined in any locale except
English. Let's define them in Japanese and save the model:

```ruby
word.name = ""モビリティ""
word.meaning = ""(名詞):動きやすさ、可動性""
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
word.save
```

Now our word has names and meanings in two different languages:

```ruby
word = Word.first
I18n.locale = :en
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
I18n.locale = :ja
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
```

Internally, Mobility is mapping the values in different locales to storage
locations, usually database columns. By default these values are stored as keys
(attribute names) and values (attribute translations) on a set of translation
tables, one for strings and one for text columns, but this can be easily
changed and/or customized (see the [Backends](#backends) section below).

### <a name=""getset""></a> Getting and Setting Translations

The easiest way to get or set a translation is to use the getter and setter
methods described above (`word.name` and `word.name=`), enabled by including
the `reader` and `writer` plugins.

You may also want to access the value of an attribute in a specific locale,
independent of the current value of `I18n.locale` (or `Mobility.locale`). There
are a few ways to do this.

The first way is to define locale-specific methods, one for each locale you
want to access directly on a given attribute. These are called ""locale
accessors"" in Mobility, and can be enabled by including the `locale_accessors`
plugin, with a default set of accessors:

```diff
 plugins do
   # ...
+  locale_accessors [:en, :ja]
```

You can also override this default from `translates` in any model:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, locale_accessors: [:en, :ja]
end
```

Since we have enabled locale accessors for English and Japanese, we can access
translations for these locales with `name_en` and `name_ja`:

```ruby
word.name_en
#=> ""mobility""
word.name_ja
#=> ""モビリティ""
word.name_en = ""foo""
word.name
#=> ""foo""
```

Other locales, however, will not work:

```ruby
word.name_ru
#=> NoMethodError: undefined method `name_ru' for #<Word id: ... >
```

With no plugin option (or a default of `true`), Mobility generates methods for
all locales in `I18n.available_locales` at the time the model is first loaded.

An alternative to using the `locale_accessors` plugin is to use the
`fallthrough_accessors` plugin. This uses Ruby's
[`method_missing`](http://apidock.com/ruby/BasicObject/method_missing) method
to implicitly define the same methods as above, but supporting any locale
without any method definitions. (Locale accessors and fallthrough locales can
be used together without conflict, with locale accessors taking precedence if
defined for a given locale.)

Ensure the plugin is enabled:

```diff
 plugins do
   # ...
+  fallthrough_accessors
```

... then we can access any locale we want, without specifying them upfront:

```ruby
word = Word.new
word.name_fr = ""mobilité""
word.name_fr
#=> ""mobilité""
word.name_ja = ""モビリティ""
word.name_ja
#=> ""モビリティ""
```

(Note however that Mobility will complain if you have
`I18n.enforce_available_locales` set to `true` and you try accessing a locale
not present in `I18n.available_locales`; set it to `false` if you want to allow
*any* locale.)

Another way to fetch values in a locale is to pass the `locale` option to the
getter method, like this:

```ruby
word.name(locale: :en)
#=> ""mobility""
word.name(locale: :fr)
#=> ""mobilité""
```

Note that setting the locale this way will pass an option `locale: true` to the
backend and all plugins. Plugins may use this option to change their behavior
(passing the locale explicitly this way, for example, disables
[fallbacks](#fallbacks), see below for details).

You can also *set* the value of an attribute this way; however, since the
`word.name = <value>` syntax does not accept any options, the only way to do this is to
use `send` (this is included mostly for consistency):

```ruby
word.send(:name=, ""mobiliteit"", locale: :nl)
word.name_nl
#=> ""mobiliteit""
```

Yet another way to get and set translated attributes is to call `read` and
`write` on the storage backend, which can be accessed using the method
`<attribute>_backend`. Without worrying too much about the details of
how this works for now, the syntax for doing this is simple:

```ruby
word.name_backend.read(:en)
#=> ""mobility""
word.name_backend.read(:nl)
#=> ""mobiliteit""
word.name_backend.write(:en, ""foo"")
word.name_backend.read(:en)
#=> ""foo""
```

Internally, all methods for accessing translated attributes ultimately end up
reading and writing from the backend instance this way.  (The `write` methods
do not call underlying backend's methods to persist the change. This is up to
the user, so e.g. with ActiveRecord you should call `save` write the changes to
the database).

Note that accessor methods are defined in an included module, so you can wrap
reads or writes in custom logic:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title

  def title(*)
    super.reverse
  end
end
```

### Setting the Locale

It may not always be desirable to use `I18n.locale` to set the locale for
content translations. For example, a user whose interface is in English
(`I18n.locale` is `:en`) may want to see content in Japanese. If you use
`I18n.locale` exclusively for the locale, you will have a hard time showing
stored translations in one language while showing the interface in another
language.

For these cases, Mobility also has its own locale, which defaults to
`I18n.locale` but can be set independently:

```ruby
I18n.locale = :en
Mobility.locale              #=> :en
Mobility.locale = :fr
Mobility.locale              #=> :fr
I18n.locale                  #=> :en
```

To set the Mobility locale in a block, you can use `Mobility.with_locale` (like
`I18n.with_locale`):

```ruby
Mobility.locale = :en
Mobility.with_locale(:ja) do
  Mobility.locale            #=> :ja
end
Mobility.locale              #=> :en
```

Mobility uses [RequestStore](https://github.com/steveklabnik/request_store) to
reset these global variables after every request, so you don't need to worry
about thread safety. If you're not using Rails, consult RequestStore's
[README](https://github.com/steveklabnik/request_store#no-rails-no-problem) for
details on how to configure it for your use case.

### <a name=""fallbacks""></a>Fallbacks

Mobility offers basic support for translation fallbacks. First, enable the
`fallbacks` plugin:

```diff
 plugins do
   # ...
+  fallbacks
+  locale_accessors
```

Fallbacks will require `fallthrough_accessors` to handle methods like
`title_en`, which are used to track changes. For performance reasons it's
generally best to also enable the `locale_accessors` plugin as shown above.

Now pass a hash with fallbacks for each locale as an option when defining
translated attributes on a class:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    fallbacks: { de: :ja, fr: :ja }
  translates :meaning, fallbacks: { de: :ja, fr: :ja }
end
```

Internally, Mobility assigns the fallbacks hash to an instance of
`I18n::Locale::Fallbacks.new`.

By setting fallbacks for German and French to Japanese, values will fall
through to the Japanese value if none is present for either of these locales,
but not for other locales:

```ruby
Mobility.locale = :ja
word = Word.create(name: ""モビリティ"", meaning: ""(名詞):動きやすさ、可動性"")
Mobility.locale = :de
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :fr
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :ru
word.name
#=> nil
word.meaning
#=> nil
```

You can optionally disable fallbacks to get the real value for a given locale
(for example, to check if a value in a particular locale is set or not) by
passing `fallback: false` (*singular*, not plural) to the getter method:

```ruby
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
Mobility.locale = :fr
word.meaning(fallback: false)
#=> nil
Mobility.locale = :ja
word.meaning(fallback: false)
#=> ""(名詞):動きやすさ、可動性""
```

You can also set the fallback locales for a single read by passing one or more
locales:

```ruby
Mobility.with_locale(:fr) do
  word.meaning = ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
end
word.save
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
word.meaning(fallback: :fr)
#=> ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
word.meaning(fallback: [:ja, :fr])
#=> ""(名詞):動きやすさ、可動性""
```

Also note that passing a `locale` option into an attribute reader or writer, or
using [locale accessors or fallthrough accessors](#getset) to get or set
any attribute value, will disable fallbacks (just like `fallback: false`).
(This will take precedence over any value of the `fallback` option.)

Continuing from the last example:

```ruby
word.meaning(locale: :de)
#=> nil
word.meaning_de
#=> nil
Mobility.with_locale(:de) { word.meaning }
#=> ""(名詞):動きやすさ、可動性""
```

For more details, see the [API documentation on
fallbacks](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Fallbacks)
and [this article on I18n
fallbacks](https://github.com/svenfuchs/i18n/wiki/Fallbacks).

### <a name=""default""></a>Default values

Another option is to assign a default value, using the `default` plugin:

```diff
 plugins do
   # ...
+  default 'foo'
```

Here we've set a ""default default"" of `'foo'`, which will be returned if a fetch would
otherwise return `nil`. This can be overridden from model classes:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, default: 'foo'
end

Mobility.locale = :ja
word = Word.create(name: ""モビリティ"")
word.name
#=> ""モビリティ""
Mobility.locale = :de
word.name
#=> ""foo""
```

You can override the default by passing a `default` option to the attribute reader:

```ruby
word.name
#=> 'foo'
word.name(default: nil)
#=> nil
word.name(default: 'bar')
#=> 'bar'
```

The default can also be a `Proc`, which will be called with the context as the
model itself, and passed optional arguments (attribute, locale and options
passed to accessor) which can be used to customize behaviour. See the [API
docs][docs] for details.

### <a name=""dirty""></a>Dirty Tracking

Dirty tracking (tracking of changed attributes) can be enabled for models which
support it. Currently this is models which include
[ActiveModel::Dirty](http://api.rubyonrails.org/classes/ActiveModel/Dirty.html)
(like `ActiveRecord::Base`) and Sequel models (through the
[dirty](http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/Dirty.html)
plugin).

First, ensure the `dirty` plugin is enabled in your configuration, and that you
have enabled an ORM plugin (either `active_record` or `sequel`), since the
dirty plugin will depend on one of these being enabled.

```diff
 plugins do
   # ...
   active_record
+  dirty
```

(Once enabled globally, the dirty plugin can be selectively disabled on classes
by passing `dirty: false` to `translates`.)

Take this ActiveRecord class:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title
end
```

Let's assume we start with a post with a title in English and Japanese:

```ruby
post = Post.create(title: ""Introducing Mobility"")
Mobility.with_locale(:ja) { post.title = ""モビリティの紹介"" }
post.save
```

Now let's change the title:

```ruby
post = Post.first
post.title                      #=> ""Introducing Mobility""
post.title = ""a new title""
Mobility.with_locale(:ja) do
  post.title                    #=> ""モビリティの紹介""
  post.title = ""新しいタイトル""
  post.title                    #=> ""新しいタイトル""
end
```

Now you can use dirty methods as you would any other (untranslated) attribute:

```ruby
post.title_was
#=> ""Introducing Mobility""
Mobility.locale = :ja
post.title_was
#=> ""モビリティの紹介""
post.changed
[""title_en"", ""title_ja""]
post.save
```

You can also access `previous_changes`:

```ruby
post.previous_changes
#=>
{
  ""title_en"" =>
    [
      ""Introducing Mobility"",
      ""a new title""
    ],
  ""title_ja"" =>
    [
      ""モビリティの紹介"",
      ""新しいタイトル""
    ]
}
```

Notice that Mobility uses locale suffixes to indicate which locale has changed;
dirty tracking is implemented this way to ensure that it is clear what
has changed in which locale, avoiding any possible ambiguity.

For performance reasons, it is highly recommended that when using the Dirty
plugin, you also enable [locale accessors](#getset) for all locales which will
be used, so that methods like `title_en` above are defined; otherwise they will
be caught by `method_missing` (using fallthrough accessors), which is much slower.

For more details on dirty tracking, see the [API
documentation](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Dirty).

### Cache

The Mobility cache caches localized values that have been fetched once so they
can be quickly retrieved again. The cache plugin is included in the default
configuration created by the install generator:

```diff
 plugins do
   # ...
+  cache
```

It can be disabled selectively per model by passing `cache: false` when
defining an attribute, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, cache: false
end
```

You can also turn off the cache for a single fetch by passing `cache: false` to
the getter method, i.e. `post.title(cache: false)`. To remove the cache plugin
entirely, remove the `cache` line from the global plugins configuration.

The cache is normally just a hash with locale keys and string (translation)
values, but some backends (e.g. KeyValue and Table backends) have slightly more
complex implementations.

### <a name=""querying""></a>Querying

Mobility backends also support querying on translated attributes. To enable
this feature, include the `query` plugin, and ensure you also have an ORM
plugin enabled (`active_record` or `sequel`):

```diff
 plugins do
   # ...
   active_record
+  query
```

Querying defines a scope or dataset class method, whose default name is `i18n`.
You can override this by passing a default in the configuration, like
`query :t` to use a name `t`.

Querying is supported in two different ways. The first is via query methods
like `where` (and `not` and `find_by` in ActiveRecord, and `except` in Sequel).

So for ActiveRecord, assuming a model using KeyValue as its default backend:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
end
```

... we can query for posts with title ""foo"" and content ""bar"" just as we would
query on untranslated attributes, and Mobility will convert the queries to
whatever the backend requires to actually return the correct results:

```ruby
Post.i18n.find_by(title: ""foo"", content: ""bar"")
```

results in the SQL:

```sql
SELECT ""posts"".* FROM ""posts""
INNER JOIN ""mobility_string_translations"" ""Post_title_en_string_translations""
  ON ""Post_title_en_string_translations"".""key"" = 'title'
  AND ""Post_title_en_string_translations"".""locale"" = 'en'
  AND ""Post_title_en_string_translations"".""translatable_type"" = 'Post'
  AND ""Post_title_en_string_translations"".""translatable_id"" = ""posts"".""id""
INNER JOIN ""mobility_text_translations"" ""Post_content_en_text_translations""
  ON ""Post_content_en_text_translations"".""key"" = 'content'
  AND ""Post_content_en_text_translations"".""locale"" = 'en'
  AND ""Post_content_en_text_translations"".""translatable_type"" = 'Post'
  AND ""Post_content_en_text_translations"".""translatable_id"" = ""posts"".""id""
WHERE ""Post_title_en_string_translations"".""value"" = 'foo'
  AND ""Post_content_en_text_translations"".""value"" = 'bar'
```

As can be seen in the query above, behind the scenes Mobility joins two tables,
one with string translations and one with text translations, and aliases the
joins for each attribute so as to match the particular model, attribute(s),
locale(s) and value(s) passed in to the query. Details of how this is done can
be found in the [Wiki page for the KeyValue
backend](https://github.com/shioyama/mobility/wiki/KeyValue-Backend#querying).

You can also use methods like `order`, `select`, `pluck` and `group` on
translated attributes just as you would with normal attributes, and Mobility
will handle generating the appropriate SQL:

```ruby
Post.i18n.pluck(:title)
#=> [""foo"", ""bar"", ...]
```

If you would prefer to avoid the `i18n` scope everywhere, you can define it as
a default scope on your model:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
  default_scope { i18n }
end
```

Now translated attributes can be queried just like normal attributes:

```ruby
Post.find_by(title: ""Introducing Mobility"")
#=> finds post with English title ""Introducing Mobility""
```

If you want more fine-grained control over your queries, you can alternatively
pass a block to the query method and call attribute names from the block scope
to build Arel predicates:

```ruby
Post.i18n do
  title.matches(""foo"").and(content.matches(""bar""))
end
```

which generates the same SQL as above, except the `WHERE` clause becomes:

```sql
SELECT ""posts"".* FROM ""posts""
  ...
WHERE ""Post_title_en_string_translations"".""value"" ILIKE 'foo'
  AND ""Post_content_en_text_translations"".""value"" ILIKE 'bar'
```

The block-format query format is very powerful and allows you to build complex
backend-independent queries on translated and untranslated attributes without
having to deal with the details of how these translations are stored. The same
interface is supported with Sequel to build datasets.

<a name=""backends""></a>Backends
--------

Mobility supports different storage strategies, called ""backends"". The default
backend is the `KeyValue` backend, which stores translations in two tables, by
default named `mobility_text_translations` and `mobility_string_translations`.

You can set the default backend to a different value in the global
configuration, or you can set it explicitly when defining a translated
attribute, like this:

```ruby
class Word < ApplicationRecord
  translates :name, backend: :table
end
```

This would set the `name` attribute to use the `Table` backend (see below).
The `type` option (`type: :string` or `type: :text`) is missing here because
this is an option specific to the KeyValue backend (specifying which shared
table to store translations on). Backends have their own specific options; see
the [Wiki][wiki] and [API documentation][docs] for which options are available
for each.

Everything else described above (fallbacks, dirty tracking, locale accessors,
caching, querying, etc) is the same regardless of which backend you use.

### Table Backend (like Globalize)

The `Table` backend stores translations as columns on a model-specific table. If
your model uses the table `posts`, then by default this backend will store an
attribute `title` on a table `post_translations`, and join the table to
retrieve the translated value.

To use the table backend on a model, you will need to first create a
translation table for the model, which (with Rails) you can do using the
`mobility:translations` generator:

```
rails generate mobility:translations post title:string content:text
```

This will generate the `post_translations` table with columns `title` and
`content`, and all other necessary columns and indices. For more details see
the [Table
Backend](https://github.com/shioyama/mobility/wiki/Table-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Table`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Table).

### Column Backend (like Traco)

The `Column` backend stores translations as columns with locale suffixes on
the model table. For an attribute `title`, these would be of the form
`title_en`, `title_fr`, etc.

Use the `mobility:translations` generator to add columns for locales in
`I18n.available_locales` to your model:

```
rails generate mobility:translations post title:string content:text
```

For more details, see the [Column
Backend](https://github.com/shioyama/mobility/wiki/Column-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Column`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Column).

### PostgreSQL-specific Backends

Mobility also supports JSON and Hstore storage options, if you are using
PostgreSQL as your database. To use this option, create column(s) on the model
table for each translated attribute, and set your backend to `:json`, `:jsonb`
or `:hstore`. If you are using Sequel, note that you
will need to enable the [pg_json](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_json_rb.html)
or
[pg_hstore](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_hstore_rb.html)
extensions with `DB.extension :pg_json` or `DB.extension :pg_hstore` (where
`DB` is your database instance).

Another option is to store all your translations on a single jsonb column (one
per model). This is called the ""container"" backend.

For details on these backends, see the [Postgres
Backend](https://github.com/shioyama/mobility/wiki/Postgres-Backends-%28Column-Attribute%29)
and [Container
Backend](https://github.com/shioyama/mobility/wiki/Container-Backend)
pages of the wiki and in the API documentation
([`Mobility::Backend::Jsonb`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Jsonb)
and
[`Mobility::Backend::Hstore`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Hstore)).

*Note: The Json backend (`:json`) may also work with recent versions of MySQL
with JSON column support, although this backend/db combination is not tested.
See [this issue](https://github.com/shioyama/mobility/issues/226) for details.*

Development
-----------

### Custom Backends

Although Mobility is primarily oriented toward storing ActiveRecord model
translations, it can potentially be used to handle storing translations in
other formats. In particular, the features mentioned above (locale accessors,
caching, fallbacks, dirty tracking to some degree) are not specific to database
storage.

To use a custom backend, simply pass the name of a class which includes
`Mobility::Backend` to `translates`:

```ruby
class MyBackend
  include Mobility::Backend
  # ...
end

class MyClass
  extend Mobility
  translates :foo, backend: MyBackend
end
```

For details on how to define a backend class, see the [Introduction to Mobility
Backends](https://github.com/shioyama/mobility/wiki/Introduction-to-Mobility-Backends)
page of the wiki and the [API documentation on the `Mobility::Backend`
module](http://www.rubydoc.info/gems/mobility/Mobility/Backend).

### Testing Backends

All included backends are tested against a suite of shared specs which ensure
they conform to the same expected behaviour. These examples can be found in:

- `spec/support/shared_examples/accessor_examples.rb` (minimal specs testing
  translation setting/getting)
- `spec/support/shared_examples/querying_examples.rb` (specs for
  [querying](#querying))
- `spec/support/shared_examples/serialization_examples.rb` (specialized specs
  for backends which store translations as a Hash: `serialized`, `hstore`,
  `json` and `jsonb` backends)

A minimal test can simply define a model class and use helpers defined in
`spec/support/helpers.rb` to run these examples, by extending either
`Helpers::ActiveRecord` or `Helpers::Sequel`:

```ruby
describe MyBackend do
  extend Helpers::ActiveRecord

  before do
    stub_const 'MyPost', Class.new(ActiveRecord::Base)
    MyPost.extend Mobility
    MyPost.translates :title, :content, backend: MyBackend
  end

  include_accessor_examples 'MyPost'
  include_querying_examples 'MyPost'
  # ...
end
```

Shared examples expect the model class to have translated attributes `title`
and `content`, and an untranslated boolean column `published`. These defaults
can be changed, see the shared examples for details.

Backends are also each tested against specialized specs targeted at their
particular implementations.

Integrations
------------

* [friendly_id-mobility](https://github.com/shioyama/friendly_id-mobility): Use
  Mobility with [FriendlyId](https://github.com/norman/friendly_id).
* [mobility-ransack](https://github.com/shioyama/mobility-ransack): Search
  attributes translated by Mobility with
  [Ransack](https://github.com/activerecord-hackery/ransack).
* [mobility-actiontext](https://github.com/sedubois/mobility-actiontext): Translate
  Rails [Action Text](https://guides.rubyonrails.org/action_text_overview.html) rich text
  with Mobility.

Tutorials
---------

- [Polyglot content in a rails
  app](https://revs.runtime-revolution.com/polyglot-content-in-a-rails-app-aed823854955)
- [Translating with
  Mobility](https://dejimata.com/2017/3/3/translating-with-mobility)
- [JSONify your Ruby
  Translations](https://dejimata.com/2018/3/20/jsonify-your-ruby-translations)

More Information
----------------

- [Github repository](https://www.github.com/shioyama/mobility)
- [API documentation][docs]
- [Wiki][wiki]

<a name=""#companies-using-mobility""></a>Companies using Mobility
------------------------

<img alt=""Logos of companies using Mobility"" src=""./img/companies-using-mobility.png"" style=""width: 100%"" />

- [Doorkeeper](https://www.doorkeeper.jp/)
- [Oreegano](https://www.oreegano.com/)
- [Venuu](https://venuu.fi)
- ... <sup>&#10033;</sup>

<sup>&#10033;</sup> <small>Post an issue or email me to add your company's name to this list.</small>

License
-------

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).
",,,,,,,,,,,,,,,,,,,,,,,0.225692516,"Mobility is a gem for storing and retrieving translations as attributes on a
class. These translations could be the content of blog posts, captions on
images, tags on bookmarks, or anything else you might want to store in different
languages. For examples of what Mobility can do, see the companies-using-
mobility section below."
2003,Apache IoTDB,"<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    ""License""); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
[English](./README.md) | [中文](./README_ZH.md)

# IoTDB
[![Main Mac and Linux](https://github.com/apache/iotdb/actions/workflows/main-unix.yml/badge.svg)](https://github.com/apache/iotdb/actions/workflows/main-unix.yml)
[![Main Win](https://github.com/apache/iotdb/actions/workflows/main-win.yml/badge.svg)](https://github.com/apache/iotdb/actions/workflows/main-win.yml)<!--[![coveralls](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)-->
[![GitHub release](https://img.shields.io/github/release/apache/iotdb.svg)](https://github.com/apache/iotdb/releases)
[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
![](https://github-size-badge.herokuapp.com/apache/iotdb.svg)
![](https://img.shields.io/github/downloads/apache/iotdb/total.svg)
![](https://img.shields.io/badge/platform-win%20%7C%20macos%20%7C%20linux-yellow.svg)
![](https://img.shields.io/badge/java--language-1.8%20%7C%2011%20%7C%2017-blue.svg)
[![Language grade: Java](https://img.shields.io/lgtm/grade/java/g/apache/iotdb.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/apache/iotdb/context:java)
[![IoTDB Website](https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=iotdb-website)](https://iotdb.apache.org/)
[![Maven Version](https://maven-badges.herokuapp.com/maven-central/org.apache.iotdb/iotdb-parent/badge.svg)](http://search.maven.org/#search|gav|1|g:""org.apache.iotdb"")
[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/apache/iotdb)
[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg)

# Overview

IoTDB (Internet of Things Database) is a data management system for time series data, which provides users with specific services including data collection, storage and analysis. Due to its light weight structure, high performance and usable features, together with its seamless integration with the Hadoop and Spark ecology, IoTDB meets the requirements of massive dataset storage, high throughput data input, and complex data analysis in the industrial IoT field.

# Main Features

Main features of IoTDB are as follows:

1. Flexible deployment strategy. IoTDB provides users a one-click installation tool on either the cloud platform or the terminal devices, and a data synchronization tool bridging the data on cloud platform and terminals.
2. Low cost on hardware. IoTDB can reach a high compression ratio of disk storage.
3. Efficient directory structure. IoTDB supports efficient organization for complex time series data structures from intelligent networking devices, organization for time series data from devices of the same type, and fuzzy searching strategy for massive and complex directory of time series data.
4. High-throughput read and write. IoTDB supports millions of low-power devices' strong connection data access, high-speed data read and write for intelligent networking devices and mixed devices mentioned above.
5. Rich query semantics. IoTDB supports time alignment for time series data across devices and measurements, computation in time series field (frequency domain transformation) and rich aggregation function support in time dimension.
6. Easy to get started. IoTDB supports SQL-Like language, JDBC standard API and import/export tools which is easy to use.
7. Seamless integration with state-of-the-practice Open Source Ecosystem. IoTDB supports analysis ecosystems such as, Hadoop, Spark, and visualization tool, such as, Grafana.

For the latest information about IoTDB, please visit [IoTDB official website](https://iotdb.apache.org/). If you encounter any problems or identify any bugs while using IoTDB, please report an issue in [jira](https://issues.apache.org/jira/projects/IOTDB/issues).

<!-- TOC -->

## Outline

- [IoTDB](#iotdb)
- [Overview](#overview)
- [Main Features](#main-features)
  - [Outline](#outline)
- [Quick Start](#quick-start)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
    - [Build from source](#build-from-source)
    - [Configurations](#configurations)
  - [Start](#start)
    - [Start IoTDB](#start-iotdb)
    - [Use IoTDB](#use-iotdb)
      - [Use Cli](#use-cli)
      - [Basic commands for IoTDB](#basic-commands-for-iotdb)
    - [Stop IoTDB](#stop-iotdb)
  - [Only build server](#only-build-server)
  - [Only build cli](#only-build-cli)
  - [Usage of CSV Import and Export Tool](#usage-of-csv-import-and-export-tool)

<!-- /TOC -->

# Quick Start

This short guide will walk you through the basic process of using IoTDB. For a more detailed introduction, please visit our website's [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

## Prerequisites

To use IoTDB, you need to have:

1. Java >= 1.8 (1.8, 11 to 17 are verified. Please make sure the environment path has been set accordingly).
2. Maven >= 3.6 (If you want to compile and install IoTDB from source code).
3. Set the max open files num as 65535 to avoid ""too many open files"" error.
4. (Optional) Set the somaxconn as 65535 to avoid ""connection reset"" error when the system is under high load.
    ```
    # Linux
    > sudo sysctl -w net.core.somaxconn=65535
   
    # FreeBSD or Darwin
    > sudo sysctl -w kern.ipc.somaxconn=65535
    ```

## Installation

IoTDB provides three installation methods, you can refer to the following suggestions, choose the one fits you best:

* Installation from source code. If you need to modify the code yourself, you can use this method.
* Installation from binary files. Download the binary files from the official website. This is the recommended method, in which you will get a binary released package which is out-of-the-box.
* Using Docker：The path to the dockerfile is https://github.com/apache/iotdb/tree/master/docker/src/main


Here in the Quick Start, we give a brief introduction of using source code to install IoTDB. For further information, please refer to [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

## Build from source

### Prepare Thrift compiler

Skip this chapter if you are using Windows. 

As we use Thrift for our RPC module (communication and
protocol definition), we involve Thrift during the compilation, so Thrift compiler 0.13.0 (or
higher) is required to generate Thrift Java code. Thrift officially provides binary compiler for
Windows, but unfortunately, they do not provide that for Unix OSs. 

If you have permission to install new softwares, use `apt install` or `yum install` or `brew install`
to install the Thrift compiler (If you already have installed the thrift compiler, skip this step).
Then, you may add the following parameter
when running Maven: `-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.

If not, then you have to compile the thrift compiler, and it requires you install a boost library first.
Therefore, we compiled a Unix  compiler ourselves and put it onto GitHub, and with the help of a
maven plugin, it will be  downloaded automatically during compilation. 
This compiler works fine with gcc8 or later, Ubuntu  MacOS, and CentOS, but previous versions 
and other OSs are not guaranteed.

If you can not download the thrift compiler automatically because of network problem, you can download 
it yourself, and then either:
rename your thrift file to `{project_root}\thrift\target\tools\thrift_0.12.0_0.13.0_linux.exe`;
or, add Maven commands:
`-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.

### Compile IoTDB

You can download the source code from:

```
git clone https://github.com/apache/iotdb.git
```

The default dev branch is the master branch, If you want to use a released version x.x.x:

```
git checkout vx.x.x
```

Or checkout to the branch of a big version, e.g., the branch of 1.0 is rel/1.0

```
git checkout rel/x.x
```

### Build IoTDB from source

Under the root path of iotdb:

```
> mvn clean package -pl distribution -am -DskipTests
```

After being built, the IoTDB distribution is located at the folder: ""distribution/target"".


### Only build cli

Under the root path of iotdb:

```
> mvn clean package -pl cli -am -DskipTests
```

After being built, the IoTDB cli is located at the folder ""cli/target"".

### Build Others

Using `-P compile-cpp` for compiling cpp client (For more details, read client-cpp's Readme file.)

**NOTE: Directories ""`thrift/target/generated-sources/thrift`"", ""`thrift-sync/target/generated-sources/thrift`"",
""`thrift-cluster/target/generated-sources/thrift`"", ""`thrift-influxdb/target/generated-sources/thrift`"" 
and ""`antlr/target/generated-sources/antlr4`"" need to be added to sources roots to avoid compilation errors in the IDE.**

**In IDEA, you just need to right click on the root project name and choose ""`Maven->Reload Project`"" after 
you run `mvn package` successfully.**

### Configurations

configuration files are under ""conf"" folder

  * environment config module (`datanode-env.bat`, `datanode-env.sh`),
  * system config module (`iotdb-datanode.properties`)
  * log config module (`logback.xml`).

For more information, please see [Config Manual](https://iotdb.apache.org/UserGuide/Master/Reference/Config-Manual.html).

## Start

You can go through the following steps to test the installation. If there is no error returned after execution, the installation is completed.

### Start IoTDB

Users can start 1C1D IoTDB by the start-standalone script under the sbin folder.

```
# Unix/OS X
> sbin/start-standalone.sh

# Windows
> sbin\start-standalone.bat
```

### Use IoTDB

#### Use Cli

IoTDB offers different ways to interact with server, here we introduce the basic steps of using Cli tool to insert and query data.

After installing IoTDB, there is a default user 'root', its default password is also 'root'. Users can use this
default user to login Cli to use IoTDB. The startup script of Cli is the start-cli script in the folder sbin. When executing the script, user should assign
IP, PORT, USER_NAME and PASSWORD. The default parameters are ""-h 127.0.0.1 -p 6667 -u root -pw -root"".

Here is the command for starting the Cli:

```
# Unix/OS X
> sbin/start-cli.sh -h 127.0.0.1 -p 6667 -u root -pw root

# Windows
> sbin\start-cli.bat -h 127.0.0.1 -p 6667 -u root -pw root
```

The command line cli is interactive, so you should see the welcome logo and statements if everything is ready:

```
 _____       _________  ______   ______
|_   _|     |  _   _  ||_   _ `.|_   _ \
  | |   .--.|_/ | | \_|  | | `. \ | |_) |
  | | / .'`\ \  | |      | |  | | |  __'.
 _| |_| \__. | _| |_    _| |_.' /_| |__) |
|_____|'.__.' |_____|  |______.'|_______/  version x.x.x


IoTDB> login successfully
IoTDB>
```

#### Basic commands for IoTDB

Now, let us introduce the way of creating timeseries, inserting data and querying data.

The data in IoTDB is organized as timeseries. Each timeseries includes multiple data-time pairs, and is owned by a database. Before defining a timeseries, we should define a database using CREATE DATABASE first, and here is an example:

```
IoTDB> CREATE DATABASE root.ln
```

We can also use SHOW DATABASES to check the database being created:

```
IoTDB> SHOW DATABASES
+-------------+
|     Database|
+-------------+
|      root.ln|
+-------------+
Total line number = 1
```

After the database is set, we can use CREATE TIMESERIES to create a new timeseries. When creating a timeseries, we should define its data type and the encoding scheme. Here We create two timeseries:

```
IoTDB> CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN
IoTDB> CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=RLE
```

In order to query the specific timeseries, we can use SHOW TIMESERIES <Path>. <Path> represent the location of the timeseries. The default value is ""null"", which queries all the timeseries in the system(the same as using ""SHOW TIMESERIES root""). Here are some examples:

1. Querying all timeseries in the system:

```
IoTDB> SHOW TIMESERIES
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
|                   Timeseries|Alias|Database|DataType|Encoding|Compression|Tags|Attributes|
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
|root.ln.wf01.wt01.temperature| null|      root.ln|   FLOAT|     RLE|     SNAPPY|null|      null|
|     root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
Total line number = 2
```

2. Querying a specific timeseries(root.ln.wf01.wt01.status):

```
IoTDB> SHOW TIMESERIES root.ln.wf01.wt01.status
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
|              timeseries|alias|database|dataType|encoding|compression|tags|attributes|
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
Total line number = 1
```

Insert timeseries data is a basic operation of IoTDB, you can use ‘INSERT’ command to finish this. Before insertion, you should assign the timestamp and the suffix path name:

```
IoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status) values(100,true);
IoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status,temperature) values(200,false,20.71)
```

The data that you have just inserted will display as follows:

```
IoTDB> SELECT status FROM root.ln.wf01.wt01
+------------------------+------------------------+
|                    Time|root.ln.wf01.wt01.status|
+------------------------+------------------------+
|1970-01-01T00:00:00.100Z|                    true|
|1970-01-01T00:00:00.200Z|                   false|
+------------------------+------------------------+
Total line number = 2
```

You can also query several timeseries data using one SQL statement:

```
IoTDB> SELECT * FROM root.ln.wf01.wt01
+------------------------+-----------------------------+------------------------+
|                    Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|
+------------------------+-----------------------------+------------------------+
|1970-01-01T00:00:00.100Z|                         null|                    true|
|1970-01-01T00:00:00.200Z|                        20.71|                   false|
+------------------------+-----------------------------+------------------------+
Total line number = 2
```

To change the time zone in Cli, you can use the following SQL:

```
IoTDB> SET time_zone=+08:00
Time zone has set to +08:00
IoTDB> SHOW time_zone
Current time zone: Asia/Shanghai
```

Add then the query result will show using the new time zone.

```
IoTDB> SELECT * FROM root.ln.wf01.wt01
+-----------------------------+-----------------------------+------------------------+
|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|
+-----------------------------+-----------------------------+------------------------+
|1970-01-01T08:00:00.100+08:00|                         null|                    true|
|1970-01-01T08:00:00.200+08:00|                        20.71|                   false|
+-----------------------------+-----------------------------+------------------------+
Total line number = 2
```

The commands to exit the Cli are:

```
IoTDB> quit
or
IoTDB> exit
```

For more information about the commands supported by IoTDB SQL, please see [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

### Stop IoTDB

The server can be stopped with ""ctrl-C"" or the following script:

```
# Unix/OS X
> sbin/stop-standalone.sh

# Windows
> sbin\stop-standalone.bat
```

# Usage of CSV Import and Export Tool

see [Usage of CSV Import and Export Tool](https://iotdb.apache.org/UserGuide/Master/Write-And-Delete-Data/CSV-Tool.html)

# Frequent Questions for Compiling
see [Frequent Questions when Compiling the Source Code](https://iotdb.apache.org/Development/ContributeGuide.html#_Frequent-Questions-when-Compiling-the-Source-Code)

# Contact Us
### QQ Group

* Apache IoTDB User Group: 659990460

### Wechat Group

* Add friend: `tietouqiao` or `liutaohua001`, and then we'll invite you to the group.

### Slack

* https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg

see [Join the community](https://github.com/apache/iotdb/issues/1995) for more!
",,,,,,,,,,,,,,,,,,,,,,,0.5001678605,"This file is licensed under the Apache License, Version 2.0. You may not use
this file except in compliance with the License. Unless required by applicable
law or agreed to in writing, software distributed under the License is
distributed on an ""AS IS"" BASIS. See the License for the specific language
governing permissions and limitations."
1559,Curated collection of blockchain & cryptocurrency resources.,"# CryptoList
Curated collection of blockchain &amp; cryptocurrency links.

# Sponsor
[<img src=""https://github.com/coinpride/CryptoList/blob/master/join_cryptomemes.png?raw=true"" width=""467"">](https://t.me/join_cryptomemes)


# Contents
- [Media](#media)
  - [Magazines and Blogs](#magazines-and-blogs)
  - [Medium](#medium)
  - [Telegram Channels](#telegram-channels)
- [News Aggregators](#news-aggregators)
- [Price Trackers](#price-trackers)
- [ICO Trackers](#ico-trackers)
- [Exchanges](#exchanges)
- [Communities](#communities)
  - [Chats](#chats)
  - [Forums](#forums)
  - [Other](#other)
  - [Twitter Users and Lists](#twitter-users-and-lists)
- [Jobs](#jobs)
- [Wallets](#wallets)
- [Altfolio](#altfolio)
- [Useful Tools](#useful-tools)
- [Video](#video)
  - [YouTube Channels](#youtube-channels)
  - [Movies](#movies)
- [Learning](#learning)
  - [Books](#books)
  - [Courses](#courses)
  - [Other](#other)
- [Trading Tools](#trading-tools)
- [For Developers](#for-developers)
  - [API](#api)
  - [Other](#other)
- [Podcasts](#podcasts)
- [Mining](#mining)
- [Games](#games)
- [Sponsors](#sponsors)
- [Contribute](#contribute)
- [License](#license)

# Media
## Magazines and Blogs
* [CryptoHackers](https://cryptohackers.party/) - Cryptoworld superheroes interviews. Fascinating facts, teams insides and success stories.
* [CoinTelegraph](https://cointelegraph.com/) - The leading publication offering latest news, analysis, expert opinions, community commentaries. Founded in 2013.
* [CoinDesk](https://www.coindesk.com/) - CoinDesk is the world leader in news and information on digital currencies. 17M mothly users.
* [CryptoCoins News](https://www.cryptocoinsnews.com/) - Fresh news and analysis. This huge blog posts very frequently. Approx. 7M readers monthly.
* [Bitcoin Magazine](https://bitcoinmagazine.com/) - Bitcoin Magazine is the oldest and most established source of news, information and expert commentaries. Sometimes posts deep and very interesting articles.
* [99 Bitcoins](https://99bitcoins.com/) - 99 Bitcoins is the largest information source for non technical newbies.
* [Coin Speaker](https://www.coinspeaker.com/) - Founded in 2014, CoinSpeaker is one of the most influentional news source.
* [The Memory Pool](https://nakamotoinstitute.org/mempool/) - Satoshi Nakamoto Institute blog.
* [Tim Swanson Blog](https://www.ofnumbers.com/category/bitcoin/) - Blog of director of market research at R3.
* [Oleg Andreev Blog](https://oleganza.com/) - Blog of hardcore developer, product architect at Chain.com.
* [CoinGape](https://coingape.com) - Global blockchain, cryptocurrency, ICO news, updates, guides and analysis.
* [Freedom to Tinker](https://freedom-to-tinker.com/tag/bitcoin/) - Princeton hosted tech blog: researches and experts commentaries.
* [Money and State](http://moneyandstate.com/) - Blog of Erik Voorhees, CEO of leading digital asset exchange ShapeShift.io
* [Gavin Andersesn Blog](http://gavinandresen.ninja/) - Blog of Bitcoin developer.
* [Peter Todd Blog](https://petertodd.org/) - Blog of Todd, the applied cryptography consultant.
* [Richard Brown Blog](https://gendal.me/tag/bitcoin/) - Blog of Head of Technology at R3CEV.
* [Laanwj Blog](https://laanwj.github.io/) - Blog of Bitcoin core developer and reverse engineer.
* [Crypto Analyst](https://www.cryptoanalyst.co/) - World’s premier cryptocurrency news analysis.
* [Bitrazzi](https://bitrazzi.com/) - Bitcoin, Cryptocurrency And Blockchain News.
* [Bitfalls](https://bitfalls.com) - Technical news, solidity tutorials, and skeptical research. EN and HR languages.
* [What Bitcoin Did](https://www.whatbitcoindid.com/) - Blog of accidental Bitcoin and Cryptocurrency investor, miner, blogger and podcaster.
* [CryptoGround](https://www.cryptoground.com) - Get latest news related to Bitcoin, Ethereum and other cryptocurrencies.

## Medium
* [Vitalik Buterin](https://medium.com/@VitalikButerin) - Ethereum creator, cryptocurrency evangelist.
* [Bitcoin Tech Talk](https://bitcointechtalk.com) - All About Bitcoin Development.
* [Tuur Demeester](https://medium.com/@tuurdemeester) - Economist & investor, editor in chief at Adamant Research.
* [Vinny Lingham](https://vinnylingham.com) - CEO of Civic.com.
* [Nicolas Dorier](https://medium.com/@nicolasdorier) - Main developer of NBitcoin. CTO at Metaco SA.
* [Nick Tomaino](https://thecontrol.co/@ntmoney) - Tech investor @RunaCapital.
* [Eric Lombrozo](https://medium.com/@elombrozo) - Co-CEO & CTO Ciphrex Corp., Bitcoin Core contributor.
* [Jimmy Song](https://medium.com/@jimmysong) - Bitcoin Developer and Entrepreneur.
* [Linda Xie](https://medium.com/@linda.xie) - Product Manager @Coinbase. Advisor @0xProject.
* [Fred Ehrsam](https://medium.com/@FEhrsam) - Previously co-founder @Coinbase, trader @GoldmanSachs, computer science @DukeU.
* [Token Economy](https://tokeneconomy.co) - Making sense of the latest in crypto-land: cryptocurrencies, blockchains, ICOs, dapps & the growing token economy.

## Telegram Channels
* [Crypto Memes](https://t.me/join_cryptomemes) - Cryptoworld funny pictures.
* [Crypto](https://t.me/Crypto) - The god of all crypto channels.
* [UpcomingICOs](https://t.me/UpcomingICOs) - This channel is dedicated to informing people of up and coming ICO's.
* [CryptoNews](https://t.me/bitcoinnews) - Cryptocurrency news megafeed that is posted in real time, even before they hit social media.
* [Ethereum dapps](https://t.me/ethereumdapps) - Ethereum & DAPPS news and updates.
* [Telegram Crypto Groups](http://telegramcryptogroups.com) - Directory of all of Telegram crypto related groups.

# News Aggregators
* [CryptoControl](https://cryptocontrol.io/en/social) - CryptoControl aggregates news from many sources (Twitter, Reddit, Google Trends etc) and displays it in the Trello style.
* [CryptoPanic](https://cryptopanic.com/) - CryptoPanic is news aggregator platform indicating impact on price and market for traders and cryptocurrency enthusiasts.
* [ETHNews](https://www.ethnews.com) - ETHNews is emerging provider of Ethereum and Blockchain ecosystem news.
* [Coin Spectator](https://coinspectator.com/) - Get the latest cryptocurrency, bitcoin & blockchain news from many news sources.
* [CoinsCalendar](http://www.coinscalendar.com/) - CoinsCalendar displays all upcoming coins events and updates.
* [CoinDar](https://coindar.org/) - Be first to know about coming cryptocurrency news, updates, hard forks, meetups, coins listing on exchanges and other important events.
* [BTCnews](https://itunes.apple.com/app/btcnews-bitcoin-cryptocurrency/id946903421) - Mature cryptocurrency news and charts app for iOS.
* [CryptoAudio](http://cryptoaud.io) - A tool that creates news summaries from various sources and reads them using a text-to-speech technology.
* [CryptoFlash.io](https://cryptoflash.io) - Top 200+ cryptocurrencies news & rumors in real time!
* [AmuletPlatform](https://amuletplatform.com/data/) - Real-time sentiment analysis of 24M+ posts about crypto from Reddit and Bitcointalk
* [InTokenWeTrust](https://intwt.com/) - News aggregator platform with all media and blogs about cryptocurrency.


# Price Trackers
* [CoinMarketcap](https://coinmarketcap.com/) - Old and cool. All coins prices, graphs, market caps. API, widgets, tools. Used by 90M monthly users.
* [Coincap](http://coincap.io/) - CoinCap tracks market data for hundreds of cryptocurrencies in real-time. They also have very useful mobile app.
* [Cryptowatch](https://cryptowat.ch) - Live price charts and market data for Bitcoin, Ethereum, and more. Many exchanges, flexible settings and cool API.
* [Bitcoinwisdom](https://bitcoinwisdom.com) - Live Bitcoin/Litecoin charts with EMA, MACD and other indicators. Support many exchanges (Bitfinex, Bitstamp, Coinbase, Bittrex, Poloniex etc).
* [Flippening Watch](https://www.flippening.watch/) - When will Ethereum overtake Bitcoin and become the most important cryptocurrency?
* [Coindex](https://itunes.apple.com/us/app/coindex/id1251487103) - Beautiful cryptocurrency price tracker for iOS.
* [WorldCoinIndex](https://www.worldcoinindex.com/) - Realtime cryptocurrency price monitoring tool. Lots of altcoins and many fiat currencies.
* [CryptTrader](https://cryptrader.com/) - Cryptocurrency trading platform. Charts, news and trollbox. Add widgets to customize the look.
* [Coin Daily Update](https://coindailyupdate.com) - Daily email update with price changes of customizable coins.
* [Coindera](https://coindera.com/) - Real time cryptocurrency price alerts for 2,000+ coins on 25+ exchanges.
* [Cryptocurrency CLI](https://github.com/christ0ph3r/cryptocurrency-cli) - Cryptocurrency portfolio on the command line.
* [ckandr](https://github.com/screwgoth/ckandr) - A command-line cryptocurrency price ticker specifically for popular Indian cryptocurrency exchanges.
* [CoinAlyze](https://coinalyze.net) - Cryptocurrency real-time charts, price levels, statistics and candlestick patterns detection.
* [Cryptomon](https://cryptomon.io) - Modern trading indicators and price predictions based on machine intelligence.
* [MoonHash](https://chrome.google.com/webstore/detail/%E2%97%90-moonhash-crypto-portfol/clbooohlcomlhgkfencdenfiadhkefff?hl=en-US) - Cryptocurrency portfolio, price monitoring and telegram monitoring Google Chrome Extension
* [Coincall](https://coincall.io) - Simplest web-based crypto price and portfolio tracker.
* [Owl Crypto](https://owlcrypto.com) - Cryptocurrency percentage change monitor.
* [Coin Market Manager](https://www.coinmarketman.com) - Smart, accurate, Portfolio tracking. Realtime Breakeven and Profit Loss features.

# ICO Trackers
* [ICOtracker](https://icotracker.net) - Very informative and trusted tracker.
* [The ICO digest](https://theicodigest.com) - Weekly ICO digest.
* [TokenData](https://www.tokendata.io/) - See ICO stats: ROI, total investments, status and other information.
* [CoinSchedule](https://www.coinschedule.com) - Live Token Sales & ICOs.
* [ICO Bazaar](https://icobazaar.com) - Informative website + ICOs alerts.
* [Picoloresearch](https://picoloresearch.com/) - Independent research on blockchain startups and ICOs.
* [Smith + Crown ICO list](https://www.smithandcrown.com/icos/) - Curated list of ongoing and upcoming token sales. Have some research tiers.
* [ICORating](https://icorating.com/) - ICOrating specializes in evaluating companies with planned ICO.
* [ICO Alert](https://www.icoalert.com/) - Source for analysis of active and upcoming Initial Coin Offerings.
* [TokenMarket](https://tokenmarket.net) - TokenMarket is marketplace for tokens, digital assets and blockchain based investing.
* [ICOdrops](https://icodrops.com/) - Constantly updating kanban style ICO board.
* [ICO Whitelists](https://icowhitelists.com) - Articles on ICOs. Also tracks growth of 200+ Telegram groups for ICOs.
* [ICOAlarm](http://www.icoalarmapp.com/) - ICO discovery, analysis, and alerts crossplatform mobile application.
* [ICO Toplist](https://icotoplist.com) - List, review and rate all ICOs: Past, Active and Upcoming ones.

# Exchanges
* [Local Bitcoins](https://localbitcoins.com/) - Buy and sell bitcoins near you. Trusted by 10M monthly users.
* [Poloniex](https://www.poloniex.com/) - USA. Trust: 3.5/5. Tons of altcoins. Poor support.
* [CoinBase](https://www.coinbase.com) - USA. Trust: 5/5. Pay with fiat.
* [Kraken](https://www.kraken.com/) - USA. Trust: 5/5. Founded in 2011.
* [Bittrex](https://www.bittrex.com) - USA. Trust: 3.8/5. Many altcoins.
* [CEX.IO](https://cex.io/) - UK. Trust: 5/5. Fiat. Newbie friendly.
* [BestBitcoinExchange](https://www.bestbitcoinexchange.io/) - Curated list of 35 popular exchanges. Looks SEOish but does the job well.
* [Shapeshift](https://shapeshift.io) - No login, fast, awesome API.
* [Changelly](https://changelly.com/) - Fiat, nice affiliate program.
* [Cryptoradar](https://cryptoradar.co) - Compares prices and features from > 25 exchanges and brokers.
* [Binance](https://www.binance.com) - Modern exchange with the lowest fees and it's own token.
* [Kucoin](https://www.kucoin.com) - Modern. Evolving really fast. Has it's own token.
* [Guarda Exchange](https://guarda.co/exchange) - Anonymous crypto exchange and wallet.
* [DDEX](https://www.ddex.io/) - Decentralized, non-custodial token to token trading powered by 0xproject and Hydro.
* [ForkDelta](https://forkdelta.app/) - One of the earliest and still most popular decentralized exchanges.
* [ChangeNOW](https://changenow.io/) - Limitless and fast coin swaps free of custody.
* [n.exchange](https://n.exchange/) - Open source non-custodial exchange with fiat, a great API and a non-custodial cross chain order book.

# Communities
## Chats
* [Crypto Aquarium](https://cryptoaquarium.com) - Great community (Telegram, Slack). Curated by Joshua Petty, the Coindex creator. 800+ members.
* [Bitpam](https://discordapp.com/invite/VpPrGmF?ref=cryptominded) - Friendly Discord community. 300+ members.
* [Bitcoin Core Community](https://t.me/BitcoinCore) - Telegram discussion about Bitcoin and Bitcoin Core. 2000+ members.
* [Blockstack](https://docs.google.com/forms/d/e/1FAIpQLSed5Mnu0G5ZMJdWs6cTO_8sTJfUVfe1sYL6WFDcD51_XuQkZw/viewform) - Official Blockstack Slack community. 3000+ members.
* [CryptoMinded](https://community.cryptominded.com/) - All things crypto: events, jobs, trades, news. 1000+ Slack members.
* [IRC #bitcoin channel](https://webchat.freenode.net/?channels=bitcoin&uio=d4/) - Old good IRC. The channel of 200 silent people.

## Forums
* [CryptoHeresy ⚡️](https://cryptoheresy.com) - Fresh Bitcoin forum with focus on cryptocurrency tools and resources.
* [Bitcoin Talk](https://bitcoinTalk.org/) - Homepage of the Bitcoin community from the start. Made by Satoshi Nakamoto in 2009.
* [Bitcoin.com Forum](https://forum.bitcoin.com/) - Strong community of 30,000+ users.
* [BitcoinGarden](https://bitcoingarden.org) - This young forum has appeared in Jan 2017.
* [CryptoCurrencyTalk](https://cryptocurrencytalk.com/) - Born in 2013, very active forum. Modern engine.
* [Token Daily](https://www.tokendaily.co) - Crypto news, launches, white papers and Q&A with experts 📈
* [Stadivm](https://stadivm.com/) - Newborn cryptocurrency forum with a potential.

## Other
* [Cryptocompare](https://www.cryptocompare.com) - CryptoCompare is interactive platform where you can discuss the latest crypto trends and monitor all markets streaming in real time. Also includes perfect altfoilio app.
* [Trading View](https://www.tradingview.com/u/DLavrov/) - Follow pro traders and learn from their analyzes. (Mr. Lavrov is great specialist).
* [Bitcoin on StackExchange](https://bitcoin.stackexchange.com/) - Question and answer site for Bitcoin crypto-currency enthusiasts.
* [/r/Bitcoin/](https://www.reddit.com/r/Bitcoin/) - Discuss Bitcoin news on Reddit. 300,000+ readers.
* [Steemit](https://steemit.com) - Fancy Reddit running on a blockchain. Post to earn $. Spend $ to promote yourself.
* [Coinvision](https://www.coinvision.co/) - Get alerts about the most credible crypto coins and ICOs and also access private great community.

## Twitter Users and Lists
* [Quality Crypto](https://twitter.com/followingell/lists/quality-crypto) - List of >50 prominent, high signal-to-noise-ratio accounts.

# Jobs
* [Coinality](https://coinality.com/) - Coinality is free service connecting crypto employers and job seekers.
* [Cryptogrind](https://www.cryptogrind.com/) - Bitcoin freelance platform.
* [Blockchain Dev Jobs](https://blockchaindevjobs.com/) - Curated list of jobs from around the web for blockchain engineers.
* [Ethlance](https://ethlance.com) - Hire or work for ETH.
* [/r/Jobs4Bitcoins/](https://www.reddit.com/r/Jobs4Bitcoins/) - Place on Reddit to offer your talents and skills in exchange for the fastest growing currency in the world.
* [Crypto.jobs](https://crypto.jobs) - Well categorized jobs list. Owner does a lot to promote it.
* [Beincrypto](https://beincrypto.com) - Aggregates all the crypto jobs from major job boards.
* [Jobs by BlockRepublic](https://blockrepublic.io/blockchain-jobs/) - Useful filters, locations & categories.
* [Crypto Jobs List](https://cryptojobslist.com/) - Curated jobs from top verified blockchain companies.


# Wallets
* [Bitcoin Core](https://bitcoin.org/en/download) - Bitcoin Core is MIT licensed open source Bitcoin wallet. It runs own full node so 145GG of free disk space is required. OSX/Linux/Windows/Ubuntu.
* [Blockchain.info](https://blockchain.info/wallet/#/) - World’s most popular digital wallet. Mobile apps included.
* [Electrum](https://electrum.org/#home) - Thin Bitcoin client. Opensource, MIT, has 100+ contributors.
* [Exodus](https://www.exodus.io) - Exodus is the first desktop multi-asset wallet with ShapeShift built in.
* [MyEtherWallet](https://www.myetherwallet.com) - Opensource webapp to access Ethereum. Old and reliable. ERC20 support. Loved by phishers!
* [Coinomi](https://coinomi.com/) - Supports many altcoins, fast and has perfect UI ([closed source now](https://github.com/bitcoin-dot-org/bitcoin.org/issues/1622)).
* [Jaxx](https://jaxx.io) - Reliable, Jaxx supports many of the leading cryptocurrency platforms. Crossplatform.
* [Ledger Hardware](https://www.ledger.com/) - Reliable hardware wallet. Supports BTC/ETH/ETC/DASH/DOGE and many more coins and ERC20 tokens.
* [Trezor Hardware](https://trezor.io) - The first & most secure hardware wallet. Supports BTC/ETH/ETC/DASH/ and many more coins and ERC20 tokens.
* [CoinBase](https://www.coinbase.com/) - Buy Bitcoin for $, NFC payments, requested payments.
* [MyCelium](https://wallet.mycelium.com) - Geeky wallet, easy to set miners fee, rich transaction details.
* [Samourai](https://samouraiwallet.com/) - Secure Bitcoin wallet for Android.
* [WalletList](https://walletlist.me) - Showcase your public cryptocurrency addresses.
* [WalletGenerator.net](https://walletgenerator.net) - Universal JavaScript client-side wallet generator for 100+ coins.

# Altfolio
* [Blockfolio](https://blockfolio.com/) - Cryptocurrency management, with easy to use tools to keep track of all your cryptocurrency investments. Nice widgets. Simple. Android/iOS.
* [ACrypto](https://acrypto.io/) - Track bitcoin and altcoins prices, custom alarms, detailed charts. Flexible, many settings, informative. Available for iOS & Android.
* [Altpocket](https://varrock.altpocket.io/) - The only tool you need for showcasing, tracking and sharing your cryptocurrency investments.
* [Coinfyi](https://coin.fyi) - Track your performance, news & market signals related to your cryptocurrency investments. Anonymous. Simple. Free.
* [f0lio](https://f0l.io) - Beatutiful cryptocurrency portfolio management for mobile devices.
* [BitWorth](https://www.bitworth.app/) - Cryptocurrency Net Worth Tracker for iOS.
* [CoinDex](https://itunes.apple.com/us/app/coindex/id1251487103) - iOS app that lets you stay up to date with the cryptocurrency markets you want to watch.
* [Delta](https://delta.app/) - Ultimate cryptocurrency portfolio tracker tool for iOS & Android.
* [Crypto Central](https://cryptocentral.ai) - Bitcoin & cryptocurrency portfolio tracker for iOS/Android.
* [Cryptagon](https://cryptagon.io) - Powerful app to track portfolio. Automatic imports from exchanges.
* [Cryptonomy](https://www.cryptonomynow.com/) - Portfolio tracking, social, forum, chat, ico listings, news aggregator, crypto academy. Android/iOS.
* [wallmine](https://wallmine.com/stocks-and-cryptocurrency-portfolio-tracker) - Track both cryptocurrencies and stocks; screeners, heatmaps, news, push notifications.
* [CoinTracker](https://www.cointracker.io) - Cryptocurrency asset tracker that automatically pulls all balances and transactions from exchanges and cryptocurrency wallets.
* [Coin Beat](http://www.coinbeatapp.com/) - Crypto tracker for managing over 1300 crypto currencies. Get instant push notification on price activity. iOS and Android.

# Useful Tools
* [QR Code Generator](https://bitcoinqrcodegenerator.win/) - With this free tool you can instantly generate QR code for your Bitcoin/Litecoin/Ethereum/Dogecoin address.
* [Block Explorer](https://tradeblock.com/bitcoin/) - Discover the Bitcoin blockchain blocks online. Includes fees and miners information.
* [EtherScan](https://etherscan.io) - Block Explorer and Analytics Platform for Ethereum.
* [ETH Gas Station](https://ethgasstation.info) - Consumer oriented metrics for the Ethereum Gas Market.
* [Metamask](https://metamask.io/) - Run Ethereum dApps right in your browser without running full node.
* [ATM Map](https://bitcoinatmmap.com/) - Find Bitcoin ATM’s in your country.
* [Statoshi](https://statoshi.info) - Realtime Bitcoin node stats. Made by Jameson Lopp.
* [RSIhunter](https://rsihunter.com/) - Find ""oversold"" and ""overbought"" cryptocurrencies.
* [CryptoFinance](https://cryptofinance.ai/) - Google Sheets add-on to get cryptocurrencies rate in spreadsheets.
* [Vanitygen Plus](https://github.com/exploitagency/vanitygen-plus) - Generate custom key addresses for 90+ coins.
* [CoinPop.me](https://coinpop.me/) - Create shareable page for all your cryptocurrency donation addresses.
* [If You Had Bought Crypto](https://ifyouhadboughtcrypto.com) - How rich would you be if you had invested in your favourite Cryptocurrency?
* [Vaulty.io](https://vaulty.io) - Accept any cryptocurrency for your website, blog, or for general personal use with just one link.
* [Bitcoin Flip Trading simulator](https://bitcoinflip.app/) - 101% realistic and fun crypto trading Simulator for Beginners!
* [QWallet](https://qwallet.io/) - Search & view the value of any Ethereum wallet, create your own token portfolio.
* [Ethplorer](https://ethplorer.io) - Block explorer and analytics platform for Ethereum.
* [EtherChain](https://etherchain.org) - Ethereum Blockchain Explorer.
* [Trivial.co](https://trivial.co) - Network explorer and analytics platform for Ethereum and ERC-20 tokens.
* [HappyDApps](https://happydapps.net) - Web 3.0 browser compatibility check.

# Video
## YouTube Channels
* [The Cryptoverse](https://www.youtube.com/channel/UCLnQ34ZBSjy2JQjeRudFEDw) - Your cryptocurrency news dose.
* [World Crypto Network](https://www.youtube.com/user/WorldCryptoNetwork) - Informative news digests.
* [Crypt0](https://www.youtube.com/user/obham001) - Omar is one of the most popular crypto bloggers. He creates fascinating interviews.
* [Ameer Rosic](https://www.youtube.com/user/AmeerRosic) - News, interviews, podcasts and reviews.
* [aantonop](https://www.youtube.com/user/aantonop/) - Presentations, discussions, QA by Andreas, the author of ""Mastering Bitcoin"".
* [CoinSummit](https://www.youtube.com/channel/UCr4QRCZDXrCecaV2w4nuLeQ/) - CoinSummit records: startups showcases, discussions and presentations.
* [BitcoinFilm](https://www.youtube.com/channel/UC42Y8ajCzQ_rjS_wVTamglQ) - Short films about people using Bitcoin.
* [Bitcoin and Cryptocurrency Course](https://www.youtube.com/channel/UCNcSSleedtfyDuhBvOQzFzQ/videos) - Bitcoin and Cryptocurrency Technologies course. 12 videos, each 45-90 mins.
* [CryptoPortfolio](https://www.youtube.com/channel/UCI9POyyP-f93JHfkhr2ma2g/) - YouTube channel reviewing ICOs and various cryptocurrencies.
* [CryptoBud](https://www.youtube.com/channel/UCAEktd4wejD_N4aPyDPD3zw) - Technical and fundamental analysis on how to invest in cryptocurrencies.
* [Cryptotips](https://www.youtube.com/cryptotips) - Heidi provides you with insights into projects, ICOs and ecosystem, as well as creating videos for beginners.
* [EtherCasts](https://www.youtube.com/user/EtherCasts) - Ancient Ethereum news, reviews and interviews channel.
* [Bitcoin Playlist](https://www.youtube.com/playlist?list=PL05dEp7goGNiKWYdiE4nurEPFMmF9XpzF) - Great list of 55 Bitcoin talks.
* [Decentralized TV](https://www.youtube.com/channel/UCueLJ4vLHTwMpYILmdBjRlg) - Blockchain, Bitcoin, and Cryptocurrency News, Culture, and Entertainment.
* [Crypto Daily](https://www.youtube.com/channel/UC67AEEecqFEc92nVvcqKdhA/) - Crypto news on (mostly) daily basis.

## Movies
* [Ulterior States](http://www.iamsatoshi.com/) - Real-life conversations with some thought leaders within the Bitcoin ecosystem. The film took 3 years to complete.
* [The Bitcoin Doco](https://vimeo.com/112223859) - Fascinating story focusing on the emergence of new world wide currency.
* [Life Inside Secret Chinese Bitcoin Mine](https://www.youtube.com/watch?v=K8kua5B5K3I) - Interesting story about the miners of the new millenium.

# Learning
## Books
* [Mastering Bitcoin](https://bitcoinbook.info/) - Mostly for developers. The second edition was published in June 2017.
* [The Internet of Money](https://www.amazon.com/Internet-Money-Andreas-M-Antonopoulos/dp/1537000454) - Significance of bitcoin through series of essays spanning the exhilarating maturation of this technology.
* [Ethereum](https://www.amazon.com/Ethereum-Blockchains-Decentralized-Autonomous-Organizations/dp/1523930470) - Non-technical guide to understand blockchains. Mostly focused on Ethereum.
* [The Age of Cryptocurrency](https://www.amazon.com/Age-Cryptocurrency-Blockchain-Challenging-Economic/dp/1250081556) - Insight into the modern financial system and the Bitcoin industry.
* [Programming Cryptocurrencies and Blockchains](http://yukimotopress.github.io/blockchains) - Learn to build your own blockchains and peer-to-peer central bank nodes from scratch.

## Courses
* [Coursera Course](https://www.coursera.org/learn/cryptocurrency) - Telling what is special about Bitcoin and how it works at technical level. Created by Princeton University.
* [Udemy Course](https://www.udemy.com/bitcoin-or-how-i-learned-to-stop-worrying-and-love-crypto) - The definitive guide to understand what the bitcoin is and why we should care about them.
* [Khan's Academy Course](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-what-is-it) - The very basics of how blockchain, Bitcoin and encryption works.
* [Pluralsight Course](https://www.pluralsight.com/courses/bitcoin-decentralized-technology) - Introduction to Bitcoin and decentralized technology for beginners.
* [University of Nicosia MOOC](https://digitalcurrency.unic.ac.cy/free-introductory-mooc/) - University of Nicosia´s free MOOC (Massive Open Online Course) DFIN-511: Introduction to Digital Currencies.

## Other
* [CoinPride Newsletter](https://coinpride.com/) - The most important crypto news and events. One handcrafted email per week.
* [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page) - Technical specifications of the protocol as well as more basic information about how to buy, sell or use bitcoins.
* [Blockchain Demo](https://blockchaindemo.io/) - This interactive demo will guide you through each component of blockchain step-by-step.
* [MyCryptoGuide](https://mycrypto.guide/) - The guide is meant to serve as both easy-to-understand introduction to the world of cryptocurrencies.
* [Bad Bitcoin](https://www.badbitcoin.org) - List of known scams, HYIPs and Ponzi schemes.
* [EthList](https://github.com/Scanate/EthList) - The Crowdsourced Ethereum Reading List.
* [Satoshi Nakamoto WhitePaper](https://bitcoin.org/bitcoin.pdf) - Bitcoin fundamentals described by the creator.
* [Bitcoin Developer Docs](https://bitcoin.org/en/developer-guide) - Detailed information about the Bitcoin protocol and related specifications.
* [Bitcoin Forks](https://mapofcoins.com/bitcoin) - All bitcoin forks visualisation.
* [Coin Demo](https://coindemo.io) - Visual demonstration of how bitcoin transactions work.
* [Rhymes With Fiat](https://www.rhymeswithfiat.com) - Bitcoin webcomic (with educational notes).
* [Whitepaper.io](https://whitepaper.io) - All whitepapers in one place.

# Trading Tools
* [Quadency](https://quadency.com) - Crypto trading and real-time portfolio analytics.

# For Developers
## API
* [Shapeshift](https://docs.shapeshift.io/) - Embed exchange in your app. Trusted by hundreds of apps.
* [Bittrex](https://bittrex.github.io) - Almighty API. You can do anything with it.
* [Poloniex](https://docs.poloniex.com) - The biggest exchange API. PHP and Python wrapper.
* [CryptoWatch](https://cryptowat.ch/docs/api) - Public REST API, providing basic information about all markets on Cryptowatch.
* [Microsoft BaaS](https://azure.microsoft.com/en-in/solutions/blockchain/) - Blockchain as Service (BaaS) from Microsoft Azure.
* [CoinMarketCap](https://coinmarketcap.com/api/) - Powerful JSON API covering 1000+ coins. Limit: 1 request per 6 sec.
* [CoinCap](https://docs.coincap.io/) - Simple and informative. Lots of altcoins. History data. No limits.
* [ChangeNOW](https://changenow.io/api/docs) - Easy integration of the cryptocurrency exchange. Limitless and fast coin swaps free of custody.

## Other
* [Bitpay](https://bitpay.com/) - Use BitPay's retail, ecommerce, billing, and donation tools to accept payments.
* [Gekko](https://github.com/askmike/gekko) - Free and open source trading bot. GUI, CLI, NodeJS, nice docs. 18 exchanges (including Bitfinex, Bitstamp and Poloniex).
* [Zenbot](https://github.com/DeviaVir/zenbot) - Free and open source trading bot. CLI, NodeJS. GDAX, Poloniex, Kraken, Bittrex, Quadriga and Gemini.
* [Web3.js](https://github.com/ethereum/web3.js) - Ethereum JS API. Requires nodejs, npm and running node.
* [OpenZeppelin](https://openzeppelin.org) - OpenZeppelin is open framework of reusable and secure smart contracts in the Solidity language. 1500+ Slack community members.
* [GETH](https://www.ethereum.org/cli) - CLI tools for Ethereum. Python, C++, Go implementations.
* [Embark](https://github.com/iurimatias/embark-framework) - Framework for serverless Decentralized Applications using Ethereum, IPFS and other platforms. JS.
* [Truffle](http://truffleframework.com/) - The most popular framework for Ethereum. JS.
* [Ropsten Ethereum Faucet](http://faucet.bitfwd.xyz/) - Instantly get ether to experiment on the Ropsten testnet.
* [Kovan Ethereum Faucet](https://gitter.im/kovan-testnet) - Instantly get ether to experiment on the Kovan testnet.
* [CCXT](https://github.com/ccxt/ccxt) - JS/Python/PHP library for cryptocurrency trading and e-commerce with support for many exchanges and merchant APIs.
* [QuikNode](https://quiknode.io/) - Cloud-hosted Ethereum nodes for developers and investors.
* [Consensys Academy](https://consensys.net/academy/resources/) - Getting started resources by Consensys.
* [Portis](https://portis.io/) - JavaScript SDK that lets people run your Ethereum DApp in the browser, using the same account on all their devices.

# Podcasts (Updated October, 2019)
* [Epicenter](https://epicenter.tv/) - The Podcast at the Forefront of the Decentralized Technology Revolution.
* [Bitcoin Knowledge](http://www.bitcoin.kn/) - Learn about blockchain and fintech.
* [BlockChannel](https://soundcloud.com/blockchannelshow) - Dedicated to educating the world on the power of blockchain based technologies like Bitcoin, Ethereum, and ZCash.
* [Off The Chain] (https://blockworksgroup.io/off-the-chain-podcast) - Host Anthony “Pomp” Pompliano talks to some of the most respected names in crypto and Wall Street to find out how intelligent investors from the new and old financial system are thinking about digital assets.
* [Unchained: Your No-Hype Resource for All Things Crypto] (https://unchainedpodcast.com) - This weekly, hour-long podcast with host Laura Shin dives deep into the people building the decentralized internet, the details of this technology that could underpin our future, and some of the thorniest topics in crypto, such as regulation, security and privacy.
* [What Grinds My Gears] (https://blockworksgroup.io/what-grinds-my-gears-podcast) - From Meltem Demirors and Jill Carlson, What Grinds My Gears is a podcast about the bizarre and buzzworthy happenings in the world of cryptocurrency. Each week, they delve into one key theme in crypto, and examine this theme through a broader financial, political, and cultural lens
* [What Bitcoin Did] (https://www.whatbitcoindid.com/podcast) - In this podcast you will hear host Peter McCormack speak with crypto traders, miners, venture capitalist, investors, technical developers, CEOs, journalist and other people driving forward the growth of Bitcoin and other cryptocurrencies.
* [Untold Stories with Charlie Shrem] (https://blockworksgroup.io/untold-stories-podcast) - Host Charlie Shrem dives deep into the lives and personal histories of some of crypto’s most influential leaders.
* [Tales From The Crypt] (https://anchor.fm/tales-from-the-crypt) - Tales from the Crypt is a podcast hosted by Marty Bent about Bitcoin. Join Marty, Editor in Chief of ""the best newsletter in crypto"", as he sits down to discuss Bitcoin with interesting people.
* [The Token Daily with Soona Amhaz] (https://blockworksgroup.io/the-token-daily-podcast) - Host soona amhaz sits down with the movers and shakers of the crypto industry to discuss the big ideas they spend their days thinking about. Soona and her guests examine everything from industry trends, to what books they’re reading, to human psychology and investing.
* [The Flippening] (https://blog.nomics.com/category/flippening/) - Flippening is for cryptocurrency investors. Each week host Clay Collins discusses the cryptocurrency economy, new investment strategies for maximizing returns, and stories from the front lines of financial disruption.
* [The Chain Reaction Podcast] (https://fiftyonepercent.podbean.com) - Host Tom Shaughnessy of Delphi Digital converses with the top names in crypto and blockchain.
* [Unconfirmed: Insights and Analysis From the Top Minds in Crypto] (https://unchainedpodcast.com/category/unconfirmed/) - This weekly crypto podcast reveals how the marquee names in crypto are reacting to the week’s top headlines. With host Laura Shin, the guests also discuss what they’re thinking about these days and reveal what they believe is on the horizon in crypto
* [The Unhashed Podcast] (https://www.spreaker.com/show/the-unhashed-podcast-bitcoin-blockchain-) - Unhashed breaks down the latest in Bitcoin news and developments and puts them into terms everyone can understand. Expect to be both entertained and educated about cryptocurrencies and blockchain. 
* [The Scoop] (https://www.theblockcrypto.com/the-scoop-podcast) - The Block’s team, led by Frank Chaparro, draw out the freshest and deepest insights about digital assets from traditional Wall Street, crypto native, Fortune 500 and many other crypto ecosystem leaders. 
* [Base Layer] (https://acrabaselayer.podbean.com) - Base Layer with host David Nage will be providing insights from founders and investors in the base layer of cryptoassets. 
* [Blockchain Innovation: Interviewing The Brightest Minds In Blockchain] (https://blockchain.global/blockchain-innovation/) - Blockchain Innovation is where host Frederick Munawa interviews the brightest minds in Blockchain and cryptocurrency — entrepreneurs, executives, and top academics — to discuss present and future applications of Blockchain Technology. 
* [Blockchain Insider] (https://bi.11fs.com/) - Blockchain Insider, hosted by Simon Taylor and Colin Platt is a dedicated podcast specializing in Bitcoin, Blockchain and distributed ledger technology (DLT). Simon and Colin break down the week’s news with expertise and enthusiasm for the blockchain and digital currency sector.
* [Let’s Talk Crypto] (https://schoolofcrypto.com) - Let’s Talk Crypto with Barry Moore and Tom Galeski breaks it all down in easy to understand terms and helps you “learn and earn” in the age of cryptocurrencies.
* [Blockchain 2025] (https://podcast.bitcoin.com/s9-Blockchain-2025) - Blockchain is a technology that will disrupt nearly every industry. Host Matt Aaron and Blake Moore explore one industry in every episode. 
* [IBM Blockchain Pulse] (https://www.ibm.com/blogs/blockchain/category/podcast) - Host and blockchain-evangelist Matt Hooper engages with the planet’s most dynamic blockchain thought-leaders, explorers and innovators to discover the countless new ways blockchain is leaping from theory to reality: From entertainment to identity, from payments to secure supply-chain transparency.
* [Messari’s Unqualified Opinions] (https://blockworksgroup.io/unqualified-opinions) - Unqualified Opinions is a podcast hosted by Messari’s CEO Ryan Selkis featuring candid, fast-paced interviews with crypto’s top builders and investors.
* [The Bitcoin Podcast Network] (https://thebitcoinpodcast.com/category/podcast) - One of the ‘originals’ and hands-down one of the best sources of information on the crypto market available online today.
* [Crypto Street Podcast] (https://cryptostreetpod.podbean.com) - The Crypto Street Podcast is a cryptocurrency podcast hosted by the three Twitter influencers @K1llerWh4le, @13Prince31 and @CryptoDale. With a lot of humor, they address current market trends mixed with opinion-based discussions on the crypto-ecosystem.
* [Ledger Cast] (https://ledgerstatus.com/topic/ledgercast/) - Ledger Cast covers the cryptocurrency industry, including technical and trading analysis, fundamental analysis, and anything else crypto and blockchain related. The podcast is initiated by Ledger Status (@ledgerstatus) who is known for his in-depth technical analysis of cryptoassets.

# Mining
* [CoinWarz](https://www.coinwarz.com) - Mining profitability calculators. Help choosing perfect coin to mine.
* [WhatToMine?](https://whattomine.com) - Find the most profitable cryptocurrencies to mine.
* [Bitcoin Difficulty](https://bitcoinwisdom.com/bitcoin/difficulty) - Realtime Mining Statistics.
* [Mining pools](https://blockchain.info/pools) - Mining pool hashrate distribution.
* [WhatIsMyHashRate?](http://www.whatismyhashrate.com/) - Measure your browser's hashrate.
* [CoinHive](https://coinhive.com/) - Install JS miner on your website.
* [bfgminer](https://github.com/luke-jr/bfgminer) - Multi-threaded miner for ASICs built in C.

# Games
* [CryptoKitties](https://www.cryptokitties.co/) - Collect, breed and trade rare kitties in one of the world's first blockchain games.

# Sponsors
[<img src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/findbitcoinatm_sponsor_logo.png"">](https://www.findbitcoinatm.com.au/)

[<img height=""70"" src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/crypto_weekly_list.png"">](https://cryptoweekly.co/list/?ref=coinpride)

[<img width=""240"" src=""https://raw.githubusercontent.com/coinpride/CryptoList/master/sponsors/quadency.jpg"">](https://quadency.com/?utm_source=GitHubCL&utm_medium=Sponsorship&utm_campaign=CryptoList)

# Contribute
Found a nice link? Noticed a bug? Feel free to contribute! You are so much welcome! But read the [CONTRIBUTING.md](https://github.com/coinpride/CryptoList/blob/master/CONTRIBUTING.md) first.
# License
<a rel=""license"" href=""https://creativecommons.org/licenses/by-sa/4.0/""><img alt=""Creative Commons License"" style=""border-width:0"" src=""https://licensebuttons.net/l/by-sa/4.0/88x31.png"" /></a><br />This work is licensed under <a rel=""license"" href=""https://creativecommons.org/licenses/by-sa/4.0/"">Creative Commons Attribution-ShareAlike 4.0 International License</a>.
",,,,,,,,,,,,,,,,,,,,,,,0.1846361051,"Summarize: # CryptoList. Curated collection of blockchain &amp; cryptocurrency
links. # Media: Magazines and Blogs. # sponsors: CoinSpeaker, CoinDesk, 99
Bitcoins, The Memory Pool, R3, CoinGape."
2683,A more enjoyable local development experience for Mac.,"<p align=""center""><img src=""/art/logo.svg""></p>

<p align=""center"">
<a href=""https://github.com/laravel/valet/actions?query=workflow%3ATests""><img src=""https://github.com/laravel/valet/workflows/Tests/badge.svg?branch=master"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/laravel/valet""><img src=""https://poser.pugx.org/laravel/valet/d/total.svg"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/laravel/valet""><img src=""https://poser.pugx.org/laravel/valet/v/stable.svg"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/laravel/valet""><img src=""https://poser.pugx.org/laravel/valet/license.svg"" alt=""License""></a>
</p>

## Introduction

Valet is a Laravel development environment for Mac minimalists. No Vagrant, no `/etc/hosts` file. You can even share your sites publicly using local tunnels. _Yeah, we like it too._

Laravel Valet configures your Mac to always run Nginx in the background when your machine starts. Then, using [DnsMasq](https://en.wikipedia.org/wiki/Dnsmasq), Valet proxies all requests on the `*.test` domain to point to sites installed on your local machine.

In other words, a blazing fast Laravel development environment that uses roughly 7mb of RAM. Valet isn't a complete replacement for Vagrant or Homestead, but provides a great alternative if you want flexible basics, prefer extreme speed, or are working on a machine with a limited amount of RAM.

## Official Documentation

Documentation for Valet can be found on the [Laravel website](https://laravel.com/docs/valet).

## Contributing

Thank you for considering contributing to Valet! You can read the contribution guide [here](.github/CONTRIBUTING.md).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

Please review [our security policy](https://github.com/laravel/valet/security/policy) on how to report security vulnerabilities.

## License

Laravel Valet is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
",,,,,,,,,,,,,,,,,,,,,,,0.8568201153,"Valet is a Laravel development environment for Mac minimalists. No Vagrant, no
`/etc/hosts` file. You can even share your sites publicly using local tunnels.
Valet isn't a complete replacement for Vagrant or Homestead, but provides a
great alternative if you want flexible basics, prefer extreme speed, or are
working on a machine with a limited amount of RAM. It is open-sourced software
licensed under the [MIT license](https://opensource.org/licenses/MIT)."
1452,React.js Google Maps integration component,"# react-google-maps
> React.js Google Maps integration component

[![Version][npm-image]][npm-url] [![Travis CI][travis-image]][travis-url] [![Quality][codeclimate-image]][codeclimate-url] [![Coverage][codeclimate-coverage-image]][codeclimate-coverage-url] [![Dependencies][gemnasium-image]][gemnasium-url] [![Gitter][gitter-image]][gitter-url]


## [Introduction](https://tomchentw.github.io/react-google-maps/#introduction)


## [Installation](https://tomchentw.github.io/react-google-maps/#installation)


## [Usage & Configuration](https://tomchentw.github.io/react-google-maps/#usage--configuration)


## [Changelog][changelog-url]

The changelog is automatically generated via [standard-version][standard-version] and can be found in project root as well as npm tarball.


## [Demo App][demo-app-url]

* [Source code][demo-app-source]
* [CodeSandbox](https://codesandbox.io/s/2xyw6n4o9y)

## Getting Help

**Before doing this, did you**:

1. Read the [documentation](https://tomchentw.github.io/react-google-maps)
2. Read the [source code](https://github.com/tomchentw/react-google-maps)


_You can get someone's help in three ways_:

1. Ask on StackOverflow [with a google-maps tag](https://stackoverflow.com/questions/tagged/google-maps?sort=votes&pageSize=50) or [use react-google-maps as a keyword](https://stackoverflow.com/search?q=react-google-maps)
2. Ask in [the chat room][gitter-url]
3. Create a Pull Request with your solutions to your problem

Please, be noted, **no one**, I mean, **no one**, is obligated to help you in **ANY** means. Your time is valuable, so does our contributors. Don't waste our time posting questions like “how do I do X with React-Google-Maps” and “my code doesn't work”. This is not the primary purpose of the issue tracker. Don't abuse.


## For contributors

<details>
  <summary>Some simple guidelines</summary>

* **Don't** manually modify `lib` folder. They're generated during `yarn release` process
* Follow [conventional-commits-specification][conventional-commits-specification]
* [standard-version][standard-version]
* Auto generated: `src/macros` -> `src/components` -> `lib/components`
* Other components are manually maintained
* Use `yarn` and keep `yarn.lock` updated in PR
* Discuss! Discuss! Discuss!

</details>


[npm-image]: https://img.shields.io/npm/v/react-google-maps.svg?style=flat-square
[npm-url]: https://www.npmjs.org/package/react-google-maps

[travis-image]: https://img.shields.io/travis/tomchentw/react-google-maps.svg?style=flat-square
[travis-url]: https://travis-ci.org/tomchentw/react-google-maps
[codeclimate-image]: https://img.shields.io/codeclimate/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[codeclimate-coverage-image]: https://img.shields.io/codeclimate/coverage/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-coverage-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[gemnasium-image]: https://img.shields.io/gemnasium/tomchentw/react-google-maps.svg?style=flat-square
[gemnasium-url]: https://gemnasium.com/tomchentw/react-google-maps
[gitter-image]: https://badges.gitter.im/Join%20Chat.svg
[gitter-url]: https://gitter.im/tomchentw/react-google-maps?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

[changelog-url]: https://github.com/tomchentw/react-google-maps/blob/master/CHANGELOG.md
[demo-app-url]: https://tomchentw.github.io/#/demos/react-google-maps
[demo-app-source]: https://github.com/tomchentw/tomchentw.github.io/blob/master/src/Pages/Demos/ReactGoogleMaps.jsx

[standard-version]: https://github.com/conventional-changelog/standard-version
[conventional-commits-specification]: https://conventionalcommits.org/
",,,,,,,,,,,,,,,,,,,,,,,0.3593290442,"React-Google-Maps is a React.js Google Maps integration component. There are
three ways to get help with the project. The changelog is automatically
generated via [standard-version] and can be found in project root as well as npm
tarball."
1347,🎉 A list of awesome things related to Quasar,"![Quasar Framework logo](https://cdn.quasar.dev/logo/svg/quasar-logo-awesome.svg)


## Awesome Quasar [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

> A list of awesome things related to Quasar

- [Resources](#resources)
    - [Official Resources](#official-resources)
    - [External Resources](#external-resources)
    - [Official Community](#official-community)
    - [Local Communities](#local-communities)
    - [Tutorials](#tutorials)
      - [Video Tutorials](#video-tutorials)
      - [Articles](#articles)
- [Community App Extensions](#community-app-extensions)
- [Other Community Components and Tools](#other-community-components-and-tools)
- [Projects Using Quasar](#projects-using-quasar)

# Resources

### Official Resources

- [Official Documentation](https://quasar.dev)
- [Quasar GitHub Repo](https://github.com/quasarframework/quasar)
- [Quasar Release Notes](https://github.com/quasarframework/quasar/releases)
- [Official Blog](https://blog.quasar.dev/)
- [Official Video Tutorials](https://quasar.dev/video-tutorials)

### External Resources
> These resources have not been created by Quasar Team, nor do we maintain them or financially benefit from them.

- Video tutorial @Udemy on ""Quasar Framework: Cross-Platform VueJS Vuex & Firebase Apps"": [https://dannys.link/quasar](https://dannys.link/quasar)
- Video tutorial @Udemy on ""Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex)"": [https://www.udemy.com/vuejs-2-the-complete-guide/](https://www.udemy.com/vuejs-2-the-complete-guide/)

### Official Community

- [Official Facebook](https://www.facebook.com/QuasarFramework)
- [Official Twitter](https://twitter.com/quasarframework)
- [Official Chat Room - Discord](https://chat.quasar.dev)
- [Official Forum](https://forum.quasar.dev/)

### Local Communities
> These communities are not maintained by Quasar Team.

- [Quasar Brazil - Telegram Channel](https://t.me/quasarframeworkbrasil) - *Similar with #brazil channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Russia - Telegram Channel](https://t.me/quasar_ru) - *Similar with #russkiy channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Spain - Telegram Channel](https://t.me/quasarframework_es) - *Similar with #spanish channel at [Official Discord](https://chat.quasar.dev)*

### Tutorials

#### Video Tutorials

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [YouTube](https://www.youtube.com/playlist?list=PLBjvYfV_TvwJlOctQ49KiOrxrFwJGqAdr)| Introduction to the Quasar Framework | v0.17.18 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=iml3hDVboHk&t=287s)| Quasar Framework: Create a Vue js app & deploy to web, mobile app & desktop app in 30 minutes! | v0.17.20 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0&index=1)| Quasar Framework V1 Course Preview: Create a Real-World, Cross-Platform App | v1.0.0-beta.19 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) | [YouTube](https://www.youtube.com/watch?v=wTaV4qXyzOg) | Building a multiplatform application with Quasar Framework. (pt-br) | v1.0.5 |
| [Program With Eric](https://www.youtube.com/channel/UCshZ3rdoCLjDYuTR_RBubzw) | [YouTube serie](https://www.youtube.com/watch?v=C-v262YhYvw&list=PL-lxoPS_1OXXBGVdJuBkjCn3qZPYeyoYD) | Quasar Vue.js Tutorial | |
| [Tobias Mesquita](https://dev.to/tobymosque) | [Medium](https://dev.to/quasar/quasar-ssr-using-cookies-with-other-libs-services-4nkl) | Quasar - SSR and using cookies ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube](https://www.youtube.com/watch?v=fj1yog9KB3Q&list=PLAiDzIdBfy8gw5EKbHpNRYBZlpN4yQT4o) | Quasar Framework: Icons & Splashscreens for Web, iOS, Android, Mac & WIndows apps Instantly! ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0) | Quasar Framework: Vue.js Cross Platform App ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=Kfg789g_UTg&list=PLAiDzIdBfy8iZTjdu3mjNglucWadtLG1v) |Quasar Framework: Vue.js Chat App - with Vuex & Firebase (for Web, Mobile & Desktop) ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=JucCBZfeKqM&list=PLAiDzIdBfy8jwqO1vJkWvBWFA0dwD7K_O) | Quasar Framework: Animated Winner Picker App! ||
| [Andre Madarang](https://www.youtube.com/channel/UCtb40EQj2inp8zuaQlLx3iQ) | [YouTube](https://www.youtube.com/watch?v=Ud8jS3VlVHw) | Quasar Framework for Vue.js ||
| [codeguru](https://www.youtube.com/channel/UCyNpa6WDH4i2lEznoju1lMg) | [YouTube serie](https://www.youtube.com/watch?v=qxn7VdC8iCI&list=PLAl8os33KyOVpzfYznpguV_5euzKJ626V) | Quasar framework - Building production web app using GraphQL, AWS Amplify, and Quasar ||
| [Impeccable Ninja](https://www.youtube.com/channel/UC9Vn7Ye-wJmH97IqPHIcSig) | [YouTube](https://www.youtube.com/watch?v=GVOsLNgS2Gg&feature=youtu.be) | Sign and align Cordova apps created with Vue and Quasar ||
| [Patrick Monteiro](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | [YouTube serie](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | Quasar Framwork 1.0 course(pt-br) | v1.x |

Do not forget to watch official [video tutorials](https://quasar.dev/video-tutorials).

#### Articles

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [hawkeye64](https://github.com/hawkeye64) | [Medium](https://medium.com/quasar-framework/building-an-electron-file-explorer-with-quasar-and-vue-7bf94f1bbf6), [github](https://github.com/hawkeye64/electron-quasar-file-explorer) | Building an Electron File Explorer with Quasar (and Vue) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Article](http://viladosilicio.com.br/testes-e2e-com-cypress-no-quasar-framework)| E2E Test with Cypress in the Quasar Framework(pt-br) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) (pt-br) and [William Comnisky](https://github.com/wcomnisky/quasar-hello-auth) (en) | [website (en)](https://wcomnisky.github.io/quasar-hello-auth/) | Quasar Framework with Social Login using Hello.js | v1.0.3 |
| [Navicstein Rotciv](https://dev.to/navicsteinr) | [dev.to](https://dev.to/navicsteinr/deploying-an-app-from-gitlab-to-heroku-using-the-quasar-framework-and-sailsjs-3d00) | Deploying an app from Gitlab to Heroku using the Quasar framework and Sailsjs ||
| [Jeff Galbraith](https://dev.to/hawkeye64) | [dev.to](https://dev.to/quasar/publish-your-quasar-spa-on-github-io-with-history-mode-20h2) | Publish your Quasar SPA on Github.io with History Mode ||
| [Xkonti](https://xkonti.tech) | [Article](https://xkonti.tech/blog/quasar-framework-with-typescript/), [dev.to](https://dev.to/xkonti/creating-quasar-framework-project-with-typescript-support-m9b) | Creating Quasar Framework project with Typescript support ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-4ffecaf33933) | Adding Charts in Quasar ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-using-umd-unified-module-definition-fc2015648b3a) | Adding Charts in Quasar using UMD (Unified Module Definition) ||
| [nothingismagick](https://dev.to/nothingismagick) | [Medium](https://dev.to/tauri/use-sass-variables-in-javascript-583o) | Use Sass Variables in Javascript  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/12097067.html) | Quasar BEX preview guide (Chinese)  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/11980595.html) | Deploy Quasar SSR combine with pm2 and Nginx for proxy (Chinese)  ||
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-embedded-google-maps-to-your-application-432605cdbeac) | Add Embedded Google Maps to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-recurring-rules-for-calendar-dates-to-your-application-401e39b56b2f) | Add Recurring Rules for Calendar Dates to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-dynamic-forms-to-your-vue-app-609de4005a2b) | Add Dynamic Forms to Your Vue App | ^1.13.0 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Medium](https://medium.com/building-kovi/criando-um-pwa-com-framework-vue-js-e-quasar-6b7e1fbc743d) | Criando um PWA com Vue.js e Quasar(pt-br) | v1.x |
| [Joel Olawanle](https://github.com/olawanlejoel) | [Smashing Magazine](https://www.smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/) | An Introduction To Quasar Framework: Building Cross-Platform Applications ||

Do not forget to read the official [blog](https://blog.quasar.dev/).

# Community App Extensions

| Name | Description |
| --- | --- |
| [qmodeltd](https://www.npmjs.com/package/quasar-app-extension-qmodeltd) | QModelTd is an UI app extension for Quasar that simplifies the usage of editable or selectable QTd |
| [remote-dev-tools](https://github.com/bloodf/quasar-remote-dev-tools) | Vue remote devtools for Cordova and Electron apps made with Quasar |
| [alpaca-forms](https://github.com/221B-io/quasar-alpaca-form-builder#readme) | Alpaca form builder built for Quasar |
| [draggable](https://github.com/mesqueeb/quasar-app-extension-draggable) | A Quasar extension that makes elements draggable and movable with keyboard. |
| [swipe-to-close](https://github.com/mesqueeb/quasar-app-extension-swipe-to-close/) | A Quasar Framework app extension that allows you to close dialogs by swiping. |
| [qdatetimepicker](https://github.com/TobyMosque/app-extension-qdatetimepicker#readme) | QDatetimePicker for Quasar |
| [qribbon](https://github.com/webnoob/app-extension-qribbon) | Customisable ribbons with a component builder. Allows ribbons at the top, corners, bottom etc. |
| [http-authentication](https://github.com/stefanvanherwijnen/quasar-app-extension-http-authentication) | HTTP authentication using the Vuex store with basic login, registration and password reset pages. |
| [system-environment-variables](https://github.com/marcorivm/quasar-app-extension-system-environment-variables) | Loading of system environment variables for deploying on CI environment. |
| [easy-forms](https://quasar-easy-forms.web.app) | A component to easily generate (Quasar) forms by only defining a ""schema"" object. |
| [easy-tables](https://quasar-easy-tables.web.app) | A component to easily generate (Quasar) tables by only defining a ""schema"" object. (based on the same schema as `easy-forms`) |
| [vuelidate-rules](https://github.com/cuatromedios/quasar-app-extension-vuelidate-rules) | A Quasar Framework app extension that allows you to use [Vuelidate](https://vuelidate.js.org/) methods as **internal** Quasar rules in fields of a form |
| [QGrid](https://github.com/pratik227/quasar-qgrid) | QGrid is a Quasar App Extension. It allows you to filter data for each column, Drag and Drop Rows and also allows you to filter data using header filters. |
| [QHierarchy](https://github.com/pratik227/quasar-qhierarchy) | QHierarchy is a Quasar App Extension. It allows you to display data in hierarchy structure on your page. |
| [QDraggableTree](https://github.com/mayank091193/quasar-draggable-tree) | QDraggableTree is a Quasar Framework app extension that allows you to drag and drop the nodes in the Quasar QTree |
| [APIWrapper](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper) | An out of the box API client that wrap [axios](https://github.com/axios/axios) with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency...|
| Quasar Tiptap | [github](https://github.com/donotebase/quasar-tiptap), [demo](https://donotebase.github.io/quasar-tiptap) | A modern WYSIWYG rich-text editor built on top of tiptap and Quasar Framework for Vue.js. | v1.9.14 |
| [QFilterConfigurator](https://github.com/heartbeatLV/app-extension-q-filter-configurator) | An easy filter viewer | v1.0.7 |
| [QDatePicker](https://github.com/heartbeatLV/app-extension-q-date-picker) | A date selector (single/period) with the comparison functionality | v1.0.0-rc.1 |
| [QsSelect](https://github.com/heartbeatLV/app-extension-qs-select) | A searchable QSelect with which accepts an url | v0.4.2 |
| [QGoogleMap](https://github.com/mayur091193/q-google-map) , [Docs and Examples](https://q-google-map.netlify.app/) | QGoogleMap(q-google-map) - Quasar app extension to integrate Google Maps | v1.13.2 |
| [QWidgets](https://github.com/mayank091193/quasar-widgets) , [Docs and Examples](https://quasar-widgets.netlify.app/#/docs) | QWidgets(q-widgets) - An awesome set of beautiful Widgets made with love using Quasar Framework and Vue.js! | v1.1.0 |
| [QStatistic](https://github.com/Junvary/quasar-app-extension-qstatistic) | QStatistic allows you to display data statistically. |
| [QCascader](https://github.com/Junvary/quasar-app-extension-qcascader) | QCascader can be used to display and select tree structured data. |

# Other Community Components and Tools
> For older Quasar versions or not supplied through a Quasar App Extension

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [github](https://github.com/mayur091193/readme-pro), [demo](https://readmepro.netlify.app/) | An easy and simple way to generate readme written in quasar framework  |  v2.7.7 |
| Quasar Echarts Example | [github](https://github.com/pratik227/quasar-echarts), [demo](https://quasar-echarts-v5.netlify.app/) | Project using Quasar framework and Echarts 📊 📈 📉 |  v1.15.0 |
| Quasar Geolocation Example | [github](https://github.com/tomers/quasar-geolocation-example), [demo](https://quasar-geolocation-example.surge.sh/) | Sample app to demonstrate usage of geolocation with Quasar Framework | v1.9.8 |
| Quasar 3D Model | [github](https://github.com/patrickmonteiro/quasar-3d-model), [demo](http://quasar3d.surge.sh/) | Sample application with a 3D file renderer (.stl, .obj, .json, .dae, .ply, .gltf) | v1.1.2 |
| Quasar Apex Charts | [github](https://github.com/patrickmonteiro/quasar-apexcharts), [demo](https://quasar-apexcharts.surge.sh) | Project using Quasar framework and ApexCharts 📊 📈 📉 | v1.1.2 |
| Quasar Barcode Reader | [github](https://github.com/patrickmonteiro/quasar-barcode-reader), [demo](https://quasar-barcode-reader.surge.sh/#/) | Base code for a code reader application:   EAN, CODE 128, CODE 39, EAN 8, UPC-A, UPC-C, I2of5, 2of5, CODE 93 e CODABAR with QuaggaJS and Quasar Framework(no dependency on cordova) | v1.1.2 |
| Quasar QRCode Reader | [github](https://github.com/patrickmonteiro/quasar-qrcode-reader), [demo](https://quasar-qrcode-reader.surge.sh/#/) | A simple Javascript-only QRCode generator and reader (no dependency on cordova). Great for web and PWA solutions. | v1.0.6 |
| Quasar Speech API | [github](https://github.com/patrickmonteiro/quasar-speech-api), [demo](https://quasarspeechapi.surge.sh/#/) | Example project using Speech Web API to transcribe speech into text and synthesize text into speech. | v1.0.6 |
| QInputEx Component | [github](https://github.com/snowyu/qinputex) | The Advance Input Component for Quasar is used as single-line input box for date, time, password, color, select etc. | v1.0.0-beta.1 |
| Quasar Snippets | [github](https://github.com/Abdelaziz18003/vscode-quasar-snippets), [Marketplace](https://marketplace.visualstudio.com/items?itemName=abdelaziz18003.quasar-snippets) | Quasar components' snippets for VSCode that can increase your productivity working on Quasar projects. | v0.17.x |
| Quasar Steem Beneficiaries | [github](https://github.com/irelandscape/qv-steem-beneficiaries)<br/>[npm](https://www.npmjs.com/package/qv-steem-beneficiaries) | A Quasar/Vue component for easily adding beneficiaries support to your Steem dapp. | v0.17.16 |
| Quasar calendar | [github](https://github.com/stormseed/quasar-calendar) | A full calendar display in multiple formats that accepts event data and display it in month, week, multi-day, single day and agenda views | v0.15.6 |
| Laqu-l | [github](https://github.com/laqul/laqul/) | A complete starter kit that allows you create amazing apps that look native thanks to the Quasar Framework. Powered by an API developed in Laravel Framework using the easy GraphQL queries language. And ready to use the Google Firebase features. | v0.15.10 |
| Quasar Cloud | [github](https://github.com/mstaack/quasar-cloud-demo) | An online file manager project (like dropbox) showing usage of axios, vuex, validation, authentication | v0.15.10 |
| Quasar Oh-my-zsh | [github](https://github.com/sajt/oh-my-zsh) | A plugin for Oh-my-zsh | v1.0.0 |
| APIWrapper | [github](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper), [npm](https://www.npmjs.com/package/api-client-wrapper) | A package designed to wrap up the most common features of an api client implementation, with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency... | v1 |
| Quasar DevOps | [github](https://github.com/Qoyyuum/quasar-devops) | A repo dedicated to CI/CD for Quasar Framework | v1 |
| Starter kit | [github](https://github.com/MilosPaunovic/quasar-v1-starter) | Starter kit for quickly lifting your project from the ground up; includes public pages (Login, Register, Reset Password) with Cypress testing setup, Router & VUEX are present with a lot more helpful stuff implemented. | v1 |

# Projects Using Quasar

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [Github](https://github.com/mayur091193/readme-pro), [Website](https://readmepro.netlify.app/) | Readme Pro is an open-source readme and github profile generator written in Quasar Framework | v2.7.7 |
| Quasar Admin Premium  | [website](https://quasar-admin-premium.netlify.app/) | Beautiful premium Quasar admin template for Vue 3 | v2.7.1 |
| Tomatodo  | [github](https://github.com/emingenc/tomatodo),[website](https://tomatodo.web.app/),[android](https://play.google.com/store/apps/details?id=com.emdiapps.tomatodo)  | Pomodoro app that rewards with luck wheel after pomodoro sessions | v2.0.0 |
| GreaterWMS | [github](https://github.com/Singosgu/GreaterWMS),[website](https://production.56yhz.com/#/) | Open Source Warehouse Management System | v2.1.0 |
| Gobazar.uz | [website](https://gobazar.uz) | The first big e-commerce website made with Vue.js/Quasar | v1 |
| Jump Park | [ios](https://apps.apple.com/us/app/jump-park-%D0%BF%D0%B0%D1%80%D0%BA-%D1%81-%D0%B1%D0%B0%D1%82%D1%83%D1%82%D0%B0%D0%BC%D0%B8/id1563315885), [android](https://play.google.com/store/apps/details?id=org.bazumax.jumppark.app) | Take control gym membership for admin, and clients can see info. The first production mobile app using Quasar v2. | v2.0.0-beta.12 |
| Quasar Gaming Template | [github](https://github.com/pratik227/quasar-gaming), [website](https://quasar-gaming.netlify.app/) | Free Quasar Gaming Template based on Vue js and Quasar Framework. | v1.12.12 |
| Kudos - Company profile template | [github](https://github.com/mayank091193/vue-quasar-company-profile-website), [website](https://quasar-company-profile-template.netlify.app/) | Free template for company profile made using Quasar Framework and Vue.js! It is a fully responsive template which you can use for your company or may be for your own portfolio website. | v1.9.15 |
| Expense Tracker | [github](https://github.com/rbretecher/expense-tracker), [website](https://expense-tracker-demo-42250.firebaseapp.com) | A simple application to track expenses and split bills. | v1 |
| Quasar Scrum | [github](https://github.com/mayank091193/quasar-scrum), [website](https://quasar-scrum.netlify.com/) | A Free Quasar Scrum Template : Agile process framework for managing complex tasks | v1.9.12 |
| Quasar Admin | [github](https://github.com/pratik227/quasar-admin), [website](https://quasar-admin-demo.netlify.com/) | A Free and beautiful Quasar Admin template | v1.9.3 |
| Quasar Shopping | [github](https://github.com/mayur091193/quasar-shopping), [website](https://quasar-shopping.netlify.com) | Free and Open source eCommerce UI template written in Vue.js/Quasar | v1.9.3 |
| Quasar CRM Admin | [github](https://github.com/mayank091193/quasar-admin-crm), [website](https://quasar-admin-crm-template.netlify.com/) | A free and beautiful Quasar template for CRM needs. | v1.8.5 |
| Personal website template | [github](https://github.com/mayank091193/mayank-profile), [website](https://mayank-patel.netlify.app/#/) | Free template for personal website | v1.9.15 |
| Quasar Typescript Admin Template| [github](https://github.com/dirkhe1051931999/quasar-typescript-admin-template) | 💫 💫 template for quasar admin with typescript 🌝 🌝 support pwa,electron,spa,Ionic | v0.0.1 |
| Alighieri | [github](https://github.com/zuck/alighieri/), [website](https://zuck.github.io/alighieri) | A distraction-free writer tool | v1.15.4 |
| P.volve | [website](https://my.pvolve.com) | [Video workout subscription](https://my.pvolve.com/preview), [landing pages](https://my.pvolve.com/offer/subway), also includes weight tracking, photo upload, etc. for subscribers | v0.15.9 |
| Brotheld | [android](https://play.google.com/store/apps/details?id=de.sopamo.brotheld), [ios](https://itunes.apple.com/de/app/brotheld/id1193619132?l=de&ls=1&mt=8) | Brotheld (Bread Hero), a german app for hobby bakers | v0.14 |
| MyClinic | [android](https://play.google.com/store/apps/details?id=today.myclinic.mobileapp&hl=en), [ios](https://itunes.apple.com/us/app/myclinic/id1311703491?ls=1&mt=8) | Application for displaying and managing medical clinic examination room status | v0.14 |
| Weacast | [github](https://github.com/weacast/weacast), [website](https://weacast.github.io/weacast-docs/) | Open source platform to gather, expose and make use of weather forecast data | v0.13.10 |
| CryptoPrice | [github](https://github.com/lmfresneda/crypto-price), [android](https://play.google.com/store/apps/details?id=com.es.cryptoprice) | An app to inform us of price (USD & EUR) of the main crypto-coins | v0.14.4 |
| Quran App | [website](https://quran-lite.firebaseapp.com), [android](https://play.google.com/store/apps/details?id=rashidnk.quran) | Quran Lite with English translation | v0.14.4 |
| SHUhelper | [github](https://github.com/shuopensourcecommunity/SHUhelper), [website](https://www.shuhelper.cn)| Open source university online community and toolkits | v0.14.7 |
| 2018 Quarterly Tax Estimator | [android](https://play.google.com/store/apps/details?id=com.codingfriend.quarterlytaxes), [iOS](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1360874746?ls=1&mt=8), [Mac App Store](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1342826706?ls=1&mt=12) | Estimates quarterly taxes and taxes to save per paycheck | v0.14 |
| Go2See | [website](https://m.go2see.ru) | Russian online travel service | v0.14.7 |
| Guitar Workshop | [website](https://guitarworkshop.digital) | E-commerce shop, library, streaming video player, real time chat | v0.15.9 |
| Karrot (Foodsaving Worldwide) | [github](https://github.com/yunity/karrot-frontend), [website](https://karrot.world) | A web-app to support foodsaving groups worldwide, with the goal to save our common resources as much as possible | v1.14.6 |
| onvif-nvt-snapshot-vue-sample | [github](https://github.com/hawkeye64/onvif-nvt-snapshot-vue-sample) | An onvif-nvt (package) sample project for snapshots and PTZ using Vue 2.5 and Quasar 0.14.7 | v0.14.7 |
| Finca Report | [website/android/ios](https://fincareport.com/) | Sistema de informacion para el cultivo de palma africana| v0.15.3 |
| SoFoot | [android](https://play.google.com/store/apps/details?id=com.sofoot), [ios](https://itunes.apple.com/fr/app/so-foot/id591043947?mt=8) | SO FOOT is an iOS & Android mobile football news application, seen differently. With original and offbeat content, the app is based on real time and smart content feed to make it simple and accessible with a scroll. | v0.14.7 |
| PaintTubeTV | [website](https://painttube.tv) | Shop, library, streaming video player, real time chat | v0.15.9 |
| MyBibou | [android](https://play.google.com/store/apps/details?id=io.benovea.mybibou&hl=fr), [ios](https://itunes.apple.com/fr/app/mybibou/id1319283569) | MyBibou is an iOS & Android mobile application that simplifies the life of parents for successful family outings. The app geolocates users on a map and give them relevant information based on their needs and situation. | v0.14.7 |
| Budgex | [pwa](https://budgex-e481b.firebaseapp.com) | Budget and expense tracker | v0.15.1 |
| Booly | [website](https://boolyapp.com/) | A people-matching tool | v0.14.6 |
| Takista | [android](https://play.google.com/store/apps/details?id=io.sergiuneagu.taskista), [github](https://github.com/sergiuwd/Taskista) | To Do Lists Manager | v0.13.4 |
| Blinga! | [website](https://app.blinga.club/), [android](https://play.google.com/store/apps/details?id=club.blinga.app), [ios](https://itunes.apple.com/us/app/blinga/id1219393599?l=pt&ls=1&mt=8) | A points program and guide for selling products and services in cities. | v0.14.0 |
| Charging Stations | [github](https://github.com/nestebe/charging-stations-tracker) | Charging stations viewer hybrid app | v0.14 |
| Carpool 3D | [website](https://carpol.picktype.com/v/truck) | Carpool 3D Truck | v0.14.7 |
| The Amusing Development | [website](https://portfolio-site-78a03.firebaseapp.com) | Portfolio website | v0.14.7 |
| Habot | [github](https://github.com/ghys/habot) | A chatbot for openHAB using machine-learning natural language processing from OpenNLP | v0.14.6 |
| TMdb | [website](https://codingstones.github.io/tmdb-quasar/#/popular_films), [github](https://github.com/codingstones/tmdb-quasar) | Quasar app with The Movie DB catalog | v0.14.7 |
| Take Action | [android](https://play.google.com/store/apps/details?id=com.stephensuess.takeaction), [ios](https://itunes.apple.com/us/app/takeaction-me/id1276844461) | v0.14.5 ||
| Voting Daap | [github](https://github.com/Vishwas1/voting-daap-2017) | E-voting | v0.14 |
| Kanttum | [website](https://app.kanttum.com/) | Teacher training without complication | v0.14.8 |
| Stock Scanner | [github](https://github.com/vikramIde/stock_scan1) | Working Demo of Barcode/QR code scanner using VueJs+Quasar+Cordova | v0.13.4 |
| ShockPro | [ios](https://itunes.apple.com/us/app/shockpro/id1244901518?mt=8) | Maintenance Interval Tracking | v0.12 |
| My Spells | [website](http://myspells.netlify.com/) | 5e Personal Spellbook | v0.13.9 |
| Tigris | [github](https://github.com/jogral/tigris-desktop-ui) | Micro-learning for professionals | v0.13 |
| Pilgrim and Wanderer's Songbook | [android](https://play.google.com/store/apps/details?id=com.maxprog.songbooks), [ios](https://itunes.apple.com/pl/app/%C5%9Bpiewnik-pielgrzyma-w%C4%99drowca/id1364666898?l=pl&mt=8) | Mobile Application Songbooks has been created for one of the biggest Protestant Church. | v0.15.12 |
| dockJob | [github](https://github.com/rmetcalf9/dockJob), [docker hub](https://hub.docker.com/r/metcarob/dockjob/) | Job scheduler with a web UI - designed to run inside a container. | v0.15.5 |
| Your Daily Walk | [website](https://yourdailywalk.com/) | Subscription ecommerce, workout video calendar, streaming video player, real time chat | v0.15.9 |
| Chronocross | [android](https://play.google.com/store/apps/details?id=org.yevlabs.chronocross) | Productivity tool that combines Pomodoro Technique and Eisenhower Matrix. | v0.15.10 |
| Jornal Pelicano | [android](https://play.google.com/store/apps/details?id=com.cordova.jornalpelicano&hl=pt) | Mobile application for a Navy Web Journal | v0.14.1 |
| Vuenote | [github](https://github.com/ExNG/vuenote) | Vuenote is the simplest note app. | v0.15.10 |
| Sifà | [pwa](https://sifapp.com) | Social platform for buyer groups | v0.15.10 |
| Realworld Conduit | [github](https://github.com/geoidesic/realworld-quasar/) | Medium.com clone | v0.15.10 |
| vue-quasar-admin | [website](http://jaycewu.coding.me/vue-quasar-admin),[github](https://github.com/wjkang/vue-quasar-admin) | admin-dashboard | v0.15.14 |
| letsbutterfly(tm) | [pwa](https://app.letsbutterfly.com) | Real estate platform in your pocket. https://letsbutterfly.com | v0.15.10 |
| quasar-documentation++ | [github](https://github.com/slowaways/quasar-documentation-pp) | All-in-one Quasar Documentation | v0.16.0 |
| Dolphin Note | [website](https://www.donote.info) | A Simple and Elegant markdown note application. | v0.15.14 |
| Quicknote | [website](https://quick.donote.info) | A Simple and Elegant markdown quicknote DApp. | v0.15.14 |
| T9N Manager | [website](http://t9n.ist) | Translation manager for developers | v0.16.0 |
| Kicktrack | [website](https://kicktrack.app), [Android](https://play.google.com/store/apps/details?id=kicktrack.app), [iOS](https://itunes.apple.com/us/app/kicktrack/id1397163195?mt=8) | Foosball score keeper | v0.16.0 |
| Musical Data | [website](https://musicaldata.com) | Access Spotify's data of your favorite music. | v0.16.0 |
| Nebide | [website](https://nebide.block2100.com) | Cross-platform Nebulas smart contract IDE. | v0.16.0 |
| Nick Zuccarelli | [website](https://nickzuccarelli.com.au) | A portfolio website for Nick Zuccarelli (a.k.a: me!) | v0.16.0 |
| jQuizzer | [android](https://play.google.com/store/apps/details?id=org.yevlabs.jquizzer) | Simple Java 8 Quiz / Trainer App | v0.16.0 |
| SA Email Builder | [website](https://emailbuilder.top) | Email template builder responsive v10 | v2.0.4 |
| Boid.com | [website](https://www.boid.com) | A blockchain based social computing platform. Homepage and web/electron app are pure Quasar. | v0.16.4 |
| Dappos Ethereum POS | [github](https://github.com/Dappos/Dappos), [website](http://dappos.app) | A Point of Sale (POS) app like Square! For Ethereum payments. Open in a Mobile wallet and receive customer's payments with an intuitive UI. | v0.17 |
| INTI | [website](https://byinti.com) | Online white-label ticketing system with CRM and custom Applications | Latest |
| Fastient | [PWA](https://fastient.com) | A journaling and stats tracking application for extended fasts. | v0.17.10 |
| Squync | [SPA](https://www.squync.com) | Music library. | v0.14 |
| CidadeMOB | [pwa](https://m.cidademob.com.br/), [android](https://play.google.com/store/apps/details?id=br.com.cidademob), [ios](https://itunes.apple.com/br/app/cidademob/id1154262726?l=en&mt=8) | (Brazil) Application that offers services of the city hall for citizens | v0.17.13 |
| GH Follower | [android](https://play.google.com/store/apps/details?id=com.eladcohen.ghfollower) | Simple app to get push notifications on a GitHub repository new release | v0.17.5 |
| Omnia Livestream | [SPA](https://omnia-app.org) | Free & affordable livestream provider for churches and ministries. Livestream to your website, Facebook, and YouTube, worldwide CDN, and Auto-Archiving.  | v0.15.14 |
| Romi | [PWA](https://romionline.com), [Android](https://play.google.com/store/apps/details?id=com.romionline) | eCommerce applications | v0.17.9 |
| Just Go Vote! | [website/PWA](https://justgovote.org), [ios](https://itunes.apple.com/us/app/just-go-vote/id1414331023), [android](https://play.google.com/store/apps/details?id=com.stephensuess.gotv.app) | App makes it easier for people to vote, and encourages them to do so in the upcoming mid-terms. | v0.17.17 |
| StemQ | [stemq.io](https://stemq.io) | Questions and Answers app dedicated to STEM topics and rewarding contributors with [Steem](https://www.steem.com) cryptocurrency. | v0.17.16 |
| Tenpin Toolkit | [iOS](https://itunes.apple.com/app/apple-store/id1390556454?pt=119111623&mt=8), [Android](https://play.google.com/store/apps/details?id=com.tenpintoolkit.app) | App featuring a collection of tools to help tenpin bowlers and coaches develop their skills and improve their games. | v0.17.17 |
| Trainero.com | [website](https://trainero.com), [iOS](https://itunes.apple.com/fi/app/trainerocomtrainerapp/id1439762339), [android](https://play.google.com/store/apps/details?id=com.trainero.app_trainer) | All-in-one App for a Personal Trainer with +35000 users world-wide | v0.17.18 |
| HyperSign | [Youtube](https://www.youtube.com/watch?v=Slhwunm4oT0), [GitHub](https://github.com/vikramIde/hypersign-mobile) | Hypersign is a cryptography based SingleSignOn Solution that enables users to securely access [Web/Blockchain/Federated] applications without providing their access credentials [usernames and passwords]. | v0.13 |
| schild.report | [github](https://github.com/hmt/schild.report), [German article](https://gist.github.com/hmt/391e5614189f9a4df34e0e1e9571bbd3) | This electron app is a report generator that works with schild data (German student administration)| v0.17.18 |
| P4wnP1_aloa | [website](https://github.com/mame82/P4wnP1_aloa) | Pentesting Framework for the Rapsberry Pi Zero W | v0.17.16 |
| CineMatch | [website](https://cine-match.com), [iOS](https://itunes.apple.com/jp/app/cinematch/id1448631386?l=en&mt=8), [android](https://play.google.com/store/apps/details?id=com.lucaban.cinematch) | A list app to organise films, tv shows and make shared watchlists! | v1-beta.15 |
| RankUp | [website](https://rankup.gg) | RankUp is a website that allows you to find teammates on cooperative and competitive video games like Overwatch or Rainbow Six Siege (more to come), build your team, and stay updated about video game news | v0.17.19 |
| Email Snippets | [mac](https://itunes.apple.com/us/app/email-snippets/id1439319487?mt=12), [ios](https://itunes.apple.com/us/app/email-snippets/id1442836840?mt=8) | Replying to the same emails over and over again? Do it in a snip with Email Snippets! Just choose your snippet to copy it to your clipboard, then paste into your Email app. | v0.17.20 |
| Counter Calculator | [ios](https://itunes.apple.com/us/app/counter-calculator-clicker/id1446418542?mt=8) | Need a counter / tally app that also lets you do those difficult calculations? Counter Calculator is the app for you! | v0.17.20 |
| Map Marker Generator | [website](https://map-marker-generator.firebaseapp.com/) | A Free Online Tool To Generate Custom Map Icons On The Fly | v0.17.19 |
| spoonacular | [website](https://spoonacular.com), [Android](https://play.google.com/store/apps/details?id=app.com.spoonacular), [iOS](https://itunes.apple.com/us/app/spoonacular-food-companion/id1406527413) | spoonacular food companion, meal planner, and shopping list | v0.17.20 |
| +Economicas | [Android](https://play.google.com/store/apps/details?id=buromar.maseconomicas), [iOS](https://itunes.apple.com/us/app/economicas/id1415417683) | An unofficial student made app for public univeristy students from the [Faculty of Economic Sciences, University of Buenos Aires, Argentina.](https://www.economicas.uba.ar/) | v0.16.4 |
| +FADU | [Android](https://play.google.com/store/apps/details?id=io.masfadu), [iOS](https://itunes.apple.com/ar/app/fadu/id1358520979) | An unofficial student made app for public univeristy students from the [Faculty of Architecture, Design and Urbanism, University of Buenos Aires, Argentina.](http://www.fadu.uba.ar/) | v0.17.9 |
| Monocle Reader | [website](https://monoclereader.com/) | A modern and elegant RSS Reader. Feedly meets Pocket. | v0.17.23 |
| Blue Moon Camera and Machine | [website](https://bluemooncamera.com/) | Custom E-Commerce with realtime POS system inventory integration via API. | v0.17.22 |
| NotaCL Note-taking like chat messages | [Android](https://play.google.com/store/apps/details?id=com.jaeven.notaclPro) | Note taking with multiple chat rooms with different colors. | 1.0.0-beta.2 |
| Johnson Lai's Portfolio | [pwa](https://wenghan.me?q=github) | Portfolio Website for Johnson Lai. | 1.0.0-beta.11 |
| mempal | [website](https://mempal.io) | An app that helps you to remember everything you read and learn. | v0.17.20 |
| Agency «Day & Night» | [website](http://www.rent-poltava.com.ua/) | Apartment agency. | v1.0.0-beta |
| Kawal Pemilu (PILPRES) | [android](https://play.google.com/store/apps/details?id=org.sholeh.kawalpemilu&rdid=org.sholeh.kawalpemilu) | Election Guard In Indonesia. | v1.0.0-beta.17 |
| Cashier | [app](http://cashier.alensiljak.ml/), [source](https://gitlab.com/alensiljak/cashier) | An app for creating ledger/hledger transactions | 1.0.0.beta24 |
| Exorcism | [github](https://github.com/siamx/exorcism) | Desktop wallpaper manager | 1.0.0-rc.6 |
| SunEngine | [github](https://github.com/sunengine/SunEngine), [website](https://sunengine.site) | CMS+ site engine with blog, articles and forum functionalities. Asp.Net Core on server side. | 1.2.x+ |
| Timesheet | [github](https://github.com/valasek/timesheet), [website](http://timesheet.simplesw.net:8080/) | Self-hosted application to manage project reporting. Golang, Gin used on server. | 1.9.2 |
| Havidea | [website](https://havidea.ru) | Social network for creative people. | 1.0.0-rc.5 |
| Stelace Heroes Platform | [github](https://github.com/stelace/heroes-platform-demo), [website](https://heroes.demo.stelace.com/s) | Open-source template featuring [Stelace platform runner](https://stelace.com) with Quasar UI and super heroes in NYC. | 1.0.0 |
| Gas Station Gamblers: California Scratchers | [Android](https://play.google.com/store/apps/details?id=com.dizyx.scratchermathcalifornia), [website](https://gsg.dizyx.com) | The smartest way to pick a California Scratcher! | 1.0.0-beta26 |
| issue blog | [github](https://github.com/ttop5/issue-blog), [website](https://ttop5.net/issue-blog) | A blog tool powered by GitHub issues.  | 1.0.0 |
| 61 Financial App | [Android](https://play.google.com/store/apps/details?id=au.com.sixonefinancial.app), [iOS](https://apps.apple.com/au/app/61-financial/id1467327628) | A replica of [61 Financial Web App](https://61financial.com.au) | v1 |
| Vugify | [github](https://github.com/Blaconix/vugify), [website](https://vugify.now.sh/) | Convert Vue HTML syntax to Pug. | v1.0.0 |
| Prokarman Free Resume Builder | [Website](https://prokarman.com/resume-builder) | A free resume builder to craft resumes for your dream job | v1 |
| Yawik Application Form | [gitlab](https://gitlab.com/yawik/applicationform), [website](https://form.yawik.org) | Application Form which can be used to apply for job postings | v2 (patched) |
| Yawik Jobwizard | [gitlab](https://gitlab.com/yawik/jobwizard), [website](https://yawik.gitlab.io/jobwizard) | Jobad generator with Google Jobs JSON-LD. Can authenticate against a keycloak | v2.1 (patched) |
| Content Hub | [Website](https://contenthub.cloud) | Spread the word about your business everywhere online and track your impact. | v1 |
| Gistor | [github](https://github.com/mallgroup/mal-gistor), [website](https://gistlike.pro) | Powerful UI for your Gist snippets stored on GitHub. | v1.2.x |
| Privy | [github](https://github.com/Poeticode/Privy), [Android](https://play.google.com/store/apps/details?id=com.silentsilas.pr1vy) | An educational crypto-toolkit that steps through the math for password security, RSA keypair generation, and hashing algorithms. | 1.0.0-beta.17 |
| LandHo | [gitlab](https://gitlab.com/riot.ai/landho), [PWA](https://landho.app) | Securely maintain your own search history across multiple search engines. | 1.0.0 |
| Webby | [gitlab](https://gitlab.com/riot.ai/w3b3), [PWA](https://heywebby.app) | Discover a better internet.  Find and favorite Blockstack dapps | 1.2.1 |
| Neolink | [website](http://poltava.neolink.com.ua/) | Online store. | v1 |
| Growth Journal | [website](https://growthjournal.app), [Android](https://play.google.com/store/apps/details?id=growthjournal.app), Web | Growth Journal: Become a better you. | 1.2.6|
| KetoShare | [Android](https://play.google.com/store/apps/details?id=com.customautosys.ketoshare), [website](https://customautosys.com/ketoshare) | A recipe and eatery sharing app for the Ketogenic dieting community, especially in Singapore. | v1.11.1 |
| Vertical Kit | [PWA](https://www.vertical-kit.com/en/) | Climbing Ropes catalog. Find your perfect rope. | 1.5.4 |
| MicroIoT Studio | [github](https://github.com/MicroIoT/studio), [website](https://www.microiot.top) | MicroIoT Platform web UI management tool | v1.5.0 |
| Simulstore | [website](https://www.simulstore.com) | Simulstore is an Industrial AppStore. Tools for Engineering Calculations and Digital Twin Applications | v1.5.5 |
| Api Doc | [github](https://github.com/joaomede/Api-Doc) | An open source Crud API documenter | v1.5.11 |
| SAM9000 APM | [PWA](https://www.sam9000.com) | Project Management, File Sharing, Document and Email Management AI Powered | v1.5+ |
| Learn music theory with Sonid | [WEB](https://sonid.app), [iOS](https://apps.apple.com/us/app/sonid/id1490221762?ls=1), [Android](https://play.google.com/store/apps/details?id=org.stroopwafel.music.app) | Easily learn music theory in a fun a structured manner! | v1.5+ |
| Quacker | [github](https://github.com/farwish/quacker) | Browser Extension to clean website ADs | v1.0.0+ |
| Poker2win | [github](https://github.com/poker2win), [SPA](https://poker2win.github.io) | Ethereum Dapp poker game for bet, i18n support | v1.6.0+ |
| Dashblocks Template | [github](https://github.com/slanatech/dashblocks-template), [website](https://slanatech.github.io/dashblocks-template) | A Free and Open Source Quasar Material Admin Template focusing on beautiful Dashboards and In-App Analytics | v1 |
| Github Method | [github](https://github.com/cartovarc/github-method), [website](https://github-method.web.app/) | Cool habit tracker based on Github concept | v1 |
| Afterman | [github](https://github.com/itsalb3rt/afterman) | Create beutiful docs in markdown and HTML from postman collection | v1 |
| Offso | [SSR](https://www.offso.com) | Beautiful search application user interface | v1.9.0+ |
| DevHelper | [website](https://tool.offso.com) | Online tool and software helper for dev | v2.0 |
| Fotrino | [github](https://github.com/michaelmolino/fotrino-frontend), [website](https://www.fotrino.com) | Photo gallery | v1.11.1 |
| coin-monitor | [github](https://github.com/coin-monitor), [SPA](https://coin-monitor.github.io) | Cryptocurrency market quant user interface | v1.11.3+ |
| @winwin/hexo-editor | [github](https://github.com/YuJianghao/winwin-hexo-editor), [website](https://yujianghao.github.io/winwin-hexo-editor/) [demo](http://hexoeditor.demo.yujianghao.cn/)| An online editor for Hexo blog. | v1.8.6 |
| The COVID-19 Game | [Android](https://play.google.com/store/apps/details?id=com.customautosys.covidgame), [Website](https://customautosys.com/covidgame), [Snap](https://snapcraft.io/covidgame), [Firefox](https://addons.mozilla.org/en-US/firefox/addon/the-covid-19-game) | Fight the COVID-19 infection with your white blood cells! | v1.11.3 |
| Groovechat.fm | [website](https://groovechat.fm/) | A collaborative listening app for Spotify, alowing several people to listen to a playlist at the same time. | v1.11.3 |
| Custom Automated Systems Pte Ltd website | [Website](https://customautosys.com) | Custom Automated Systems Pte Ltd website | v1.11.3 |
| Basehop Deployments | [Website](https://www.basehop.co.za) | Zero Downtime PHP application deployment | v1.12.0+ |
| Al-Dig (Al-Quran Digital app) | [github](https://github.com/sm-alfariz/aldig) | Al-Quran Digital with Indonesian translation (for now) | v1.0.0+ |
| Qodo | [github](https://github.com/vycoder/qodo) | An open-source productivity app. Demonstrate how and what it's like to build multi-platform apps using Quasar | v1.9.4 |
| Odoo In Vue | [github](https://gitlab.com/sylnsr/odoo-in-vue) | Get up to speed quickly when building a Vue / Quasar app for your Odoo backend | v1.12+ |
| Tabulo | [Website](https://tabulo.app) | The virtual replacement for whiteboards | v1.13.2+ |
| Skinosis App | [PWA](https://app.skinosis.com), [Android](https://play.google.com/store/apps/details?id=com.skinosis.app) | Skinosis is a one-on-one skin diagnosis and cosultaion app | v1.0.0+ |
| Skinosis App Landing Website | [PWA](https://skinosis.com) | Landing website for Skinosis App | v1.0.0+ |
| Whoops Monitor | [PWA](https://github.com/whoopsmonitor/whoopsmonitor) | A monitoring tool that gives you clarity over your application landscape. | v1.0.0 |
| Agile Visitors | [Github](https://github.com/itsalb3rt/agile-visitors),[Web](https://agile-visitors.netlify.app/) | Application for registering employee entries with the possibility of generating reports, validating and storing users with minimal effort. | v1.14.0 |
| Project Management Application | [Web](http://giovannicosenza.free.fr/) | Project Management Application to track billable hours and budget spent across all projects. Automatic margin calculation and chart generation for reporting. | v1 |
| mipa | [Github](https://github.com/collective-change/mipa), [PWA](https://mipa.collective-change.org/) | A strategic coordination app from [collective-change.org](https://collective-change.org/) to help the world achieve sustainablility by 2030. | v1.14.7 |
| Neeto-Vue | [Github](https://github.com/TankNee/Neeto-Vue) | Yet another awesome wiz note client that was built by Quasar Framework and Electron. | v1.15.0 |
| CreateVidio | [github](https://github.com/newflight-co/createvid), [website](https://createvid.io) | Dynamic cloud-based video generation. | v1 |
| Tutlo | [website](https://tutlo.ir) | Tutlo is online learning platform using BigBlueButton. | v1.14.2 |
| OIPIPE | [website](https://oipipe.com/) | Online Wholesale store. | v1.15.4 |
| KeeperRx | [Website](https://www.keeperrx.com), [PWA](https://app.keeperrx.com) | Take control of your medical life!  Create medical profiles for the entire family. | 1.14.7 (as of 20210324) |
| SINTASI | [Website](https://www.sintasi.com), [SPA](https://app.sintasi.com) | Dashboard for Clinic management system. | v1.15.7 |
| Mission | [github](https://github.com/mission-poss), [SPA](https://mission-poss.github.io) | Mission of small games | v1.11.3+ |
| Coloban | [Web/PWA](https://app.coloban.com), [Android](https://play.google.com/store/apps/details?id=org.cordova.coloban.app), [Windows/MacOS](https://www.coloban.com/download) | Collaborative task manager + Messsenger: Chat and calls to teammates, TODOs on the fly during conversation, Kanban, Calendar, Gantt, Eisenhower Offline mode, Multiplatform and many more! | v2|
| Dadadash | [GitHub](https://github.com/daptin/dadadash) | Office suite with file browser, document editor, spreadsheet editor, calendar and data tables with CRUDX API's ready to deploy | v1.0.0 |
| BlogToNFT | [website](https://blogtonft.com/) | BlogToNFT is for all the writers/bloggers who wish to create their own NFT. At BlogToNFT a blogger/writer will have to prove their ownership and after adding details they can easily publish NFT straightaway into the Blockchain which is also visible on opensea | v1.0.0 |
| Hesabdaram | [website](https://landing.hesabdaram.ir) | Hesabdaram is an accounting social network | v2.7.0 |
| Supplier Of Bamachoub | [website](https://supplier.bamachoub.com) | Management panel and seller panel of Bamachob market website | v2.7.5 |
| gin-quasar-admin | [Github](https://github.com/Junvary/gin-quasar-admin), [Website](http://81.68.159.232/) | A full-featured management system based on Quasar2,Vue3,Go,Gin,Gorm. | v2.10.1 |
",,,,,,,,,,,,,,,,,,,,,,,0.2149429729,"Quasar Framework is a free, open-source, cross-platform VueJS, Vuex and Firebase
app framework. Quasar can be downloaded from GitHub or from the official Quasar
website. It can be used to create a web, mobile and desktop app in 30 minutes or
less."
2551,FUSE filesystem for LXC,"# lxcfs

## Introduction
LXCFS is a small FUSE filesystem written with the intention of making Linux
containers feel more like a virtual machine. It started as a side-project of
`LXC` but is useable by any runtime.

LXCFS will take care that the information provided by crucial files in `procfs`
such as:

```
/proc/cpuinfo
/proc/diskstats
/proc/meminfo
/proc/stat
/proc/swaps
/proc/uptime
/proc/slabinfo
/sys/devices/system/cpu/online
```

are container aware such that the values displayed (e.g. in `/proc/uptime`)
really reflect how long the container is running and not how long the host is
running.

Prior to the implementation of cgroup namespaces by Serge Hallyn `LXCFS` also
provided a container aware `cgroupfs` tree. It took care that the container
only had access to cgroups underneath it's own cgroups and thus provided
additional safety. For systems without support for cgroup namespaces `LXCFS`
will still provide this feature but it is mostly considered deprecated.

## Upgrading `LXCFS` without restart

`LXCFS` is split into a shared library (a libtool module, to be precise)
`liblxcfs` and a simple binary `lxcfs`. When upgrading to a newer version of
`LXCFS` the `lxcfs` binary will not be restarted. Instead it will detect that
a new version of the shared library is available and will reload it using
`dlclose(3)` and `dlopen(3)`. This design was chosen so that the fuse main loop
that `LXCFS` uses will not need to be restarted. If it were then all containers
using `LXCFS` would need to be restarted since they would otherwise be left
with broken fuse mounts.

To force a reload of the shared library at the next possible instance simply
send `SIGUSR1` to the pid of the running `LXCFS` process. This can be as simple
as doing:

    rm /usr/lib64/lxcfs/liblxcfs.so # MUST to delete the old library file first
    cp liblxcfs.so /usr/lib64/lxcfs/liblxcfs.so # to place new library file
    kill -s USR1 $(pidof lxcfs) # reload

### musl

To achieve smooth upgrades through shared library reloads `LXCFS` also relies
on the fact that when `dlclose(3)` drops the last reference to the shared
library destructors are run and when `dlopen(3)` is called constructors are
run. While this is true for `glibc` it is not true for `musl` (See the section
[Unloading libraries](https://wiki.musl-libc.org/functional-differences-from-glibc.html).).
So users of `LXCFS` on `musl` are advised to restart `LXCFS` completely and all
containers making use of it.

## Building

In order to build LXCFS install fuse and the fuse development headers according
to your distro. LXCFS prefers `fuse3` but does work with new enough `fuse2`
versions:

    git clone git://github.com/lxc/lxcfs
    cd lxcfs
    meson setup -Dinit-script=systemd --prefix=/usr build/
    meson compile -C build/
    sudo meson install -C build/

To build with sanitizers you have to specify `-Db_sanitize=...` option to `meson setup`.
For example, to enable ASAN and UBSAN:

    meson setup -Dinit-script=systemd --prefix=/usr build/ -Db_sanitize=address,undefined
    meson compile -C build/

## Usage
The recommended command to run lxcfs is:

    sudo mkdir -p /var/lib/lxcfs
    sudo lxcfs /var/lib/lxcfs

A container runtime wishing to use `LXCFS` should then bind mount the
approriate files into the correct places on container startup.

### LXC
In order to use lxcfs with systemd-based containers, you can either use
LXC 1.1 in which case it should work automatically, or otherwise, copy
the `lxc.mount.hook` and `lxc.reboot.hook` files (once built) from this tree to
`/usr/share/lxcfs`, make sure it is executable, then add the
following lines to your container configuration:
```
lxc.mount.auto = cgroup:mixed
lxc.autodev = 1
lxc.kmsg = 0
lxc.include = /usr/share/lxc/config/common.conf.d/00-lxcfs.conf
```

## Using with Docker

```
docker run -it -m 256m --memory-swap 256m \
      -v /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw \
      -v /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw \
      -v /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw \
      -v /var/lib/lxcfs/proc/stat:/proc/stat:rw \
      -v /var/lib/lxcfs/proc/swaps:/proc/swaps:rw \
      -v /var/lib/lxcfs/proc/uptime:/proc/uptime:rw \
      -v /var/lib/lxcfs/proc/slabinfo:/proc/slabinfo:rw \
      -v /var/lib/lxcfs/sys/devices/system/cpu:/sys/devices/system/cpu:rw \
      ubuntu:18.04 /bin/bash
 ```

 In a system with swap enabled, the parameter ""-u"" can be used to set all values in ""meminfo"" that refer to the swap to 0.

 sudo lxcfs -u /var/lib/lxcfs

## Swap handling
If you noticed LXCFS not showing any SWAP in your container despite
having SWAP on your system, please read this section carefully and look
for instructions on how to enable SWAP accounting for your distribution.

Swap cgroup handling on Linux is very confusing and there just isn't a
perfect way for LXCFS to handle it.

Terminology used below:
 - RAM refers to `memory.usage_in_bytes` and `memory.limit_in_bytes`
 - RAM+SWAP refers to `memory.memsw.usage_in_bytes` and `memory.memsw.limit_in_bytes`

The main issues are:
 - SWAP accounting is often opt-in and, requiring a special kernel boot
   time option (`swapaccount=1`) and/or special kernel build options
   (`CONFIG_MEMCG_SWAP`).

 - Both a RAM limit and a RAM+SWAP limit can be set. The delta however
   isn't the available SWAP space as the kernel is still free to SWAP as
   much of the RAM as it feels like. This makes it impossible to render
   a SWAP device size as using the delta between RAM and RAM+SWAP for that
   wouldn't account for the kernel swapping more pages, leading to swap
   usage exceeding swap total.

 - It's impossible to disable SWAP in a given container. The closest
   that can be done is setting swappiness down to 0 which severly limits
   the risk of swapping pages but doesn't eliminate it.

As a result, LXCFS had to make some compromise which go as follow:
 - When SWAP accounting isn't enabled, no SWAP space is reported at all.
   This is simply because there is no way to know the SWAP consumption.
   The container may very much be using some SWAP though, there's just
   no way to know how much of it and showing a SWAP device would require
   some kind of SWAP usage to be reported. Showing the host value would be
   completely wrong, showing a 0 value would be equallty wrong.

 - Because SWAP usage for a given container can exceed the delta between
   RAM and RAM+SWAP, the SWAP size is always reported to be the smaller of
   the RAM+SWAP limit or the host SWAP device itself. This ensures that at no
   point SWAP usage will be allowed to exceed the SWAP size.

 - If the swappiness is set to 0 and there is no SWAP usage, no SWAP is reported.
   However if there is SWAP usage, then a SWAP device of the size of the
   usage (100% full) is reported. This provides adequate reporting of
   the memory consumption while preventing applications from assuming more
   SWAP is available.
",,,,,,,,,,,,,,,,,,,,,,,0.9652464444,"LXCFS is a small FUSE filesystem written with the intention of making Linux
containers feel more like a virtual machine. When upgrading to a newer version
of `LXcFS` the `lxcfs` binary will not be restarted. Instead it will detect that
a new version of the shared library is available and will reload it. LXCFS
prefers `fuse3` but does work with new enough `Fuse2`versions. It can be
upgraded by deleting the old library file first and loading the new one."
643,A middle-to-high level open source algorithm book designed with coding interview at heart!,"
<div align=""center"">
<h1> Hands-on Algorithmic Problem Solving</h1>
<h3> A 100% open source one-stop coding interview prep book! </a> <h3>
<br> DSA · Python · LeetCode · Principles · Problem patterns<br>
</div>

<br>

<div align=""center"">
    <!-- <a target=""_blank"" href=""https://www.liyinscience.com/""><img src=""https://img.shields.io/badge/Subscribe-30K-brightgreen""></a>&nbsp; -->
    <a target=""_blank"" href=""https://github.com/liyin2015/python-coding-interview""><img src=""https://img.shields.io/github/stars/liyin2015/python-coding-interview.svg?style=social&label=Star""></a>&nbsp;
    <a target=""_blank"" href=""https://www.linkedin.com/in/li-yin-00b0456b/""><img src=""https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social""></a>&nbsp;
    <a target=""_blank"" href=""https://twitter.com/liyinscience""><img src=""https://img.shields.io/twitter/url?url=https%3A%2F%2Fshields.io""></a>
    <br>
    🔥&nbsp; Among the <a href=""https://github.com/topics/algorithms-and-data-structures"" target=""_blank"">top DSA</a> repositories on GitHub
</div>

<br>
<hr>

## Contributing
The book is written in latex, and all contents except the code is located under [**Easy-Book** folder](Easy-Book). Feel free to send me  [pull requests](https://github.com/liyin2015/python-coding-interview/pulls) or email (li.yin.gravity@gmail.com) to contribute contents. Before you start to improve the contents, it would be helpful to know the [high-level structure of the book](#about-this-book). Read [How to contribute?](how_to_contribute.md) for more details.

All contributors (with decent amount of contributions) will be listed as authors in the project.

<hr>



## About this book

<p align=""center"">
  <img src=""figures/book_structure.png"" alt=""book_structure"" width=""500"" height=""300"" title=""Figure 1. Four umbrellas:  each row indicates corresponding parts as outlined in this book.""/>
</p>


In short, this is a middle-to-high level algorithm book designed with cracking coding interviews at hearts. It offers a one-stop coding interview prep experience. The structure of the book: 
* **Preparation**: introduce the global picture of algorithmic problem solving and coding interviews, learn abstract data structures and highly related and useful math such as recurrence relation, and hands-on Python practice by relating the abstract data structures to Python data structures. *Coding is not just code after all.*, 
* **Principles**: we organize the design and principle here so that readers can use them as guidance while not seeking for peculiar algorithm for solving a problem. 
* **Classical algorithms**: We enhance our algorithm database via learning how to apply the core principles to a variety of classical problems. A database that we can quickly relate to when seeing problems.
* **Coding interview problem patterns**:  We close our book with the analyzing and categorizing problems by patterns. We address classical and best solutions for each problem pattern. 



Besides trying to make the content easy to follow, here summarizes the uniqueness of this book: (1) it offers Python source code that is tailored to be simple so that it would be natural for you to use in interviews (2) all the exercises and examples are from Leetcode problems so that you get to practise online (3) Classical algorithms are explained with design principles. No algorithm is magic. (Check out [advanced graph algorithms](https://github.com/liyin2015/Hands-on-Algorithmic-Problem-Solving/blob/master/chapters_pdf/chapter_advanced_graph_algorithm.pdf) as an example) (4) problem patterns to help you tackle coding interview questions topic by topic.
<hr>

## How did I come up with this book?
Preparing for the coding interview is not easy! Cracking the coding interview? Nearly impossible for most of us! Luck does play a role in the outcome. So, let's just treat it as a learning process and have some fun!

Computer Science is really not just computer science. It is a combination of all fields; our normal interview problems fall into the enumerative combinatorics and our computer vision mostly consists of Linear Algebra. What really matters is our passion to learn and the ability to apply this knowledge to solve real-life problems. 

There are plenty of books out there focusing on either teaching algorithmic knowledge  (*Introduction to Algorithms*, *Algorithmic Problem Solving*, etc) or introducing the interview process and solving interview problems(*Cracking the Coding Interview*, *Coding Interview Questions*, etc), but none of these books truly combine the two. This is a book designed to make up this role in the categorization. Principle, Pattern, and Leetcode Problems make up the core of this book.

This is **NOT** a book that provides hiring statistics for each company or gives the reader quick tricks in order to pass a few coding interviews.  Its purpose is to show you the beauty of algorithmic problem solving in the hope that you will be more passionate and confident about software engineering; the interview questions just set up a playground where we strengthen what we learn. 
<hr>

## For Readers
[The whole book](Easy-Book/main.pdf) is compiled as pdf.

For readers, you can read the book as a whole or read chapters selectively following the below links. 

## Table of Contents
<hr>

### Warm Up: Abstract Data Structures and Tools
* [Abstract Data Structures](chapters_pdf/Abstract_Data_Structures.pdf)
* Discrete Programming
* Recurrence Relation

### Get Started: Programming and Python Data Structures
* Iteration and Recursion
* Bit Manipulation
* [**Python Data Structures**](chapters_pdf/Python_Data_Structure.pdf)( [source code](Colab_Codes/chapter_python_datastrcutures.ipynb) )

### Core Principles: Algorithm Design and Analysis
* Complexity Analysis
* [Search Strategies](chapters_pdf/search_strategies.pdf)([source code: Graph Search](Colab_Codes/chapter_search_strategies.ipynb), [source code: Tree Traversal](Colab_Codes/chapter_tree_data_structure_and_traversal.ipynb))
* [Combinatorial Search](chapters_pdf/combinatorial_search.pdf)( [source code](Colab_Codes/chapter_combinatorial_search.ipynb))
* Reduce and Conquer

* **Decrease and Conquer**
> * [Binary Search, Binary Search Tree, and Segment Tree](chapters_pdf/decrease_and_conquer.pdf)( [source code](Colab_Codes/chapter_decrease_and_conquer.ipynb))
* [**Sorting and Selection**](chapters_pdf/sorting_algorithms_with_python3.pdf)( source code: [ sorting algorithms](Colab_Codes/chapter_sorting_and_selection_algorithms.ipynb),[ Python comparison and sort functions](Colab_Codes/chapter_python_comparison_sorting.ipynb))
* Dynamic Programming
* Greedy Algorithms

### Advanced Algorithms 
* Advanced Data Structures
* [**Advanced Search on Linear Data Structures**](chapters_pdf/advanced_search_on_linear_data_structures.pdf)( [source code](Colab_Codes/Advanced_Search_on_Linear_Data_Structures.ipynb))
* [Advanced Graph Algorithms](chapters_pdf/chapter_advanced_graph_algorithm.pdf)
* String Pattern Matches
* Math and Geometry Algorithms

### Problem Patterns
* Dynamic Programming Questions (15%)
* Array Questions (15%)
* Linked List, Stack, Queue, and Heap Questions (12%)
* String Questions (15%)
* [Tree Questions (10%)](unorganized_pdf/tree_questions.pdf)
* Graph Questions (15%)

*Note: everything is still in progress, so use it with caution.*
<hr>

## Referring Books and Materials

* Skiena, Steven S. The algorithm design manual: Text. Vol. 1. Springer Science & Business Media, 1998.

* T. H. Cormen, Introduction to algorithms, MIT press, 2009.

* Manber, Udi. Introduction to algorithms: a creative approach. Addison-Wesley Longman Publishing Co., Inc., 1989.

* Kleinberg, Jon, and Eva Tardos. Algorithm design. Pearson Education India, 2006.

* Russell, Stuart J., and Peter Norvig. Artificial intelligence: a modern approach. Malaysia; Pearson Education Limited,, 2016. (**Best book ever in explaining searching problem-solving, differentiate tree-search and graph-search**)

* D. M. Beazley, Python essential reference, Addison-Wesley Professional,2009.

* S. Halim and F. Halim, Competitive Programming 3, Lulu Independent
Publish, 2013.

* B. Slatkin, Effective Python: 59 Specific Ways to Write Better Python,Pearson Education, 2015.

* H. hua jiang, “Leetcode blogs,” https://zxi.mytechroad.com/blog/category, 2018, [Online; accessed 19-July-2018].

* B. Baka, “Python data structures and algorithms: Improve application performance with graphs, stacks, and queues,” 2017.

* “Competitive  Programming,”https://cp-algorithms.com/,  2019, [Online; accessed 19-July-2018].

* “cs  princeton,”https://aofa.cs.princeton.edu/60trees/,  2019,
[Online; accessed 19-July-2018]
* https://stanford-cs161.github.io/winter2021/schedule/
<hr>

## Tools
* Graph Visualize with [graphviz](http://www.webgraphviz.com/). [Examples](https://graphs.grevian.org/example). [Tutorial to use Python](https://graphviz.readthedocs.io/en/stable/manual.html)
<hr>

## Mocking Interviews
Practice is important. Schedule some mocking interviews with [interviewing.io](https://interviewing.io/). If you cant manage to register, you can join us in [discord server](https://discord.gg/ZXnSag7fMP) and ask peers for practice interview.
<hr>

## Community
**Join me on discord server: https://discord.gg/ZXnSag7fMP, for a supportive community**
<hr>

## Feedback
If you have ideas to improve the book, about formatting, more contents, or correct the errors, do not hesitate to let me know. 

<!-- Citation -->
To cite this content, please use:
<hr>
```bibtex
@misc{handsondsa,
    author       = {Li Yin},
    title        = {Hands-on Algorithmic Problem Solving},
    howpublished = {\url{https://github.com/liyin2015/python-coding-interview/}},
    year         = {2021}
}
```
",,,,,,,,,,,,,,,,,,,,,,,0.3898053127,"This is a middle-to-high level algorithm book designed with cracking coding
interviews at hearts. It offers a one-stop coding interview prep experience. The
book is written in latex, and all contents except the code are located under the
Easy-Book folder."
654,All Subjects of 42 School,"# All subjects of 42 School (Paris)

__All these subjects are the exclusive property of 42 School.__<br />
Any reproduction, use outside the school context of 42 or without authorization is prohibited and may be treated as copyright infringement.

__If you want to see corrections files for these projects, go [HERE](https://github.com/Binary-Hackers/42_Corrections).__


## Norme 42
- [Norme 2.0.0](https://github.com/BenjaminSouchet/42_Subjects/blob/master/04_Norme/norme_2_0_0.pdf)
- [Norme 2.0.1](https://github.com/BenjaminSouchet/42_Subjects/blob/master/04_Norme/norme_2_0_1.pdf)

## Projects

### Global
- [42 Commandements (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/42_commandements.pdf)
- [Piscine Reloaded (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/piscine_reloaded.pdf)
- [Libft (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/libft.pdf)
- [Fillit (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/fillit.pdf)
- [Get Next Line (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/00_Global/get_next_line.pdf)

### Unix branch
- [Ft_ls (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_ls.pdf)
- [minishell (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/minishell.pdf)
- [ft_select (Optional Project) (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_select.pdf)
- [21sh (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/21sh.pdf)
- [Taskmaster (Optional Project) (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/taskmaster.pdf)
- [42sh (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/42sh.pdf)
- [Malloc (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/malloc.pdf)
- [ft_script (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_script.pdf)
- [Philosophers (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/philosophers.pdf)
- [Nm-otool (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/nm-otool.pdf)
- [Dr Quine (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/dr_quine.pdf)
- [Famine (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/famine.pdf)
- [LibftASM (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/asm_lib.pdf)
- [Root-me | App-Systeme (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/root_me_app_systeme.pdf)
- [Root-me | Cracking (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/root_me_cracking.pdf)
- [Snow Crash (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/snow_crash.pdf)
- [RainFall (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/Rain-Fall.pdf)
- [strace (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_strace.pdf)
- [GBmu (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/GBmu.pdf)
- [ft_linux (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_linux.pdf)
- [little-penguin-1 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/little_penguin_1.pdf)
- [Process and Memory (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_process_and_mem.pdf)
- [Drivers and Interrupts (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_driver_and_keyboard.pdf)
- [Filesystem (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lk_filesystem.pdf)
- [KFS-1 (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_1.pdf)
- [KFS-2 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_2.pdf)
- [KFS-3 (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_3.pdf)
- [KFS-4 (T3) _NEW_](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/kfs_4.pdf)
- [Woody Woodpacker (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/woody_woodpacker.pdf)
- [ft_p (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_p.pdf)
- [IRC (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_irc.pdf)
- [Matt Daemon (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/Matt_daemon.pdf)
- [Lem-ipc (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/lemipc.pdf)
- [Zappy (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/zappy.pdf)
- [ft_ping (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_ping.pdf)
- [ft_traceroute (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_traceroute.pdf)
- [ft_nmap (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/01_Unix/ft_nmap.pdf)

### Algorithmic branch
- [Ft_printf (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/ft_printf.pdf)
- [Push Swap (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/push_swap.pdf)
- [Filler (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/filler.pdf)
- [Lem_in (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/lem-in.pdf)
- [Mod1 (Optional Project) (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/mod1.pdf)
- [Corewar (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/corewar.pdf)
- [Corewar Championship (Optional Project) (T0)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/corewar-championship.pdf)
- [ComputorV1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/computorv1.pdf)
- [Expert System (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/expertsystem.pdf)
- [N-puzzle (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/npuzzle.pdf)
- [Ft_linear_regression (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/ft_linear_regression.pdf)
- [Rubik (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/rubik.pdf)
- [KrpSim (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/krpsim.pdf)
- [Gomoku (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/02_Algorithmic/gomoku.pdf)

### Graphic branch
- [FDF (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/fdf.pdf)
- [Fract'Ol (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/fract_ol.pdf)
- [Wolf3D (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/wolf3d.pdf)
- [RTv1 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/rtv1.pdf)
- [RT (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/rt.pdf)
- [Scop (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/scop.pdf)
- [42run (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/42run.pdf)
- [HumanGL (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/humangl.pdf)
- [Particle System (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/03_Graphic/ParticleSystem.pdf)

### Web branch
- [Camagru (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/camagru.pdf)
- [Matcha (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/matcha.pdf)
- [Hypertube (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/hypertube.pdf)
- [Friends with Benefits (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/friends_with_benefits.pdf)
- [Red Tetris (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/red_tetris.pdf)
- [Darkly (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/04_Web/darkly.pdf)

### OCaml branch
- [H42N42 (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/subject.pdf)
- [ft_turing (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/ft_turing.pdf)
- [ft_ality (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/05_OCaml/ft_ality.pdf)

### Android / iOS branch
- [Swifty Companion (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/swifty-companion.pdf)
- [Swifty Proteins (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/swifty-protein.pdf)
- [ft_hangouts (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/06_Android-iOS/ft_hangouts.pdf)


### C++ branch
- [Abstract VM (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/abstract-vm.pdf)
- [Nibbler (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/nibbler.pdf)
- [Bomberman (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/07_CPP/bomberman.pdf)

### Unity branch
- [XV (T3)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/08_Unity/XV.pdf)
- [In the Shadows (T2)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/08_Unity/In_the_shadow.pdf)

### Others
- [cloud-1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/cloud-1.pdf)
- [roger-skyline-1 (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/roger-skyline-1.pdf)
- [roger-skyline-2 (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/roger-skyline-2.pdf)
- [Docker (T1)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/docker.pdf)
- [Projet Libre (T4)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/00_Projects/09_Others/ProjetLibre.pdf)

## Piscines

- [C (Languages EN & FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/C)
- [C++ (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/CPP)
- [PHP (T1)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/PHP)
- [Python-Django (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Python-Django)
- [Ocaml (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/OCaml)
- [Ruby On Rails (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Ruby_On_Rails)
- [Swift iOS (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/iOS_Swift)
- [Unity (T2)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/01_Piscines/Unity)

## Rushes

- AlCu (Not Available)
- [Alum1](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/alum1.pdf)
- [Arkanoid](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/arkanoid.pdf)
- [Carnifex (LISP)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/Carniflex.pdf)
- [Cluedo (Prolog)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/cluedo.pdf)
- [Domino](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/Domino.pdf)
- [Factrace](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/factrace.pdf)
- [Hotrace](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/hotrace.pdf)
- [Introduction to iOS](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/sujet_ios.pdf)
- [Introduction to Wordpress](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/wordpress.pdf)
- [LLDB](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/LLDB.pdf)
- [Mexican Standoff](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/mexican_standoff.pdf)
- [Puissance 4](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/puissance4.pdf)
- Rage Against The aPi (Not Available)
- Rush admin sys et réseau 0 (Not Available)
- Rush admin sys et réseau 1 (Not Available)
- [wong_kar_wai (2048)](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/wong_kar_wai_2048.pdf)
- [YASL](https://github.com/BenjaminSouchet/42_Subjects/blob/master/02_Rushes/yasl.pdf)

## Exam C Beginner

- [See all subjects (Langs : EN / FR / RO)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/03_Exam_C)

## Others

- [Peer-Evaluation (Langs : EN / FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/05_Others/Peer-Evaluation)
- [Vogsphere Manual (Langs : EN / FR)](https://github.com/BenjaminSouchet/42_Subjects/tree/master/05_Others/Vogsphere)
",,,,,,,,,,,,,,,,,,,,,,,0.4785517149,"All these subjects are the exclusive property of 42 School. Any reproduction,
use outside the school context of 42 or without authorization is prohibited and
may be treated as copyright infringement. If you want to see corrections files
for these projects, go [HERE](https://github.com/Binary-Hackers/42_Corrections)."
2629,💪  User-generated content for Git-powered websites,"<img src=""logo.png"" width=""300"">

# Staticman [![coverage](https://img.shields.io/badge/coverage-81%25-yellow.svg?style=flat)](https://github.com/eduardoboucas/staticman) [![Build Status](https://travis-ci.org/eduardoboucas/staticman.svg?branch=master)](https://travis-ci.org/eduardoboucas/staticman) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)

> Static sites with superpowers

## Introduction

Staticman is a Node.js application that receives user-generated content and uploads it as data files to a GitHub and/or GitLab repository. In practice, this allows you to have dynamic content (e.g. blog post comments) as part of a fully static website, as long as your site automatically deploys on every push to GitHub and/or GitLab, as seen on [GitHub Pages](https://pages.github.com/), [GitLab Pages](https://about.gitlab.com/product/pages/), [Netlify](http://netlify.com/) and others.

It consists of a small web service that handles the `POST` requests from your forms, runs various forms of validation and manipulation defined by you and finally pushes them to your repository as data files. You can choose to enable moderation, which means files will be pushed to a separate branch and a pull request will be created for your approval, or disable it completely, meaning that files will be pushed to the main branch automatically.

You can download and run the Staticman API on your own infrastructure. The easiest way to get a personal Staticman API instance up and running is to use the free tier of Heroku. If deploying to Heroku you can simply click the button below and enter your config variables directly into Heroku as environment variables.

[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)

## Requirements

- Node.js 8.11.3+
- npm
- A [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) for the GitHub and/or GitLab account you want to run Staticman with
- An RSA key in PEM format

## Setting up the server on your own infrastructure
NOTE: The below steps are not required if deploying to Heroku. To deploy to Heroku, click the above deploy button and enter your configuration variables in the Heroku Dashboard.

- Clone the repository and install the dependencies via npm.

  ```
  git clone git@github.com:eduardoboucas/staticman.git
  cd staticman
  npm install
  ```

- Create a development config file from the sample file.

  ```
  cp config.sample.json config.development.json
  ```

- Edit the newly-created config file with your GitHub and/or GitLab access token, SSH private key and the port to run the server. Click [here](https://staticman.net/docs/api) for the list of available configuration parameters.

- Start the server.

  ```
  npm start
  ```

Each environment, determined by the `NODE_ENV` environment variable, requires its own configuration file. When you're ready to push your Staticman API live, create a `config.production.json` file before deploying.

Check [this guide](docs/docker.md) if you're using Docker.

## Setting up a repository

Staticman runs as a bot using a GitHub and/or GitLab account, as opposed to accessing your account using the traditional OAuth flow. This means that you can give it access to just the repositories you're planning on using it on, instead of exposing all your repositories.

To add Staticman to a repository, you need to add the bot as a collaborator with write access to the repository and ask the bot to accept the invite by firing a `GET` request to this URL:

```
http://your-staticman-url/v2/connect/GITHUB-USERNAME/GITHUB-REPOSITORY
```

## Site configuration

Staticman will look for a config file. For the deprecated `v1` endpoints, this is a  `_config.yml` with a `staticman` property inside; for `v2` endpoints, Staticman looks for a `staticman.yml` file at the root of the repository.

For a list of available configuration parameters, please refer to the [documentation page](https://staticman.net/docs/configuration).

## Development

Would you like to contribute to Staticman? That's great! Here's how:

1. Read the [contributing guidelines](CONTRIBUTING.md)
1. Pull the repository and start hacking
1. Make sure tests are passing by running `npm test`
1. Send a pull request and celebrate

## Useful links

- [Detailed Site and API Setup Guide](https://travisdowns.github.io/blog/2020/02/05/now-with-comments.html)
- [Improving Static Comments with Jekyll & Staticman](https://mademistakes.com/articles/improving-jekyll-static-comments/)
- [Hugo + Staticman: Nested Replies and E-mail Notifications](https://networkhobo.com/2017/12/30/hugo-staticman-nested-replies-and-e-mail-notifications/)
- [Guide on How to Setup Staticman with Gatsby](https://github.com/jovil/gatsby-staticman-example)
",,,,,,,,,,,,,,,,,,,,,,,0.4765511281,"Staticman is a Node.js application that receives user-generated content and
uploads it as data files to a GitHub and/or GitLab repository. You can choose to
enable moderation, which means files will be pushed to a separate branch and a
pull request will be created for your approval. In practice, this allows you to
have dynamic content (e.g. blog post comments) as part of a fully static
website, as long as your site automatically deploys on every push."
2258,Code for some of my articles,"# Tutorials

This repository contains the code for all my articles and videos.

| Name         | Article | Video | Code |
|:---------------:|:--------:|:----------:|:------:|
| Generating text using a Recurrent Neural Network | [Link](https://gilberttanner.com/blog/generating-text-using-a-recurrent-neuralnetwork) | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Keras-Tutorials/4.%20LSTM%20Text%20Generation/Keras%20LSTM%20Text%20Generation.ipynb) |
| Building a book Recommendation System using Keras | [Link](https://gilberttanner.com/blog/building-a-book-recommendation-system-usingkeras) | [Link](https://youtu.be/4vwNkHFuZBk) | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Recommendation%20System/Recommendation%20System.ipynb) |
| Introduction to Web Scraping with BeautifulSoup | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Web%20Scraping%20with%20BeautifulSoup) |
| Scraping Reddit data | [Link](https://gilberttanner.com/blog/scraping-redditdata) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Reddit%20Webscraping%20using%20PRAW) |
| Introduction to Deep Learning with Keras | [Link](https://gilberttanner.com/blog/introduction-to-deep-learning-withkeras) | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Introduction%20to%20Deep%20Learning%20with%C2%A0Keras/Introduction%20to%20Deep%20Learning%20with%20Keras.ipynb) |
| Introduction to Data Visualization in Python | [Link](https://gilberttanner.com/blog/introduction-to-data-visualization-inpython) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Data%20Visualization%20in%C2%A0Python) |
| Live Object Detection with the Tensorflow Object Detection API | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Tensorflow%20Object%20Detection/detect_object_in_webcam_video.ipynb) |
| FastAI Image Classification | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Animal%20detector%20from%20Google%20images.ipynb) |
| FastAI Multi-label image classification | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/%20Multi-label%20prediction%20with%20Planet%20Amazon%20dataset.ipynb) |
| Introduction to Uber’s Ludwig | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Uber%20Ludwig%20Introduction) |
| Productionizing your Machine Learning model | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Deploying%20your%20ML%20Model) |
| Creating a discord sentiment analysis bot using VADER | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Discord%20Sentiment%20Analysis%20Bot) |
| FastAI Image Segmentation | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Image%20segmentation%20on%20CamVid%20dataset.ipynb) |
| Collaborative filtering with FastAI | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Book%20Recommendation%20System.ipynb) |
| FastAI Sentiment Analysis | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Twitter%20US%20Airline%20Sentiment.ipynb) |
| Uber Ludwig Applications | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Uber%20Ludwig%20Examples) |
| Introduction to Ensemble Learning | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/A%20guide%20to%20Ensemble%C2%A0Learning) |
| Introduction to Machine Learning in C# with ML.NET | [Link](https://gilberttanner.com/blog/introduction-to-machine-learning-in-c-with-ml-net) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Machine%20Learning%20in%20C%23%20with%20ML.NET/CreditCardFraudDetection) |
| Turn your data science scripts into websites with Streamlit | [Link](https://gilberttanner.com/blog/turn-your-data-science-script-into-websites-with-streamlit) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Streamlit) |
| Deploying your Streamlit dashboard with Heroku | [Link](https://gilberttanner.com/blog/deploying-your-streamlit-dashboard-with-heroku) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Streamlit/Deploy-Application-with-Heroku) |

## Author
 **Gilbert Tanner**
 
## Support me

<a href=""https://www.buymeacoffee.com/gilberttanner"" target=""_blank""><img src=""https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"" alt=""Buy Me A Coffee"" style=""height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;"" ></a>

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE) file for details
",,,,,,,,,,,,,,,,,,,,,,,0.7367219608,"This repository contains the code for all my articles and videos.summarize: #
Tutorials # Video # Article # Source code:
http://gilberttanner.com/blog/generating-text-using-a-recurrent-neuralnetwork."
401,No root required Android DNS modifier and Hosts/DNSMasq resolver.,"# iTXTech Daedalus

__No root required Android DNS modifier and Hosts/DNSMasq resolver.__

## Installations
* __[Releases](https://github.com/iTXTech/Daedalus/releases)__ - Release signature
* __[Play Test](https://play.google.com/apps/testing/org.itxtech.daedalus)__ - Release signature

[<img alt='Get it on Google Play'
      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'
      height=""80"">](https://play.google.com/store/apps/details?id=org.itxtech.daedalus)
[<img src=""https://fdroid.gitlab.io/artwork/badge/get-it-on.png""
     alt=""Get it on F-Droid""
     height=""80"">](https://f-droid.org/packages/org.itxtech.daedalus)

## Useful links
* __[Telegram](https://t.me/iTXTechDaedalus)__ - Join chat
* __[Wiki](https://github.com/iTXTech/Daedalus/wiki)__ - Pending update

## Introduction

This application creates a VPN tunnel to handle all DNS requests.<br>
<br>
Features:
* No root access required, no ads contained
* Functional under data connection
* A tester for DNS servers
* IPv6 support (including Rules!)
* Custom DNS server
* Custom hosts and DNSMasq configuration
* EXTREME LOW power consume
* Material Design

Supported DNS Query Methods:
* UDP
* TCP 
* DNS over TLS ([RFC7858](https://tools.ietf.org/html/rfc7858))
* DNS over HTTPS ([RFC8484](https://tools.ietf.org/html/rfc8484))
* DNS over HTTPS ([Google JSON](https://developers.google.com/speed/public-dns/docs/dns-over-https))
<br>

__Users must comply with local laws and regulations.__<br>

## DNS Server Providers

* __CuteDNS__ - *Shutdown according to regulations*
* __[FUN DNS](http://fundns.cn)__ - *Shutdown according to regulations*
* __[Pure DNS](https://puredns.cn/)__ - *Shutdown according to regulations*
* __[PdoMo-DNS](https://pdomo.me/)__ - *Shutdown according to regulations*
* __[rubyfish](https://www.rubyfish.cn)__ - *Free DoT/DoH DNS*

## Rule Providers

* __[hosts](https://github.com/googlehosts/hosts)__ by *[googlehosts](https://github.com/googlehosts)* - [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)
* __[yhosts](https://github.com/vokins/yhosts)__ by *[vokins](https://github.com/vokins)* - [CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/)

## Requirements

* Minimum Android version: >= 5.0 (API 21)
* Recommended Android version: >= 7.1 (API 25) - __*Launcher shortcuts*__

## Open Source Licenses

* __[ClearEditText](https://github.com/MrFuFuFu/ClearEditText)__ by *[Yuan Fu](https://github.com/MrFuFuFu)* - [APL 2.0](https://github.com/MrFuFuFu/ClearEditText)
* __[DNS66](https://github.com/julian-klode/dns66)__ by *[Julian Andres Klode](https://github.com/julian-klode)* - [GPLv3](https://github.com/julian-klode/dns66/blob/master/COPYING)
* __[Pcap4J](https://github.com/kaitoy/pcap4j)__ by *[Kaito Yamada](https://github.com/kaitoy)* - [MIT](https://github.com/kaitoy/pcap4j)
* __[MiniDNS](https://github.com/MiniDNS/minidns)__ by *[MiniDNS](https://github.com/MiniDNS)* - [APL 2.0](https://github.com/MiniDNS/minidns/blob/master/LICENCE_APACHE)
* __[Gson](https://github.com/google/gson)__ by *[Google](https://github.com/google)* - [APL 2.0](https://github.com/google/gson/blob/master/LICENSE)
* __[Shadowsocks](https://github.com/shadowsocks/shadowsocks-android)__ by *[Shadowsocks](https://github.com/shadowsocks)* - [GPLv3](https://github.com/shadowsocks/shadowsocks-android/blob/master/LICENSE)

## Credits

* __[JetBrains](https://www.jetbrains.com/)__ - For providing free license for [IntelliJ IDEA](https://www.jetbrains.com/idea/)

## License

    Copyright (C) 2017-2022 iTX Technologies <admin@itxtech.org>
    
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
",,,,,,,,,,,,,,,,,,,,,,,0.0310600248,"This application creates a VPN tunnel to handle all DNS requests. No root access
required, no ads contained. Users must comply with local laws and regulations.
Minimum Android version: 5.0 (API 21) recommended version: 7.1 (API 25) Open
Source Licenses: [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-
sa/4.0/deed.zh) Free Software License: [JetBrains IDEA] (CPLv3) (JPG)"
2719,Gitpod automates the provisioning of ready-to-code development environments.,"<p align=""center"">
  <a href=""https://www.gitpod.io"">
    <img src=""https://raw.githubusercontent.com/gitpod-io/gitpod/master/components/dashboard/src/icons/gitpod.svg"" alt=""Gitpod Logo"" height=""60"" />
    <br />
    <strong>Gitpod</strong>
  </a>
  <br />
  <span>Always ready-to-code.</span>
</p>
<p align=""center"">
  <a href=""https://gitpod.io/from-referrer/"">
    <img src=""https://img.shields.io/badge/Gitpod-ready--to--code-908a85?logo=gitpod"" alt=""Gitpod ready-to-code"" />
  </a>
  <a href=""https://werft.gitpod-dev.com/"">
    <img src=""https://img.shields.io/badge/Werft.dev-CI--builds-green"" alt=""Werft.dev - Gitpod CI"" />
  </a>
  <a href=""https://www.gitpod.io/chat"">
    <img src=""https://img.shields.io/discord/816244985187008514"" alt=""Discord"" />
  </a>
</p>

Gitpod is an open-source Kubernetes application for ready-to-code cloud development environments that spins up fresh, automated dev environments
for each task, in the cloud, in seconds. It enables you to describe your dev environment as code and start instant, remote and cloud development environments directly from your browser or your Desktop IDE.

Tightly integrated with GitLab, GitHub, and Bitbucket, Gitpod automatically and continuously prebuilds dev environments for all your branches. As a result, team members can instantly start coding with fresh, ephemeral, and fully-compiled dev environments - no matter if you are building a new feature, want to fix a bug, or do a code review.

![browser-vscode](https://user-images.githubusercontent.com/22498066/135150975-23bba3a6-f099-48c5-83ed-a1a6627ff0e9.png)

## Features

🏗 [Dev environments as code](https://www.gitpod.io/docs/#-dev-environments-as-code) - Gitpod applies lessons learned from infrastructure-as-code. Spinning up dev environments is easily repeatable and reproducible empowering you to automate, version-control, and share dev environments across your team.

⚡️ [Prebuilt dev environments](https://www.gitpod.io/docs/#prebuilds) - Gitpod continuously prebuilds all your git branches similar to a CI server. Control how Gitpod pre-configures and initializes environments before you even start a workspace through `init` commands in your `.gitpod.yml`.

🐳 [Integrated Docker build](https://www.gitpod.io/docs/config-docker/) - Gitpod instantly starts a container in the cloud based on your Docker image. Tools that are required for your project are easy to install and configure.

👐 [GitLab, GitHub, and Bitbucket integration](https://www.gitpod.io/docs/integrations/) - Gitpod seamlessly integrates into your workflow and works with all major git hosting platforms including GitHub, GitLab and Bitbucket.

👀 [Integrated code reviews](https://www.gitpod.io/docs/context-urls#pullmerge-request-context) - with Gitpod you can do native code reviews on any PR/MR. No need to switch context anymore and clutter your local machine with your colleagues' PR/MR.

👯‍♀️ [Collaboration](https://www.gitpod.io/docs/sharing-and-collaboration/) - invite team members to your dev environment or snapshot any state of your dev environment to share it with your team asynchronously.

🛠 Professional & customizable developer experience - a Gitpod workspace gives you the same capabilities (yes, even [root & docker](https://www.gitpod.io/docs/config-docker#configure-a-custom-dockerfile)) as your Linux machine - pre-configured and optimized for your individual development workflow. Install any [VS Code extension](https://www.gitpod.io/docs/vscode-extensions/) with one click on a user and/or team level.

[Learn more 👉](https://www.gitpod.io/)

## Getting Started

You can start using Gitpod in one or more of the following ways:

1. Quickstart using an [Example Project](https://www.gitpod.io/docs/quickstart) or [OSS Project](https://contribute.dev/)
1. Getting started with [one of your existing projects](https://www.gitpod.io/docs/getting-started)
1. [Use a Prefixed URL](https://www.gitpod.io/docs/getting-started/#prefixed-url)
1. [Install Browser Extension](https://www.gitpod.io/docs/getting-started#browser-extension)
1. [Enable GitLab Integration](https://www.gitpod.io/docs/gitlab-integration#gitlab-integration)

## Documentation

All documentation can be found on https://www.gitpod.io/docs.
For example, see [Introduction](https://www.gitpod.io/docs) and [Getting Started](https://www.gitpod.io/docs/getting-started) sections. 📚

Also check out [**awesome-gitpod**](https://github.com/Gitpod-Samples/awesome-gitpod) ✨

## Questions

For questions and support please use [Discord](https://www.gitpod.io/chat).
Join the conversation, and connect with other community members. 💬

You can also follow [`@gitpod`](https://twitter.com/gitpod) for announcements and updates from our team.

## Issues

The issue tracker is used for tracking **bug reports** and **feature requests** for the Gitpod open source project as well as planning current and future development efforts. 🗺️

You can upvote [popular feature requests](https://github.com/gitpod-io/gitpod/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc) or [create a new one](https://github.com/gitpod-io/gitpod/issues/new?template=feature_request.md).

## Development Process

We work with quarterly roadmaps in autonomous product teams.

-   [Gitpod Architecture](https://www.youtube.com/watch?v=svV-uE0Cdjk)
-   [Product Roadmap](https://github.com/orgs/gitpod-io/projects/27)

### How do GitHub Issues get prioritized?

Most GitHub issues (except smaller or more urgent issues) relate to our [current product roadmap items](https://github.com/orgs/gitpod-io/projects/27). Gitpod teams work against these roadmap items. Each Gitpod team has [its own project board](https://github.com/orgs/gitpod-io/projects) that follows a similar structure. You can find these project boards attached to [the GitHub organization](https://github.com/gitpod-io). Each team board has a ""GroundWork"" tab which shows current GitHub issues in progress. Each team project board also has an ""inbox"" where issues are sent for review by the team (and should be responded to within 48 hours). ""Upvoting"" by [reacting](https://docs.github.com/en/rest/reference/reactions) to GitHub issues helps signal to Gitpod that issues are important to you. If you are unsure of the status of an issue, please comment and a Gitpodder should respond to you shortly. For any other questions, please utilize the [Gitpod community](https://www.gitpod.io/community).

## Related Projects

During the development of Gitpod, we also developed some of our own infrastructure toolings to make development easier and more efficient.
To this end, we've developed a number of open source projects including:

1. [**Werft**](https://github.com/csweichel/werft) - A Kubernetes native CI system
1. [**Leeway**](https://github.com/gitpod-io/leeway) - A heavily caching build system
1. [**Dazzle**](https://github.com/gitpod-io/dazzle/) - An experimental Docker image builder
1. [**OpenVSCode Server**](https://github.com/gitpod-io/openvscode-server) - Run the latest VS Code on a remote machine accessed through a browser

## Code of Conduct

We want to create a welcoming environment for everyone who is interested in contributing to Gitpod or participating in discussions with the Gitpod community.
This project has adopted the [Contributor Covenant Code of Conduct](https://github.com/gitpod-io/.github/blob/main/CODE_OF_CONDUCT.md), [version 2.0](https://www.contributor-covenant.org/version/2/0/code_of_conduct/).
",,,,,,,,,,,,,,,,,,,,,,,0.3671136978,"Gitpod is an open-source Kubernetes application for ready-to-code cloud
development environments. It spins up fresh, automated dev environments for each
task, in the cloud, in seconds. integrated with GitLab, GitHub, and Bitbucket,
Gitpod automatically and continuously prebuilds dev environments."
1244,Bolt is a deep learning library with high performance and heterogeneous flexibility.,"# Introduction
---
[![License: MIT](docs/images/license-mit.png)](https://opensource.org/licenses/MIT)

[Bolt](https://huawei-noah.github.io/bolt/) is a light-weight library for deep learning.
Bolt, as a universal deployment tool for all kinds of neural networks, aims to automate the deployment pipeline and achieve extreme acceleration.
Bolt has been widely deployed and used in many departments of HUAWEI company, such as 2012 Laboratory, CBG and HUAWEI Product Lines.
If you have questions or suggestions, you can submit issue. **QQ群: 833345709**

# Why Bolt is what you need?
---
- **High Performance:** **15%+** faster than existing open source acceleration libraries.
- **Rich Model Conversion:** support Caffe, ONNX, TFLite, Tensorflow.
- **Various Inference Precision:** support FP32, FP16, INT8, 1-BIT.
- **Multiple platforms:** ARM CPU(v7, v8, v8.2+), Mali GPU, Qualcomm GPU, X86 CPU(AVX2, AVX512)
- **Bolt is the first to support NLP and also supports common CV applications.**
- **Minimize ROM/RAM**
- Rich Graph Optimization
- Efficient Thread Affinity Setting
- [Auto Algorithm Tuning](https://zhuanlan.zhihu.com/p/336218879)
- [Time-Series Data Acceleration](docs/USER_HANDBOOK.md#time-series-data-acceleration)

[See more excellent features and details here](https://zhuanlan.zhihu.com/p/317111024)

# Building Status
---
There are some common used platform for inference. More targets can be seen from [scripts/target.sh](scripts/target.sh). Please make a suitable choice depending on your environment. 
If you want to build on-device training module, you can add **--train** option.
If you want to use multi-threads parallel, you can add **--openmp** option.

*Bolt defaultly link static library, This may cause some problem on some platforms. You can use --shared option to link shared library.*

| target platform        | precision          | build command                                        | Linux | Windows | MacOS |
| ---------------------- | ------------------ | ---------------------------------------------------- | ----- | ------- | ----- |
| Android(armv7)         | fp32,int8          | ./install.sh --target=android-armv7                  | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv7) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv7) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv7) |
| Android(armv8)         | fp32,int8          | ./install.sh --target=android-aarch64 --fp16=off     | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(armv8.2+)      | fp32,fp16,int8,bnn | ./install.sh --target=android-aarch64                | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(gpu)           | fp16               | ./install.sh --target=android-aarch64 --gpu          | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-armv8) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-armv8) |
| Android(x86_64)        | fp32,int8          | ./install.sh --target=android-x86_64                 | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-android-x86_64) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-android-x86_64) | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-android-x86_64)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-android-x86_64) |
| iOS(armv7)             | fp32,int8          | ./install.sh --target=ios-armv7                      | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv7)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv7) |
| iOS(armv8)             | fp32,int8          | ./install.sh --target=ios-aarch64 --fp16=off         | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv8) |
| iOS(armv8.2+)          | fp32,fp16,int8,bnn | ./install.sh --target=ios-aarch64                    | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-ios-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-ios-armv8) |
| Linux(armv7)           | fp32,int8          | ./install.sh --target=linux-armv7_blank              | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(armv8)           | fp32,int8          | ./install.sh --target=linux-aarch64_blank --fp16=off | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(armv8.2+)        | fp32,fp16,int8,bnn | ./install.sh --target=linux-aarch64_blank            | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(x86_64)          | fp32,int8          | ./install.sh --target=linux-x86_64                   | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86) | / | / |
| Linux(x86_64_avx2)     | fp32               | ./install.sh --target=linux-x86_64_avx2              | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86-avx2) | / | / |
| Linux(x86_64_avx512)   | fp32,int8          | ./install.sh --target=linux-x86_64_avx512            | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Alinux-x86-avx2) | / | / |
| Windows(x86_64)        | fp32,int8          | ./install.sh --target=windows-x86_64                 | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86) | / |
| Windows(x86_64_avx2)   | fp32               | ./install.sh --target=windows-x86_64_avx2            | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86-avx2) | / |
| Windows(x86_64_avx512) | fp32,int8          | ./install.sh --target=windows-x86_64_avx512          | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/windows-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Awindows-x86-avx2) | / |
| MacOS(armv8.2+)        | fp32,fp16,int8,bnn | ./install.sh --target=macos-aarch64                  | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86) |
| MacOS(x86_64)          | fp32,int8          | ./install.sh --target=macos-x86_64                   | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86) |
| MacOS(x86_64_avx2)     | fp32               | ./install.sh --target=macos-x86_64_avx2              | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86-avx2) |
| MacOS(x86_64_avx512)   | fp32,int8          | ./install.sh --target=macos-x86_64_avx512            | / | / | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/macos-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Amacos-x86-avx2) |
| Train-Linux(x86_avx2) | fp32 | ./install.sh --target=linux-x86_64_avx2 --train | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/training_linux-x86-avx2)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Atraining_linux-x86-avx2) | / | / |
| Train-Android_armv8 | fp32 | ./install.sh --target=android-aarch64 --train | [![Build Status](https://img.shields.io/github/workflow/status/huawei-noah/bolt/training_linux-android-armv8)](https://github.com/huawei-noah/bolt/actions?query=workflow%3Atraining_linux-android-armv8) | / | / |

# Quick Start
---
<div align=center><img src=""docs/images/QuickStart.jpg"" width = 100% height = 100%  style=""border: 1px solid rgba(151,151,151,0.50)"" /></div>
Two steps to get started with bolt.

1. Conversion: use **[X2bolt](model_tools/tools/X2bolt/X2bolt.cpp)** to convert your model from caffe, onnx, tflite or tensorflow to .bolt file;

2. Inference: run **[benchmark](inference/examples/benchmark/benchmark.cpp)** with .bolt and data to get the inference result.

   For more details about the usage of [**X2bolt**](model_tools/tools/X2bolt/X2bolt.cpp) and [**benchmark**](inference/examples/benchmark/benchmark.cpp) tools,  see [docs/USER_HANDBOOK.md](docs/USER_HANDBOOK.md). 

# DL Applications in Bolt

  Here we show some interesting and useful applications in bolt.

| Face Detection | ASR | Semantics Analysis | Image Classification | Reading Comprehension |
| :------: | :------: | :------: | :------: | :------: |
| ![face_detection](docs/images/20_bolt_face_detection.gif) [android](kit/Android/FaceDetection)  [ios](kit/iOS/FaceDetection)  [exe](inference/examples/ultra_face) | ![asr](docs/images/ChineseSpeechRecognition.gif) [android](kit/Android/ChineseSpeechRecognition)    [ios](kit/iOS/ChineseSpeechRecognition) | ![semantics analysis](docs/images/SemanticsAnalysis.gif) [android](kit/Android/Semantics) | ![image_classification](docs/images/ImageClassification.gif) [android](kit/Android/SimpleImageClassification)    [ios](kit/iOS/SimpleImageClassification) | ![reading_comprehension](docs/images/ReadingComprehension.gif) [android](kit/Android/ReadingComprehension) |

# Verified Networks
---
  Bolt has shown its high performance in the inference of common CV and NLP neural networks. Some of the representative networks that we have verified are listed below. You can find detailed benchmark information in [docs/BENCHMARK.md](docs/BENCHMARK.md).

  <table border=""1""  bordercolor=""#00CCCC""  width=""300"">
    <tr>
      <td>
        Application
      </td>
      <td>
        Models
      </td>
    </tr>
    <tr>
      <td>
        CV
      </td>
      <td>
        Resnet50, Shufflenet, Squeezenet, Densenet, Efficientnet, Mobilenet_v1, Mobilenet_v2, Mobilenet_v3,
        <a href=""https://github.com/liuzechun/Bi-Real-net"">BiRealNet</a>,
        <a href=""https://github.com/liuzechun/ReActNet"">ReActNet</a>,
        <a href=""https://github.com/huawei-noah/ghostnet"">Ghostnet</a>,
        <a href=""https://github.com/milesial/Pytorch-UNet"">unet</a>,
        LCNet, Pointnet,
        <a href=""https://github.com/thangtran480/hair-segmentation"">hair-segmentation</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/duc"">duc</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/fcn"">fcn</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/retinanet"">retinanet</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/ssd"">SSD</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn"">Faster-RCNN</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/faster-rcnn"">Mask-RCNN</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov2-coco"">Yolov2</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/tiny-yolov3"">Yolov3</a>,
        <a href=""https://github.com/onnx/models/tree/master/vision/object_detection_segmentation/yolov4"">Yolov4</a>,
        <a href=""https://github.com/ultralytics/yolov5"">Yolov5</a>,
        ViT, TNT ...
      </td>
    </tr>
    <tr>
      <td>
        NLP
      </td>
      <td> Bert, Albert, Tinybert, Neural Machine Translation, Text To Speech(Tactron,Tactron2,FastSpeech+hifigan,melgan), Automatic Speech Recognition, DFSMN, Conformer,
        <a href=""docs/USER_HANDBOOK.md#voice-wake-up"">Tdnn</a>,
        <a href=""https://tfhub.dev/google/lite-model/nonsemantic-speech-benchmark/frill-nofrontend/1"">FRILL</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/t5"">T5</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/gpt-2"">GPT-2</a>,
        <a href=""https://github.com/onnx/models/tree/master/text/machine_comprehension/roberta"">Roberta</a> ...
      </td>
    </tr>
    <tr>
      <td>
        Recommendation
      </td>
      <td>
        MLP
      </td>
    </tr>
    <tr>
      <td>
        More DL Tasks
      </td>
      <td>
        ...
      </td>
    </tr>
  </table>

  More models than these mentioned above are supported, users are encouraged to further explore.

# On-Device Training
---
On-Device Training has come, it's a beta vesion which supports [Lenet](./training/demos/lenet_demo/), [Mobilenet_v1](./training/demos/mobilenet_v1_demo) and [Resnet18](./training/demos/resnet18_demo) for training on the embedded devices and servers. Want more details of on-device training in bolt? Get with the official training [tutorial](./training/TUTORIAL.md).

# Documentations
---
Everything you want to know about bolt is recorded in the detailed documentations stored in [docs](docs).

- [How to install bolt with different compilers?](docs/INSTALL.md).
- [How to use bolt to inference your ML models?](docs/USER_HANDBOOK.md)
- [How to develop bolt to customize more models?](docs/DEVELOPER.md)
- [Operators documentation](docs/OPERATORS.md)
- [Benchmark results on some universal models.](docs/BENCHMARK.md)
- [How to visualise/protect bolt model?](docs/USER_HANDBOOK.md#model-visualization)
- [How to build demo/example with kit?](docs/KIT.md)
- [Frequently Asked Questions(FAQ)](docs/FAQ.md)

# Articles
---
- [深度学习加速库Bolt领跑端侧AI](https://zhuanlan.zhihu.com/p/317111024)
- [为什么 Bolt 这么快：矩阵向量乘的实现](https://zhuanlan.zhihu.com/p/97928435)
- [深入硬件特性加速TinyBert，首次实现手机上Bert 6ms推理](https://zhuanlan.zhihu.com/p/158620259)
- [Bolt GPU性能优化，让上帝帮忙掷骰子](https://zhuanlan.zhihu.com/p/336218879)
- [Bolt助力HMS机器翻译，自然语言处理又下一城](https://zhuanlan.zhihu.com/p/337887620)
- [ARM CPU 1-bit推理，走向极致的道路](https://zhuanlan.zhihu.com/p/158161592)
- [基于深度学习加速库Bolt的声音克隆技术(Voice Cloning)](https://zhuanlan.zhihu.com/p/498919929)

# 教程
---
- 图像分类: [Android Demo](https://zhuanlan.zhihu.com/p/359264809), [iOS Demo](https://zhuanlan.zhihu.com/p/359259766)
- 图像增强: [Android Deme](), [iOS Demo]()
- 情感分类: [Android Demo](https://zhuanlan.zhihu.com/p/414971037)
- 中文语音识别: [Android Demo](https://zhuanlan.zhihu.com/p/414978782), [iOS Demo](https://zhuanlan.zhihu.com/p/414981121)
- 人脸检测: [Android Demo](https://zhuanlan.zhihu.com/p/414975102), [iOS Demo](https://zhuanlan.zhihu.com/p/414971375)
- 阅读理解: [Android Demo](https://zhuanlan.zhihu.com/p/498906834)

# Acknowledgement
---
Bolt refers to the following projects: [caffe](https://github.com/BVLC/caffe), [onnx](https://github.com/onnx/onnx), [tensorflow](https://github.com/tensorflow/tensorflow), [ncnn](https://github.com/Tencent/ncnn), [mnn](https://github.com/alibaba/MNN), [dabnn](https://github.com/JDAI-CV/dabnn).

# License
---
The MIT License(MIT)
",,,,,,,,,,,,,,,,,,,,,,,0.9295042773,"Bolt is a light-weight library for deep learning. It is 15%+ faster than
existing open source acceleration libraries. It supports Caffe, ONNX, TFLite,
Tensorflow and many other tools. It has been widely deployed and used in many
departments of HUAWEI company, such as 2012 Laboratory, CBG and H UAWEI Product
Lines. If you have questions or. suggestions, you can submit issue. **QQ群:
833345709**"
2182,Window.js is an open-source Javascript runtime for desktop graphics programming.,"# Window.js

Window.js is an open-source Javascript runtime for desktop graphics programming.

It is documented at [windowjs.org](https://windowjs.org).

[![Windows](https://github.com/windowjs/windowjs/actions/workflows/windows-build.yml/badge.svg)](https://github.com/windowjs/windowjs/actions/workflows/windows-build.yml)
[![Linux](https://github.com/windowjs/windowjs/actions/workflows/linux-build.yml/badge.svg)](https://github.com/windowjs/windowjs/actions/workflows/linux-build.yml)
[![macOS](https://github.com/windowjs/windowjs/actions/workflows/macos-build.yml/badge.svg)](https://github.com/windowjs/windowjs/actions/workflows/macos-build.yml)


## Introduction

Window.js provides APIs for [window](https://windowjs.org/doc/window) creation
and manipulation via [GLFW](https://glfw.org) and the HTML5
[Canvas API](https://windowjs.org/doc/canvas) via the
[Skia](https://skia.org) graphics library, backed by the [v8](https://v8.dev)
Javascript engine.

Window.js comes with familiar APIs for web developers for
[input](https://windowjs.org/doc/window#window.addEventListener) event handling
and [animated rendering](https://windowjs.org/doc/global#requestAnimationFrame),
and has additional, convenient APIs for
[file access](https://windowjs.org/doc/file).

Additional APIs for sound, networking and WebGL are planned for a future
release.

See the [FAQ](https://windowjs.org/about/faq) for more details.

**Note**: Window.js is a very recent project and hasn't been widely tested yet.
Please report any [issues](https://github.com/windowjs/windowjs/issues) and get
in [contact](https://windowjs.org/about/contact) for help.


## Quick start

Window.js is distributed as a single binary that can be
[downloaded](https://windowjs.org/download) for Windows and macOS.

It can also be [built](https://windowjs.org/dev/build) from the sources for
Windows, macOS and Linux.

Window.js runs a Javascript source file directly:

```shell
$ windowjs examples/breakout.js
```

The source files can be edited and reloaded with `F5` in the main window.

A Javascript console is available by pressing `F1`, that can be used to
diagnose errors and explore the APIs. For example, submitting this:

```shell
window.title = ""Hello!""
```

changes the title of the main window. Errors are highlighted in the main window:

```shell
window.title = noSuchVariable;
```

Uncaught exceptions and console log errors are also shown in the main window.
That overlay can be toggled with `F4`. See `help()` in the console for more
development tools.

See the [example](https://windowjs.org/about/examples) applications and the
[API documentation](https://windowjs.org/doc) for more.


## Contact

Contact the Window.js developers and other users via the
[Window.js mailing list](https://groups.google.com/u/3/g/windowjs/) at
Google Groups, or via its email address `windowjs@googlegroups.com`.

Github users can also use the
[Github Discussions](https://github.com/windowjs/windowjs/discussions) page
for the project.

Report issues the Github
[issues tracker](https://github.com/windowjs/windowjs/issues).


## Contributing

See the documentation for [contributions](https://windowjs.org/dev/contributing)
and a list of [planned features](https://windowjs.org/dev/plans) for ideas.


## License

Window.js is licensed under the [MIT License](LICENSE).
",,,,,,,,,,,,,,,,,,,,,,,0.4110021353,"Window.js provides APIs for [window] creation and manipulation via [GLFW] and
the HTML5[Canvas API. It also has additional, convenient APIs for file access
and sound, networking and WebGL. It runs a Javascript source file directly and
can be edited and reloaded with `F5` in the main window. A Javascript console is
available by pressing `F1` that can be used todiagnose errors and explore the
APIs. It is licensed under the [MIT License](LICENSE)."
538,"The extensible bootloader for embedded system with application engine, write once, run everywhere.","![xboot-logo](developments/logo/xboot-logo.svg)

***

# XBOOT简介([English Version](README.md#xboot-introduction))

```
       _                   _                     
 _  _ | |___ _____ _____ _| |_                   
\ \/ /|  _  |  _  |  _  |_   _|  (C) 2007-2022   
 )  ( | |_| | |_| | |_| | | |____JIANJUN.JIANG__ 
/_/\_\|_____|_____|_____| |_____________________|
```
操作一个GPIO，需要仔细对照芯片手册，好繁琐；每换一个主控芯片，所有工作从头来过；想开发个现代点支持各种动效的UI，发现几乎是不可能的事情；各种协议栈有如天书一样，阅读都困难，何谈编写；虚拟机技术很流行，功能很强大，想自己移植个，可是困难重重；还是放开自己吧，让XBOOT来替你解决这些问题。XBOOT不仅仅是一款功能强大、可移植性强、代码复用率高的嵌入式系统bootloader，而且还是一款SOC片上系统应用软件执行引擎，无需复杂的操作系统，APP上电直接执行。一次编写，到处运行，不仅仅是个口号，而且还是XBOOT存在的唯一原因。一些基本特性，简单列举如下：
* 支持文件系统
* 支持lua虚拟机
* 支持各种协议栈
* 支持矢量图形库，矢量字体
* 支持各种现代GUI控件，以及动效
* 多平台支持
* 各种总线驱动，UART，I2C，SPI等等
* 各种设备驱动，GPIO，PWM，IRQ，CLK，LED，BUZZER，VIBRATOR，WATCHDOG，RNG，FRAMEBUFFER，RTC等
* 支持用lua编写应用软件，包含高等级API,可直接操作各种硬件抽象接口
* 应用软件平台无关，一次编写，到处运行

![linux-sandbox-game-2048](docs/_images/linux-sandbox-game-2048.gif)

# 文档及开发工具
* [Xboot文档](https://xboot.github.io/xboot)
* [交叉工具链](http://pan.baidu.com/s/1dDtssIt)
* [Eclipse集成开发环境](http://pan.baidu.com/s/1i3ImG0d)

# 编译源码
Makefile中有两个变量在编译时需要传递，一个是交叉工具链，另一个是具体的硬件平台

| 变量            | 说明                          |
| ------------- | --------------------------- |
| CROSS_COMPILE | 指定交叉工具链                     |
| PLATFORM      | 指定硬件平台，由两部分组成，`arch`及`mach` |

* ## Realview平台，qemu-system-arm模拟器

```shell
make clean
make CROSS_COMPILE=/path/to/arm-none-linux-gnueabihf- PLATFORM=arm32-realview
```

* ## X86_64位linux系统下的sandbox

sandbox依赖与SDL2库，在编译前需要安装libsdl2-dev，以ubuntu系统为例:
```shell
sudo apt-get install libsdl2-dev
```
```shell
make clean
make CROSS_COMPILE="""" PLATFORM=x64-sandbox
```

# 讨论组，大佬聚集，请踊跃加入
XBOOT官方QQ群：[658250248](https://jq.qq.com/?_wv=1027&k=5BOkXYO) (2000人)


***
# Xboot Introduction
It very tedious that we need careful read soc datasheet when operate GPIO on soc.We always repeat working when changed the soc.its almost almost impossible to We want develop a UI that support all kinds of magic motion.Stacks of protocols are like heavenly books ,it Reading is very hard , How do we program? Virtual machine technology is very popular and it function is powerful,but it very difficult to transplant it.so we build the Xboot.it can help us deal with these problems.
XBOOT is not only a powerful, portable, and highly reusable, embedded system bootloader,but also on a piece of SOC system application software execution engine, without complex operating system, electricity directly executed on the APP。""Once written, running everywhere."" It not just a slogan,but also the only reason for the existence of XBOOT. What's on the XBOOT?

- Support file systems
- Support lua virtual machine
- Support many protocol stacks
- Support graphics library, and vector font
- Supports a modern GUI, and animations
- Multi-platform support
- Bus drivers, UART, I2C, SPI and so on
- Device drivers, GPIO, PWM, IRQ, CLK, LED, BUZZER, VIBRATOR, WATCHDOG, RNG, FRAMEBUFFER, RTC, etc.
- Support application using lua, which include high-level API, can operate a variety of hardware abstract interface directly
- Application software platform has nothing to do, write once, run everywhere

# Documents and Development Tools
* [Xboot Documents](https://xboot.github.io/xboot)
* [Cross Toolchains](http://pan.baidu.com/s/1dDtssIt)
* [Eclipse Integrated Development Environment](http://pan.baidu.com/s/1i3ImG0d)

# Compile The Source Code
Makefile have two variables need to pass, one is cross toolchain, the other is a specific hardware platform

| variable      | Description                              |
| ------------- | ---------------------------------------- |
| CROSS_COMPILE | The specical cross toolchain             |
| PLATFORM      | The hardware platform, have two parts, `arch` and `mach` |

* ## Realview Platform，qemu-system-arm Emulator

```shell
make clean
make CROSS_COMPILE=/path/to/arm-none-linux-gnueabihf- PLATFORM=arm32-realview
```

* ## Linux Sandbox On X86_64

The sandbox depends on the SDL2 library, you need to install libsdl2-dev before compile, as an example at the ubuntu system:

```shell
sudo apt-get install libsdl2-dev
```
```shell
make clean
make CROSS_COMPILE="""" PLATFORM=x64-sandbox
```

# Discussion Group, Many Big Brother, Please Join Us
XBOOT Official Tencent QQ Group: [658250248](https://jq.qq.com/?_wv=1027&k=5BOkXYO) (2000 people)

",,,,,,,,,,,,,,,,,,,,,,,0.3845053847,"summarize:![xboot-logo](developments/logo/x Bootloader) (C) 2007-2022    ( | |_|
|._|, | |-| | | |____JIANJUN.JIANG__) ( C) 2012-2014   ‘‘’  “”  ’’ ‘.’” ’.”’.
‘'”. ’'’ '’: ‘The Bootloader’, ‘XBootloader.loader.bootloader.title’,.
‘xBootloader”, ’"
3168,"All the slides, accompanying code and exercises all stored in this repo. 🎈","# Data Camp: Data Scientist with Python 🎉🤖

![GitHub](https://img.shields.io/github/license/AmoDinho/datacamp-python-data-science-track) ![GitHub stars](https://img.shields.io/github/stars/AmoDinho/datacamp-python-data-science-track?style=social)

![Design Blocks](https://images.unsplash.com/photo-1518364538800-6bae3c2ea0f2?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=193d96d744872badcbbf5bdfc7b347f2&auto=format&fit=crop&w=1951&q=80)

# All the slides, accompanying code and exercises are all stored in this repo!

[Sign Up to DataCamp Here!](https://www.datacamp.com)

## 🎮 List of Courses

  - [Intro to Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intro%20to%20Python%20for%20Data%20Science)
  - [Intermediate Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intermediate%20Python%20for%20Data%20Science)
  - [Python Data Science Toolbox (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt1)
  - [Python Data Science Toolbox (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt2)
  - [Importing Data in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt1)
  - [Importing Data in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt2)
  - [Cleaning Data in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Cleaning%20Data%20in%20Python)
  - [Pandas Foundations](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Pandas%20Foundations)
  - [Manipulating DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Manipulating%20DataFrames%20with%20pandas)
  - [Merging DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Merging%20DataFrames%20with%20pandas)
  - [Introduction to Databases in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Databases%20in%20Python)
  - [Introduction to Data Visualization with Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Data%20Visualizaion%20with%20Python)
  - [Interactive Data Visualization with Bokeh](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Interactive%20Data%20Visualization%20with%20Bokeh)
  - [Statistical Thinking in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%201))
  - [Statistical Thinking in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%202))
  - [Supervised Learning with scikit-learn](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Supervised%20Learning%20with%20scikit-learn)
  - [Machine Learning with the Experts: School Budgets](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Machine%20Learning%20with%20Experts-School%20Budgets)
  - [Unsupervised Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Unsupervised%20Learning%20in%20Python)
  - [Deep Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Deep%20Learning%20in%20Python)
  - [Network Analysis in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Network%20Analysis%20in%20Python%20(Part%201))
  
  ### 💣 Bonus
  
  - [Natural Language Processing Fundamentals in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Natural%20Language%20Processing%20Fundamentals%20in%20Python)
  - [Correlation & Regression](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Correlation%20and%20Regression)
  
  ##  🍣 Contributions
  
  Anyone is welcome to contribute please check out the issues!
  
  ## 📄 License

[MIT License](https://github.com/AmoDinho/datacamp-python-data-science-track/blob/master/LICENSE)

",,,,,,,,,,,,,,,,,,,,,,,0.2536589735,"summarize: # Data Camp: Data Scientist with Python. All the slides, accompanying
code and exercises are all stored in this repo! Sign up to DataCamp Here! for
more information and to join the mailing list for the event."
1918,The flexible game engine.,"The flexible game engine. [![Build Status](https://github.com/crownengine/crown/workflows/build_and_test/badge.svg)](https://github.com/crownengine/crown/actions)
=====================================

Crown is a general purpose and data-driven game engine, written in [orthodox
C++](https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b) with a minimalistic
and data-oriented design philosophy in mind.

Crown isn't tied to a particular game type or genre but instead it offers a set
of generic primitives and facilities to help you create a wide gamut of
interactive 2D and 3D products.

Check out the
[Introduction](https://docs.crownengine.org/html/latest/introduction.html)
for more info.

## Download
### Binaries

  * [Changelog](https://docs.crownengine.org/html/latest/changelog.html)
  * [Crown v0.47.0 for Linux 64-bits](https://github.com/crownengine/crown/releases/download/v0.47.0/crown-0.47.0-linux-x64.tar.gz)
  * [Crown v0.47.0 for Windows 64-bits](https://github.com/crownengine/crown/releases/download/v0.47.0/crown-0.47.0-windows-x64.zip)
  * [Crown v0.47.0 all releases](https://github.com/crownengine/crown/releases/tag/v0.47.0)
  
### Arch Linux ([AUR](https://aur.archlinux.org/packages/crown/))
    yay -S crown
  
## Documentation
### Unstable (master)
  * [User Manual](https://docs.crownengine.org/html/master)
  * [Lua API](https://docs.crownengine.org/html/master/lua_api.html)
  * [Building](https://docs.crownengine.org/html/master/hackers/building.html)
  
### Latest Stable (v0.47.0)
  * [User Manual](https://docs.crownengine.org/html/latest)
  * [Lua API](https://docs.crownengine.org/html/latest/lua_api.html)

## Community Support & Development

  * [Discord](https://discord.gg/CeXVWCT): [![Discord Chat](https://img.shields.io/discord/572468149358690314.svg)](https://discord.gg/CeXVWCT)
  * [Trello Roadmap](https://trello.com/b/h88kbJNm/crown-game-engine)

## Screenshots

### [Level Editor](https://github.com/crownengine/crown/tree/master/tools/level_editor)

![level-editor](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/level-editor.png)

### [00-empty](https://github.com/crownengine/crown/tree/master/samples/00-empty)

Engine initialization and shutdown.

### [01-physics](https://github.com/crownengine/crown/tree/master/samples/01-physics)
![01-physics](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/01-physics.png)

### [02-animation](https://github.com/crownengine/crown/tree/master/samples/02-animation)
![02-animation](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/02-animation.png)

### [03-joypad](https://github.com/crownengine/crown/tree/master/samples/03-joypad)
![03-joypad](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/03-joypad.png)

Contact
-------

Daniele Bartolini ([@aa_dani_bart](https://twitter.com/aa_dani_bart))  
Project page: https://github.com/crownengine/crown

Contributors
------------

In chronological order.

Daniele Bartolini ([@dbartolini](https://github.com/dbartolini))  
Simone Boscaratto ([@Xed89](https://github.com/Xed89))  
Michele Rossi ([@mikymod](https://github.com/mikymod))  
Michela Iacchelli - Pepper logo.  
Raphael de Vasconcelos Nascimento ([@vasconssa](https://github.com/vasconssa))  
Giulia Gazzoli - Crown logo.
",,,,,,,,,,,,,,,,,,,,,,,0.2722032013,"Crown is a general purpose and data-driven game engine. It's written
inorthodoxC++ with a minimalistic. data-oriented design philosophy in mind.
Crown isn't tied to a particular game type or genre. It offers a set of generic
primitives and facilities to help you create a wide gamut of interactive 2D and
3D products."
3395,"Network recon framework. Build your own, self-hosted and fully-controlled alternatives to Shodan / ZoomEye / Censys and GreyNoise, run your Passive DNS service, collect and analyse network intelligence from your sensors, and much more!","[![Join the chat at Gitter](https://badges.gitter.im/ivre/ivre.svg)](https://gitter.im/ivre/ivre)
[![Follow on Twitter](https://img.shields.io/twitter/follow/IvreRocks.svg?logo=twitter)](https://twitter.com/IvreRocks)
![Follow on Mastodon](https://img.shields.io/mastodon/follow/109349639355238149?domain=https%3A%2F%2Finfosec.exchange&style=social)
[![GitHub stars](https://img.shields.io/github/stars/ivre/ivre?style=social)](https://github.com/ivre/ivre)
[![PyPI downloads](https://pepy.tech/badge/ivre)](https://pypi.org/project/ivre/)
[![Docker pulls](https://img.shields.io/docker/pulls/ivre/web)](https://hub.docker.com/u/ivre/)

[![MongoDB tests](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/?branch=master)
[![Elasticsearch tests](https://github.com/ivre/ivre/actions/workflows/elastic.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/elastic.yml/?branch=master)
[![PostgreSQL tests](https://github.com/ivre/ivre/actions/workflows/postgres.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/postgres.yml/?branch=master)
[![TinyDB tests](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/?branch=master)
[![SQLite tests](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/?branch=master)
[![Maxmind tests](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/?branch=master)
[![Linting tests](https://github.com/ivre/ivre/actions/workflows/linting.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/linting/mongodb.yml/?branch=master)
[![Documentation Status](https://readthedocs.org/projects/ivre/badge/?version=latest)](https://doc.ivre.rocks/en/latest/?badge=latest)

# IVRE #

<img align=""right"" src=""https://ivre.rocks/logo.png"" alt=""Logo""/> IVRE
(Instrument de veille sur les réseaux extérieurs) or DRUNK (Dynamic
Recon of UNKnown networks) is a network recon framework, including
tools for passive and active recon. IVRE can use data from:

- Passive tools:
  - [Zeek](https://zeek.org/)
  - [Argus](http://qosient.com/argus/)
  - [Nfdump](https://github.com/phaag/nfdump)
  - [p0f](https://lcamtuf.coredump.cx/p0f3/)
  - [airodump-ng](https://www.aircrack-ng.org/)
- Active tools:
  - [Nmap](https://nmap.org/)
  - [Masscan](https://github.com/robertdavidgraham/masscan)
  - [ZGrab2](https://github.com/zmap/zgrab2)
  - [ZDNS](https://github.com/zmap/zdns)
  - [Nuclei](https://nuclei.projectdiscovery.io/)
  - [httpx](https://github.com/projectdiscovery/httpx)
  - [dnsx](https://github.com/projectdiscovery/dnsx)
  - [tlsx](https://github.com/projectdiscovery/tlsx)
  - [Dismap](https://github.com/zhzyker/dismap/)

The advertising slogans are:

-   (in French): IVRE, il scanne Internet.
-   (in English): Know the networks, get DRUNK!
-   (in Latin): Nunc est bibendum.

The names IVRE and DRUNK have been chosen as a tribute to ""Le
Taullier"".

## Overview ##

You can have a look at the [project homepage](https://ivre.rocks/),
the
**[screenshot gallery](https://doc.ivre.rocks/en/latest/overview/screenshots.html)**,
and the
[quick video introduction](https://www.youtube.com/watch?v=GBu5QMq6ewY)
for an overview of the Web interface.

We have a **demonstration instance**, just [contact us](#contact) to
get an access.

A few
**[blog posts](http://pierre.droids-corp.org/blog/html/tags/ivre.html)**
have been written to show some features of IVRE.

## Documentation ##

[IVRE's documentation](https://doc.ivre.rocks/) is hosted by Read The
Docs, based on files from the [doc/](doc/) directory of the
repository.

On an IVRE web server, the `doc/*` files are available, rendered,
under `/doc/`.

On a system with IVRE installed, you can use a `--help` option with
most IVRE CLI tools, and `help(ivre.module)` with most IVRE Python
sub-modules.

## License ##

IVRE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

IVRE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
[along with IVRE](doc/license.rst). If not, see
[the gnu.org web site](http://www.gnu.org/licenses/).

## Support ##

Try `--help` for the CLI tools, `help()` under Python and the ""HELP""
button in the web interface.

Have a look at the
[FAQ](https://doc.ivre.rocks/en/latest/overview/faq.html)!

Feel free to contact the author and offer him a beer if you need help!

If you don't like beer, a good scotch or any other good alcoholic
beverage will do (it is the author's unalienable right to decide
whether a beverage is good or not).

## Contributing ##

Code contributions (pull-requests) are of course welcome!

The project needs scan results and capture files that can be provided
as examples. If you can contribute some samples, or if you want to
contribute some samples and would need some help to do so, or if you
can provide a server to run scans, please contact the author.

## Contact ##

For both support and contribution, the
[repository](https://github.com/ivre/ivre) on Github should be
used: feel free to create a new issue or a pull request!

You can also join the
[Gitter conversation](https://gitter.im/ivre/ivre) (that is the
preferred way to get in touch for questions), or use the e-mail `dev`
on the domain `ivre.rocks`.

## Talking about IVRE ##

### Research ###

If you are using IVRE in you research, please cite it as follows:

IVRE contributors. *IVRE, a network recon framework*.
[https://github.com/ivre/ivre](https://github.com/ivre/ivre),
2011-2022.

Here is the appropriate bibtex entry:

    @MISC{ivre,
        title = {{IVRE}, a network recon framework},
        author={IVRE contributors},
        url = {https://ivre.rocks/},
        howpublished = {\url{https://github.com/ivre/ivre/}},
        year = {2011--2022},
    }

### Technical documents & blog posts ###

You can mention ""IVRE, a network recon framework"", together with the
project homepage, [https://ivre.rocks/](https://ivre.rocks/) and/or
the repository,
[https://github.com/ivre/ivre](https://github.com/ivre/ivre).

On twitter, you can follow and/or mention
[@IvreRocks](https://twitter.com/IvreRocks).
",,,,,,,,,,,,,,,,,,,,,,,0.6054818568,"IvreRocks is a network recon recon recon- framework for passive and active data-
driven tools. You can use it to build, test, and share your data with others.
Use the badges to help you stay on top of the latest news."
332,A Toon Shader in Unity Universal Render Pipeline.,"# URP Toon Shader
- [Introduction](#Introduction)
- [Properties](#Properties)
	- [SurfaceOptions](#SurfaceOptions)
	- [Base](#Base)
	- [Shadow](#Shadow)
	- [Specular](#Specular)
	- [Rim](#Rim)
	- [Outline](#Outline)
	- [AdvancedOptions](#AdvancedOptions)
- [Multi Pass Batch](#Multi-Pass-Batch)
- [Reference](#Reference)
- [Licenses](#Licenses)

## Introduction  
Simple toon shader in unity universal pipeline.

![image-UnityChan](image/UnityChan.png)  

Genshin Impact Style(Model and Texture from miHoYo)

![image-Genshin_Sample](image/Genshin_Sample.gif)  

## Properties
### SurfaceOptions
![image-SurfaceOptions](image/SurfaceOptions.png) 


### Base
![image-Base](image/Base.png) 
### Shadow
![image-Shadow](image/Shadow.png) 

#### ShadowType

##### DoubleShade 
Adjustable two-layer shadow.(Reference UTS)

##### RampMapShadow 
Shadows based on rampmap.

##### SDF_FaceShadow (Reference Genshin Impact) 

Used for face shadow, sample a precomputed shadow mask to generate shadows.
Limit:symmetrical face uv.

![image-SDFMask](image/SDFMask.png) 

Need to add a script to the object, set the forward and left direction(ObjectSpace).

![image-SDFScript](image/SDFScript.png) 

About how to generate sdf shadow mask.
Node:Generate mask in r16 format(antialiasing).

https://zhuanlan.zhihu.com/p/389668800 

#### SSAO (Add ""ScreenSpaceAmbientOcclusion"" RenderFeature)

Control SSAO strength.

#### CastHairShadowMask (Add ""RenderFrontHairShadowMaskFeature"" RenderFeature)

Cast a shadow mask in screen space for face shadow.(Check it on front hair material or something)

#### ReceiveHairShadowMask

Sample ""CastHairShadowMask"" for shadow.(Check it on face material)

### Specular

![image-Specular](image/Specular.png) 


### Rim
![image-Rim](image/Rim.png)  

- RimBlendShadow  

![image-BlendRim](image/BlendRim.png) 

1:RimBlendShadow=0 2:RimBlendShadow=1 3:RimBlendShadow=1 RimFlip=1  

- RimFlip  

Flip RimBlendShadow

### Outline
![image-Outline](image/Outline.png)  
- UseSmoothNormal : (if use this feature, you need to check ""Read/Write Enbale"" in the Import Setting of the model, and then rename the model to ""XXX_ol"":https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline#%E5%B9%B3%E6%BB%91%E6%B3%95%E7%BA%BF%E5%AF%BC%E5%85%A5%E5%B7%A5%E5%85%B7ModelOutlineImporter)

### AdvancedOptions
![image-AdvancedOptions](image/AdvancedOptions.png) 


## Multi Pass Batch

In the default URP, if render multiple pass shaders(outline), the Rendering order like this:  
Object1.Pass1-  
Objcet1.Pass2-  
Object2.Pass1-  
Object2.Pass2......  
![image-BeforeBatch](image/BeforeBatch.png)    
It will stop SPRBatch.  
![image-NotSupportBatch](image/NotSupportBatch.png)   
We can change the Rendering order like this by using RenderFeature:  
Object1.Pass1-  
Objcet2.Pass1-  
Object1.Pass2-  
Object2.Pass2......  
![image-AfterBatch](image/AfterBatch.png)   

## Reference

https://github.com/unity3d-jp/UnityChanToonShaderVer2_Project  
https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline  
https://github.com/you-ri/LiliumToonGraph  
https://github.com/Kink3d/kShading  
https://unity.cn/projects/china-unity-tech-week_linruofeng

## Licenses

MIT

""Assets/UnityChan/License""

© Unity Technologies Japan/UCL
",,,,,,,,,,,,,,,,,,,,,,,0.7311497458,"Simple toon shader in unity universal pipeline. Genshin Impact Style(Model and
Texture from miHoYo) is used. We can change the Rendering order by using
RenderFeature: Objcet1-Objcet2-Object1.Pass1-Object2.Pass2. It will stop
SPRBatch. If you don't want to use this feature, you need to check ""Read/Write
Enbale"" in the Import Setting of the model, and then rename the model to
""XXX_ol"":."
3427,💁‍♀️Your new best friend powered by an artificial neural network,"<h1 align=""center"">
  <br>
  <img src=""https://olivia-ai.org/img/icons/olivia-with-text.png"" alt=""Olivia's character"" width=""300"">
  <br>
</h1>

<h4 align=""center"">💁‍♀️ Your new best friend</h4>

<p align=""center"">
  <a href=""https://goreportcard.com/report/github.com/olivia-ai/olivia""><img src=""https://goreportcard.com/badge/github.com/olivia-ai/olivia""></a>
  <a href=""https://godoc.org/github.com/olivia-ai/olivia""><img src=""https://godoc.org/github.com/olivia-ai/olivia?status.svg"" alt=""GoDoc""></a>
  <a href=""https://app.fossa.io/projects/git%2Bgithub.com%2Folivia-ai%2Folivia?ref=badge_shield""><img src=""https://app.fossa.io/api/projects/git%2Bgithub.com%2Folivia-ai%2Folivia.svg?type=shield""></a>
  <a href=""https://codecov.io/gh/olivia-ai/olivia""><img src=""https://codecov.io/gh/olivia-ai/olivia/branch/master/graph/badge.svg"" /></a>
  <br>
  <img src=""https://github.com/olivia-ai/olivia/workflows/Code%20coverage/badge.svg"">
  <img src=""https://github.com/olivia-ai/olivia/workflows/Docker%20CI/badge.svg"">
  <img src=""https://github.com/olivia-ai/olivia/workflows/Format%20checker/badge.svg"">
</p>

<p align=""center"">
  <a href=""https://twitter.com/oliv_ai""><img alt=""Twitter Follow"" src=""https://img.shields.io/twitter/follow/oliv_ai""></a>
  <a href=""https://discord.gg/wXDwTdy""><img src=""https://img.shields.io/discord/699567909235720224?label=Discord&style=social""></a>
</p>

<p align=""center"">
  <a href=""https://www.youtube.com/watch?v=JRSNnW05suo""><img width=""250"" src=""https://i.imgur.com/kEKJjJn.png""></a>
</p>

<p align=""center"">
  <a href=""https://olivia-ai.org"">Website</a> —
  <a href=""https://docs.olivia-ai.org"">Documentation</a> —
  <a href=""#getting-started"">Getting started</a> —
  <a href=""#introduction"">Introduction</a> —
  <a href=""#translations"">Translations</a> —
  <a href=""#contributors"">Contributors</a> —
  <a href=""#license"">License</a>
</p>

<p align=""center"">
  ⚠️ Please check the <strong><a href=""https://github.com/olivia-ai/olivia/issues"">Call for contributors</a></strong>
</p>

## Introduction
<p align=""center"">
  <img alt=""introduction"" height=""100"" src=""https://i.imgur.com/Ygm9CMc.png"">
</p>

### Description
Olivia is an open-source chatbot built in Golang using Machine Learning technologies.
Its goal is to provide a free and open-source alternative to big services like DialogFlow. 

You can chat with her by speaking (STT) or writing, she replies with a text message but you can enable her voice (TTS).

You can clone the project and customize it as you want using [GitHub](https://github.com/olivia-ai/olivia)
Try it on [her website!](https://olivia-ai.org)

### Why Olivia?
- The only chatbot project in Go that could be modulable and customizable.
- Using daily a privacy-friendly chatbot is great.
- The Website is a Progressive Web Application, which means you can add it to your phone and it seems like a native app!


## Getting started
### Installation 
#### Login to Github 

To get a personal access token from Github go to `Setings > Developer settings > Personal Access Tokens`

Click on Generate new Token and name it you MUST have read and write packages ticked on.
Then click Generate new token

Replace `TOKEN` with the Token that you just made.
```bash
$ export PAT=TOKEN
```

Login to Github (Note: change USERNAME to Gthub username)
```bash
$ echo $PAT | docker login docker.pkg.github.com -u USERNAME --password-stdin
```

#### Docker

<p align=""center"">
  <img alt=""docker installation"" height=""100"" src=""https://i.imgur.com/5NDCfF3.png"">
</p>

Pull the image from GitHub Packages
```bash
$ docker pull docker.pkg.github.com/olivia-ai/olivia/olivia:latest
```

Then start it
```bash
$ docker run -d -e PORT=8080 -p 8080:8080 docker.pkg.github.com/olivia-ai/olivia/olivia:latest
```

You can just use the websocket of Olivia now.

To stop it, get the container id:
```bash
$ docker container ls
```
```bash
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
311b3abb963a        olivia              ""./main""            7 minutes ago       Up 7 minutes        0.0.0.0:8080->8080/tcp   quizzical_mayer
```

and stop it
```bash
$ docker container stop 311b3abb963a 
```

The app will automatically check for `res/datasets/training.json` file which contains the save of the neural network.
By default when you clone the repository from Github you have a stable save.
If you want to train a new model just delete this file and rerun the app.

#### GitHub
<p align=""center"">
  <img height=""100"" src=""https://i.imgur.com/RRPoP69.png"">
</p>

Clone the project via GitHub:

```bash 
$ git clone git@github.com:olivia-ai/olivia.git
```

Then download the dependencies
```bash
$ go mod download
```

And run it
```bash
$ go run main.go
```

### Frontend and Backend
To install the frontend and the backend together, please use the `docker-compose.yml` file:

```bash
$ docker-compose up
```

And all done!

## Architecture
<p align=""center"">
  <img alt=""architecture"" height=""85"" src=""https://i.imgur.com/95h8WIU.png"">
  <br>
  <img src=""https://i.imgur.com/G9BYf4Y.png"">
</p>

## Translations

<p align=""center"">
  <img alt=""introduction"" height=""130"" src=""https://i.imgur.com/MDKbP0R.png"">
</p>

### Languages supported
- <img src=""https://i.imgur.com/URqxsb0.png"" width=""25""> English
- <img src=""https://i.imgur.com/Oo5BNk0.png"" width=""25""> Spanish
- <img src=""https://i.imgur.com/2DWxeF9.png"" width=""25""> Catalan
- <img src=""https://i.imgur.com/0dVqbjf.png"" width=""25""> French
- <img src=""https://i.imgur.com/sXLQp8e.png"" width=""25""> German
- <img src=""https://i.imgur.com/DGNcrRF.png"" width=""25""> Italian
- <img src=""https://i.imgur.com/kB0RoFZ.png"" width=""25""> Brazilian portuguese - not completed

### Coverage
The coverage of the translations is given [here](https://olivia-ai.org/dashboard/language).
To add a language please read [the documentation for that](https://docs.olivia-ai.org/translations.html).

## Contributors

<p align=""center"">
  <img alt=""docker installation"" height=""85"" src=""https://i.imgur.com/6xr2zdp.png"">
</p>
  
### Contributing
Please refer to the [contributing file](.github/CONTRIBUTING.md)
  
### Code Contributors
Thanks to the people who contribute to Olivia. 

[Contribute](.github/CONTRIBUTING.md)
<a href=""https://github.com/olivia-ai/olivia/graphs/contributors""><img src=""https://opencollective.com/olivia-ai/contributors.svg?width=950&button=false"" /></a>

### Financial Contributors
Become a financial contributor and help Olivia growth. 

Contribute on the GitHub page of [hugolgst](https://github.com/sponsors/hugolgst) ❤️

## License

<p align=""center"">
  <img src=""https://i.imgur.com/9Xxtchv.png"" height=""90"">
</p>

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Folivia-ai%2Folivia.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Folivia-ai%2Folivia?ref=badge_large)

<p align=""center"">
  <img width=""60"" src=""https://olivia-ai.org/img/icons/olivia.png"">
<p>

<p align=""center"">
  Made with ❤️ by <a href=""https://github.com/hugolgst"">Hugo Lageneste</a>
</p>

![Olivia's wave](https://olivia-ai.org/img/background-olivia.png)
",,,,,,,,,,,,,,,,,,,,,,,0.864627044,"Olivia is an open-source chatbot built in Golang using Machine Learning
technologies. You can chat with her by speaking (STT) or writing, she replies
with a text message but you can enable her voice (TTS) You can clone the project
and customize it as you want using [GitHub]. You can also try it on [her
website!](https://olivia-ai.org) The only chatbot project in Go that could be
modulable and customizable."
172,:earth_africa: Compass helps you setup a central navigation system for your application,"⚠️ DEPRECATED, NO LONGER MAINTAINED

![Compass logo](https://raw.githubusercontent.com/hyperoslo/Compass/master/Images/logo_v1.png)

[![Version](https://img.shields.io/cocoapods/v/Compass.svg?style=flat)](http://cocoadocs.org/docsets/Compass)
[![Carthage Compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)
[![License](https://img.shields.io/cocoapods/l/Compass.svg?style=flat)](http://cocoadocs.org/docsets/Compass)
[![Platform](https://img.shields.io/cocoapods/p/Compass.svg?style=flat)](http://cocoadocs.org/docsets/Compass)
[![CI Status](http://img.shields.io/travis/hyperoslo/Compass.svg?style=flat)](https://travis-ci.org/hyperoslo/Compass)
![Swift](https://img.shields.io/badge/%20in-swift%203.0-orange.svg)

Compass helps you setup a central navigation system for your application.
This has many benefits, one of them being that controllers can now be
decoupled, meaning that the list that presents the detail no longer knows
about what its presenting. Controllers become agnostic and views stay
stupid. The user experience stays the same but the logic and separation of
concerns become clearer. The outcome is that your application will become
more modular by default. Anything could potentially be presented from
anywhere, but remember, with great power comes great responsibility.

## Getting Started

Below are tutorials on how to use Compass

- [URL Routing in iOS apps: Compass Beginner Guide](https://medium.com/flawless-app-stories/url-routing-with-compass-d59c0061e7e2): basic introduction to Compass, how to use Router and multiple use cases for deep linking, push notifications

## Setup

#### Step 1
First you need to register a URL scheme for your application.

<img src=""https://raw.githubusercontent.com/hyperoslo/Compass/master/Images/setup-url-scheme.png"">

#### Step 2
Now you need to configure Compass to use that URL scheme, a good place
to do this is in your `AppDelegate`. Then configure all the routes you wish you support.

```swift
func application(_ application: UIApplication,
                 didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
  Navigator.scheme = ""compass""
  Navigator.routes = [""profile:{username}"", ""login:{username}"", ""logout""]
  return true
}
```

#### Step 3

Register your location request handler


```swift
Navigator.handle = { [weak self] location in
  let arguments = location.arguments

  let rootController = self?.window.rootViewController as? UINavigationController

  switch location.path {
    case ""profile:{username}"":
      let profileController = ProfileController(title: arguments[""username""])
      rootController?.pushViewController(profileController, animated: true)
    case ""login:{username}"":
      let loginController = LoginController(title: arguments[""username""])
      rootController?.pushViewController(loginController, animated: true)
    case ""logout"":
      self?.clearLoginSession()
      self?.switchToLoginScreen()
    default: 
      break
  }
}
```

#### Step 4

Anywhere in your application, you can just use `Navigator` to navigate

```swift
@IBOutlet func logoutButtonTouched() {
  Navigator.navigate(urn: ""logout"")
}
```

#### Step 5
Optional. If you want to support deep linking,  set up your application to respond to the URLs. Setting it up this way would mean that
you could open any view from a push notification depending on the contents of the payload.

```swift
func application(_ app: UIApplication,
                 open url: URL,
                 options: [UIApplicationOpenURLOptionsKey : Any]) -> Bool {
  do {
    try Navigator.navigate(url: url)
  } catch {
    // Handle error
  }

  return true
}
```

## Compass life hacks

### Tip 1. Router
We also have some conventional tools for you that could be used to organize your
route handling code and avoid huge `switch` cases.

- Implement `Routable` protocol to keep your single route navigation code
in one place:
```swift
struct ProfileRoute: Routable {

  func navigate(to location: Location, from currentController: CurrentController) throws {
    guard let username = location.arguments[""username""] else { return }

    let profileController = ProfileController(title: username)
    currentController.navigationController?.pushViewController(profileController, animated: true)
  }
}
```

- Create a `Router` instance and register your routes. Think of `Router` as a composite `Routable`
```swift
let router = Router()
router.routes = [
  ""profile:{username}"": ProfileRoute(),
  ""logout"": LogoutRoute()
]
```

- Parse URL with **Compass** and navigate to the route with a help of your
`Router` instance.
```swift
func application(_ app: UIApplication,
                 open url: URL,
                 options: [UIApplicationOpenURLOptionsKey : Any]) -> Bool {
  
  return handle(url)
}

func handle(_ url: URL) -> Bool {
  guard let location = Navigator.parse(url) else {
    return false
  }

  router.navigate(to: location, from: navigationController)

  return true
}
```

### Tip 2. Multiple routers
You could set up multiple routers depending on app states. For example, you could have 2 routers for pre and post login.

```swift
let preLoginRouter = Router()
preLoginRouter.routes = [
  ""profile:{username}"" : ProfileRoute()
]

let postLoginRouter = Router()
postLoginRouter.routes = [
  ""login:{username}"" : LoginRoute()
]

let router = hasLoggedIn ? postLoginRouter : preLoginRouter
router.navigate(to: location, from: navigationController)
```

## Installation

**Compass** is available through [CocoaPods](http://cocoapods.org). To install
it, simply add the following line to your Podfile:

```ruby
pod 'Compass'
```

**Compass** is also available through [Carthage](https://github.com/Carthage/Carthage).
To install just write into your Cartfile:

```ruby
github ""hyperoslo/Compass""
```

## Author

Hyper Interaktiv AS, ios@hyper.no

## Credits

The idea behind Compass came from [John Sundell](https://github.com/JohnSundell)'s tech talk ""*Components & View Models in the Cloud - how Spotify builds native, dynamic UIs*""

## License

**Compass** is available under the MIT license. See the LICENSE file for more info.
",,,,,,,,,,,,,,,,,,,,,,,0.1856092176,"Compass helps you setup a central navigation system for your application. It can
be used to make your application more modular by default. Controllers become
agnostic and views stay stupid. The user experience stays the same but the logic
and separation of concerns becomes clearer."
365,Build ECommerce Website Like Amazon By React & Node & MongoDB,"# React & Node Tutorial - Full ECommerce in 5 Hours [2020]

Welcome to my React and Node tutorial to build a fully-functional e-commerce website in 5 hours. Open your code editor and follow me for the next hours to build an e-commerce website using React and Node.JS.

## Demo Website

👉 Demo : https://oldamazona.webacademy.pro

## Video Tutorial

👉 Click on this image to watch full 5-hours video of this tutorial

[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/Fy9SdZLBTOo/0.jpg)](https://www.youtube.com/watch?v=Fy9SdZLBTOo)

## You Will Learn

- HTML5 and CSS3: Semantic Elements, CSS Grid, Flexbox
- React: Components, Props, Events, Hooks, Router, Axios
- Redux: Store, Reducers, Actions
- Node & Express: Web API, Body Parser, File Upload, JWT
- MongoDB: Mongoose, Aggregation
- Development: ESLint, Babel, Git, Github,
- Deployment: Heroku
- Watch React & Node Tutorial

## Run Locally

### 1. Clone repo

```
$ git clone git@github.com:basir/node-react-ecommerce.git
$ cd node-react-ecommerce
```

### 2. Install MongoDB

Download it from here: https://docs.mongodb.com/manual/administration/install-community/

### 3. Run Backend

```
$ npm install
$ npm start
```

### 4. Run Frontend

```
# open new terminal
$ cd frontend
$ npm install
$ npm start
```

### 5. Create Admin User

- Run this on chrome: http://localhost:5000/api/users/createadmin
- It returns admin email and password

### 6. Login

- Run http://localhost:3000/signin
- Enter admin email and password and click signin

### 7. Create Products

- Run http://localhost:3000/products
- Click create product and enter product info

## Support

- Q/A: https://webacademy.pro/oldamazona
- Contact Instructor: [Basir](mailto:basir.jafarzadeh@gmail.com)

## Video Tutorials

### [00:02:00 Part 01- Introduction](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=120s)

It gives you an overview of the tutorial to build an eCommerce website like Amazon.

### [00:08:26 Part 02- Install Tools](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=506s)

You need to install a code editor and a web browser to start web development. In this part, we will prepare the environment to start coding.

### [00:12:36 Part 03- Website Template](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=756s)

In this part, you create a web template for the eCommerce website.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/56kqn8m5n1m9fejdoxkz.png)

### [00:29:47 Part 04- Products List](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=1787s)

We will create a list of products as static HTML elements.

### [00:41:54 Part 05- Create Sidebar](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=2514s)

We will create a hamburger menu that shows and hide the sidebar. Also, we design the details page of the products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3sceblg6i6790minhaxg.jpg)

### [00:52:39 Part 06- Create React App](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3159s)

This part is about the frontend. We use React library to build the UI elements.

### [01:01:09 Part 07- Render Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3669s)

This is the home page of e-commerce. It shows a list of products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/hqiwteg10o8a2cnq0wwi.jpg)

### [01:06:30 Part 08- Product Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=3990s)

When the user clicks on a product there should a page to show details about that product. This lesson is all about making an attractive details page.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/csskvzbcmz4ypki2xjgk.jpg)

### [01:30:53 Part 09- Create Node Server](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5453s)

This part is about Node and Express. They are the popular framework to create a web server using JavaScript language. We will create a MongoDB database and save and retrieve the admin user.

### [01:39:52 Part 10- Fetch Server Data](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=5992s)

In this lesson, we use React Hooks to fetch data from the server. We use the axios library to do this job in a modern async/await style.

### [01:47:55 Part 11- Manage State With Redux](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=6475s)

When it comes to handling multiple forms with their data nothing is better than state management. We use Redux in this lesson to handle complex state and keep the app behavior predictable.

### [02:07:11 Part 12- Add Redux To Details](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=7631s)

In this part, we move the details page state to Redux. First, we create reducers then define actions and connect them to the details component.

### [02:29:23 Part 13- Shopping Cart Screen](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=8963s)

Shopping Cart is the heart of any e-commerce website. We focus on creating a user-friendly shopping cart using React and Redux.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/fyzf0no5ej1fgxp5972e.png)

### [03:08:11 Part 14- Connect MongoDB](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=11291s)

This lesson is about persisting data on the MongoDB database. We use mongoose package to create models and save and retrieve data from the database.

### [03:21:35 Part 15- Sign In User](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=12095s)

We need to register the user before redirecting them to the checkout. In this part, we will create forms for getting user info and save them in the database.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/92coj0rezr5508vhfv34.png)

### [03:56:02 Part 16- Manage Products](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=14162s)

Admin should be able to define products and update the count in stock whenever they like. This page is about managing ECommerce products.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/154a5zk6vfapukjaxwyu.png)

### [04:38:43 Part 17- Checkout Wizard](https://www.youtube.com/watch?v=Fy9SdZLBTOo&t=16723s)

In this part, we implement the checkout wizard including sign in, shipping info, payment method, and place order.
![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/l8w3g9mc3ccijt70wpf3.png)

## Only On Udemy

Following parts are on my udemy course. [Get it by 90% discount](https://www.udemy.com/course/build-ecommerce-website-like-amazon-react-node-mongodb/?couponCode=BASIR1)

### Part 18- Order Details Screen

It shows all details about an order includeing shipping, payments and order items. Also it is possible for admin to manage orders like set them as delivered.

### Part 19- Connect to PayPal

This parts create PaypalButton component to show paypal payment button on the screen.
when users click on it, they will be redirected to paypal website to make the payment.
after payment users will be redirected to details page of the order.

### Part 20- Manage Order Screen

This is an admin page to manage list of orders. Admin can delete an order or set it as delivered.

### Part 21- User Profile Screen

When user click on thier name on the header menu, this page appears. It consists of two sections. First an profile update form and second order history.

### Part 22- Filter and Sort Products

In the home page, right after header, there is a filter bar to filter products based on their name and description. also it is possible to sort product based on prices and arrivals.

### Part 23- Deploy Website on Heroku

This section explains all steps to publish the ecommerce website on heroku. first you need to create a cloud mongodb and the make an account on heroku.

### Part 24- Rate and Review Products

This part shows list of reviews by users for each products. also it provides a form to enter rating and review for every single product. also it update the avg rating of each product by user ratings.

1. index.html
2. link fontawesome
3. Rating.js
4. create stars based on props.value
5. show text based on props.text
6. index.css
7. style rating, span color gold and last span to gray, link text to blue
8. HomeScreen.js
9. use Rating component
10. ProductScreen.js
11. use Rating component, wrap it in anchor#reviews
12. list reviews after product details
13. create new review form to get rating and reviews
14. index.css
15. style reviews
16. ProductScreen.js
17. implement submitHandler
18. productActions.js
19. create saveProductReview(productId, review)
20. productConstants.js
21. create product review constants
22. productReducers.js
23. create productReviewSaveReducer
24. store.js
25. add productReviewSaveReducer
26. backend
27. productRoute.js
28. router.post('/:id/reviews')
29. save review in product.reviews
30. update avg rating

### Part 25- Upload Product Images On Local Server

Admin shoud be able to uploads photos from their computer. This section is about uploading images on local server ans aws s3 cloud server.

1. npm install multer
2. routes/uploadRoute.js
3. import express and multer
4. create disk storage with Date.now().jpg as filename
5. set upload as multer({ storage })
6. router.post('/', upload.single('image'))
7. return req.file.path
8. server.js
9. app.use('/api/uploads',uploadRoute)
10. ProductsScreen.js
11. create state hook for uploading
12. create input image file and onChange handler
13. define handleUploadImage function
14. prepare file for upload
15. axios post file as multipart/form-data
16. set image and set uploading
17. check result

### Part 26- Upload Product Images On AWS S3

This section is about uploading images amazon aws s3 cloud server.

1. create aws account
2. open https://s3.console.aws.amazon.com
3. create public bucket as amazona
4. create api key and secret
5. past it into .env as accessKeyId and secretAccessKey
6. move dotenv to config.js
7. add accessKeyId and secretAccessKey to config.js
8. npm install aws-sdk multer-s3
9. routes/uploadRoute.js
10. set aws.config.update to config values
11. create s3 from new aws.S3()
12. create storageS3 from multerS3 by setting s3, bucket and acl
13. set uploadS3 as multer({ storage: storageS3 })
14. router.post('/s3', uploadS3.single('image'))
15. return req.file.location
16. ProductsScreen.js
17. on handleUploadImage set axios.post('api/uploads/s3')
18. check result on website and s3

## Summary

In this tutorial, we have made an eCommerce website like Amazon. Feel free to change this project based on your needs and add it to your portfolio.
Also, I will love to hear your comment about this React and Node tutorial. Please share your thoughts here.
",,,,,,,,,,,,,,,,,,,,,,,0.9907181707,"Open your code editor and follow me for the next hours to build an e-commerce
website using React and Node.JS. You will learn about HTML5 and CSS3: Semantic
Elements, CSS Grid, Flexbox. React: Components, Props, Events, Hooks, Router,
Axios- Redux: Store, Reducers, Actions. Node & Express: Web API, Body Parser,
File Upload, JWT."
2,"A curated list of awesome Nim frameworks, libraries, software and resources.","<h1> <a href=""https://nim-lang.org""><img src=""asset/awesome-nim-logo.svg"" alt=""Awesome-nim-logo"" width=""600""/></a><a href=""https://awesome.re""><img align=""right"" src=""https://awesome.re/badge.svg""></a> </h1>

> A curated list of awesome Nim frameworks, libraries, software and resources.

[Nim](https://nim-lang.org/) is a statically typed compiled systems programming language. Good for everything from shell scripting to web front & backend, to ML, HPC, and embedded.

<h2> Contents </h2>

- [Language Features](#language-features)
  - [Implementations](#implementations)
  - [Standard Libraries](#standard-libraries)
  - [Package Repositories](#package-repositories)
  - [Editors](#editors)
  - [Async IO](#async-io)
  - [Threading](#threading)
  - [Error Handling](#error-handling)
  - [Contracts](#contracts)
  - [Object-Oriented Programming](#object-oriented-programming)
  - [Functional Programming](#functional-programming)
  - [Pattern Matching](#pattern-matching)
  - [Iteration](#iteration)
  - [Macros](#macros)
- [Operating System](#operating-system)
  - [System API](#system-api)
  - [IO](#io)
  - [Processes](#processes)
  - [Date and Time](#date-and-time)
  - [Randomization](#randomization)
  - [Scripting](#scripting)
- [Hardware](#hardware)
  - [Embedded](#embedded)
- [Science](#science)
- [Data](#data)
  - [Database](#database)
    - [Driver](#driver)
    - [ORM](#orm)
  - [Data Structures](#data-structures)
  - [Data Processing](#data-processing)
  - [Parsing](#parsing)
  - [Serialization](#serialization)
- [Text](#text)
  - [String Types](#string-types)
  - [Translation](#translation)
  - [Markdown](#markdown)
- [Multimedia](#multimedia)
  - [Audio](#audio)
  - [Images](#images)
  - [Documents](#documents)
- [Algorithms](#algorithms)
  - [Math](#math)
    - [Symbolic](#symbolic)
    - [FFT](#fft)
    - [Vector](#vector)
    - [Matrix](#matrix)
  - [Deep Learning](#deep-learning)
  - [Bigints](#bigints)
  - [Cryptography](#cryptography)
  - [Blockchain](#blockchain)
  - [Compression](#compression)
- [User Interface](#user-interface)
  - [Terminal](#terminal)
  - [Design](#design)
  - [GUI](#gui)
    - [Crossplatform](#crossplatform)
    - [Windows](#windows)
    - [Linux](#linux)
    - [Web Technology](#web-technology)
    - [Lightweight](#lightweight)
  - [Plotting](#plotting)
- [Web](#web)
  - [Protocols](#protocols)
    - [DNS](#dns)
    - [QUIC](#quic)
    - [Websockets](#websockets)
    - [Messaging](#messaging)
  - [HTML Parsers](#html-parsers)
  - [HTTP Servers](#http-servers)
  - [Frameworks](#frameworks)
  - [Template Engines](#template-engines)
  - [Authentication](#authentication)
- [Game Development](#game-development)
  - [Game Libraries](#game-libraries)
  - [Game Frameworks](#game-frameworks)
  - [Game Engines](#game-engines)
  - [Rules Engines](#rules-engines)
- [Development Tools](#development-tools)
  - [Editor Integration](#editor-integration)
  - [REPL](#repl)
  - [Binding Generators](#binding-generators)
  - [Build Systems / Package Management](#build-systems--package-management)
  - [Logging](#logging)
  - [Testing](#testing)
  - [Fuzzing](#fuzzing)
  - [Benchmarking](#benchmarking)
  - [Command-Line Interface Automation](#command-line-interface-automation)
- [Resources](#resources)
  - [Books](#books)
  - [Blogs](#blogs)
  - [Community](#community)
  - [Tutorials](#tutorials)
  - [Videos](#videos)


## Language Features


### Implementations

- [Nim](https://github.com/nim-lang/Nim) - Nim (formerly known as ""Nimrod"") is a compiled, garbage-collected systems programming language which has an excellent productivity/performance ratio. Nim's design focuses on efficiency, expressiveness, elegance (in the order of priority).
- [nlvm](https://github.com/arnetheduck/nlvm) - LLVM backend for Nim.


### Standard Libraries

Nim provides unique features for seamless and transparent interoperability with other technologies. Some users found it useful to make other standard libraries usable from Nim.

- [cpython](https://github.com/juancarlospaco/cpython) - Python standard library for Nim.
- [Node.js](https://github.com/juancarlospaco/nodejs) - Node.js standard library for Nim.


### Package Repositories

- [Nim packages](https://github.com/nim-lang/packages) - List of packages for Nimble.
- [Nim package directory](https://nimble.directory/) - Explore Nim packages known to Nimble.


### Editors
- [moe](https://github.com/fox0430/moe) - A vim-like editor made with Nim, also supports C, Rust, Javascript, etc.
- [Nim Playground](https://play.nim-lang.org/) - Code and run Nim online.
- [DoongJohn's Nim playground](https://doongjohn.github.io/nim-playground/) - An alternative implementation of the Nim playground.


### Async IO

- [std/async](https://nim-lang.org/docs/async.html) - Async/await implementation in Nim's stdlib (aka asyncdispatch).
- [chronos](https://github.com/status-im/nim-chronos) - An efficient library for asynchronous programming.
- [cps](https://github.com/disruptek/cps) - Continuation-Passing Style for Nim.


### Threading

- [weave](https://github.com/mratsim/weave) - A state-of-the-art multithreading runtime: message-passing based, fast, scalable, ultra-low overhead.
- [timerpool](https://github.com/mikra01/timerpool) - Threadsafe timerpool implementation for event purposes.
- [taskpools](https://github.com/status-im/nim-taskpools) - Lightweight, energy-efficient, easily auditable threadpools.
- [shared](https://github.com/genotrance/shared) - A Nim library for shared types.
- [synthesis](https://github.com/mratsim/Synthesis) - A compiletime, procedure-based, low-overhead, no-allocation, state-machine generator optimized for communicating processes and threads.
- [sync](https://github.com/planetis-m/sync) - Useful synchronization primitives.


### Error Handling

- [result](https://github.com/arnetheduck/nim-result/) - Friendly, exception-free value-or-error returns, similar to Option[T].
- [questionable](https://github.com/status-im/questionable) - Elegant optional types for Nim.
- [optionsutils](https://github.com/PMunch/nim-optionsutils) - Utility macros for easier handling of options in Nim.


### Contracts

- [contracts](https://github.com/Udiknedormin/NimContracts) - Used to make contracts - elegant promises that pieces of code will fulfill certain conditions.
- [contra](https://github.com/juancarlospaco/nim-contra) - Lightweight and fast self-documenting design by contract programming.


### Object-Oriented Programming

- [oop_utils](https://github.com/bluenote10/oop_utils) - Nim macros for building OOP class hierarchies.
- [interfaced](https://github.com/andreaferretti/interfaced) - Interfaces for Nim.
- [traitor](https://github.com/beef331/traitor) - A macro heavy trait library made from boredom.
- [classy](https://github.com/nigredo-tori/classy) - Haskell-style typeclasses for Nim.


### Functional Programming

- [cascade](https://github.com/citycide/cascade) - Method & assignment cascades for Nim, inspired by Smalltalk & Dart.
- [nimfp](https://github.com/vegansk/nimfp) - Nim functional programming library.
- [nim-pipexp](https://github.com/ShalokShalom/nim-pipexp) - Expression-based pipe operators with placeholder argument for Nim.
- [pipe](https://github.com/5paceToast/pipe) - Pipe operator for Nim, as seen in functional languages.
- [zero-functional](https://github.com/zero-functional/zero-functional) - A library providing (almost) zero-cost chaining for functional abstractions in Nim.


### Pattern Matching

- [regex](https://github.com/nitely/nim-regex) - Pure Nim regex engine with linear time match.
- [npeg](https://github.com/zevv/npeg) - PEGs for Nim, another take.
- [patty](https://github.com/andreaferretti/patty) - A pattern matching library for Nim.
- [gara](https://github.com/alehander42/gara) - Macro-based pattern matching library.
- [glob](https://github.com/citycide/glob) - Pure library for matching file paths against Unix style glob patterns.
- [ast_pattern_match](https://github.com/krux02/ast-pattern-matching) - A library to do pattern matching on the AST.
- [awk](https://github.com/greencardamom/awk) - A library of awk functions in Nim.


### Iteration

- [iterrr](https://github.com/hamidb80/iterrr) - Macros-based functional-style, lazy-like, extensible iterator library.
- [itertools](https://github.com/narimiran/itertools) - Nim rewrite of a very popular Python module of the same name.
- [loopfusion](https://github.com/numforge/loopfusion) - Iterate efficiently over a variadic number of containers.
- [looper](https://github.com/b3liever/looper) - For loop macros for Nim.
- [mangle](https://github.com/baabelfish/mangle) - Attempt at a streaming library.


### Macros

- [macroutils](https://github.com/PMunch/macroutils) - A package that makes creating macros easier.
- [nimacros](https://github.com/FemtoEmacs/nimacros) - Documentation for Nim macros.
- [unpack](https://github.com/technicallyagd/unpack) - Sequence/object unpacking/destructuring.
- [with](https://github.com/zevv/with) - The `with` macro for Nim.
- [memo](https://github.com/andreaferretti/memo) - Memoization for Nim.


## Operating System

### System API

- [winim](https://github.com/khchen/winim) - Nim's Windows API and COM Library.
- [serial](https://github.com/euantorano/serial.nim) - A Nim library for accessing serial ports.
- [tempdir](https://github.com/euantorano/tempdir.nim) - A Nim library to create and manage temporary directories.
- [nimbluez](https://github.com/Electric-Blue/NimBluez) - Nim modules for access to system Bluetooth resources.


### IO

- [std/selectors](https://nim-lang.org/docs/selectors.html) - Epoll/Kqueue/Select implementation in Nim's stdlib.
- [ioselectors](https://github.com/xflywind/ioselectors) - The ioselectors plus for Nim.
- [wepoll](https://github.com/xflywind/wepoll) - Windows epoll wrapper for Nim.
- [faststreams](https://github.com/status-im/nim-faststreams) - Nearly zero-overhead input/output streams for Nim.
- [lockfreequeues](https://github.com/elijahr/lockfreequeues) - Lock-free queue implementations for Nim.


### Processes

- [psutil](https://github.com/johnscillieri/psutil-nim) - A port of Python's psutil to Nim.
- [shell](https://github.com/Vindaar/shell) - A mini Nim DSL to execute shell commands more conveniently.
- [schedules](https://github.com/soasme/nim-schedules) - A Nim scheduler library that lets you kick off jobs at regular intervals.
- [daemon](https://github.com/status-im/nim-daemon) - Cross-platform process daemonization library for the Nim language.


### Date and Time

- [datetime2human](https://github.com/juancarlospaco/nim-datetime2human) - Calculate date & time with precision from seconds to millenniums. Human friendly date time as string. ISO-8601.
- [timezones](https://github.com/GULPF/timezones) - Nim timezone library compatible with the standard library.
- [chrono](https://github.com/treeform/chrono) - A timestamps, calendars, and timezones library.


### Randomization

- [random](https://github.com/oprypin/nim-random) - Random number generation library for Nim, inspired by Python's ""random"" module.
- [sysrandom.nim](https://github.com/euantorano/sysrandom.nim) - A Nim library to generate random numbers and random ranges of bytes using the system's PRNG.
- [alea](https://github.com/andreaferretti/alea) - Define and compose random variables.
- [drand48](https://github.com/JeffersonLab/drand48) - Nim implementation of the standard Unix drand48 random number generator.


### Scripting

- [nimcr](https://github.com/PMunch/nimcr) - Running Nim code with Shebangs.
- [nimr](https://github.com/Jeff-Ciesielski/nimr) - Run Nim programs like scripts.


## Hardware

- [nimvisa](https://github.com/leeooox/nimvisa) - Wrapper for NI-VISA instrument control library.
- [ftd2xx](https://github.com/leeooox/ftd2xx) - Wrapper for FTDI ftd2xx library (USB to JTAG/SPI/I2C/Bitbang etc.).


### Embedded

- [ratel](https://github.com/PMunch/ratel) - Next-generation, zero-cost abstraction microconroller programming in Nim.
- [ardunimo](https://github.com/gokr/ardunimo) - Nim wrapper for Arduino + LinkIt ONE SDK by Mediatek.
- [ardunimesp](https://gitlab.com/NetaLabTek/Arduimesp) - Nim wrapper for Arduino ESP8266 framework + A tool for flashing, compiling and making a Nim project into an Arduino project.
- [msp430f5510](https://gitlab.com/jalexander8717/msp430f5510-nim) - Run Nim on MSP430f5510 micro-controller (6KB of RAM).
- [Nesper](https://github.com/elcritch/nesper) - Program the ESP32 using Nim. Library on top of esp-idf.
- [stm32f3](https://github.com/mwbrown/nim_stm32f3) - Run Nim on STM32F3 micro-controller (16KB of RAM).
- [boneIO](https://github.com/xyz32/boneIO) - GPIO implementation for the BeagleBone Black for Nim.


## Science

- [units](https://github.com/Udiknedormin/NimUnits) - Statically-typed quantity units library for the Nim language.
- [unchained](https://github.com/SciNim/Unchained) - A fully type safe, compile time only units library.
- [metric](https://github.com/mjendrusch/metric) - A small library providing type-level dimensional analysis.
- [orbits](https://github.com/treeform/orbits) - Orbital mechanics library for Nim.

## Data

### Database

#### Driver

- [nimongo](https://github.com/SSPkrolik/nimongo) - Pure Nim lang MongoDB driver.
- [asyncpg](https://github.com/cheatfate/asyncpg) - Asynchronous PostgreSQL driver for Nim.
- [anonimongo](https://github.com/mashingan/anonimongo) - Another Nim pure Mongo DB driver.
- [redis](https://github.com/nim-lang/redis) - Official redis wrapper for Nim.
- [amysql](https://github.com/bung87/amysql) - Async MySQL Connector write in pure Nim.
- [mycouch](https://github.com/hamidb80/mycouch) - Multisync CouchDB driver for Nim.
- [SQLiteral](https://github.com/olliNiinivaara/SQLiteral) - A high level SQLite API for Nim.
- [asyncmysql](https://github.com/tulayang/asyncmysql) - Asynchronous MySQL connector written in pure Nim.
- [sqlcipher](https://github.com/status-im/nim-sqlcipher) - SQLCipher wrapper.
- [litestore](https://github.com/h3rald/litestore) - A lightweight, self-contained, RESTful, searchable, multi-format NoSQL document store.
- [rocksdb](https://github.com/status-im/nim-rocksdb) - Nim wrapper for RocksDB, a persistent key-value store for flash and RAM Storage.


#### ORM

- [ormin](https://github.com/Araq/ormin) - Prepared SQL statement generator , A lightweight ORM.
- [allographer](https://github.com/itsumura-h/nim-allographer) - A query_builder/ORM library inspired by Laravel/PHP and Orator/Python for Nim.
- [gatabase](https://github.com/juancarlospaco/nim-gatabase) - Connection-Pooling Compile-Time ORM for Nim.
- [norm](https://github.com/moigagoo/norm) - Norm is an object-oriented, framework-agnostic ORM for Nim that supports SQLite and PostgreSQL.


### Data Structures

- [BitVector](https://github.com/MarcAzar/BitVector) - A high-performance Nim implementation of BitVectors.
- [rbtree](https://github.com/Nycto/RBTreeNim) - A Red/Black tree implementation in Nim.
- [quadtree](https://github.com/Nycto/QuadtreeNim) - A Quadtree library for Nim.
- [kdtree](https://github.com/jblindsay/kdtree) - A pure Nim k-d tree implementation for efficient spatial querying of point data.
- [RTree](https://github.com/StefanSalewski/RTree) - Generic R-tree implementation for Nim.
- [sorta](https://github.com/narimiran/sorta) - SortedTables in Nim, based on B-trees.
- [minmaxheap](https://github.com/StefanSalewski/minmaxheap) - A Nim implementation of a Minimum-Maximum heap.
- [BipBuffer](https://github.com/MarcAzar/BipBuffer) - A Nim implementation of Simon Cooke's Bib Buffer
- [bloom](https://github.com/boydgreenfield/nimrod-bloom) - Bloom filter implementation in Nim.
- [binaryheap](https://github.com/bluenote10/nim-heap) - Simple binary heap implementation in Nim.
- [faststack](https://github.com/Vladar4/FastStack) - Dynamically resizable data structure for fast iteration over large arrays of similar elements.
- [StashTable](https://github.com/olliNiinivaara/StashTable) - Concurrent hash tables for Nim.


### Data Processing

- [NimData](https://github.com/bluenote10/NimData) - DataFrame API written in Nim, enabling fast out-of-core data processing.
- [Datamancer](https://github.com/SciNim/Datamancer) - A dataframe library with a dplyr like API.
- [nimdataframe](https://github.com/qqtop/nimdataframe) - Dataframe for Nim.
- [nimhdf5](https://github.com/Vindaar/nimhdf5) - Wrapper and some simple high-level bindings for the HDF5 library for Nim.
- [mpfit](https://github.com/Vindaar/nim-mpfit) - A wrapper for the cMPFIT library for Nim.


### Parsing

- [parsetoml](https://github.com/NimParsers/parsetoml) - A Nim library to parse TOML files.
- [NimYAML](https://github.com/flyx/NimYAML) - YAML implementation for Nim.
- [Binarylang](https://github.com/sealmove/binarylang) - Extensible Nim DSL for creating binary parsers/encoders in a symmetric fashion.


### Serialization

- [serialization](https://github.com/status-im/nim-serialization) - A modern and extensible serialization framework for Nim.
- [json-serialization](https://github.com/status-im/nim-json-serialization) - Flexible JSON serialization not relying on run-time type information.
- [protobuf-serialization](https://github.com/status-im/nim-protobuf-serialization) - The nim-protobuf-serialization.
- [ssz-serialization](https://github.com/status-im/nim-ssz-serialization) - Nim implementation of Simple Serialize (SSZ) serialization and merkleization.
- [toml-serialization](https://github.com/status-im/nim-toml-serialization) - Flexible TOML serialization `not` relying on run-time type information.
- [frosty](https://github.com/disruptek/frosty) - Marshal native Nim objects via streams, sockets.
- [protobuf-nim](https://github.com/PMunch/protobuf-nim) - Protobuf implementation in pure Nim that leverages the power of the macro system to not depend on any external tools.
- [flatty](https://github.com/treeform/flatty) - Tools and serializer for plain flat binary files.
- [nesm](https://xomachine.gitlab.io/NESM/) - NESM is a tool that generates serialization and deserialization code for a given object.
- [bingo](https://github.com/planetis-m/bingo) - Binary serialization framework for Nim.


## Text

### String Types

- [ssostrings](https://github.com/planetis-m/ssostrings) - Small String Optimized (SSO) string implementation.
- [cowstrings](https://github.com/planetis-m/cowstrings) - Copy-On-Write string implementation according to nim-lang/RFCs#221.


### Translation

- [tinyslation](https://github.com/juancarlospaco/nim-tinyslation) - Text string translation from free online crowdsourced API.


### Markdown

- [HastyScribe](https://github.com/h3rald/hastyscribe) - Self-contained markdown compiler generating self-contained HTML documents.
- [markdown](https://github.com/soasme/nim-markdown) - A beautiful Markdown Parser in the Nim world.
- [lester](https://github.com/madprops/lester) - Create quick documents out of Markdown, into HTML.


## Multimedia

### Audio

- [paramidi](https://github.com/paranim/paramidi) - A Nim library for making MIDI music.
- [omni](https://github.com/vitreo12/omni) - A DSL for low-level audio programming.
- [wave](https://github.com/jiro4989/wave) - A tiny WAV sound module.
- [parasound](https://github.com/paranim/parasound) - A library to provide Nim bindings for miniaudio and dr_wav.


### Images

- [pixie](https://github.com/treeform/pixie) - A full-featured 2D graphics library for Nim.
- [nimpng](https://github.com/jangko/nimPNG) - PNG (Portable Network Graphics) decoder and encoder written in Nim.
- [nimbmp](https://github.com/jangko/nimBMP) - BMP decoder and encoder written in Nim.
- [nimsvg](https://github.com/bluenote10/NimSvg) - A Nim-based DSL allowing generation of SVG files and GIF animations.
- [pnm](https://github.com/jiro4989/pnm) - Library for PNM (Portable Anymap) in Nim.


### Documents

- [nimpdf](https://github.com/jangko/nimpdf) - PDF document writer, written in Nim.


## Algorithms

### Math

#### Symbolic

- [symbolicnim](https://github.com/HugoGranstrom/symbolicnim) - A symbolic library written purely in Nim.


#### FFT

- [impulse](https://github.com/SciNim/impulse) - Impulse will be a collection of primitives for signal processing (FFT, Convolutions).


#### Vector

- [vectorize](https://github.com/SciNim/vectorize) - SIMD vectorization backend.
- [vmath](https://github.com/treeform/vmath) - Math vector library for graphical things.


#### Matrix

- [neo](https://github.com/unicredit/neo) - A matrix library.
- [manu](https://github.com/planetis-m/manu) - Nim MAtrix NUmeric package - a port of JAMA, adapted to Nim.
- [nlopt](https://github.com/Vindaar/nimnlopt) - A wrapper for the nonlinear optimization library Nlopt.


### Deep Learning

- [Arraymancer](https://github.com/mratsim/Arraymancer) - A fast, ergonomic and portable tensor library in Nim with a deep learning focus for CPU, GPU, OpenCL and embedded devices.
- [NimTorch](https://github.com/sinkingsugar/nimtorch) - PyTorch - Python + Nim. A Nim front-end to PyTorch's native backend, combining Nim's speed, productivity and portability with PyTorch's latest implementations.
- [laser](https://github.com/numforge/laser) - Carefully-tuned primitives for running tensor and image-processing code on CPU, GPUs and accelerators.
<!-- - [flambeau](https://github.com/SciNim/flambeau) - Nim bindings to libtorch. -->


### Bigints

- [bigints](https://github.com/nim-lang/bigints) - Bigints for Nim.
- [stint](https://github.com/status-im/nim-stint) - Stack-based arbitrary-precision integers. Fast and portable with natural syntax for resource-restricted devices.
- [theo](https://github.com/SciNim/theo) - An optimized bigint and number theory library for Nim.


### Cryptography

- [nimcrypto](https://github.com/cheatfate/nimcrypto) - Nim cryptographic library.
- [nimaes](https://github.com/jangko/nimAES) - Advanced Encryption Standard, Rinjdael Algorithm written in Nim.
- [constantine](https://github.com/mratsim/constantine) - Constant time pairing-based of elliptic curve based cryptography and digital signatures.
- [bslcurve](https://github.com/status-im/nim-blscurve) - Nim implementation of BLS signature scheme (Boneh-Lynn-Shacham) over Barreto-Lynn-Scott (BLS) curve BLS12-381.
- [bncurve](https://github.com/status-im/nim-bncurve) - Nim implementation of Barreto-Naehrig pairing-friendly elliptic curve.
- [xxtea](https://github.com/xxtea/xxtea-nim) - XXTEA encryption algorithm library.
- [crc32](https://github.com/juancarlospaco/nim-crc32) - CRC32 for Nim. Just pass the thing you want to do CRC.
- [rollinghash](https://github.com/MarcAzar/RollingHash) - High performance Nim implementation of a Cyclic Polynomial Hash, aka BuzHash, and the Rabin-Karp algorithm.
- [murmurhash](https://github.com/cwpearson/nim-murmurhash) - Pure Nim implementation of MurmerHash
- [des](https://github.com/LucaWolf/des.nim) - DES/3DES, DUKPT and MAC in Nim.
- [shimsham](https://github.com/apense/shimsham) - A collection of hash functions, including JH, SHA-2, SHA-3, SipHash, Tiger, and Whirlpool.
- [NiMPC](https://github.com/markspanbroek/nimpc) - A secure multi-party computation (MPC) library for the Nim programming language.


### Blockchain

- [eth](https://github.com/status-im/nim-eth) - Common utilities for Ethereum.
- [nimbus-eth1](https://github.com/status-im/nimbus-eth1) - An Ethereum 1.0 and 2.0 client for resource-restricted devices.
- [nimbus-eth2](https://github.com/status-im/nimbus-eth2) - Efficient implementation of the Ethereum 2.0 blockchain.
- [evmc](https://github.com/status-im/nim-evmc) - Ethereum VM binary compatible interface.
- [ethash](https://github.com/status-im/nim-ethash) - A pure-Nim implementation of Ethash, the Ethereum proof of work.
- [contract-abi](https://github.com/status-im/nim-contract-abi) - Implements encoding of parameters according to the Ethereum Contract ABI specification.
<!-- - [web3](https://github.com/status-im/nim-web3) - The humble beginnings of a Nim library similar to web3.[js|py]. -->
<!-- - [abc](https://github.com/status-im/nim-abc) - Experimental asynchronous blockchain. -->
<!-- - [nitro](https://github.com/status-im/nim-nitro) - Highly experimental implementation of the Nitro statechannels protocol in Nim. -->


### Compression

- [zippy](https://github.com/guzba/zippy) - Pure Nim implementation of deflate, zlib, gzip and zip.
- [supersnappy](https://github.com/guzba/supersnappy) - Dependency-free and performant Nim Snappy implementation.
- [snappy](https://github.com/status-im/nim-snappy) - Nim implementation of Snappy compression algorithm.
- [zip](https://github.com/nim-lang/zip) - Wrapper for the zip library.


## User Interface

### Terminal

- [illwill](https://github.com/johnnovak/illwill) - Simple cross-platform terminal library inspired by (n)curses.
- [NimCx](https://github.com/qqtop/NimCx) - Color and utilities for the Linux terminal.
- [pager](https://git.sr.ht/~reesmichael1/nim-pager) - A simple command line pager library, written in Nim.


### Design

- [chroma](https://github.com/treeform/chroma) - Everything you want to do with colors, in Nim.
- [typography](https://github.com/treeform/typography) - Fonts, typesetting and rasterization.
- [trick](https://github.com/exelotl/trick) - Library for GBA/NDS image conversion, and more!


### GUI

#### Crossplatform

- [nimx](https://github.com/yglukhov/nimx) - Desktop, Mobile & Web GUI framework in Nim.
- [NiGui](https://github.com/trustable-code/NiGui) - A cross-platform, desktop GUI toolkit.
- [ui](https://github.com/nim-lang/ui) - Wrapper for libui. Beginnings of what might become Nim's official UI library.
- [iup](https://github.com/nim-lang/iup) - Wrapper for IUP. Beginnings of what might become Nim's official UI library.
- [SDL2](https://github.com/nim-lang/sdl2) - Official wrapper for SDL 2.x.
- [SDL2](https://github.com/Vladar4/sdl2_nim) - A wrapper for SDL 2.


#### Windows

- [wNim](https://github.com/khchen/wNim) - Nim's Windows GUI Framework.


#### Linux

- [gintro](https://github.com/StefanSalewski/gintro) - High-level GObject-Introspection based GTK3/GTK4 bindings for Nim.
- [nimqml](https://github.com/filcuc/nimqml) - Qt QML bindings for the Nim programming language.


#### Web Technology

- [Neel](https://github.com/Niminem/Neel) - A library for making Electron-like HTML/JS GUI apps.
- [nimview](https://github.com/marcomq/nimview) - A Nim/Webview based helper to create desktop/server applications with Nim and HTML/CSS.
- [webgui](https://github.com/juancarlospaco/webgui) - Web technologies based cross-platform GUI Framework with a dark theme.
- [fidget](https://github.com/treeform/fidget) - Figma based UI library for Nim, with HTML and OpenGL backends.
- [nsciter](https://github.com/Yardanico/nsciter) - High-level and low-level Nim wrapper for https://sciter.com.


#### Lightweight

- [imgui](https://github.com/nimgl/imgui) - ImGui bindings for Nim via cimgui.
- [nimAntTweakBar](https://github.com/krux02/nimAntTweakBar) - Wrapper for AntTweakBar.


### Plotting

- [ggplotnim](https://github.com/Vindaar/ggplotnim) - A port of ggplot2 for Nim.
- [plotly](https://github.com/SciNim/nim-plotly) - A plotly wrapper for Nim.
- [graph](https://github.com/stisa/graph) - A basic plotting library in Nim.
- [nimetry](https://github.com/refaqtor/nimetry) - Simple plotting in pure Nim.
- [nimgraphviz](https://github.com/Aveheuzed/nimgraphviz) - A Nim library for making graphs with GraphViz and DOT.


## Web

### Protocols

- [http-utils](https://github.com/status-im/nim-http-utils) - HTTP helper procedures.
- [puppy](https://github.com/treeform/puppy) - Puppy fetches HTML pages for Nim.
- [netty](https://github.com/treeform/netty) - Reliable UDP connection library for games in Nim.
- [json-rpc](https://github.com/status-im/nim-json-rpc) - Nim library for implementing JSON-RPC clients and servers.
- [nmqtt](https://github.com/zevv/nmqtt) - Native Nim MQTT client library.
- [libp2p](https://github.com/status-im/nim-libp2p) - A Nim implementation of the libp2p networking stack.
- [libp2p-dht](https://github.com/status-im/nim-libp2p-dht) - DHT based on the libp2p kademlia spec.
- [webdavclient](https://github.com/beshrkayali/webdavclient) - WebDAV client for Nim.
- [stomp](https://github.com/subsetpark/nim-stomp) - A pure-Nim client library for interacting with Stomp compliant message brokers.
- [presto](https://github.com/status-im/nim-presto) - An efficient REST API framework.


#### DNS

- [ndns](https://github.com/rockcavera/nim-ndns) - A pure Nim Domain Name System (DNS) client.
- [dnsprotocol](https://github.com/rockcavera/nim-dnsprotocol) - Domain Name System (DNS) protocol for Nim programming language.


#### QUIC

- [quic](https://github.com/status-im/nim-quic) - QUIC for Nim. This is very much a work in progress, and not yet in a usable state.
- [ngtcp2](https://github.com/status-im/nim-ngtcp2) - A wrapper around ngtcp2: an effort to implement IETF QUIC protocol.


#### Websockets

- [ws](https://github.com/treeform/ws) - Simple WebSocket library for Nim.
- [websocket.nim](https://github.com/niv/websocket.nim) - WebSockets for Nim.
- [news](https://github.com/Tormund/news) - Nim Easy WebSocket. Based on ws.
- [jswebsockets](https://juancarlospaco.github.io/nodejs/nodejs/jswebsockets) - WebSockets optimized for JavaScript targets.
- [websock](https://github.com/status-im/nim-websock) - An implementation of the WebSocket protocol for Nim.


#### Messaging

- [telebot.nim](https://github.com/ba0f3/telebot.nim) - Async client for Telegram Bot API in pure Nim.
- [dimscord](https://github.com/krisppurg/dimscord) - A Discord Bot & REST Library for Nim.
- [nwaku](https://github.com/status-im/nwaku) - Implementation of the Waku v1 and v2 protocols.
- [status](https://github.com/status-im/nim-status) - Nim implementation of the Status protocol.


### HTML Parsers

- [Nimquery](https://github.com/GULPF/nimquery) - Library for querying HTML using CSS selectors, like JavaScript's `document.querySelector`.


### HTTP Servers

- [httpbeast](https://github.com/dom96/httpbeast) - A highly performant, multi-threaded HTTP 1.1 server ([top 10 in FrameworkBenchmarks](https://www.techempower.com/benchmarks/#section=data-r18&test=json)).
- [httpx](https://github.com/ringabout/httpx) - Cross platform web server for Nim. A fork of httpbeast adding Windows support.
- [GuildenStern](https://github.com/olliNiinivaara/GuildenStern) - Genuinely multithreading integrated HTTP/1.1 + WebSocket v13 Server for POSIX-compliant OSes.
- [Mummy](https://github.com/guzba/mummy) - A multi-threaded HTTP 1.1 server with first-class support for WebSockets.
- [netkit](https://github.com/iocrate/netkit) - Out-of-the-box, stable and secure network facilities and utilities written in pure Nim.
- [jshttp2](https://juancarlospaco.github.io/nodejs/nodejs/jshttp2) - Async HTTPS 2.0 web server.


### Frameworks

- [Jester](https://github.com/dom96/jester) - The sinatra-like web framework for Nim. Jester provides a DSL for quickly creating web applications in Nim.
- [prologue](https://github.com/planety/prologue) - A fullstack web framework written in Nim.
- [whip](https://github.com/mattaylor/whip) - Simple and fast HTTP server for Nim based on httpbeast and nest for high performance routing.
- [basolato](https://github.com/itsumura-h/nim-basolato) - A fullstack web framework for Nim based on Jester.
- [karax](https://github.com/karaxnim/karax) - A framework for developing single page applications in Nim.
- [akane](https://github.com/Ethosa/akane) - An asynchronous web framework.
- [scorper](https://github.com/bung87/scorper) - A micro and elegant web framework written in Nim.
- [starlight](https://github.com/planety/starlight) - Flask-like web framework written in Nim.
- [rosencrantz](https://github.com/andreaferretti/rosencrantz) - DSL to write web servers, inspired by Spray and its successor Akka HTTP.
- [nim_websitecreator](https://github.com/ThomasTJdev/nim_websitecreator) - Nim fullstack website framework - deploy a website within minutes.


### Template Engines

- [smalte](https://github.com/roquie/smalte) - It is a dead simple and lightweight template engine. Specially designed for configure application before start in Docker.
- [html-dsl](https://github.com/juancarlospaco/nim-html-dsl) - Nim HTML DSL.
- [templates](https://github.com/onionhammer/nim-templates) - A simple string templating library for Nim.
- [nimja](https://github.com/enthus1ast/nimja) - Typed and compiled template engine inspired by jinja2, twig and onionhammer/nim-templates for Nim.
- [mustache](https://github.com/soasme/nim-mustache) - A full implementation of v1.2.1 of the Mustache spec.


### Authentication

- [httpauth](https://github.com/FedericoCeratto/nim-httpauth) - HTTP Authentication library for Nim.
- [oauth](https://github.com/CORDEA/oauth) - OAuth library for Nim.


## Game Development

### Game Libraries

- [nimgl](https://github.com/nimgl/nimgl) - NimGL is a Nim library that offers bindings for popular libraries used in computer graphics.
- [glm](https://github.com/stavenko/nim-glm) - Port of the popular glm C++ library to Nim.
- [GLAD](https://github.com/Dav1dde/glad) - Multi-Language Vulkan/GL/GLES/EGL/GLX/WGL Loader-Generator based on the official specs.
- [enu](https://github.com/dsrw/enu) - 3D live coding with a Logo-like DSL for Godot, implemented in Nim.


### Game Frameworks

- [nico](https://github.com/ftsf/nico) - Nim Game Framework based on Pico-8.
- [natu](https://github.com/exelotl/natu) - Toolkit for writing Game Boy Advance games in Nim.
- [naylib](https://github.com/planetis-m/naylib) - safe Raylib wrapper.
- [c4](https://github.com/c0ntribut0r/cat-400) - Modular and extensible 2D and 3D game framework for Nim.
- [paranim](https://github.com/paranim/paranim) - A game library based around carefully chosen abstractions.


### Game Engines

- [NimForUE](https://github.com/jmgomez/NimForUE) - Nim plugin for UE5 with native performance, hot reloading and full interop that sits between C++ and Blueprints.
- [nimgame2](https://github.com/Vladar4/nimgame2) - A simple 2D game engine for Nim.
- [norx](https://github.com/tankfeud/norx) - A complete wrapper of the ORX 2.5D cross platform game engine library.
- [godot-nim](https://github.com/pragmagic/godot-nim) - Nim bindings for Godot Engine.
- [rod](https://github.com/yglukhov/rod) - Cross-platform 2D and 3D game engine.
- [frag](https://github.com/Tail-Wag-Games/frag) - Cross-platform 2D/3D game engine.


### Rules Engines

- [turn_based_game](https://github.com/JohnAD/turn_based_game) - A game rules engine for simulating or playing turn-based games.
- [pararules](https://github.com/paranim/pararules) - A RETE-based rules engine made for games.


## Development Tools


### Editor Integration

- [Editor Support](https://github.com/nim-lang/Nim/wiki/editor-support) - Official list of editor plugins for Nim.
- [nimlsp](https://github.com/PMunch/nimlsp) - The Language Server Protocol implementation for Nim.
- [nim.nvim](https://github.com/alaviss/nim.nvim) - Nim plugin for NeoVim.
- [vscode-nim](https://github.com/saem/vscode-nim) - Language support for the Nim programming language for VS Code.


### REPL

- [INim](https://github.com/AndreiRegiani/INim) - Interactive Nim Shell.
- [jupyternim](https://github.com/stisa/jupyternim) - A Jupyter kernel for Nim.


### Binding Generators

- [c2nim](https://github.com/nim-lang/c2nim) - c2nim is a tool to translate Ansi C code to Nim.
- [nimgen](https://github.com/genotrance/nimgen) - nimgen is a helper for c2nim to simplify and automate the wrapping of C libraries. Superseded by nimterop.
- [nimterop](https://github.com/nimterop/nimterop) - A Nim package that leverages tree-sitter to make C/C++ interop seamless. Superseded by Futhark.
- [Futhark](https://github.com/PMunch/futhark) - Automatic wrapping of C headers in Nim with libclang.
- [nimpy](https://github.com/yglukhov/nimpy) - Generate Python wrappers and call Python from Nim.
- [jnim](https://github.com/yglukhov/jnim) - Nim - Java bridge.
<!-- - [rnim](https://github.com/SciNim/rnim) - A bridge between R and Nim. Currently this is a barely working prototype. -->


### Build Systems / Package Management

- [ChooseNim](https://github.com/dom96/choosenim) - Installing and switching between Nim versions (à la rustup, pyenv).
- [Nake](https://github.com/fowlmouth/nake) - Describe your Nim builds as tasks.
- [Nawabs](https://github.com/Araq/nawabs) - A build system that throws away version numbering in favor of git hashes.
- [Nimble](https://github.com/nim-lang/nimble) - Nimble can be used as a build system.
- [nimph](https://github.com/disruptek/nimph) - Nim package hierarchy manager from the future.
- [nimby](https://github.com/treeform/nimby) - A very simple and unofficial package manager for Nim.
- [nifty](https://github.com/h3rald/nifty) - A decentralized pseudo package manager and script runner.
- [nsis](https://github.com/nim-libs/nsis) - Nim programming language setup tool.


### Logging

- [chronicles](https://github.com/status-im/nim-chronicles) - A crafty implementation of structured logging for Nim.
- [morelogging](https://github.com/FedericoCeratto/nim-morelogging) - Logging library for Nim.


### Testing

- [faker](https://github.com/jiro4989/faker) - A Nim package that generates fake data for you.
- [balls](https://github.com/disruptek/balls) - A unittest macro to save the world, or at least your Sunday.
- [einheit](https://github.com/jyapayne/einheit) - A Nim unit testing library inspired by Python's unit tests.
- [asynctest](https://github.com/status-im/asynctest) - Complements the standard unittest module in Nim to allow testing of asynchronous code.
- [unittest2](https://github.com/status-im/nim-unittest2) - Fork of the ""unittest"" Nim module focusing on parallel test execution, test-level scoping and strict exception handling.


### Fuzzing

- [drchaos](https://github.com/status-im/nim-drchaos) - A powerful and easy-to-use fuzzing framework in Nim for C/C++/Obj-C targets.
- [libfuzzer](https://github.com/planetis-m/libfuzzer) - LibFuzzer's interface bindings.


### Benchmarking

- [golden](https://github.com/disruptek/golden) - A benchmark for compile-time and/or runtime Nim.
- [timeit](https://github.com/xflywind/timeit) - Measuring execution times written by Nim.
- [criterion](https://github.com/disruptek/criterion) - Statistic-driven micro-benchmark framework.
- [stopwatch](https://gitlab.com/define-private-public/stopwatch) - A fork of rbmz's stopwatch that adds extra features.
- [nimbench](https://github.com/ivankoster/nimbench) - A micro benchmark module for Nim.


### Command-Line Interface Automation

- [cligen](https://github.com/c-blake/cligen) - Infer & generate command-line interace/option/argument parsers.
- [docopt.nim](https://github.com/docopt/docopt.nim) - Command-line args parser.
- [argparse](https://github.com/iffy/nim-argparse) - Argument parsing for Nim.
- [clapfn](https://github.com/oliversandli/clapfn) - Argument parsing similar to Python's argparse.
- [cliche](https://github.com/juancarlospaco/cliche) - AutoMagic CLI argument parsing is so cliché.
- [loki](https://github.com/beshrkayali/loki) - A small library for writing line-oriented command interpreters in Nim.
- [confutils](https://github.com/status-im/nim-confutils) - Simplified handling of command line options and config files


## Resources

### Books

- [Nim in Action](https://book.picheta.me/) - Book in Manning's ""in Action"" series, teaching Nim through 3 practical projects including CLI chat apps, web apps and parsers.
- [Computer Programming with Nim](https://ssalewski.de/nimprogramming.html) - A gentle introduction to the Nim programming language.
- [Nim Basics](https://narimiran.github.io/nim-basics/) - Tutorial for beginners and people just starting with Nim.
- [Nim Style Guide](https://status-im.github.io/nim-style-guide/) - Status style guide for the Nim language.
- [Mastering Nim](https://www.amazon.com/Mastering-Nim-complete-programming-language/dp/B0B4R7B9YX) - A complete guide to the programming language.


### Blogs

- [Nim Blog](http://nim-lang.org/blog.html) - Official Nim blog.
- [Goran Krampe](http://goran.krampe.se/nim/) - Wrapping C, Arduino, performance, links.
- [HookRace](https://hookrace.net/blog/nim/) - Blog with multiple articles on Nim.
- [Rants from the Ballmer Peak](https://gradha.github.io/tags/nim.html) - Posts on Nim and other languages.
- [Yuriy Glukhov's blog](https://yglukhov.github.io/) - Making and shipping a game in Nim.
- [Araq's Musings](https://nim-lang.org/araq) - Blog on Nim from the creator himself.
- [Nim on dev.to](https://dev.to/t/nim) - Nim blogs on `dev.to`.


### Community

- [The Nim forum](http://forum.nim-lang.org/)
- [The Nim IRC channel](http://webchat.freenode.net/?channels=nim)
- [The Nim Gitter channel](https://gitter.im/nim-lang/Nim)
- [The Nim Discord channel](https://discord.gg/ptW3Rb3)
- [The Nim mailing list (forum archive)](https://www.mail-archive.com/nim-general@lists.nim-lang.org/)
- [The Nim subreddit](http://reddit.com/r/nim)
- [The Nim Telegram](https://t.me/nim_lang)
- [The Nim Telegram in Spanish](https://t.me/NimArgentina)
- [The Nim Matrix room](https://matrix.to/#/#nim-lang:matrix.org)


### Tutorials

- [Nim Days](https://xmonader.github.io/nimdays/) - A project to document my journey with Nim with mini applications, libraries documented from A to Z and also to provide new Nim users with some extra in depth information.
- [How I start](https://howistart.org/posts/nim) - Great guide going from 0 to a bf interpreter and then a bf to Nim compiler.
- [Learn Nim in Y minutes](https://learnxinyminutes.com/docs/nim/) - Whirlwind tour.
- [Nim by Example](https://nim-by-example.github.io) - Series of pages and examples for learning the Nim programming language.
- [Nim for Python programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers) - Guide to Nim for people with experience in Python.
- [Nim on Rosetta Code](https://rosettacode.org/wiki/Category:Nim) - Thousands of solutions for various tasks using Nim.
- [Nim Memory](http://zevv.nl/nim-memory/) - A small tutorial explaining how Nim stores data in memory.
- [Nim ARC](http://zevv.nl/nim-memory/nim-arc.html) - A friendly explanation of ARC and its implications for the programmer.
- [nimNx](https://github.com/dkgitdev/nimNx) - A Nintendo Switch Homebrew example project, written in Nim.
- [nimNxStatic](https://github.com/dkgitdev/nimNxStatic) - A static library example aiming to help integrate Nim code into the current Homebrew C projects for Nintendo Switch 


### Videos

- [Nim's Official Channel](https://www.youtube.com/channel/UCDAYn_VFt0VisL5-1a5Dk7Q/videos) - Official videos introduce the powerful and interesting part in Nim language.
- [Nim for Beginners](https://www.youtube.com/user/kiloneie/playlists) - This is a video series meant to teach people programming in Nim to people who have never programmed before, or are new to Nim.
- [Make a website with Nim](https://www.youtube.com/watch?v=ndzlVRWqT2E&list=PL6RpFCvmb5SGw7aJK1E4goBxpMK3NvkON) - This is a video series meant to teach people make a website with Nim using `jester`.
- [Learning Nim](https://www.youtube.com/watch?v=I_Y94G37iR4&list=PLu-ydI-PCl0PqxiYXQMmLh7wjQKm5Cz-H) - Tutorial video series on learning Nim showcasing various features of the language and its libraries.
- [araq twitch](https://www.twitch.tv/araq4k) - The live broadcast regarding Nim language.
- [alehander42 twitch](https://www.twitch.tv/alehander42) - The live broadcast regarding Nim language.
- [clyybber twitch](https://www.twitch.tv/clyybber) - The live broadcast regarding Nim language.
- [d0m96 twitch](https://www.twitch.tv/d0m96) - The live broadcast regarding Nim language.
- [disruptek twitch](https://www.twitch.tv/disruptek) - The live broadcast regarding Nim language.
- [yardanico twitch](https://www.twitch.tv/yardanico) - The live broadcast regarding Nim language.
- [zachary_carter twitch](https://www.twitch.tv/zachary_carter) - The live broadcast regarding Nim language.

---

### Footnotes
*Awesome-Nim logo is based on the ""Nim Crown"" logo by Joseph Wecker, used with permission from the Nim project.*
",,,,,,,,,,,,,,,,,,,,,,,0.6055936161,"Nim is a statically typed compiled systems programming language. Good for
everything from shell scripting to web front & backend, to ML, HPC, and
embedded. A curated list of awesome Nim frameworks, libraries, software and
resources. For more information on Nim, visit: http://nim-lang.org."
2511,Learning operating system development using Linux kernel and Raspberry Pi,"# Learning operating system development using Linux kernel and Raspberry Pi

This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS or just RPi OS. The RPi OS source code is largely based on [Linux kernel](https://github.com/torvalds/linux), but the OS has very limited functionality and supports only [Raspberry PI 3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/). 

Each lesson is designed in such a way that it first explains how some kernel feature is implemented in the RPi OS, and then it tries to demonstrate how the same functionality works in the Linux kernel. Each lesson has a corresponding folder in the [src](https://github.com/s-matyukevich/raspberry-pi-os/tree/master/src) directory, which contains a snapshot of the OS source code at the time when the lesson had just been completed. This allows the introduction of new concepts gracefully and helps readers to follow the evolution of the RPi OS. Understanding this guide doesn't require any specific OS development skills.

For more information about project goals and history, please read the [Introduction](docs/Introduction.md). The project is still under active development, if you are willing to participate - please read the [Contribution guide](docs/Contributions.md).

<p>
  <a href=""https://twitter.com/RPi_OS"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/twitter.png"" alt=""Follow @RPi_OS on twitter"" height=""34"" >
  </a>

  <a href=""https://www.facebook.com/groups/251043708976964/"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/facebook.png"" alt=""Follow Raspberry Pi OS on facebook"" height=""34"" >
  </a>

  <a href=""https://join.slack.com/t/rpi-os/shared_invite/enQtNDQ1NTg2ODc1MDEwLWVjMTZlZmMyZDE4OGEyYmMzNTY1YjljZjU5YWI1NDllOWEwMjI5YzVkM2RiMzliYjEzN2RlYmUzNzBiYmQyMjY"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/slack.png"" alt=""Join Raspberry Pi OS in slack"" height=""34"" >
  </a>

  <a href=""https://www.producthunt.com/upcoming/raspberry-pi-os"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/subscribe.png"" alt=""Subscribe for updates"" height=""34"" >
  </a>
</p>

## Table of Contents

* **[Introduction](docs/Introduction.md)**
* **[Contribution guide](docs/Contributions.md)**
* **[Prerequisites](docs/Prerequisites.md)**
* **Lesson 1: Kernel Initialization** 
  * 1.1 [Introducing RPi OS, or bare metal ""Hello, world!""](docs/lesson01/rpi-os.md)
  * Linux
    * 1.2 [Project structure](docs/lesson01/linux/project-structure.md)
    * 1.3 [Kernel build system](docs/lesson01/linux/build-system.md) 
    * 1.4 [Startup sequence](docs/lesson01/linux/kernel-startup.md)
  * 1.5 [Exercises](docs/lesson01/exercises.md)
* **Lesson 2: Processor initialization**
  * 2.1 [RPi OS](docs/lesson02/rpi-os.md)
  * 2.2 [Linux](docs/lesson02/linux.md)
  * 2.3 [Exercises](docs/lesson02/exercises.md)
* **Lesson 3: Interrupt handling**
  * 3.1 [RPi OS](docs/lesson03/rpi-os.md)
  * Linux
    * 3.2 [Low level exception handling](docs/lesson03/linux/low_level-exception_handling.md) 
    * 3.3 [Interrupt controllers](docs/lesson03/linux/interrupt_controllers.md)
    * 3.4 [Timers](docs/lesson03/linux/timer.md)
  * 3.5 [Exercises](docs/lesson03/exercises.md)
* **Lesson 4: Process scheduler**
  * 4.1 [RPi OS](docs/lesson04/rpi-os.md) 
  * Linux
    * 4.2 [Scheduler basic structures](docs/lesson04/linux/basic_structures.md)
    * 4.3 [Forking a task](docs/lesson04/linux/fork.md)
    * 4.4 [Scheduler](docs/lesson04/linux/scheduler.md)
  * 4.5 [Exercises](docs/lesson04/exercises.md)
* **Lesson 5: User processes and system calls** 
  * 5.1 [RPi OS](docs/lesson05/rpi-os.md) 
  * 5.2 [Linux](docs/lesson05/linux.md)
  * 5.3 [Exercises](docs/lesson05/exercises.md)
* **Lesson 6: Virtual memory management**
  * 6.1 [RPi OS](docs/lesson06/rpi-os.md) 
  * 6.2 Linux (In progress)
  * 6.3 [Exercises](docs/lesson06/exercises.md)
* **Lesson 7: Signals and interrupt waiting** (To be done)
* **Lesson 8: File systems** (To be done)
* **Lesson 9: Executable files (ELF)** (To be done)
* **Lesson 10: Drivers** (To be done)
* **Lesson 11: Networking** (To be done)

",,,,,,,,,,,,,,,,,,,,,,,0.2478305143,"This repository contains a step-by-step guide that teaches how to create a
simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS
or just RPi OS. Understanding this guide doesn't require any specific OS
development skills. The project is still under active development, if you are
willing to participate."
3235,Native Python WFDB package,"# The WFDB Python Package

![signals](https://raw.githubusercontent.com/MIT-LCP/wfdb-python/main/demo-img.png)

[![tests workflow](https://github.com/MIT-LCP/wfdb-python/actions/workflows/run-tests.yml/badge.svg)](https://github.com/MIT-LCP/wfdb-python/actions?query=workflow%3Arun-tests+event%3Apush+branch%3Amain)
[![PyPI Downloads](https://img.shields.io/pypi/dm/wfdb.svg?label=PyPI%20downloads)](https://pypi.org/project/wfdb/)
[![PhysioNet Project](https://img.shields.io/badge/DOI-10.13026%2Fegpf--2788-blue)](https://doi.org/10.13026/egpf-2788)
[![Supported Python Versions](https://img.shields.io/pypi/pyversions/wfdb.svg)](https://pypi.org/project/wfdb)

## Introduction

A Python-native package for reading, writing, processing, and plotting physiologic signal and annotation data. The core I/O functionality is based on the Waveform Database (WFDB) [specifications](https://github.com/wfdb/wfdb-spec/).

This package is heavily inspired by the original [WFDB Software Package](https://www.physionet.org/content/wfdb/), and initially aimed to replicate many of its command-line APIs. However, the projects are independent, and there is no promise of consistency between the two, beyond each package adhering to the core specifications.

## Documentation and Usage

See the [documentation site](http://wfdb.readthedocs.io) for the public APIs.

See the [demo.ipynb](https://github.com/MIT-LCP/wfdb-python/blob/main/demo.ipynb) notebook file for example use cases.

## Installation

The distribution is hosted on PyPI at: <https://pypi.python.org/pypi/wfdb/>. The package can be directly installed from PyPI using either pip or poetry:

```sh
pip install wfdb
poetry add wfdb
```

On Linux systems, accessing _compressed_ WFDB signal files requires installing `libsndfile`, by running `sudo apt-get install libsndfile1` or `sudo yum install libsndfile`. Support for Apple M1 systems is a work in progess (see <https://github.com/bastibe/python-soundfile/issues/310> and <https://github.com/bastibe/python-soundfile/issues/325>).

The development version is hosted at: <https://github.com/MIT-LCP/wfdb-python>. This repository also contains demo scripts and example data. To install the development version, clone or download the repository, navigate to the base directory, and run:

```sh
# Without dev dependencies
pip install .
poetry install

# With dev dependencies
pip install "".[dev]""
poetry install -E dev

# Install the dependencies only
poetry install -E dev --no-root
```

**See the [note](https://github.com/MIT-LCP/wfdb-python/blob/main/DEVELOPING.md#package-and-dependency-management) about dev dependencies.**

## Developing

Please see the [DEVELOPING.md](https://github.com/MIT-LCP/wfdb-python/blob/main/DEVELOPING.md) document for contribution/development instructions.

## Citing

When using this resource, please cite the software [publication](https://physionet.org/content/wfdb-python/) on PhysioNet.
",,,,,,,,,,,,,,,,,,,,,,,0.1049230477,"A Python-native package for reading, writing, processing, and plotting
physiologic signal and annotation data. The core I/O functionality is based on
the Waveform Database (WFDB) The package can be directly installed from PyPI
using either pip or poetry. Support for Apple M1 systems is a work in progess
(see <https://github.com/bastibe/python-soundfile/issues/310> and
<http://www.physionet.org/content/wfdb/)."
1442,Image Sharing Social Media App,"# ShareMe Social Media Application
![ShareMe](https://i.ibb.co/8cLfj3X/image.png)

## Introduction
This is a code repository for the corresponding video tutorial.

Using React, Tailwind & Sanity you'll learn how to build a Full Stack Social Media Application - from start to finish.

## Stay up to date with new projects
New major projects coming soon, subscribe to the mailing list to stay up to date https://jsmasterypro.com/newsletter
",,,,,,,,,,,,,,,,,,,,,,,0.2520261479,"This is a code repository for the corresponding video tutorial. Use React,
Tailwind & Sanity to build a Full Stack Social Media Application - from start to
finish. New major projects coming soon, subscribe to the mailing list to stay up
to date https://jsmasterypro.com/newsletter. Follow us on Twitter @JsmasteryPro
and @jsmasterpro on Facebook. We're also on Instagram and Twitter. We use the
hashtag #JSmasteryPro to promote our products."
2343,"Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.","<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/README_1200x800.gif"">
</p>

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/coversmall_alt.png"">
  <br/>
</p>

# data-science-ipython-notebooks

## Index

* [deep-learning](#deep-learning)
    * [tensorflow](#tensor-flow-tutorials)
    * [theano](#theano-tutorials)
    * [keras](#keras-tutorials)
    * [caffe](#deep-learning-misc)
* [scikit-learn](#scikit-learn)
* [statistical-inference-scipy](#statistical-inference-scipy)
* [pandas](#pandas)
* [matplotlib](#matplotlib)
* [numpy](#numpy)
* [python-data](#python-data)
* [kaggle-and-business-analyses](#kaggle-and-business-analyses)
* [spark](#spark)
* [mapreduce-python](#mapreduce-python)
* [amazon web services](#aws)
* [command lines](#commands)
* [misc](#misc)
* [notebook-installation](#notebook-installation)
* [credits](#credits)
* [contributing](#contributing)
* [contact-info](#contact-info)
* [license](#license)

<br/>
<p align=""center"">
  <img src=""http://i.imgur.com/ZhKXrKZ.png"">
</p>

## deep-learning

IPython Notebook(s) demonstrating deep learning functionality.

<br/>
<p align=""center"">
  <img src=""https://avatars0.githubusercontent.com/u/15658638?v=3&s=100"">
</p>

### tensor-flow-tutorials

Additional TensorFlow tutorials:

* [pkmital/tensorflow_tutorials](https://github.com/pkmital/tensorflow_tutorials)
* [nlintz/TensorFlow-Tutorials](https://github.com/nlintz/TensorFlow-Tutorials)
* [alrojo/tensorflow-tutorial](https://github.com/alrojo/tensorflow-tutorial)
* [BinRoot/TensorFlow-Book](https://github.com/BinRoot/TensorFlow-Book)
* [tuanavu/tensorflow-basic-tutorials](https://github.com/tuanavu/tensorflow-basic-tutorials)

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [tsf-basics](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/1_intro/basic_operations.ipynb) | Learn basic operations in TensorFlow, a library for various kinds of perceptual and language understanding tasks from Google. |
| [tsf-linear](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/linear_regression.ipynb) | Implement linear regression in TensorFlow. |
| [tsf-logistic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/logistic_regression.ipynb) | Implement logistic regression in TensorFlow. |
| [tsf-nn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/nearest_neighbor.ipynb) | Implement nearest neighboars in TensorFlow. |
| [tsf-alex](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/alexnet.ipynb) | Implement AlexNet in TensorFlow. |
| [tsf-cnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/convolutional_network.ipynb) | Implement convolutional neural networks in TensorFlow. |
| [tsf-mlp](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/multilayer_perceptron.ipynb) | Implement multilayer perceptrons in TensorFlow. |
| [tsf-rnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/recurrent_network.ipynb) | Implement recurrent neural networks in TensorFlow. |
| [tsf-gpu](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/4_multi_gpu/multigpu_basics.ipynb) | Learn about basic multi-GPU computation in TensorFlow. |
| [tsf-gviz](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/5_ui/graph_visualization.ipynb) | Learn about graph visualization in TensorFlow. |
| [tsf-lviz](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/5_ui/loss_visualization.ipynb) | Learn about loss visualization in TensorFlow. |

### tensor-flow-exercises

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [tsf-not-mnist](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/1_notmnist.ipynb) | Learn simple data curation by creating a pickle with formatted datasets for training, development and testing in TensorFlow. |
| [tsf-fully-connected](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/2_fullyconnected.ipynb) | Progressively train deeper and more accurate models using logistic regression and neural networks in TensorFlow. |
| [tsf-regularization](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/3_regularization.ipynb) | Explore regularization techniques by training fully connected networks to classify notMNIST characters in TensorFlow. |
| [tsf-convolutions](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/4_convolutions.ipynb) | Create convolutional neural networks in TensorFlow. |
| [tsf-word2vec](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/5_word2vec.ipynb) | Train a skip-gram model over Text8 data in TensorFlow. |
| [tsf-lstm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/6_lstm.ipynb) | Train a LSTM character model over Text8 data in TensorFlow. |

<br/>
<p align=""center"">
  <img src=""http://www.deeplearning.net/software/theano/_static/theano_logo_allblue_200x46.png"">
</p>

### theano-tutorials

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [theano-intro](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/intro_theano/intro_theano.ipynb) | Intro to Theano, which allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It can use GPUs and perform efficient symbolic differentiation. |
| [theano-scan](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/scan_tutorial/scan_tutorial.ipynb) | Learn scans, a mechanism to perform loops in a Theano graph. |
| [theano-logistic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/intro_theano/logistic_regression.ipynb) | Implement logistic regression in Theano. |
| [theano-rnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/rnn_tutorial/simple_rnn.ipynb) | Implement recurrent neural networks in Theano. |
| [theano-mlp](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/theano_mlp/theano_mlp.ipynb) | Implement multilayer perceptrons in Theano. |

<br/>
<p align=""center"">
  <img src=""http://i.imgur.com/L45Q8c2.jpg"">
</p>

### keras-tutorials

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| keras | Keras is an open source neural network library written in Python. It is capable of running on top of either Tensorflow or Theano. |
| [setup](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/0.%20Preamble.ipynb) | Learn about the tutorial goals and how to set up your Keras environment. |
| [intro-deep-learning-ann](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.1%20Introduction%20-%20Deep%20Learning%20and%20ANN.ipynb) | Get an intro to deep learning with Keras and Artificial Neural Networks (ANN). |
| [theano](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.2%20Introduction%20-%20Theano.ipynb) | Learn about Theano by working with weights matrices and gradients. |
| [keras-otto](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.3%20Introduction%20-%20Keras.ipynb) | Learn about Keras by looking at the Kaggle Otto challenge. |
| [ann-mnist](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.4%20%28Extra%29%20A%20Simple%20Implementation%20of%20ANN%20for%20MNIST.ipynb) | Review a simple implementation of ANN for MNIST using Keras. |
| [conv-nets](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.1%20Supervised%20Learning%20-%20ConvNets.ipynb) | Learn about Convolutional Neural Networks (CNNs) with Keras. |
| [conv-net-1](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.2.1%20Supervised%20Learning%20-%20ConvNet%20HandsOn%20Part%20I.ipynb) | Recognize handwritten digits from MNIST using Keras - Part 1. |
| [conv-net-2](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.2.2%20Supervised%20Learning%20-%20ConvNet%20HandsOn%20Part%20II.ipynb) | Recognize handwritten digits from MNIST using Keras - Part 2. |
| [keras-models](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.3%20Supervised%20Learning%20-%20Famous%20Models%20with%20Keras.ipynb) | Use pre-trained models such as VGG16, VGG19, ResNet50, and Inception v3 with Keras. |
| [auto-encoders](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.1%20Unsupervised%20Learning%20-%20AutoEncoders%20and%20Embeddings.ipynb) | Learn about Autoencoders with Keras. |
| [rnn-lstm](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.2%20RNN%20and%20LSTM.ipynb) | Learn about Recurrent Neural Networks (RNNs) with Keras. |
| [lstm-sentence-gen](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.3%20%28Extra%29%20LSTM%20for%20Sentence%20Generation.ipynb) |  Learn about RNNs using Long Short Term Memory (LSTM) networks with Keras. |

### deep-learning-misc

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [deep-dream](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/deep-dream/dream.ipynb) | Caffe-based computer vision program which uses a convolutional neural network to find and enhance patterns in images. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/scikitlearn.png"">
</p>

## scikit-learn

IPython Notebook(s) demonstrating scikit-learn functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [intro](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-intro.ipynb) | Intro notebook to scikit-learn.  Scikit-learn adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. |
| [knn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-intro.ipynb#K-Nearest-Neighbors-Classifier) | Implement k-nearest neighbors in scikit-learn. |
| [linear-reg](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-linear-reg.ipynb) | Implement linear regression in scikit-learn. |
| [svm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-svm.ipynb) | Implement support vector machine classifiers with and without kernels in scikit-learn. |
| [random-forest](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-random-forest.ipynb) | Implement random forest classifiers and regressors in scikit-learn. |
| [k-means](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-k-means.ipynb) | Implement k-means clustering in scikit-learn. |
| [pca](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-pca.ipynb) | Implement principal component analysis in scikit-learn. |
| [gmm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-gmm.ipynb) | Implement Gaussian mixture models in scikit-learn. |
| [validation](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-validation.ipynb) | Implement validation and model selection in scikit-learn. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/scipy.png"">
</p>

## statistical-inference-scipy

IPython Notebook(s) demonstrating statistical inference with SciPy functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| scipy | SciPy is a collection of mathematical algorithms and convenience functions built on the Numpy extension of Python. It adds significant power to the interactive Python session by providing the user with high-level commands and classes for manipulating and visualizing data. |
| [effect-size](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/effect_size.ipynb) | Explore statistics that quantify effect size by analyzing the difference in height between men and women.  Uses data from the Behavioral Risk Factor Surveillance System (BRFSS) to estimate the mean and standard deviation of height for adult women and men in the United States. |
| [sampling](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/sampling.ipynb) | Explore random sampling by analyzing the average weight of men and women in the United States using BRFSS data. |
| [hypothesis](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/hypothesis.ipynb) | Explore hypothesis testing by analyzing the difference of first-born babies compared with others. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/pandas.png"">
</p>

## pandas

IPython Notebook(s) demonstrating pandas functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [pandas](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/pandas.ipynb) | Software library written for data manipulation and analysis in Python. Offers data structures and operations for manipulating numerical tables and time series. |
| [github-data-wrangling](https://github.com/donnemartin/viz/blob/master/githubstats/data_wrangling.ipynb) | Learn how to load, clean, merge, and feature engineer by analyzing GitHub data from the [`Viz`](https://github.com/donnemartin/viz) repo. |
| [Introduction-to-Pandas](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.00-Introduction-to-Pandas.ipynb) | Introduction to Pandas. |
| [Introducing-Pandas-Objects](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.01-Introducing-Pandas-Objects.ipynb) | Learn about Pandas objects. |
| [Data Indexing and Selection](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.02-Data-Indexing-and-Selection.ipynb) | Learn about data indexing and selection in Pandas. |
| [Operations-in-Pandas](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.03-Operations-in-Pandas.ipynb) | Learn about operating on data in Pandas. |
| [Missing-Values](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.04-Missing-Values.ipynb) | Learn about handling missing data in Pandas. |
| [Hierarchical-Indexing](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.05-Hierarchical-Indexing.ipynb) | Learn about hierarchical indexing in Pandas. |
| [Concat-And-Append](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.06-Concat-And-Append.ipynb) | Learn about combining datasets: concat and append in Pandas. |
| [Merge-and-Join](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.07-Merge-and-Join.ipynb) | Learn about combining datasets: merge and join in Pandas. |
| [Aggregation-and-Grouping](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.08-Aggregation-and-Grouping.ipynb) | Learn about aggregation and grouping in Pandas. |
| [Pivot-Tables](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.09-Pivot-Tables.ipynb) | Learn about pivot tables in Pandas. |
| [Working-With-Strings](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.10-Working-With-Strings.ipynb) | Learn about vectorized string operations in Pandas. |
| [Working-with-Time-Series](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.11-Working-with-Time-Series.ipynb) | Learn about working with time series in pandas. |
| [Performance-Eval-and-Query](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.12-Performance-Eval-and-Query.ipynb) | Learn about high-performance Pandas: eval() and query() in Pandas. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/matplotlib.png"">
</p>

## matplotlib

IPython Notebook(s) demonstrating matplotlib functionality.

| Notebook | Description |
|-----------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| [matplotlib](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/matplotlib.ipynb) | Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. |
| [matplotlib-applied](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/matplotlib-applied.ipynb) | Apply matplotlib visualizations to Kaggle competitions for exploratory data analysis.  Learn how to create bar plots, histograms, subplot2grid, normalized plots, scatter plots, subplots, and kernel density estimation plots. |
| [Introduction-To-Matplotlib](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.00-Introduction-To-Matplotlib.ipynb) | Introduction to Matplotlib. |
| [Simple-Line-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.01-Simple-Line-Plots.ipynb) | Learn about simple line plots in Matplotlib. |
| [Simple-Scatter-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.02-Simple-Scatter-Plots.ipynb) | Learn about simple scatter plots in Matplotlib. |
| [Errorbars.ipynb](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.03-Errorbars.ipynb) | Learn about visualizing errors in Matplotlib. |
| [Density-and-Contour-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.04-Density-and-Contour-Plots.ipynb) | Learn about density and contour plots in Matplotlib. |
| [Histograms-and-Binnings](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.05-Histograms-and-Binnings.ipynb) | Learn about histograms, binnings, and density in Matplotlib. |
| [Customizing-Legends](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.06-Customizing-Legends.ipynb) | Learn about customizing plot legends in Matplotlib. |
| [Customizing-Colorbars](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.07-Customizing-Colorbars.ipynb) | Learn about customizing colorbars in Matplotlib. |
| [Multiple-Subplots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.08-Multiple-Subplots.ipynb) | Learn about multiple subplots in Matplotlib. |
| [Text-and-Annotation](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.09-Text-and-Annotation.ipynb) | Learn about text and annotation in Matplotlib. |
| [Customizing-Ticks](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.10-Customizing-Ticks.ipynb) | Learn about customizing ticks in Matplotlib. |
| [Settings-and-Stylesheets](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.11-Settings-and-Stylesheets.ipynb) | Learn about customizing Matplotlib: configurations and stylesheets. |
| [Three-Dimensional-Plotting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.12-Three-Dimensional-Plotting.ipynb) | Learn about three-dimensional plotting in Matplotlib. |
| [Geographic-Data-With-Basemap](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.13-Geographic-Data-With-Basemap.ipynb) | Learn about geographic data with basemap in Matplotlib. |
| [Visualization-With-Seaborn](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.14-Visualization-With-Seaborn.ipynb) | Learn about visualization with Seaborn. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/numpy.png"">
</p>

## numpy

IPython Notebook(s) demonstrating NumPy functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [numpy](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/numpy.ipynb) | Adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. |
| [Introduction-to-NumPy](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.00-Introduction-to-NumPy.ipynb) | Introduction to NumPy. |
| [Understanding-Data-Types](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.01-Understanding-Data-Types.ipynb) | Learn about data types in Python. |
| [The-Basics-Of-NumPy-Arrays](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.02-The-Basics-Of-NumPy-Arrays.ipynb) | Learn about the basics of NumPy arrays. |
| [Computation-on-arrays-ufuncs](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.03-Computation-on-arrays-ufuncs.ipynb) | Learn about computations on NumPy arrays: universal functions. |
| [Computation-on-arrays-aggregates](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.04-Computation-on-arrays-aggregates.ipynb) | Learn about aggregations: min, max, and everything in between in NumPy. |
| [Computation-on-arrays-broadcasting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.05-Computation-on-arrays-broadcasting.ipynb) | Learn about computation on arrays: broadcasting in NumPy. |
| [Boolean-Arrays-and-Masks](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.06-Boolean-Arrays-and-Masks.ipynb) | Learn about comparisons, masks, and boolean logic in NumPy. |
| [Fancy-Indexing](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.07-Fancy-Indexing.ipynb) | Learn about fancy indexing in NumPy. |
| [Sorting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.08-Sorting.ipynb) | Learn about sorting arrays in NumPy. |
| [Structured-Data-NumPy](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.09-Structured-Data-NumPy.ipynb) | Learn about structured data: NumPy's structured arrays. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/python.png"">
</p>

## python-data

IPython Notebook(s) demonstrating Python functionality geared towards data analysis.

| Notebook | Description |
|-----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|
| [data structures](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/structs.ipynb) | Learn Python basics with tuples, lists, dicts, sets. |
| [data structure utilities](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/structs_utils.ipynb) | Learn Python operations such as slice, range, xrange, bisect, sort, sorted, reversed, enumerate, zip, list comprehensions. |
| [functions](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/functions.ipynb) | Learn about more advanced Python features: Functions as objects, lambda functions, closures, *args, **kwargs currying, generators, generator expressions, itertools. |
| [datetime](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/datetime.ipynb) | Learn how to work with Python dates and times: datetime, strftime, strptime, timedelta. |
| [logging](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/logs.ipynb) | Learn about Python logging with RotatingFileHandler and TimedRotatingFileHandler. |
| [pdb](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/pdb.ipynb) | Learn how to debug in Python with the interactive source code debugger. |
| [unit tests](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/unit_tests.ipynb) | Learn how to test in Python with Nose unit tests. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/kaggle.png"">
</p>

## kaggle-and-business-analyses

IPython Notebook(s) used in [kaggle](https://www.kaggle.com/) competitions and business analyses.

| Notebook | Description |
|-------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|
| [titanic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/kaggle/titanic.ipynb) | Predict survival on the Titanic.  Learn data cleaning, exploratory data analysis, and machine learning. |
| [churn-analysis](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/analyses/churn.ipynb) | Predict customer churn.  Exercise logistic regression, gradient boosting classifers, support vector machines, random forests, and k-nearest-neighbors.  Includes discussions of confusion matrices, ROC plots, feature importances, prediction probabilities, and calibration/descrimination.|

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/spark.png"">
</p>

## spark

IPython Notebook(s) demonstrating spark and HDFS functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
| [spark](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/spark/spark.ipynb) | In-memory cluster computing framework, up to 100 times faster for certain applications and is well suited for machine learning algorithms. |
| [hdfs](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/spark/hdfs.ipynb) | Reliably stores very large files across machines in a large cluster. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/mrjob.png"">
</p>

## mapreduce-python

IPython Notebook(s) demonstrating Hadoop MapReduce with mrjob functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
| [mapreduce-python](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/mapreduce/mapreduce-python.ipynb) | Runs MapReduce jobs in Python, executing jobs locally or on Hadoop clusters. Demonstrates Hadoop Streaming in Python code with unit test and [mrjob](https://github.com/Yelp/mrjob) config file to analyze Amazon S3 bucket logs on Elastic MapReduce.  [Disco](https://github.com/discoproject/disco/) is another python-based alternative.|

<br/>

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/aws.png"">
</p>

## aws

IPython Notebook(s) demonstrating Amazon Web Services (AWS) and AWS tools functionality.


Also check out:

* [SAWS](https://github.com/donnemartin/saws): A Supercharged AWS command line interface (CLI).
* [Awesome AWS](https://github.com/donnemartin/awesome-aws): A curated list of libraries, open source repos, guides, blogs, and other resources.

| Notebook | Description |
|------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [boto](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#Boto) | Official AWS SDK for Python. |
| [s3cmd](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#s3cmd) | Interacts with S3 through the command line. |
| [s3distcp](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#s3distcp) | Combines smaller files and aggregates them together by taking in a pattern and target file.  S3DistCp can also be used to transfer large volumes of data from S3 to your Hadoop cluster. |
| [s3-parallel-put](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#s3-parallel-put) | Uploads multiple files to S3 in parallel. |
| [redshift](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#redshift) | Acts as a fast data warehouse built on top of technology from massive parallel processing (MPP). |
| [kinesis](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#kinesis) | Streams data in real time with the ability to process thousands of data streams per second. |
| [lambda](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/aws/aws.ipynb#lambda) | Runs code in response to events, automatically managing compute resources. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/commands.png"">
</p>

## commands

IPython Notebook(s) demonstrating various command lines for Linux, Git, etc.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [linux](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/linux.ipynb) | Unix-like and mostly POSIX-compliant computer operating system.  Disk usage, splitting files, grep, sed, curl, viewing running processes, terminal syntax highlighting, and Vim.|
| [anaconda](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#anaconda) | Distribution of the Python programming language for large-scale data processing, predictive analytics, and scientific computing, that aims to simplify package management and deployment. |
| [ipython notebook](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#ipython-notebook) | Web-based interactive computational environment where you can combine code execution, text, mathematics, plots and rich media into a single document. |
| [git](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#git) | Distributed revision control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows. |
| [ruby](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#ruby) | Used to interact with the AWS command line and for Jekyll, a blog framework that can be hosted on GitHub Pages. |
| [jekyll](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#jekyll) | Simple, blog-aware, static site generator for personal, project, or organization sites.  Renders Markdown or Textile and Liquid templates, and produces a complete, static website ready to be served by Apache HTTP Server, Nginx or another web server. |
| [pelican](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#pelican) | Python-based alternative to Jekyll. |
| [django](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/commands/misc.ipynb#django) | High-level Python Web framework that encourages rapid development and clean, pragmatic design. It can be useful to share reports/analyses and for blogging. Lighter-weight alternatives include [Pyramid](https://github.com/Pylons/pyramid), [Flask](https://github.com/pallets/flask), [Tornado](https://github.com/tornadoweb/tornado), and [Bottle](https://github.com/bottlepy/bottle).

## misc

IPython Notebook(s) demonstrating miscellaneous functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [regex](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/misc/regex.ipynb) | Regular expression cheat sheet useful in data wrangling.|
[algorithmia](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/misc/Algorithmia.ipynb) | Algorithmia is a marketplace for algorithms. This notebook showcases 4 different algorithms: Face Detection, Content Summarizer, Latent Dirichlet Allocation and Optical Character Recognition.|

## notebook-installation

### anaconda

Anaconda is a free distribution of the Python programming language for large-scale data processing, predictive analytics, and scientific computing that aims to simplify package management and deployment.

Follow instructions to install [Anaconda](https://docs.continuum.io/anaconda/install) or the more lightweight [miniconda](http://conda.pydata.org/miniconda.html).

### dev-setup

For detailed instructions, scripts, and tools to set up your development environment for data analysis, check out the [dev-setup](https://github.com/donnemartin/dev-setup) repo.

### running-notebooks

To view interactive content or to modify elements within the IPython notebooks, you must first clone or download the repository then run the notebook.  More information on IPython Notebooks can be found [here.](http://ipython.org/notebook.html)

    $ git clone https://github.com/donnemartin/data-science-ipython-notebooks.git
    $ cd data-science-ipython-notebooks
    $ jupyter notebook

Notebooks tested with Python 2.7.x.

## credits

* [Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython](http://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1449319793) by Wes McKinney
* [PyCon 2015 Scikit-learn Tutorial](https://github.com/jakevdp/sklearn_pycon2015) by Jake VanderPlas
* [Python Data Science Handbook](https://github.com/jakevdp/PythonDataScienceHandbook) by Jake VanderPlas
* [Parallel Machine Learning with scikit-learn and IPython](https://github.com/ogrisel/parallel_ml_tutorial) by Olivier Grisel
* [Statistical Interference Using Computational Methods in Python](https://github.com/AllenDowney/CompStats) by Allen Downey
* [TensorFlow Examples](https://github.com/aymericdamien/TensorFlow-Examples) by Aymeric Damien
* [TensorFlow Tutorials](https://github.com/pkmital/tensorflow_tutorials) by Parag K Mital
* [TensorFlow Tutorials](https://github.com/nlintz/TensorFlow-Tutorials) by Nathan Lintz
* [TensorFlow Tutorials](https://github.com/alrojo/tensorflow-tutorial) by Alexander R Johansen
* [TensorFlow Book](https://github.com/BinRoot/TensorFlow-Book) by Nishant Shukla
* [Summer School 2015](https://github.com/mila-udem/summerschool2015) by mila-udem
* [Keras tutorials](https://github.com/leriomaggio/deep-learning-keras-tensorflow) by Valerio Maggio
* [Kaggle](https://www.kaggle.com/)
* [Yhat Blog](http://blog.yhat.com/)

## contributing

Contributions are welcome!  For bug reports or requests please [submit an issue](https://github.com/donnemartin/data-science-ipython-notebooks/issues).

## contact-info

Feel free to contact me to discuss any issues, questions, or comments.

* Email: [donne.martin@gmail.com](mailto:donne.martin@gmail.com)
* Twitter: [@donne_martin](https://twitter.com/donne_martin)
* GitHub: [donnemartin](https://github.com/donnemartin)
* LinkedIn: [donnemartin](https://www.linkedin.com/in/donnemartin)
* Website: [donnemartin.com](http://donnemartin.com)

## license

This repository contains a variety of content; some developed by Donne Martin, and some from third-parties.  The third-party content is distributed under the license provided by those parties.

The content developed by Donne Martin is distributed under the following license:

*I am providing code and resources in this repository to you under an open source license.  Because this is my personal repository, the license you receive to my code and resources is from me and not my employer (Facebook).*

    Copyright 2015 Donne Martin

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
",,,,,,,,,,,,,,,,,,,,,,,0.386028468,"Summarize: <br/> apologetic predictive pundits rejecting tensorFlow tutorials.
Learn basic operations in TensorFlow, a library for various kinds of perceptual
and language understanding tasks from Google. Implement linear regression in
TenseFlow."
1201,A simple drop-in solution for providing UUID support for the IDs of your Eloquent models.,"<p align=""center"">
    <a href=""https://github.com/goldspecdigital/laravel-eloquent-uuid""><img
        alt=""Eloquent UUID""
        src=""https://svgshare.com/i/DVS.svg"" width=""400px""
    ></a>
</p>

<p align=""center"">
    <a href=""https://github.com/goldspecdigital/laravel-eloquent-uuid""><img
        alt=""GitHub stars""
        src=""https://img.shields.io/github/stars/goldspecdigital/laravel-eloquent-uuid.svg?style=social""
    ></a>
</p>

<p align=""center"">
    <a href=""https://github.com/goldspecdigital/laravel-eloquent-uuid/tags""><img
        alt=""GitHub tag (latest SemVer)""
        src=""https://img.shields.io/github/tag/goldspecdigital/laravel-eloquent-uuid.svg""
    ></a>
    <a href=""https://github.com/goldspecdigital/laravel-eloquent-uuid/actions/workflows/tests.yml""><img
        alt=""Build status""
        src=""https://github.com/goldspecdigital/laravel-eloquent-uuid/actions/workflows/tests.yml/badge.svg?branch=master""
    ></a>
    <a href=""https://packagist.org/packages/goldspecdigital/laravel-eloquent-uuid""><img
        alt=""Packagist""
        src=""https://img.shields.io/packagist/dt/goldspecdigital/laravel-eloquent-uuid.svg""
    ></a>
    <img
        alt=""PHP from Packagist""
        src=""https://img.shields.io/packagist/php-v/goldspecdigital/laravel-eloquent-uuid.svg""
    >
    <img
        alt=""Packagist""
        src=""https://img.shields.io/packagist/l/goldspecdigital/laravel-eloquent-uuid.svg""
    >
</p>

## Introduction

A simple drop-in solution for providing UUID support for the IDs of your
Eloquent models.

Both `v1` and `v4` IDs are supported out of the box, however should you need 
`v3` or `v5` support, you can easily add this in.

## Installing

Reference the table below for the correct version to use in conjunction with the
version of Laravel you have installed:

| Laravel | This package |
| ------- | ------------ |
| `v5.8.*` | `v1.*` |
| `v6.*` | `v6.*` |
| `v7.*` | `v7.*` |
| `v8.*` | `v8.*` |
| `v9.*` | `v9.*` |

You can install the package via composer:

```bash
composer require goldspecdigital/laravel-eloquent-uuid:^9.0
```

## Usage

There are two ways to use this package:
1. By extending the provided model classes (preferred and simplest method).
2. By using the provided model trait (allows for extending another model class).

### Extending model

When creating a Eloquent model, instead of extending the standard Laravel model
class, extend from the model class provided by this package:

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Model;

class BlogPost extends Model
{
    //
}
```

### Extending user model

The User model that comes with a standard Laravel install has some extra
configuration which is implemented in its parent class. This configuration only
consists of implementing several interfaces and using several traits.

A drop-in replacement has been provided which you can use just as above, by
extending the User class provided by this package:

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    //
}
```

### Using trait

As an alternative to extending the classes in the examples above, you also have
the ability to use the provided trait instead. This requires a more involved
setup process but allows you to extend your models from another class if needed:

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Uuid;
use Illuminate\Database\Eloquent\Model;

class BlogPost extends Model
{
    use Uuid;
    
    /**
     * The ""type"" of the auto-incrementing ID.
     *
     * @var string
     */
    protected $keyType = 'string';

    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guarded = [];
}
```

### Generating UUIDs

If you don't specify the value for the primary key of your model, a UUID will
be automatically generated. However, if you do specify your own UUID then it
will not generate one, but instead use the one you have explicitly provided. 
This can be useful when needing the know the ID of the model before you have 
created it:

```php
// No UUID provided (automatically generated).
$model = Model::create();
echo $model->id; // abb034ae-fcdc-4200-8094-582b60a4281f

// UUID explicity provided.
$model = Model::create(['id' => '04d7f995-ef33-4870-a214-4e21c51ff76e']);
echo $model->id; // 04d7f995-ef33-4870-a214-4e21c51ff76e
```

### Specifying UUID versions

By default, `v4` UUIDs will be used for your models. However, you can also 
specify `v1` UUIDs to be used by setting the following property/method on your 
model:

#### When extending the class

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Model;

class BlogPost extends Model
{
    /**
     * The UUID version to use.
     *
     * @var int
     */
    protected int $uuidVersion = 1;
}
```

#### When using the trait

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Uuid;
use Illuminate\Database\Eloquent\Model;

class BlogPost extends Model
{
    use Uuid;

    /**
     * The UUID version to use.
     *
     * @return int
     */
    protected function uuidVersion(): int
    {
        return 1;
    }
}
```

#### Support for `v3` and `v5`

Should you need support for `v3` or `v5` UUIDs, you can simply override the
method which is responsible for generating the UUIDs:

```php
<?php

namespace App\Models;

use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Model;
use Ramsey\Uuid\Uuid;

class BlogPost extends Model
{
    /**
     * @throws \Exception
     * @return string
     */
    protected function generateUuid(): string
    {
        // UUIDv3 has been used here, but you can also use UUIDv5.
        return Uuid::uuid3(Uuid::NAMESPACE_DNS, 'example.com')->toString();
    }
}
```

### Creating models

In addition of the `make:model` artisan command, you will now have access to
`uuid:make:model` which has all the functionality of the standard `make:model`
command (with exception of not being able to create a pivot model):

```bash
php artisan uuid:make:model Models/Post --all
```

### Database migrations

The default primary ID column used in migrations will not work with UUID primary
keys, as the default column type is an unsigned integer. UUIDs are 36 character 
strings so we must specify this in our migrations:

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateUsersTable extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table): void {
            // Primary key.
            $table->uuid('id')->primary();
        });
    }
}

class CreatePostsTable extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('posts', function (Blueprint $table): void {
            // Primary key.
            $table->uuid('id')->primary();
        
            // Foreign key.
            $table->uuid('user_id');
            $table->foreign('user_id')->references('id')->on('users');
        });
    }
}
```

## Running the tests

To run the test suite you can use the following command:

```bash
composer test
```

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of
conduct, and the process for submitting pull requests to us.

## Versioning

We use [SemVer](http://semver.org/) for versioning. For the versions available,
see the [tags on this repository](https://github.com/goldspecdigital/laravel-eloquent-uuid/tags).

## Authors

* [GoldSpec Digital](https://github.com/goldspecdigital)

See also the list of [contributors](https://github.com/goldspecdigital/laravel-eloquent-uuid/contributors)
who participated in this project.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md)
file for details.
",,,,,,,,,,,,,,,,,,,,,,,0.55631118,"A simple drop-in solution for providing UUID support for the IDs of your
Eloquent models. Both `v1` and `v4` IDs are supported out of the box, however
should you need                 `v3` or `v5` support, you can easily add this
in. There are two ways to use this package:1. By extending the provided model
classes (preferred and simplest method) 2. By using the providedmodel trait
(allows for extending another model class)"
1713,A library used to create beautiful animations and transitions for iOS.,"![Motion Logo](http://www.cosmicmind.com/motion/logo/motion_logo.png)

# Motion

Welcome to **Motion,** a library used to create beautiful animations and transitions for views, layers, and view controllers.

## Photos Sample

Take a look at a sample [Photos](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Photos) project to get started.

![Photos](http://www.cosmicmind.com/motion/projects/photos.gif)

* [Photos Sample](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Photos)

### Who is Motion for?

Motion is designed for beginner to expert developers. For beginners, you will be exposed to very powerful APIs that would take time and experience to develop on your own, and experts will appreciate the time saved by using Motion.

### What you will learn

You will learn how to use Motion with a general introduction to fundamental concepts and easy to use code snippets.

# Transitions

Motion transitions a source view to a destination view using a linking identifier property named `motionIdentifier`.

| Match | Translate | Rotate | Arc | Scale |
|:---:|:---:|:---:|:---:|:---:|
| ![Match](http://www.cosmicmind.com/motion/transitions_identifier/match.gif) |  ![Translate](http://www.cosmicmind.com/motion/transitions_identifier/translate.gif) | ![Rotate](http://www.cosmicmind.com/motion/transitions_identifier/rotate.gif) | ![Arc](http://www.cosmicmind.com/motion/transitions_identifier/arc.gif) | ![Scale](http://www.cosmicmind.com/motion/transitions_identifier/scale.gif) |

### Example Usage

An example of transitioning from one view controller to another with transitions:

#### View Controller 1

```swift
greyView.motionIdentifier = ""foo""
orangeView.motionIdentifier = ""bar""
```

#### View Controller 2

```swift
isMotionEnabled = true
greyView.motionIdentifier = ""foo""
orangeView.motionIdentifier = ""bar""
orangeView.transition(.translate(x: -100))
```

The above code snippet tells the source views in `view controller 1` to link to the destination views in `view controller 2` using the `motionIdentifier`. Animations may be added to views during a transition using the **transition** method. The *transition* method accepts MotionTransition structs that configure the view's animation.

* [MotionTransition API](https://cosmicmind.gitbooks.io/motion/content/motion_transition_api.html)
* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/TransitionsWithIdentifier)

## UINavigationController, UITabBarController, and UIViewController Transitions

Motion offers default transitions that may be used by UINavigationControllers, UITabBarControllers, and presenting UIViewControllers.

| Push | Slide | ZoomSlide | Cover | Page | Fade | Zoom |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
| ![Push](http://www.cosmicmind.com/motion/transitions/push.gif)  | ![Slide](http://www.cosmicmind.com/motion/transitions/slide.gif)| ![Zoom Slide](http://www.cosmicmind.com/motion/transitions/zoom_slide.gif) | ![Cover](http://www.cosmicmind.com/motion/transitions/cover.gif) | ![Page](http://www.cosmicmind.com/motion/transitions/page_in.gif) | ![Fade](http://www.cosmicmind.com/motion/transitions/fade.gif) | ![Zoom](http://www.cosmicmind.com/motion/transitions/zoom.gif)|

### Example Usage

An example of transitioning from one view controller to another using a UINavigationController with a zoom transition:

#### UINavigationController

```swift
class AppNavigationController: UINavigationController {
    open override func viewDidLoad() {
        super.viewDidLoad()
        isMotionEnabled = true
        motionNavigationTransitionType = .zoom
    }
}
```

To add an automatic reverse transition, use `autoReverse`.

```swift
motionNavigationTransitionType = .autoReverse(presenting: .zoom)
```

* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Transitions)

# Animations

Motion provides the building blocks necessary to create stunning animations without much effort. Motion's animation API will make maintenance a breeze and changes even easier. To create an animation, use the **animate** method of a view or layer and pass in a list of MotionAnimation structs. MotionAnimation structs are configurable values that describe how to animate a property or group of properties.

| Background Color | Corner Radius | Fade | Rotate | Size | Spring |
|:---:|:---:|:---:|:---:|:---:|:---:|
| ![Background Color](http://www.cosmicmind.com/motion/animations/background_color.gif) | ![Corner Radius](http://www.cosmicmind.com/motion/animations/corner_radius.gif) | ![Fade](http://www.cosmicmind.com/motion/animations/fade.gif) | ![Rotate](http://www.cosmicmind.com/motion/animations/rotate.gif) | ![Size](http://www.cosmicmind.com/motion/animations/size.gif) | ![Spring](http://www.cosmicmind.com/motion/animations/spring.gif) |

| Border Color & Border Width | Depth | Position | Scale | Spin | Translate |
|:---:|:---:|:---:|:---:|:---:|:---:|
|![Border Color & Border Width](http://www.cosmicmind.com/motion/animations/border_color.gif) | ![Depth](http://www.cosmicmind.com/motion/animations/depth.gif) | ![Position](http://www.cosmicmind.com/motion/animations/position.gif) | ![Scale](http://www.cosmicmind.com/motion/animations/scale.gif) | ![Spin](http://www.cosmicmind.com/motion/animations/spin.gif) | ![Translate](http://www.cosmicmind.com/motion/animations/translate.gif) |

### Example Usage

```swift
let box = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))
box.backgroundColor = .blue

box.animate(.background(color: .red), .rotate(180), .delay(1))
```

In the above code example, a box view is created with a width of 100, height of 100, and an initial background color of blue. Following the general creation of the view, the _Motion animate_ method is passed _MotionAnimation structs_ that tell the view to animate to a red background color and rotate 180 degrees after a delay of 1 second. That's pretty much the general idea of creating animations.

* [MotionAnimation API](https://cosmicmind.gitbooks.io/motion/content/motion_animation_api.html)
* [Code Samples](https://github.com/CosmicMind/Samples/tree/master/Projects/Programmatic/Animations)

## Requirements

* iOS 8.0+
* Xcode 8.0+

## Communication

- If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind). (Tag 'cosmicmind')
- If you'd like to **ask a general question**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/cosmicmind).
- If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.
- If you **have a feature request**, open an issue.
- If you **want to contribute**, submit a pull request.

## Installation

> **Embedded frameworks require a minimum deployment target of iOS 8.**
> - [Download Motion](https://github.com/CosmicMind/Motion/archive/master.zip)

## CocoaPods

[CocoaPods](http://cocoapods.org) is a dependency manager for Cocoa projects. You can install it with the following command:

```bash
$ gem install cocoapods
```

To integrate Motion's core features into your Xcode project using CocoaPods, specify it in your `Podfile`:

```ruby
source 'https://github.com/CocoaPods/Specs.git'
platform :ios, '8.0'
use_frameworks!

pod 'Motion', '~> 3.1.0'
```

Then, run the following command:

```bash
$ pod install
```

## Carthage

Carthage is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.

You can install Carthage with Homebrew using the following command:

```bash
$ brew update
$ brew install carthage
```
To integrate Motion into your Xcode project using Carthage, specify it in your Cartfile:

```bash
github ""CosmicMind/Motion""
```

Run `carthage update` to build the framework and drag the built `Motion.framework` into your Xcode project.

## Change Log

Motion is a growing project and will encounter changes throughout its development. It is recommended that the [Change Log](https://github.com/CosmicMind/Motion/blob/master/CHANGELOG.md) be reviewed prior to updating versions.

## License

The MIT License (MIT)

Copyright (C) 2019, CosmicMind, Inc. <http://cosmicmind.com>.
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
",,,,,,,,,,,,,,,,,,,,,,,0.1334955351,"Motion is a library used to create beautiful animations and transitions for
views, layers, and view controllers. It is designed for beginner to expert
developers. For beginners, you will be exposed to very powerful APIs that would
take time and experience to develop on your own, and experts will appreciate the
time saved."
1563,"Making sense of web3 & crypto. Introduction to key concepts and ideas. Rigorous, constructive analysis of key claims pro and con. A look at the deeper hopes and aspirations.","# Awesome critique of crypto/web3

Awesome critique of crypto/web3, etc. Contributions are welcome.

## Critique

### General

* [The problem with NFTs](https://www.youtube.com/watch?v=YQ_xWvX1n9g) - 2022-01-21 - by Dan Olson (Documentary) 📺 [👉 Highly recommended 👈]
  * [Three things Web3 should fix in 2022](https://www.theverge.com/2022/1/28/22906010/web3-nft-internet-history-video-platformer) a response to The Problem with NFTs - 28 Jan 2022
* Stephen Diehl series - https://www.stephendiehl.com/blog.html
  * [The Case Against Crypto](https://www.stephendiehl.com/blog/against-crypto.html) - December 31, 2021
  - [Blockchainism](https://www.stephendiehl.com/blog/blockchainism.html) - December 11, 2021
  - [Web3 is Bullshit](https://www.stephendiehl.com/blog/web3-bullshit.html) - December 4, 2021
  - [The Internet's Casino Boats](https://www.stephendiehl.com/blog/casino-boats.html) - December 1, 2021
  - [The Token Disconnect](https://www.stephendiehl.com/blog/disconnect.html) - November 27, 2021
  - [The Handwavy Technobabble Nothingburger](https://www.stephendiehl.com/blog/nothing-burger.html) - November 24, 2021
  - [Ice-Nine for Markets](https://www.stephendiehl.com/blog/ice-nine.html) - November 23, 2021
  - [The Tinkerbell Griftopia](https://www.stephendiehl.com/blog/tinkerbell.html) - November 19, 2021
  - [Decentralized Woo Hoo](https://www.stephendiehl.com/blog/decentralized-woo.html) - November 16, 2021
  - [The Intellectual Incoherence of Cryptoassets](https://www.stephendiehl.com/blog/crypto-absurd.html) - November 7, 2021
  - [On Unintentional Scams](https://www.stephendiehl.com/blog/crypto-scams.html) - July 23, 2021
  - [How to Destroy Bitcoin](https://www.stephendiehl.com/blog/destroy-bitcoin.html) - July 13, 2021
  - [The Non-Innovation of Cryptocurrency](https://www.stephendiehl.com/blog/non-innovation.html) - July 7, 2021
  - [The Oncoming Ransomware Storm](https://www.stephendiehl.com/blog/ransomware.html) - May 11, 2021
  - [Et tu, Signal?](https://www.stephendiehl.com/blog/signal.html) - April 7, 2021
  - [The Political Case for a Blanket Cryptocurrency Ban](https://www.stephendiehl.com/blog/banbitcoin.html) - March 30, 2021
  - [Bitcoin: The Postmodern Ponzi](https://www.stephendiehl.com/blog/ponzi.html) - February 27, 2021
  - [The Crypto Chernobyl](https://www.stephendiehl.com/blog/chernobyl.html) - February 10, 2021
  - [Gamestop, Bitcoin and the Commoditization of Populist Rage](https://www.stephendiehl.com/blog/gamestop.html) - February 3, 2021
* [Today on Sick Sad World: How The Cryptobros Have Fallen](https://www.jwz.org/blog/2022/01/today-on-sick-sad-world-how-the-cryptobros-have-fallen/) - 2022-01-04 by Jamie Zawinski (legendary coder, co-founder of Mozilla etc.)
* [Web3 First Impressions](https://moxie.org/2022/01/07/web3-first-impressions.html) - 2022-01-07 Moxie Marlinspike, co-founder of Signal etc.
* [Bitcoin, Currencies, and Fragility by Nassim Taleb - 27 Jun 2021](https://arxiv.org/abs/2106.14204) - highly critical paper by author Black Swan etc.
* https://watershed.co.uk/studio/news/2021/12/03/case-against-crypto
* [The European Money and Finance Forum - The encrypted threat: Bitcoin’s social cost and regulatory responses](https://web.archive.org/web/20220107084533/https://www.suerf.org/docx/f_88b3febc5798a734026c82c1012408f5_38771_suerf.pdf) - Jan 2022. A comprehensive study by SUERF - The European Money and Finance Forum that details the net negative effects of bitcoin to society.
* [The Third Web](https://tante.cc/2021/12/17/the-third-web/) - 2021-12-17 - long critical essay including detailed history by [Tante](https://twitter.com/tante)
* [Tante's Web3/NFT FAQ](https://tante.cc/2022/02/09/tantes-blockchain-web3-faq/)
* https://rufuspollock.com/2016/07/02/reflections-on-the-blockchain/ - 2016-07-02 - by Rufus Pollock (mainly a critique of early DAOs and techno-solutionism)
* [Web3 takes trust, too](https://www.bloomberg.com/opinion/articles/2022-01-10/web3-takes-trust-too) - 2022-01-10 by Matt Levine on Bloomberg.com
* [Revolution Now! With Peter Joseph | Bitcoin and Financialization](https://youtu.be/bsghxd1cdeA) - May 21, 2021
* [The Web3 Fraud](https://www.usenix.org/publications/loginonline/web3-fraud) - 2021-12-16 by Nicholas Weaver on usenix.com
* Molly White series - https://blog.mollywhite.net/blockchain/
  * [Blockchain-based systems are not what they say they are](https://blog.mollywhite.net/blockchains-are-not-what-they-say/)
  * [It's not still the early days](https://blog.mollywhite.net/its-not-still-the-early-days/)
  * [Abuse and harassment on the blockchain](https://blog.mollywhite.net/abuse-and-harassment-on-the-blockchain/)
  * [Anonymous cryptocurrency wallets are not so simple](https://blog.mollywhite.net/anonymous-crypto-wallets/)
  * [Cryptocurrency off-ramps, and the pressure towards centralization](https://blog.mollywhite.net/off-ramps/)
  * [Cryptocurrency’s Robinhood effect](https://blog.mollywhite.net/cryptocurrencys-robinhood-effect/)
  * [Abuse on the blockchain – Guest lecture at Stanford University](https://www.youtube.com/watch?v=hXBZ-BXfCSY)
* [Against Web3 and Faux-Decentralization](https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/) - 2021-10-19 by Soatok
* [The technological case against Bitcoin and blockchain](https://lukeplant.me.uk/blog/posts/the-technological-case-against-bitcoin-and-blockchain/) - 2022-03-05 by Luke Plant
* [The Case Against Crypto](https://www.watershed.co.uk/studio/news/2021/12/03/case-against-crypto) - 2021-12-03 by Martin O'Leary
* [The Case Against Bitcoin](https://bariweiss.substack.com/p/the-case-against-bitcoin?s=r) - 2021-05-14 by Michael W. Green. A portfolio manager discusses the case against bitcoin from a financial and geopolitical perspective.
* [The Register: The dark equation of harm versus good means blockchain’s had its day](https://www.theregister.com/2021/12/06/the_dark_equation_of_harm/) - 2021-12-06
* [Blockchains and Cryptocurrencies: Burn It With Fire](https://www.youtube.com/watch?v=xCHab0dNnj4) - 2018-04-20 by Nicholas Weaver 📺 Nicholas Weaver is a staff researcher with the International Computer Science Institute (ICSI) and lecturer in EECS, where he teaches machine structures and computer security. He earned his Ph.D. in computer science from Berkeley in 2003 and joined ICSI to study network security and measurement. ""The entire cryptocurrency and blockchain ecology is rife with frauds, criminalities, and tulip-mania style hype and needs to be properly disposed of into the ashes of history. A “blockchain” is just a horribly inefficient append-only file which costs a literal fortune to secure without actually providing meaningful distributed trust, while cryptocurrencies are provably inferior than actual currencies for legal real world transactions. Beyond the sheer uselessness have emerged a whole host of bad ideas, ranging from the “put a bird^H^H^H^H blockchain on it” hype to unregistered (and mostly fraudulent) securities with “Initial Coin Offerings” to an invitation for massive theft in the form of “smart” contracts.""
* [Ross Anderson et al: Bitcoin Redux: crypto crime, and how to tackle it](https://www.lightbluetouchpaper.org/2018/06/01/bitcoin-redux-crypto-crime-and-how-to-tackle-it/) ([full paper](https://weis2018.econinfosec.org/wp-content/uploads/sites/5/2018/05/WEIS_2018_paper_38.pdf))- 2018-06-01 - Anderson is a Professor of Security Engineering at the University Cambridge. Bitcoin Redux explains what’s going wrong in the world of cryptocurrencies. The bitcoin exchanges are developing into a shadow banking system, which do not give their customers actual bitcoin but rather display a ""balance"" and allow them to transact with others. However if Alice sends Bob a bitcoin, and they’re both customers of the same exchange, it just adjusts their balances rather than doing anything on the blockchain. This is an e-money service, according to European law, but is the law enforced? Not where it matters. We’ve been looking at the details.
  * [Ross Anderson: Why Bitcoin is Not Cash](https://www.youtube.com/watch?v=p9HH_dFcoLc) - 2018-04-10 - 📺 walks through why bitcoin is not cash and the complex legal questions it would need to deal with if it wanted to be.
  * [Ross Anderson: Tracing Stolen Bitcoin](https://www.youtube.com/watch?v=UlLN0QERWBs) - 2018-03-23 - 📺
* [Simon Wardley: A Spoiler for the Future of Bitcoin](https://blog.gardeviance.org/2013/11/a-spoiler-for-future-bitcoin.html) - 2013-11-27 - ""As you can guess, I'm not a fan of bitcoin. If left unchecked then I find it has the potential to undermine the importance of Government which is actually not good for competition and not good for the market. I hope none of the above happens and would rather see bitcoin disappear in a puff of history."" (NB: he predicts massive appreciation in bitcoin and is concerned how it can undermine government and tax revenue.)
* Kai Stinchcombe series that discusses whether blockchain can solve various real world use-cases better than traditional technologies
  - [Kai Stinchcombe: Ten years in, nobody has come up with a use for blockchain](https://hackernoon.com/ten-years-in-nobody-has-come-up-with-a-use-case-for-blockchain-ee98c180100) - 2017-12-23 - ""Each purported use case — from payments to legal documents, from escrow to voting systems—amounts to a set of contortions to add a distributed, encrypted, anonymous ledger where none was needed. What if there isn’t actually any use for a distributed ledger at all? What if, ten years after it was invented, the reason nobody has adopted a distributed ledger at scale is because nobody wants it?""
  - [Kai Stinchcombe: Blockchain is not only crappy technology but a bad vision for the future](https://medium.com/@kaistinchcombe/decentralized-and-trustless-crypto-paradise-is-actually-a-medieval-hellhole-c1ca122efdec) - 2018-05-04 - ""Blockchain is not only crappy technology but a bad vision for the future. Its failure to achieve adoption to date is because systems built on trust, norms, and institutions inherently function better than the type of no-need-for-trusted-parties systems blockchain envisions. That’s permanent: no matter how much blockchain improves it is still headed in the wrong direction.""
* [Cory Doctorow: When crypto-exchanges go broke, you'll lose it all](https://pluralistic.net/2022/02/03/liquidation-preference/#we-live-in-a-society) - 2022-02-03. Why state backed money is a good thing (a feature not a bug).
  > If you've spent much time around cryptocurrency people, you've probably heard a rant or two about ""sound money"" and the need to ""depoliticize money."" This is a foundation of blockchainism: the belief that money is born separate from states, and states invade on the private realm when they ""meddle"" in the money system.
  >
  > There are at least two serious problems with this ideology. First, it's plain wrong on the historical facts. Money did not emerge from barter systems among people. Money was and is a product of state.
  >
  > But even if you stipulate that money didn't originate among private markets there's another serious historical problem with ""sound money."" ... It's this: central banks didn't emerge to usurp the private sector's control over money. Central banks were created because without them, finance was subject to wild, terrifying, ruinous boom/bust cycles. What's more, without a central bank, money was subject to naked political meddling, which central banks (sometimes) moderated.
* Internet pioneer/Silicon Valley legend Tim O'Reilly on Web3:
  - [Why it’s too early to get excited about Web3](https://www.oreilly.com/radar/why-its-too-early-to-get-excited-about-web3/) - 2021-12-13
  - [""Get ready for the crash""](https://www.cbsnews.com/news/cryptocurrency-nft-blockchain-web3-tim-oreilly/) - CBS Money Watch - 2022-02-09
  - [Crypto and NFTs are ""Pretty Serious Speculative Bubble""](https://decrypt.co/92676/internet-guru-tim-oreilly-crypto-nfts-serious-speculative-bubble) - 2022-02-10
* [David Rosenthal: Can We Mitigate Cryptocurrencies' Externalities?](https://blog.dshr.org/2022/02/ee380-talk.html) - 2022-02-09. Having built a decentralized consensus system using Proof-of-Work (http://dx.doi.org/10.1145/945445.945451) the author has the technical knowledge to explain the design faults and limitations of permissionless blockchain systems, as well as highlighting the economic and environmental issues. Summary of critique:
  > * That the externalities I describe don't exist. You'll have a hard time proving that the waste of electricity and hardware, and the crime wave, are imaginary.
  > * That although the externalities do exist, the benefits of decentralization outweigh them. The problem here is that since the systems are not actually decentralized, we get the externalities but don't get the benefits.
  > * That although the externalities do exist, and the systems aren't dencentralized, they're making so much money that we shouldn't worry. The problem here is that the amount of actual money you can get out of a cryptocurrency equals the amount of actual money that has been put in, minus the actual costs of mining. So the big picture is that although there may be winners, in aggregate the system loses money.
  * [Economies of Scale in Peer-to-Peer Networks](https://blog.dshr.org/2014/10/economies-of-scale-in-peer-to-peer.html) - 2014-10-07. Network effects lead to centralization in p2p (e.g. Bitcoin) and no good way to mitigate this.
* [Charlie Stross: Why I want Bitcoin to Die in Fire](https://www.antipope.org/charlie/blog-static/2013/12/why-i-want-bitcoin-to-die-in-a.html) - 2013-12
* [The Maltese Falcon](https://privatebank.jpmorgan.com/content/dam/jpm-wm-aem/global/pb/en/insights/eye-on-the-market/the-maltese-falcoin.pdf) - critique of bitcoin and financial properties of crypto assets from the CIO of JP Morgan bank. 2021-02-10
* [Vivaldi CEO: Why Vivaldi will never create ThinkCoin](https://vivaldi.com/blog/why-vivaldi-will-never-create-thinkcoin/) - 2022-01-13 - Jon von Tetzchner: “if you look beyond the hype, you’ll find nothing more than a pyramid scheme posing as currency.”
* [Centralizing Control: Why Bitcoin is Dangerous](https://salbayat.org/centralizing-control-why-bitcoin-is-dangerous/) - 2022-04-02 - Sal Bayat: “Democratic governance is fundamentally incompatible with existing cryptocurrency systems as they can only represent the interests of those in control of the system.”

### Economists

* Stephanie Kelton [Cryptocurrency and Fiat Money](https://www.youtube.com/watch?v=84wTEf9Acik) - 2017-12-23
* Richard Thaler [Economics Nobel prize winner, Richard Thaler: “The market that looks most like a bubble to me is Bitcoin and its brethren”](https://econews.pt/2018/01/22/economics-nobel-prize-winner-richard-thaler-the-market-that-looks-most-like-a-bubble-to-me-is-bitcoin-and-its-brethren/) - 2018-01-22
* Various ['Only good for drug dealers': More Nobel prize winners snub bitcoin](https://finance.yahoo.com/news/good-drug-dealers-nobel-prize-winners-snub-bitcoin-184903784.html?ref=hackernoon.com) - 2018-04-27
* Robert Shiller [The Old Allure of New Money](https://www.project-syndicate.org/commentary/cryptocurrencies-scientific-narrative-by-robert-j--shiller-2018-05?barrier=accesspay) - 2018-05-21
* Abhijit Banerjee [Nobel Prize Winning Economist Abhijit Banerjee: Is Blockchain the Key to Financial Inclusion?](https://blockchain.news/news/nobel-prize-winning-economist-abhijit-banerjee-is-blockchain-the-key-to-financial-inclusion) - 2020-01-20
* Steve Keen [Cryptocurrencies, Debt, and the Economy: Steve Keen interviewed by Layne Hartsell](http://www.koreaittimes.com/news/articleView.html?idxno=103792) - 2021-02-17
* Amartya Sen [Prannoy Roy's Townhall With Amartya Sen On Economy, Farm Laws: Full Transcript ](https://www.ndtv.com/india-news/prannoy-roys-townhall-with-amartya-sen-on-indian-economy-farm-laws-full-transcript-2385071) - 2021-03-06
* Jeffrey Sachs [Famed economist Jeffrey Sachs rails against Bitcoin: Highly polluting and ‘almost like counterfeiting’](https://fortune.com/2021/03/16/bitcoin-jeffrey-sachs-critiques-btc/) - 2021-03-16
* Paul Krugman [Technobabble, Libertarian Derp and Bitcoin](https://nytimes.com/2021/05/20/opinion/cryptocurrency-bitcoin.html) - 2021-05-20
* Tyler Cowen [What the Crypto Crowd Doesn't Understand About Economics](https://www.bloomberg.com/opinion/articles/2021-06-21/what-the-crypto-crowd-doesn-t-understand-about-economics) - 2021-06-20
* Yanis Varoufakis [What is money, really? And why Bitcoin is not the answer (even if blockchain is brilliant & potentially helpful in democratising money)](https://www.yanisvaroufakis.eu/2021/08/02/what-is-money/)  - 2021-08-02
* Daron Acemoğlu [The Bitcoin Fountainhead](https://www.project-syndicate.org/commentary/bitcoin-an-appealing-distraction-by-daron-acemoglu-2021-10?barrier=accesspay) - 2021-10-05
* Joseph Stiglitz [Nobel Prize Economist Joseph Stiglitz Calls Regulators to Ban Cryptocurrencies](https://deep-resonance.org/2021/10/28/nobel-prize-economist-joseph-stiglitz-calls-regulators-to-ban-cryptocurrencies/) - 2021-10-28
* Richard Thaler [Economics Nobel prize winner, Richard Thaler: “The market that looks most like a bubble to me is Bitcoin and its brethren”](https://econews.pt/2018/01/22/economics-nobel-prize-winner-richard-thaler-the-market-that-looks-most-like-a-bubble-to-me-is-bitcoin-and-its-brethren/) - 2018-01-22
* Yanis Varoufakis [Yanis Varoufakis on Crypto & the Left, and Techno-Feudalism](https://the-crypto-syllabus.com/yanis-varoufakis-on-techno-feudalism/) - 2022-01-26
* Tyler Cowen [The Crypto Crash Strengthens the Case for Crypto](https://www.bloombergquint.com/gadfly/crypto-crash-strengthens-case-for-crypto-s-long-term-future) - 2022-01-27
* Jesse Frederik [Blockchain, the amazing solution for almost nothing](https://thecorrespondent.com/655/blockchain-the-amazing-solution-for-almost-nothing/84495599980-95473476) - 2020-08-21 - ""Blockchain technology is going to change everything: the shipping industry, the financial system, government … in fact, what won’t it change? But enthusiasm for it mainly stems from a lack of knowledge and understanding. The blockchain is a solution in search of a problem.""
* [Vice: ‘Crypto Ruined My Life’: The Mental Health Crisis Hitting Bitcoin Investors](https://www.vice.com/en/article/akvn8z/crypto-bad-for-mental-health) - 2022-02-16 - The stress and anxiety that goes with funneling your life savings into a volatile market is no joke.
* [Ed Zitron: Solutions That Create Problems](https://ez.substack.com/p/solutions-that-create-problems) - 2022-02-22 - [The thing about Web3 is that it is uniquely useless. I have actively searched for an explanation as to why it's the future, what products it would allow us to build, what sort of *good* it would provide, and I cannot even at my most optimistic find a real use case](https://twitter.com/edzitron/status/1495891031979704321)

### Ponzi aspect

* [Financial Times: Why bitcoin is worse than a Madoff-style Ponzi scheme](https://web.archive.org/web/20220113183816/https://www.reddit.com/r/CryptoReality/comments/rm78e3/financial_times_why_bitcoin_is_worse_than_a/) - 2021-12-22. A Ponzi scheme is a zero-sum enterprise. But bitcoin is a negative-sum phenomenon that you can’t even pursue a claim against, argues Robert McCauley. [Original](https://ft.com/content/83a14261-598d-4601-87fc-5dde528b33d0)
* [Seattle Times: Bitcoin is basically a Ponzi scheme](https://seattletimes.com/opinion/bitcoin-is-basically-a-ponzi-scheme/) - 2018-01-30
* [Bitcoin is a Ponzi](https://ic.unicamp.br/~stolfi/bitcoin/2020-12-31-bitcoin-ponzi.html) - 2020-12-13 by Prof Jorge Stolfi
* [Financial Times: Albanian lessons for regulators nervously eyeing the crypto world](https://www.ft.com/content/810367e5-e0b1-4221-b303-f3012a177437) - 2021-07-05 - Albania’s 1990s pyramid scheme debacle highlights risks of regulatory paralysis on the cryptocurrency explosion
  > Once upon a time in Albania, a scrappy, alternative finance industry emerged to take on and eventually supplant a sclerotic, technologically-backward banking system. The lessons from its dramatic collapse remain relevant today. 
  >
  > Essentially, what was initially touted as a post-communist entrepreneurial success story proved to be pyramid schemes of breathtaking proportions. Slick marketing and lofty promises turned an informal, decentralised, crime-facilitating ecosystem into a mainstream mania that sucked in multitudes of people, unchecked by feeble and fitful regulatory warnings.
* [Jacobin: Cryptocurrency Is a Giant Ponzi Scheme](https://jacobinmag.com/2022/01/cryptocurrency-scam-blockchain-bitcoin-economy-decentralization) - 2022-01-21

### Crypto and energy consumption

* [Bitcoin Energy Consumption Index](https://digiconomist.net/bitcoin-energy-consumption)
* [Why Bitcoin Is Bad For The Environment](https://newyorker.com/news/daily-comment/why-bitcoin-is-bad-for-the-environment) - 2021-04-22
* [Energy power usage CryptoArt, ETH, Blockchain spreadsheet](https://docs.google.com/spreadsheets/d/1hzzxMbytOZ1mYl9kLh_SvM6kne6JI_mdCfHIoNapr5M/edit#gid=0)
* [How Do We Solve Bitcoin's Energy Problem?](https://www.theguardian.com/technology/2022/jan/30/how-do-we-solve-bitcoins-carbon-problem) - 2022-01-30

### Scams/frauds

* [People Building ‘Blockchain City’ in Wyoming Scammed by Hackers - Vice](https://www.vice.com/en/article/k7w3am/people-building-blockchain-city-in-wyoming-scammed-by-hackers) - 2022-01-12 - On Monday, CityDAO—the group that bought 40 acres of Wyoming in hopes of ""building a city on the Ethereum blockchain”—announced that its Discord server was hacked and members' funds were successfully stolen as a result.
* [Web3 is going just great](https://web3isgoinggreat.com/) - A timeline of scams related to cryptocurrencies, NFTs, and web3 projects since the beginning of 2021 by Molly White

### DAOs

* [Is The DAO going to be DOA?](https://steemit.com/crypto-news/@dan/is-the-dao-going-to-be-doa) - 2016-05-16 - by Dan Larimer (founder of BitShares and much else). Larimer sets out most of the basic critiques of DAOs as governance innovation extremely well:
  > Fancy technology can obscure our assessment of what is really going on. The DAO solves a single problem: the corrupt trustee or administrator. It replaces voluntary compliance with a corporation’s charter under threat of lawsuit, with automated compliance with software defined rules. This subtle change may be enough to bypass regulatory hurdles facing traditional trustee’s and administrators, but it doesn’t solve most of the problems the regulations were attempting to address.
  >
  > What The DAO doesn’t solve is all of the other problems inherent with any joint venture. These are people problems, economic problems, and political problems. In some sense, The DAO creates many new problems caused by its ridged rules and expensive machine-enforced process for change.
  >
  > The DAO doesn’t solve the “group trap” where by losers subsidize winners. It disempowers the individual actor and forces him to submit to group decision making. It doesn’t make raising money cheaper for companies, it just adds blockchain-enforced bureaucratic and political processes.
* [DAOs and the nature of human collaboration](https://world.hey.com/marin/daos-and-the-nature-of-human-collaboration-be162918) - 2021-08-12 by Marin Petrov. A critique of DAOs and technosolutionism.

### NFTs

Non-fungible tokens.

* [OpenSea, Web3, and Aggregation Theory](https://stratechery.com/2022/opensea-raises-money-bans-nfts-openseas-value-cryptos-aggregators/) - 2022-01-05 - Ben Thompson of Stratechery
* [Brian Eno on NFTs & Automaticism](https://the-crypto-syllabus.com/brian-eno-on-nfts-and-automatism/)
* [Detailed twitter thread by @NFTEthics alleging fraudulent or close to fraudulent behaviour by a major NTF influencer named BeanieMaxi ](https://twitter.com/NFTethics/status/1483051289022017538) - 2022-01-17 ([cached](./assets/Thread by @NFTethics re beaniemaxi.pdf))
* [Jacobin: NFTs Are, Quite Simply, Bullshit](https://jacobinmag.com/2022/01/nfts-fallon-paris-hilton-bored-ape-digital-imagery-commodification) - 2022-01-26

### Specific use cases

* Event ticketing: [NFT tickets — a realistic look at a big trend](https://medium.com/@ticketpark/nft-tickets-a-realistic-look-at-a-big-trend-ae813d6f885d) – 2021-12-14
* NFT games: [“Play-to-earn” and Bullshit Jobs](https://paulbutler.org/2021/play-to-earn-and-bullshit-jobs/) - December 28, 2021 by Paul Butler - An interesting reflexion linking web3's ""Play-to-earn"" concept to David Graeber's [Bullshit Jobs](https://en.wikipedia.org/wiki/Bullshit_Jobs)
* NFT games: [Crypto Games: Report from hell](https://www.youtube.com/watch?v=YHz0xpU5Tu8) - Good video reviewing and discussing crypto games

### Humour

* [Crypto Curious](https://www.youtube.com/watch?v=N8f-BQFo7lw) - South Park on NFTs - 2021-12-21
* [N-FT: Non-Functioning Tower](https://www.nonfunctioningtower.com) - NFT satire - 2022-03-07
* [“a normal person explains cryptocurrency”](https://twitter.com/avalonpenrose/status/1473753174787772418) by Avalon Penrose - 2021-12-22
* [“my crypto friend calls me every day and this is what he sound like”](https://www.youtube.com/watch?v=TUB9jgMuC7U) by Flula - 2021-02-22
* [The Billion-Dollar Bitcoin Scam](https://www.youtube.com/watch?v=YCuGpfMSmck) - Ordinary Things - 2020-05-31 - “What is Bitcoin? Is Bitcoin a scam? And how did Bitcoin become what it is today? Who was the Dread Pirate Roberts and what happened to the Silk Road?”
* [Cryptocurrencies: Last Week Tonight with John Oliver (HBO)](https://www.youtube.com/watch?v=g6iDZspbRMg) - 2018-03-12
* [Don’t Understand Bitcoin? This Man Will Mumble An Explanation At You](https://www.youtube.com/watch?v=4APcgsRdW6w) by ClickHole - 2015-07-7
* [If Cryptocurrency was Honest](https://www.youtube.com/watch?v=GUs5y9leCyA)
* [If NFTs were Honest](https://www.youtube.com/watch?v=sG_v4bb2e4k)
* [Brave New Web](https://medium.com/coinmonks/brave-new-web-7bae50e916eb) - ani utopian Web3 satire by Nikolay Vlasov - 2022-04-10

### Twitter users

Whilst these users may not solely discuss crypto or web3, they do discuss it regularly, and have consistently provided well-written critique.

* https://twitter.com/web3isgreat
* https://twitter.com/ncweaver
* https://twitter.com/molly0xFFF
* https://twitter.com/smdiehl
  - [Crypto Criticism Threads](https://gist.github.com/sdiehl/7706ef44d951a2025fd658d1dd8687af)
* https://twitter.com/rufuspollock
* https://twitter.com/troll_lock
* https://twitter.com/CasPiancey -""Under promise, under deliver"" co-host @cryptocriticpod *opinions are mine, not my employer* odds and ends @protos hold no crypto or crypto stonks
* https://twitter.com/BennettTomlin - I do data science and track down frauds | 74% backed | Co-host @CryptoCriticPod | Writing @fud_letter | Discord: https://discord.gg/YpAUqNkhSC
* https://twitter.com/SilvermanJacob (staff writer New Republic) & https://twitter.com/ben_mckenzie - ""apparently I now write about crypto""
* https://twitter.com/doctorow

### Tether, and other stablecoins

* [Bennett Tomlin: Tether and Bitfinex Introduction](https://bennettftomlin.com/2021/08/08/tether-and-bitfinex-introduction/) - 2021-08-10 - Tether and Bitfinex are two of the most important companies in the cryptocurrency ecosystem. Tether is the largest stablecoin, and the primary driver of volume and liquidity. Bitfinex used to be the largest cryptocurrency exchange, and still is a frequently used exchange. Tether and Bitfinex have an incredibly problematic past and are quite possibly the largest corporate fraud in history.
  * Detailed overview of Tether and Bitfinex and their connection.
* [Tether Papers: This is exactly who acquired 70% of all USDT ever issued](https://protos.com/tether-papers-crypto-stablecoin-usdt-investigation-analysis/) - 2021-11-10
* [Bloomberg: Tether’s Latest Black Eye Is CFTC Fine for Lying About Reserves](https://www.bloomberg.com/news/articles/2021-10-15/tether-bitfinex-to-pay-fines-totaling-42-5-million-cftc-says) - 2021-10-15 - Biggest stablecoin issuer hit with $41 million penalty. Affiliated crypto exchange Bitfinex also fined $1.5 million.
* [Bloomberg: Anyone Seen Tether’s Billions?](https://www.bloomberg.com/news/features/2021-10-07/crypto-mystery-where-s-the-69-billion-backing-the-stablecoin-tether) - 2021-10-07 - A wild search for the U.S. dollars supposedly backing the stablecoin at the center of the global cryptocurrency trade—and in the crosshairs of U.S. regulators and prosecutors. [paywalled] ([cached](./assets/anyone-seen-tethers-billions.pdf))
* [Bloomberg: Tether Fails to Dispel Mystery on Stablecoin’s Crucial Reserves](https://www.bloomberg.com/news/articles/2021-12-03/tether-gives-more-details-on-assets-backing-crypto-stablecoin) - 2021-12-03 - Holding include $30.6 billion in commercial paper and CDs. About $1 billion moved from reverse repo notes to money funds

### Central Bank Digital Currencies

* [Money and Payments: The U.S. Dollar in the Age of Digital Transformation](https://www.federalreserve.gov/publications/money-and-payments-discussion-paper.htm) - provides a high level overview of the current state of central bank and private sector currencies in the US, and identifies risks and challenges with the implementation of a central bank digital currency. From the paper summary: ""The paper summarizes the current state of the domestic payments system and discusses the different types of digital payment methods and assets that have emerged in recent years, including stablecoins and other cryptocurrencies. It concludes by examining the potential benefits and risks of a CBDC, and identifies specific policy considerations.""

### Trading/Market Microstructure/Security Risks

* [Quantifying Blockchain Extractable Value: How dark is the forest?](https://arxiv.org/abs/2101.05511) - Qin et al., 2021. Technical paper characterizing and quantifying miner extracted value on Ethereum's DeFi smart contracts.
* [High-Frequency Trading on Decentralized On-Chain Exchanges](https://arxiv.org/abs/2009.14021) - Zhou et al., 2020. Technical paper detailing the ""front-running"" that occurs on Ethereum.
* [An Anatomy of Bitcoin Price Manipulation](https://www.singlelunch.com/2022/01/09/an-anatomy-of-bitcoin-price-manipulation/) - Matt Ranger, 2022. Speculative analysis of centralized cryptocurrency exchange market data to support a price manipulation hypothesis.

### Former bitcoin enthusiasts turned skeptics

* [Money corrupts; bitcoin corrupts absolutely.](https://www.cynicusrex.com/file/cryptocultscience.html) by Angelino Desmet - 12-03-2021
* [I wish I never bought bitcoin.](https://www.cynicusrex.com/file/greed.html) by Angelino Desmet - 01-06-2020

### Religious skeptical angles

#### Buddhist

* [Sujato Bhikkhu on Crypto](https://www.youtube.com/watch?v=CA_cfLqIkA0) by Sujato Bhikkhu. A monk explains why crypto is incompatible with the teachings of the Buddha from both moral and spiritual dimensions.

#### Christian

* [The Christian case against Bitcoin and blockchain]( https://lukeplant.me.uk/blog/posts/the-christian-case-against-bitcoin-and-blockchain/) by Luke Plant, A reading of bitcoin philosophy and cult like phenomenon from a biblical perspective 2021-03-2022.
* [What you should know about Bitcoin](https://www.thegospelcoalition.org/article/faqs-know-bitcoin/) by Joe Carter. A well-researched, accurate introduction to Bitcoin from a Christian perspective, 2017-12-27.
* [Ask the Economist: Should a Christian Invest in Bitcoin?](https://www.thegospelcoalition.org/article/christian-invest-bitcoin/) by Greg Phelan, 2021-10-27.

---

## What is blockchain, web3, etc.

Best intros/overviews of blockchain, crypto, web3, etc.

* [On Blockchain and Trust](https://www.schneier.com/blog/archives/2019/02/blockchain_and_.html) - February 12, 2019 by Bruce Schneier. The article also appeared on wired.com as [There's No Good Reason to Trust Blockchain Technology](https://www.wired.com/story/theres-no-good-reason-to-trust-blockchain-technology/).
- [The Myth of Decentralization and Lies about Web 2.0](https://www.emilygorcenski.com/post/the-myth-of-decentralization-and-lies-about-web-2.0/) - 2022-01-07 by Emily Gorcenski
* http://kernel.community - A custom web3 educational community with free learning resources at https://kernel.community/en/learn/

---

## Iron-manning the pro arguments

Here we collect the best theses for why blockchain/crypto“currency”/web3 is supposedly important/interesting/world-changing.

### Bitcoin

* [Bitcoin for the Open-Minded Skeptic](https://www.matthuang.com/bitcoin_for_the_open_minded_skeptic) - May 2020 - by [[people/Matt Huang]]. Note: more an argument for why Bitcoin will ""make it"" than any argument why that is socially valuable (or not).
* [7 Things To Read About Bitcoin (For Institutional Investors)](https://www.paradigm.xyz/2020/05/7-things-to-read-about-bitcoin-for-institutional-investors/) - May 2020 - by [[people/Matt Huang]]

### General

* [JumpCrypto Crypto Reading List (on Github)](https://github.com/JumpCrypto/crypto-reading-list)

### Web3

* [Sean Bonner: Why Web3](https://blog.seanbonner.com/2021/10/26/why-web3/) - 2021-10-26 - by Sean Bonner. ""Web3 upends the power structures we’ve grown accustomed to and puts artists and creators back into the drivers seat…Web3 offers a future where people are in charge of their own identities, not beholden to the whims of data hoarding corporations. People control their own accounts, own their own futures…So if you are asking “Why Web3?” The answer is simple. Web3 is the future.""

### Fat protocols

From https://www.usv.com/writing/2016/08/fat-protocols/

> The previous generation of shared protocols (TCP/IP, HTTP, SMTP, etc.) produced immeasurable amounts of value, but most of it got captured and re-aggregated on top at the applications layer, largely in the form of data (think Google, Facebook and so on). The Internet stack, in terms of how value is distributed, is composed of “thin” protocols and “fat” applications.
>
> This relationship between protocols and applications is reversed in the blockchain application stack. Value concentrates at the shared protocol layer and only a fraction of that value is distributed along at the applications layer. It’s a stack with “fat” protocols and “thin” applications.

* [Crypto Tokens and the Coming Age of Protocol Innovation](https://continuations.com/post/148098927445/crypto-tokens-and-the-age-of-protocol-innovation) - 2016-07-28 - by Albert Wenger at USV. Move about incentivizing investment in the protocols
* [Fat Protocols](https://www.usv.com/writing/2016/08/fat-protocols/) - Aug 2016 - Joel Monegro at USV - more about incentivizing adoption

### Fairer governance

Can support more democratic, distributed governance, e.g. cooperatives (somehow). Can save Democracy.

* [If I Only had a Heart: a DisCO Manifesto](https://disco.coop/manifesto/) - Dec 2019 - A joint publication by DisCO.coop, the Transnational Institute and Guerrilla Media Collective. ""Value Sovereignty, Care Work, Commons and Distributed Cooperative Organizations. The DisCO Manifesto is a deep dive into the world of Distributed Cooperative Organizations. Over its 80 colorful pages, you will read about how DisCOs are a P2P/Commons, cooperative and Feminist Economic alternative to Decentralized Autonomous Organizations (DAOs). The DisCO Manifesto also includes some background on topics like blockchain, AI, the commons, feminism, cooperatives, cyberpunk, and more.""
* [Wired: The Father of Web3 Wants You to Trust Less](https://www.wired.com/story/web3-gavin-wood-interview/) - 2021-11-29 - Gavin Wood, who coined the term Web3 in 2014, believes decentralized technologies are the only hope of preserving liberal democracy.

### Fairer Economy

* [Li Jin on the future of the creator economy](https://www.economist.com/the-world-ahead/2021/11/08/li-jin-on-the-future-of-the-creator-economy) - Shared ownership and control of online platforms is the way forward (via crypto)
  * Note: we probably all want that wonderful outcome it's just that crypto is neither necessary nor likely to get us there. See https://rufuspollock.com/fixing-facebook/

## Reference

History of speculation, manias, etc.

* Devil Take the Hindmost: A History of Financial Speculation by Edward Chancellor (1998)
* [Manias, Panics, and. Crashes. A History of Financial Crises](https://delong.typepad.com/manias.pdf) by by CP Kindleberger (1978)

## Inbox

This is a section for links that haven't yet been reviewed and/or allocated to a particular section.

* https://the-crypto-syllabus.com/web3-a-map-in-search-of-territory/ - Jan 2022 - by Evgeny Morozov
* [Proof of Work vs Proof of Stake, and the Stablecoin Centralization Problem](https://www.lynalden.com/proof-of-stake/) - good overview of PoW vs PoS and the complexity/problems PoS adds. Second half of the article expounds on how ""any smart contract blockchain that relies heavily on DeFi for its use case, can have the outcome of its hard forks significantly determined by centralized stablecoin custodians."" Long article and could fit under multiple headings here.
* https://www.reddit.com/r/anticryptocurrency/ - reddit with a significant number of links
* https://www.profgalloway.com/web3/ - 2022-01-15 - Prof Scott Galloway @ NYU. Unequal, focused on getting rich, facilitating crime, centralized
* [Cryptoeconomics as a Limitation on Governance](https://osf.io/wzf85/?view_only=a10581ae9a804aa197ac39ebbba05766) - 2021-11-11 - Nathan Schneider, University of Colorado Boulder
* [Financial Times: Matt Damon’s crypto ad is more than just cringeworthy](https://www.ft.com/content/3fac474e-aa34-439a-8bdb-32b576fe2687) (paywall)
* [Francesca Bria on Decentralisation, Sovereignty, and Web3](https://the-crypto-syllabus.com/francesca-bria-on-decentralisation/)
* [Booming NFT art market plagued by 'mind-blowing' fraud](https://news.trust.org/item/20220118122426-mv9tu/)

Pros

* [BanklessDAO: State of the DAOs #7: Social Tokens and the Future of Work](https://banklessdao.substack.com/p/state-of-the-daos-7-social-tokens) - 2022-01-13
* [Scanning the European Ecosystem of Distributed Ledger Technologies for Social and Public Good](https://publications.jrc.ec.europa.eu/repository/handle/JRC121675) - Oct 2020 - by Samer Hassan and colleagues
  * Twitter thread: https://twitter.com/samerP2P/status/1317123399295041541

### Other suggestions

* New topic concerning the psychological harm, such as: gambling, greed, cultism, etc.
",,,,,,,,,,,,,,,,,,,,,,,0.09919779293,"Awesome critique of crypto/web3, etc. Contributions are welcome. Submissions can
be made in the comments section below or on the Web3 Impressions blog. The next
installment of the Stephen Diehl series will be published on 28 Jan 2022."
2345,"The ""Python Machine Learning (1st edition)""  book code repository and info resource","# Python Machine Learning book code repository


[![Google Group](https://img.shields.io/badge/-Google%20Group-lightgrey.svg)](https://groups.google.com/forum/#!forum/python-machine-learning-reader-discussion-board)

---

#### IMPORTANT NOTE (09/21/2017):

This GitHub repository contains the code examples of the **1st Edition** of Python Machine Learning book. If you are looking for the code examples of the **2nd Edition**, please refer to [this](https://github.com/rasbt/python-machine-learning-book-2nd-edition#whats-new-in-the-second-edition-from-the-first-edition) repository instead. 

---

What you can expect are 400 pages rich in useful material just about everything you need to know to get started with machine learning ... from theory to the actual code that you can directly put into action! This is not yet just another ""this is how scikit-learn works"" book. I aim to explain all the underlying concepts, tell you everything you need to know in terms of best practices and caveats, and
we will put those concepts into action mainly using NumPy, scikit-learn, and Theano.

You are not sure if this book is for you? Please checkout the excerpts from the [Foreword](./docs/foreword_ro.pdf) and [Preface](./docs/preface_sr.pdf), or take a look at the [FAQ](#faq) section for further information.



---

[![](./images/pymle_cover_double_small.jpg)](https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_1?ie=UTF8&qid=1470882464&sr=8-1&keywords=python+machine+learning)

1st edition, published September 23rd 2015<br>
Paperback: 454 pages<br>
Publisher: Packt Publishing<br>  
Language: English<br>
ISBN-10: 1783555130<br>  
ISBN-13: 978-1783555130<br>
Kindle ASIN: B00YSILNL0<br>

<br>

[![](./images/CRBadgeNotableBook.jpg)](http://www.computingreviews.com/recommend/bestof/notableitems.cfm?bestYear=2016)

<br>

German ISBN-13: 978-3958454224<br>
Japanese ISBN-13: 978-4844380603<br>
Italian ISBN-13: 978-8850333974<br>
Chinese (traditional) ISBN-13: 978-9864341405<br>
Chinese (mainland) ISBN-13: 978-7111558804<br>
Korean ISBN-13: 979-1187497035<br>
Russian ISBN-13: 978-5970604090<br>



## Table of Contents and Code Notebooks


Simply click on the `ipynb`/`nbviewer` links next to the chapter headlines to view the code examples (currently, the internal document links are only supported by the NbViewer version).
**Please note that these are just the code examples accompanying the book, which I uploaded for your convenience; be aware that these notebooks may not be useful without the formulae and descriptive text.**   


- Excerpts from the [Foreword](./docs/foreword_ro.pdf) and [Preface](./docs/preface_sr.pdf)
- [Instructions for setting up Python and the Jupiter Notebook](./code/ch01/README.md)  

<br>

1. Machine Learning - Giving Computers the Ability to Learn from Data [[dir](./code/ch01)] [[ipynb](./code/ch01/ch01.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch01/ch01.ipynb)]
2. Training Machine Learning Algorithms for Classification [[dir](./code/ch02)] [[ipynb](./code/ch02/ch02.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch02/ch02.ipynb)]
3. A Tour of Machine Learning Classifiers Using Scikit-Learn [[dir](./code/ch03)] [[ipynb](./code/ch03/ch03.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch03/ch03.ipynb)]
4. Building Good Training Sets – Data Pre-Processing [[dir](./code/ch04)] [[ipynb](./code/ch04/ch04.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch04/ch04.ipynb)]
5. Compressing Data via Dimensionality Reduction [[dir](./code/ch05)] [[ipynb](./code/ch05/ch05.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch05/ch05.ipynb)]
6. Learning Best Practices for Model Evaluation and Hyperparameter Optimization [[dir](./code/ch06)] [[ipynb](./code/ch06/ch06.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch06/ch06.ipynb)]
7. Combining Different Models for Ensemble Learning [[dir](./code/ch07)] [[ipynb](./code/ch07/ch07.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch07/ch07.ipynb)]
8. Applying Machine Learning to Sentiment Analysis [[dir](./code/ch08)] [[ipynb](./code/ch08/ch08.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch08/ch08.ipynb)]
9. Embedding a Machine Learning Model into a Web Application [[dir](./code/ch09)] [[ipynb](./code/ch09/ch09.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch09/ch09.ipynb)]
10. Predicting Continuous Target Variables with Regression Analysis [[dir](./code/ch10)] [[ipynb](./code/ch10/ch10.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch10/ch10.ipynb)]
11. Working with Unlabeled Data – Clustering Analysis [[dir](./code/ch11)] [[ipynb](./code/ch11/ch11.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch11/ch11.ipynb)]
12. Training Artificial Neural Networks for Image Recognition [[dir](./code/ch12)] [[ipynb](./code/ch12/ch12.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch12/ch12.ipynb)]
13. Parallelizing Neural Network Training via Theano [[dir](./code/ch13)] [[ipynb](./code/ch13/ch13.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/ch13/ch13.ipynb)]

<br>

#### Equation Reference

<a href=""https://github.com/rasbt/python-machine-learning-book/tree/master/docs/equations""><img src=""images/equation-ref-logo.png"" width=""200"" height=""200"" /></a>

[[PDF](./docs/equations/pymle-equations.pdf)] [[TEX](./docs/equations/pymle-equations.tex)]

#### Slides for Teaching

A big thanks to [Dmitriy Dligach](dmitriydligach) for sharing his slides from his machine learning course that is currently offered at [Loyola University Chicago](http://www.luc.edu/cs/). 

- [https://github.com/dmitriydligach/PyMLSlides](https://github.com/dmitriydligach/PyMLSlides)
- 



#### Additional Math and NumPy Resources

Some readers were asking about Math and NumPy primers, since they were not included due to length limitations. However, I recently put together such resources for another book, but I made these *chapters* freely available online in hope that they also serve as helpful background material for this book:


- Algebra Basics [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_b_algebra.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_b_algebra.epub)]

- A Calculus and Differentiation Primer [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_d_calculus.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_d_calculus.epub)]

- Introduction to NumPy [[PDF](https://sebastianraschka.com/pdf/books/dlb/appendix_f_numpy-intro.pdf)] [[EPUB](https://sebastianraschka.com/pdf/books/dlb/appendix_f_numpy-intro.epub)] [[Code Notebook](https://github.com/rasbt/deep-learning-book/blob/master/code/appendix_f_numpy-intro/appendix_f_numpy-intro.ipynb)]



---

#### Citing this Book

You are very welcome to re-use the code snippets or other contents from this book
in scientific publications and other works;
in this case, I would appreciate citations to the original source:

**BibTeX**:

```
@Book{raschka2015python,
 author = {Raschka, Sebastian},
 title = {Python Machine Learning},
 publisher = {Packt Publishing},
 year = {2015},
 address = {Birmingham, UK},
 isbn = {1783555130}
 }
```


**MLA**:


Raschka, Sebastian. *Python machine learning*. Birmingham, UK: Packt Publishing, 2015. Print.

---

### [Feedback & Reviews](./docs/feedback.md)

#### [Short review snippets](./docs/feedback.md)

[![](./images/pymle_amzn.png)](https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_1?ie=UTF8&qid=1472342570&sr=8-1&keywords=sebastian+raschka)

---
> *Sebastian Raschka’s new book, Python Machine Learning, has just been released. I got a chance to read a review copy and it’s just as I expected - really great! It’s well organized, super easy to follow, and it not only offers a good foundation for smart, non-experts, practitioners will get some ideas and learn new tricks here as well.*  
– Lon Riesberg at [Data Elixir](http://dataelixir.com/issues/55#start)

> *Superb job! Thus far, for me it seems to have hit the right balance of theory and practice…math and code!*   
– [Brian Thomas](http://sebastianraschka.com/blog/2015/writing-pymle.html#comment-2295668894)

> *I've read (virtually) every Machine Learning title based around Scikit-learn and this is hands-down the best one out there.*    
– [Jason Wolosonovich](https://www.linkedin.com/pulse/python-machine-learning-sebastian-raschka-review-jason-wolosonovich?trk=prof-post)

> *The best book I've seen to come out of PACKT Publishing. This is a very well written introduction to machine learning with Python. As others have noted, a perfect mixture of theory and application.*    
– [Josh D.](https://www.amazon.com/gp/customer-reviews/R27WB1GWTNGIR2/ref=cm_cr_getr_d_rvw_ttl?ie=UTF8&ASIN=1783555130)

> *A book with a blend of qualities that is hard to come by: combines the needed mathematics to control the theory with the applied coding in Python. Also great to see it doesn't waste paper in giving a primer on Python as many other books do just to appeal to the greater audience. You can tell it's been written by knowledgeable writers and not just DIY geeks.*    
– [Amazon Customer](https://www.amazon.com/gp/customer-reviews/RZWY4TF66Z6V0/ref=cm_cr_getr_d_rvw_ttl?ie=UTF8&ASIN=1783555130)

> *Sebastian Raschka created an amazing machine learning tutorial which combines theory with practice. The book explains machine learning from a theoretical perspective and has tons of coded examples to show how you would actually use the machine learning technique. It can be read by a beginner or advanced programmer.*
- William P. Ross, [7 Must Read Python Books](http://williampross.com/7-must-read-python-books/)

#### Longer reviews

If you need help to decide whether this book is for you, check out some of the ""longer"" reviews linked below. (If you wrote a review, please let me know, and I'd be happy to add it to the list).

- [Python Machine Learning Review](http://www.bcs.org/content/conWebDoc/55586) by Patrick Hill at the Chartered Institute for IT
- [Book Review: Python Machine Learning by Sebastian Raschka](http://whatpixel.com/python-machine-learning-book-review/) by Alex Turner at WhatPixel

---

## Links

- ebook and paperback at [Amazon.com](http://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130/ref=sr_1_2?ie=UTF8&qid=1437754343&sr=8-2&keywords=python+machine+learning+essentials), [Amazon.co.uk](http://www.amazon.co.uk/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130), [Amazon.de](http://www.amazon.de/s/ref=nb_sb_noss_2?__mk_de_DE=ÅMÅŽÕÑ&url=search-alias%3Daps&field-keywords=python+machine+learning)
- [ebook and paperback](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning) from Packt (the publisher)
- at other book stores: [Google Books](https://books.google.com/books?id=GOVOCwAAQBAJ&source=gbs_slider_cls_metadata_7_mylibrary), [O'Reilly](http://shop.oreilly.com/product/9781783555130.do), [Safari](https://www.safaribooksonline.com/library/view/python-machine-learning/9781783555130/), [Barnes & Noble](http://www.barnesandnoble.com/w/python-machine-learning-essentials-sebastian-raschka/1121999969?ean=9781783555130), [Apple iBooks](https://itunes.apple.com/us/book/python-machine-learning/id1028207310?mt=11), ...
- social platforms: [Goodreads](https://www.goodreads.com/book/show/25545994-python-machine-learning)

#### Translations

- [Italian translation](https://www.amazon.it/learning-Costruire-algoritmi-generare-conoscenza/dp/8850333978/) via ""Apogeo""
- [German translation](https://www.amazon.de/Machine-Learning-Python-mitp-Professional/dp/3958454224/) via ""mitp Verlag""
- [Japanese translation](http://www.amazon.co.jp/gp/product/4844380605/) via ""Impress Top Gear""
- [Chinese translation (traditional Chinese)](https://taiwan.kinokuniya.com/bw/9789864341405)
- [Chinese translation (simple Chinese)](https://book.douban.com/subject/27000110/)
- [Korean translation](http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&barcode=9791187497035) via ""Kyobo""
- [Polish translation](https://www.amazon.de/Python-Uczenie-maszynowe-Sebastian-Raschka/dp/8328336138/ref=sr_1_11?ie=UTF8&qid=1513601461&sr=8-11&keywords=sebastian+raschka) via ""Helion""

---

### [Literature References & Further Reading Resources](./docs/references.md)

### [Errata](./docs/errata.md)


---

### Bonus Notebooks (not in the book)

- Logistic Regression Implementation [[dir](./code/bonus)] [[ipynb](./code/bonus/logistic_regression.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/logistic_regression.ipynb)]
- A Basic Pipeline and Grid Search Setup [[dir](./code/bonus)] [[ipynb](./code/bonus/svm_iris_pipeline_and_gridsearch.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/svm_iris_pipeline_and_gridsearch.ipynb)]
- An Extended Nested Cross-Validation Example [[dir](./code/bonus)] [[ipynb](./code/bonus/nested_cross_validation.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/nested_cross_validation.ipynb)]
- A Simple Barebones Flask Webapp Template [[view directory](./code/bonus/flask_webapp_ex01)][[download as zip-file](https://github.com/rasbt/python-machine-learning-book/raw/master/code/bonus/flask_webapp_ex01/flask_webapp_ex01.zip)]
- Reading handwritten digits from MNIST into NumPy arrays [[GitHub ipynb](./code/bonus/reading_mnist.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/reading_mnist.ipynb)]
- Scikit-learn Model Persistence using JSON [[GitHub ipynb](./code/bonus/scikit-model-to-json.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/scikit-model-to-json.ipynb)]
- Multinomial logistic regression / softmax regression [[GitHub ipynb](./code/bonus/softmax-regression.ipynb)] [[nbviewer](http://nbviewer.ipython.org/github/rasbt/python-machine-learning-book/blob/master/code/bonus/softmax-regression.ipynb)]

<hr>

**""Related Content"" (not in the book)**

- [Model evaluation, model selection, and algorithm selection in machine learning - Part I](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part1.html)
- [Model evaluation, model selection, and algorithm selection in machine learning - Part II](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part2.html)
- [Model evaluation, model selection, and algorithm selection in machine learning - Part III](http://sebastianraschka.com/blog/2016/model-evaluation-selection-part3.html)

---

#### SciPy 2016

We had such a great time at [SciPy 2016](http://scipy2016.scipy.org/ehome/index.php?eventid=146062&tabid=332930&) in Austin! It was a real pleasure to meet and chat with so many readers of my book. Thanks so much for all the nice words and feedback! And in case you missed it, Andreas Mueller and I gave an **Introduction to Machine Learning with Scikit-learn**; if you are interested, the video recordings of [Part I](https://www.youtube.com/watch?v=OB1reY6IX-o&index=91&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6) and [Part II](https://www.youtube.com/watch?v=Cte8FYCpylk&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6&index=90) are now online!

[![](images/scipy2016.jpg)](https://www.youtube.com/watch?v=OB1reY6IX-o&index=91&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6)

#### PyData Chicago 2016

I attempted the rather challenging task of introducing scikit-learn & machine learning in *just* 90 minutes at PyData Chicago 2016. The slides and tutorial material are available at ""[Learning scikit-learn -- An Introduction to Machine Learning in Python](https://github.com/rasbt/pydata-chicago2016-ml-tutorial).""


---

**Note**

I have set up a separate library, [`mlxtend`](http://rasbt.github.io/mlxtend/), containing additional implementations of machine learning (and general ""data science"") algorithms. I also added implementations from this book (for example, the decision region plot, the artificial neural network, and sequential feature selection algorithms) with additional functionality.

[![](./images/mlxtend_logo.png)](http://rasbt.github.io/mlxtend/)


<br>

<hr>

### Translations

[![](./images/pymle-cover_it.jpg)](https://www.amazon.it/learning-Costruire-algoritmi-generare-conoscenza/dp/8850333978/)
[![](./images/pymle-cover_de.jpg)](https://www.amazon.de/Machine-Learning-Python-mitp-Professional/dp/3958454224/)
[![](./images/pymle-cover_jp.jpg)](http://www.amazon.co.jp/gp/product/4844380605/)
[![](./images/pymle-cover_cn.jpg)](https://taiwan.kinokuniya.com/bw/9789864341405)
[![](./images/pymle-cover_cn_mainland.jpg)](https://book.douban.com/subject/27000110/)
[![](./images/pymle-cover_kr.jpg)](http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9791187497035&orderClick=LEA&Kc=)
[![](./images/pymle-cover_ru.jpg)](http://www.ozon.ru/context/detail/id/140152222/)
[![](./images/pymle-cover_pl.jpg)](https://www.amazon.de/Python-Uczenie-maszynowe-Sebastian-Raschka/dp/8328336138/ref=sr_1_11?ie=UTF8&qid=1513601461&sr=8-11&keywords=sebastian+raschka)

<hr>

---

***Dear readers***,  
first of all, I want to thank all of you for the great support! I am really happy about all the great feedback you sent me so far, and I am glad that the book has been so useful to a broad audience.

Over the last couple of months, I received hundreds of emails, and I tried to answer as many as possible in the available time I have. To make them useful to other readers as well, I collected many of my answers in the FAQ section (below).

In addition, some of you asked me about a platform for readers to discuss the contents of the book. I hope that this would provide an opportunity for you to discuss and share your knowledge with other readers:

#### [Google Groups Discussion Board](https://groups.google.com/forum/#!forum/python-machine-learning-reader-discussion-board)

(And I will try my best to answer questions myself if time allows! :))

> The only thing to do with good advice is to pass it on. It is never of any use to oneself.  
— Oscar Wilde

---

## Examples and Applications by Readers

Once again, I have to say (big!) THANKS for all the nice feedback about the book. I've received many emails from readers, who
put the concepts and examples from this book out into the real world and make good use of them in their projects. In this section, I am
starting to gather some of these great applications, and I'd be more than happy to add your project to this list -- just shoot me a quick mail!

- [40 scripts on Optical Character Recognition](https://github.com/rrlyman/PythonMachineLearingExamples) by [Richard Lyman](https://github.com/rrlyman)
- [Code experiments](https://github.com/jeremyn/python-machine-learning-book) by [Jeremy Nation](https://github.com/jeremyn)
- [What I Learned Implementing a Classifier from Scratch in Python](http://www.jeannicholashould.com) by [Jean-Nicholas Hould](http://www.jeannicholashould.com)

## FAQ

### General Questions

- [What are machine learning and data science?](./faq/datascience-ml.md)
- [Why do you and other people sometimes implement machine learning algorithms from scratch?](./faq/implementing-from-scratch.md)
- [What learning path/discipline in data science I should focus on?](./faq/data-science-career.md)
- [At what point should one start contributing to open source?](./faq/open-source.md)
- [How important do you think having a mentor is to the learning process?](./faq/mentor.md)
- [Where are the best online communities centered around data science/machine learning or python?](./faq/ml-python-communities.md)
- [How would you explain machine learning to a software engineer?](./faq/ml-to-a-programmer.md)
- [How would your curriculum for a machine learning beginner look like?](./faq/ml-curriculum.md)
- [What is the Definition of Data Science?](./faq/definition_data-science.md)
- [How do Data Scientists perform model selection? Is it different from Kaggle?](./faq/model-selection-in-datascience.md)

### Questions about the Machine Learning Field

- [How are Artificial Intelligence and Machine Learning related?](./faq/ai-and-ml.md)
- [What are some real-world examples of applications of machine learning in the field?](./faq/ml-examples.md)
- [What are the different fields of study in data mining?](./faq/datamining-overview.md)
- [What are differences in research nature between the two fields: machine learning & data mining?](./faq/datamining-vs-ml.md)
- [How do I know if the problem is solvable through machine learning?](./faq/ml-solvable.md)
- [What are the origins of machine learning?](./faq/ml-origins.md)
- [How was classification, as a learning machine, developed?](./faq/classifier-history.md)
- [Which machine learning algorithms can be considered as among the best?](./faq/best-ml-algo.md)
- [What are the broad categories of classifiers?](./faq/classifier-categories.md)
- [What is the difference between a classifier and a model?](./faq/difference_classifier_model.md)
- [What is the difference between a parametric learning algorithm and a nonparametric learning algorithm?](./faq/parametric_vs_nonparametric.md)
- [What is the difference between a cost function and a loss function in machine learning?](./faq/cost-vs-loss.md)

### Questions about ML Concepts and Statistics

##### Cost Functions and Optimization

- [Fitting a model via closed-form equations vs. Gradient Descent vs Stochastic Gradient Descent vs Mini-Batch Learning -- what is the difference?](./faq/closed-form-vs-gd.md)
- [How do you derive the Gradient Descent rule for Linear Regression and Adaline?](./faq/linear-gradient-derivative.md)

##### Regression Analysis

- [What is the difference between Pearson R and Simple Linear Regression?](./faq/pearson-r-vs-linear-regr.md)

##### Tree models

- [How does the random forest model work? How is it different from bagging and boosting in ensemble models?](./faq/bagging-boosting-rf.md)
- [What are the disadvantages of using classic decision tree algorithm for a large dataset?](./faq/decision-tree-disadvantages.md)
- [Why are implementations of decision tree algorithms usually binary, and what are the advantages of the different impurity metrics?](./faq/decision-tree-binary.md)
- [Why are we growing decision trees via entropy instead of the classification error?](./faq/decisiontree-error-vs-entropy.md)
- [When can a random forest perform terribly?](./faq/random-forest-perform-terribly.md)

##### Model evaluation

- [What is overfitting?](./faq/overfitting.md)
- [How can I avoid overfitting?](./faq/avoid-overfitting.md)
- [Is it always better to have the largest possible number of folds when performing cross validation?](./faq/number-of-kfolds.md)
- [When training an SVM classifier, is it better to have a large or small number of support vectors?](./faq/num-support-vectors.md)
- [How do I evaluate a model?](./faq/evaluate-a-model.md)
- [What is the best validation metric for multi-class classification?](./faq/multiclass-metric.md)
- [What factors should I consider when choosing a predictive model technique?](./faq/choosing-technique.md)
- [What are the best toy datasets to help visualize and understand classifier behavior?](./faq/clf-behavior-data.md)
- [How do I select SVM kernels?](./faq/select_svm_kernels.md)
- [Interlude: Comparing and Computing Performance Metrics in Cross-Validation -- Imbalanced Class Problems and 3 Different Ways to Compute the F1 Score](./faq/computing-the-f1-score.md)

##### Logistic Regression

- [What is Softmax regression and how is it related to Logistic regression?](./faq/softmax_regression.md)
- [Why is logistic regression considered a linear model?](./faq/logistic_regression_linear.md)
- [What is the probabilistic interpretation of regularized logistic regression?](./faq/probablistic-logistic-regression.md)
- [Does regularization in logistic regression always results in better fit and better generalization?](./faq/regularized-logistic-regression-performance.md)
- [What is the major difference between naive Bayes and logistic regression?](./faq/naive-bayes-vs-logistic-regression.md)
- [What exactly is the ""softmax and the multinomial logistic loss"" in the context of machine learning?](./faq/softmax.md)
- [What is the relation between Loigistic Regression and Neural Networks and when to use which?](./faq/logisticregr-neuralnet.md)
- [Logistic Regression: Why sigmoid function?](./faq/logistic-why-sigmoid.md)
- [Is there an analytical solution to Logistic Regression similar to the Normal Equation for Linear Regression?](./faq/logistic-analytical.md)


##### Neural Networks and Deep Learning

- [What is the difference between deep learning and usual machine learning?](./faq/difference-deep-and-normal-learning.md)
- [Can you give a visual explanation for the back propagation algorithm for neural networks?](./faq/visual-backpropagation.md)
- [Why did it take so long for deep networks to be invented?](./faq/inventing-deeplearning.md)
- [What are some good books/papers for learning deep learning?](./faq/deep-learning-resources.md)
- [Why are there so many deep learning libraries?](./faq/many-deeplearning-libs.md)
- [Why do some people hate neural networks/deep learning?](./faq/deeplearning-criticism.md)
- [How can I know if Deep Learning works better for a specific problem than SVM or random forest?](./faq/deeplearn-vs-svm-randomforest.md)
- [What is wrong when my neural network's error increases?](./faq/neuralnet-error.md)
- [How do I debug an artificial neural network algorithm?](./faq/nnet-debugging-checklist.md)
- [What is the difference between a Perceptron, Adaline, and neural network model?](./faq/diff-perceptron-adaline-neuralnet.md)
- [What is the basic idea behind the dropout technique?](./faq/dropout.md)


##### Other Algorithms for Supervised Learning

- [Why is Nearest Neighbor a Lazy Algorithm?](./faq/lazy-knn.md)

##### Unsupervised Learning

- [What are some of the issues with clustering?](./faq/issues-with-clustering.md)

##### Semi-Supervised Learning

- [What are the advantages of semi-supervised learning over supervised and unsupervised learning?](./faq/semi-vs-supervised.md)

##### Ensemble Methods

- [Is Combining Classifiers with Stacking Better than Selecting the Best One?](./faq/logistic-boosting.md)

##### Preprocessing, Feature Selection and Extraction

- [Why do we need to re-use training parameters to transform test data?](./faq/scale-training-test.md)
- [What are the different dimensionality reduction methods in machine learning?](./faq/dimensionality-reduction.md)
- [What is the difference between LDA and PCA for dimensionality reduction?](./faq/lda-vs-pca.md)
- [When should I apply data normalization/standardization?](./faq/when-to-standardize.md)
- [Does mean centering or feature scaling affect a Principal Component Analysis?](./faq/pca-scaling.md)
- [How do you attack a machine learning problem with a large number of features?](./faq/large-num-features.md)
- [What are some common approaches for dealing with missing data?](./faq/missing-data.md)
- [What is the difference between filter, wrapper, and embedded methods for feature selection?](./faq/feature_sele_categories.md)
- [Should data preparation/pre-processing step be considered one part of feature engineering? Why or why not?](./faq/dataprep-vs-dataengin.md)
- [Is a bag of words feature representation for text classification considered as a sparse matrix?](./faq/bag-of-words-sparsity.md)

##### Naive Bayes

- [Why is the Naive Bayes Classifier naive?](./faq/naive-naive-bayes.md)
- [What is the decision boundary for Naive Bayes?](./faq/naive-bayes-boundary.md)
- [Can I use Naive Bayes classifiers for mixed variable types?](./faq/naive-bayes-vartypes.md)
- [Is it possible to mix different variable types in Naive Bayes, for example, binary and continues features?](./naive-bayes-vartypes.md)

##### Other

- [What is Euclidean distance in terms of machine learning?](./faq/euclidean-distance.md)
- [When should one use median, as opposed to the mean or average?](./faq/median-vs-mean.md)

##### Programming Languages and Libraries for Data Science and Machine Learning

- [Is R used extensively today in data science?](./faq/r-in-datascience.md)
- [What is the main difference between TensorFlow and scikit-learn?](./faq/tensorflow-vs-scikitlearn.md)

<br>





### Questions about the Book

- [Can I use paragraphs and images from the book in presentations or my blog?](./faq/copyright.md)
- [How is this different from other machine learning books?](./faq/different.md)
- [Which version of Python was used in the code examples?](./faq/py2py3.md)
- [Which technologies and libraries are being used?](./faq/technologies.md)
- [Which book version/format would you recommend?](./faq/version.md)
- [Why did you choose Python for machine learning?](./faq/why-python.md)
- [Why do you use so many leading and trailing underscores in the code examples?](./faq/underscore-convention.md)
- [What is the purpose of the `return self` idioms in your code examples?](./faq/return_self_idiom.md)
- [Are there any prerequisites and recommended pre-readings?](./faq/prerequisites.md)
- [How can I apply SVM to categorical data?](./faq/svm_for_categorical.md)


## Contact

I am happy to answer questions! Just write me an [email](mailto:mail@sebastianraschka.com)
or consider asking the question on the [Google Groups Email List](https://groups.google.com/forum/#!forum/python-machine-learning-book).

If you are interested in keeping in touch, I have quite a lively twitter stream ([@rasbt](https://twitter.com/rasbt)) all about data science and machine learning. I also maintain a [blog](http://sebastianraschka.com/articles.html) where I post all of the things I am particularly excited about.
",,,,,,,,,,,,,,,,,,,,,,,0.1329887315,"This GitHub repository contains the code examples of the **1st Edition** of
Python Machine Learning book. Please refer to [this] repository instead. 400
pages rich in useful material just about everything you need to know to get
started with machine learning... from theory to the actual code that you can
directly put into action."
2593,:bookmark: Personal mini-web in text,"<h1 align=""center"">buku</h1>

<p align=""center"">
<a href=""https://github.com/jarun/buku/releases/latest""><img src=""https://img.shields.io/github/release/jarun/buku.svg?maxAge=600"" alt=""Latest release"" /></a>
<a href=""https://repology.org/project/buku/versions""><img src=""https://repology.org/badge/tiny-repos/buku.svg?header=repos"" alt=""Availability""></a>
<a href=""https://pypi.org/project/buku/""><img src=""https://img.shields.io/pypi/v/buku.svg?maxAge=600"" alt=""PyPI"" /></a>
<a href=""https://circleci.com/gh/jarun/workflows/buku""><img src=""https://img.shields.io/circleci/project/github/jarun/buku.svg"" alt=""Build Status"" /></a>
<a href=""http://buku.readthedocs.io/en/latest/?badge=latest""><img src=""https://readthedocs.org/projects/buku/badge/?version=latest"" alt=""Docs Status"" /></a>
<a href=""https://en.wikipedia.org/wiki/Privacy-invasive_software""><img src=""https://img.shields.io/badge/privacy-✓-crimson"" alt=""Privacy Awareness"" /></a>
<a href=""https://github.com/jarun/buku/blob/master/LICENSE""><img src=""https://img.shields.io/badge/license-GPLv3-yellowgreen.svg?maxAge=2592000"" alt=""License"" /></a>
</p>

<p align=""center"">
<a href=""https://asciinema.org/a/137065""><img src=""https://asciinema.org/a/137065.svg"" alt=""buku in action!"" width=""734""/></a>
</p>

<p align=""center""><i>buku in action!</i></p>

### Introduction

`buku` is a powerful bookmark manager and a personal textual mini-web.

For those who prefer the GUI, [bukuserver](https://github.com/jarun/buku/tree/master/bukuserver#readme) exposes a browsable front-end on a local web host server.

When I started writing it, I couldn't find a flexible command-line solution with a private, portable, merge-able database along with seamless GUI integration. Hence, `buku`.

`buku` can import bookmarks from browser(s) or fetch the title, tags and description of a URL from the web. Use your favourite editor to add, compose and update bookmarks. Search bookmarks instantly with multiple search options, including regex and a deep scan mode (handy with URLs).

It can look up broken links on the Wayback Machine. There's an Easter Egg to revisit random bookmarks.

There's no tracking, hidden history, obsolete records, usage analytics or homing.

To get started right away, jump to the [Quickstart](#quickstart) section. `buku` has one of the best documentation around. The man page comes with examples. For internal details, please refer to the [operational notes](https://github.com/jarun/buku/wiki/Operational-notes).

`buku` is a library too! There are several related projects, including a browser plug-in.

### Table of Contents

- [Features](#features)
- [Installation](#installation)
  - [Dependencies](#dependencies)
  - [From a package manager](#from-a-package-manager)
  - [Release packages](#release-packages)
  - [From source](#from-source)
  - [Running standalone](#running-standalone)
- [Shell completion](#shell-completion)
- [Usage](#usage)
  - [Command-line options](#command-line-options)
  - [Colors](#colors)
- [Quickstart](#quickstart)
- [Examples](#examples)
- [Automation](#automation)
- [Troubleshooting](#troubleshooting)
  - [Editor integration](#editor-integration)
- [Collaborators](#collaborators)
- [Contributions](#contributions)
- [Related projects](#related-projects)
- [In the Press](#in-the-press)

### Features

- Store bookmarks with auto-fetched title, tags and description
- Auto-import from Firefox, Google Chrome, Chromium and MS Edge
- Open bookmarks and search results in browser
- Shorten, expand URLs
- Browse cached page from the Wayback Machine
- Text editor integration
- Lightweight, clean interface, custom colors
- Powerful search options (regex, substring...)
- Continuous search with on the fly mode switch
- Portable, merge-able database to sync between systems
- Import/export bookmarks from/to HTML, XBEL, Markdown or Orgfile
- Smart tag management using redirection (>>, >, <<)
- Multi-threaded full DB refresh
- Manual encryption support
- Shell completion scripts, man page with examples
- Privacy-aware (no unconfirmed user data collection)

### Installation

#### Dependencies

| Feature | Dependency |
| --- | --- |
| Lang, SQLite | Python 3.7+ |
| HTTPS | certifi, urllib3 |
| Encryption | cryptography |
| HTML | beautifulsoup4, html5lib |

To copy URL to clipboard `buku` uses `xsel` (or `xclip`) on Linux, `pbcopy` (default installed) on OS X, `clip` (default installed) on Windows, `termux-clipboard` on Termux (terminal emulation for Android), `wl-copy` on Wayland. If X11 is missing, GNU Screen or tmux copy-paste buffers are recognized.

#### From a package manager

To install buku with all its dependencies from PyPI, run:

    # pip3 install buku

You can also install `buku` from your package manager. If the version available is dated try an alternative installation method.

<details><summary>Packaging status (expand)</summary>
<p>
<br>
<a href=""https://repology.org/project/buku/versions""><img src=""https://repology.org/badge/vertical-allrepos/buku.svg"" alt=""Packaging status""></a>
</p>
Unlisted packagers:
<p>
<br>
● <a href=""https://pypi.org/project/buku/"">PyPI</a> (<code>pip3 install buku</code>)<br>
● Termux (<code>pip3 install buku</code>)<br>
</p>
</details>

#### Release packages

Auto-generated packages (with only the cli component) for Arch Linux, CentOS, Debian, Fedora, openSUSE Leap and Ubuntu are available with the [latest stable release](https://github.com/jarun/buku/releases/latest).

NOTE: CentOS may not have the python3-beautifulsoup4 package in the repos. Install it using pip3.

#### From source

If you have git installed, clone this repository. Otherwise download the [latest stable release](https://github.com/jarun/buku/releases/latest) or [development version](https://github.com/jarun/buku/archive/master.zip) (*risky*).

Install the dependencies. For example, on Ubuntu:

    $ apt-get install ca-certificates python3-urllib3 python3-cryptography python3-bs4

Install the cli component to default location (`/usr/local`):

    $ sudo make install

To remove, run:

    $ sudo make uninstall

`PREFIX` is supported, in case you want to install to a different location.

#### Running standalone

`buku` is a standalone utility. From the containing directory, run:

    $ chmod +x buku
    $ ./buku

### Shell completion

Shell completion scripts for Bash, Fish and Zsh can be found in respective subdirectories of [auto-completion/](https://github.com/jarun/buku/blob/master/auto-completion). Please refer to your shell's manual for installation instructions.

### Usage

#### Command-line options

```
usage: buku [OPTIONS] [KEYWORD [KEYWORD ...]]

Bookmark manager like a text-based mini-web.

POSITIONAL ARGUMENTS:
      KEYWORD              search keywords

GENERAL OPTIONS:
      -a, --add URL [tag, ...]
                           bookmark URL with comma-separated tags
      -u, --update [...]   update fields of an existing bookmark
                           accepts indices and ranges
                           refresh title and desc if no edit options
                           if no arguments:
                           - update results when used with search
                           - otherwise refresh all titles and desc
      -w, --write [editor|index]
                           edit and add a new bookmark in editor
                           else, edit bookmark at index in EDITOR
                           edit last bookmark, if index=-1
                           if no args, edit new bookmark in EDITOR
      -d, --delete [...]   remove bookmarks from DB
                           accepts indices or a single range
                           if no arguments:
                           - delete results when used with search
                           - otherwise delete all bookmarks
      -h, --help           show this information and exit
      -v, --version        show the program version and exit

EDIT OPTIONS:
      --url keyword        bookmark link
      --tag [+|-] [...]    comma-separated tags
                           clear bookmark tagset, if no arguments
                           '+' appends to, '-' removes from tagset
      --title [...]        bookmark title; if no arguments:
                           -a: do not set title, -u: clear title
      -c, --comment [...]  notes or description of the bookmark
                           clears description, if no arguments
      --immutable N        disable web-fetch during auto-refresh
                           N=0: mutable (default), N=1: immutable

SEARCH OPTIONS:
      -s, --sany [...]     find records with ANY matching keyword
                           this is the default search option
      -S, --sall [...]     find records matching ALL the keywords
                           special keywords -
                           ""blank"": entries with empty title/tag
                           ""immutable"": entries with locked title
      --deep               match substrings ('pen' matches 'opens')
      -r, --sreg expr      run a regex search
      -t, --stag [tag [,|+] ...] [- tag, ...]
                           search bookmarks by tags
                           use ',' to find entries matching ANY tag
                           use '+' to find entries matching ALL tags
                           excludes entries with tags after ' - '
                           list all tags, if no search keywords
      -x, --exclude [...]  omit records matching specified keywords

ENCRYPTION OPTIONS:
      -l, --lock [N]       encrypt DB in N (default 8) # iterations
      -k, --unlock [N]     decrypt DB in N (default 8) # iterations

POWER TOYS:
      --ai                 auto-import bookmarks from web browsers
                           Firefox, Chrome, Chromium, Vivaldi, Edge
      -e, --export file    export bookmarks to Firefox format HTML
                           export XBEL, if file ends with '.xbel'
                           export Markdown, if file ends with '.md'
                           format: [title](url) <!-- TAGS -->
                           export Orgfile, if file ends with '.org'
                           format: *[[url][title]] :tags:
                           export buku DB, if file ends with '.db'
                           combines with search results, if opted
      -i, --import file    import bookmarks from file
                           supports .html .xbel .json .md .org .db
      -p, --print [...]    show record details by indices, ranges
                           print all bookmarks, if no arguments
                           -n shows the last n results (like tail)
      -f, --format N       limit fields in -p or JSON search output
                           N=1: URL; N=2: URL, tag; N=3: title;
                           N=4: URL, title, tag; N=5: title, tag;
                           N0 (10, 20, 30, 40, 50) omits DB index
      -j, --json [file]    JSON formatted output for -p and search.
                           prints to stdout if argument missing.
                           otherwise writes to given file
      --colors COLORS      set output colors in five-letter string
      --nc                 disable color output
      -n, --count N        show N results per page (default 10)
      --np                 do not show the subprompt, run and exit
      -o, --open [...]     browse bookmarks by indices and ranges
                           open a random bookmark, if no arguments
      --oa                 browse all search results immediately
      --replace old new    replace old tag with new tag everywhere
                           delete old tag, if new tag not specified
      --shorten index|URL  fetch shortened url from tny.im service
      --expand index|URL   expand a tny.im shortened url
      --cached index|URL   browse a cached page from Wayback Machine
      --suggest            show similar tags when adding bookmarks
      --tacit              reduce verbosity, skip some confirmations
      --nostdin            do not wait for input (must be first arg)
      --threads N          max network connections in full refresh
                           default N=4, min N=1, max N=10
      -V                   check latest upstream version available
      -g, --debug          show debug information and verbose logs

SYMBOLS:
      >                    url
      +                    comment
      #                    tags

PROMPT KEYS:
    1-N                    browse search result indices and/or ranges
    O [id|range [...]]     open search results/indices in GUI browser
                           toggle try GUI browser if no arguments
    a                      open all results in browser
    s keyword [...]        search for records with ANY keyword
    S keyword [...]        search for records with ALL keywords
    d                      match substrings ('pen' matches 'opened')
    r expression           run a regex search
    t [tag, ...]           search by tags; show taglist, if no args
    g taglist id|range [...] [>>|>|<<] [record id|range ...]
                           append, set, remove (all or specific) tags
                           search by taglist id(s) if records are omitted
    n                      show next page of search results
    o id|range [...]       browse bookmarks by indices and/or ranges
    p id|range [...]       print bookmarks by indices and/or ranges
    w [editor|id]          edit and add or update a bookmark
    c id                   copy URL at search result index to clipboard
    ?                      show this help
    q, ^D, double Enter    exit buku
```

#### Colors

`buku` supports custom colors. Visit the wiki page on how to [customize colors](https://github.com/jarun/buku/wiki/Customize-colors) for more details.

### Quickstart

1. Export `VISUAL` or `EDITOR` to point to your favourite editor. Note that `VISUAL` takes precedence over `EDITOR`.
2. Create a sweeter shortcut with some convenience.

       alias b='buku --suggest'
3. Auto-import bookmarks from your browser(s). Please quit the relevant browsers beforehand to ensure the databases are not locked.

       b --ai
4. Manually add a bookmark (for hands-on).

       b -w
5. List your bookmarks with DB index.

       b -p
6. For GUI and browser integration (or to sync bookmarks with your favourite bookmark management service) refer to the wiki page on [System integration](https://github.com/jarun/buku/wiki/System-integration).
7. Quick (bash/zsh) commands to fuzzy search with fzf and open the selection in Firefox:

       firefox $(buku -p -f 10 | fzf)
       firefox $(buku -p -f 40 | fzf | cut -f1)

   POSIX script to show a preview of the bookmark as well:

   ```sh
   #!/usr/bin/env sh

   url=$(buku -p -f4 | fzf -m --reverse --preview ""buku -p {1}"" --preview-window=wrap | cut -f2)

   if [ -n ""$url"" ]; then
       echo ""$url"" | xargs firefox
   fi
   ```

### Examples

1. **Edit and add** a bookmark from editor:

       $ buku -w
       $ buku -w 'gedit -w'
       $ buku -w 'macvim -f' -a https://ddg.gg search engine, privacy
    The first command picks editor from the environment variable `EDITOR`. The second command opens gedit in blocking mode. The third command opens macvim with option -f and the URL and tags populated in template.
2. **Add** a simple bookmark:

       $ buku --nostdin -a https://github.com/
       2648. GitHub: Let’s build from here · GitHub
       > https://github.com/
       + GitHub is where over 94 million developers shape the future of software, together. Contribute to the open source community, manage your Git repositories, review code like a pro, track bugs
        and features, power your CI/CD and DevOps workflows, and secure code before you commit it.

       $ buku --nostdin -a https://github.com/
       [ERROR] URL [https://github.com/] already exists at index 2648

      `>`: URL, `+`: comment, `#`: tags

      Title, description and tags will be fetched from site. Buku only stores unique URLs and will raise error if the URL already present in the database:
3. **Add** a bookmark with **tags** `search engine` and `privacy`, **comment** `Search engine with perks`, **fetch page title** from the web:

       $ buku -a https://ddg.gg search engine, privacy -c Search engine with perks
       336. DuckDuckGo
       > https://ddg.gg
       + Alternative search engine with perks
       # privacy,search engine
    where, `>`: URL, `+`: comment, `#`: tags
4. **Add** a bookmark with tags `search engine` & `privacy` and **immutable custom title** `DDG`:

       $ buku -a https://ddg.gg search engine, privacy --title 'DDG' --immutable 1
       336. DDG (L)
       > https://ddg.gg
       # privacy,search engine
    Note that URL must precede tags.
5. **Add** a bookmark **without a title** (works for update too):

       $ buku -a https://ddg.gg search engine, privacy --title
6. **Edit and update** a bookmark from editor:

       $ buku -w 15012014
    This will open the existing bookmark's details in the editor for modifications. Environment variable `EDITOR` must be set.
7. **Update** existing bookmark at index 15012014 with new URL, tags and comments, fetch title from the web:

       $ buku -u 15012014 --url http://ddg.gg/ --tag web search, utilities -c Private search engine
8. **Fetch and update only title** for bookmark at 15012014:

       $ buku -u 15012014
9. **Update only comment** for bookmark at 15012014:

       $ buku -u 15012014 -c this is a new comment
    Applies to --url, --title and --tag too.
10. **Export** bookmarks tagged `tag 1` or `tag 2` to HTML, XBEL, Markdown, Orgfile or a new database:

       $ buku -e bookmarks.html --stag tag 1, tag 2
       $ buku -e bookmarks.xbel --stag tag 1, tag 2
       $ buku -e bookmarks.md --stag tag 1, tag 2
       $ buku -e bookmarks.org --stag tag 1, tag 2
       $ buku -e bookmarks.db --stag tag 1, tag 2
    All bookmarks are exported if search is not opted.
11. **Import** bookmarks from HTML, XBEL, Markdown or Orgfile:

        $ buku -i bookmarks.html
        $ buku -i bookmarks.xbel
        $ buku -i bookmarks.md
        $ buku -i bookmarks.org
        $ buku -i bookmarks.db
12. **Delete only comment** for bookmark at 15012014:

        $ buku -u 15012014 -c
    Applies to --title and --tag too. URL cannot be deleted without deleting the bookmark.
13. **Update** or refresh **full DB** with page titles from the web:

        $ buku -u
        $ buku -u --tacit (show only failures and exceptions)
    This operation can update the title or description fields of non-immutable bookmarks by parsing the fetched page. Fields are updated only if the fetched fields are non-empty. Tags remain untouched.
14. **Delete** bookmark at index 15012014:

        $ buku -d 15012014
        Index 15012020 moved to 15012014
    The last index is moved to the deleted index to keep the DB compact. Add `--tacit` to delete without confirmation.
15. **Delete all** bookmarks:

        $ buku -d
16. **Delete** a **range or list** of bookmarks:

        $ buku -d 100-200
        $ buku -d 100 15 200
17. **Search** bookmarks for **ANY** of the keywords `kernel` and `debugging` in URL, title or tags:

        $ buku kernel debugging
        $ buku -s kernel debugging
18. **Search** bookmarks with **ALL** the keywords `kernel` and `debugging` in URL, title or tags:

        $ buku -S kernel debugging
19. **Search** bookmarks **tagged** `general kernel concepts`:

        $ buku --stag general kernel concepts
20. **Search** for bookmarks matching **ANY** of the tags `kernel`, `debugging`, `general kernel concepts`:

        $ buku --stag kernel, debugging, general kernel concepts
21. **Search** for bookmarks matching **ALL** of the tags `kernel`, `debugging`, `general kernel concepts`:

        $ buku --stag kernel + debugging + general kernel concepts
22. **Search** for bookmarks matching any of the keywords `hello` or `world`, excluding the keywords `real` and `life`, matching both the tags `kernel` and `debugging`, but **excluding** the tags `general kernel concepts` and `books`:

        $ buku hello world --exclude real life --stag 'kernel + debugging - general kernel concepts, books'
23. List **all unique tags** alphabetically:

        $ buku --stag
24. Run a **search and update** the results:

        $ buku -s kernel debugging -u --tag + linux kernel
25. Run a **search and delete** the results:

        $ buku -s kernel debugging -d
26. **Encrypt or decrypt** DB with **custom number of iterations** (15) to generate key:

        $ buku -l 15
        $ buku -k 15
    The same number of iterations must be specified for one lock & unlock instance. Default is 8, if omitted.
27. **Show details** of bookmarks at index 15012014 and ranges 20-30, 40-50:

        $ buku -p 20-30 15012014 40-50
28. Show details of the **last 10 bookmarks**:

        $ buku -p -10
29. **Show all** bookmarks with real index from database:

        $ buku -p
        $ buku -p | more
30. **Replace tag** 'old tag' with 'new tag':

        $ buku --replace 'old tag' 'new tag'
31. **Delete tag** 'old tag' from DB:

        $ buku --replace 'old tag'
32. **Append (or delete) tags** 'tag 1', 'tag 2' to (or from) existing tags of bookmark at index 15012014:

        $ buku -u 15012014 --tag + tag 1, tag 2
        $ buku -u 15012014 --tag - tag 1, tag 2
33. **Open URL** at index 15012014 in browser:

        $ buku -o 15012014
34. List bookmarks with **no title or tags** for bookkeeping:

        $ buku -S blank
35. List bookmarks with **immutable title**:

        $ buku -S immutable
36. **Shorten URL** www.google.com and the URL at index 20:

        $ buku --shorten www.google.com
        $ buku --shorten 20
37. **Append, remove tags at prompt** (taglist index to the left, bookmark index to the right):

        // append tags at taglist indices 4 and 6-9 to existing tags in bookmarks at indices 5 and 2-3
        buku (? for help) g 4 9-6 >> 5 3-2
        // set tags at taglist indices 4 and 6-9 as tags in bookmarks at indices 5 and 2-3
        buku (? for help) g 4 9-6 > 5 3-2
        // remove all tags from bookmarks at indices 5 and 2-3
        buku (? for help) g > 5 3-2
        // remove tags at taglist indices 4 and 6-9 from tags in bookmarks at indices 5 and 2-3
        buku (? for help) g 4 9-6 << 5 3-2
38. List bookmarks with **colored output**:

        $ buku --colors oKlxm -p
39. More **help**:

        $ buku -h
        $ man buku

### Automation

Interactive workflows can be automated using expect. Issue [#368](https://github.com/jarun/buku/issues/368) has a working example on automating auto-import.

### Troubleshooting

#### Editor integration

You may encounter issues with GUI editors which maintain only one instance by default and return immediately from other instances. Use the appropriate editor option to block the caller when a new document is opened. See issue [#210](https://github.com/jarun/buku/issues/210) for gedit.

### Collaborators

- [Arun Prakash Jana](https://github.com/jarun)
- [Rachmadani Haryono](https://github.com/rachmadaniHaryono)
- [Johnathan Jenkins](https://github.com/shaggytwodope)
- [SZ Lin](https://github.com/szlin)

Copyright © 2015-2022 [Arun Prakash Jana](mailto:engineerarun@gmail.com)
<br>
<p><a href=""https://gitter.im/jarun/buku""><img src=""https://img.shields.io/gitter/room/jarun/buku.svg?maxAge=2592000"" alt=""gitter chat"" /></a></p>

### Contributions

Missing a feature? There's a rolling [ToDo List](https://github.com/jarun/buku/issues/484) with identified tasks. Contributions are welcome! Please follow the [PR guidelines](https://github.com/jarun/buku/wiki/PR-guidelines).

See also our documentation here <a href=""http://buku.readthedocs.io/en/stable/?badge=stable""><img src=""https://img.shields.io/badge/docs-stable-brightgreen.svg?maxAge=2592000"" alt=""Stable Docs"" /></a>

### Related projects

- [bukubrow](https://github.com/SamHH/bukubrow), WebExtension for browser integration
- [oil](https://github.com/AndreiUlmeyda/oil), search-as-you-type cli front-end
- [buku_run](https://github.com/carnager/buku_run), rofi front-end
- [pinku](https://github.com/mosegontar/pinku), a Pinboard-to-buku import utility
- [buku-dmenu](https://gitlab.com/benoliver999/buku-dmenu), a simple bash dmenu wrapper
- [poku](https://github.com/shanedabes/poku), sync between Pocket and buku
- [Ebuku](https://github.com/flexibeast/ebuku), Emacs interface to buku
- [diigoku](https://github.com/dppdppd/diigoku), buku importer for Diigo


### Videos

- [Buku: Take Your Bookmarks Everywhere You Go](https://www.youtube.com/embed/9HzEHrUBQXE)
- [Buku is a great open-source bookmark manager](https://www.youtube.com/embed/7VxgKMWm-J8)

### In the Press

- [2daygeek](http://www.2daygeek.com/buku-command-line-bookmark-manager-linux/)
- [Hacker Milk](https://hackermilk.blogspot.com/2020/01/how-to-manage-your-browsers-bookmarks.html)
- [It's F.O.S.S.](https://itsfoss.com/buku-command-line-bookmark-manager-linux/)
- [LinOxide](https://linoxide.com/linux-how-to/buku-browser-bookmarks-linux/)
- [LinuxUser Magazine 01/2017 Issue](http://www.linux-community.de/LU/2017/01/Das-Beste-aus-zwei-Welten)
- [Make Tech Easier](https://www.maketecheasier.com/manage-browser-bookmarks-ubuntu-command-line/)
- [One Thing Well](http://onethingwell.org/post/144952807044/buku)
- [Open Source For You](https://opensourceforu.com/2018/05/buku-a-bookmark-manager-in-the-command-line/)
- [ulno.net](https://ulno.net/blog/2017-07-19/of-bookmarks-tags-and-browsers/)
",,,,,,,,,,,,,,,,,,,,,,,0.7604005706,"Buku is a powerful bookmark manager and a personal textual mini-web. It can
import bookmarks from browser(s) or fetch the title, tags and description of a
URL from the web. Search bookmarks instantly with multiple search options,
including regex and a deep scan mode (handy with URLs) It can look up broken
links on the Wayback Machine. There's no tracking, hidden history, obsolete
records, usage analytics or homing. The man page comes with examples. There are
several related projects, including a browser plug-in."
857,Ruby bindings for ImageMagick,"RMagick
=======

[![Codacy Badge](https://api.codacy.com/project/badge/Grade/901780ea1a244a8584b18033b2e03866)](https://app.codacy.com/gh/rmagick/rmagick?utm_source=github.com&utm_medium=referral&utm_content=rmagick/rmagick&utm_campaign=Badge_Grade_Settings)
[![GemVersion](https://img.shields.io/gem/v/rmagick.svg?style=flat)](https://rubygems.org/gems/rmagick)
![CI](https://github.com/rmagick/rmagick/workflows/CI/badge.svg)

Table of Contents
-----------------

-   [Introduction](#introduction)
-   [Prerequisites](#prerequisites)
-   [Installing RMagick](#installing-rmagick)
-   [Using RMagick](#using-rmagick)
-   [Things that can go wrong](#things-that-can-go-wrong)
-   [Upgrading](#upgrading)
-   [More samples](#more-samples)
-   [Reporting Bugs](#reporting-bugs)
-   [Development Setup](#development-setup)
-   [Credits](#credits)
-   [License](#mit-license)
-   [Releasing](#releasing)

Introduction
------------

RMagick is an interface between the Ruby programming language and the
ImageMagick image processing library.

Prerequisites
-------------

These prerequisites are required for the latest version of RMagick.

**OS**
- Linux
- \*BSD
- macOS
- Windows
- Other \*nix-like systems

**Ruby**
- Version 2.3 or later.

You can get Ruby from <https://www.ruby-lang.org>.

Ruby must be able to build C-Extensions (e.g. MRI, Rubinius, not JRuby)

**ImageMagick**
- Version 6.7.7 or later (6.x.x).
- Version 7.0.8 or later (7.x.x). Require RMagick 4.1.0 or later.

You can get ImageMagick from <https://imagemagick.org>.

### Linux
#### Ubuntu
On Ubuntu, you can run:

```sh
sudo apt-get install libmagickwand-dev
```

#### Centos
On Centos, you can run:

```sh
sudo yum install gcc ImageMagick-devel make which
```

#### Arch Linux
On Arch Linux, you can run:

```sh
pacman -Syy imagemagick
```

#### Alpine Linux
On Alpine Linux, you can run:

```
apk add imagemagick imagemagick-dev imagemagick-libs
```

or you can run if you would like to use ImageMagick 6:

```
apk add imagemagick6 imagemagick6-dev imagemagick6-libs
```

### macOS
On macOS, you can run:

```sh
brew install imagemagick
```

or you can run if you would like to use ImageMagick 6:

```sh
brew install imagemagick@6
```

### Windows
1. Install latest Ruby+Devkit package which you can get from [RubyInstaller for Windows](https://rubyinstaller.org).
2. You might need to configure `PATH` environment variable to where the compiler is located.
   (Ex: `set PATH=C:\Ruby27-x64\msys64\usr\bin;C:\Ruby27-x64\msys64\mingw64\bin;%PATH%`)
3. Download `ImageMagick-7.XXXX-Q16-x64-dll.exe` (not, `ImageMagick-7.XXXX-Q16-x64-static.exe`) binary from [Windows Binary Release](https://imagemagick.org/script/download.php#windows), or you can download ImageMagick 6 from [Windows Binary Release](https://legacy.imagemagick.org/script/download.php#windows).
4. Install ImageMagick. You need to turn on checkboxes `Add application directory to your system path` and `Install development headers and librarries for C and C++` in an installer for RMagick.
<img width=""50%"" src=""https://user-images.githubusercontent.com/199156/77183472-b72cbd00-6b11-11ea-8b9a-247bc1f9d8b1.png"" />

Installing RMagick
------------------

### Installing via Bundler

Add to your `Gemfile`:

```rb
gem 'rmagick'
```

Then run:

```sh
bundle install
```

### Installing via RubyGems

Run:

```sh
gem install rmagick
```

### Versioning

RMagick is versioned according to Semantic Versioning. For stable version
compatible with Ruby 1.8+, use `~> 2.0`. Versions >= 3 work on Ruby >= 2.x
only.

Using RMagick
-------------

Require RMagick in your project as follows:

```rb
require 'rmagick'
```

See <https://rmagick.github.io/usage.html> for links to more information.

Things that can go wrong
------------------------

The [RMagick installation FAQ][faq] has answers to the most commonly reported
problems, though may be out of date.

### Can't install RMagick. Can't find libMagick or one of the dependent libraries. Check the mkmf.log file for more detailed information

Typically this message means that one or more of the libraries that ImageMagick
depends on hasn't been installed. Examine the mkmf.log file in the ext/RMagick
subdirectory of the installation directory for any error messages. These
messages typically contain enough additional information for you to be able to
diagnose the problem. Also see [this FAQ][libmagick-faq].

### Cannot open shared object file

If you get a message like this:

```sh
$DIR/RMagick.rb:11:in `require': libMagick.so.0:
  cannot open shared object file: No such file or directory -
  $DIR/RMagick2.so (LoadError)
```

you probably do not have the directory in which the ImageMagick library
is installed in your load path. An easy way to fix this is to define
the directory in the `LD_LIBRARY_PATH` environment variable. For
example, suppose you installed the ImageMagick library `libMagick.so` in
`/usr/local/lib`. (By default this is where it is installed.) Create the
`LD_LIBRARY_PATH` variable like this:

```sh
export LD_LIBRARY_PATH=/usr/local/lib
```

On Linux, see `ld(1)` and `ld.so(8)` for more information. On other operating
systems, see the documentation for the dynamic loading facility.

This operation might not be required when you can use 4.2.5 or later.

### Segmentation fault

Default stack size of your operating system might be too small. Try removing
the limit with this command:

```sh
ulimit -s unlimited
```

Upgrading
---------

If you upgrade to a newer release of ImageMagick, make sure you're using a
release of RMagick that supports that release. It's safe to install a new
release of RMagick over an earlier release.

More samples
------------

You can find more sample RMagick programs in the `/examples` directory. These
programs are not installed in the RMagick documentation tree.

Reporting bugs
--------------

Please report bugs in RMagick, its documentation, or its installation programs
via the bug tracker on the [RMagick issues page][issues].

However, We can't help with Ruby installation and configuration or ImageMagick
installation and configuration. Information about reporting problems and
getting help for ImageMagick is available at the [ImageMagick
website][imagemagick] or the [ImageMagick Forum][imagemagick-forum].

Development Setup
-----------------

In order to minimize issues on your local machine, we recommend that you make
use of a [Vagrant installation][dev-box].

Steps to get up and running with a passing build are as follows:

### 1) set up the Vagrant environment

If you don't already have Vagrant installed, you can download and install it
from [here][vagrant]. Once installed, we can set up a pre-built environment:

```sh
git clone https://github.com/tjschuck/rake-compiler-dev-box.git
cd rake-compiler-dev-box
vagrant up
```

This last part will probably take a while as it has to download an Ubuntu image
and configure it. If there is an error during this process, you may need to
reboot your computer and enable virtualization in your BIOS settings.

### 2) clone RMagick and log in to the vagrant box

Within the `rake-compiler-dev-box` directory:

```sh
git clone https://github.com/rmagick/rmagick.git # or your fork
vagrant ssh
```

### 3) install ImageMagick and additional environment stuff

```sh
cd /vagrant/rmagick
export IMAGEMAGICK_VERSION=6.8.9-10
bash ./before_install_linux.sh
```

This will take just a few minutes to build ImageMagick

### 4) build RMagick

```sh
rake
```

This compiles the RMagick extensions and runs the tests. If all goes well
you'll see a lot of output, eventually ending in something like:

```sh
Finished tests in 35.865734s, 11.3758 tests/s, 6560.3007 assertions/s.

408 tests, 235290 assertions, 0 failures, 0 errors, 0 skips
```

And you're all set! The copy of RMagick within `/vagrant/rmagick` inside your
Vagrant session is the same as the one in the `rake-compiler-dev-box` directory
on your machine. You can make changes locally and run tests within your `ssh`
session.

Credits
-------

**Authors:** Tim Hunter, Omer Bar-or, Benjamin Thomas

Thanks to [ImageMagick Studio LLC][imagemagick] for ImageMagick and for hosting
the RMagick documentation.

License
-----------

[MIT License](LICENSE)

Releasing
---------

See <https://github.com/rmagick/rmagick/wiki/Release-Process>

1.  Update ChangeLog
2.  Edit `lib/rmagick/version.rb`
3.  Are the tests passing? Run `rake` again just to be sure.
4.  `rake release`

[issues]: https://github.com/rmagick/rmagick/issues
[libmagick-faq]: https://web.archive.org/web/20140512193354/https://rmagick.rubyforge.org/install-faq.html#libmagick
[faq]: https://web.archive.org/web/20140512193354/https://rmagick.rubyforge.org/install-faq.html
[imagemagick]: https://imagemagick.org
[imagemagick-forum]: https://imagemagick.org/discourse-server
[dev-box]: https://github.com/tjschuck/rake-compiler-dev-box
[vagrant]: https://www.vagrantup.com/
",,,,,,,,,,,,,,,,,,,,,,,0.6218281145,"RMagick is an interface between the Ruby programming language and the
ImageMagick image processing library. RMagick requires the latest version of the
Ruby language. It can also be used to build C-Extensions (e.g. Rubinius, JRuby)"
2076,"Typed, correct GraphQL requests and responses in Rust","# graphql_client

[![Github actions Status](https://github.com/graphql-rust/graphql-client/workflows/CI/badge.svg?branch=main&event=push)](https://github.com/graphql-rust/graphql-client/actions)
[![docs](https://docs.rs/graphql_client/badge.svg)](https://docs.rs/graphql_client/latest/graphql_client/)
[![crates.io](https://img.shields.io/crates/v/graphql_client.svg)](https://crates.io/crates/graphql_client)

A typed GraphQL client library for Rust.

## Features

- Precise types for query variables and responses.
- Supports GraphQL fragments, objects, unions, inputs, enums, custom scalars and input objects.
- Works in the browser (WebAssembly).
- Subscriptions support (serialization-deserialization only at the moment).
- Copies documentation from the GraphQL schema to the generated Rust code.
- Arbitrary derives on the generated responses.
- Arbitrary custom scalars.
- Supports multiple operations per query document.
- Supports setting GraphQL fields as deprecated and having the Rust compiler check
  their use.
- Optional reqwest-based client for boilerplate-free API calls from browsers.
- Implicit and explicit null support.

## Getting started

- If you are not familiar with GraphQL, the [official website](https://graphql.org/) provides a very good and comprehensive introduction.

- Once you have written your query (most likely in something like [graphiql](https://github.com/graphql/graphiql)), save it in a `.graphql` file in your project.

- In order to provide precise types for a response, graphql_client needs to read the query and the schema at compile-time.

  To download the schema, you have multiple options. This projects provides a [CLI](https://github.com/graphql-rust/graphql-client/tree/main/graphql_client_cli), however it does not matter what tool you use, the resulting `schema.json` is the same.

- We now have everything we need to derive Rust types for our query. This is achieved through a procedural macro, as in the following snippet:

  ```rust
  use graphql_client::GraphQLQuery;

  // The paths are relative to the directory where your `Cargo.toml` is located.
  // Both json and the GraphQL schema language are supported as sources for the schema
  #[derive(GraphQLQuery)]
  #[graphql(
      schema_path = ""tests/unions/union_schema.graphql"",
      query_path = ""tests/unions/union_query.graphql"",
  )]
  pub struct UnionQuery;
  ```

  The `derive` will generate a module named `union_query` in this example - the name is the struct's name, but in snake case.

  That module contains all the struct and enum definitions necessary to deserialize a response to that query.

  The root type for the response is named `ResponseData`. The GraphQL response will take the form of a `Response<ResponseData>` (the [Response](https://docs.rs/graphql_client/latest/graphql_client/struct.Response.html) type is always the same).

  The module also contains a struct called `Variables` representing the variables expected by the query.

* We now need to create the complete payload that we are going to send to the server. For convenience, the [GraphQLQuery trait](https://docs.rs/graphql_client/latest/graphql_client/trait.GraphQLQuery.html), is implemented for the struct under derive, so a complete query body can be created this way:

  ```rust
  use graphql_client::{GraphQLQuery, Response};
  use std::error::Error;
  use reqwest;

  #[derive(GraphQLQuery)]
  #[graphql(
      schema_path = ""tests/unions/union_schema.graphql"",
      query_path = ""tests/unions/union_query.graphql"",
      response_derives = ""Debug"",
  )]
  pub struct UnionQuery;

  async fn perform_my_query(variables: union_query::Variables) -> Result<(), Box<dyn Error>> {

      // this is the important line
      let request_body = UnionQuery::build_query(variables);

      let client = reqwest::Client::new();
      let mut res = client.post(""/graphql"").json(&request_body).send().await?;
      let response_body: Response<union_query::ResponseData> = res.json().await?;
      println!(""{:#?}"", response_body);
      Ok(())
  }
  ```

[A complete example using the GitHub GraphQL API is available](https://github.com/graphql-rust/graphql-client/tree/main/examples/github).

## Alternative workflow using the CLI

You can introspect GraphQL APIs and generate module from a command line interface to the library:

```bash
$ cargo install graphql_client_cli
$ graphql-client --help
```

## Deriving specific traits on the response

The generated response types always derive `serde::Deserialize` but you may want to print them (`Debug`), compare them (`PartialEq`) or derive any other trait on it. You can achieve this with the `response_derives` option of the `graphql` attribute. Example:

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
    response_derives = ""Serialize,PartialEq"",
)]
struct UnionQuery;
```
## Implicit Null

The generated code will skip the serialization of `None` values.

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
    skip_serializing_none
)]
struct UnionQuery;
```

## Custom scalars

In GraphQL, five scalar types, `Int`, `Float`, `String`, `Boolean`, and `ID`, are available out of the box and are automatically mapped to equivalent types in Rust. However, in addition, custom scalar types can be defined by service providers by adding declarations like `scalar URI` to the server schema.

If such custom scalar types are defined in the schema, depending on the content of the query, the generated code will also reference those scalar types. This means you have to provide matching Rust types in the scope of the struct under derive. It can be as simple as declarations like `type URI = String;`. This gives you complete freedom on how to treat custom scalars, as long as they can be deserialized. If such declarations are not provided, you will get build errors like this:

```
error[E0412]: cannot find type `URI` in module `super`
   |
   | #[derive(GraphQLQuery)]
   |          ^^^^^^^^^^^^ not found in `super`
   |
   = note: possible candidate is found in another module, you can import it into scope:
           crate::repo_view::URI
```

## Deprecations

The generated code has support for [`@deprecated`](http://facebook.github.io/graphql/June2018/#sec-Field-Deprecation)
field annotations. You can configure how deprecations are handled via the `deprecated` argument in the `GraphQLQuery` derive:

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
  schema_path = ""tests/unions/union_schema.graphql"",
  query_path = ""tests/unions/union_query.graphql"",
  deprecated = ""warn""
)]
pub struct UnionQuery;
```

Valid values are:

- `allow`: the response struct fields are not marked as deprecated.
- `warn`: the response struct fields are marked as `#[deprecated]`.
- `deny`: The struct fields are not included in the response struct and
  using them is a compile error.

The default is `warn`.

## Query documents with multiple operations

You can write multiple operations in one query document (one `.graphql` file). You can then select one by naming the struct you `#[derive(GraphQLQuery)]` on with the same name as one of the operations. This is neat, as it allows sharing fragments between operations.

Note that the struct and the operation in the GraphQL file *must* have the same name. We enforce this to make the generated code more predictable.

```rust
use graphql_client::GraphQLQuery;

#[derive(GraphQLQuery)]
#[graphql(
    schema_path = ""tests/unions/union_schema.graphql"",
    query_path = ""tests/unions/union_query.graphql"",
)]
pub struct UnionQuery;
```

There is an example [in the tests](./graphql_client/tests/operation_selection).

## Documentation for the generated modules

You can use `cargo doc --document-private-items` to generate rustdoc documentation on the generated code.

## Make cargo recompile when .graphql files have changed

There is an [`include`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-exclude-and-include-fields-optional) option you can add to your `Cargo.toml`. It currently has issues however (see [this issue](https://github.com/rust-lang/cargo/issues/6031#issuecomment-422160178)).

## Examples

See the [examples directory](https://github.com/graphql-rust/graphql-client/tree/main/examples) in this repository.

## Contributors

Warmest thanks to all those who contributed in any way (not only code) to this project:

- Alex Vlasov (@indifferentalex)
- Ben Boeckel (@mathstuf)
- Chris Fung (@aergonaut)
- Christian Legnitto (@LegNeato)
- David Gräff (@davidgraeff)
- Dirkjan Ochtman (@djc)
- Fausto Nunez Alberro (@brainlessdeveloper)
- Hirokazu Hata (@h-michael)
- Peter Gundel (@peterfication)
- Sonny Scroggin (@scrogson)
- Sooraj Chandran (@SoorajChandran)
- Tom Houlé (@tomhoule)

## Code of conduct

Anyone who interacts with this project in any space, including but not limited to
this GitHub repository, must follow our [code of conduct](https://github.com/graphql-rust/graphql-client/blob/main/CODE_OF_CONDUCT.md).

## License

Licensed under either of these:

- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or
  https://www.apache.org/licenses/LICENSE-2.0)
- MIT license ([LICENSE-MIT](LICENSE-MIT) or
  https://opensource.org/licenses/MIT)

### Contributing

Unless you explicitly state otherwise, any contribution you intentionally submit
for inclusion in the work, as defined in the Apache-2.0 license, shall be
dual-licensed as above, without any additional terms or conditions.
",,,,,,,,,,,,,,,,,,,,,,,0.7400244817,"A typed GraphQL client library for Rust. Precise types for query variables and
responses. Supports GraphQL fragments, objects, unions, inputs, enums, custom
scalars and input objects. Works in the browser (WebAssembly). Subscriptions
support (serialization-deserialization only at the moment). Copies documentation
from the GraphQL schema to the generated Rust code. Arbitrary derives on the
generated responses."
1307,"Simple clean Go REST API architecture with dependency injection and mocking example, following SOLID principles.","service-pattern-go
-------

Hey! Welcome, this is an example of simple REST API implementation with clean architecture written in Go with complete Dependency Injection along with Mocking example, following SOLID principles.

Inspired by [Manuel Kiessling go-cleanarchitecture](http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/) and [Joshua Partogi TDD training session](https://github.com/jpartogi/tennis-kata-laravel/)

It has simple dependencies:

 - [Chi (Router)](https://github.com/go-chi/chi)
 - [Testify (Test & Mock framework)](https://github.com/stretchr/testify)
 - [Mockery (Mock generator)](https://github.com/vektra/mockery)
 - [Hystrix-Go (Circuit Breaker)](https://github.com/afex/hystrix-go)

Get Started:

 - [Install](https://irahardianto.github.io/service-pattern-go/#install)
 - [Introduction](https://irahardianto.github.io/service-pattern-go/#introduction)
 - [Folder Structure](https://irahardianto.github.io/service-pattern-go/#folder-structure)
 - [Depency Injection](https://irahardianto.github.io/service-pattern-go/#dependency-injection)
 - [Mocking](https://irahardianto.github.io/service-pattern-go/#mocking)
 - [Testing](https://irahardianto.github.io/service-pattern-go/#testing)
 - [Circuit Breaker](https://irahardianto.github.io/service-pattern-go/#circuit-breaker)


----------

[Install](https://irahardianto.github.io/service-pattern-go/#install)
-------

Clone the source

    git clone https://github.com/irahardianto/service-pattern-go

Setup dependencies

    go get -u github.com/go-chi/chi
    go get -u github.com/jinzhu/gorm
    go get github.com/stretchr/testify
    go get github.com/vektra/mockery/.../
    go get github.com/afex/hystrix-go/hystrix
    go get -u github.com/mattn/go-sqlite3

Setup sqlite data structure

    sqlite3 /var/tmp/tennis.db < setup.sql

Test first for your liking

    go test ./... -v

Run the app

    go build && ./service-pattern-go

And visit

    http://localhost:8080/getScore/Rafael/vs/Serena


----------

[Introduction](https://irahardianto.github.io/service-pattern-go/#introduction)
-------
This is an example of Go clean architecture implementing Dependency Injection and Mocking for unit testing purposes to achieve safe, reliable and secure source code.

The idea of the pattern itself is to create decoupled systems that the implementation of lower level domain is not a concern of the implementor, and can be replaced without having concern of breaking implementor function.

The aim of the architecture is to produce a system that are:

 - Independent of frameworks. The system should be able to become an independent system, not bound into any framework implementation that cause the system to be bloated, instead those framework should be used as a tools to support the system implementation rather than limiting the system capabilities.
 - Highly testable. All codes are guilty and tests is the only way we can prove it otherwise, this means that our test coverage has to be able to cover as much layers as we can so we can be sure of our code reliability.
 - Independent of database. Business logic should not be bound to the database, the system should be able to swap MySQL, Maria DB, PosgreSQL, Mongo DB, Dynamo DB without breaking the logic.
 - Independent of 3rd party library. No 3rd party library should be implemented directly to the system logic, we should abstract in away that our system can replace the library anytime we want.

Every implementation should only be by using interface, there should be no direct access from the implementor to implementation, that way we can inject its dependency and replace it with mock object during unit tests. For example:

PlayerService -> implement IPlayerRepository, instead of direct PlayerRepository


    type PlayerService struct {
      interfaces.IPlayerRepository
    }

    func (service *PlayerService) GetScores(player1Name string, player2Name string) (string, error) {

      baseScore := [4]string{""Love"", ""Fifteen"", ""Thirty"", ""Forty""}
      var result string

      player1, err := service.GetPlayerByName(player1Name)
      if err != nil {
        //Handle error
      }

      player2, err := service.GetPlayerByName(player2Name)
      if err != nil {
        //Handle error
      }

      if player1.Score < 4 && player2.Score < 4 && !(player1.Score+player2.Score == 6) {

        s := baseScore[player1.Score]

        if player1.Score == player2.Score {
          result = s + ""-All""
        } else {
           result = s + ""-"" + baseScore[player2.Score]
        }
      }

      if player1.Score == player2.Score {
        result = ""Deuce""
      }

      return result, nil
    }
    
If you look into the implementation of these lines

    player1, err := service.GetPlayerByName(player1Name)
    player2, err := service.GetPlayerByName(player2Name)

Both are actually abstract implementation of the interface, not the real implementation itself.
So later on the Dependency Injection section, we will learn those interface will be injected with the implementation during the compile time. This way, we can switch the implementation of IPlayerService & IPlayerRepository during the injection with whatever implementation without changing the implementation logic.

Throughout this repo you will find implementation of design patterns such as **Strategy Pattern** when we inject our dependencies with the real implementations. We create **Singleton** and use it to wired up our router and services. We use **Composite** for all our abstract interface implementations so that the implementor can abstractly implement the methods it has, just as the example above where **PlayerService** implements **interfaces.IPlayerRepository** and allows it to directly invoke **GetPlayerByName** which is **IPlayerRepository's** method.  We also use **Decorator Pattern** to hook up our circuit breaker without needing to change / modify the original implementation.

----------

[Folder Structure](https://irahardianto.github.io/service-pattern-go/#folder-structure)
-------
    /
    |- controllers
    |- infrastructures
    |- interfaces
    |- models
    |- repositories
    |- services
    |- viewmodels
    main.go
    router.go
    servicecontainer.go

The folder structure is created to accomodate seperation of concern principle, where every struct should have single responsibility to achieve decoupled system.

Every folder is a namespace of their own, and every file / struct under the same folder should only use the same namepace as their root folder.

### controllers

controllers folder hosts all the structs under controllers namespace, controllers are the handler of all requests coming in, to the router, its doing just that, business logic and data access layer should be done separately.

controller struct implement services through their interface, no direct services implementation should be done in controller, this is done to maintain decoupled systems. The implementation will be injected during the compiled time.


### infrasctructures

infrasctructures folder host all structs under infrasctructures namespace, infrasctructures consists of setup for the system to connect to external data source, it is used to host things like database connection configurations, MySQL, MariaDB, MongoDB, DynamoDB.

### interfaces

interfaces folder hosts all the structs under interfaces namespace, interfaces as the name suggest are the bridge between different domain so they can interact with each other, in our case, this should be the only way for them to interact.

interface in Go is a bit different then you might already find in other language like Java or C#, while the later implements interface explicitly, Go implements interface implicitly. You just need to implement all method the interface has, and you're good to ""Go"".

In our system, our PlayerController implements IPlayerService to be able to interact with the implementation that will be injected. In our case, IPlayerService will be injected with PlayerService.

The same thing applies on PlayerService which implements IPlayerRepository to be able interact with the injected implementation. In our case, IPlayerRepository will be injected with PlayerRepository during the compile time.

PlayerRepository on the other hand, will be injected with infrasctructure configuration that has been setup earlier, this ensure that you can change the implementation of PlayerRepository, without changing the implementor which in this case PlayerService let alone break it. The same thing goes to PlayerService and PlayerController relationship, we can refactor PlayerService, we can change it however we want, without touching the implementor which is PlayerController.

### models

models folder hosts all structs under models namespace, model is a struct reflecting our data object from / to database. models should only define data structs, no other functionalities should be included here.

### repositories

repositories folder hosts all structs under repositories namespace, repositories is where the implementation of data access layer. All queries and data operation from / to database should happen here, and the implementor should be agnostic of what is the database engine is used, how the queries is done, all they care is they can pull the data according to the interface they are implementing.

### services

services folder hosts all structs under services namespace, services is where the business logic lies on, it handles controller request and fetch data from data layer it needs and run their logic to satisfy what controller expect the service to return.

controller might implement many services interface to satisfy the request needs, and controller should be agnostic of how services implements their logic, all they care is that they should be able to pull the result they need according to the interface they implements.

### viewmodels

viewmodels folder hosts all the structs under viewmodels namespace, viewmodels are model to be use as a response return of REST API call

### main.go

main.go is the entry point of our system, here lies the router bindings it triggers ChiRouter singleton and call InitRouter to bind the router.

### router.go

router.go is where we binds controllers to appropriate route to handle desired http request. By default we are using Chi router as it is a light weight router and not bloated with unnecessary unwanted features.

### servicecontainer.go

servicecontainer.go is where the magic begins, this is the place where we injected all implementations of interfaces. Lets cover throughly in the dependency injection section.

----------

[Dependecy Injection](https://irahardianto.github.io/service-pattern-go/#dependency-injection)
-------

Dependecy injection is the heart of TDD, without it we wont be able to do proper TDD because there will be no mocking and we cannot decoupled our code properly. This is one of the misconception when people thinks that they are doing unit testing instead actually they are doing integration test which connects the logic to database. Unit test should be done independently and database should not come in to play when we are doing unit test. One thing to not though, in Go dependency has to be injected during compile time instead of runtime which cause it a bit different than Java / C# implementation, but anyway, its just plain old dependency injection.

In essence unit test is created to test our logic not our data integrity, and by taking database during unit testing it will add huge complexity to the tests itself, and this creates barrier for programmers new to unit testing as they are struggling to create proper testing for their functions.

Now why dependency injection is a crucial part in doing proper TDD? the answer lies in the usage of interface. Back when I have never encountered mocking, I always wondering, what is the use of interface, why we should create abstraction for our functions instead of just write it all already, why the hell should we create a duplicate, abstraction that we will be implementing shortly anyway, some says that, because in doing so, your code will be much cleaner and we have proper pattern, I called that bullshit because in essence we dont have to do it if it only for that reason, and I'm still wondering until I learned about mocking.

Some other people says that interface is used so your program is decoupled, and when needed you can replace the implementations without needing to adjust the implementor. That make sense right? much better than the bullshit. Yea that make sense, we can replace whatever implement whatever interface with whatever. Yea, but how many times would you replace you database connection calls? chances are rare if not never especially if you working on software house that deliver projects after projects after projects, you will never see you component got replaced.

The when I learned about mocking, all that I have been asking coming to conclusions as if I was like having epiphany, we will discuss more about mocking in the mocking section, but for now lets discuss it in regards of dependency injection usage. So as you see in our project structure, instead of having all component directly talks to each other, we are using interface, take PlayerController for example

    type PlayerController struct {
      interfaces.IPlayerService
    }
    
    func (controller *PlayerController) GetPlayerScore(res http.ResponseWriter, req *http.Request) {
    
      player1Name := chi.URLParam(req, ""player1"")
      player2Name := chi.URLParam(req, ""player2"")
    
      scores, err := controller.GetScores(player1Name, player2Name)
      if err != nil {
        //Handle error
      }
    
	  json.NewEncoder(res).Encode(viewmodels.ScoresVM{scores})
    }

You see that PlayerController uses IPlayerService interface, and since IPlayerService has GetScores method, PlayerController can invoke it and get the result right away. Wait a minute, isn't that the interface is just merely abstraction? so how do it get executed, where is the implementation?

    type IPlayerService interface {
      GetScores(player1Name string, player2Name string) (string, error)
    }

You see, instead of calling directly to PlayerService, PlayerController uses the interface of PlayerService which is IPlayerService, there could be many implementation of IPlayerService not just limited to PlayerService it could be BrotherService etc, but how do we determined that PlayerService will be used instead?

    func (k *kernel) InjectPlayerController() controllers.PlayerController {

      sqlConn, _ := sql.Open(""sqlite3"", ""/var/tmp/tennis.db"")
      sqliteHandler := &infrastructures.SQLiteHandler{}
      sqliteHandler.Conn = sqlConn

	  playerRepository := &repositories.PlayerRepository{sqliteHandler}
	  playerService := &services.PlayerService{&repositories.PlayerRepositoryWithCircuitBreaker{playerRepository}}
	  playerController := controllers.PlayerController{playerService}

      return playerController
    }

This is where dependency injection come in to play, as you see here in servicecontainer.go we are creating **playerController** and inject it with **playerService** as simple as that, this is what dependency injection all about no more. So **playerController's IPlayerService** will be injected by **playerService** along with all implementation that it implements, so for example **GetPlayerByName** now returns whatever **GetPlayerByName** implemented by **playerService** as you can see it in **PlayerService.go**

Now, how does this relates to TDD & mocking?

	playerService := new(mocks.IPlayerService)

You see, in PlayerController_test.go we are using mock object to inject the implementation of our service, lets discuss more detail about mocking and testing in each section.

----------

[Mocking](https://irahardianto.github.io/service-pattern-go/#mocking)
-------

Mocking is a concept many times people struggle to understand, let alone implement it, at least I was the one among the one who struggles to understand this concept. But understanding this concept is essential to do TDD. The key point is, we mock dependencies that we need to run our tests, this is why dependency injection is essential to proceed. We are using testfy as our mock library

Basically what mock object do is replacing injection instead of real implementation with mock as point out at the end of dependency injection session

    playerService := new(mocks.IPlayerService)

We then create mock GetScores functionalities along with its request and response.

    playerService.On(""GetScores"", ""Rafael"", ""Serena"").Return(""Forty-Fifteen"", nil)

As you see, then the mock object is injected to **playerService** of PlayerController, this is why dependency injection is essential to this proses as it is the only way we can inject interface with mock object instead of real implementation.

	playerController := PlayerController{playerService}

We generate mock our by using vektra mockery for IPlayerService, go to the interfaces folder and then just type.

    mockery -name=IPlayerService

The output will be inside ```mocks/IPlayerService.go``` and we can use it right away for our testing.

----------

[Testing](https://irahardianto.github.io/service-pattern-go/#testing)
-------

We have cover pretty much everything there is I hope that you already get the idea of proper unit testing and why we should implement interfaces, dependency injection and mocking. The last piece is the unit test itself.

    func TestPlayerScore(t *testing.T) {

      // create an instance of our test object
      playerService := new(mocks.IPlayerService)

      // setup expectations
      playerService.On(""GetScores"", ""Rafael"", ""Serena"").Return(""Forty-Fifteen"", nil)

	  playerController := PlayerController{playerService}

      // call the code we are testing
      req := httptest.NewRequest(""GET"", ""http://localhost:8080/getScore/Rafael/vs/Serena"", nil)
      w := httptest.NewRecorder()

      r := chi.NewRouter()
      r.HandleFunc(""/getScore/{player1}/vs/{player2}"", playerController.GetPlayerScore)

      r.ServeHTTP(w, req)

      expectedResult := viewmodels.ScoresVM{}
      expectedResult.Score = ""Forty-Fifteen""

      actualResult := viewmodels.ScoresVM{}

      json.NewDecoder(w.Body).Decode(&actualResult)

      // assert that the expectations were met
      assert.Equal(t, expectedResult, actualResult)
    }

 As you see here after injecting playerService of playerController with mock object, we are calling the playerController.GetPlayer and simulate request all the way from the router.

     req := httptest.NewRequest(""GET"", ""http://localhost:8080/getScore/Rafael/vs/Serena"", nil)
     w := httptest.NewRecorder()

     r := chi.NewRouter()
     r.HandleFunc(""/getScore/{player1}/vs/{player2}"", playerController.GetPlayerScore)

     r.ServeHTTP(w, req)

And assert the result by using testify assertion library

    assert.Equal(t, expectedResult, actualResult)

----------

[Circuit Breaker](https://irahardianto.github.io/service-pattern-go/#circuit-breaker)
-------

Building a distributed system we should really think that everything is not reliable, networks could breaks, servers could suddenly crash, even your 100% unit-tested app could be the root cause of the problems.

With that in said, when designing distributed system we should keep that in mind, so when some of our system is down, it won't take the whole system. Circuit breaker is a pattern with which we could design our system to be fault-tolerant and can withstand one or more service failure. It should be wrapping all call outside application ex: db call, redis call, api call.

Essentially circuit breaker works just like electrical circuit breakers, nothing fancy here, the only different is when the breaker is tripped it can be automatically closed when the downstream service is responding properly as described in the picture below.

![circuit breaker](https://cdn.pbrd.co/images/GKpFVb1.png)

In our case, we will be using hystrix-go, it is a go port from Netflix's hystrix library, how it works is essentially the same, even hystrix-go supports turbine along with its hystrix dashboard, but in my case, I rather use the datadog plugins, since we are using datadog to monitor our system.

For the sake of SOLID principles implementation in our codebase, we will add hystrix-go to our PlayerRepository leveraging decorator pattern, this will maintain our base repository implementation, the one that calls database, clean from modification and we will create its extension which is named PlayerRepositoryWithCircuitBreaker. This is the O part of SOLID which stands for Open for extension, Close for modification.


If you recall we inject our PlayerService with PlayerRepositoryWithCircuitBreaker and the original PlayerRepository wrapped inside.

	playerService.PlayerRepository = &repositories.PlayerRepositoryWithCircuitBreaker{playerRepository}


Base PlayerRepository implementation :

	type PlayerRepository struct {
      interfaces.IDbHandler
	}

    func (repository *PlayerRepository) GetPlayerByName(name string) (models.PlayerModel, error) {

      row, err :=repository.Query(fmt.Sprintf(""SELECT * FROM player_models WHERE name = '%s'"", name))
      if err != nil {
        return models.PlayerModel{}, err
      }

      var player models.PlayerModel

      row.Next()
      row.Scan(&player.Id, &player.Name, &player.Score)

      return player, nil
	}

PlayerRepository extension implementation :

    type PlayerRepositoryWithCircuitBreaker struct {
      PlayerRepository interfaces.IPlayerRepository
    }

    func (repository *PlayerRepositoryWithCircuitBreaker) GetPlayerByName(name string) (models.PlayerModel, error) {

      output := make(chan models.PlayerModel, 1)
      hystrix.ConfigureCommand(""get_player_by_name"", hystrix.CommandConfig{Timeout: 1000})
      errors := hystrix.Go(""get_player_by_name"", func() error {

        player, _ := repository.PlayerRepository.GetPlayerByName(name)

        output <- player
        return nil
      }, nil)

      select {
      case out := <-output:
        return out, nil
      case err := <-errors:
        println(err)
        return models.PlayerModel{}, err
      }
    }

Basically PlayerRepositoryWithCircuitBreaker implement the same interface as PlayerRepository, IPlayerRepository

    type IPlayerRepository interface {
      GetPlayerByName(name string) (models.PlayerModel, error)
    }


As you see here, it is very easy to implement hystrix-go circuit breaker, you just need to wrap your db call inside hystrix if the timeout reached, the circuit breaker will be tripped and all calls to database will be halt, error will be returned instead for future call until db service is up and healthy.


Cheers,
M. Ichsan Rahardianto.
",,,,,,,,,,,,,,,,,,,,,,,0.4638755264,"This is an example of Go clean architecture implementing Dependency Injection
and Mocking for unit testing purposes to achieve safe, reliable and secure
source code. The aim of the architecture is to produce a system that are:
Independent of frameworks. The system should be able to become an independent
system, not bound into any framework implementation. All codes are and tests is
the only way to prove that our code can be reliable."
32,Vim plugin that provides additional text objects,"## Introduction

**Targets.vim** is a Vim plugin that adds various [text objects][textobjects]
to give you more targets to [operate][operator] on.  It expands on the idea of
simple commands like `di'` (delete inside the single quotes around the cursor)
to give you more opportunities to craft powerful commands that can be
[repeated][repeat] reliably. One major goal is to handle all corner cases
correctly.

## Table of Contents

<details>
<summary>Click here to show.</summary>

<!-- BEGIN-MARKDOWN-TOC -->

* [Installation](#installation)
* [Examples](#examples)
* [Overview](#overview)
	* [Pair Text Objects](#pair-text-objects)
		* [In Pair](#in-pair)
		* [A Pair](#a-pair)
		* [Inside Pair](#inside-pair)
		* [Around Pair](#around-pair)
		* [Next and Last Pair](#next-and-last-pair)
		* [Pair Seek](#pair-seek)
	* [Quote Text Objects](#quote-text-objects)
		* [In Quote](#in-quote)
		* [A Quote](#a-quote)
		* [Inside Quote](#inside-quote)
		* [Around Quote](#around-quote)
		* [Next and Last Quote](#next-and-last-quote)
		* [Quote Seek](#quote-seek)
	* [Separator Text Objects](#separator-text-objects)
		* [In Separator](#in-separator)
		* [A Separator](#a-separator)
		* [Inside Separator](#inside-separator)
		* [Around Separator](#around-separator)
		* [Next and Last Separator](#next-and-last-separator)
		* [Separator Seek](#separator-seek)
	* [Argument Text Objects](#argument-text-objects)
		* [In Argument](#in-argument)
		* [An Argument](#an-argument)
		* [Inside Argument](#inside-argument)
		* [Around Argument](#around-argument)
		* [Next and Last Argument](#next-and-last-argument)
		* [Argument Seek](#argument-seek)
	* [Multi Text Objects](#multi-text-objects)
		* [Any Block](#any-block)
		* [Any Quote](#any-quote)
* [Settings](#settings)
	* [g:targets_aiAI](#gtargets_aiai)
	* [g:targets_mapped_aiAI](#gtargets_mapped_aiai)
	* [g:targets_nl](#gtargets_nl)
	* [g:targets_seekRanges](#gtargets_seekranges)
	* [g:targets_jumpRanges](#gtargets_jumpranges)
	* [g:targets_gracious](#gtargets_gracious)
	* [targets#mappings#extend](#targets#mappings#extend)
* [Notes](#notes)
* [Issues](#issues)
* [Todos](#todos)

</details>

<!-- END-MARKDOWN-TOC -->

## Installation

| Plugin Manager         | Command                                                                       |
|------------------------|-------------------------------------------------------------------------------|
| [NeoBundle][neobundle] | `NeoBundle 'wellle/targets.vim'`                                              |
| [Vundle][vundle]       | `Bundle 'wellle/targets.vim'`                                                 |
| [Vim-plug][vim-plug]   | `Plug 'wellle/targets.vim'`                                                   |
| [Pathogen][pathogen]   | `git clone git://github.com/wellle/targets.vim.git ~/.vim/bundle/targets.vim` |
| [Dein][dein]		     | `call dein#add('wellle/targets.vim')`					                     |

## Examples

The following examples are displayed as three lines each. The top line denotes
cursor positions from where the presented command works. The middle line shows
the contents of the example line that we're working on. The last line shows the
part of the line that the command will operate on.

To change the text in the next pair of parentheses, use the `cin)` command

```
cursor position │    .....................
buffer line     │    This is example text (with a pair of parentheses).
selection       │                          └───────── cin) ─────────┘
```

To delete the item in a comma separated list under the cursor, use `da,`

```
cursor position │                                  .........
buffer line     │    Shopping list: oranges, apples, bananas, tomatoes
selection       │                                  └─ da, ─┘
```

Notice how the selection includes exactly one of the surrounding commas to
leave a proper comma separated list behind.

## Overview

Targets.vim comes with five kinds for text objects:

- Pair text objects
- Quote text objects
- Separator text objects
- Argument text objects
- Tag text objects

Each of those kinds is implemented by a targets source. Third party plugins can
provide additional sources to add even more text objects which behave like the
built in ones. See [plugins][Plugins] for details on how to implement your own
targets source.

### Pair Text Objects

These text objects are similar to the built in text objects such as `i)`.
Supported trigger characters:

- `(` `)` (work on parentheses)
- `{` `}` `B` (work on curly braces)
- `[` `]` (work on square brackets)
- `<` `>` (work on angle brackets)
- `t` (work on tags)

Pair text objects work over multiple lines and support seeking. See below for
details about seeking.

The following examples will use parentheses, but they all work for each listed
trigger character accordingly.

#### In Pair

`i( i) i{ i} iB i[ i] i< i> it`

- Select inside of pair characters.
- This overrides Vim's default text object to allow seeking for the next pair
  in the current line to the right or left when the cursor is not inside a
  pair. This behavior is similar to Vim's seeking behavior of `di'` when not
  inside of quotes, but it works both ways.
- Accepts a count to select multiple blocks.

```
      ............
a ( b ( cccccccc ) d ) e
   │   └── i) ──┘   │
   └───── 2i) ──────┘
```

#### A Pair

`a( a) a{ a} aB a[ a] a< a> at`

- Select a pair including pair characters.
- Overrides Vim's default text object to allow seeking.
- Accepts a count.

```
      ............
a ( b ( cccccccc ) d ) e
  │   └─── a) ───┘   │
  └────── 2a) ───────┘
```

#### Inside Pair

`I( I) I{ I} IB I[ I] I< I> It`

- Select contents of pair characters.
- Like inside of parentheses, but exclude whitespace at both ends. Useful for
  changing contents while preserving spacing.
- Accepts a count.

```
      ............
a ( b ( cccccccc ) d ) e
    │   └─ I) ─┘   │
    └──── 2I) ─────┘
```

#### Around Pair

`A( A) A{ A} AB A[ A] A< A> At`

- Select around pair characters.
- Like a pair, but include whitespace at one side of the pair. Prefers to
  select trailing whitespace, falls back to select leading whitespace.
- Accepts a count.

```
      ............
a ( b ( cccccccc ) d ) e
  │   └─── A) ────┘   │
  └────── 2A) ────────┘
```

#### Next and Last Pair

`in( an( In( An( il( al( Il( Al( ...`

Work directly on distant pairs without moving there separately.

All the above pair text objects can be shifted to the next pair by
including the letter `n`. The command `in)` selects inside of the next
pair. Use the letter `l` instead to work on the previous (last) pair. Uses
a count to skip multiple pairs. Skipping works over multiple lines.

See our [Cheat Sheet][cheatsheet] for two charts summarizing all pair mappings.

#### Pair Seek

If any of the normal pair commands (not containing `n` or `l`) is executed when
the cursor is not positioned inside a pair, it seeks for pairs before or after
the cursor by searching for the appropriate delimiter on the current line. This
is similar to using the explicit version containing `n` or `l`, but in only
seeks on the current line.

### Quote Text Objects

These text objects are similar to the built in text objects such as `i'`.
Supported trigger characters:

- `'`     (work on single quotes)
- `""`     (work on double quotes)
- `` ` `` (work on back ticks)

These quote text objects try to be smarter than the default ones. They count
the quotation marks from the beginning of the line to decide which of these are
the beginning of a quote and which ones are the end.

If you type `ci""` on the `,` in the example below, it will automatically skip
and change `world` instead of changing `,` between `hello` and `world`.

```
buffer │ join(""hello"", ""world"")
proper │      └─────┘  └─────┘
false  │            └──┘
```

Quote text objects work over multiple lines and support seeking. See below for
details about seeking.

The following examples will use single quotes, but they all work for each
mentioned separator character accordingly.

#### In Quote

`` i' i"" i` ``

- Select inside quote.
- This overrides Vim's default text object to allow seeking in both directions.

```
  ............
a ' bbbbbbbb ' c ' d ' e
   └── i' ──┘
```

#### A Quote

``a' a"" a` ``

- Select a quote.
- This overrides Vim's default text object to support seeking.
- Unlike Vim's quote text objects, this incudes no surrounding whitespace.

```
  ............
a ' bbbbbbbb ' c ' d ' e
  └─── a' ───┘
```

#### Inside Quote

``I' I"" I` ``

- Select contents of a quote.
- Like inside quote, but exclude whitespace at both ends. Useful for changing
  contents while preserving spacing.

```
  ............
a ' bbbbbbbb ' c ' d ' e
    └─ I' ─┘
```

#### Around Quote

``A' A"" A` ``

- Select around a quote.
- Like a quote, but include whitespace in one direction. Prefers to select
  trailing whitespace, falls back to select leading whitespace.

```
  ............
a ' bbbbbbbb ' c ' d ' e
  └─── A' ────┘
```

#### Next and Last Quote

`in' In' An' il' Il' Al' ...`

Work directly on distant quotes without moving there separately.

All the above pair text objects can be shifted to the next quote by
including the letter `n`. The command `in'` selects inside of the next
single quotes. Use the letter `l` instead to work on the previous (last)
quote. Uses a count to skip multiple quotation characters.

See our [Cheat Sheet][cheatsheet] for a chart summarizing all quote mappings.

#### Quote Seek

If any of the normal quote commands (not containing `n` or `l`) is executed
when the cursor is not positioned inside a quote, it seeks for quotes before or
after the cursor by searching for the appropriate delimiter on the current
line. This is similar to using the explicit version containing `n` or `l`.

### Separator Text Objects

These text objects are based on single separator characters like the comma in
one of our examples above. The text between two instances of the separator
character can be operated on with these targets.

Supported separators:

```
, . ; : + - = ~ _ * # / | \ & $
```

Separator text objects work over multiple lines and support seeking.

The following examples will use commas, but they all work for each listed
separator character accordingly.

#### In Separator

`i, i. i; i: i+ i- i= i~ i_ i* i# i/ i| i\ i& i$`

- Select inside separators. Similar to in quote.

```
      ...........
a , b , cccccccc , d , e
       └── i, ──┘
```

#### A Separator

`a, a. a; a: a+ a- a= a~ a_ a* a# a/ a| a\ a& a$`

- Select an item in a list separated by the separator character.
- Includes the leading separator, but excludes the trailing one. This leaves
  a proper list separated by the separator character after deletion. See the
  examples above.

```
      ...........
a , b , cccccccc , d , e
      └─── a, ──┘
```

#### Inside Separator

`I, I. I; I: I+ I- I= I~ I_ I* I# I/ I| I\ I& I$`

- Select contents between separators.
- Like inside separators, but exclude whitespace at both ends. Useful for
  changing contents while preserving spacing.

```
      ...........
a , b , cccccccc , d , e
        └─ I, ─┘
```

#### Around Separator

`A, A. A; A: A+ A- A= A~ A_ A* A# A/ A| A\ A& A$`

- Select around a pair of separators.
- Includes both separators and a surrounding whitespace, similar to `a'` and
  `A(`.

```
      ...........
a , b , cccccccc , d , e
      └─── A, ────┘
```

#### Next and Last Separator

`in, an, In, An, il, al, Il, Al, ...`

Work directly on distant separators without moving there separately.

All the above separator text objects can be shifted to the next separator by
including the letter `n`. The command `in,` selects inside of the next commas.
Use the letter `l` instead to work on the previous (last) separators. Uses the
count to skip multiple separator characters.

See our [Cheat Sheet][cheatsheet] for a chart summarizing all separator mappings.

#### Separator Seek

Like quote seeking. If any of the normal separator commands (not
containing `n` or `l`) is executed when the cursor is not positioned inside a
pair of separators, it seeks for the separator before or after the cursor.
This is similar to using the explicit version containing `n` or `l`.

### Argument Text Objects

These text objects are similar to separator text objects, but are specialized
for arguments surrounded by braces and commas. They also take matching braces
into account to capture only valid arguments.

Argument text objects work over multiple lines and support seeking.

#### In Argument

`ia`

- Select inside arguments. Similar to in quote.
- Accepts a count.

```
      ...........
a , b ( cccccccc , d ) e
       └── ia ──┘
```

#### An Argument

`aa`

- Select an argument in a list of arguments.
- Includes a separator if preset, but excludes surrounding braces. This leaves
  a proper argument list after deletion.
- Accepts a count.

```
      ...........
a , b ( cccccccc , d ) e
        └─── aa ──┘
```

#### Inside Argument

`Ia`

- Select content of an argument.
- Like inside separators, but exclude whitespace at both ends. Useful for
  changing contents while preserving spacing.
- Accepts a count.

```
      ...........
a , b ( cccccccc , d ) e
        └─ Ia ─┘
```

#### Around Argument

`Aa`

- Select around an argument.
- Includes both delimiters and a surrounding whitespace, similar to `a'` and
  `A(`.
- Accepts a count.

```
      ...........
a , b ( cccccccc , d ) e
      └─── Aa ────┘
```

#### Next and Last Argument

`ina ana Ina Ana ila ala Ila Ala`

Work directly on distant arguments without moving there separately.

All the above argument text objects can be shifted to the next argument by
including the letter `n`. The command `ina` selects inside of the next
argument. Use the letter `l` instead to work on the previous (last) argument.
Uses a [count] to skip multiple argument characters. The order is determined by
the nearest surrounding argument delimiter.

See our [Cheat Sheet][cheatsheet] for a chart summarizing all argument mappings.

#### Argument Seek

Like separator seeking. If any of the normal argument commands (not containing
`n` or `l`) is executed when the cursor is not positioned inside an argument,
it seeks for the argument before or after the cursor. This is similar to using
the explicit version containing `n` or `l`.

### Multi Text Objects

Two multi text objects are included in default settings. See the section on
settings below to see how to set up other similar multi text objects or
customize the built in ones.

#### Any Block

`inb anb Inb Anb ilb alb Ilb Alb`

Similar to pair text objects, if you type `dib` within `()` it will delete in
these. If you do the same within `{}` it will delete in those. If you type
`d2inb` it will skip one next pair (any kind) and delete in the one after (any
kind). If you're within `()` nested in `{}`, type `d2ib` to delete in `{}`. All
of the usual seeking, growing and skipping works.

#### Any Quote

`inq anq Inq Anq ilq alq Ilq Alq`

Similar to quote text objects, if you type `diq` within `""""` it will delete in
these. If you do the same within `''` it will delete in those. If you type
`d2inq` it will skip one next quote text object (any kind) and delete in the
one after (any kind). If you're within `""""` nested in `''`, type `d2iq` to
delete in `''`. All of the usual seeking, growing and skipping works.

## Settings

You can customize the mappings and text objects with the settings described
here.

### g:targets_aiAI

Default:

```vim
let g:targets_aiAI = 'aiAI'
```

Controls the normal mode operator mode maps that get created for In Pair (`i`),
A Pair (`a`), Inside Pair (`I`), and Around Pair (`A`). Required to be either a
string or a list with 4 characters/elements.

Use a space to deactivate a mode. If you want to use multiple keys, for example
`<Space>a` instead of `A`, you must use a list.

In contrast to `g:targets_nl`, special keys must not be escaped with a
backslash. For example, use `""<Space>""`
or `'<Space>'`, **not** `""\<Space>""`. Example for configuring `g:targets_aiAI`:

```vim
let g:targets_aiAI = ['<Space>a', '<Space>i', '<Space>A', '<Space>I']
```

### g:targets_mapped_aiAI

Default:

```vim
let g:targets_mapped_aiAI = g:targets_aiAI
```

If you can't get your g:targets_aiAI settings to work because they conflict
with other mappings you have, you might need to use g:targets_mapped_aiAI. For
example if you want to map `k` to `i` and use `k` as `i` in targets mappings,
you need to NOT map `k` to `i` in operator pending mode, and set
`g:targets_aiAI = 'akAI'` and `g:targets_mapped_aiAI = 'aiAI'`.

Has the same format as `g:targets_aiAI`.

For more details see issue #213 and don't hesitate to comment there or open a
new issue if you need assistance.

### g:targets_nl

Default:

```vim
let g:targets_nl = 'nl'
```

Controls the keys used in maps for seeking next and last text objects. For
example, if you want `n` to always search for the next object and `N` to search
for the last, you could set:

```vim
let g:targets_nl = 'nN'
```

Required to be either a string or a list with 2 characters/elements.

Use a space to deactivate a mode. If you want to use multiple keys, for example
`<Space>n` instead of `n`, you must use a list.

In contrast to `g:targets_aiAI`, special keys must be escaped with a backslash.
For example, use `""\<Space>""`, **not** `""<Space>""` nor `'<Space>'`. Example for
configuring `g:targets_nl`:

```vim
let g:targets_nl = [""\<Space>n"", ""\<Space>l""]
```

### g:targets_seekRanges

Default:

```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb al rB Al bb aa bB Aa BB AA'
```

Defines a priority ordered, space separated list of range types which can be
used to customize seeking behavior.

The default setting generally prefers targets around the cursor, with one
exception: If the target around the cursor is not contained in the current
cursor line, but the next or last target are, then prefer those. Targets
beginning or ending on the cursor are preferred over everything else.

Some other useful example settings:

Prefer multiline targets around cursor over distant targets within cursor line:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB rr ll rb al rB Al bb aa bB Aa BB AA'
```

Never seek backwards:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr rr lb ar ab lB Ar aB Ab AB rb rB bb bB BB'
```

Only seek if next/last targets touch current line:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al'
```

Only consider targets fully visible on screen:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr lb ar ab rr rb bb ll al aa'
```

Only consider targets around cursor:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB'
```

Only consider targets fully contained in current line:
```vim
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr rr ll'
```

If you want to build your own, or are just curious what those cryptic letters
mean, check out the full documentation in our [Cheat Sheet][cheatsheet].

### g:targets_jumpRanges

Default:

```vim
let g:targets_jumpRanges = 'bb bB BB aa Aa AA'
```

Defines an unordered, space separated list of range types which can be used to
customize the jumplist behavior (see documentation on seek ranges). It
controls whether or not to add the cursor position prior to selecting the text
object to the jumplist.

The default setting adds the previous cursor position to the jumplist if the
target that was operated on doesn't intersect the cursor line. That means it
adds a jumplist entry if the target ends above the cursor line or starts below
the cursor line.

Some other useful example settings (or build your own!):

Never add cursor position to jumplist:
```vim
let g:targets_jumpRanges = ''
```

Always add cursor position to jumplist:
```vim
let g:targets_jumpRanges = 'cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb al rB Al bb aa bB Aa BB AA'
```

Only add to jumplist if cursor was not inside the target:
```vim
let g:targets_jumpRanges = 'rr rb rB bb bB BB ll al Al aa Aa AA'
```

### g:targets_gracious

Default:

```vim
let g:targets_gracious = 0
```

If enabled (set to `1`) , both growing and seeking will work on the largest
available count if a too large count is given. For example:

- `v100ab` will select the most outer block around the cursor
- `v100inq` will select the most distant quote to the right/down
  (the last one in the file)

### targets#mappings#extend

This function can be used to modify an internal dictionary used to control the
mappings. The default value of that dictionary is:

```vim
{
    \ '(': {'pair': [{'o': '(', 'c': ')'}]},
    \ ')': {'pair': [{'o': '(', 'c': ')'}]},
    \ '{': {'pair': [{'o': '{', 'c': '}'}]},
    \ '}': {'pair': [{'o': '{', 'c': '}'}]},
    \ 'B': {'pair': [{'o': '{', 'c': '}'}]},
    \ '[': {'pair': [{'o': '[', 'c': ']'}]},
    \ ']': {'pair': [{'o': '[', 'c': ']'}]},
    \ '<': {'pair': [{'o': '<', 'c': '>'}]},
    \ '>': {'pair': [{'o': '<', 'c': '>'}]},
    \ '""': {'quote': [{'d': '""'}]},
    \ ""'"": {'quote': [{'d': ""'""}]},
    \ '`': {'quote': [{'d': '`'}]},
    \ ',': {'separator': [{'d': ','}]},
    \ '.': {'separator': [{'d': '.'}]},
    \ ';': {'separator': [{'d': ';'}]},
    \ ':': {'separator': [{'d': ':'}]},
    \ '+': {'separator': [{'d': '+'}]},
    \ '-': {'separator': [{'d': '-'}]},
    \ '=': {'separator': [{'d': '='}]},
    \ '~': {'separator': [{'d': '~'}]},
    \ '_': {'separator': [{'d': '_'}]},
    \ '*': {'separator': [{'d': '*'}]},
    \ '#': {'separator': [{'d': '#'}]},
    \ '/': {'separator': [{'d': '/'}]},
    \ '\': {'separator': [{'d': '\'}]},
    \ '|': {'separator': [{'d': '|'}]},
    \ '&': {'separator': [{'d': '&'}]},
    \ '$': {'separator': [{'d': '$'}]},
    \ 't': {'tag': [{}]},
    \ 'a': {'argument': [{'o': '[([]', 'c': '[])]', 's': ','}]},
    \ 'b': {'pair': [{'o':'(', 'c':')'}, {'o':'[', 'c':']'}, {'o':'{', 'c':'}'}]},
    \ 'q': {'quote': [{'d':""'""}, {'d':'""'}, {'d':'`'}]},
    \ }
```

The keys in this dictionary correspond to the trigger character. For example if
you type `di(`, `(` is the trigger and gets mapped to the `pair` target source
with arguments `'o':'('` (opening) and `'c':')'` (closing). Sources `quote` and
`separator` have argument `'d'` (delimiter), `tag` has no arguments and
`argument` text objects take `'o'` (opening), `'c'` (closing) and `'s'`
(separator). Notably the `b` (any block) and `q` (any quote) triggers map to
one source with three sets of `pair` and `quote` argument dictionaries
respectively.  That means if you type `dib` each of those sources get taken
into account to pick the proper target. Also note that it's even possible to
have one target mapped to multiple different sources, so you can select any of
those different text objects (see example below).

You can use the `targets#mappings#extend()` function to modify these internal
mappings. For example if you wanted to switch `b` back to the Vim default
behavior of operating on parentheses only, you can add this to your vimrc:

```vim
autocmd User targets#mappings#user call targets#mappings#extend({
    \ 'b': {'pair': [{'o':'(', 'c':')'}]}
    \ })
```

Note that you should always use that `autocmd` prefix to make sure your
modifications get applied at the right time. There's a similar autogroup for
plugins which can add other sources and default mappings, which gets triggered
before this `#user` one. That way the user mappings always take precedence over
the plugins default mappings

If you want to remove a mapping from the defaults, just set it to an empty list
of sources:

```vim
autocmd User targets#mappings#user call targets#mappings#extend({
    \ 'q': {},
    \ })
```

That way targets.vim will ignore it and fall back to Vim default behavior,
which for the case of `q` does nothing.

Finally here's a more complex example which adds two triggers `s` (any
separator text object) and `@` (anything at all). So you could type `das` to
delete the closest separator text object near the cursor, or `da@` to operate
on the closest text object available via targets.vim. All of those support
seeking and counts like `d3ins`.

```vim
autocmd User targets#mappings#user call targets#mappings#extend({
    \ 's': { 'separator': [{'d':','}, {'d':'.'}, {'d':';'}, {'d':':'}, {'d':'+'}, {'d':'-'},
    \                      {'d':'='}, {'d':'~'}, {'d':'_'}, {'d':'*'}, {'d':'#'}, {'d':'/'},
    \                      {'d':'\'}, {'d':'|'}, {'d':'&'}, {'d':'$'}] },
    \ '@': {
    \     'separator': [{'d':','}, {'d':'.'}, {'d':';'}, {'d':':'}, {'d':'+'}, {'d':'-'},
    \                   {'d':'='}, {'d':'~'}, {'d':'_'}, {'d':'*'}, {'d':'#'}, {'d':'/'},
    \                   {'d':'\'}, {'d':'|'}, {'d':'&'}, {'d':'$'}],
    \     'pair':      [{'o':'(', 'c':')'}, {'o':'[', 'c':']'}, {'o':'{', 'c':'}'}, {'o':'<', 'c':'>'}],
    \     'quote':     [{'d':""'""}, {'d':'""'}, {'d':'`'}],
    \     'tag':       [{}],
    \     },
    \ })
```

Also note how this example shows that you can set multiple triggers in a single
`targets#mappings#extend()` call. To keep the autocmd overhead minimal I'd
recommend to keep all your mappings setup in a single such call.

### Deprecated settings

If you have set any of the following settings in your vimrc, they will still be
respected when creating the default mappings dictionary. But it's not possible
to set up any multi source targets (like any block or any quote) this way. It's
recommended to retire those legacy settings and use `targets#mappings#extend()`
as described above.

```vim
g:targets_pairs
g:targets_quotes
g:targets_separators
g:targets_tagTrigger
g:targets_argClosing
g:targets_argOpening
g:targets_argSeparator
g:targets_argTrigger
```

However, those new mappings settings will only be respected when targets.vim
can use expression mappings, which need Neovim or Vim with version 7.3.338 or
later. If you are using an older Vim version, these legacy settings are still
the only way to do any customization. Please refer to an older version of this
README (before October 2018) for details. Or open an issue for me to describe
those legacy settings somewhere still.

## Notes

- [Repeating an operator-pending mapping forgets its last count.][repeatcount]
    Works since Vim 7.4.160

## Issues

- [Empty matches can't be selected because it is not possible to visually select
  zero-character ranges.][emptyrange]
- Forcing motion to work linewise by inserting `V` in `dVan(` doesn't work
  for operator-pending mappings. [See `:h o_v`][o_v].
- Report issues or submit pull requests to
  [github.com/wellle/targets.vim][targets].

## Todos

Create more mappings to support commands like `danw` or `danp` to delete the
next word or paragraph.

[plugins]: plugins.md
[cheatsheet]: cheatsheet.md
[textobjects]: http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects
[operator]: http://vimdoc.sourceforge.net/htmldoc/motion.html#operator
[repeat]: http://vimdoc.sourceforge.net/htmldoc/repeat.html#single-repeat
[neobundle]: https://github.com/Shougo/neobundle.vim
[vundle]: https://github.com/gmarik/vundle
[vim-plug]: https://github.com/junegunn/vim-plug
[pathogen]: https://github.com/tpope/vim-pathogen
[dein]: https://github.com/Shougo/dein.vim
[repeatcount]: https://groups.google.com/forum/?fromgroups#!topic/vim_dev/G4SSgcRVN7g
[emptyrange]: https://groups.google.com/forum/#!topic/vim_use/qialxUwdcMc
[targets]: https://github.com/wellle/targets.vim
[o_v]: http://vimdoc.sourceforge.net/htmldoc/motion.html#o_v
",,,,,,,,,,,,,,,,,,,,,,,0.6904814937,"Targets.vim** is a Vim plugin that adds various [text objects] to give you more
targets to [operate] on. It expands on the idea ofsimple commands like `di'`
(delete inside the single quotes around the cursor) It also gives you more
opportunities to craft powerful commands that can be              
 [repeated][repeat] reliably. One major goal is to handle all corner cases     
         correctly. The plugin is free to download and use, but not to install."
1410,JSON API (jsonapi.org) package for Laravel applications.,"![Tests](https://github.com/cloudcreativity/laravel-json-api/workflows/Tests/badge.svg)

# cloudcreativity/laravel-json-api

## Status

**DO NOT USE THIS PACKAGE FOR NEW PROJECTS - USE [laravel-json-api/laravel](https://github.com/laravel-json-api/laravel)
INSTEAD.**

This package has now been rewritten, substantially improved and released as the `laravel-json-api/laravel` package.
Documentation for the new version is available on our new website [laraveljsonapi.io](https://laraveljsonapi.io) and the
code is now developed under the
[Laravel JSON:API Github organisation.](https://github.com/laravel-json-api)

The `cloudcreativity/laravel-json-api` package is now considered to be the *legacy* package. As we know it is in use in
a lot of production applications, it will continue to receive bug fixes and updates for new Laravel versions. However,
it is no longer supported for new features.

If you are starting a new project, you MUST use the
[new package `laravel-json-api/laravel`.](https://github.com/laravel-json-api/laravel)

## Introduction

Build feature-rich and standards-compliant APIs in Laravel.

This package provides all the capabilities you need to add [JSON API](http://jsonapi.org)
compliant APIs to your application. Extensive support for the specification, including:

- Fetching resources
- Fetching relationships
- Inclusion of related resources (compound documents)
- Sparse fieldsets.
- Sorting.
- Pagination.
- Filtering
- Creating resources.
- Updating resources.
- Updating relationships.
- Deleting resources.
- Validation of:
  - JSON API documents; and
  - Query parameters.

The following additional features are also supported:

- Full support for Eloquent resources, with features such as:
  - Automatic eager loading when including related resources.
  - Easy relationship end-points.
  - Soft-deleting and restoring Eloquent resources.
  - Page and cursor based pagination.
- Asynchronous processing.
- Support multiple media-types within your API.
- Generators for all the classes you need to add a resource to your API.

### What is JSON API?

From [jsonapi.org](http://jsonapi.org)

> If you've ever argued with your team about the way your JSON responses should be formatted, JSON API is your
> anti-bikeshedding weapon.
>
> By following shared conventions, you can increase productivity, take advantage of generalized tooling, and focus on
> what matters: your application. Clients built around JSON API are able to take advantage of its features around
> efficiently caching responses, sometimes eliminating network requests entirely.

For full information on the spec, plus examples, see [http://jsonapi.org](http://jsonapi.org).

## Documentation

Full package documentation is available on
[Read the Docs](http://laravel-json-api.readthedocs.io/en/latest/).

## Slack

Join the Laravel JSON:API community on
[Slack.](https://join.slack.com/t/laraveljsonapi/shared_invite/zt-e3oi2r4y-8nkmhzpKnPQViaXrkPJHtQ)

## Laravel Versions

| Laravel | This Package |
| --- | --- |
| `^9.0` | `^4.0` |
| `^8.0` | `^3.0|^4.0` |
| `^7.0` | `^2.0` |
| `^6.0` | `^1.7` |
| `5.8.*` | `^1.7` |
| `5.7.*` | `^1.0` |
| `5.6.*` | `^1.0` |
| `5.5.*` | `^1.0` |

Make sure you consult the [Upgrade Guide](http://laravel-json-api.readthedocs.io/en/latest/upgrade/)
when upgrading between major or pre-release versions.

## License

Apache License (Version 2.0). Please see [License File](LICENSE) for more information.

## Installation

Installation is via `composer`. See the documentation for complete instructions.

## Contributing

Contributions are absolutely welcome. Ideally submit a pull request, even more ideally with unit tests. Please note the
following:

- **Bug Fixes** - submit a pull request against the `master` branch.
- **Enhancements / New Features** - submit a pull request against the `develop` branch.

We recommend submitting an issue before taking the time to put together a pull request.
",,,,,,,,,,,,,,,,,,,,,,,0.06440322183,"This package provides all the capabilities you need to add [JSON API]compliant
APIs to your application. Extensive support for the specification, including:
Fetching resources, fetching relationships, and sorting fieldsets. Full support
for Eloquent resources, with features such as: Automatic eager loading when
including related resources. Support multiple media-types within your API, and
Generators for all the classes you need for adding a resource to your API. Join
the Laravel JSON:API community on Slack."
