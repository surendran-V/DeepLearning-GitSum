id,description,readme
665,A multi-user music server with a focus on participation,"# Raveberry

[![Build Status](https://img.shields.io/github/workflow/status/raveberry/raveberry/Publish%20Raveberry)](https://github.com/raveberry/raveberry/actions/workflows/publish.yml)
[![PyPI](https://img.shields.io/pypi/v/raveberry)](https://pypi.org/project/raveberry/)
[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/raveberry?style=social)](https://www.reddit.com/r/raveberry/)
[![Discord](https://img.shields.io/badge/-discord?style=social&logo=discord&label=Chat%20on%20Discord)](https://discord.gg/dy7Jxvjj9H)

Raveberry is a multi user music server that allows democratic selection of songs.

It provides an intuitive interface for requesting songs and changing their order according to the rating that users have made. It supports YouTube, Spotify and local files as sources for music.

A live demo is available at https://demo.raveberry.party/.

![](docs/showcase.gif ""Showcase Gif"")

## Installation

### Try it out!

You can test a slim version of Raveberry like this:
```
sudo apt-get install -y python3-pip mopidy redis-server ffmpeg gstreamer1.0-plugins-bad
pip3 install raveberry[run]
raveberry run
```
You might need to write `~/.local/bin/raveberry run` instead. Now you can visit `http://localhost:8080/` and play a song of your choice.

This method uses a development server, with limited performance and a restricted feature set.

### Installation

In order to gain access to all features of Raveberry, install it:
```
pip3 install raveberry[install]
raveberry install
```

If you get `raveberry: command not found` you need to run `export PATH=""$HOME/.local/bin:$PATH""`.
Raveberry was developed for the Raspberry Pi. If you need help setting yours up up, visit [this guide](https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up).

The installer will ask you to confirm the config file it uses. The default install supports YouTube and local files. To customize (e.g. to use Spotify), cancel the installation, edit the config at the provided path and rerun `raveberry install`.

Although everything *should* work fine, I recommend taking a backup of your system. On a Raspberry Pi this can be done by creating a copy of its SD card.

The installation will take at most 30 minutes, most of which is spent on installing/updating packages. You might need to reboot afterwards for all changes to take effect.

### Docker

Alternatively, you can use [docker-compose](https://docs.docker.com/compose/install/):
```
wget https://raw.githubusercontent.com/raveberry/raveberry/master/docker/docker-compose.yml
wget https://raw.githubusercontent.com/raveberry/raveberry/master/docker/.env
docker-compose up -d
```

For more information, consult [`docs/docker.md`](docs/docker.md).

### Remote Installation

You can also install Raveberry on a remote machine you have ssh access to:
```
pip3 install raveberry[install]
cd ""$(pip3 show raveberry | grep Location: | sed 's/.*: //')/raveberry""
ansible-playbook --user <user> --key-file <private_key> -i <ip>, -e ""config_file=/path/to/raveberry.yaml"" setup/system_install.yaml
```
If omitted, `config_file` defaults to `backend/config/raveberry.yaml`. `--user` and `--key-file` can be omitted if the target host is configured in your ssh config.

Passwordless sudo is default on a Raspberry Pi. For most other systems, sudo requires a password, then you have to add `--ask-become-pass`.

## First Steps

After the installation has finished `http://raveberry.local/` is up and ready to play music (go ahead and try now!). If this does not take you to the musiq landing page, use the IP of the device (`hostname -I` to find out).

You can visit `http://raveberry.local/login/` and log in as the `admin` user with your provided admin password. If you take a look at `http://raveberry.local/settings` (which is also linked from the dropdown) you can see various configuration possibilities. For more information about these settings and privileges in general refer to [`docs/privileges.md`](docs/privileges.md).

An introduction to basic functionality can be found in [`docs/functionality.md`](docs/functionality.md). Or just visit the website and find out for yourself ; )

## Updating

### Webinterface

At the bottom of the `/settings` page, click ""Upgrade Raveberry"".
A Log will be written to `/var/www`. 

### Manual

Update the PyPi package and rerun the installation.
```
pip3 install -U raveberry[install]
raveberry install
```
Your database will be preserved, unless you specify a database backup in your config file.

### Docker
Update all of your containers in the docker-compose file:
```
docker-compose pull
```

## Features

* **Live Updates**:
Web page content is updated instantly across all clients using websockets.

* **Remote Streaming**:
With `icecast`, it is possible to remotely listen to Raveberry. See [`docs/streaming.md`](docs/streaming.md).

* **Bluetooth Support**:
Use your bluetooth speakers with Raveberry, removing the need for an audio cable.

* **HiFiBerry Support**:
Attach your [HiFiBerry](https://www.hifiberry.com/) board for a high quality audio experience.

* **Hotspot**:
Provides a WiFi network for access in areas without proper infrastructure. Can double as a repeater.

* **Remote URL**:
Specify a domain to make your Raveberry accessible from the world wide web.

* **Local Files Support**:
Play all the files you already have in your local filesystem. Various filetypes supported.

* **YouTube Support**:
With `yt-dlp` as a media provider, all of YouTube is available to play.

* **Spotify Support**:
Raveberry's music player `mopidy` can play songs from Spotify, if you to log in with your account. Spotify Premium is required.

* **Soundcloud Support**:
Songs from Soundcloud are also available for you to play. ([currently broken](https://github.com/raveberry/raveberry/issues/117))

* **Privilege Levels**:
Grant people additional permissions like playback control.

* **Graphical Admin Interface**:
Raveberry features a convenient way of modifying the behavior of the server, like hotspot configuration or download limitation.

* **Complementary App**:
[Shareberry](https://github.com/raveberry/shareberry/) lets you share songs directly from your phone to Raveberry.

* **Discord Integration**:
Control your Raveberry instance from the discord chat with the [Raveberry bot](https://github.com/raveberry/shareberry/)

* **Audio normalization**:
Raveberry uses replaygain to analyze the volume of songs and prevent sharp volume transitions.

* **Screen visualization**:
With the tool `cava`, the current music is split into its frequencies and visualized on a connected screen (See screenshot below). Code in [separate Repository](https://github.com/raveberry/visualization).

* **Audio visualization**:
Using the same tool, Raveberry can also make connected LEDs flash to the rhythm of the music.

![](docs/visualization.png ""Visualization"")

## Optional Hardware Additions

Some of Raveberry's features rely on additional hardware. If you want to use all of them, consider upgrading your Raspberry Pi with one of these one of items:

* **WiFi Dongle**:
To provide a WiFi network for users to connect, you have to set up a second network interface. If disabled, your users have to be in the same network as Raveberry, or you have to configure an external URL.

* **LEDs**:
For audio visualization, Raveberry uses the `i2c` and `spi` protocols to control connected LEDs. They will automatically be used if they are detected at server startup. For more information see [`docs/leds.md`](docs/leds.md).

* **USB Sound Card**:
The quality of the internal Raspberry Pi sound card varies from model to model. For a better music experience I recommend using a small USB sound card.

* **USB Stick**:
If you don't want to use the Raspberry Pi's internal filesystem, you can insert an external medium like a USB stick. Its label can be specified in the config file and is then used to cache the songs.

## Tested Hardware

Raveberry is known to work on the following Hardware:
* Raspberry Pi 4
* Raspberry Pi 3B+
* Raspberry Pi Zero W

If you have something to add to the list, please let me know!

Although it is possible to install and run Raveberry on the original Raspberry Pi (after a very long installation), the hardware is just to weak for audio decoding and can not provide a pleasant experience at all.

## Uninstall

During installation a backup folder is created. It contains all files that were overwritten outside of the `raveberry/` folder. To undo installation, move these files back to their respective locations using the following command. Take care of changes you made in the meantime!
```
sudo cp -r backup_{timestamp}/* / 
```
To remove files created during the setup run
```
sudo scripts/uninstall.sh
```

## FAQ

### The current song is displayed in red and there is no sound
Red text means that Raveberry can't communicate with the player anymore. Either the player crashed or the interfacing library can't reconnect.

To fix this, first restart the player (`/settings` in ""Sound Output"") and wait a few seconds. If it still does not work, restart the server (`/settings` at the bottom).

### How do I enter my Spotify credentials?
To enable Spotify support, install Raveberry with `spotify: true` in `raveberry.yaml`.
When Raveberry is up and running, go to `/settings` and enter your credentials in the `Spotify` section.
Create the required client ID and client secret [here](https://mopidy.com/ext/spotify/#authentication).

### I can't log in, it always says ""Please reload""
You ran into CSRF protection. This happens when you host Raveberry behind a proxy and the protocols don't match up, e.g. `http://demo.raveberry.party` vs `https://demo.raveberry.party`.

Avoid this by providing your url either in the `raveberry.yaml` (install) or in the `.env` file (docker).

### Where are my YouTube files?

If you specified a path in your config file before installing, you will find them there. If no path was given, it will default to `~/Music/raveberry`. If you run it as `pi` using `raveberry run`, this will be `/home/pi/Music/raveberry`. If Raveberry was installed, the process is running as `www-data` and you will find the directory at `/var/www/Music/raveberry`.

### Streaming doesn't work (there is only silence)

This is a known issue on Ubuntu 20.04 and Debian Bullseye.
To fix it, downgrade `libshout3`:
```
cd /tmp
# for x86_64
wget http://mirrors.kernel.org/ubuntu/pool/main/libs/libshout/libshout3_2.4.1-2build1_amd64.deb -O libshout.deb
# for armhf (Raspberry Pi)
wget http://raspbian.raspberrypi.org/raspbian/pool/main/libs/libshout/libshout3_2.4.1-2_armhf.deb -O libshout.deb
sudo dpkg -i libshout.deb
sudo apt-mark hold libshout3
```

### I want to use the visualization without doing an install.

Install the required packages
```
sudo apt-get install cava
pip3 install raveberry[screenvis]
```
If `cava` is not available on apt, you need to [build it from source](https://github.com/karlstav/cava#from-source).

Then comment out the following line in the used cava config (add the `#`):
```
# source = cava.monitor
```
Now you can start the server with `raveberry run`, login with admin:admin at `localhost:8080/login` and enable the visualization at `localhost:8080/lights`.

## Special Thanks

* All the awesome people that created [Mopidy](https://mopidy.com/) for this incredibly versatile music player.
    * Especially [Mopidy-Spotify](https://github.com/mopidy/mopidy-spotify), without which I could not have added Spotify support.
* [django](https://www.djangoproject.com/) for providing one of the best documentations I have ever encountered.
* [@karlstav](https://github.com/karlstav) for his audio visualizer [`cava`](https://github.com/karlstav/cava).
* [`yt-dlp`](https://github.com/yt-dlp/yt-dlp) for greatly simplifying the interaction with YouTube.
* [Glium](https://github.com/glium/glium) for making OpenGL a lot less painful.
* [Steven van Tetering](https://www.tikveel.nl/) for writing [the shader](https://www.shadertoy.com/view/llycWD) I based my visualization on.
* All my friends for constantly beta testing this project.

## More Information

The [`docs/`](docs/) folder contains more information about usage, resources etc.

Don't hesitate to mail me for feedback or open an issue if you experience any problems. There is also a Reddit and a Discord community:
* Reddit: https://www.reddit.com/r/raveberry/
* Discord: https://discord.gg/dy7Jxvjj9H 

If you like this project, you can support me here:  
[![](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZUPUUHFQMZNQQ)
"
3300,🔌  Convert Bootstrap CSS code to Tailwind CSS code,"# Tailwindo

[![Latest Version on Packagist](https://img.shields.io/packagist/v/awssat/tailwindo.svg?style=flat-square)](https://packagist.org/packages/awssat/tailwindo)
[![Actions Status](https://github.com/awssat/tailwindo/workflows/Tests/badge.svg)](https://github.com/awssat/tailwindo/actions)

<p align=""center"">
  <img src=""https://pbs.twimg.com/media/DQ-mDgSX0AUpCPL.png"">
</p>

This tool can **convert Your CSS framework (currently Bootstrap) classes** in HTML/PHP (any of your choice) files to equivalent **Tailwind CSS** classes.

## Features

-   Made to be easy to add more CSS frameworks in the future (currently Bootstrap).
-   Can convert single files/code snippets/folders.
-   Can extract changes to a separate css file as Tailwind components and keep old classes names. like:

```
.p-md-5 {
	@apply md:p-7;
}
```

## Help Us

-   If you find unexpected conversion result, create an issue; if you managed to fix it, please create a PR.
-   If you are familiar with another CSS frameworks (like Foundation, Pure..), please create a PR and add it (see BootstrapFramework.php file).

## Docs

-   [Introduction](docs/1_introduction.md)
-   [Installation](docs/2_installation.md)
-   [Quick start](docs/3_quick-start.md)
"
1177,"Wave - The Software as a Service Starter Kit, designed to help you build the SAAS of your dreams 🚀 💰 ","<p align=""center""><a href=""https://devdojo.com/wave"" target=""_blank""><img src=""https://cdn.devdojo.com/assets/img/github-wave-logo.svg"" width=""240""></a></p>

<p align=""center""><a href=""https://www.producthunt.com/posts/wave-2-0"" target=""_blank""><img src=""https://cdn.devdojo.com/images/april2021/upvote-product-hunt-img.png"" height=""auto"" width=""auto""></a></p>

## Introduction

[Wave](https://devdojo.com/wave) is a Software as a Service Starter Kit that can help you build your next great idea 💰. Wave is built with [Laravel](https://laravel.com), [Voyager](https://voyager.devdojo.com), [TailwindCSS](https://tailwindcss.com), and a few other awesome technologies. Here are some of the awesome features ✨:

 - [Authentication](https://wave.devdojo.com/docs/features/authentication)
 - [User Profiles](https://wave.devdojo.com/docs/features/user-profiles)
 - [User Impersonation](https://wave.devdojo.com/docs/features/user-impersonation)
 - [Subscriptions](https://wave.devdojo.com/docs/features/billing)
 - [Subscription Plans](https://wave.devdojo.com/docs/features/subscription-plans)
 - [User Roles](https://wave.devdojo.com/docs/features/user-roles)
 - [Notifications](https://wave.devdojo.com/docs/features/notifications)
 - [Announcements](https://wave.devdojo.com/docs/features/announcements)
 - [Fully Functional Blog](https://wave.devdojo.com/docs/features/blog)
 - [Out of the Box API](https://wave.devdojo.com/docs/features/api)
 - [Voyager Admin](https://wave.devdojo.com/docs/features/admin)
 - [Customizable Themes](https://wave.devdojo.com/docs/features/themes)


## Demo
View a live [demo here](https://wave.devdojo.com), or deploy your own instance to DigitalOcean, by clicking the button below.

<a href=""https://cloud.digitalocean.com/apps/new?repo=https://github.com/thedevdojo/wave/tree/main"" target=""_blank""><img src=""https://www.deploytodo.com/do-btn-blue.svg"" width=""240"" alt=""Deploy to DO""></a>


## Installation

To install Wave, you'll want to clone or download this repo:

```
git clone https://github.com/thedevdojo/wave.git project_name
```

Next, we can install Wave with these **4 simple steps**:

### 1. Create a New Database

We'll need to utilize a MySQL database during the installation. For the following stage, you'll need to create a new database and preserve the credentials.

```sql
CREATE DATABASE wave;
CREATE USER 'wave'@'localhost' IDENTIFIED BY 'wave_password';
GRANT ALL PRIVILEGES ON wave.* TO 'wave'@'localhost';
```

### 2. Copy the `.env.example` file

We need to specify our Environment variables for our application. You will see a file named `.env.example`, you will need to duplicate that file and rename it to `.env`.

Then, open up the `.env` file and update your *DB_DATABASE*, *DB_USERNAME*, and *DB_PASSWORD* in the appropriate fields. You will also want to update the *APP_URL* to the URL of your application.

```bash
APP_URL=http://wave.test

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=wave
DB_USERNAME=root
DB_PASSWORD=
```


### 3. Add Composer Dependencies

First, you should ensure that your web server has the required PHP extensions installed:

> [Laravel PHP Requirements](https://laravel.com/docs/9.x/deployment#server-requirements)

Following that, we'll need to install all composer dependencies through the following command:
```php
composer install
```

### 4. Run Migrations and Seeds

We must migrate our database schema into our database, which we can accomplish by running the following command:
```php
php artisan migrate
```
<br>
Finally, we will need to seed our database with the following command:

```php
php artisan db:seed
```
<br>

🎉 And that's it! You will now be able to visit your URL and see your Wave application up and running.


## Watch, Learn, and Build

We've also got a full video series on how you can setup, build, and configure Wave. 🍿 You can watch first few videos for free, and additional videos will require a [DevDojo Pro](https://devdojo.com/pro) subscription. By subscribing to a [DevDojo Pro](https://devdojo.com/pro) subscription you will also be supporting the ongoing development of this project. It's a win win! 🙌

[Click here to watch the Wave Video Series](https://devdojo.com/course/wave).


## Documentation

Checkout the [official documentation here](https://wave.devdojo.com/docs).
"
859,A runtime developer console and IRB alternative with powerful introspection capabilities.,"Pry
===

[![Pry Build Status](https://github.com/pry/pry/workflows/pry/badge.svg)](https://github.com/pry/pry/actions)
[![Code Climate](https://codeclimate.com/github/pry/pry.svg)](https://codeclimate.com/github/pry/pry)
[![Gem Version](https://badge.fury.io/rb/pry.svg)](https://badge.fury.io/rb/pry)
[![Documentation Status](https://inch-ci.org/github/pry/pry.svg?branch=master)](https://inch-ci.org/github/pry/pry)
[![Downloads](https://img.shields.io/gem/dt/pry.svg?style=flat)](https://rubygems.org/gems/pry)

![Pry logo](https://www.dropbox.com/s/zp8o63kquby2rln/pry_logo_350.png?raw=1)

© John Mair ([banisterfiend](https://twitter.com/banisterfiend)) 2018<br> (Creator)

© Kyrylo Silin ([kyrylosilin](https://twitter.com/kyrylosilin)) 2018<br> (Maintainer)

**Alumni:**

* Conrad Irwin
* Ryan Fitzgerald
* Robert Gleeson

**Links:**

* https://pry.github.io/
* [YARD API documentation](https://www.rubydoc.info/gems/pry)
* [Wiki](https://github.com/pry/pry/wiki)

Table of Contents
=================

* [Introduction](#introduction)
* [Key features](#key-features)
* [Installation](#installation)
* [Overview](#overview)
   * [Commands](#commands)
   * [Navigating around state](#navigating-around-state)
   * [Runtime invocation](#runtime-invocation)
   * [Command Shell Integration](#command-shell-integration)
   * [Code Browsing](#code-browsing)
   * [Documentation Browsing](#documentation-browsing)
   * [Edit methods](#edit-methods)
   * [Live Help System](#live-help-system)
   * [Use Pry as your Rails Console](#use-pry-as-your-rails-console)
   * [Syntax Highlighting](#syntax-highlighting)
* [Supported Rubies](#supported-rubies)
* [Contact](#contact)
* [License](#license)
* [Contributors](#contributors)

Introduction
------------

Pry is a runtime developer console and IRB alternative with powerful
introspection capabilities. Pry aims to be more than an IRB replacement. It is
an attempt to bring REPL driven programming to the Ruby language.

Key features
------------

* Source code browsing (including core C source with the pry-doc gem)
* Documentation browsing
* Live help system
* Open methods in editors (`edit Class#method`)
* Syntax highlighting
* Command shell integration (start editors, run git, and rake from within Pry)
* Gist integration
* Navigation around state (`cd`, `ls` and friends)
* Runtime invocation (use Pry as a developer console or debugger)
* Exotic object support (BasicObject instances, IClasses, ...)
* A powerful and flexible command system
* Ability to view and replay history
* Many convenience commands inspired by IPython, Smalltalk and other advanced
  REPLs
* A wide-range number of
  [plugins](https://github.com/pry/pry/wiki/Available-plugins) that provide
  remote sessions, full debugging functionality, and more.

Installation
------------

### Bundler

```ruby
gem 'pry', '~> 0.13.1'
```

### Manual

```sh
gem install pry
```

Overview
--------

Pry is fairly flexible and allows significant user
[customization](https://github.com/pry/pry/wiki/Customization-and-configuration).
It is trivial to read from any object that has a `readline` method and
write to any object that has a `puts` method. Many other aspects of Pry are
also configurable, making it a good choice for implementing custom shells.

Pry comes with an executable so it can be invoked at the command line. Just
enter `pry` to start. A `pryrc` file in `$XDG_CONFIG_HOME/pry/` or the user's
home directory will be loaded if it exists. Type `pry --help` at the command
line for more information.

### Commands

Nearly every piece of functionality in a Pry session is implemented as a
command. Commands are not methods and must start at the beginning of a line,
with no whitespace in between. Commands support a flexible syntax and allow
'options' in the same way as shell commands, for example the following Pry
command will show a list of all private instance methods (in scope) that begin
with 'pa'

```ruby
pry(YARD::Parser::SourceParser):5> ls -Mp --grep ^pa
YARD::Parser::SourceParser#methods: parse  parser_class  parser_type  parser_type=  parser_type_for_filename
```

### Navigating around state

Pry allows us to pop in and out of different scopes (objects) using the `cd`
command. This enables us to explore the run-time view of a program or
library. To view which variables and methods are available within a particular
scope we use the versatile [ls
command.](https://gist.github.com/c0fc686ef923c8b87715)

Here we will begin Pry at top-level, then Pry on a class and then on an instance
variable inside that class:

```ruby
pry(main)> class Hello
pry(main)*   @x = 20
pry(main)* end
=> 20
pry(main)> cd Hello
pry(Hello):1> ls -i
instance variables: @x
pry(Hello):1> cd @x
pry(20):2> self + 10
=> 30
pry(20):2> cd ..
pry(Hello):1> cd ..
pry(main)> cd ..
```

The number after the `:` in the pry prompt indicates the nesting level. To
display more information about nesting, use the `nesting` command. E.g

```ruby
pry(""friend""):3> nesting
Nesting status:
0. main (Pry top level)
1. Hello
2. 100
3. ""friend""
=> nil
```

We can then jump back to any of the previous nesting levels by using the
`jump-to` command:

```ruby
pry(""friend""):3> jump-to 1
=> 100
pry(Hello):1>
```

### Runtime invocation

Pry can be invoked in the middle of a running program. It opens a Pry session at
the point it's called and makes all program state at that point available. It
can be invoked on any object using the `my_object.pry` syntax or on the current
binding (or any binding) using `binding.pry`. The Pry session will then begin
within the scope of the object (or binding). When the session ends the program
continues with any modifications you made to it.

This functionality can be used for such things as: debugging, implementing
developer consoles and applying hot patches.

code:

```ruby
# test.rb
require 'pry'

class A
  def hello() puts ""hello world!"" end
end

a = A.new

# start a REPL session
binding.pry

# program resumes here (after pry session)
puts ""program resumes here.""
```

Pry session:

```ruby
pry(main)> a.hello
hello world!
=> nil
pry(main)> def a.goodbye
pry(main)*   puts ""goodbye cruel world!""
pry(main)* end
=> :goodbye
pry(main)> a.goodbye
goodbye cruel world!
=> nil
pry(main)> exit

program resumes here.
```

### Command Shell Integration

A line of input that begins with a '.' will be forwarded to the command
shell. This enables us to navigate the file system, spawn editors, and run git
and rake directly from within Pry.

Further, we can use the `shell-mode` command to incorporate the present working
directory into the Pry prompt and bring in (limited at this stage, sorry) file
name completion.  We can also interpolate Ruby code directly into the shell by
using the normal `#{}` string interpolation syntax.

In the code below we're going to switch to `shell-mode` and edit the `pryrc`
file. We'll then cat its contents and reload the file.

```ruby
pry(main)> shell-mode
pry main:/home/john/ruby/projects/pry $ .cd ~
pry main:/home/john $ .emacsclient .pryrc
pry main:/home/john $ .cat .pryrc
def hello_world
  puts ""hello world!""
end
pry main:/home/john $ load "".pryrc""
=> true
pry main:/home/john $ hello_world
hello world!
```

We can also interpolate Ruby code into the shell. In the example below we use
the shell command `cat` on a random file from the current directory and count
the number of lines in that file with `wc`:

```ruby
pry main:/home/john $ .cat #{Dir['*.*'].sample} | wc -l
44
```

### Code Browsing

You can browse method source code with the `show-source` command. Nearly all
Ruby methods (and some C methods, with the pry-doc gem) can have their source
viewed. Code that is longer than a page is sent through a pager (such as less),
and all code is properly syntax highlighted (even C code).

The `show-source` command accepts two syntaxes, the typical ri `Class#method`
syntax and also simply the name of a method that's in scope. You can optionally
pass the `-l` option to `show-source` to include line numbers in the output.

In the following example we will enter the `Pry` class, list the instance
methods beginning with 'se' and display the source code for the `set_last_result` method:

```ruby
pry(main)> cd Pry
pry(Pry):1> ls -M --grep se
Pry#methods: raise_up  raise_up!  raise_up_common  reset_eval_string  select_prompt  set_last_result
pry(Pry):1> show-source set_last_result -l

From: /home/john/ruby/projects/pry/lib/pry/pry_instance.rb:405:
Owner: Pry
Visibility: public
Signature: set_last_result(result, code=?)
Number of lines: 6

405: def set_last_result(result, code = """")
406:   @last_result_is_exception = false
407:   @output_ring << result
408:
409:   self.last_result = result unless code =~ /\A\s*\z/
410: end
```

Note that we can also view C methods (from Ruby Core) using the
`pry-doc` plugin; we also show off the alternate syntax for
`show-source`:

```ruby
pry(main)> show-source Array#select

From: array.c in Ruby Core (C Method):
Number of lines: 15

static VALUE
rb_ary_select(VALUE ary)
{
    VALUE result;
    long i;

    RETURN_ENUMERATOR(ary, 0, 0);
    result = rb_ary_new2(RARRAY_LEN(ary));
    for (i = 0; i < RARRAY_LEN(ary); i++) {
        if (RTEST(rb_yield(RARRAY_PTR(ary)[i]))) {
            rb_ary_push(result, rb_ary_elt(ary, i));
        }
    }
    return result;
}
```

### Documentation Browsing

One use-case for Pry is to explore a program at run-time by `cd`-ing in and out
of objects and viewing and invoking methods. In the course of exploring it may
be useful to read the documentation for a specific method that you come
across. `show-source` command supports two syntaxes - the
normal `ri` syntax as well as accepting the name of any method that is currently
in scope.

The Pry documentation system does not rely on pre-generated `rdoc` or `ri`,
instead it grabs the comments directly above the method on demand. This results
in speedier documentation retrieval and allows the Pry system to retrieve
documentation for methods that would not be picked up by `rdoc`. Pry also has a
basic understanding of both the rdoc and yard formats and will attempt to syntax
highlight the documentation appropriately.

Nonetheless, the `ri` functionality is very good and has an advantage over Pry's
system in that it allows documentation lookup for classes as well as
methods. Pry therefore has good integration with `ri` through the `ri`
command. The syntax for the command is exactly as it would be in command-line -
so it is not necessary to quote strings.

In our example we will enter the `Gem` class and view the documentation for the
`try_activate` method:

```ruby
pry(main)> cd Gem
pry(Gem):1> show-source try_activate -d

From: /Users/john/rbenv/versions/2.7.1/lib/ruby/2.7.0/rubygems.rb:194:
Owner: #<Class:Gem>
Visibility: public
Signature: try_activate(path)
Number of lines: 28

Try to activate a gem containing path. Returns true if
activation succeeded or wasn't needed because it was already
activated. Returns false if it can't find the path in a gem.

def self.try_activate(path)
  # finds the _latest_ version... regardless of loaded specs and their deps
  # if another gem had a requirement that would mean we shouldn't
  # activate the latest version, then either it would already be activated
  # or if it was ambiguous (and thus unresolved) the code in our custom
  # require will try to activate the more specific version.

  spec = Gem::Specification.find_by_path path
pry(Gem):1>
```

We can also use `ri` in the normal way:

```ruby
pry(main) ri Array#each
----------------------------------------------------------- Array#each
     array.each {|item| block }   ->   array
------------------------------------------------------------------------
     Calls _block_ once for each element in _self_, passing that element
     as a parameter.

        a = [ ""a"", ""b"", ""c"" ]
        a.each {|x| print x, "" -- "" }

     produces:

        a -- b -- c --
```

### Edit methods

You can use `edit Class#method` or `edit my_method` (if the method is in scope)
to open a method for editing directly in your favorite editor. Pry has knowledge
of a few different editors and will attempt to open the file at the line the
method is defined.

You can set the editor to use by assigning to the `Pry.editor`
accessor. `Pry.editor` will default to `$EDITOR` or failing that will use `nano`
as the backup default. The file that is edited will be automatically reloaded
after exiting the editor - reloading can be suppressed by passing the
`--no-reload` option to `edit`

In the example below we will set our default editor to ""emacsclient"" and open
the `Pry#repl` method for editing:

```ruby
pry(main)> Pry.editor = ""emacsclient""
pry(main)> edit Pry#repl
```

### Live Help System

Many other commands are available in Pry; to see the full list type `help` at
the prompt. A short description of each command is provided with basic
instructions for use; some commands have a more extensive help that can be
accessed via typing `command_name --help`. A command will typically say in its
description if the `--help` option is available.

### Use Pry as your Rails Console

The recommended way to use Pry as your Rails console is to add [the `pry-rails`
gem](https://github.com/rweng/pry-rails) to your Gemfile. This replaces the
default console with Pry, in addition to loading the Rails console helpers and
adding some useful Rails-specific commands.

If you don't want to change your Gemfile, you can still run a Pry console in
your app's environment using Pry's `-r` flag:

```sh
pry -r ./config/environment
```

Also check out the
[wiki](https://github.com/pry/pry/wiki/Setting-up-Rails-or-Heroku-to-use-Pry)
for more information about integrating Pry with Rails.

### Syntax Highlighting

Syntax highlighting is on by default in Pry. If you want to change the colors,
check out the [pry-theme](https://github.com/kyrylo/pry-theme) gem.

You can toggle the syntax highlighting on and off in a session by using the
`toggle-color` command. Alternatively, you can turn it off permanently by
putting the line `Pry.color = false` in your `pryrc` file.

Supported Rubies
----------------

* CRuby >= 2.0.0
* JRuby >= 9.0

Contact
-------

In case you have a problem, question or a bug report, feel free to:

* ask a question on IRC (#pry on Freenode)
* [file an issue](https://github.com/pry/pry/issues)
* [tweet at us](https://twitter.com/pryruby)

License
-------

The project uses the MIT License. See LICENSE.md for details.

Contributors
------------

Pry is primarily the work of [John Mair (banisterfiend)](https://github.com/banister), for full list
of contributors see the
[contributors graph](https://github.com/pry/pry/graphs/contributors).
"
211,"Project page for ""The Fuzzing Book""","<!-- Fuzzingbook README -->

<!-- Badges to be shown on project page -->

[![Python Tests](https://github.com/uds-se/fuzzingbook/actions/workflows/check-code.yml/badge.svg)](https://github.com/uds-se/fuzzingbook/actions/workflows/check-code.yml)
&nbsp;
[![Notebook Tests](https://github.com/uds-se/fuzzingbook/actions/workflows/check-notebooks.yml/badge.svg)](https://github.com/uds-se/fuzzingbook/actions/workflows/check-notebooks.yml)
&nbsp;
[![Static Type Checking](https://github.com/uds-se/fuzzingbook/actions/workflows/check-types.yml/badge.svg)](https://github.com/uds-se/fuzzingbook/actions/workflows/check-types.yml)
&nbsp;
[![Imports](https://github.com/uds-se/fuzzingbook/actions/workflows/check-imports.yml/badge.svg)](https://github.com/uds-se/fuzzingbook/actions/workflows/check-imports.yml)
&nbsp;
[![Website www.fuzzingbook.org](https://img.shields.io/website-up-down-green-red/https/www.fuzzingbook.org.svg)](https://www.fuzzingbook.org/)

[![Launch Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/uds-se/fuzzingbook/master?filepath=docs/notebooks/00_Table_of_Contents.ipynb)
&nbsp;
[![Made with Python](https://img.shields.io/badge/Made%20with-Python-blue.svg)](https://www.python.org/)
&nbsp;
[![Made with Jupyter](https://img.shields.io/badge/Made%20with-Jupyter-orange.svg)](https://www.jupyter.org/)
&nbsp;
[![License: MIT (Code), CC BY-NC-SA (Book)](https://img.shields.io/badge/License-MIT_(Code),_CC_BY--NC--SA_4.0_(Book)-blue.svg)](https://github.com/uds-se/fuzzingbook/blob/master/LICENSE.md)

# About this Book

__Welcome to ""The Fuzzing Book""!__ 
Software has bugs, and catching bugs can involve lots of effort.  This book addresses this problem by _automating_ software testing, specifically by _generating tests automatically_.  Recent years have seen the development of novel techniques that lead to dramatic improvements in test generation and software testing.  They now are mature enough to be assembled in a book – even with executable code. 


```python
from bookutils import YouTubeVideo
YouTubeVideo(""w4u5gCgPlmg"")
```





<a href=""https://www.youtube-nocookie.com/embed/w4u5gCgPlmg"" target=""_blank"">
<img src=""https://www.fuzzingbook.org/html/PICS/youtube.png"" width=640>
</a>
        



## A Textbook for Paper, Screen, and Keyboard

You can use this book in four ways:

* You can __read chapters in your browser__.  Check out the list of chapters in the menu above, or start right away with the [introduction to testing](https://www.fuzzingbook.org/html/Intro_Testing.html) or the [introduction to fuzzing](https://www.fuzzingbook.org/html/Fuzzer.html).  All code is available for download.

* You can __interact with chapters as Jupyter Notebooks__ (beta).  This allows you to edit and extend the code, experimenting _live in your browser._  Simply select ""Resources → Edit as Notebook"" at the top of each chapter. <a href=""https://mybinder.org/v2/gh/uds-se/fuzzingbook/master?filepath=docs/notebooks/Fuzzer.ipynb"" target=_blank>Try interacting with the introduction to fuzzing.</a>

* You can __use the code in your own projects__.  You can download the code as Python programs; simply select ""Resources → Download Code"" for one chapter or ""Resources → All Code"" for all chapters.  These code files can be executed, yielding (hopefully) the same results as the notebooks.  Even easier: [Install the fuzzingbook Python package](https://www.fuzzingbook.org/html/Importing.html).

* You can __present chapters as slides__.  This allows for presenting the material in lectures.  Just select ""Resources → View slides"" at the top of each chapter. <a href=""https://www.fuzzingbook.org/slides/Fuzzer.slides.html"" target=_blank>Try viewing the slides for the introduction to fuzzing.</a>

## Who this Book is for

This work is designed as a _textbook_ for a course in software testing; as _supplementary material_ in a software testing or software engineering course; and as a _resource for software developers_. We cover random fuzzing, mutation-based fuzzing, grammar-based test generation, symbolic testing, and much more, illustrating all techniques with code examples that you can try out yourself.

## News

This book is _work in progress._  All chapters planned are out now, but we keep on refining the material with [minor and major releases.](https://www.fuzzingbook.org/html/ReleaseNotes.html)  To get notified on updates, <a href=""https://twitter.com/FuzzingBook?ref_src=twsrc%5Etfw"" data-show-count=""false"">follow us on Twitter</a>.

<a class=""twitter-timeline"" data-width=""500"" data-chrome=""noheader nofooter noborders transparent"" data-link-color=""#A93226"" data-align=""center"" href=""https://twitter.com/FuzzingBook?ref_src=twsrc%5Etfw"" data-dnt=""true"">News from @FuzzingBook</a> 


## About the Authors

This book is written by _Andreas Zeller, Rahul Gopinath, Marcel Böhme, Gordon Fraser, and Christian Holler_.  All of us are long-standing experts in software testing and test generation; and we have written or contributed to some of the most important test generators and fuzzers on the planet.  As an example, if you are reading this in a Firefox, Chrome, or Edge Web browser, you can do so safely partly because of us, as _the very techniques listed in this book have found more than 2,600 bugs in their JavaScript interpreters so far._  We are happy to share our expertise and making it accessible to the public.

## Frequently Asked Questions

### Troubleshooting

#### Why does it take so long to start an interactive notebook?

The interactive notebook uses the [mybinder.org](https://mybinder.org) service, which runs notebooks on their own servers.  Starting Jupyter through mybinder.org normally takes about 30 seconds, depending on your Internet connection. If, however, you are the first to invoke binder after a book update, binder recreates its environment, which will take a few minutes.  Reload the page occasionally.

#### The interactive notebook does not work!

mybinder.org imposes a [limit of 100 concurrent users for a repository](https://mybinder.readthedocs.io/en/latest/user-guidelines.html).  Also, as listed on the [mybinder.org status and reliability page](https://mybinder.readthedocs.io/en/latest/reliability.html),

> As mybinder.org is a research pilot project, the main goal for the project is to understand usage patterns and workloads for future project evolution. While we strive for site reliability and availability, we want our users to understand the intent of this service is research and we offer no guarantees of its performance in mission critical uses.

There are alternatives to mybinder.org; see below.

#### Do I have alternatives to the interactive notebook?

If mybinder.org does not work or match your needs, you have a number of alternatives:

1. **Download the Python code** (using the menu at the top) and edit and run it in your favorite environment.  This is easy to do and does not require lots of resources.

2. **Download the Jupyter Notebooks** (using the menu at the top) and open them in Jupyter.  Here's [how to install jupyter notebook on your machine](https://www.dataquest.io/blog/jupyter-notebook-tutorial/).

3. **Run the notebook locally** in a Docker container. For more information, see [How to use the book with Docker](https://github.com/uds-se/fuzzingbook/blob/master/deploy/README.md).  

4. If you want to use the book in a classroom, and depend on your users having access to the interactive notebooks, consider using or deploying a [JupyterHub](http://jupyter.org/hub) or [BinderHub](https://github.com/jupyterhub/binderhub) instance.

#### Can I run the code on my Windows machine?

We try to keep the code as general as possible, but occasionally, when we interact with the operating system, we assume a Unix-like environment (because that is what Binder provides).  To run these examples on your own Windows machine, you can install a Linux VM or a [Docker environment](https://github.com/uds-se/fuzzingbook/blob/master/deploy/README.md).

#### Can't you run your own dedicated cloud service?

Technically, yes; but this would cost money and effort, which we'd rather spend on the book at this point.  If you'd like to host a [JupyterHub](http://jupyter.org/hub) or [BinderHub](https://github.com/jupyterhub/binderhub) instance for the public, please _do so_ and let us know.

### Content

#### Can I use your code in my own programs?

Yes!  See the [installation instructions](https://www.fuzzingbook.org/html/Importing.html) for details.

#### Which content has come up?

See the [release notes](https://www.fuzzingbook.org/html/ReleaseNotes.html) for details.

#### How do I cite your work?

Thanks for referring to our work!  Once the book is complete, you will be able to cite it in the traditional way.  In the meantime, just click on the ""cite"" button at the bottom of the Web page for each chapter to get a citation entry.

#### Can you cite my paper?  And possibly write a chapter about it?

We're always happy to get suggestions!  If we missed an important reference, we will of course add it.  If you'd like specific material to be covered, the best way is to _write a notebook_ yourself; see our [Guide for Authors](https://www.fuzzingbook.org/html/Guide_for_Authors.html) for instructions on coding and writing.  We can then refer to it or even host it.

### Teaching and Coursework

#### Can I use your material in my course?

Of course!  Just respect the [license](https://github.com/uds-se/fuzzingbook/blob/master/LICENSE.md) (including attribution and share alike).  If you want to use the material for commercial purposes, contact us.

#### Can I extend or adapt your material?

Yes!  Again, please see the [license](https://github.com/uds-se/fuzzingbook/blob/master/LICENSE.md) for details.

#### How can I run a course based on the book?

We have successfully used the material in various courses.  

* Initially, we used the slides and code and did _live coding_ in lectures to illustrate how a technique works. 

* Now, the goal of the book is to be completely self-contained; that is, it should work without additional support.  Hence, we now give out completed chapters to students in a _flipped classroom_ setting, with the students working on the notebooks at their leisure.  We would meet in the classroom to discuss experiences with past notebooks and discuss future notebooks.

* We have the students work on exercises from the book or work on larger (fuzzing) projects.  We also have students who use the book as a base for their research; indeed, it is very easy to prototype in Python for Python.

When running a course, [do not rely on mybinder.org](#Troubleshooting) – it will not provide sufficient resources for a larger group of students.  Instead, [install and run your own hub.](#Do-I-have-alternatives-to-the-interactive-notebook?)

#### Are there specific subsets I can focus on?

We have compiled a number of [tours through the book](https://www.fuzzingbook.org/html/Tours.html) for various audiences.  Our [Sitemap](https://www.fuzzingbook.org/html/00_Table_of_Contents.html) lists the dependencies between the individual chapters.

#### How can I extend or adapt your slides?

Download the Jupyter Notebooks (using the menu at the top) and adapt the notebooks at your leisure (see above), including ""Slide Type"" settings.  Then,

1. Download slides from Jupyter Notebook; or
2. Use the RISE extension ([instructions](http://www.blog.pythonlibrary.org/2018/09/25/creating-presentations-with-jupyter-notebook/)) to present your slides right out of Jupyter notebook.

#### Do you provide PDFs of your material?

At this point, we do not provide support for PDF versions.  We will be producing PDF and print versions after the book is complete.

### Other Issues

#### I have a question, comment, or a suggestion.  What do I do?

You can [tweet to @fuzzingbook on Twitter](https://twitter.com/fuzzingbook), allowing the community of readers to chime in.  For bugs that you'd like to get fixed, report an issue on the [development page](https://github.com/uds-se/fuzzingbook/issues).

#### I have reported an issue two weeks ago.  When will it be addressed?

We prioritize issues as follows:

1. Bugs in code published on fuzzingbook.org
2. Bugs in text published on fuzzingbook.org
3. Writing missing chapters
4. Issues in yet unpublished code or text
5. Issues related to development or construction
6. Things marked as ""beta""
7. Everything else

#### How can I solve problems myself?

We're glad you ask that.  The [development page](https://github.com/uds-se/fuzzingbook/) has all sources and some supplementary material.  Pull requests that fix issues are very welcome.

#### How can I contribute?

Again, we're glad you're here!  We are happy to accept 

* **Code fixes and improvements.**  Please place any code under the MIT license such that we can easily include it.
* **Additional text, chapters, and notebooks** on specialized topics.  We plan to set up a special folder for third-party contributions.

See our [Guide for Authors](https://www.fuzzingbook.org/html/Guide_for_Authors.html) for instructions on coding and writing.
"
897,The flexible game engine.,"The flexible game engine. [![Build Status](https://github.com/crownengine/crown/workflows/build_and_test/badge.svg)](https://github.com/crownengine/crown/actions)
=====================================

Crown is a general purpose and data-driven game engine, written in [orthodox
C++](https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b) with a minimalistic
and data-oriented design philosophy in mind.

Crown isn't tied to a particular game type or genre but instead it offers a set
of generic primitives and facilities to help you create a wide gamut of
interactive 2D and 3D products.

Check out the
[Introduction](https://docs.crownengine.org/html/latest/introduction.html)
for more info.

## Download
### Binaries

  * [Changelog](https://docs.crownengine.org/html/latest/changelog.html)
  * [Crown v0.47.0 for Linux 64-bits](https://github.com/crownengine/crown/releases/download/v0.47.0/crown-0.47.0-linux-x64.tar.gz)
  * [Crown v0.47.0 for Windows 64-bits](https://github.com/crownengine/crown/releases/download/v0.47.0/crown-0.47.0-windows-x64.zip)
  * [Crown v0.47.0 all releases](https://github.com/crownengine/crown/releases/tag/v0.47.0)
  
### Arch Linux ([AUR](https://aur.archlinux.org/packages/crown/))
    yay -S crown
  
## Documentation
### Unstable (master)
  * [User Manual](https://docs.crownengine.org/html/master)
  * [Lua API](https://docs.crownengine.org/html/master/lua_api.html)
  * [Building](https://docs.crownengine.org/html/master/hackers/building.html)
  
### Latest Stable (v0.47.0)
  * [User Manual](https://docs.crownengine.org/html/latest)
  * [Lua API](https://docs.crownengine.org/html/latest/lua_api.html)

## Community Support & Development

  * [Discord](https://discord.gg/CeXVWCT): [![Discord Chat](https://img.shields.io/discord/572468149358690314.svg)](https://discord.gg/CeXVWCT)
  * [Trello Roadmap](https://trello.com/b/h88kbJNm/crown-game-engine)

## Screenshots

### [Level Editor](https://github.com/crownengine/crown/tree/master/tools/level_editor)

![level-editor](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/level-editor.png)

### [00-empty](https://github.com/crownengine/crown/tree/master/samples/00-empty)

Engine initialization and shutdown.

### [01-physics](https://github.com/crownengine/crown/tree/master/samples/01-physics)
![01-physics](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/01-physics.png)

### [02-animation](https://github.com/crownengine/crown/tree/master/samples/02-animation)
![02-animation](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/02-animation.png)

### [03-joypad](https://github.com/crownengine/crown/tree/master/samples/03-joypad)
![03-joypad](https://raw.githubusercontent.com/crownengine/crown/master/docs/shots/03-joypad.png)

Contact
-------

Daniele Bartolini ([@aa_dani_bart](https://twitter.com/aa_dani_bart))  
Project page: https://github.com/crownengine/crown

Contributors
------------

In chronological order.

Daniele Bartolini ([@dbartolini](https://github.com/dbartolini))  
Simone Boscaratto ([@Xed89](https://github.com/Xed89))  
Michele Rossi ([@mikymod](https://github.com/mikymod))  
Michela Iacchelli - Pepper logo.  
Raphael de Vasconcelos Nascimento ([@vasconssa](https://github.com/vasconssa))  
Giulia Gazzoli - Crown logo.
"
2941,Introduction to Deep Neural Networks with Keras and Tensorflow,"<div>
    <h1 style=""text-align: center;"">Deep Learning with Keras and Tensorflow</h1>
    <img style=""text-align: left"" src=""https://blog.keras.io/img/keras-tensorflow-logo.jpg"" width=""15%"" />
<div>
<br>

### Author: Valerio Maggio

#### Contacts:

<table style=""border: 0px; display: inline-table"">
    <tbody>
        <tr style=""border: 0px;"">
            <td style=""border: 0px;"">
                <img src=""imgs/twitter_small.png"" style=""display: inline-block;"" /> 
                <a href=""http://twitter.com/leriomaggio"" target=""_blank"">@leriomaggio</a>
	    </td>
            <td style=""border: 0px;"">
                <img src=""imgs/linkedin_small.png"" style=""display: inline-block;"" /> 
                <a href=""it.linkedin.com/in/valeriomaggio"" target=""_blank"">valeriomaggio</a>
            </td>
            <td style=""border: 0px;"">
                <img src=""imgs/gmail_small.png"" style=""display: inline-block;"" /> 
                valeriomaggio_at_gmail
            </td>
       </tr>
  </tbody>
</table>


```shell

git clone https://github.com/leriomaggio/deep-learning-keras-tensorflow.git
```

---

## Table of Contents

- **Part I**: **Introduction**

    - Intro to Artificial Neural Networks
        - Perceptron and MLP    
        - naive pure-Python implementation
        - fast forward, sgd, backprop
        
    - Introduction to Deep Learning Frameworks
        - Intro to Theano
        - Intro to Tensorflow
        - Intro to Keras
            - Overview and main features
            - Overview of the `core` layers
            - Multi-Layer Perceptron and Fully Connected
                - Examples with `keras.models.Sequential` and `Dense`
            - Keras Backend
    
- **Part II**: **Supervised Learning**
    
    - Fully Connected Networks and Embeddings
        - Intro to MNIST Dataset
        - Hidden Leayer Representation and Embeddings
        
    - Convolutional Neural Networks
        - meaning of convolutional filters
            - examples from ImageNet    
        - Visualising ConvNets 

        - Advanced CNN
            - Dropout
            - MaxPooling
            - Batch Normalisation

        - HandsOn: MNIST Dataset
            - FC and MNIST
            - CNN and MNIST
        
        - Deep Convolutional Neural Networks with Keras (ref: `keras.applications`)
            - VGG16
            - VGG19
            - ResNet50
    - Transfer Learning and FineTuning
    - Hyperparameters Optimisation 
        
- **Part III**: **Unsupervised Learning**

    - AutoEncoders and Embeddings
	- AutoEncoders and MNIST
    	- word2vec and doc2vec (gensim) with `keras.datasets`
        - word2vec and CNN
    
- **Part IV**: **Recurrent Neural Networks**
    - Recurrent Neural Network in Keras 
        -  `SimpleRNN`, `LSTM`, `GRU`
    - LSTM for Sentence Generation
		
- **PartV**: **Additional Materials**:  
   - Custom Layers in Keras 
   - Multi modal Network Topologies with Keras

---

# Requirements

This tutorial requires the following packages:

- Python version 3.5
    - Python 3.4 should be fine as well
    - likely Python 2.7 would be also fine, but *who knows*? :P
    
- `numpy` version 1.10 or later: http://www.numpy.org/
- `scipy` version 0.16 or later: http://www.scipy.org/
- `matplotlib` version 1.4 or later: http://matplotlib.org/
- `pandas` version 0.16 or later: http://pandas.pydata.org
- `scikit-learn` version 0.15 or later: http://scikit-learn.org
- `keras` version 2.0 or later: http://keras.io
- `tensorflow` version 1.0 or later: https://www.tensorflow.org
- `ipython`/`jupyter` version 4.0 or later, with notebook support

(Optional but recommended):

- `pyyaml`
- `hdf5` and `h5py` (required if you use model saving/loading functions in keras)
- **NVIDIA cuDNN** if you have NVIDIA GPUs on your machines.
    [https://developer.nvidia.com/rdp/cudnn-download]()

The easiest way to get (most) these is to use an all-in-one installer such as [Anaconda](http://www.continuum.io/downloads) from Continuum. These are available for multiple architectures.

---

### Python Version

I'm currently running this tutorial with **Python 3** on **Anaconda**


```python
!python --version
```

    Python 3.5.2

---	
	
## Setting the Environment

In this repository, files to re-create virtual env with `conda` are provided for Linux and OSX systems, 
namely `deep-learning.yml` and `deep-learning-osx.yml`, respectively.

To re-create the virtual environments (on Linux, for example):

```shell
conda env create -f deep-learning.yml
```

For OSX, just change the filename, accordingly.

### Notes about Installing Theano with GPU support

**NOTE**: Read this section **only** if after _pip installing_ `theano`, it raises error in enabling the GPU support!

Since version `0.9` Theano introduced the [`libgpuarray`](http://deeplearning.net/software/libgpuarray) in the stable release (it was previously only available in the _development_ version).

The goal of `libgpuarray` is (_from the documentation_) make a common GPU ndarray (n dimensions array) that can be reused by all projects that is as future proof as possible, while keeping it easy to use for simple need/quick test.

Here are some useful tips (hopefully) I came up with to properly install and configure `theano` on (Ubuntu) Linux with **GPU** support:

1) [If you're using Anaconda] `conda install theano pygpu` should be just fine!

Sometimes it is suggested to install `pygpu` using the `conda-forge` channel:

`conda install -c conda-forge pygpu`

2) [Works with both Anaconda Python or Official CPython]

* Install `libgpuarray` from source: [Step-by-step install libgpuarray user library](http://deeplearning.net/software/libgpuarray/installation.html#step-by-step-install-user-library)

* Then, install `pygpu` from source: (in the same source folder)
`python setup.py build && python setup.py install`

* `pip install theano`.


After **Theano is installed**:

```
echo ""[global]
device = cuda
floatX = float32

[lib]
cnmem = 1.0"" > ~/.theanorc
```

### Installing Tensorflow

To date `tensorflow` comes in two different packages, namely `tensorflow` and `tensorflow-gpu`, whether you want to install 
the framework with CPU-only or GPU support, respectively.

For this reason, `tensorflow` has **not** been included in the conda envs and has to be installed separately.

#### Tensorflow for CPU only:

```shell
pip install tensorflow
```

#### Tensorflow with GPU support:

```shell
pip install tensorflow-gpu
```

**Note**: NVIDIA Drivers and CuDNN **must** be installed and configured before hand. Please refer to the official 
[Tensorflow documentation](https://www.tensorflow.org/install/) for further details.


#### Important Note:

All the code provided+ in this tutorial can run even if `tensorflow` is **not** installed, and so using `theano` as the (default) backend!

___**This** is exactly the power of Keras!___

Therefore, installing `tensorflow` is **not** stricly required!

+: Apart from the **1.2 Introduction to Tensorflow** tutorial, of course.

### Configure Keras with tensorflow

By default, Keras is configured with `theano` as backend. 

If you want to use `tensorflow` instead, these are the simple steps to follow:

1) Create the `keras.json` (if it does not exist):

```shell
touch $HOME/.keras/keras.json
```

2) Copy the following content into the file:

```
{
    ""epsilon"": 1e-07,
    ""backend"": ""tensorflow"",
    ""floatx"": ""float32"",
    ""image_data_format"": ""channels_last""
}
```

3) Verify it is properly configured:

```python
!cat ~/.keras/keras.json
```

    {
    	""epsilon"": 1e-07,
    	""backend"": ""tensorflow"",
    	""floatx"": ""float32"",
    	""image_data_format"": ""channels_last""
    }

---

# Test if everything is up&running

## 1. Check import


```python
import numpy as np
import scipy as sp
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
```


```python
import keras
```

    Using TensorFlow backend.


## 2. Check installed Versions


```python
import numpy
print('numpy:', numpy.__version__)

import scipy
print('scipy:', scipy.__version__)

import matplotlib
print('matplotlib:', matplotlib.__version__)

import IPython
print('iPython:', IPython.__version__)

import sklearn
print('scikit-learn:', sklearn.__version__)
```

    numpy: 1.11.1
    scipy: 0.18.0
    matplotlib: 1.5.2
    iPython: 5.1.0
    scikit-learn: 0.18



```python
import keras
print('keras: ', keras.__version__)

# optional
import theano
print('Theano: ', theano.__version__)

import tensorflow as tf
print('Tensorflow: ', tf.__version__)
```

    keras:  2.0.2
    Theano:  0.9.0
    Tensorflow:  1.0.1


<br>
<h1 style=""text-align: center;"">If everything worked till down here, you're ready to start!</h1>
"
2343,"Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.","<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/README_1200x800.gif"">
</p>

<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/coversmall_alt.png"">
  <br/>
</p>

# data-science-ipython-notebooks

## Index

* [deep-learning](#deep-learning)
    * [tensorflow](#tensor-flow-tutorials)
    * [theano](#theano-tutorials)
    * [keras](#keras-tutorials)
    * [caffe](#deep-learning-misc)
* [scikit-learn](#scikit-learn)
* [statistical-inference-scipy](#statistical-inference-scipy)
* [pandas](#pandas)
* [matplotlib](#matplotlib)
* [numpy](#numpy)
* [python-data](#python-data)
* [kaggle-and-business-analyses](#kaggle-and-business-analyses)
* [spark](#spark)
* [mapreduce-python](#mapreduce-python)
* [amazon web services](#aws)
* [command lines](#commands)
* [misc](#misc)
* [notebook-installation](#notebook-installation)
* [credits](#credits)
* [contributing](#contributing)
* [contact-info](#contact-info)
* [license](#license)

<br/>
<p align=""center"">
  <img src=""http://i.imgur.com/ZhKXrKZ.png"">
</p>

## deep-learning

IPython Notebook(s) demonstrating deep learning functionality.

<br/>
<p align=""center"">
  <img src=""https://avatars0.githubusercontent.com/u/15658638?v=3&s=100"">
</p>

### tensor-flow-tutorials

Additional TensorFlow tutorials:

* [pkmital/tensorflow_tutorials](https://github.com/pkmital/tensorflow_tutorials)
* [nlintz/TensorFlow-Tutorials](https://github.com/nlintz/TensorFlow-Tutorials)
* [alrojo/tensorflow-tutorial](https://github.com/alrojo/tensorflow-tutorial)
* [BinRoot/TensorFlow-Book](https://github.com/BinRoot/TensorFlow-Book)
* [tuanavu/tensorflow-basic-tutorials](https://github.com/tuanavu/tensorflow-basic-tutorials)

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [tsf-basics](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/1_intro/basic_operations.ipynb) | Learn basic operations in TensorFlow, a library for various kinds of perceptual and language understanding tasks from Google. |
| [tsf-linear](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/linear_regression.ipynb) | Implement linear regression in TensorFlow. |
| [tsf-logistic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/logistic_regression.ipynb) | Implement logistic regression in TensorFlow. |
| [tsf-nn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/2_basic_classifiers/nearest_neighbor.ipynb) | Implement nearest neighboars in TensorFlow. |
| [tsf-alex](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/alexnet.ipynb) | Implement AlexNet in TensorFlow. |
| [tsf-cnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/convolutional_network.ipynb) | Implement convolutional neural networks in TensorFlow. |
| [tsf-mlp](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/multilayer_perceptron.ipynb) | Implement multilayer perceptrons in TensorFlow. |
| [tsf-rnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/3_neural_networks/recurrent_network.ipynb) | Implement recurrent neural networks in TensorFlow. |
| [tsf-gpu](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/4_multi_gpu/multigpu_basics.ipynb) | Learn about basic multi-GPU computation in TensorFlow. |
| [tsf-gviz](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/5_ui/graph_visualization.ipynb) | Learn about graph visualization in TensorFlow. |
| [tsf-lviz](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-examples/notebooks/5_ui/loss_visualization.ipynb) | Learn about loss visualization in TensorFlow. |

### tensor-flow-exercises

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [tsf-not-mnist](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/1_notmnist.ipynb) | Learn simple data curation by creating a pickle with formatted datasets for training, development and testing in TensorFlow. |
| [tsf-fully-connected](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/2_fullyconnected.ipynb) | Progressively train deeper and more accurate models using logistic regression and neural networks in TensorFlow. |
| [tsf-regularization](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/3_regularization.ipynb) | Explore regularization techniques by training fully connected networks to classify notMNIST characters in TensorFlow. |
| [tsf-convolutions](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/4_convolutions.ipynb) | Create convolutional neural networks in TensorFlow. |
| [tsf-word2vec](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/5_word2vec.ipynb) | Train a skip-gram model over Text8 data in TensorFlow. |
| [tsf-lstm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/tensor-flow-exercises/6_lstm.ipynb) | Train a LSTM character model over Text8 data in TensorFlow. |

<br/>
<p align=""center"">
  <img src=""http://www.deeplearning.net/software/theano/_static/theano_logo_allblue_200x46.png"">
</p>

### theano-tutorials

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [theano-intro](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/intro_theano/intro_theano.ipynb) | Intro to Theano, which allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It can use GPUs and perform efficient symbolic differentiation. |
| [theano-scan](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/scan_tutorial/scan_tutorial.ipynb) | Learn scans, a mechanism to perform loops in a Theano graph. |
| [theano-logistic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/intro_theano/logistic_regression.ipynb) | Implement logistic regression in Theano. |
| [theano-rnn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/rnn_tutorial/simple_rnn.ipynb) | Implement recurrent neural networks in Theano. |
| [theano-mlp](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/theano-tutorial/theano_mlp/theano_mlp.ipynb) | Implement multilayer perceptrons in Theano. |

<br/>
<p align=""center"">
  <img src=""http://i.imgur.com/L45Q8c2.jpg"">
</p>

### keras-tutorials

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| keras | Keras is an open source neural network library written in Python. It is capable of running on top of either Tensorflow or Theano. |
| [setup](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/0.%20Preamble.ipynb) | Learn about the tutorial goals and how to set up your Keras environment. |
| [intro-deep-learning-ann](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.1%20Introduction%20-%20Deep%20Learning%20and%20ANN.ipynb) | Get an intro to deep learning with Keras and Artificial Neural Networks (ANN). |
| [theano](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.2%20Introduction%20-%20Theano.ipynb) | Learn about Theano by working with weights matrices and gradients. |
| [keras-otto](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.3%20Introduction%20-%20Keras.ipynb) | Learn about Keras by looking at the Kaggle Otto challenge. |
| [ann-mnist](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/1.4%20%28Extra%29%20A%20Simple%20Implementation%20of%20ANN%20for%20MNIST.ipynb) | Review a simple implementation of ANN for MNIST using Keras. |
| [conv-nets](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.1%20Supervised%20Learning%20-%20ConvNets.ipynb) | Learn about Convolutional Neural Networks (CNNs) with Keras. |
| [conv-net-1](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.2.1%20Supervised%20Learning%20-%20ConvNet%20HandsOn%20Part%20I.ipynb) | Recognize handwritten digits from MNIST using Keras - Part 1. |
| [conv-net-2](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.2.2%20Supervised%20Learning%20-%20ConvNet%20HandsOn%20Part%20II.ipynb) | Recognize handwritten digits from MNIST using Keras - Part 2. |
| [keras-models](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/2.3%20Supervised%20Learning%20-%20Famous%20Models%20with%20Keras.ipynb) | Use pre-trained models such as VGG16, VGG19, ResNet50, and Inception v3 with Keras. |
| [auto-encoders](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.1%20Unsupervised%20Learning%20-%20AutoEncoders%20and%20Embeddings.ipynb) | Learn about Autoencoders with Keras. |
| [rnn-lstm](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.2%20RNN%20and%20LSTM.ipynb) | Learn about Recurrent Neural Networks (RNNs) with Keras. |
| [lstm-sentence-gen](https://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/keras-tutorial/3.3%20%28Extra%29%20LSTM%20for%20Sentence%20Generation.ipynb) |  Learn about RNNs using Long Short Term Memory (LSTM) networks with Keras. |

### deep-learning-misc

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [deep-dream](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/deep-learning/deep-dream/dream.ipynb) | Caffe-based computer vision program which uses a convolutional neural network to find and enhance patterns in images. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/scikitlearn.png"">
</p>

## scikit-learn

IPython Notebook(s) demonstrating scikit-learn functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [intro](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-intro.ipynb) | Intro notebook to scikit-learn.  Scikit-learn adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. |
| [knn](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-intro.ipynb#K-Nearest-Neighbors-Classifier) | Implement k-nearest neighbors in scikit-learn. |
| [linear-reg](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-linear-reg.ipynb) | Implement linear regression in scikit-learn. |
| [svm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-svm.ipynb) | Implement support vector machine classifiers with and without kernels in scikit-learn. |
| [random-forest](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-random-forest.ipynb) | Implement random forest classifiers and regressors in scikit-learn. |
| [k-means](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-k-means.ipynb) | Implement k-means clustering in scikit-learn. |
| [pca](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-pca.ipynb) | Implement principal component analysis in scikit-learn. |
| [gmm](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-gmm.ipynb) | Implement Gaussian mixture models in scikit-learn. |
| [validation](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scikit-learn/scikit-learn-validation.ipynb) | Implement validation and model selection in scikit-learn. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/scipy.png"">
</p>

## statistical-inference-scipy

IPython Notebook(s) demonstrating statistical inference with SciPy functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| scipy | SciPy is a collection of mathematical algorithms and convenience functions built on the Numpy extension of Python. It adds significant power to the interactive Python session by providing the user with high-level commands and classes for manipulating and visualizing data. |
| [effect-size](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/effect_size.ipynb) | Explore statistics that quantify effect size by analyzing the difference in height between men and women.  Uses data from the Behavioral Risk Factor Surveillance System (BRFSS) to estimate the mean and standard deviation of height for adult women and men in the United States. |
| [sampling](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/sampling.ipynb) | Explore random sampling by analyzing the average weight of men and women in the United States using BRFSS data. |
| [hypothesis](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/scipy/hypothesis.ipynb) | Explore hypothesis testing by analyzing the difference of first-born babies compared with others. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/pandas.png"">
</p>

## pandas

IPython Notebook(s) demonstrating pandas functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [pandas](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/pandas.ipynb) | Software library written for data manipulation and analysis in Python. Offers data structures and operations for manipulating numerical tables and time series. |
| [github-data-wrangling](https://github.com/donnemartin/viz/blob/master/githubstats/data_wrangling.ipynb) | Learn how to load, clean, merge, and feature engineer by analyzing GitHub data from the [`Viz`](https://github.com/donnemartin/viz) repo. |
| [Introduction-to-Pandas](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.00-Introduction-to-Pandas.ipynb) | Introduction to Pandas. |
| [Introducing-Pandas-Objects](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.01-Introducing-Pandas-Objects.ipynb) | Learn about Pandas objects. |
| [Data Indexing and Selection](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.02-Data-Indexing-and-Selection.ipynb) | Learn about data indexing and selection in Pandas. |
| [Operations-in-Pandas](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.03-Operations-in-Pandas.ipynb) | Learn about operating on data in Pandas. |
| [Missing-Values](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.04-Missing-Values.ipynb) | Learn about handling missing data in Pandas. |
| [Hierarchical-Indexing](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.05-Hierarchical-Indexing.ipynb) | Learn about hierarchical indexing in Pandas. |
| [Concat-And-Append](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.06-Concat-And-Append.ipynb) | Learn about combining datasets: concat and append in Pandas. |
| [Merge-and-Join](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.07-Merge-and-Join.ipynb) | Learn about combining datasets: merge and join in Pandas. |
| [Aggregation-and-Grouping](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.08-Aggregation-and-Grouping.ipynb) | Learn about aggregation and grouping in Pandas. |
| [Pivot-Tables](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.09-Pivot-Tables.ipynb) | Learn about pivot tables in Pandas. |
| [Working-With-Strings](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.10-Working-With-Strings.ipynb) | Learn about vectorized string operations in Pandas. |
| [Working-with-Time-Series](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.11-Working-with-Time-Series.ipynb) | Learn about working with time series in pandas. |
| [Performance-Eval-and-Query](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/pandas/03.12-Performance-Eval-and-Query.ipynb) | Learn about high-performance Pandas: eval() and query() in Pandas. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/matplotlib.png"">
</p>

## matplotlib

IPython Notebook(s) demonstrating matplotlib functionality.

| Notebook | Description |
|-----------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| [matplotlib](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/matplotlib.ipynb) | Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. |
| [matplotlib-applied](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/matplotlib-applied.ipynb) | Apply matplotlib visualizations to Kaggle competitions for exploratory data analysis.  Learn how to create bar plots, histograms, subplot2grid, normalized plots, scatter plots, subplots, and kernel density estimation plots. |
| [Introduction-To-Matplotlib](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.00-Introduction-To-Matplotlib.ipynb) | Introduction to Matplotlib. |
| [Simple-Line-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.01-Simple-Line-Plots.ipynb) | Learn about simple line plots in Matplotlib. |
| [Simple-Scatter-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.02-Simple-Scatter-Plots.ipynb) | Learn about simple scatter plots in Matplotlib. |
| [Errorbars.ipynb](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.03-Errorbars.ipynb) | Learn about visualizing errors in Matplotlib. |
| [Density-and-Contour-Plots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.04-Density-and-Contour-Plots.ipynb) | Learn about density and contour plots in Matplotlib. |
| [Histograms-and-Binnings](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.05-Histograms-and-Binnings.ipynb) | Learn about histograms, binnings, and density in Matplotlib. |
| [Customizing-Legends](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.06-Customizing-Legends.ipynb) | Learn about customizing plot legends in Matplotlib. |
| [Customizing-Colorbars](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.07-Customizing-Colorbars.ipynb) | Learn about customizing colorbars in Matplotlib. |
| [Multiple-Subplots](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.08-Multiple-Subplots.ipynb) | Learn about multiple subplots in Matplotlib. |
| [Text-and-Annotation](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.09-Text-and-Annotation.ipynb) | Learn about text and annotation in Matplotlib. |
| [Customizing-Ticks](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.10-Customizing-Ticks.ipynb) | Learn about customizing ticks in Matplotlib. |
| [Settings-and-Stylesheets](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.11-Settings-and-Stylesheets.ipynb) | Learn about customizing Matplotlib: configurations and stylesheets. |
| [Three-Dimensional-Plotting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.12-Three-Dimensional-Plotting.ipynb) | Learn about three-dimensional plotting in Matplotlib. |
| [Geographic-Data-With-Basemap](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.13-Geographic-Data-With-Basemap.ipynb) | Learn about geographic data with basemap in Matplotlib. |
| [Visualization-With-Seaborn](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/matplotlib/04.14-Visualization-With-Seaborn.ipynb) | Learn about visualization with Seaborn. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/numpy.png"">
</p>

## numpy

IPython Notebook(s) demonstrating NumPy functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [numpy](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/numpy.ipynb) | Adds Python support for large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. |
| [Introduction-to-NumPy](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.00-Introduction-to-NumPy.ipynb) | Introduction to NumPy. |
| [Understanding-Data-Types](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.01-Understanding-Data-Types.ipynb) | Learn about data types in Python. |
| [The-Basics-Of-NumPy-Arrays](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.02-The-Basics-Of-NumPy-Arrays.ipynb) | Learn about the basics of NumPy arrays. |
| [Computation-on-arrays-ufuncs](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.03-Computation-on-arrays-ufuncs.ipynb) | Learn about computations on NumPy arrays: universal functions. |
| [Computation-on-arrays-aggregates](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.04-Computation-on-arrays-aggregates.ipynb) | Learn about aggregations: min, max, and everything in between in NumPy. |
| [Computation-on-arrays-broadcasting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.05-Computation-on-arrays-broadcasting.ipynb) | Learn about computation on arrays: broadcasting in NumPy. |
| [Boolean-Arrays-and-Masks](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.06-Boolean-Arrays-and-Masks.ipynb) | Learn about comparisons, masks, and boolean logic in NumPy. |
| [Fancy-Indexing](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.07-Fancy-Indexing.ipynb) | Learn about fancy indexing in NumPy. |
| [Sorting](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.08-Sorting.ipynb) | Learn about sorting arrays in NumPy. |
| [Structured-Data-NumPy](http://nbviewer.jupyter.org/github/donnemartin/data-science-ipython-notebooks/blob/master/numpy/02.09-Structured-Data-NumPy.ipynb) | Learn about structured data: NumPy's structured arrays. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/python.png"">
</p>

## python-data

IPython Notebook(s) demonstrating Python functionality geared towards data analysis.

| Notebook | Description |
|-----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|
| [data structures](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/structs.ipynb) | Learn Python basics with tuples, lists, dicts, sets. |
| [data structure utilities](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/structs_utils.ipynb) | Learn Python operations such as slice, range, xrange, bisect, sort, sorted, reversed, enumerate, zip, list comprehensions. |
| [functions](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/functions.ipynb) | Learn about more advanced Python features: Functions as objects, lambda functions, closures, *args, **kwargs currying, generators, generator expressions, itertools. |
| [datetime](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/datetime.ipynb) | Learn how to work with Python dates and times: datetime, strftime, strptime, timedelta. |
| [logging](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/logs.ipynb) | Learn about Python logging with RotatingFileHandler and TimedRotatingFileHandler. |
| [pdb](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/pdb.ipynb) | Learn how to debug in Python with the interactive source code debugger. |
| [unit tests](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/python-data/unit_tests.ipynb) | Learn how to test in Python with Nose unit tests. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/kaggle.png"">
</p>

## kaggle-and-business-analyses

IPython Notebook(s) used in [kaggle](https://www.kaggle.com/) competitions and business analyses.

| Notebook | Description |
|-------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|
| [titanic](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/kaggle/titanic.ipynb) | Predict survival on the Titanic.  Learn data cleaning, exploratory data analysis, and machine learning. |
| [churn-analysis](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/analyses/churn.ipynb) | Predict customer churn.  Exercise logistic regression, gradient boosting classifers, support vector machines, random forests, and k-nearest-neighbors.  Includes discussions of confusion matrices, ROC plots, feature importances, prediction probabilities, and calibration/descrimination.|

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/spark.png"">
</p>

## spark

IPython Notebook(s) demonstrating spark and HDFS functionality.

| Notebook | Description |
|--------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|
| [spark](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/spark/spark.ipynb) | In-memory cluster computing framework, up to 100 times faster for certain applications and is well suited for machine learning algorithms. |
| [hdfs](http://nbviewer.ipython.org/github/donnemartin/data-science-ipython-notebooks/blob/master/spark/hdfs.ipynb) | Reliably stores very large files across machines in a large cluster. |

<br/>
<p align=""center"">
  <img src=""https://raw.githubusercontent.com/donnemartin/data-science-ipython-notebooks/master/images/mrjob.png"">
</p>

## mapreduce-python

IPython Notebook(s) demonstrating Hadoop MapReduce with mrjob functionality.

| Notebook | Description |
|-----------------------------------------------------------------------------------------------------"
3291,"The book documenting the curl project, the curl tool, libcurl and more. Simply put: everything curl.","# Introduction

*Everything curl* is an extensive guide for all things curl. The project, the
command-line tool, the library, how everything started and how it came to be
the useful tool it is today. It explains how we work on developing it further,
what it takes to use it, how you can contribute with code or bug reports and
why millions of existing users use it.

This book is meant to be interesting and useful to both casual readers and
somewhat more experienced developers. It offers something for everyone to pick
and choose from. 

Do not try to read it from front to back. Read the chapters or content you are
curious about and flip back and forth as you see fit.

I hope to run this book project as I do all other projects I work on: in the
open, completely free to download and read. I want it to be free for anyone to
comment on, and available for everyone to contribute to and help out with.

Send your bug reports, pull requests or critiques to me and I will improve
this book accordingly.

This book will never be finished. I intend to keep working on it. While I
may at some point consider it fairly complete, covering most aspects of the
project (even if only that seems like an insurmountable goal), the curl
project will continue to move so there will always be things to update in the
book as well.

This book project started at the end of September 2015.

## Site

[https://everything.curl.dev](https://everything.curl.dev) is the home of this
book. It features accessible links to read the book online in a web version,
or download a PDF version for offline reading. Unfortunately, the previously
provided ebook formats are no longer provided by gitbook.com that we use to
produce the book.

(The ""export PDF"" option menu is only visible if the used web browser is wide
enough.)

## Content

All book content is hosted on GitHub in the
[https://github.com/bagder/everything-curl](https://github.com/bagder/everything-curl)
repository.

## Author

With the hope of becoming just a co-author of this material, I am Daniel
Stenberg. I founded the curl project and I am a developer at heart—for fun and
profit. I live and work in Stockholm, Sweden.

All there is to know about Daniel can be found on [daniel.haxx.se](https://daniel.haxx.se/).

## Contribute

If you find mistakes, omissions, errors or blatant lies in this document,
please send us a refreshed version of the affected paragraph and we will amend
and update. We give credits to and recognize everyone who helps out!

Preferably, you could submit
[errors](https://github.com/bagder/everything-curl/issues) or [pull
requests](https://github.com/bagder/everything-curl/pulls) on the book's
GitHub page.

## Contributors

Lots of people have reported bugs, improved sections or otherwise helped
making this book the success it is. These friends include the following:

AaronChen0 on github,
alawvt on github,
Amin Khoshnood,
amnkh on github,
Anders Roxell,
Angad Gill,
Aris (Karim) Merchant,
auktis on github,
Ben Bodenmiller
Ben Peachey,
bookofportals on github,
Bruno Baguette,
Carlton Gibson,
Chris DeLuca,
Citizen Esosa,
Dan Fandrich,
Daniel Brown,
Daniel Sabsay,
David Piano,
DrDoom74 at GitHub,
Emil Hessman,
enachos71 on github,
ethomag on github,
Fabian Keil,
faterer on github,
Frank Dana,
Frank Hassanabad,
Gautham B A,
Geir Hauge,
Harry Wright,
Helena Udd,
Hubert Lin,
i-ky on github,
infinnovation-dev on GitHub,
Jay Ottinger,
Jay Satiro,
Jeroen Ooms,
Johan Wigert,
John Simpson,
JohnCoconut on github,
Jonas Forsberg,
Josh Vanderhook,
JoyIfBam5,
KJM on github,
knorr3 on github,
lowttl on github,
Luca Niccoli,
Manuel on github,
Marius Žilėnas,
Mark Koester,
Martin van den Nieuwelaar,
mehandes on github,
Michael Kaufmann,
Ms2ger,
Nick Travers,
Nicolas Brassard,
Oscar on github,
Oskar Köök,
Patrik Lundin,
RekGRpth on github,
Ryan McQuen,
Saravanan Musuwathi Kesavan,
Senthil Kumaran,
Shusen Liu,
Sonia Hamilton,
Spiros Georgaras,
Stephen,
Steve Holme,
Stian Hvatum,
strupo on github,
Viktor Szakats,
Vitaliy T,
Wayne Lai,
Wieland Hoffmann,
谭九鼎

## License

This document is licensed under the [Creative Commons Attribution 4.0
license](https://creativecommons.org/licenses/by/4.0/).
"
0,LLVM-based compiler for the Nim language,"# Introduction

[nlvm](https://github.com/arnetheduck/nlvm) (the nim-level virtual machine?)
is an [LLVM-based](http://llvm.org) compiler for the [Nim](http://nim-lang.org)
language.

From Nim's point of view, it's a backend just like C or JavaScript - from
LLVM's point of view, it's a language frontend that emits IR.

When I started on this little project, I knew neither llvm nor Nim.
Therefore, I'd specially like to thank the friendly folks at the #nim
channel that never seemed to tire of my nooby questions.
Also, thanks to all tutorial writers out there, on llvm, programming
and other topics for providing such fine sources of copy-pa... er,
inspiration!

Questions, patches, improvement suggestions and reviews welcome. When
you find bugs, feel free to fix them as well :)

Fork and enjoy!

Jacek Sieka (arnetheduck on gmail point com)

# Status

`nlvm` is generally at par with `nim` in terms of features, with the following
notable differences:

* Fast compile times - no intermediate `C` compiler step
* DWARF (""zero-cost"") exception handling
* High-quality `gdb`/`lldb` debug information with source stepping, type
  information etc
* Smart code generation - compiler intrinsics for overflow checking,
  smart constant initialization, etc
* Native `wasm32` support with no extra tooling

Most things from `nim` work just fine (see notes below however!):

* the same standard library is used
* similar command line options are supported (just change `nim` to `nlvm`!)
* `importc` works without needing `C` header files - the declaration in the
  `.nim` file needs to be accurate

Test coverage is not too bad either:

* bootstrapping and compiling itself
* ~95% of all upstream tests - most failures can be traced to
  the standard library and compiler relying on C implementation details - see
  [skipped-tests.txt](skipped-tests.txt) for an updated list of issues
* compiling most applications
* platforms: linux/x86_64, wasm32 (pre-alpha!)
* majority of the nim standard library (the rest can be fixed easily -
  requires upstream changes however)

How you could contribute:

* work on making [skipped-tests.txt](skipped-tests.txt) smaller
* improve platform support (`osx` and `windows` should be easy, `arm` would be
  nice)
* help `nlvm` generate better IR - optimizations, builtins, exception handling..
* help upstream make std library smaller and more `nlvm`-compatible
* send me success stories :)
* leave the computer for a bit and do something real for your fellow earthlings

`nlvm` does _not_:

* understand `C` - as a consequence, `header`, `emit` and similar pragmas
  will not work - neither will the fancy `importcpp`/`C++` features
* support all nim compiler flags and features - do file bugs for anything
  useful that's missing

# Compile instructions

To do what I do, you will need:
* Linux
* A C/C++ compiler (ironically, I happen to use `gcc` most of the time)

Start with a clone:

    cd $SRC
    git clone https://github.com/arnetheduck/nlvm.git
    cd nlvm && git submodule update --init

We will need a few development libraries installed, mainly due to how `nlvm`
processes library dependencies (see dynlib section below):

    # Fedora
    sudo dnf install pcre-devel openssl-devel sqlite-devel ninja-build cmake

    # Debian, ubuntu etc
    sudo apt-get install libpcre3-dev libssl-dev libsqlite3-dev ninja-build cmake

Compile `nlvm` (if needed, this will also build `nim` and `llvm`):

    make

Compile with itself and compare:

    make compare

Run test suite:

    make test
    make stats

You can link statically to LLVM to create a stand-alone binary - this will
use a more optimized version of LLVM as well, but takes longer to build:

    make STATIC_LLVM=1

If you want a faster `nlvm`, you can also try the release build - it will be
called `nlvmr`:

    make STATIC_LLVM=1 nlvmr

When you update `nlvm` from `git`, don't forget the submodule:

    git pull && git submodule update

To build a docker image, use:

    make docker

To run built `nlvm` docker image use:

    docker run -v $(pwd):/code/ nlvm c -r /code/test.nim

# Compiling your code

On the command line, `nlvm` is mostly compatible with `nim`.

When compiling, `nlvm` will generate a single `.o` file with all code from your
project and link it using `$CC` - this helps it pick the right flags for
linking with the C library.

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c fizzbuzz

If you want to see the generated LLVM IR, use the `-c` option:

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c -c fizzbuzz
    less fizzbuzz.ll

You can then run the LLVM optimizer on it:

    opt -Os fizzbuzz.ll | llvm-dis

... or compile it to assembly (`.s`):

    llc fizzbuzz.ll
    less fizzbuzz.s

Apart from the code of your `.nim` files, the compiler will also mix in the
compatibility found library in `nlvm-lib/`.

## Pipeline

Generally, the `nim` compiler pipeline looks something like this:

    nim --> c files --> IR --> object files --> executable

In `nlvm`, we remove one step and bunch all the code together:

    nim --> IR --> single object file --> executable

Going straight to the IR means it's possible to express nim constructs more
clearly, allowing `llvm` to understand the code better and thus do a better
job at optimization. It also helps keep compile times down, because the
`c-to-IR` step can be avoided.

The practical effect of generating a single object file is similar to
`gcc -fwhole-program -flto` - it is expensive in terms of memory, but results
in slightly smaller and faster binaries. Notably, the `IR-to-machine-code` step,
including any optimizations, is repeated in full for each recompile.

## Common issues

### dynlib

`nim` uses a runtime dynamic library loading scheme to gain access to shared
libraries. When compiling, no linking is done - instead, when running your
application, `nim` will try to open anything the user has installed.

`nlvm` does not support the `{.dynlib.}` pragma - instead you can use
`{.passL.}` using normal system linking.

```nim
# works with `nim`
proc f() {. importc, dynlib: ""mylib"" .}

# works with both `nim` and `nlvm`
{.passL: ""-lmylib"".}
proc f() {. importc .}
```

### header and emit

When `nim` compiles code, it will generate `c` code which may include other
`c` code, from headers or directly via `emit` statements. This means `nim` has
direct access do symbols declared in the `c` file, which can be both a feature
and a problem.

In `nlvm`, `{.header.}` directives are ignored - `nlvm` looks strictly at
the signature of the declaration, meaning the declaration must _exactly_ match
the `c` header file or subtly ABI issues and crashes ensue!

```nim

# When `nim` encounters this, it will emit `jmp_buf` in the `c` code without
# knowing the true size of the type, letting the `c` compiler determine it
# instead.
type C_JmpBuf {.importc: ""jmp_buf"", header: ""<setjmp.h>"".} = object

# nlvm instead ignores the `header` directive completely and will use the
# declaration as written. Failure to correctly declare the type will result
# in crashes and subtle bugs - memory will be overwritten or fields will be
# read from the wrong offsets.
#
# The following works with both `nim` and `nlvm`, but requires you to be
# careful to match the binary size and layout exactly (note how `bycopy`
# sometimes help to further nail down the ABI):

when defined(linux) and defined(amd64):
  type
    C_JmpBuf {.importc: ""jmp_buf"", bycopy.} = object
      abi: array[200 div sizeof(clong), clong]

# In `nim`, `C` constant defines are often imported using the following trick,
# which makes `nim` emit the right `C` code that the value from the header
# can be read (no writing of course, even though it's a `var`!)
#
# assuming a c header with: `#define RTLD_NOW 2`
# works for nim:
var RTLD_NOW* {.importc: ""RTLD_NOW"", header: ""<dlfcn.h>"".}: cint

# both nlvm and nim (note how these values often can be platform-specific):
when defined(linux) and defined(amd64):
  const RTLD_NOW* = cint(2)

```

### wasm32 support

`wasm32` support is still very bare-bones, so you will need to do a bit of
tinkering to get it to work.

Presently, the `wasm32-unknown-unknown` target is mapped to `--os:standalone`
and `--cpu:wasm32` - this choice represents a very raw `wasm` engine with 32-bit
little-endian integers and pointers - in the future, the `nim` standard library
and `system.nim` will need to be updated to support WASM system interfaces like
emscripten or WASI.

To compile wasm files, you will thus need a `panicoverride.nim` - a minimal
example looks like this and discards any errors:

```nim
# panicoverride.nim
proc rawoutput(s: string) = discard
proc panic(s: string) {.noreturn.} = discard
```

After placing the above code in your project folder, you can compile `.nim`
code to `wasm32`:

```nim
# myfile.nim
proc adder*(v: int): int {.exportc.} =
  v + 4
```

```sh
nlvm c --cpu:wasm32 --os:standalone --gc:none --passl:--no-entry myfile.nim
wasm2wat -l myfile.wasm
```

# Random notes

* Upstream is pinned using a submodule - nlvm relies heavily on internals
  that keep changing - it's unlikely that it works with any other versions,
  patches welcome to update it
* The nim standard library likes to import C headers directly which works
  because the upstream nim compiler uses a C compiler underneath - ergo,
  large parts of the standard library don't work with nlvm.
* Happy to take patches for anything, including better platform support!
* For development, it's convenient to build LLVM with assertions turned on -
  the API is pretty unforgiving
"
11,Vim-fork focused on extensibility and usability,"<h1 align=""center"">
  <img src=""https://raw.githubusercontent.com/neovim/neovim.github.io/master/logos/neovim-logo-300x87.png"" alt=""Neovim"">

  <a href=""https://neovim.io/doc/"">Documentation</a> |
  <a href=""https://app.element.io/#/room/#neovim:matrix.org"">Chat</a>
</h1>

[![GitHub CI](https://github.com/neovim/neovim/actions/workflows/ci.yml/badge.svg?event=push&branch=master)](https://github.com/neovim/neovim/actions?query=workflow%3ACI+branch%3Amaster+event%3Apush)
[![Coverity Scan analysis](https://scan.coverity.com/projects/2227/badge.svg)](https://scan.coverity.com/projects/2227)
[![Clang analysis](https://neovim.io/doc/reports/clang/badge.svg)](https://neovim.io/doc/reports/clang)
[![PVS-Studio analysis](https://neovim.io/doc/reports/pvs/badge.svg)](https://neovim.io/doc/reports/pvs/PVS-studio.html.d)
[![Packages](https://repology.org/badge/tiny-repos/neovim.svg)](https://repology.org/metapackage/neovim)
[![Debian CI](https://badges.debian.net/badges/debian/testing/neovim/version.svg)](https://buildd.debian.org/neovim)
[![Downloads](https://img.shields.io/github/downloads/neovim/neovim/total.svg?maxAge=2592001)](https://github.com/neovim/neovim/releases/)

Neovim is a project that seeks to aggressively refactor [Vim](https://www.vim.org/) in order to:

- Simplify maintenance and encourage [contributions](CONTRIBUTING.md)
- Split the work between multiple developers
- Enable [advanced UIs] without modifications to the core
- Maximize [extensibility](https://github.com/neovim/neovim/wiki/Plugin-UI-architecture)

See the [Introduction](https://github.com/neovim/neovim/wiki/Introduction) wiki page and [Roadmap]
for more information.

Features
--------

- Modern [GUIs](https://github.com/neovim/neovim/wiki/Related-projects#gui)
- [API access](https://github.com/neovim/neovim/wiki/Related-projects#api-clients)
  from any language including C/C++, C#, Clojure, D, Elixir, Go, Haskell, Java/Kotlin,
  JavaScript/Node.js, Julia, Lisp, Lua, Perl, Python, Racket, Ruby, Rust
- Embedded, scriptable [terminal emulator](https://neovim.io/doc/user/nvim_terminal_emulator.html)
- Asynchronous [job control](https://github.com/neovim/neovim/pull/2247)
- [Shared data (shada)](https://github.com/neovim/neovim/pull/2506) among multiple editor instances
- [XDG base directories](https://github.com/neovim/neovim/pull/3470) support
- Compatible with most Vim plugins, including Ruby and Python plugins

See [`:help nvim-features`][nvim-features] for the full list, and [`:help news`][nvim-news] for noteworthy changes in the latest version!

Install from package
--------------------

Pre-built packages for Windows, macOS, and Linux are found on the
[Releases](https://github.com/neovim/neovim/releases/) page.

[Managed packages] are in [Homebrew], [Debian], [Ubuntu], [Fedora], [Arch Linux], [Void Linux], [Gentoo], and more!

Install from source
-------------------

See the [Building Neovim](https://github.com/neovim/neovim/wiki/Building-Neovim) wiki page and [supported platforms](https://neovim.io/doc/user/support.html#supported-platforms) for details.

The build is CMake-based, but a Makefile is provided as a convenience.
After installing the dependencies, run the following command.

    make CMAKE_BUILD_TYPE=RelWithDebInfo
    sudo make install

To install to a non-default location:

    make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=/full/path/
    make install

CMake hints for inspecting the build:

- `cmake --build build --target help` lists all build targets.
- `build/CMakeCache.txt` (or `cmake -LAH build/`) contains the resolved values of all CMake variables.
- `build/compile_commands.json` shows the full compiler invocations for each translation unit.

Transitioning from Vim
--------------------

See [`:help nvim-from-vim`](https://neovim.io/doc/user/nvim.html#nvim-from-vim) for instructions.

Project layout
--------------

    ├─ ci/              build automation
    ├─ cmake/           CMake utils
    ├─ cmake.config/    CMake defines
    ├─ cmake.deps/      subproject to fetch and build dependencies (optional)
    ├─ runtime/         plugins and docs
    ├─ src/nvim/        application source code (see src/nvim/README.md)
    │  ├─ api/          API subsystem
    │  ├─ eval/         VimL subsystem
    │  ├─ event/        event-loop subsystem
    │  ├─ generators/   code generation (pre-compilation)
    │  ├─ lib/          generic data structures
    │  ├─ lua/          Lua subsystem
    │  ├─ msgpack_rpc/  RPC subsystem
    │  ├─ os/           low-level platform code
    │  └─ tui/          built-in UI
    └─ test/            tests (see test/README.md)

License
-------

Neovim contributions since [b17d96][license-commit] are licensed under the
Apache 2.0 license, except for contributions copied from Vim (identified by the
`vim-patch` token). See LICENSE for details.

    Vim is Charityware.  You can use and copy it as much as you like, but you are
    encouraged to make a donation for needy children in Uganda.  Please see the
    kcc section of the vim docs or visit the ICCF web site, available at these URLs:

            https://iccf-holland.org/
            https://www.vim.org/iccf/
            https://www.iccf.nl/

    You can also sponsor the development of Vim.  Vim sponsors can vote for
    features.  The money goes to Uganda anyway.

[license-commit]: https://github.com/neovim/neovim/commit/b17d9691a24099c9210289f16afb1a498a89d803
[nvim-features]: https://neovim.io/doc/user/vim_diff.html#nvim-features
[nvim-news]: https://neovim.io/doc/user/news.html
[Roadmap]: https://neovim.io/roadmap/
[advanced UIs]: https://github.com/neovim/neovim/wiki/Related-projects#gui
[Managed packages]: https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-package
[Debian]: https://packages.debian.org/testing/neovim
[Ubuntu]: https://packages.ubuntu.com/search?keywords=neovim
[Fedora]: https://packages.fedoraproject.org/pkgs/neovim/neovim/
[Arch Linux]: https://www.archlinux.org/packages/?q=neovim
[Void Linux]: https://voidlinux.org/packages/?arch=x86_64&q=neovim
[Gentoo]: https://packages.gentoo.org/packages/app-editors/neovim
[Homebrew]: https://formulae.brew.sh/formula/neovim

<!-- vim: set tw=80: -->
"
1923,":computer: KiTTY, a free telnet/ssh client for Windows","# Welcome to the KiTTY introduction web site

<p style=""text-align: center;"">
All KiTTY documentation is available on the official website<br/>
https://www.9bis.com/kitty/
</p>

## What is KiTTY ?
KiTTY is a fork from version 0.76 of **PuTTY**, the best telnet / SSH client in the world.
KiTTY is only designed for the Microsoft(c) Windows(c) platform. For more information about the original software, or pre-compiled binaries on other systems, you can go to the [Simon Tatham PuTTY page](http://www.chiark.greenend.org.uk/~sgtatham/putty/ ""PuTTY"").

KiTTY has all the features from the original software, and adds many others as described below:

### The very first requested features
* Sessions filter
* Portability
* Shortcuts for pre-defined command
* The session launcher
* Automatic logon script
* Automatic logon script with the RuTTY patch
* URL hyperlinks

### Technical features
* Automatic password
* Automatic command
* Running a locally saved script on a remote session

### Graphical features
* An icon for each session
* Send to tray
* Transparency
* Protection against unfortunate keyboard input
* Roll-up
* Always visible
* Quick start of a duplicate session
* Enhanced Configuration Box

### Other features
* Automatic saving
* SSH Handler: Internet Explorer integration
* pscp.exe and WinSCP integration
* Binary compression
* Clipboard printing
* Cygwin and cmd.exe integration
* File association
* Other settings
* New command-line options

### Bonus
* A light chat server is hidden in KiTTY
* A hidden text editor is integrated into KiTTY

## Official download page

KiTTY is available at our main CDN: [Fosshub](https://www.fosshub.com/KiTTY.html).

## How to compile
Inside your MSYS & MinGW32 environment jump into the x.yy_My_PuTTY\windows directory then run the command:

    make -f MAKEFILE.MINGW putty.exe

### How to install the MSYS/MinGW32 environment
Simple guide to setup the compile environment:

- Download the `mingw-builds-install.exe` from https://sourceforge.net/projects/mingwbuilds/files/host-windows/releases/4.8.0/32-bit/
- Execute the installer and select the **GUI**.
- After installing it, only the ""packager manager"" it's in fact installed, so execute `$MinGW\libexec\mingw-get\guimain.exe` and select in the Basic Setup the packages: **""mingwg-developer-tools"", ""mingw32-base"", ""mingw32-gcc-g++"" and ""msys-base""**.
- When all is installed, to open the SHELL execute `$MinGW\msys\1.0\msys.bat`. Then from from this shell you can compile. Example: `cd $KiTTY_DIR/0.74_My_PuTTY/windows` and `make -f MAKEFILE.MINGW 9bis`.

Original website is [https://www.9bis.com/kitty/](https://www.9bis.com/kitty/ ""KiTTY website"").
"
2697,Cross-platform automation framework for all kinds of your apps built on top of W3C WebDriver protocol,"## Appium

[![NPM version](https://badge.fury.io/js/appium.svg)](https://npmjs.org/package/appium)
[![Monthly Downloads](https://img.shields.io/npm/dm/appium.svg)](https://npmjs.org/package/appium)

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=shield)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_shield)

[![StandWithUkraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://github.com/vshymanskyy/StandWithUkraine/)

[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://vshymanskyy.github.io/StandWithUkraine/)

Appium is an open-source, cross-platform test automation tool for native,
hybrid, mobile web and desktop apps. Initially created to automate iOS and Android mobile
applications Appium has grown to a full-featured platform that provides [WebDriver](https://www.w3.org/TR/webdriver/)-based automation possibilities for the whole set of different mobile and desktop platforms.
See [Drivers Maintained By The Appium Team](#drivers-maintained-by-the-appium-team)
and [Drivers Provided By Third Parties](#drivers-provided-by-third-parties) sections below for more details.

:bangbang: Major documentation revision in progress

:bangbang: Appium core team does not maintain Appium 1.x anymore since the 1st of January 2022. All recent versions of officially supported platform drivers are not compatible to Appium 1.x anymore, and require Appium 2 to run. [Please read the migration guide from 1.x to 2.0](https://appium.github.io/appium/docs/en/latest/guides/migrating-1-to-2/) to manage the Appium server.

Appium is in the final stages of a major revision (to version 2.0). As such, the documentation
found around the web may not be correct. The current Appium 2.0 documentation is very much in
progress. Currently, it can be found [here](https://appium.github.io/appium/docs/en/latest/).

### Requirements

- macOS, Linux or Windows operating system
- Node.js 14+
- NPM (Node Package Manager) 8+

These are only server requirements. Each driver might have its own requirements. Consider checking the corresponding driver tutorial for more details.

### Server

To install Appium 2 server using Node Package Manager (npm) run the following command:

```bash
npm install -g appium@next
```

:bangbang: Running `npm install -g appium` would still install Appium 1 because version 2 is in its late beta stage.

### Drivers

Appium supports app automation across a variety of platforms, like iOS,
Android, and Windows. Each platform is supported by one or more ""drivers"",
which know how to automate that particular platform. Since version 2.0
all drivers have been isolated from the Appium server app and can
be managed independently using the [appium driver](https://appiumpro.com/editions/122-installing-appium-20-and-the-driver-and-plugins-cli) command line interface.

In general, the drivers management in Appium 2 is as simple as:

```bash
# To install a new driver from npm
appium driver install --source=npm appium-xcuitest-driver[@<version>]
# To install a driver from a local folder (useful for developers)
appium driver install --source=local /Users/me/sources/appium-xcuitest-driver
# To install a new driver from github (hm, maybe it's time to publish it to NPM?)
appium driver install --source=github appium/appium-xcuitest-driver

# To list already installed drivers
appium driver list --installed

# To update a driver (it must be already installed)
appium driver update xcuitest

# To uninstall a driver (it won't last forever, wouldn't it?)
appium driver uninstall xcuitest
```

You can find a full list of
[officially-supported](https://appium.github.io/appium/docs/en/latest/ecosystem/#drivers) and
[third-party](https://appium.github.io/appium/docs/en/latest/ecosystem/#other-drivers) drivers at
the current Appium 2.0 documentation.

### Plugins

The concept of plugins is something new that has been added exclusively to Appium2. Plugins allow you to extend server functionality without changing the server code. Plugins could be managed similarly to drivers:

```bash
# To install an officially supported plugin
appium plugin install images
# To install a plugin from a local folder (useful for developers)
appium plugin install --source=local /Users/me/sources/images
# To install a new plugin from npm
appium plugin install --source=npm appium-device-farm

# To list already installed plugins
appium plugin list --installed

# To update a plugins (it must be already installed)
appium plugin update appium-device-farm

# To uninstall a plugin
appium plugin uninstall appium-device-farm
```

The main difference between drivers and plugins is that the latter must be explicitly enabled on server startup after it was installed (drivers are enabled by default after installation):

```bash
appium server --use-plugins=device-farm,images
```

You can find a full list of
[officially-supported](https://appium.github.io/appium/docs/en/latest/ecosystem/#plugins) and
[third-party](https://appium.github.io/appium/docs/en/latest/ecosystem/#other-plugins) plugins at
the current Appium 2.0 documentation.


### Server Command Line Interface

In order to start sending commands to Appium over the wire it must be listening
on the URL where your client library expects it to listen.
Use the following commands to run and configure Appium server:

```bash
# Start the server on the default port and host (e.g. http://0.0.0.0:4723/)
appium server
# Start the server on the given port, host and use the base path prefix (the default prefix is /)
appium server -p 9000 -a 127.0.0.1 -pa /wd/hub

# Get the list of all supported command line parameters.
# This list would also include descriptions of driver-specific
# command line arguments for all installed drivers.
# Each driver and plugin must have their command line arguments
# exposed in a special JSON schema declared as a part of the corresponding
# package.json file.
appium server --help
```

Appium supports execution of parallel server processes as well as parallel driver sessions within
single server process. Refer the corresponding driver documentations regarding which mode is optimal
for the particular driver or whether it supports parallel sessions.

### Why Appium?

1. You usually don't have to recompile your app or modify it in any way, due
   to the use of standard automation APIs on all platforms.
2. You can write tests with your favorite dev tools using any
   [WebDriver](https://w3c.github.io/webdriver/webdriver-spec.html)-compatible
   language such as [Java](https://github.com/appium/java-client),
   [JavaScript](https://webdriver.io/), [Python](https://github.com/appium/python-client),
   [Ruby](https://github.com/appium/ruby_lib), [C#](https://github.com/appium/dotnet-client)
   with the Selenium WebDriver API. There are also various third party
   client implementations for other languages.
3. You can use any testing framework.
4. Some drivers, like xcuitest and uiautomator2 ones have built-in mobile web and
   hybrid app support. Within the same script, you can switch seamlessly between native
   app automation and webview automation, all using the WebDriver model that's already
   the standard for web automation.
5. You can run your automated tests locally and in a cloud. There are multiple
   cloud providers that support various Appium drivers (mostly
   targeting iOS and Android mobile automation).
6. [Appium Inspector](https://github.com/appium/appium-inspector) allows
   visual debugging of automated tests and could be extremely useful for
   beginners.

Investing in the
[WebDriver](https://w3c.github.io/webdriver/webdriver-spec.html) protocol means
you are betting on a single, free, and open protocol for testing that has become
a web standard. Don't lock yourself into a proprietary stack.

For example, if you use Apple's XCUITest library without Appium you can only
write tests using Obj-C/Swift, and you can only run tests through Xcode.
Similarly, with Google's UiAutomator or Espresso, you can only write tests in
Java/Kotlin. Appium opens up the possibility of true cross-platform native app
automation, for mobile and beyond. Finally!

If you're new to Appium or want a more comprehensive description of what this is all
about, please read our [Introduction to Appium Concepts](/docs/en/about-appium/intro.md).

### Quickstart

Check out our [Quickstart](https://appium.github.io/appium/docs/en/latest/quickstart/) guide
to get going with Appium.

There is also a sample code that contains [many examples of tests in a variety
of different languages](https://github.com/appium/appium/tree/1.x/sample-code)!

### Documentation

For prettily-rendered docs, please visit [Appium Documentation](https://appium.github.io/appium).
You can always find the full list of Appium doc pages at [Appium's GitHub
Repo](https://github.com/appium/appium/tree/master/packages/appium/docs) as well.

### Contributing

Please take a look at our [contribution documentation](CONTRIBUTING.md)
for instructions on how to build, test, and run Appium from the source.

### Roadmap

Interested in where Appium is heading in the future? Check out the [Roadmap](ROADMAP.md)

### Project History, Credits & Inspiration

* [History](https://appium.github.io/appium/docs/en/latest/intro/history/)

### User Forums

Announcements and debates often take place on the [Discussion Group](https://discuss.appium.io),
be sure to sign up!

### Troubleshooting

We put together a [troubleshooting guide](/docs/en/writing-running-appium/other/troubleshooting.md).
Please have a look here first if you run into any problems. It contains instructions for checking
a lot of common errors and how to get in touch with the community if you're
stumped.

### License

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium.svg?type=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fappium%2Fappium?ref=badge_large)
"
2003,Apache IoTDB,"<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    ""License""); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
[English](./README.md) | [中文](./README_ZH.md)

# IoTDB
[![Main Mac and Linux](https://github.com/apache/iotdb/actions/workflows/main-unix.yml/badge.svg)](https://github.com/apache/iotdb/actions/workflows/main-unix.yml)
[![Main Win](https://github.com/apache/iotdb/actions/workflows/main-win.yml/badge.svg)](https://github.com/apache/iotdb/actions/workflows/main-win.yml)<!--[![coveralls](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)](https://coveralls.io/repos/github/apache/iotdb/badge.svg?branch=master)-->
[![GitHub release](https://img.shields.io/github/release/apache/iotdb.svg)](https://github.com/apache/iotdb/releases)
[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)
![](https://github-size-badge.herokuapp.com/apache/iotdb.svg)
![](https://img.shields.io/github/downloads/apache/iotdb/total.svg)
![](https://img.shields.io/badge/platform-win%20%7C%20macos%20%7C%20linux-yellow.svg)
![](https://img.shields.io/badge/java--language-1.8%20%7C%2011%20%7C%2017-blue.svg)
[![Language grade: Java](https://img.shields.io/lgtm/grade/java/g/apache/iotdb.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/apache/iotdb/context:java)
[![IoTDB Website](https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=iotdb-website)](https://iotdb.apache.org/)
[![Maven Version](https://maven-badges.herokuapp.com/maven-central/org.apache.iotdb/iotdb-parent/badge.svg)](http://search.maven.org/#search|gav|1|g:""org.apache.iotdb"")
[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/apache/iotdb)
[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg)

# Overview

IoTDB (Internet of Things Database) is a data management system for time series data, which provides users with specific services including data collection, storage and analysis. Due to its light weight structure, high performance and usable features, together with its seamless integration with the Hadoop and Spark ecology, IoTDB meets the requirements of massive dataset storage, high throughput data input, and complex data analysis in the industrial IoT field.

# Main Features

Main features of IoTDB are as follows:

1. Flexible deployment strategy. IoTDB provides users a one-click installation tool on either the cloud platform or the terminal devices, and a data synchronization tool bridging the data on cloud platform and terminals.
2. Low cost on hardware. IoTDB can reach a high compression ratio of disk storage.
3. Efficient directory structure. IoTDB supports efficient organization for complex time series data structures from intelligent networking devices, organization for time series data from devices of the same type, and fuzzy searching strategy for massive and complex directory of time series data.
4. High-throughput read and write. IoTDB supports millions of low-power devices' strong connection data access, high-speed data read and write for intelligent networking devices and mixed devices mentioned above.
5. Rich query semantics. IoTDB supports time alignment for time series data across devices and measurements, computation in time series field (frequency domain transformation) and rich aggregation function support in time dimension.
6. Easy to get started. IoTDB supports SQL-Like language, JDBC standard API and import/export tools which is easy to use.
7. Seamless integration with state-of-the-practice Open Source Ecosystem. IoTDB supports analysis ecosystems such as, Hadoop, Spark, and visualization tool, such as, Grafana.

For the latest information about IoTDB, please visit [IoTDB official website](https://iotdb.apache.org/). If you encounter any problems or identify any bugs while using IoTDB, please report an issue in [jira](https://issues.apache.org/jira/projects/IOTDB/issues).

<!-- TOC -->

## Outline

- [IoTDB](#iotdb)
- [Overview](#overview)
- [Main Features](#main-features)
  - [Outline](#outline)
- [Quick Start](#quick-start)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
    - [Build from source](#build-from-source)
    - [Configurations](#configurations)
  - [Start](#start)
    - [Start IoTDB](#start-iotdb)
    - [Use IoTDB](#use-iotdb)
      - [Use Cli](#use-cli)
      - [Basic commands for IoTDB](#basic-commands-for-iotdb)
    - [Stop IoTDB](#stop-iotdb)
  - [Only build server](#only-build-server)
  - [Only build cli](#only-build-cli)
  - [Usage of CSV Import and Export Tool](#usage-of-csv-import-and-export-tool)

<!-- /TOC -->

# Quick Start

This short guide will walk you through the basic process of using IoTDB. For a more detailed introduction, please visit our website's [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

## Prerequisites

To use IoTDB, you need to have:

1. Java >= 1.8 (1.8, 11 to 17 are verified. Please make sure the environment path has been set accordingly).
2. Maven >= 3.6 (If you want to compile and install IoTDB from source code).
3. Set the max open files num as 65535 to avoid ""too many open files"" error.
4. (Optional) Set the somaxconn as 65535 to avoid ""connection reset"" error when the system is under high load.
    ```
    # Linux
    > sudo sysctl -w net.core.somaxconn=65535
   
    # FreeBSD or Darwin
    > sudo sysctl -w kern.ipc.somaxconn=65535
    ```

## Installation

IoTDB provides three installation methods, you can refer to the following suggestions, choose the one fits you best:

* Installation from source code. If you need to modify the code yourself, you can use this method.
* Installation from binary files. Download the binary files from the official website. This is the recommended method, in which you will get a binary released package which is out-of-the-box.
* Using Docker：The path to the dockerfile is https://github.com/apache/iotdb/tree/master/docker/src/main


Here in the Quick Start, we give a brief introduction of using source code to install IoTDB. For further information, please refer to [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

## Build from source

### Prepare Thrift compiler

Skip this chapter if you are using Windows. 

As we use Thrift for our RPC module (communication and
protocol definition), we involve Thrift during the compilation, so Thrift compiler 0.13.0 (or
higher) is required to generate Thrift Java code. Thrift officially provides binary compiler for
Windows, but unfortunately, they do not provide that for Unix OSs. 

If you have permission to install new softwares, use `apt install` or `yum install` or `brew install`
to install the Thrift compiler (If you already have installed the thrift compiler, skip this step).
Then, you may add the following parameter
when running Maven: `-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.

If not, then you have to compile the thrift compiler, and it requires you install a boost library first.
Therefore, we compiled a Unix  compiler ourselves and put it onto GitHub, and with the help of a
maven plugin, it will be  downloaded automatically during compilation. 
This compiler works fine with gcc8 or later, Ubuntu  MacOS, and CentOS, but previous versions 
and other OSs are not guaranteed.

If you can not download the thrift compiler automatically because of network problem, you can download 
it yourself, and then either:
rename your thrift file to `{project_root}\thrift\target\tools\thrift_0.12.0_0.13.0_linux.exe`;
or, add Maven commands:
`-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.

### Compile IoTDB

You can download the source code from:

```
git clone https://github.com/apache/iotdb.git
```

The default dev branch is the master branch, If you want to use a released version x.x.x:

```
git checkout vx.x.x
```

Or checkout to the branch of a big version, e.g., the branch of 1.0 is rel/1.0

```
git checkout rel/x.x
```

### Build IoTDB from source

Under the root path of iotdb:

```
> mvn clean package -pl distribution -am -DskipTests
```

After being built, the IoTDB distribution is located at the folder: ""distribution/target"".


### Only build cli

Under the root path of iotdb:

```
> mvn clean package -pl cli -am -DskipTests
```

After being built, the IoTDB cli is located at the folder ""cli/target"".

### Build Others

Using `-P compile-cpp` for compiling cpp client (For more details, read client-cpp's Readme file.)

**NOTE: Directories ""`thrift/target/generated-sources/thrift`"", ""`thrift-sync/target/generated-sources/thrift`"",
""`thrift-cluster/target/generated-sources/thrift`"", ""`thrift-influxdb/target/generated-sources/thrift`"" 
and ""`antlr/target/generated-sources/antlr4`"" need to be added to sources roots to avoid compilation errors in the IDE.**

**In IDEA, you just need to right click on the root project name and choose ""`Maven->Reload Project`"" after 
you run `mvn package` successfully.**

### Configurations

configuration files are under ""conf"" folder

  * environment config module (`datanode-env.bat`, `datanode-env.sh`),
  * system config module (`iotdb-datanode.properties`)
  * log config module (`logback.xml`).

For more information, please see [Config Manual](https://iotdb.apache.org/UserGuide/Master/Reference/Config-Manual.html).

## Start

You can go through the following steps to test the installation. If there is no error returned after execution, the installation is completed.

### Start IoTDB

Users can start 1C1D IoTDB by the start-standalone script under the sbin folder.

```
# Unix/OS X
> sbin/start-standalone.sh

# Windows
> sbin\start-standalone.bat
```

### Use IoTDB

#### Use Cli

IoTDB offers different ways to interact with server, here we introduce the basic steps of using Cli tool to insert and query data.

After installing IoTDB, there is a default user 'root', its default password is also 'root'. Users can use this
default user to login Cli to use IoTDB. The startup script of Cli is the start-cli script in the folder sbin. When executing the script, user should assign
IP, PORT, USER_NAME and PASSWORD. The default parameters are ""-h 127.0.0.1 -p 6667 -u root -pw -root"".

Here is the command for starting the Cli:

```
# Unix/OS X
> sbin/start-cli.sh -h 127.0.0.1 -p 6667 -u root -pw root

# Windows
> sbin\start-cli.bat -h 127.0.0.1 -p 6667 -u root -pw root
```

The command line cli is interactive, so you should see the welcome logo and statements if everything is ready:

```
 _____       _________  ______   ______
|_   _|     |  _   _  ||_   _ `.|_   _ \
  | |   .--.|_/ | | \_|  | | `. \ | |_) |
  | | / .'`\ \  | |      | |  | | |  __'.
 _| |_| \__. | _| |_    _| |_.' /_| |__) |
|_____|'.__.' |_____|  |______.'|_______/  version x.x.x


IoTDB> login successfully
IoTDB>
```

#### Basic commands for IoTDB

Now, let us introduce the way of creating timeseries, inserting data and querying data.

The data in IoTDB is organized as timeseries. Each timeseries includes multiple data-time pairs, and is owned by a database. Before defining a timeseries, we should define a database using CREATE DATABASE first, and here is an example:

```
IoTDB> CREATE DATABASE root.ln
```

We can also use SHOW DATABASES to check the database being created:

```
IoTDB> SHOW DATABASES
+-------------+
|     Database|
+-------------+
|      root.ln|
+-------------+
Total line number = 1
```

After the database is set, we can use CREATE TIMESERIES to create a new timeseries. When creating a timeseries, we should define its data type and the encoding scheme. Here We create two timeseries:

```
IoTDB> CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN
IoTDB> CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=RLE
```

In order to query the specific timeseries, we can use SHOW TIMESERIES <Path>. <Path> represent the location of the timeseries. The default value is ""null"", which queries all the timeseries in the system(the same as using ""SHOW TIMESERIES root""). Here are some examples:

1. Querying all timeseries in the system:

```
IoTDB> SHOW TIMESERIES
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
|                   Timeseries|Alias|Database|DataType|Encoding|Compression|Tags|Attributes|
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
|root.ln.wf01.wt01.temperature| null|      root.ln|   FLOAT|     RLE|     SNAPPY|null|      null|
|     root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|
+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+
Total line number = 2
```

2. Querying a specific timeseries(root.ln.wf01.wt01.status):

```
IoTDB> SHOW TIMESERIES root.ln.wf01.wt01.status
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
|              timeseries|alias|database|dataType|encoding|compression|tags|attributes|
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|
+------------------------+-----+-------------+--------+--------+-----------+----+----------+
Total line number = 1
```

Insert timeseries data is a basic operation of IoTDB, you can use ‘INSERT’ command to finish this. Before insertion, you should assign the timestamp and the suffix path name:

```
IoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status) values(100,true);
IoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status,temperature) values(200,false,20.71)
```

The data that you have just inserted will display as follows:

```
IoTDB> SELECT status FROM root.ln.wf01.wt01
+------------------------+------------------------+
|                    Time|root.ln.wf01.wt01.status|
+------------------------+------------------------+
|1970-01-01T00:00:00.100Z|                    true|
|1970-01-01T00:00:00.200Z|                   false|
+------------------------+------------------------+
Total line number = 2
```

You can also query several timeseries data using one SQL statement:

```
IoTDB> SELECT * FROM root.ln.wf01.wt01
+------------------------+-----------------------------+------------------------+
|                    Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|
+------------------------+-----------------------------+------------------------+
|1970-01-01T00:00:00.100Z|                         null|                    true|
|1970-01-01T00:00:00.200Z|                        20.71|                   false|
+------------------------+-----------------------------+------------------------+
Total line number = 2
```

To change the time zone in Cli, you can use the following SQL:

```
IoTDB> SET time_zone=+08:00
Time zone has set to +08:00
IoTDB> SHOW time_zone
Current time zone: Asia/Shanghai
```

Add then the query result will show using the new time zone.

```
IoTDB> SELECT * FROM root.ln.wf01.wt01
+-----------------------------+-----------------------------+------------------------+
|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|
+-----------------------------+-----------------------------+------------------------+
|1970-01-01T08:00:00.100+08:00|                         null|                    true|
|1970-01-01T08:00:00.200+08:00|                        20.71|                   false|
+-----------------------------+-----------------------------+------------------------+
Total line number = 2
```

The commands to exit the Cli are:

```
IoTDB> quit
or
IoTDB> exit
```

For more information about the commands supported by IoTDB SQL, please see [User Guide](https://iotdb.apache.org/UserGuide/Master/QuickStart/QuickStart.html).

### Stop IoTDB

The server can be stopped with ""ctrl-C"" or the following script:

```
# Unix/OS X
> sbin/stop-standalone.sh

# Windows
> sbin\stop-standalone.bat
```

# Usage of CSV Import and Export Tool

see [Usage of CSV Import and Export Tool](https://iotdb.apache.org/UserGuide/Master/Write-And-Delete-Data/CSV-Tool.html)

# Frequent Questions for Compiling
see [Frequent Questions when Compiling the Source Code](https://iotdb.apache.org/Development/ContributeGuide.html#_Frequent-Questions-when-Compiling-the-Source-Code)

# Contact Us
### QQ Group

* Apache IoTDB User Group: 659990460

### Wechat Group

* Add friend: `tietouqiao` or `liutaohua001`, and then we'll invite you to the group.

### Slack

* https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg

see [Join the community](https://github.com/apache/iotdb/issues/1995) for more!
"
3442,An Open-Source Framework for Prompt-Learning.,"

<div align=""center"">

<img src=""https://z3.ax1x.com/2021/11/11/IwED0K.png"" width=""350px"">

**An Open-Source Framework for Prompt-learning.**

------

<p align=""center"">
  <a href=""#Overview"">Overview</a> •
  <a href=""#installation"">Installation</a> •
  <a href=""#use-openprompt"">How To Use</a> •
  <a href=""https://thunlp.github.io/OpenPrompt/"">Docs</a> •
  <a href=""https://arxiv.org/abs/2111.01998"">Paper</a> •
  <a href=""#citation"">Citation</a> •
  <a href=""https://github.com/thunlp/OpenPrompt/tree/main/results/"">Performance</a> •
</p>

</div>

![version](https://img.shields.io/badge/version-v1.0.1-blue)




## What's New?

- Aug 2022: Thanks to contributor [zhiyongLiu1114](https://github.com/zhiyongLiu1114), OpenPrompt now supports [ERNIE 1.0](https://github.com/thunlp/OpenPrompt/tree/main/tutorial/7_ernie_paddlepaddle) in PaddlePaddle.
- July 2022: OpenPrompt supports OPT now.
- June 2022: OpenPrompt wins ACL 2022 Best Demo Paper Award.
- Mar 2022: We add a [tutorial](https://github.com/thunlp/OpenPrompt/blob/main/tutorial/6.1_chinese_dataset_uer_t5.py) as the response to [issue 124](https://github.com/thunlp/OpenPrompt/issues/124), which uses a customized tokenizer_wrapper to perform tasks that are not in the default configuration of OpenPrompt (e.g., Bert tokenizer+T5 model）.
- Feb 2022: Check out our sister repo [OpenDelta](https://github.com/thunlp/OpenDelta)!
- Dec 2021: `pip install openprompt`
- Dec 2021: [SuperGLUE performance](https://github.com/thunlp/OpenPrompt/tree/main/results) are added
- Dec 2021: We support **generation paradigm for all tasks** by adding a new verbalizer:[GenerationVerbalizer](https://github.com/thunlp/OpenPrompt/blob/main/openprompt/prompts/generation_verbalizer.py) and a [tutorial: 4.1_all_tasks_are_generation.py](https://github.com/thunlp/OpenPrompt/blob/main/tutorial/4.1_all_tasks_are_generation.py)
- Nov 2021: Now we have released a paper [OpenPrompt: An Open-source Framework for Prompt-learning](https://arxiv.org/abs/2111.01998).
- Nov 2021 PrefixTuning supports t5 now.
- Nov 2021: We made some major changes from the last version, where a flexible template language is newly introduced! Part of the docs is outdated and we will fix it soon.


## Overview

**Prompt-learning** is the latest paradigm to adapt pre-trained language models (PLMs) to downstream NLP tasks, which modifies the input text with a textual template and directly uses PLMs to conduct pre-trained tasks. This library provides a standard, flexible and extensible framework to deploy the prompt-learning pipeline. OpenPrompt supports loading PLMs directly from [huggingface transformers](https://github.com/huggingface/transformers). In the future, we will also support PLMs implemented by other libraries. For more resources about prompt-learning, please check our [paper list](https://github.com/thunlp/PromptPapers).



<div align=""center"">


<img src=""https://z3.ax1x.com/2021/11/03/IAdT3D.png"" width=""85%"" align=""center""/>

</div>



## What Can You Do via OpenPrompt?



![demo](docs/source/demo.gif)



- Use the implementations of current prompt-learning approaches.* We have implemented various of prompting methods, including templating, verbalizing and optimization strategies under a unified standard. You can easily call and understand these methods.
- *Design your own prompt-learning work.* With the extensibility of OpenPrompt, you can quickly practice your prompt-learning ideas.




## Installation

**Note: Please use Python 3.8+ for OpenPrompt**

### Using Pip

Our repo is tested on Python **3.8+** and PyTorch **1.8.1+**, install OpenPrompt using pip as follows:




```shell
pip install openprompt
```

To play with the latest features, you can also install OpenPrompt from the source.

### Using Git

Clone the repository from github:

```shell
git clone https://github.com/thunlp/OpenPrompt.git
cd OpenPrompt
pip install -r requirements.txt
python setup.py install
```

Modify the code

```
python setup.py develop
```



## Use OpenPrompt

### Base Concepts

A  `PromptModel`  object contains a `PLM`, a (or multiple) `Template`  and a (or multiple) `Verbalizer`, where the `Template` class is defined to wrap the original input with templates, and the `Verbalizer` class is to construct a projection between labels and target words in the current vocabulary. And a `PromptModel`  object practically participates in training and inference.

### Introduction by a Simple Example

With the modularity and flexibility of OpenPrompt, you can easily develop a prompt-learning pipeline.

#### Step 1: Define a task

The first step is to determine the current NLP task, think about what’s your data looks like and what do you want from the data! That is, the essence of this step is to determine the `classses` and the `InputExample` of the task. For simplicity, we use Sentiment Analysis as an example. tutorial_task.

```python
from openprompt.data_utils import InputExample
classes = [ # There are two classes in Sentiment Analysis, one for negative and one for positive
    ""negative"",
    ""positive""
]
dataset = [ # For simplicity, there's only two examples
    # text_a is the input text of the data, some other datasets may have multiple input sentences in one example.
    InputExample(
        guid = 0,
        text_a = ""Albert Einstein was one of the greatest intellects of his time."",
    ),
    InputExample(
        guid = 1,
        text_a = ""The film was badly made."",
    ),
]
```



#### Step 2: Define a Pre-trained Language Models (PLMs) as backbone.

Choose a PLM to support your task. Different models have different attributes, we encourge you to use OpenPrompt to explore the potential of various PLMs. OpenPrompt is compatible with models on [huggingface](https://huggingface.co/transformers/).

```python
from openprompt.plms import load_plm
plm, tokenizer, model_config, WrapperClass = load_plm(""bert"", ""bert-base-cased"")
```



#### Step 3: Define a Template.

A `Template` is a modifier of the original input text, which is also one of the most important modules in prompt-learning. 
We have defined `text_a` in Step 1.

```python
from openprompt.prompts import ManualTemplate
promptTemplate = ManualTemplate(
    text = '{""placeholder"":""text_a""} It was {""mask""}',
    tokenizer = tokenizer,
)
```



#### Step 4: Define a Verbalizer

A `Verbalizer` is another important (but not necessary) in prompt-learning,which projects the original labels (we have defined them as `classes`, remember?) to a set of label words. Here is an example that we project the `negative` class to the word bad, and project the `positive` class to the words good, wonderful, great.

```python
from openprompt.prompts import ManualVerbalizer
promptVerbalizer = ManualVerbalizer(
    classes = classes,
    label_words = {
        ""negative"": [""bad""],
        ""positive"": [""good"", ""wonderful"", ""great""],
    },
    tokenizer = tokenizer,
)
```



#### Step 5: Combine them into a PromptModel

Given the task, now we have a `PLM`, a `Template` and a `Verbalizer`, we combine them into a `PromptModel`. Note that although the example naively combine the three modules, you can actually define some complicated interactions among them.

```python
from openprompt import PromptForClassification
promptModel = PromptForClassification(
    template = promptTemplate,
    plm = plm,
    verbalizer = promptVerbalizer,
)
```

#### Step 6: Define a DataLoader

A ``PromptDataLoader`` is basically a prompt version of pytorch Dataloader, which also includes a ``Tokenizer``, a ``Template`` and a ``TokenizerWrapper``.

```python
from openprompt import PromptDataLoader
data_loader = PromptDataLoader(
    dataset = dataset,
    tokenizer = tokenizer,
    template = promptTemplate,
    tokenizer_wrapper_class=WrapperClass,
)
```

#### Step 7: Train and inference

Done! We can conduct training and inference the same as other processes in Pytorch.


```python
import torch

# making zero-shot inference using pretrained MLM with prompt
promptModel.eval()
with torch.no_grad():
    for batch in data_loader:
        logits = promptModel(batch)
        preds = torch.argmax(logits, dim = -1)
        print(classes[preds])
# predictions would be 1, 0 for classes 'positive', 'negative'
```

Please refer to our [tutorial scripts](https://github.com/thunlp/OpenPrompt/tree/main/tutorial), and [documentation](https://thunlp.github.io/OpenPrompt/) for more details.

## Datasets

We provide a series of download scripts in the `dataset/` folder, feel free to use them to download benchmarks.

## Performance Report
There are too many possible combinations powered by OpenPrompt. We are trying our best
to test the performance of different methods as soon as possible. The performance will be constantly updated into the [Tables](https://github.com/thunlp/OpenPrompt/tree/main/results/).
We also encourage the users to find the best hyper-parameters for their own tasks and report the results by making pull request.

## Known Issues
Major improvement/enhancement in future.

- We made some major changes from the last version, so part of the docs is outdated. We will fix it soon.

## Citation
Please cite our paper if you use OpenPrompt in your work

```bibtex
@article{ding2021openprompt,
  title={OpenPrompt: An Open-source Framework for Prompt-learning},
  author={Ding, Ning and Hu, Shengding and Zhao, Weilin and Chen, Yulin and Liu, Zhiyuan and Zheng, Hai-Tao and Sun, Maosong},
  journal={arXiv preprint arXiv:2111.01998},
  year={2021}
}
```
## Contributors

<!-- Copy-paste in your Readme.md file -->

<a href=""https://github.com/thunlp/OpenPrompt/graphs/contributors"">
  <img src=""https://contrib.rocks/image?repo=thunlp/OpenPrompt"" />
</a>

We thank all the  contributors to this project, more contributors are welcome!


"
2718,A cryptographically verifiable code review system for the cargo (Rust) package manager.,cargo-crev/README.md
3399,Object-based searching.,"# ![Ransack](./docs/static/logo/ransack-h.png ""Ransack"")

[![Build Status](https://github.com/activerecord-hackery/ransack/workflows/test/badge.svg)](https://github.com/activerecord-hackery/ransack/actions)
[![Gem Version](https://badge.fury.io/rb/ransack.svg)](http://badge.fury.io/rb/ransack)
[![Code Climate](https://codeclimate.com/github/activerecord-hackery/ransack/badges/gpa.svg)](https://codeclimate.com/github/activerecord-hackery/ransack)
[![Backers on Open Collective](https://opencollective.com/ransack/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/ransack/sponsors/badge.svg)](#sponsors)

# Introduction

Ransack will help you easily add **searching to your Rails application**, without any additional dependencies.

There are advanced searching solutions around, like ElasticSearch or Algolia. **Ransack** will do the job for many Rails websites, without the need to run additional infrastructure or work in a different language. With Ransack you do it all with standard Ruby and ERB.

Ready to move beyond the basics? Use **advanced features** like i18n and extensive configuration options.

Ransack is supported for Rails 7.0, 6.1 on Ruby 2.7 and later.

## Installation

To install `ransack` and add it to your Gemfile, run

```ruby title='Gemfile'
gem 'ransack'
```

### Bleeding edge

If you would like to use the latest updates not yet published to RubyGems, use the `main` branch:

```ruby title='Gemfile'
gem 'ransack', :github => 'activerecord-hackery/ransack', :branch => 'main'
```

### Documentation

There is [extensive documentation on Ransack](https://activerecord-hackery.github.io/ransack/), which is a [Docusaurus](https://docusaurus.io/) project and run as a GitHub Pages site.

## Issues tracker

* Before filing an issue, please read the [Contributing Guide](CONTRIBUTING.md).
* File an issue if a bug is caused by Ransack, is new (has not already been reported), and _can be reproduced from the information you provide_.
* Please consider adding a branch with a failing spec describing the problem.
* Contributions are welcome. :smiley:
* Please do not use the issue tracker for personal support requests. Stack Overflow or [GitHub Discussions](https://github.com/activerecord-hackery/ransack/discussions) is a better place for that where a wider community can help you!


## Contributions

To support the project:

* Consider supporting us via [Open Collective](https://opencollective.com/ransack/backers/badge.svg)
* Use Ransack in your apps, and let us know if you encounter anything that's
broken or missing. A failing spec to demonstrate the issue is awesome. A pull
request with passing tests is even better!
* Before filing an issue or pull request, be sure to read and follow the
[Contributing Guide](CONTRIBUTING.md).
* Please use Stack Overflow or [GitHub Discussions](https://github.com/activerecord-hackery/ransack/discussions) for questions or discussion not
directly related to bug reports, pull requests, or documentation improvements.
* Spread the word on social media if Ransack's been useful
to you. The more people who are using the project, the quicker we can find and
fix bugs!

## Contributors

Ransack was created by [Ernie Miller](http://twitter.com/erniemiller) and is developed and maintained by:
* [Sean Carroll](https://github.com/scarroll32)
* [Deivid Rodriguez](https://github.com/deivid-rodriguez)
* [Greg Molnar](https://github.com/gregmolnar)
* [A great group of contributors](https://github.com/activerecord-hackery/ransack/graphs/contributors).
- Ransack's logo is designed by [Anıl Kılıç](https://github.com/anilkilic).

Alumni Maintainers
- [Jon Atack](http://twitter.com/jonatack)
- [Ryan Bigg](http://twitter.com/ryanbigg)

This project exists thanks to all the people who contribute. <img src=""https://opencollective.com/ransack/contributors.svg?width=890&button=false"" />


## Backers

Thank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/ransack#backer)]

<a href=""https://opencollective.com/ransack#backers"" target=""_blank""><img src=""https://opencollective.com/ransack/backers.svg?width=890"" /></a>


## Sponsors

Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/ransack#sponsor)]

<a href=""https://opencollective.com/ransack/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/0/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/1/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/2/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/3/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/4/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/5/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/6/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/7/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/8/avatar.svg"" /></a>
<a href=""https://opencollective.com/ransack/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/ransack/sponsor/9/avatar.svg"" /></a>
"
2810,"Introduction to generative adversarial networks, with code to accompany the O'Reilly tutorial on GANs","# Introduction to generative adversarial networks

This repository contains code to accompany [the O'Reilly tutorial on generative adversarial networks](https://www.oreilly.com/learning/generative-adversarial-networks-for-beginners) written by [Jon Bruner](https://github.com/jonbruner) and [Adit Deshpande](https://github.com/adeshpande3). See [the original tutorial](https://www.oreilly.com/learning/generative-adversarial-networks-for-beginners) to run this code in a pre-built environment on O'Reilly's servers with cell-by-cell guidance, or run these files on your own machine.

There are three versions of our simple GAN model in this repository:
- **[gan-notebook.ipynb](gan-notebook.ipynb)** is identical to the interactive tutorial, available here so that you can run it on your own machine.
- **[gan-script.py](gan-script.py)** is a straightforward Python script containing code drawn directly from the tutorial, to be run from the command line. Note that it doesn't print anything when it's executed, but it does send regular updates to [TensorBoard](https://www.tensorflow.org/get_started/summaries_and_tensorboard) so that you can track its progress.
- **[gan-script-fast.py](gan-script-fast.py)** is a modest refactoring of gan-script.py that runs slightly faster because more of its computations are contained in the TensorFlow graph.

## Requirements and installation
In order to run [gan-script.py](gan-script.py) or [gan-script-fast.py](gan-script-fast.py), you'll need **[TensorFlow](https://www.tensorflow.org/install/) version 1.0 or later** and [NumPy](https://docs.scipy.org/doc/numpy/user/install.html). In order to run [gan-notebook.ipynb](gan-notebook.ipynb), you'll additionally need [Jupyter](https://jupyter.readthedocs.io/en/latest/install.html) and [matplotlib](https://matplotlib.org/).

If you've already got TensorFlow on your machine, then you've got NumPy and should be able to run the raw Python scripts.

### Installing Anaconda Python and TensorFlow
The easiest way to install TensorFlow as well as NumPy, Jupyter, and matplotlib is to start with the Anaconda Python distribution.

1. Follow the [installation instructions for Anaconda Python](https://www.continuum.io/downloads). **We recommend using Python 3.6.**

2. Follow the platform-specific [TensorFlow installation instructions](https://www.tensorflow.org/install/). Be sure to follow the ""Installing with Anaconda"" process, and create a Conda environment named `tensorflow`.

3. If you aren't still inside your Conda TensorFlow environment, enter it by opening your terminal and typing
    ```bash
    source activate tensorflow
    ```

4. Download and unzip [this entire repository from GitHub](https://github.com/jonbruner/generative-adversarial-networks), either interactively, or by entering
    ```bash
    git clone https://github.com/jonbruner/generative-adversarial-networks.git
    ```

5. Use `cd` to navigate into the top directory of the repo on your machine

6. Launch Jupyter by entering
    ```bash
    jupyter notebook
    ```
    and, using your browser, navigate to the URL shown in the terminal output (usually http://localhost:8888/)
"
3146,A collection about awesome blockchains - open distributed public databases w/ crypto hashes incl. git ;-).  Blockchains are the new tulips :tulip::tulip::tulip:. Distributed is the new centralized.,"
Mining Digital Gold one Block at a Time?! • Don't Expect to Get Insanely Rich (Quick) • Tulips :tulip::tulip::tulip: (like Blockchains) are Great and Gorgeous (and will Endure)

```ruby
b0 = Block.first(
        { from: ""Dutchgrown"", to: ""Vincent"", what: ""Tulip Bloemendaal Sunset"", qty: 10 },
        { from: ""Keukenhof"",  to: ""Anne"",    what: ""Tulip Semper Augustus"",    qty: 7  } )

b1 = Block.next( b0,
        { from: ""Flowers"",    to: ""Ruben"",   what: ""Tulip Admiral van Eijck"",  qty: 5  },
        { from: ""Vicent"",     to: ""Anne"",    what: ""Tulip Bloemendaal Sunset"", qty: 3  },
        { from: ""Anne"",       to: ""Julia"",   what: ""Tulip Semper Augustus"",    qty: 1  },
        { from: ""Julia"",      to: ""Luuk"",    what: ""Tulip Semper Augustus"",    qty: 1  } )
...
```

(Source: [`blockchain_with_transactions.rb`](blockchain.rb/blockchain_with_transactions.rb))


# Awesome Blockchains

A collection about awesome blockchains - open distributed databases w/ crypto hashes incl. git ;-).  Blockchains are the new tulips :tulip::tulip::tulip:.

Contents:

- [Frequently Asked Questions (F.A.Q.s) & Answers](#frequently-asked-questions-faqs--answers)
- [Do-It-Yourself (DIY) - Build Your Own Blockchain](#do-it-yourself-diy---build-your-own-blockchain)
  - [Python](#python) • [Ruby](#ruby) • [JavaScript](#javascript) • [Java](#java) • [Go](#go)
- [Blockchain Articles](#blockchain-articles)
- [Blockchain Books](#blockchain-books)
- [Blockchain (Lite) Crypto Hash Libraries](#blockchain-lite-crypto-hash-libraries)
- [Git, Git, Git - The Stupid Content Tracker with Crypto Hashes](#git-git-git---the-stupid-content-tracker-with-crypto-hashes)
- [Classic Tulip Mania](#classic-tulip-mania)
- [Awesome Awesomeness](#awesome-awesomeness)



## What's News?

For blockchain books, see the new [**Best of Crypto Books page »**](https://openblockchains.github.io/crypto-books/)

### The Open Blockchains Book of the Year 2020 Award Goes To...

![](i/libra-shrugged.png)
[**Libra Shrugged: How Facebook Tried to Take Over the Money**](https://davidgerard.co.uk/blockchain/libra/)
by David Gerard, November 2020, 182 Pages --
_Introduction: Taking over the money  ++
A user's guide to Libra   ++
The genesis of Libra: Beller's blockchain ++
To launch a Libra: Let’s start a crypto  ++
Bitcoin: why Libra is like this  ++
The Libra White Papers  ++
Banking the unbanked  ++
The Libra Reserve plan and economic stability ++
Libra, privacy and your digital identity  ++
The regulators recoil in horror  ++
David Marcus before the US House and Senate ++
July to September 2019: Libra runs the gauntlet  ++
October 2019: Libra's bad month  ++
Mark Zuckerberg before the US House  ++
November 2019: The comedown  ++
Central bank digital currencies  ++
Epilogue: Libra 2.0: not dead yet  ++
Appendix: 2010–2013: The rise and fall of Facebook Credits_

For more about Diem (formerly Libra), see the [Awesome Diem (formerly Libra) and Move page »](https://github.com/openblockchains/awesome-diem)

---

For crypto quotes, see the new [**100+ Best of Crypto Quotes - I HODL, you HODL, we HODL! - BREAKING: BITCOIN JUST BROKE $22 000! page »**](https://github.com/openblockchains/crypto-quotes)

### The Best Crypto Quote ""Oracle Saying"" of the Year 2020 Award Goes To...

> SEC Investor Education:
> - Don't understand an investment?
> - Don't invest in it.

Yes, but what if there's only 21 million of it?

  \- Trolly McTrollface



## Frequently Asked Questions (F.A.Q.s) & Answers


**Q: What's a Blockchain?**

A: A blockchain is a distributed database with a list (that is, chain) of records (that is, blocks) linked and secured by
digital fingerprints (that is, cryptho hashes).
Example from [`blockchain.rb`](blockchain.rb/blockchain.rb):

```
[#<Block:0x1eed2a0
  @timestamp     = 1637-09-15 20:52:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @hash          = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
 #<Block:0x1eec9a0
  @timestamp     = 1637-09-15 21:02:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"",
  @hash          = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"">,
 #<Block:0x1eec838
  @timestamp     = 1637-09-15 21:12:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"",
  @hash          = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"">,
  ...
```

![](i/blockchain-jesus.png)


**Q: What's a Hash? What's a (One-Way) Crypto(graphic) Hash Digest Checksum**?

A: A hash e.g. `eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743`
is a small digest checksum calculated
with a one-way crypto(graphic) hash digest checksum function
e.g. SHA256 (Secure Hash Algorithm 256 Bits)
from the data. Example from [`blockchain.rb`](blockchain.rb/blockchain.rb):

```ruby
def calc_hash
  sha = Digest::SHA256.new
  sha.update( @timestamp.to_s + @previous_hash + @data )
  sha.hexdigest   ## returns ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743""
end
```

A blockchain uses

- the block timestamp (e.g. `1637-09-15 20:52:38`) and
- the hash from the previous block (e.g. `edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b`) and finally
- the block data (e.g. `Transaction Data...`)

to calculate the new hash digest checksum, that is, the hash
e.g. `be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4`.


**Q: What's a Merkle Tree?**

A: A Merkle tree is a hash tree named after Ralph Merkle who patented the concept in 1979
(the patent expired in 2002). A hash tree is a generalization of hash lists or hash chains where every leaf node (in the tree) is labelled with a data block and every non-leaf node (in the tree)
is labelled with the crypto(graphic) hash of the labels of its child nodes. For more see the [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree) Wikipedia Article.

Note: By adding crypto(graphic) hash functions you can ""merkelize"" any data structure.


**Q: What's a Merkelized DAG (Directed Acyclic Graph)?**

A: It's a blockchain secured by crypto(graphic) hashes that uses a directed acyclic graph data structure (instead of linear ""classic"" linked list).

Note: Git uses merkelized dag (directed acyclic graph)s for its blockchains.


**Q: Is the Git Repo a Blockchain?**

A: Yes, every branch in the git repo is a blockchain.
The ""classic"" Satoshi-blockchain is like a git repo with a single master branch (only).



## Do-It-Yourself (DIY) - Build Your Own Blockchain

![](i/fake-dilbert-blockchain.png)


[Python](#python) •
[Ruby](#ruby) •
[JavaScript](#javascript) •
[Java](#java) •
[Go](#go)


### Python

**Let's Build the Tiniest Blockchain in Python Series** by Gerald Nash

- [**Let's Build the Tiniest Blockchain In Less Than 50 Lines of Python (Part 1)**](https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b), July 2016
- [**Let's Make the Tiniest Blockchain Bigger With More Lines of Python (Part 2)**](https://medium.com/crypto-currently/lets-make-the-tiniest-blockchain-bigger-ac360a328f4d), July 2016

<!-- break -->

[**Build Your Own Blockchain: A Python Tutorial**](http://ecomunsing.com/build-your-own-blockchain)
by Eric Munsing, March 2017, [(Source)](https://github.com/emunsing/tutorials/blob/master/BuildYourOwnBlockchain.ipynb)


[**Learn Blockchains by Building One (in Python)**](https://hackernoon.com/learn-blockchains-by-building-one-117428612f46)
by Daniel van Flymen, September 2017, [(Source)](https://github.com/dvf/blockchain) -- The fastest way to learn how Blockchains work is to build one


**Build Your Own Blockchain (in Python 3) Series** by Jack Schultz, [(Source)](https://github.com/jackschultz/jbc)

- [**Part 1: Creating, Storing, Syncing, Displaying, Mining, and Proving Work**](https://bigishdata.com/2017/10/17/write-your-own-blockchain-part-1-creating-storing-syncing-displaying-mining-and-proving-work/), October 2017
- [**Part 2: Syncing Chains From Different Nodes**](https://bigishdata.com/2017/10/27/build-your-own-blockchain-part-2-syncing-chains-from-different-nodes/), October 2017
- [**Part 3: Writing Nodes that Mine and Talk**](https://bigishdata.com/2017/11/02/build-your-own-blockchain-part-3-writing-nodes-that-mine/), November 2017

<!-- break -->

[**A Practical Introduction to Blockchain with Python**](http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/)
by Adil Moujahid, March 2018, [(Source)](https://github.com/adilmoujahid/blockchain-python-tutorial)


### Ruby

[**How Does Bitcoin Force Consensus Among Byzantine Generals?**](http://www.akitaonrails.com/2017/11/01/how-does-bitcoin-force-consensus-among-byzantine-generals) by Fabio Akita, November 2017

[**blockchain-lite - Build your own blockchains with crypto hashes; revolutionize the world with blockchains, blockchains, blockchains one block at a time!**](https://planetruby.github.io/calendar/advent2017/01-blockchain-lite) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 1, December 2017

[**merkletree library - Build Your Own Crypto Hash Trees; Grow Your Own Money on Trees**](https://planetruby.github.io/calendar/advent2017/19-merkletree.html) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 19, December 2017

[**centralbank command line tool (and library) - Print Your Own Money / Cryptocurrency; Run Your Own Federated Central Bank Nodes on the Blockchain Peer-to-Peer over HTTP**](https://planetruby.github.io/calendar/advent2017/24-centralbank.html) by Gerald Bauer, Ruby Advent Calendar 2017 / Day 24, December 2017

[**A guide to building a blockchain & cryptocurrency from scratch**](https://antoinefink.com/building-a-blockchain-and-cryptocurrency-in-ruby) [(Source)](https://github.com/antoinefink/melon) by Antoine Fink, April 2021


### Crystal

[**Write your own blockchain and Proof-of-Work (PoW) algorithm using Crystal**](https://medium.com/@bradford_hamilton/write-your-own-blockchain-and-pow-algorithm-using-crystal-d53d5d9d0c52) by Bradford Lamson-Scribner, May 2018,
[(Source)](https://github.com/bradford-hamilton/crystal-blockchain)


### JavaScript

[**Writing a Tiny Blockchain in JavaScript**](https://www.savjee.be/2017/07/Writing-tiny-blockchain-in-JavaScript/)
by Xavier Decuyper, July 2017

[**Node.js Blockchain Imlementation: BrewChain: Chain+WebSockets+HTTP Server**](http://www.darrenbeck.co.uk/blockchain/nodejs/nodejscrypto/) by Darren Beck, November 2017, [(Source)](https://github.com/dbbddb/BrewChain) -- Protecting the tea making ledger from unscrupulous colleagues

[**Build your own Blockchain in Javascript/Visualization of Blockchains**](https://github.com/nambrot/blockchain-in-js) by Nam Chu Hoai,  January 2018


### TypeScript

[**Naivecoin: a tutorial for building a cryptocurrency**](https://lhartikk.github.io) by Lauri Hartikka, [(Source)](https://github.com/lhartikk/naivecoin)


### Java

[**Creating Your First Blockchain with Java, Part 1**](https://medium.com/programmers-blockchain/create-simple-blockchain-java-tutorial-from-scratch-6eeed3cb03fa) by Kass, December 2017, [(Source)](https://github.com/CryptoKass/NoobChain-Tutorial-Part-1)

### Kotlin

[**Let's implement a cryptocurrency in Kotlin**](https://medium.com/@vasilyf/lets-implement-a-cryptocurrency-in-kotlin-part-1-blockchain-8704069f8580) by Vasily Fomin, July 2018,
[(Source)](https://github.com/VasilyFomin/kCoin)


### SQL

[**Blockchain by Example in SQL Server**](https://medium.com/@benjaminsky/blockchain-by-example-in-sql-server-8376b410128) by Benjamin Campbell, December 2017, [(Source)](https://github.com/benjaminsky/BlockchainMessenger)


### Rust

**Building Blockchain in Rust Series** by Jacob Lindahl, GeekLaunch, [(Source)](https://github.com/GeekLaunch/blockchain-rust), [(Slide Decks in PDF)](https://github.com/GeekLaunch/slides)
- [**Part 1: Blocks and Hashing**](https://medium.com/geeklaunch/blockchain-in-rust-01-blocks-hashing-4192f2265d3d), January 2019
- [**Part 2: Mining**](https://medium.com/geeklaunch/blockchain-in-rust-02-mining-companion-guide-9106b7a7696d), January 2019
- [**Part 3: Chains and Checks**](https://medium.com/geeklaunch/blockchain-in-rust-03-chains-checks-companion-guide-2714e1a76654), January 2019

### Go

**Building Blockchain in Go Series** by Ivan Kuznetsov, [(Source)](https://github.com/Jeiwan/blockchain_go)

- [**Part 1: Basic Prototype**](https://jeiwan.cc/posts/building-blockchain-in-go-part-1/), August 2017
- [**Part 2: Proof-of-Work**](https://jeiwan.cc/posts/building-blockchain-in-go-part-2/), August 2017
- [**Part 3: Persistence and CLI**](https://jeiwan.cc/posts/building-blockchain-in-go-part-3/), August 2017
- [**Part 4: Transactions 1**](https://jeiwan.cc/posts/building-blockchain-in-go-part-4/), September 2017
- [**Part 5: Addresses**](https://jeiwan.cc/posts/building-blockchain-in-go-part-5/), September 2017
- [**Part 6: Transactions 2**](https://jeiwan.cc/posts/building-blockchain-in-go-part-6/), September 2017
- [**Part 7: Network**](https://jeiwan.cc/posts/building-blockchain-in-go-part-7/), October 2017

<!-- break -->

Blockchain Series in Go by by Coral Health [(Source)](https://github.com/mycoralhealth/blockchain-tutorial)

- [**Code your own blockchain in less than 200 lines of Go!**](https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc) by Coral Health, January 2018
- [**Part 2: Networking — Code your own blockchain in less than 200 lines of Go!**](https://medium.com/@mycoralhealth/part-2-networking-code-your-own-blockchain-in-less-than-200-lines-of-go-17fe1dad46e1) by Coral Health, February 2018
- [**Code your own blockchain mining algorithm in Go!**](https://medium.com/@mycoralhealth/code-your-own-blockchain-mining-algorithm-in-go-82c6a71aba1f) by Coral Health, March 2018


<!--
  it's more about bitcoin (and not about blockchain really)
### C#

[**Programming The Blockchain in C#**](https://programmingblockchain.gitbooks.io/programmingblockchain/)
-->


### Talk Notes

- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in JavaScript from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain.md) by Gerald Bauer, Vienna.js, September 2017
- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in Ruby from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain_ruby.md) by Gerald Bauer, Vienna.rb, Dezember 2017
- [**Blockchain vs (Hyper) Ledger -- Inside (Hyper) Ledger Lite - Add Transactions One Block at a Time and Balance the Accounts (Books)**](https://github.com/geraldb/talks/blob/master/hyperledger.md) by Gerald Bauer, Hyperledger Vienna, March 2018
- [**Blockchain! Blockchain! Blockchain! - Build Your Own Blockchains in Go from Zero (Scratch)**](https://github.com/geraldb/talks/blob/master/blockchain_go.md) by Gerald Bauer, Vienna.go, April 2018


### More

See [**Build your own Blockchain / Cryptocurrency**](https://github.com/danistefanovic/build-your-own-x#build-your-own-blockchain--cryptocurrency) @ Build your own (insert technology here)




### Samples

#### Blockchain from Scratch - Ruby Version

```ruby
class Block

  attr_reader :timestamp
  attr_reader :data
  attr_reader :previous_hash
  attr_reader :hash

  def initialize(data, previous_hash)
    @timestamp     = Time.now
    @data          = data
    @previous_hash = previous_hash
    @hash          = calc_hash
  end

  def self.first( data=""Genesis"" )    # create genesis (big bang! first) block
    ## note: uses all zero for previous_hash (""0"")
    Block.new( data, ""0000000000000000000000000000000000000000000000000000000000000000"" )
  end

  def self.next( previous, data=""Transaction Data..."" )
    Block.new( data, previous.hash )
  end

private

  def calc_hash
    sha = Digest::SHA256.new
    sha.update( @timestamp.to_s + @previous_hash + @data )
    sha.hexdigest
  end

end  # class Block


#####
## let's get started
##   build a blockchain a block at a time

b0 = Block.first( ""Genesis"" )
b1 = Block.next( b0, ""Transaction Data..."" )
b2 = Block.next( b1, ""Transaction Data......"" )
b3 = Block.next( b2, ""More Transaction Data..."" )

blockchain = [b0, b1, b2, b3]

pp blockchain

```

(Source: [`blockchain.rb`](blockchain.rb/blockchain.rb))

will pretty print (pp) something like:

```
[#<Block:0x1eed2a0
  @timestamp     = 1637-09-15 20:52:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @hash          = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"">,
 #<Block:0x1eec9a0
  @timestamp     = 1637-09-15 21:02:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""edbd4e11e69bc399a9ccd8faaea44fb27410fe8e3023bb9462450a0a9c4caa1b"",
  @hash          = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"">,
 #<Block:0x1eec838
  @timestamp     = 1637-09-15 21:12:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""eb8ecbf6d5870763ae246e37539d82e37052cb32f88bb8c59971f9978e437743"",
  @hash          = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"">,
 #<Block:0x1eec6d0
  @timestamp     = 1637-09-15 21:22:38,
  @data          = ""More Transaction Data..."",
  @previous_hash = ""be50017ee4bbcb33844b3dc2b7c4e476d46569b5df5762d14ceba9355f0a85f4"",
  @hash          = ""5ee2981606328abfe0c3b1171440f0df746c1e1f8b3b56c351727f7da7ae5d8d"">]
```


Comments from the [reddit ruby posting](https://www.reddit.com/r/ruby/comments/70c30f/build_your_own_blockchain_in_20_lines_of_ruby/):

> Wait, so a blockchain is just a linked list?
>
>> No. A linked list is only required to have a reference to the previous element, a block must
>> have an identifier depending on the previous block's identifier, meaning that you cannot
>> replace a block without recomputing every single block that comes after.
>> In this implementation that happens as the previous digest is input in the calc_hash method.



**What about Proof of Work / Waste?**

Let's add a proof of work / waste to the blockchain. In the classic blockchain you have to compute a block hash that starts with leading zeros (`00`). The more leading zeros the harder (more difficult) to compute. Let's keep it easy to compute with two leading zeros (`00`), that is, 16^2 = 256 possibilites (^1,2). Three leading zeros (`000`) would be 16^3 = 4_096 possibilites and four zeros (`0000`) would be 16^4 = 65_536 and so on.

(^1): 16 possibilties because it's a hex or hexadecimal or base 16 number, that is, `0` `1` `2` `3` `4` `6` `7` `8` `9` `a` (10) `b` (11) `c` (12) `d` (13) `e` (14) `f` (15).

(^2): A random secure hash algorithm needs on average 256 tries (might be lets say 305 tries, for example, because it's NOT a perfect statistic distribution of possibilities).


Example:

```ruby
def compute_hash_with_proof_of_work( difficulty=""00"" )
  nonce = 0
  loop do
    hash = calc_hash_with_nonce( nonce )
    if hash.start_with?( difficulty )
      return [nonce,hash]     ## bingo! proof of work if hash starts with leading zeros (00)
    else
      nonce += 1              ## keep trying (and trying and trying)
    end
  end
end

def calc_hash_with_nonce( nonce=0 )
  sha = Digest::SHA256.new
  sha.update( nonce.to_s + @timestamp.to_s + @previous_hash + @data )
  sha.hexdigest
end
```

(Source: [`blockchain_with_proof_of_work.rb`](blockchain.rb/blockchain_with_proof_of_work.rb))

Let's rerun the sample with the proof of work machinery added.
Now the sample will pretty print (pp) something like:

```
[#<Block:0x1e204f0
  @timestamp     = 1637-09-20 20:13:38,
  @data          = ""Genesis"",
  @previous_hash = ""0000000000000000000000000000000000000000000000000000000000000000"",
  @nonce         = 242,
  @hash          = ""00b8e77e27378f9aa0afbcea3a2882bb62f6663771dee053364beb1887e18bcf"">,
 #<Block:0x1e56e20
  @timestamp     = 1637-09-20 20:23:38,
  @data          = ""Transaction Data..."",
  @previous_hash = ""00b8e77e27378f9aa0afbcea3a2882bb62f6663771dee053364beb1887e18bcf"",
  @nonce         = 46,
  @hash          = ""00aae8d2e9387e13c71b33f8cd205d336ac250d2828011f5970062912985a9af"">,
 #<Block:0x1e2bd58
  @timestamp     = 1637-09-20 20:33:38,
  @data          = ""Transaction Data......"",
  @previous_hash = ""00aae8d2e9387e13c71b33f8cd205d336ac250d2828011f5970062912985a9af"",
  @nonce         = 350,
  @hash          = ""00ea45e0f4683c3bec4364f349ee2b6816be0c9fd95cfd5ffcc6ed572c62f190"">,
 #<Block:0x1fa8338
  @timestamp     = 1637-09-20 20:43:38,
  @data          = ""More Transaction Data..."",
  @previous_hash = ""00ea45e0f4683c3bec4364f349ee2b6816be0c9fd95cfd5ffcc6ed572c62f190"",
  @nonce         = 59,
  @hash          = ""00436f0fca677652963e904ce4c624606a255946b921132d5b1f70f7d86c4ab8"">]
```

See the difference? All hashes now start with leading zeros (`00`) and the nonce is the random ""lucky number""
that makes it happen. That's the magic behind the proof of work.


##### Blockchain from Scratch - JavaScript Version

```js
class Block {

  constructor(data, previousHash) {
    this.timestamp    = new Date()
    this.data         = data
    this.previousHash = previousHash
    this.hash         = this.calcHash()
  }

  calcHash() {
    var sha = SHA256.create()
    sha.update( this.timestamp.toString() + this.previousHash + this.data )
    return sha.hex()
  }

  static first( data=""Genesis"" ) {    // create genesis (big bang! first) block
    // uses all-zero previousHash
    return new Block( data, ""0000000000000000000000000000000000000000000000000000000000000000"" )
  }

  static next( previous, data=""Transaction Data..."" ) {
    return new Block( data, previous.hash )
  }
}


//////
// let's get started
//   build a blockchain a block at a time

b0 = Block.first( ""Genesis"" )
b1 = Block.next( b0, ""Transaction Data..."" )
b2 = Block.next( b1, ""Transaction Data......"" )
b3 = Block.next( b2, ""More Transaction Data..."" )


blockchain = [b0, b1, b2, b3]

console.log( blockchain )
```

(Source: [`blockchain.js`](blockchain.js/blockchain.js))

will log something like:

```
[ Block {
     timestamp    : 1637-09-18 08:25:54,
     data         : 'Genesis',
     previousHash : '0000000000000000000000000000000000000000000000000000000000000000',
     hash         : 'c396de4c03ddb5275661982adc75ce5fc5905d2a2457d1266c74436c1f3c50f1' },
   Block {
     timestamp    : 1637-09-18 08:35:54,
     data         : 'Transaction Data...',
     previousHash : 'c396de4c03ddb5275661982adc75ce5fc5905d2a2457d1266c74436c1f3c50f1',
     hash         : '493131e09c069645c82795c96e4715cea0f5558be514b5096d853a5b9899154a' },
   Block {
     timestamp    : 1637-09-18 08:45:54,
     data         : 'Transaction Data......',
     previousHash : '493131e09c069645c82795c96e4715cea0f5558be514b5096d853a5b9899154a',
     hash         : '97aa3cb5052615d60ff8e6b41bef606562588c4874f011970ac2f218e2f0f4a8' },
   Block {
     timestamp    : 1637-09-18 08:55:54,
     data         : 'More Transaction Data...',
     previousHash : '97aa3cb5052615d60ff8e6b41bef606562588c4874f011970ac2f218e2f0f4a8',
     hash         : 'e10e020f832e46c2b60e1c3c0412bd370b2fde5f0f782c16eb87d0313ea0d3a3' } ]
```



## Blockchain Articles

[**Reflections on the Blockchain**](http://rufuspollock.com/2016/07/02/reflections-on-the-blockchain) by Rufus Pollock (Open Knowledge Foundation), July 2016 --
_The DAO: Code is not Law – and It’s Dangerous to Think So ++
The Internet changed the world - surely the Blockchain will too? ++
Gold-rush or Internet-rush? ++
Governance Matters in Bitcoin ++
The Myth of a Costless, Ownerless Network ++
Lessons from History_

[**On the Dangers of a Blockchain Monoculture**](https://tonyarcieri.com/on-the-dangers-of-a-blockchain-monoculture) by Tony Arcieri, January 2016 --
_The Bitcoin blockchain: the world's worst database ++
Next-generation protocols ++
Decentralized ledger protocols ++
Bitcoin-NG ++
Blockchain! Blockchain! Blockchain! ++
The great decentralized database in the sky_


[**I Don’t Believe in Blockchain**](https://www.tbray.org/ongoing/When/201x/2017/05/13/Not-Believing-in-Blockchain) by Tim Bray, May 2017


[**Minimum Viable Blockchain**](https://www.igvita.com/2014/05/05/minimum-viable-block-chain/) by Ilya Grigorik, May 2014 --
_Securing transactions with triple-entry bookkeeping ++
Securing transactions with PKI ++
Balance = Σ(receipts) ++
Multi-party transfers & verification ++
Double-spending and distributed consensus -
 Requirements for a distributed consensus network;
 Protecting the network from Sybil attacks;
Proof-of-work as a participation requirement ++
Building the minimum viable blockchain -
 Adding ""blocks"" & transaction fee incentives;
 Racing to claim the transaction fees;
 Resolving chain conflicts;
 Blocks are never final ++
Properties of the (minimum viable) blockchain_

[**Blockchains by analogies and applications: How blockchain compares to Git, Raft, and other technologies.**](https://www.oreilly.com/ideas/blockchains-by-analogies-and-applications)
by Kieren James-Lubin, January 2016 --
_Blockchains are databases ++
Understanding transactions ++
Persistent, replicated databases (related technology: Git) ++
Peer-to-peer networks (related technology: BitTorrent) ++
Distributed consensus (related technology: distributed databases, Raft) ++
Minting new coins (mining) ++
Embedded identities (related technology: TLS) ++
Smart contracts: Like SQL expressions & triggers ++
What can we really do with blockchains?_



## Blockchain Books

[**Attack of the 50 Foot Blockchain: Bitcoin, Blockchain, Ethereum & Smart Contracts**](https://davidgerard.co.uk/blockchain/table-of-contents/) by David Gerard, London, 2017 --
_What is a bitcoin? ++
The Bitcoin ideology ++
The incredible promises of Bitcoin! ++
Early Bitcoin: the rise to the first bubble ++
How Bitcoin mining centralised ++
Who is Satoshi Nakamoto? ++
Spending bitcoins in 2017 ++
Trading bitcoins in 2017: the second crypto bubble ++
Altcoins ++
Smart contracts, stupid humans ++
Business bafflegab, but on the Blockchain ++
Case study: Why you can’t put the music industry on a blockchain_


[**Mastering Bitcoin - Programming the Open Blockchain**](https://github.com/bitcoinbook/bitcoinbook/blob/second_edition/ch09.asciidoc) 2nd Edition,
by Andreas M. Antonopoulos, 2017 - FREE (Online Source Version) --
_What Is Bitcoin? ++
How Bitcoin Works ++
Bitcoin Core: The Reference Implementation ++
Keys, Addresses ++
Wallets ++
Transactions ++
Advanced Transactions and Scripting ++
The Bitcoin Network ++
The Blockchain ++
Mining and Consensus ++
Bitcoin Security ++
Blockchain Applications_

---

![](i/trolly-ponzi.png)

**BEWARE: Bitcoin is a gigantic ponzi scheme¹.
To the moon!? The new gold standard!?
Do NOT ""invest"" trying to get-rich-quick HODLing.
Why not? The bitcoin code is archaic and out-of-date.
Burn, baby, burn! Proof-of-work / waste is a global
energy environmental disaster
using 300 kW/h per bitcoin transaction (!) that's about 179 kilograms of CO₂ emissions².
Programmable money (or the internet of value)
for all future generations with (bitcoin) script
without loops and jumps (gotos) and all ""stateless""!? LOL.**

¹: (Source: [Best of Bitcoin Maximalist - Scammers, Morons, Clowns, Shills & BagHODLers - Inside The New New Crypto Ponzi Economics](https://bitsblocks.github.io/bitcoin-maximalist))

²: Assuming let's say 0.596 kilograms of CO₂ per kW/h
(that's the energy efficiency in Germany) that's
about 179 kilograms of CO₂ per bitcoin transaction (300 kW/h × 0.596 kg). For more insights see the [Bitcoin Energy Consumption Index](https://digiconomist.net/bitcoin-energy-consumption).

---


[**Programming Bitcoin from Scratch**](https://github.com/jimmysong/programmingbitcoin) by Jimmy Song, 2019 - FREE (Online Source Version) -- _[Chapter 6 - Script](https://github.com/jimmysong/programmingbitcoin/blob/master/ch06.asciidoc) - How Script Works • Example Operations • Parsing the Script Fields • Combining the Script Fields • Standard Scripts • p2pk • Problems with p2pk • Solving the Problems with p2pkh • Scripts Can Be Arbitrarily Constructed • Conclusion ++_
_[Chapter 8 - Pay-to-Script Hash](https://github.com/jimmysong/programmingbitcoin/blob/master/ch08.asciidoc) - Bare Multisig • Coding OP_CHECKMULTISIG • Problems with Bare Multisig • Pay-to-Script-Hash (p2sh) • Coding p2sh • Conclusion ++_
_[Chapter 13 - Segregated Witness](https://github.com/jimmysong/programmingbitcoin/blob/master/ch13.asciidoc) - Pay-to-Witness-Pubkey-Hash (p2wpkh) • p2wpkh Transactions • p2sh-p2wpkh • Coding p2wpkh and p2sh-p2wpkh • Pay-to-Witness-Script-Hash (p2wsh) • p2sh-p2wsh • Coding p2wsh and p2sh-p2wsh • Other Improvements • Conclusion_


[**Programming Bitcoin Script Transaction (Crypto) Contracts Step-by-Step ( Beta / Rough Draft )**](https://github.com/openblockchains/programming-bitcoin-script)
by Gerald Bauer et al, 2019 - FREE (Online Version) --
_Let's start with building your own bitcoin stack machine from zero / scratch and let's run your own bitcoin ops (operations)..._


[**Programming Blockchains in Ruby from Scratch Step-by-Step Starting w/ Crypto Hashes... ( Beta / Rough Draft )**](https://github.com/yukimotopress/programming-blockchains-step-by-step)
by Gerald Bauer et al, 2018 - FREE (Online Version) --
_(Crypto) Hash ++
(Crypto) Block ++
(Crypto) Block with Proof-of-Work ++
Blockchain! Blockchain! Blockchain! ++
Blockchain Broken? ++
Timestamping ++
Mining, Mining, Mining - What's Your Hash Rate? ++
Bitcoin, Bitcoin, Bitcoin ++
(Crypto) Block with Transactions (Tx)_

[**Mastering Ethereum - Building Contract Services and Decentralized Apps on the Blockchain**](https://github.com/ethereumbook/ethereumbook) -
by Andreas M. Antonopoulos, Gavin Wood, 2018 - FREE (Online Source Version)
_What is Ethereum ++
Introduction ++
Ethereum Clients ++
Ethereum Testnets ++
Keys and Addresses ++
Wallets	++
Transactions ++
Contract Services ++
Tokens ++
Oracles ++
Accounting & Gas ++
EVM (Ethereum Virtual Machine) ++
Consensus ++
DevP2P (Peer-To-Peer) Protocol ++
Dev Tools and Frameworks ++
Decentralized Apps ++
Ethereum Standards (EIPs/ERCs)_


[**Building Decentralized Apps on the Ethereum Blockchain**](https://www.manning.com/books/building-ethereum-dapps) by Roberto Infante, 2018 - FREE chapter 1 --
_Understanding decentralized applications ++
The Ethereum blockchain ++
Building contract services in (JavaScript-like) Solidity ++
Running contract services on the Ethereum blockchain ++
Developing Ethereum Decentralized apps with Truffle ++
Best design and security practice_

[**Programming Crypto Blockchain Contracts Step-by-Step Book / Guide ( Beta / Rough Draft )**](https://github.com/openblockchains/programming-cryptocontracts) by Gerald Bauer et al, 2019 - FREE (Online Version) --
_Let's Start with Ponzi & Pyramid Schemes. Run Your Own Lotteries, Gambling Casinos and more on the Blockchain World Computer..._


[**Programming Cryptocurrencies and Blockchains in Ruby ( Beta / Rough Draft )**](http://yukimotopress.github.io/blockchains)
by Gerald Bauer et al, 2018 - FREE (Online Version) @ Yuki & Moto Press Bookshelf --
_Digital $$$ Alchemy - What's a Blockchain? -
How-To Turn Digital Bits Into $$$ or €€€? •
Decentralize Payments. Decentralize Transactions. Decentralize Blockchains. •
The Proof of the Pudding is ... The Bitcoin (BTC) Blockchain(s)
++
Building Blockchains from Scratch -
A Blockchain in Ruby in 20 Lines! A Blockchain is a Data Structure  •
What about Proof-of-Work? What about Consensus?   •
Find the Lucky Number - Nonce == Number Used Once
++
Adding Transactions -
The World's Worst Database - Bitcoin Blockchain Mining  •
Tulips on the Blockchain! Adding Transactions
++
Blockchain Lite -
Basic Blocks  •
Proof-of-Work Blocks  •
Transactions
++
Merkle Tree -
Build Your Own Crypto Hash Trees; Grow Your Own Money on Trees  •
What's a Merkle Tree?   •
Transactions
++
Central Bank -
Run Your Own Federated Central Bank Nodes on the Blockchain Peer-to-Peer over HTTP  •
Inside Mining - Printing Cryptos, Cryptos, Cryptos on the Blockchain
++
Awesome Crypto
++
Case Studies - Dutch Gulden  • Shilling  • CryptoKitties (and CryptoCopycats)_



[**Blockchain for Dummies, IBM Limited Edition**](https://www.ibm.com/blockchain/what-is-blockchain.html) by Manav Gupta, 2017 - FREE (Digital Download w/ Email) --
_Grasping Blockchain Fundamentals ++
Taking a Look at How Blockchain Works ++
Propelling Business with Blockchains ++
Blockchain in Action: Use Cases ++
Hyperledger, a Linux Foundation Project ++
Ten Steps to Your First Blockchain application_


[**Get Rich Quick ""Business Blockchain"" Bible - The Secrets of Free Easy Money**](https://github.com/"
3168,"All the slides, accompanying code and exercises all stored in this repo. 🎈","# Data Camp: Data Scientist with Python 🎉🤖

![GitHub](https://img.shields.io/github/license/AmoDinho/datacamp-python-data-science-track) ![GitHub stars](https://img.shields.io/github/stars/AmoDinho/datacamp-python-data-science-track?style=social)

![Design Blocks](https://images.unsplash.com/photo-1518364538800-6bae3c2ea0f2?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=193d96d744872badcbbf5bdfc7b347f2&auto=format&fit=crop&w=1951&q=80)

# All the slides, accompanying code and exercises are all stored in this repo!

[Sign Up to DataCamp Here!](https://www.datacamp.com)

## 🎮 List of Courses

  - [Intro to Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intro%20to%20Python%20for%20Data%20Science)
  - [Intermediate Python for Data Science](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Intermediate%20Python%20for%20Data%20Science)
  - [Python Data Science Toolbox (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt1)
  - [Python Data Science Toolbox (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Python%20Data%20Science%20Toolbox%20pt2)
  - [Importing Data in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt1)
  - [Importing Data in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Importing%20Data%20in%20Python%20pt2)
  - [Cleaning Data in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Cleaning%20Data%20in%20Python)
  - [Pandas Foundations](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Pandas%20Foundations)
  - [Manipulating DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Manipulating%20DataFrames%20with%20pandas)
  - [Merging DataFrames with pandas](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Merging%20DataFrames%20with%20pandas)
  - [Introduction to Databases in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Databases%20in%20Python)
  - [Introduction to Data Visualization with Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Introduction%20to%20Data%20Visualizaion%20with%20Python)
  - [Interactive Data Visualization with Bokeh](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Interactive%20Data%20Visualization%20with%20Bokeh)
  - [Statistical Thinking in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%201))
  - [Statistical Thinking in Python (Part 2)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Statistical%20Thinking%20in%20Python%20(Part%202))
  - [Supervised Learning with scikit-learn](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Supervised%20Learning%20with%20scikit-learn)
  - [Machine Learning with the Experts: School Budgets](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Machine%20Learning%20with%20Experts-School%20Budgets)
  - [Unsupervised Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Unsupervised%20Learning%20in%20Python)
  - [Deep Learning in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Deep%20Learning%20in%20Python)
  - [Network Analysis in Python (Part 1)](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Network%20Analysis%20in%20Python%20(Part%201))
  
  ### 💣 Bonus
  
  - [Natural Language Processing Fundamentals in Python](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Natural%20Language%20Processing%20Fundamentals%20in%20Python)
  - [Correlation & Regression](https://github.com/AmoDinho/datacamp-python-data-science-track/tree/master/Correlation%20and%20Regression)
  
  ##  🍣 Contributions
  
  Anyone is welcome to contribute please check out the issues!
  
  ## 📄 License

[MIT License](https://github.com/AmoDinho/datacamp-python-data-science-track/blob/master/LICENSE)

"
556,"A lightweight, fast and extensible game server for Minecraft","# Cuberite

[![Jenkins Build Status](https://img.shields.io/jenkins/build?jobUrl=https%3A%2F%2Fbuilds.cuberite.org%2Fjob%2Fcuberite%2Fjob%2Fmaster&label=Jenkins)](https://builds.cuberite.org/job/cuberite/job/master/)
[![AppVeyor Build Status](https://img.shields.io/appveyor/ci/cuberite/cuberite/master.svg?label=AppVeyor)](https://ci.appveyor.com/project/cuberite/cuberite)

Cuberite is a Minecraft-compatible multiplayer game server that is written in C++ and designed to be efficient with memory and CPU, as well as having a flexible Lua Plugin API. Cuberite is compatible with the Java Edition Minecraft client.

Cuberite runs on Windows, *nix and Android operating systems. This includes Android phones and tablets as well as Raspberry Pis.

Currently we support Release 1.8 - 1.12.2 Minecraft protocol versions.

Subscribe to [the newsletter][1] for important updates and project news.

## Installation

There are several ways to obtain Cuberite.

### Binaries

- The easiest method is downloading for Windows or Linux from the [website][2].
- You can use the EasyInstall script for Linux and macOS, which automatically downloads the correct binary. The script is described below.

#### The EasyInstall script

This script will download the correct binary from the project site.

    curl -sSfL https://download.cuberite.org | sh

### Compiling

- You can compile automatically for Linux, macOS and FreeBSD with the `compile.sh` script. The script is described below.
- You can also compile manually. See [COMPILING.md][4].

Compiling may provide better performance (1.5-3x as fast) and it supports more operating systems.

#### The compile.sh script

This script downloads the source code and compiles it. The script is smart enough to notify you of missing dependencies and instructing you on how to install them. The script doesn't work for Windows.

Using curl:

    sh -c ""$(curl -sSfL -o - https://compile.cuberite.org)""

Or using wget:

    sh -c ""$(wget -O - https://compile.cuberite.org)""

### Hosted services

- Hosted Cuberite is available via [Gamocosm][5].

## Contributing

Cuberite is licensed under the Apache License V2, and we welcome anybody to fork and submit a Pull Request back with their changes, and if you want to join as a permanent member we can add you to the team.

Cuberite is developed in C++ and Lua. To contribute code, please check out [GETTING-STARTED.md][6] and [CONTRIBUTING.md][7] for more details.

Plugins are written in Lua. You can contribute by developing plugins and submitting them to the [plugin repository][8] or the [forum][9]. Please check out our [plugin introduction guide][10] for more info.

If you are not a programmer, you can help by testing Cuberite and reporting bugs. See [TESTING.md][11] for details.

You can also help with documentation by contributing to the [User's Manual][12].

## Other Stuff

For other stuff, check out the [homepage][13], the [Users' Manual][14], the [forums][15], and the [Plugin API][16].

Support the Cuberite development team on [Liberapay][17]

[1]: https://cuberite.org/news/#subscribe
[2]: https://cuberite.org/
[4]: https://github.com/cuberite/cuberite/blob/master/COMPILING.md
[5]: https://gamocosm.com/
[6]: https://github.com/cuberite/cuberite/blob/master/GETTING-STARTED.md
[7]: https://github.com/cuberite/cuberite/blob/master/CONTRIBUTING.md
[8]: https://plugins.cuberite.org/
[9]: https://forum.cuberite.org/forum-2.html
[10]: https://api.cuberite.org/Writing-a-Cuberite-plugin.html
[11]: https://github.com/cuberite/cuberite/blob/master/TESTING.md
[12]: https://github.com/cuberite/users-manual
[13]: https://cuberite.org/
[14]: https://book.cuberite.org/
[15]: https://forum.cuberite.org/
[16]: https://api.cuberite.org/
[17]: https://liberapay.com/Cuberite
"
1525,Semantic UI Angular Integrations (no jQuery),"<!-- Logo -->
<p align=""center"">
  <a href=""https://edcarroll.github.io/ng2-semantic-ui/"">
    <img height=""128"" width=""238"" src=""https://raw.githubusercontent.com/edcarroll/ng2-semantic-ui/master/demo/src/assets/logo.png"">
  </a>
</p>

<!-- Name -->
<h1 align=""center"">
  <a href=""https://edcarroll.github.io/ng2-semantic-ui"">ng2-semantic-ui</a>
</h1>

<!-- Badges -->
<p align=""center"">
  <a href=""https://gitter.im/ng2-semantic-ui/Lobby"">
    <img alt=""Gitter"" src=""https://img.shields.io/gitter/room/ng2-semantic-ui/Lobby.js.svg?style=flat-square"" />
  </a>
  <a href=""https://travis-ci.org/edcarroll/ng2-semantic-ui"">
    <img alt=""Travis CI"" src=""https://img.shields.io/travis/edcarroll/ng2-semantic-ui.svg?style=flat-square"" />
  </a>
  <a href=""https://www.npmjs.com/package/ng2-semantic-ui"">
    <img alt=""npm"" src=""https://img.shields.io/npm/v/ng2-semantic-ui.svg?style=flat-square"" />
  </a>
  <a href=""https://www.npmjs.com/package/ng2-semantic-ui"">
    <img alt=""monthly downloads"" src=""https://img.shields.io/npm/dm/ng2-semantic-ui.svg?style=flat-square"" />
  </a>
</p>

Semantic UI Angular Integrations, written in pure Angular - **no JQuery required**.

## Introduction

Angular and jQuery don't go together - this is the fundamental principal of this library. It provides Angular component versions of the Semantic UI modules, so that you don't need to add jQuery to your app.

Note that only Semantic UI elements that use jQuery are recreated here - those written purely in CSS aren't included as they can be used in Angular apps already.

## Installation & Usage

See the [Documentation](https://edcarroll.github.io/ng2-semantic-ui) for installation instructions and extensive examples.

## Dependencies

* [Angular](https://angular.io) (^6.0.0)
* [Semantic UI CSS](http://semantic-ui.com/) (^2.3.1) (jQuery is **not** required)

## Component Support

|           Icon          |                                      Description                                    |
|-------------------------|-------------------------------------------------------------------------------------|
| :white_check_mark:      | Component supported by ng2-semantic-ui.                                             |
| :rocket:                | Semantic UI plugin supported by ng2-semantic-ui (not in Semantic UI Core).          |
| :ballot_box_with_check: | Component supported natively by [Semantic UI](https://semantic-ui.com/) (CSS only). |
| :x:                     | Component currently unavailable.                                                    |
| :no_entry_sign:         | Component not applicable to Angular.                                                |

|              Elements              |            Collections             |                   Views                  |              Modules              |              Behaviors              |
|------------------------------------|------------------------------------|------------------------------------------|-----------------------------------|-------------------------------------|
| :ballot_box_with_check: Button     | :ballot_box_with_check: Breadcrumb | :ballot_box_with_check: Advertisment     | :white_check_mark: Accordion      | :no_entry_sign: API                 |
| :ballot_box_with_check: Container  | :ballot_box_with_check: Form       | :ballot_box_with_check: Card             | :white_check_mark: Checkbox       | :no_entry_sign: Form Validation     |
| :ballot_box_with_check: Divider    | :ballot_box_with_check: Grid       | :ballot_box_with_check: Comment          | :rocket: Collapse                 | :rocket: Localization               |
| :ballot_box_with_check: Flag       | :ballot_box_with_check: Menu       | :ballot_box_with_check: Feed             | :rocket: Datepicker               | :x: Visibiltiy                      |
| :ballot_box_with_check: Header     | :white_check_mark: Message         | :ballot_box_with_check: Item             | :white_check_mark: Dimmer         |                                     |
| :ballot_box_with_check: Icon       | :rocket: Pagination                | :ballot_box_with_check: Statistic        | :white_check_mark: Dropdown       |                                     |
| :ballot_box_with_check: Image      | :ballot_box_with_check: Table      |                                          | :x: Embed                         |                                     |
| :ballot_box_with_check: Input      |                                    |                                          | :white_check_mark: Modal          |                                     |
| :ballot_box_with_check: Label      |                                    |                                          | :white_check_mark: Popup          |                                     |
| :ballot_box_with_check: List       |                                    |                                          | :white_check_mark: Progress       |                                     |
| :ballot_box_with_check: Loader     |                                    |                                          | :white_check_mark: Rating         |                                     |
| :ballot_box_with_check: Rail       |                                    |                                          | :white_check_mark: Search         |                                     |
| :ballot_box_with_check: Reveal     |                                    |                                          | :x: Shape                         |                                     |
| :ballot_box_with_check: Segment    |                                    |                                          | :white_check_mark: Sidebar        |                                     |
| :ballot_box_with_check: Step       |                                    |                                          | :x: Sticky                        |                                     |
|                                    |                                    |                                          | :white_check_mark: Tab            |                                     |
|                                    |                                    |                                          | :white_check_mark: Transition     |                                     |

## Want to help?

Want to file a bug, contribute some code, or improve documentation? Great! Please read the [contributing guidelines](https://github.com/edcarroll/ng2-semantic-ui/blob/master/CONTRIBUTING.md) to get going.

## Development

To generate all library files:

```bash
$ npm run lib:compile
# use lib:compile:w to watch for changes
```

To run the demo app:
```bash
$ npm run demo:serve
```

## Testing

To run the unit tests suite:
```bash
$ npm run test
```

## License

MIT © [Edward Carroll](https://github.com/edcarroll)
"
1876,"A simple React Native library, enabling the creation of fully customized header for your iOS and Android apps.","<div align=""center"">
  <image align=""center"" src=""./assets/readme_header.svg""/>
</div>
<div align=""center"">
  <h1>Sticky Parallax Header</h1>
</div>

<div align=""center"">
  <image src=""https://app.bitrise.io/app/1ffc1637c8691f4f/status.svg?token=2vMEootz4cobIHmtr5UeYg&branch=develop""/>
  <image src=""https://badge.fury.io/js/react-native-sticky-parallax-header.svg""/>
  <image src=""https://img.shields.io/npm/dt/react-native-sticky-parallax-header""/>
</div>
<div align=""center"">
  <br/><em>Brought with</em> &nbsp;❤️ <em>by</em> &nbsp; <a href=""https://www.netguru.com""><img align=""center"" alt=""Netguru logo"" src='./assets/readme_netguru_logo.png' width='30'/></a>
</div>

# Introduction

<p align=""center"">
  react-native-sticky-parallax-header is a simple React Native library, enabling to create a fully custom header layout for your iOS, Android and web apps.
</p>

<div align=""center"">
  <a href=""#Docs"">Documentation</a> &nbsp;|&nbsp; <a href=""#Preview"">Preview</a> &nbsp;|&nbsp; <a href=""#Installation"">Installation</a> &nbsp;|&nbsp; <a href=""#Contributing"">Contributing</a> &nbsp;
</div>

## Documentation <a name=""Docs""></a>
Read the full Docs at: <a href=""https://netguru.github.io/sticky-parallax-header/"">https://netguru.github.io/sticky-parallax-header/</a>

## Preview

Sticky Parallax Header ships with 3 different use cases for sticky headers and a possibility to create fully custom header!

|                     Tabbed Header                      |                     Avatar Header                      |                      Details Header                      |
| :----------------------------------------------------: | :----------------------------------------------------: | :------------------------------------------------------: |
| ![Tabbed Header Gif](./assets/readme_TabbedHeader.gif) | ![Avatar Header Gif](./assets/readme_AvatarHeader.gif) | ![Details Header Gif](./assets/readme_DetailsHeader.gif) |

## In Use

**Check the live demo on Expo Snack [here](https://snack.expo.dev/@netguru_rnd/sticky-parallax-header-example).**

This is how you can display header in your app:

```tsx
import * as React from 'react'
import { DetailsHeaderScrollView } from 'react-native-sticky-parallax-header'
import { SafeAreaProvider } from 'react-native-safe-area-context'

const TestScreen = () => (
  <SafeAreaProvider>
    <DetailsHeaderScrollView {...scrollProps} {...detailsHeaderProps}>
      {/** scroll view content */}
    </DetailsHeaderScrollView>
  </SafeAreaProvider>
)

export default TestScreen
```

## Installation

### Installation & requirements

:information_source: Library supports react-native version 0.64+

#### Install latest library version

```sh
$ yarn add react-native-sticky-parallax-header@rc
```

#### Install library's dependencies

```sh
yarn add react-native-reanimated react-native-safe-area-context
```

After installation:
- check Reanimated installation [guide](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation)
- handle Pods installation with `npx pod-install`
- wrap your root component with `SafeAreaProvider` from `react-native-safe-area-context`

<h1 id=""Contributing"">Contributing</h1>

[Contributing guidelines](CONTRIBUTING.md)

# License

This library is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).
"
328,A browser developer tool extension to inspect performance of React components.,"**Looking for maintainers**

# React Performance Devtool

[![Build Status](https://travis-ci.org/nitin42/react-perf-devtool.svg?branch=master)](https://travis-ci.org/nitin42/react-perf-devtool)
![Release Status](https://img.shields.io/badge/status-stable-brightgreen.svg)
![Author](https://img.shields.io/badge/author-Nitin%20Tulswani-lightgrey.svg)
![current-version](https://img.shields.io/badge/version-3.1.8-blue.svg)
![extension](https://img.shields.io/badge/extension-5.3-ff69b4.svg)
[![npm downloads](https://img.shields.io/npm/dt/react-perf-devtool.svg)](https://www.npmjs.com/package/react-perf-devtool)

> A devtool for inspecting the performance of React Components

<br/>

<p align=""center"">
  <img src=""https://i.gyazo.com/332f573872d396e4f665d58e491a8ccd.png"">
</p>

<br/>

## Table of contents

* [Introduction](#introduction)

* [Demo](#demo)
  * [Browser extension](#browser-extension)
  * [Log the measures to console](#log-the-measures-to-a-console)

* [Uses](#uses)

* [Install](#install)

* [Usage](#usage)
  * [Using the browser extension](#using-the-browser-extension)
  * [Printing the measures to console](#printing-the-measures-to-the-console)

* [Description](#description)

* [Phases](#phases)

* [Implementation](#implementation)

* [Contributing](#contributing)

* [License](#license)


## Introduction

**React Performance Devtool** is a browser extension for inspecting the performance of React Components. It statistically examines the performance of React components based on the measures which are collected by React using `window.performance` API.

Along with the browser extension, the measures can also be inspected in a console. See the [usage](#usage) section for more details.

This project started with a purpose of extending the work done by [Will Chen](https://github.com/wwwillchen) on a proposal for React performance table. You can read more about it [here](https://github.com/facebook/react-devtools/issues/801#issuecomment-350919145).

## Demo

### Browser extension

A demo of the extension being used to examine the performance of React components on my website.

<img src=""http://g.recordit.co/m8Yv1RTR6v.gif"">

### Log the measures to a console

Performance measures can also be logged to a console. With every re-render, measures are updated and logged to the console.

<img src=""http://g.recordit.co/YX44uaVr3I.gif"">

## Uses

* Remove or unmount the component instances which are not being used.

* Inspect what is blocking or taking more time after an operation has been started.

* Examine the table and see for which components, you need to write [shouldComponentUpdate](https://reactjs.org/docs/react-component.html#shouldcomponentupdate) lifecycle hook.

* Examine which components are taking more time to load.

## Install

To use this devtool, you'll need to install a npm module which will register a listener (read more about this in [usage](#usage) section) and the browser extension.

**Installing the extension**

The below extensions represent the current stable release.

* [Chrome extension](https://chrome.google.com/webstore/detail/react-performance-devtool/fcombecpigkkfcbfaeikoeegkmkjfbfm)
* [Firefox extension](https://addons.mozilla.org/en-US/firefox/addon/nitin-tulswani/)
* **Standalone app coming soon**

**Installing the npm module**

```
npm install react-perf-devtool
```

A `umd` build is also available via [unpkg](https://www.unpkg.com)

```js
<script crossorigin src=""https://unpkg.com/react-perf-devtool@3.0.8-beta/lib/npm/hook.js""></script>
```

> This extension and package also depends on react. Please make sure you have those installed as well.

> Note - The npm module is important and required to use the devtool. So make sure you've installed it before using the browser extension.

## Usage

This section of the documentation explain the usage of devtool and the API for registering an observer in a React app.

### Browser Compatibility
`react-perf-devtool` relies on the native `window.PerformanceObserver` API that got added in **Chrome v52** and **Firefox v57**. For further information, see the official Mozilla Docs [here](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver#Browser_compatibility).

### Using the browser extension

To use this devtool extension, you'll need to register an observer in your app which will observe a collection of data (performance measures) over a time.

**Register observer**

Registering an observer is very simple and is only one function call away. Let's see how!

```js
const { registerObserver } = require('react-perf-devtool')

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver()
```

You can place this code inside your `index.js` file (recommended) or any other file in your app.

> Note - This should only be used in development mode when you need to inspect the performance of React components. Make sure to remove it when building for production.

Registering an observer hooks an object containing information about the **events** and **performance measures** of React components to the
[window](https://developer.mozilla.org/en-US/docs/Web/API/Window/window) object, which can then be accessed inside the inspected window using [eval()](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/devtools.inspectedWindow/eval).

With every re-render, this object is updated with new measures and events count.
The extension takes care of clearing up the memory and also the cache.

You can also pass an **`option`** object and an optional **`callback`** which receives an argument containing the parsed and aggregated measures

**Using the callback**

An optional callback can also be passed to `registerObserver` which receives parsed measures as its argument.

You can use this callback to inspect the parsed and aggregated measures, or you can integrate it with any other use case. You can also leverage these performance measures using Google Analytics by sending these measures to analytics dashboard . This process is documented [here](https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics).

Example -

```js
const { registerObserver } = require('react-perf-devtool')

function callback(measures) {
  // do something with the measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver({}, callback)
```

After you've registered the observer, start your local development server and go to `http://localhost:3000/`.

> Note - This extension works only for React 16 or above versions of it.

After you've installed the extension successfully, you'll see a tab called **React Performance** in Chrome Developer Tools.

<img src=""./art/tab.png"">

### Printing the measures to the console

The performance measures can also be logged to the console. However, the process of printing the measures is not direct. You'll need to set up a server which will listen the measures. For this, you can use [micro](https://github.com/zeit/micro) by [Zeit](https://zeit.co/) which is a HTTP microservice.

```
npm install --save micro
```


You can pass an **option** object as an argument to `registerObserver` to enable logging and setting up a port number.

**Using the option object**

```js
{
  shouldLog: boolean, // default value: false
  port: number // default value: 8080
  timeout: number // default value: 2000
}
```

You can pass three properties to the **`option`** object, `shouldLog` and `port`.

* `shouldLog` - It takes a **boolean** value. If set to true, measures will be logged to the console.

* `port` - Port number for the server where the measures will be send

* `timeout` - A timeout value to defer the initialisation of the extension.

If your application takes time to load, it's better to defer the initialisation of extension by specifying the timeout value through `timeout` property. This ensures that the extension will load only after your application has properly loaded in the browser so that the updated measures can be rendered. However, you can skip this property if your application is in small size.

**Example**

```js
// index.js file in your React App

const React = require('react')
const ReactDOM = require('react-dom')
const { registerObserver } = require('react-perf-devtool')

const Component = require('./Component') // Some React Component

const options = {
  shouldLog: true,
  port: 8080,
  timeout: 12000 // Load the extension after 12 sec.
}

function callback(measures) {
  // do something with the measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver(options, callback)

ReactDOM.render(<Component />, document.getElementById('root'))
```

```js
// server.js
const { json } = require('micro')

module.exports = async req => {
  console.log(await json(req))
  return 200
}
```

```js
// package.json

{
  ""main"": ""server.js"",
  ""scripts"": {
    ""start-micro"": ""micro -p 8080""
  }
}

```

**Schema of the measures**

Below is the schema of the performance measures that are logged to the console.

```js
{
  componentName, 
  mount: { // Mount time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  render: { // Render time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  update: { // Update time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  unmount: { // Unmount time
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  totalTimeSpent, // Total time taken by the component combining all the phases
  percentTimeSpent, // Percent time
  numberOfInstances, // Number of instances of the component

  // Time taken in lifecycle hooks
  componentWillMount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
  componentDidMount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
  componentWillReceiveProps: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  shouldComponentUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentWillUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentDidUpdate: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  },
  componentWillUnmount: {
    averageTimeSpentMs,
    numberOfTimes,
    totalTimeSpentMs,
  }
}
```

**components**

You can also inspect the performance of specific components using options through **`components`** property.

<img src=""http://g.recordit.co/sAQGSOrCA7.gif"">

Example -

```js
const options = {
  shouldLog: true,
  port: 3000,
  components: ['App', 'Main'] // Assuming you've these components in your project
}

function callback(measures) {
  // do something with measures
}

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver(options, callback)
```

## Description

### Overview section

<p align=""center"">
  <img src=""https://i.gyazo.com/bae8420649749a5be0a2a7e589cdbc65.png"">
</p>

Overview section represents an overview of total time (%) taken by all the components in your application.

### Results section

<p align=""center"">
  <img src=""https://i.gyazo.com/74a96461182539f9866db630ab645719.png"">
</p>

* Time taken by all the components - Shows the time taken by all the components (combining all the phases).

* Time duration for committing changes - Shows the time spent in committing changes. Read more about this [here]()

* Time duration for committing host effects - Shows the time spent in committing host effects i.e committing when a new tree is inserted (update) and no. of host effects (effect count in commit).

* Time duration for calling lifecycle methods - Reports the time duration of calling lifecycle hooks and total no of methods called, when a lifecycle hook schedules a cascading update.

* Total time

### Top section

<p align=""center"">
  <img src=""https://i.gyazo.com/3728c55035bdcdc40b68919fe095e549.png"" />
</p>

**clear** - The clear button clears the measures from the tables and also wipes the results.

**Reload the inspected window** - This button reloads the inspected window and displays the new measures.

**Pending events** - This indicates the pending measures (React performance data).


### Components section

<p align=""center"">
  <img src=""https://i.gyazo.com/ac983b28ac614fb13d980ae681ffd049.png"">
</p>

This section shows the time taken by a component in a phase, number of instances of a component and total time combining all the phases in **ms** and **%**

## Phases

Given below are the different phases for which React measures the performance:

* **React Tree Reconciliation** - In this phase, React renders the root node and creates a work in progress fiber. If there were some cascading updates while reconciling, it will pause any active measurements and will resumed them in a deferred loop. This is caused when a top-level update interrupts the previous render. If an error was thrown during the render phase then it captures the error by finding the nearest error boundary or it uses the root if there is no error boundary.

* **Commit changes** - In this phase, the work that was completed is committed. Also, it checks whether the root node has any side-effect. If it has an effect then add it to the list (read more this list data structure [here](https://github.com/nitin42/Making-a-custom-React-renderer/blob/master/part-one.md)) or commit all the side-effects in the tree. If there is a scheduled update in the current commit, then it gives a warning about ***cascading update in lifecycle hook***. During the commit phase, updates are scheduled in the current commit. Also, updates are scheduled if the phase/stage is not [componentWillMount](https://reactjs.org/docs/react-component.html#componentwillmount) or [componentWillReceiveProps](https://reactjs.org/docs/react-component.html#componentwillreceiveprops).

* **Commit host effects** - Host effects are committed whenever a new tree is inserted. With every new update that is scheduled, total host effects are calculated. This process is done in two phases, the first phase performs all the host node insertions, deletion, update and ref unmounts and the other phase performs all the lifecycle and ref callbacks.

* **Commit lifecycle** - When the first pass was completed while committing the host effects, the work in progress tree became the current tree. So work in progress is current during **componentDidMount/update**. In this phase, all the lifecycles and ref callbacks are committed. **Committing lifecycles happen as a separate pass so that all the placements, updates and deletions in the entire tree have already been invoked**.

## Implementation

In previous version of this devtool, performance metrics were being queried instead of listening for an event type. This required to comment the line inside the `react-dom` package (`react-dom.development.js`) so that these metrics can be captured by this tool.

### Trade-offs
  * Need to update the commonjs react-dom development bundle (commenting the line)
  * No way of sending the measures from the app frame to the console
  * Need to query measures rather than listening to an event once
  * No control on how to inspect the measures for a particular use case (for eg - log only the render and update performance of a component)

But now, with the help of [Performance Observer](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver) API, an observer can be registered to listen to an event of a particular type and get the entries (performance measures). `react-perf-devtool` provides an API on top of the performance observer, a function that registers an observer.

```js
const { registerObserver } = require('react-perf-devtool')

// assign the observer to the global scope, as the GC will delete it otherwise
window.observer = registerObserver()
```

This observer listens to the React performance measurement event.
It hooks an object containing information about the events and performance measures of React components to the window object which can then be accessed inside the inspected window using eval().

With every re-render, this object is updated with new measures and events count. The extension takes care of clearing up the memory and also the cache.

An `option` object and an optional `callback` can also be passed to `registerObserver`. The `option` object is useful when performance measures are to be logged to a console. The `callback` receives parsed and aggregated results (metrics) as its argument which can then be used for analyses.
### Benefits

Calculating and aggregating the results happens inside the app frame and not in the devtool. It has its own benefits.
  * These measures can be send to a server for analyses
  * Measures can be logged to a console
  * Particular measures can be inspected in the console with the help of configuration object (not done with the API for it yet)
  * This also gives control to the developer on how to manage and inspect the measures apart from using the extension

## Todos / Ideas / Improvements

- [x] New UI for devtool
- [x] Make the implementation of measures generator more concrete
- [ ] Add support for older versions of React
- [x] Make the tool more comprehensible

## Contributing

[Read the contributing guide](./CONTRIBUTING.md)

## License

MIT
"
15,An Emacs framework for the stubborn martian hacker,"<div align=""center"">

# Doom Emacs

[Install](#install) • [Documentation] • [FAQ] • [Screenshots] • [Contribute](#contribute)

![Made with Doom Emacs](https://img.shields.io/github/tag/doomemacs/doomemacs.svg?style=flat-square&label=release&color=58839b)
![Supports Emacs 27.1 - 28.1](https://img.shields.io/badge/Supports-Emacs_27.1--28.1-blueviolet.svg?style=flat-square&logo=GNU%20Emacs&logoColor=white)
![Latest commit](https://img.shields.io/github/last-commit/doomemacs/doomemacs/master?style=flat-square)
![Build status: master](https://img.shields.io/github/workflow/status/doomemacs/doomemacs/CI/master?style=flat-square)
[![Discord Server](https://img.shields.io/discord/406534637242810369?color=738adb&label=Discord&logo=discord&logoColor=white&style=flat-square)][Discord]
[![Discourse server](https://img.shields.io/discourse/users?server=https%3A%2F%2Fdiscourse.doomemacs.org&logo=discourse&label=Discourse&style=flat-square&color=9cf)][Discourse]

![Doom Emacs Screenshot](https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/main.png)

</div>

---

### Table of Contents
- [Introduction](#introduction)
- [Features](#features)
- [Prerequisites](#prerequisites)
- [Install](#install)
- [Roadmap](#roadmap)
- [Getting help](#getting-help)
- [Contribute](#contribute)


# Introduction
<a href=""http://ultravioletbat.deviantart.com/art/Yay-Evil-111710573"">
  <img src=""https://raw.githubusercontent.com/doomemacs/doomemacs/screenshots/cacochan.png"" align=""right"" />
</a>

> It is a story as old as time. A stubborn, shell-dwelling, and melodramatic
> vimmer—envious of the features of modern text editors—spirals into
> despair before he succumbs to the [dark side][evil-mode]. This is his config.

Doom is a configuration framework for [GNU Emacs] tailored for Emacs bankruptcy
veterans who want less framework in their frameworks, a modicum of stability
(and reproducibility) from their package manager, and the performance of a hand
rolled config (or better). It can be a foundation for your own config or a
resource for Emacs enthusiasts to learn more about our favorite operating
system.

Its design is guided by these mantras:

+ **Gotta go fast.** Startup and run-time performance are priorities. Doom goes
  beyond by modifying packages to be snappier and load lazier.
+ **Close to metal.** There's less between you and vanilla Emacs by design.
  That's less to grok and less to work around when you tinker. Internals ought
  to be written as if reading them were part of Doom's UX, and it is!
+ **Opinionated, but not stubborn.** Doom is about reasonable defaults and
  curated opinions, but use as little or as much of it as you like.
+ **Your system, your rules.** You know better. At least, Doom hopes so! It
  won't *automatically* install system dependencies (and will force plugins not
  to either). Rely on `doom doctor` to tell you what's missing.
+ **Nix/Guix is a great idea!** The Emacs ecosystem is temperamental. Things
  break and they break often. Disaster recovery should be a priority! Doom's
  package management should be declarative and your private config reproducible,
  and comes with a means to roll back releases and updates (still a WIP).
  
Check out [the FAQ][FAQ] for answers to common questions about the project.


# Features
- Minimalistic good looks inspired by modern editors.
- Curated and sane defaults for many packages, (major) OSes, and Emacs itself.
- A modular organizational structure for separating concerns in your config.
- A standard library designed to simplify your elisp bike shedding.
- A declarative [package management system][package-management] (powered by
  [straight.el]) with a command line interface. Install packages from anywhere,
  not just (M)ELPA, and pin them to any commit.
- Optional vim emulation powered by [evil-mode], including ports of popular vim
  plugins like [vim-sneak], [vim-easymotion], [vim-unimpaired] and
  [more][ported-vim-plugins]!
- Opt-in LSP integration for many languages, using [lsp-mode] or [eglot]
- Support for *many* programming languages. Includes syntax highlighting,
  linters/checker integration, inline code evaluation, code completion (where
  possible), REPLs, documentation lookups, snippets, and more!
- Support for *many* tools, like docker, pass, ansible, terraform, and more.
- A Spacemacs-esque [keybinding scheme][bindings], centered around leader
  and localleader prefix keys (<kbd>SPC</kbd> and <kbd>SPC</kbd><kbd>m</kbd> for
  evil users, <kbd>C-c</kbd> and <kbd>C-c l</kbd> for vanilla users).
- A rule-based [popup manager][popup-system] to control how temporary buffers
  are displayed (and disposed of).
- Per-file indentation style detection and [editorconfig] integration. Let
  someone else argue about tabs vs **_spaces_**.
- Project-management tools and framework-specific minor modes with their own
  snippets libraries.
- Project search (and replace) utilities, powered by [ripgrep] and [ivy] or
  [helm].
- Isolated and persistent workspaces (also substitutes for vim tabs).
- Support for Chinese and Japanese input systems.
- Save a snapshot of your shell environment to a file for Emacs to load at
  startup. No more struggling to get Emacs to inherit your `PATH`, among other
  things.


# Prerequisites
+ Git 2.23+
+ Emacs 27.1+ (*28.1 is recommended*, or [native-comp](https://www.emacswiki.org/emacs/GccEmacs). **29+ is not supported**).
+ [ripgrep] 11.0+
+ GNU `find`
+ *OPTIONAL:* [fd] 7.3.0+ (improves file indexing performance for some commands)
  
Doom is comprised of [~150 optional modules][Modules], some of which may have
additional dependencies. [Visit their documentation][Modules] or run `bin/doom
doctor` to check for any that you may have missed.


# Install
``` sh
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
~/.emacs.d/bin/doom install
```

Then [read our Getting Started guide][getting-started] to be walked through
installing, configuring and maintaining Doom Emacs.

It's a good idea to add `~/.emacs.d/bin` to your `PATH`! Other `bin/doom`
commands you should know about:

+ `doom sync` to synchronize your private config with Doom by installing missing
  packages, removing orphaned packages, and regenerating caches. Run this
  whenever you modify your private `init.el` or `packages.el`, or install/remove
  an Emacs package through your OS package manager (e.g. mu4e or agda).
+ `doom upgrade` to update Doom to the latest release & all installed packages.
+ `doom doctor` to diagnose common issues with your system and config.
+ `doom env` to dump a snapshot of your shell environment to a file that Doom
  will load at startup. This allows Emacs to inherit your `PATH`, among other
  things.
+ `doom build` to recompile all installed packages (use this if you up/downgrade
  Emacs).


# Roadmap
Doom is an active and ongoing project. To make that development more
transparent, its roadmap (and other concerns) are published across three github
project boards and a newsletter:

+ [Development Roadmap](https://discourse.doomemacs.org/t/development-roadmap/42):
  roughly outlines our goals between release milestones and their progress.
+ [Plugins under review](https://github.com/orgs/doomemacs/projects/5):
  lists plugins we are watching and considering for inclusion, and what their
  status for inclusion is. Please consult this list before requesting new
  packages/features.
+ [Upstream bugs](https://github.com/orgs/doomemacs/projects/7): lists
  issues that originate from elsewhere, and whether or not we have local
  workarounds or temporary fixes for them.
+ ~~Doom's newsletter~~ (not finished) will contain changelogs in between
  releases.
  

# Getting help
Emacs is no journey of a mere thousand miles. You _will_ run into problems and
mysterious errors. When you do, here are some places you can look for help:

+ [Our documentation][documentation] covers many use cases.
  + [The Configuration section][configuration] covers how to configure Doom and
    its packages.
  + [The Package Management section][package-management] covers how to install
    and disable packages.
  + [This section][bin/doom] explains the `bin/doom` script's most important
    commands.
  + [This section][common-mistakes] lists some common configuration mistakes new
    users make, when migrating a config from another distro or their own.
  + [This answer][change-theme] shows you how to add your own themes to your
    private config.
  + [This answer][change-font] shows you how to change the default font.
  + Your issue may be documented in the [FAQ].
+ With Emacs built-in help system documentation is a keystroke away:
  + For functions: <kbd>SPC h f</kbd> or <kbd>C-h f</kbd>
  + For variables: <kbd>SPC h v</kbd> or <kbd>C-h v</kbd>
  + For a keybind: <kbd>SPC h k</kbd> or <kbd>C-h k</kbd>
  + To search available keybinds: <kbd>SPC h b b</kbd> or <kbd>C-h b b</kbd>
+ Run `bin/doom doctor` to detect common issues with your development
  environment and private config.
+ Check out the [FAQ] or [Discourse FAQs][discourse-faq], in case your question
  has already been answered.
+ Search [Doom's issue tracker](https://github.com/doomemacs/doomemacs/issues) in case your issue was already
  reported.
+ Hop on [our Discord server][discord]; it's active and friendly! Keep an eye on
  the #announcements channel, where I announce breaking updates and releases.


# Contribute
[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com) 
[![Elisp styleguide](https://img.shields.io/badge/elisp-style%20guide-purple?style=flat-square)](https://github.com/bbatsov/emacs-lisp-style-guide)
[![Donate on liberapay](https://img.shields.io/badge/liberapay-donate-1.svg?style=flat-square&logo=liberapay&color=blue)][liberapay]
[![Donate on paypal](https://img.shields.io/badge/paypal-donate-1?style=flat-square&logo=paypal&color=blue)][paypal]

Doom is a labor of love and incurable madness, but I'm only one guy. Doom
wouldn't be where it is today without your help. I welcome contributions of any
kind!

+ I :heart: pull requests and bug reports (see the [Contributing
  Guidelines][contribute])!
+ Don't hesitate to [tell me my Elisp-fu
  sucks](https://github.com/doomemacs/doomemacs/issues/new), but please tell me
  why.
+ Hop on [our Discord server][Discord] and say hi! Help others, hang out or talk
  to me about Emacs, gamedev, programming, physics, pixel art, anime, gaming --
  anything you like. Nourish this lonely soul.
+ If you'd like to support my work financially, buy me a drink through
  [liberapay] or [paypal]. My work contends with studies, adventures in indie
  gamedev and freelance work. Donations help me allocate more time to my Emacs
  and OSS capers.


[contribute]: docs/contributing.org
[discord]: https://discord.gg/qvGgnVx
[discourse]: https://discourse.doomemacs.org
[discourse-faq]: https://discourse.doomemacs.org/tag/faq
[documentation]: docs/index.org
[faq]: https://github.com/hlissner/doom-emacs/blob/master/docs/faq.org
[getting-started]: docs/getting_started.org
[install]: docs/getting_started.org#install
[backtrace]: docs/getting_started.org#how-to-extract-a-backtrace-from-an-error
[configuration]: docs/getting_started.org#configuring-doom
[package-management]: docs/getting_started.org#package-management
[bin/doom]: docs/getting_started.org#the-bindoom-utility
[common-mistakes]: docs/getting_started.org#common-mistakes-when-configuring-doom-emacs
[change-theme]: docs/faq.org#how-do-i-change-the-theme
[change-font]: docs/faq.org#how-do-i-change-the-fonts
[modules]: docs/modules.org
[popup-system]: modules/ui/popup/README.org
[screenshots]: https://github.com/doomemacs/doomemacs/tree/screenshots#emacsd-screenshots

[bindings]: modules/config/default/+evil-bindings.el
[editorconfig]: http://editorconfig.org/
[evil-mode]: https://github.com/emacs-evil/evil
[fd]: https://github.com/sharkdp/fd
[gnu emacs]: https://www.gnu.org/software/emacs/
[helm]: https://github.com/emacs-helm/helm
[ivy]: https://github.com/abo-abo/swiper
[lsp-mode]: https://github.com/emacs-lsp/lsp-mode
[eglot]: https://github.com/joaotavora/eglot
[nix]: https://nixos.org
[ported-vim-plugins]: modules/editor/evil/README.org#ported-vim-plugins
[ripgrep]: https://github.com/BurntSushi/ripgrep
[straight.el]: https://github.com/radian-software/straight.el
[vim-easymotion]: https://github.com/easymotion/vim-easymotion
[vim-lion]: https://github.com/tommcdo/vim-lion
[vim-sneak]: https://github.com/justinmk/vim-sneak
[vim-unimpaired]: https://github.com/tpope/vim-unimpaired

[liberapay]: https://liberapay.com/hlissner/donate
[paypal]: https://paypal.me/henriklissner/10
"
1778,"Modern self-hosting framework, fully automated from empty disk to operating services with a single command.","# Khue's Homelab

**[Features](#features) • [Get Started](#get-started) • [Documentation](https://homelab.khuedoan.com)**

[![tag](https://img.shields.io/github/v/tag/khuedoan/homelab?style=flat-square&logo=semver&logoColor=white)](https://github.com/khuedoan/homelab/tags)
[![document](https://img.shields.io/website?label=document&logo=gitbook&logoColor=white&style=flat-square&url=https%3A%2F%2Fhomelab.khuedoan.com)](https://homelab.khuedoan.com)
[![license](https://img.shields.io/github/license/khuedoan/homelab?style=flat-square&logo=gnu&logoColor=white)](https://www.gnu.org/licenses/gpl-3.0.html)
[![stars](https://img.shields.io/github/stars/khuedoan/homelab?logo=github&logoColor=white&color=gold&style=flat-square)](https://github.com/khuedoan/homelab)

This project utilizes [Infrastructure as Code](https://en.wikipedia.org/wiki/Infrastructure_as_code) and [GitOps](https://www.weave.works/technologies/gitops) to automate provisioning, operating, and updating self-hosted services in my homelab.
It can be used as a highly customizable framework to build your own homelab.

> **What is a homelab?**
>
> Homelab is a laboratory at home where you can self-host, experiment with new technologies, practice for certifications, and so on.
> For more information about homelab in general, see the [r/homelab introduction](https://www.reddit.com/r/homelab/wiki/introduction).

## Overview

Project status: **ALPHA**

This project is still in the experimental stage, and I don't use anything critical on it.
Expect breaking changes that may require a complete redeployment.
A proper upgrade path is planned for the stable release.
More information can be found in [the roadmap](#roadmap) below.

### Hardware

![Hardware](https://user-images.githubusercontent.com/27996771/98970963-25137200-2543-11eb-8f2d-f9a2d45756ef.JPG)

- 4 × NEC SFF `PC-MK26ECZDR` (Japanese version of the ThinkCentre M700):
    - CPU: `Intel Core i5-6600T @ 2.70GHz`
    - RAM: `16GB`
    - SSD: `128GB`
- TP-Link `TL-SG108` switch:
    - Ports: `8`
    - Speed: `1000Mbps`

### Features

- [x] Common applications: Gitea, Seafile, Jellyfin, Paperless...
- [x] Automated bare metal provisioning with PXE boot
- [x] Automated Kubernetes installation and management
- [x] Installing and managing applications using GitOps
- [x] Automatic rolling upgrade for OS and Kubernetes
- [x] Automatically update apps (with approval)
- [x] Modular architecture, easy to add or remove features/components
- [x] Automated certificate management
- [x] Automatically update DNS records for exposed services
- [x] VPN without port forwarding
- [x] Expose services to the internet securely with [Cloudflare Tunnel](https://www.cloudflare.com/products/tunnel/)
- [x] CI/CD platform
- [x] Private container registry
- [x] Distributed storage
- [x] Support multiple environments (dev, prod)
- [ ] Monitoring and alerting 🚧
- [ ] Automated offsite backups 🚧
- [ ] Single sign-on 🚧
- [x] Infrastructure testing

Some demo videos and screenshots are shown here.
They can't capture all the project's features, but they are sufficient to get a concept of it.

| Demo                                                                                        |
| :--:                                                                                        |
| [![][deploy-demo]](https://asciinema.org/a/xkBRkwC6e9RAzVuMDXH3nGHp7)                       |
| Deploy with a single command (after updating the configuration files)                       |
| [![][pxe-demo]](https://www.youtube.com/watch?v=y-d7btNNAT8)                                |
| PXE boot                                                                                    |
| [![][homepage-demo]][homepage-demo]                                                         |
| Homepage with Ingress discovery powered by [Hajimari](https://github.com/toboshii/hajimari) |
| [![][grafana-demo]][grafana-demo]                                                           |
| Monitoring dashboard powered by [Grafana](https://grafana.com/)                             |
| [![][gitea-demo]][gitea-demo]                                                               |
| Git server powered by [Gitea](https://gitea.io/en-us/)                                      |
| [![][matrix-demo]][matrix-demo]                                                             |
| [Matrix](https://matrix.org/) chat server                                                   |
| [![][tekton-demo]][tekton-demo]                                                             |
| Continuous integration with [Tekton](https://tekton.dev/)                                   |
| [![][argocd-demo]][argocd-demo]                                                             |
| Continuous deployment with [ArgoCD](https://argoproj.github.io/cd/)                         |
| [![][lens-demo]][lens-demo]                                                                 |
| Cluster management using [Lens](https://k8slens.dev/)                                       |
| [![][vault-demo]][vault-demo]                                                               |
| Secret management with [Vault](https://www.vaultproject.io/)                                |

[deploy-demo]: https://asciinema.org/a/xkBRkwC6e9RAzVuMDXH3nGHp7.svg
[pxe-demo]: https://user-images.githubusercontent.com/27996771/157303477-df2e7410-8f02-4648-a86c-71e6b7e89e35.png
[homepage-demo]: https://user-images.githubusercontent.com/27996771/149445807-0f869eb7-d8f5-4fef-ab97-ac281df91a06.png
[grafana-demo]: https://user-images.githubusercontent.com/27996771/149446631-1c5d056b-1fdc-48e6-96ba-e1abe1762be0.png
[gitea-demo]: https://user-images.githubusercontent.com/27996771/149444871-38889c9d-862f-41ff-8c05-8ece21da3e9c.png
[matrix-demo]: https://user-images.githubusercontent.com/27996771/149448510-7163310c-2049-4ccd-901d-f11f605bfc32.png
[tekton-demo]: https://user-images.githubusercontent.com/27996771/149445374-58fd0605-bb9a-46e4-81d6-5e584d2b94a9.png
[argocd-demo]: https://user-images.githubusercontent.com/27996771/149444716-fc0d7282-4cf7-4ddb-97a4-1a3fb47ff2b8.png
[lens-demo]: https://user-images.githubusercontent.com/27996771/149448896-9d79947d-468c-45c6-a81d-b43654e8ab6b.png
[vault-demo]: https://user-images.githubusercontent.com/27996771/149452309-de4a893b-e94c-4ba8-9119-ea87449cf77e.png

### Tech stack

<table>
    <tr>
        <th>Logo</th>
        <th>Name</th>
        <th>Description</th>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://simpleicons.org/icons/ansible.svg""></td>
        <td><a href=""https://www.ansible.com"">Ansible</a></td>
        <td>Automate bare metal provisioning and configuration</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/argo/icon/color/argo-icon-color.svg""></td>
        <td><a href=""https://argoproj.github.io/cd"">ArgoCD</a></td>
        <td>GitOps tool built to deploy applications to Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/jetstack/cert-manager/raw/master/logo/logo.png""></td>
        <td><a href=""https://cert-manager.io"">cert-manager</a></td>
        <td>Cloud native certificate management</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/314135?s=200&v=4""></td>
        <td><a href=""https://www.cloudflare.com"">Cloudflare</a></td>
        <td>DNS and Tunnel</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png""></td>
        <td><a href=""https://www.docker.com"">Docker</a></td>
        <td>Ephemeral PXE server and convenient tools container</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/kubernetes-sigs/external-dns/raw/master/docs/img/external-dns.png""></td>
        <td><a href=""https://github.com/kubernetes-sigs/external-dns"">ExternalDNS</a></td>
        <td>Synchronizes exposed Kubernetes Services and Ingresses with DNS providers</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Fedora_logo.svg/267px-Fedora_logo.svg.png""></td>
        <td><a href=""https://getfedora.org/en/server"">Fedora Server</a></td>
        <td>Base OS for Kubernetes nodes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://upload.wikimedia.org/wikipedia/commons/b/bb/Gitea_Logo.svg""></td>
        <td><a href=""https://gitea.com"">Gitea</a></td>
        <td>Self-hosted Git service</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://grafana.com/static/img/menu/grafana2.svg""></td>
        <td><a href=""https://grafana.com"">Grafana</a></td>
        <td>Operational dashboards</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/helm/icon/color/helm-icon-color.svg""></td>
        <td><a href=""https://helm.sh"">Helm</a></td>
        <td>The package manager for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/k3s/icon/color/k3s-icon-color.svg""></td>
        <td><a href=""https://k3s.io"">K3s</a></td>
        <td>Lightweight distribution of Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/kubernetes/icon/color/kubernetes-icon-color.svg""></td>
        <td><a href=""https://kubernetes.io"">Kubernetes</a></td>
        <td>Container-orchestration system, the backbone of this project</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://github.com/grafana/loki/blob/main/docs/sources/logo.png?raw=true""></td>
        <td><a href=""https://grafana.com/oss/loki"">Loki</a></td>
        <td>Log aggregation system</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/longhorn/icon/color/longhorn-icon-color.svg""></td>
        <td><a href=""https://longhorn.io"">Longhorn</a></td>
        <td>Cloud native distributed block storage for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/60239468?s=200&v=4""></td>
        <td><a href=""https://metallb.org"">MetalLB</a></td>
        <td>Bare metal load-balancer for Kubernetes</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/1412239?s=200&v=4""></td>
        <td><a href=""https://www.nginx.com"">NGINX</a></td>
        <td>Kubernetes Ingress Controller</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://cncf-branding.netlify.app/img/projects/prometheus/icon/color/prometheus-icon-color.svg""></td>
        <td><a href=""https://prometheus.io"">Prometheus</a></td>
        <td>Systems monitoring and alerting toolkit</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://docs.renovatebot.com/assets/images/logo.png""></td>
        <td><a href=""https://www.whitesourcesoftware.com/free-developer-tools/renovate"">Renovate</a></td>
        <td>Automatically update dependencies</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://avatars.githubusercontent.com/u/47602533?s=200&v=4""></td>
        <td><a href=""https://tekton.dev"">Tekton</a></td>
        <td>Cloud native solution for building CI/CD systems</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://trow.io/trow.png""></td>
        <td><a href=""https://trow.io"">Trow</a></td>
        <td>Private container registry</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://simpleicons.org/icons/vault.svg""></td>
        <td><a href=""https://www.vaultproject.io"">Vault</a></td>
        <td>Secrets and encryption management system</td>
    </tr>
    <tr>
        <td><img width=""32"" src=""https://docs.zerotier.com/img/ZeroTierIcon.png""></td>
        <td><a href=""https://zerotier.com"">ZeroTier</a></td>
        <td>VPN without port forwarding</td>
    </tr>
</table>

## Get Started

- [Try it out locally](https://homelab.khuedoan.com/installation/sandbox) without any hardware (just 4 commands!)
- [Deploy on real hardware](https://homelab.khuedoan.com/installation/production/prerequisites) for production workload

## Roadmap

See [roadmap](https://homelab.khuedoan.com/reference/roadmap) and [open issues](https://github.com/khuedoan/homelab/issues) for a list of proposed features and known issues.

## Contributing

Any contributions you make are greatly appreciated.

Please see [contributing guide](https://homelab.khuedoan.com/reference/contributing) for more information.

## License

Copyright &copy; 2020 - 2022 Khue Doan

Distributed under the GPLv3 License.
See [license page](https://homelab.khuedoan.com/reference/license) or `LICENSE.md` file for more information.

## Acknowledgements

References:

- [Ephemeral PXE server inspired by Minimal First Machine in the DC](https://speakerdeck.com/amcguign/minimal-first-machine-in-the-dc)
- [ArgoCD usage and monitoring configuration in locmai/humble](https://github.com/locmai/humble)
- [README template](https://github.com/othneildrew/Best-README-Template)
- [Run the same Cloudflare Tunnel across many `cloudflared` processes](https://developers.cloudflare.com/cloudflare-one/tutorials/many-cfd-one-tunnel)
- [MAC address environment variable in GRUB config](https://askubuntu.com/questions/1272400/how-do-i-automate-network-installation-of-many-ubuntu-18-04-systems-with-efi-and)
- [Official k3s systemd service file](https://github.com/k3s-io/k3s/blob/master/k3s.service)
- [Official Cloudflare Tunnel examples](https://github.com/cloudflare/argo-tunnel-examples)
- [Initialize GitOps repository on Gitea and integrate with Tekton by RedHat](https://github.com/redhat-scholars/tekton-tutorial/tree/master/triggers)
- [SSO configuration from xUnholy/k8s-gitops](https://github.com/xUnholy/k8s-gitops)
- [Pre-commit config from k8s-at-home/flux-cluster-template](https://github.com/k8s-at-home/flux-cluster-template)
- [Diátaxis technical documentation framework](https://diataxis.fr)
- [Official Terratest examples](https://github.com/gruntwork-io/terratest/tree/master/test)

Here is a list of the contributors who have helped to improve this project.
Big shout-out to them!

- ![](https://github.com/locmai.png?size=24) [@locmai](https://github.com/locmai)
- ![](https://github.com/MatthewJohn.png?size=24) [@MatthewJohn](https://github.com/MatthewJohn)
- ![](https://github.com/karpfediem.png?size=24) [@karpfediem](https://github.com/karpfediem)
- ![](https://github.com/linhng98.png?size=24) [@linhng98](https://github.com/linhng98)
- ![](https://github.com/BlueHatbRit.png?size=24) [@BlueHatbRit](https://github.com/BlueHatbRit)
- ![](https://github.com/dotdiego.png?size=24) [@dotdiego](https://github.com/dotdiego)
- ![](https://github.com/Crimrose.png?size=24) [@Crimrose](https://github.com/Crimrose)
- ![](https://github.com/eventi.png?size=24) [@eventi](https://github.com/eventi)
- ![](https://github.com/Bourne-ID.png?size=24) [@Bourne-ID](https://github.com/Bourne-ID)
- ![](https://github.com/akwan.png?size=24) [@akwan](https://github.com/akwan)
- ![](https://github.com/trangmaiq.png?size=24) [@trangmaiq](https://github.com/trangmaiq)

If you feel you're missing from this list, feel free to add yourself in a PR.

## Stargazers over time

[![Stargazers over time](https://starchart.cc/khuedoan/homelab.svg)](https://starchart.cc/khuedoan/homelab)
"
38,Pluggable Ruby translation framework,"Mobility
========

[![Gem Version](https://badge.fury.io/rb/mobility.svg)][gem]
[![Build Status](https://github.com/shioyama/mobility/workflows/CI/badge.svg)][actions]
[![Code Climate](https://api.codeclimate.com/v1/badges/72200f2b00c339ec4537/maintainability.svg)][codeclimate]
[![Gitter Chat](https://badges.gitter.im/mobility-ruby/mobility.svg)](https://gitter.im/mobility-ruby/mobility)

[gem]: https://rubygems.org/gems/mobility
[actions]: https://github.com/shioyama/mobility/actions
[codeclimate]: https://codeclimate.com/github/shioyama/mobility
[docs]: http://www.rubydoc.info/gems/mobility
[wiki]: https://github.com/shioyama/mobility/wiki

**This is the readme for version 1.x of Mobility. If you are using an earlier
version (0.8.x or earlier), you probably want the readme on the [0-8
branch](https://github.com/shioyama/mobility/tree/0-8).**

Mobility is a gem for storing and retrieving translations as attributes on a
class. These translations could be the content of blog posts, captions on
images, tags on bookmarks, or anything else you might want to store in
different languages. For examples of what Mobility can do, see the
<a href=""#companies-using-mobility"">Companies using Mobility</a> section below.

Storage of translations is handled by customizable ""backends"" which encapsulate
different storage strategies. The default way to store translations
is to put them all in a set of two shared tables, but many alternatives are
also supported, including [translatable
columns](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-1) and
[model translation
tables](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-2), as
well as database-specific storage solutions such as
[json/jsonb](https://www.postgresql.org/docs/current/static/datatype-json.html) and
[Hstore](https://www.postgresql.org/docs/current/static/hstore.html) (for
PostgreSQL).

Mobility is a cross-platform solution, currently supporting both
[ActiveRecord](http://api.rubyonrails.org/classes/ActiveRecord/Base.html)
and [Sequel](http://sequel.jeremyevans.net/) ORM, with support for other
platforms planned.

For a detailed introduction to Mobility, see [Translating with
Mobility](http://dejimata.com/2017/3/3/translating-with-mobility). See also my
talk at RubyConf 2018, [Building Generic
Software](https://www.youtube.com/watch?v=RZkemV_-__A), where I explain the
thinking behind Mobility's design.

If you're coming from Globalize, be sure to also read the [Migrating from
Globalize](https://github.com/shioyama/mobility/wiki/Migrating-from-Globalize)
section of the wiki.

Installation
------------

Add this line to your application's Gemfile:

```ruby
gem 'mobility', '~> 1.2.9'
```

### ActiveRecord (Rails)

Requirements:
- ActiveRecord >= 5.0 (including 6.x)

(Support for most backends and features is also supported with
ActiveRecord/Rails 4.2, but there are some tests still failing. To see exactly
what might not work, check pending specs in Rails 4.2 builds.)

To translate attributes on a model, extend `Mobility`, then call `translates`
passing in one or more attributes as well as a hash of options (see below).

If using Mobility in a Rails project, you can run the generator to create an
initializer and a migration to create shared translation tables for the
default `KeyValue` backend:

```
rails generate mobility:install
```

(If you do not plan to use the default backend, you may want to use
the `--without_tables` option here to skip the migration generation.)

The generator will create an initializer file `config/initializers/mobility.rb`
which looks something like this:

```ruby
Mobility.configure do

  # PLUGINS
  plugins do
    backend :key_value

    active_record

    reader
    writer

    # ...
  end
end
```

Each method call inside the block passed to `plugins` declares a plugin, along
with an optional default. To use a different default backend, you can
change the default passed to the `backend` plugin, like this:

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :table
```

See other possible backends in the [backends section](#backends).

You can also set defaults for backend-specific options. Below, we set the
default `type` option for the KeyValue backend to `:string`.

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :key_value, type: :string
   end
 end
```

We will assume the configuration above in the examples that follow.

See [Getting Started](#quickstart) to get started translating your models.

### Sequel

Requirements:
- Sequel >= 4.0

When configuring Mobility, ensure that you include the `sequel` plugin:

```diff
 plugins do
   backend :key_value

-    active_record
+    sequel
```

You can extend `Mobility` just like in ActiveRecord, or you can use the
`mobility` plugin, which does the same thing:

```ruby
class Word < ::Sequel::Model
  plugin :mobility
  translates :name, :meaning
end
```

Otherwise everything is (almost) identical to AR, with the exception that there
is no equivalent to a Rails generator, so you will need to create the migration
for any translation table(s) yourself, using Rails generators as a reference.

The models in examples below all inherit from `ApplicationRecord`, but
everything works exactly the same if the parent class is `Sequel::Model`.

Usage
-----

### <a name=""quickstart""></a>Getting Started

Once the install generator has been run to generate translation tables, using
Mobility is as easy as adding a few lines to any class you want to translate.
Simply pass one or more attribute names to the `translates` method with a hash
of options, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, :meaning
end
```

Note: When using the KeyValue backend, use the options hash to pass each attribute's type:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    type: :string
  translates :meaning, type: :text
end
```

This is important because this is how Mobility knows to which of the [two translation tables](https://github.com/shioyama/mobility/wiki/KeyValue-Backend) it should save your translation.

You now have translated attributes `name` and `meaning` on the model `Word`.
You can set their values like you would any other attribute:

```ruby
word = Word.new
word.name = ""mobility""
word.meaning = ""(noun): quality of being changeable, adaptable or versatile""
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
word.save
word = Word.first
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
```

Presence methods are also supported:

```ruby
word.name?
#=> true
word.name = nil
word.name?
#=> false
word.name = """"
word.name?
#=> false
```

What's different here is that the value of these attributes changes with the
value of `I18n.locale`:

```ruby
I18n.locale = :ja
word.name
#=> nil
word.meaning
#=> nil
```

The `name` and `meaning` of this word are not defined in any locale except
English. Let's define them in Japanese and save the model:

```ruby
word.name = ""モビリティ""
word.meaning = ""(名詞):動きやすさ、可動性""
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
word.save
```

Now our word has names and meanings in two different languages:

```ruby
word = Word.first
I18n.locale = :en
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
I18n.locale = :ja
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
```

Internally, Mobility is mapping the values in different locales to storage
locations, usually database columns. By default these values are stored as keys
(attribute names) and values (attribute translations) on a set of translation
tables, one for strings and one for text columns, but this can be easily
changed and/or customized (see the [Backends](#backends) section below).

### <a name=""getset""></a> Getting and Setting Translations

The easiest way to get or set a translation is to use the getter and setter
methods described above (`word.name` and `word.name=`), enabled by including
the `reader` and `writer` plugins.

You may also want to access the value of an attribute in a specific locale,
independent of the current value of `I18n.locale` (or `Mobility.locale`). There
are a few ways to do this.

The first way is to define locale-specific methods, one for each locale you
want to access directly on a given attribute. These are called ""locale
accessors"" in Mobility, and can be enabled by including the `locale_accessors`
plugin, with a default set of accessors:

```diff
 plugins do
   # ...
+  locale_accessors [:en, :ja]
```

You can also override this default from `translates` in any model:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, locale_accessors: [:en, :ja]
end
```

Since we have enabled locale accessors for English and Japanese, we can access
translations for these locales with `name_en` and `name_ja`:

```ruby
word.name_en
#=> ""mobility""
word.name_ja
#=> ""モビリティ""
word.name_en = ""foo""
word.name
#=> ""foo""
```

Other locales, however, will not work:

```ruby
word.name_ru
#=> NoMethodError: undefined method `name_ru' for #<Word id: ... >
```

With no plugin option (or a default of `true`), Mobility generates methods for
all locales in `I18n.available_locales` at the time the model is first loaded.

An alternative to using the `locale_accessors` plugin is to use the
`fallthrough_accessors` plugin. This uses Ruby's
[`method_missing`](http://apidock.com/ruby/BasicObject/method_missing) method
to implicitly define the same methods as above, but supporting any locale
without any method definitions. (Locale accessors and fallthrough locales can
be used together without conflict, with locale accessors taking precedence if
defined for a given locale.)

Ensure the plugin is enabled:

```diff
 plugins do
   # ...
+  fallthrough_accessors
```

... then we can access any locale we want, without specifying them upfront:

```ruby
word = Word.new
word.name_fr = ""mobilité""
word.name_fr
#=> ""mobilité""
word.name_ja = ""モビリティ""
word.name_ja
#=> ""モビリティ""
```

(Note however that Mobility will complain if you have
`I18n.enforce_available_locales` set to `true` and you try accessing a locale
not present in `I18n.available_locales`; set it to `false` if you want to allow
*any* locale.)

Another way to fetch values in a locale is to pass the `locale` option to the
getter method, like this:

```ruby
word.name(locale: :en)
#=> ""mobility""
word.name(locale: :fr)
#=> ""mobilité""
```

Note that setting the locale this way will pass an option `locale: true` to the
backend and all plugins. Plugins may use this option to change their behavior
(passing the locale explicitly this way, for example, disables
[fallbacks](#fallbacks), see below for details).

You can also *set* the value of an attribute this way; however, since the
`word.name = <value>` syntax does not accept any options, the only way to do this is to
use `send` (this is included mostly for consistency):

```ruby
word.send(:name=, ""mobiliteit"", locale: :nl)
word.name_nl
#=> ""mobiliteit""
```

Yet another way to get and set translated attributes is to call `read` and
`write` on the storage backend, which can be accessed using the method
`<attribute>_backend`. Without worrying too much about the details of
how this works for now, the syntax for doing this is simple:

```ruby
word.name_backend.read(:en)
#=> ""mobility""
word.name_backend.read(:nl)
#=> ""mobiliteit""
word.name_backend.write(:en, ""foo"")
word.name_backend.read(:en)
#=> ""foo""
```

Internally, all methods for accessing translated attributes ultimately end up
reading and writing from the backend instance this way.  (The `write` methods
do not call underlying backend's methods to persist the change. This is up to
the user, so e.g. with ActiveRecord you should call `save` write the changes to
the database).

Note that accessor methods are defined in an included module, so you can wrap
reads or writes in custom logic:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title

  def title(*)
    super.reverse
  end
end
```

### Setting the Locale

It may not always be desirable to use `I18n.locale` to set the locale for
content translations. For example, a user whose interface is in English
(`I18n.locale` is `:en`) may want to see content in Japanese. If you use
`I18n.locale` exclusively for the locale, you will have a hard time showing
stored translations in one language while showing the interface in another
language.

For these cases, Mobility also has its own locale, which defaults to
`I18n.locale` but can be set independently:

```ruby
I18n.locale = :en
Mobility.locale              #=> :en
Mobility.locale = :fr
Mobility.locale              #=> :fr
I18n.locale                  #=> :en
```

To set the Mobility locale in a block, you can use `Mobility.with_locale` (like
`I18n.with_locale`):

```ruby
Mobility.locale = :en
Mobility.with_locale(:ja) do
  Mobility.locale            #=> :ja
end
Mobility.locale              #=> :en
```

Mobility uses [RequestStore](https://github.com/steveklabnik/request_store) to
reset these global variables after every request, so you don't need to worry
about thread safety. If you're not using Rails, consult RequestStore's
[README](https://github.com/steveklabnik/request_store#no-rails-no-problem) for
details on how to configure it for your use case.

### <a name=""fallbacks""></a>Fallbacks

Mobility offers basic support for translation fallbacks. First, enable the
`fallbacks` plugin:

```diff
 plugins do
   # ...
+  fallbacks
+  locale_accessors
```

Fallbacks will require `fallthrough_accessors` to handle methods like
`title_en`, which are used to track changes. For performance reasons it's
generally best to also enable the `locale_accessors` plugin as shown above.

Now pass a hash with fallbacks for each locale as an option when defining
translated attributes on a class:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    fallbacks: { de: :ja, fr: :ja }
  translates :meaning, fallbacks: { de: :ja, fr: :ja }
end
```

Internally, Mobility assigns the fallbacks hash to an instance of
`I18n::Locale::Fallbacks.new`.

By setting fallbacks for German and French to Japanese, values will fall
through to the Japanese value if none is present for either of these locales,
but not for other locales:

```ruby
Mobility.locale = :ja
word = Word.create(name: ""モビリティ"", meaning: ""(名詞):動きやすさ、可動性"")
Mobility.locale = :de
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :fr
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :ru
word.name
#=> nil
word.meaning
#=> nil
```

You can optionally disable fallbacks to get the real value for a given locale
(for example, to check if a value in a particular locale is set or not) by
passing `fallback: false` (*singular*, not plural) to the getter method:

```ruby
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
Mobility.locale = :fr
word.meaning(fallback: false)
#=> nil
Mobility.locale = :ja
word.meaning(fallback: false)
#=> ""(名詞):動きやすさ、可動性""
```

You can also set the fallback locales for a single read by passing one or more
locales:

```ruby
Mobility.with_locale(:fr) do
  word.meaning = ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
end
word.save
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
word.meaning(fallback: :fr)
#=> ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
word.meaning(fallback: [:ja, :fr])
#=> ""(名詞):動きやすさ、可動性""
```

Also note that passing a `locale` option into an attribute reader or writer, or
using [locale accessors or fallthrough accessors](#getset) to get or set
any attribute value, will disable fallbacks (just like `fallback: false`).
(This will take precedence over any value of the `fallback` option.)

Continuing from the last example:

```ruby
word.meaning(locale: :de)
#=> nil
word.meaning_de
#=> nil
Mobility.with_locale(:de) { word.meaning }
#=> ""(名詞):動きやすさ、可動性""
```

For more details, see the [API documentation on
fallbacks](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Fallbacks)
and [this article on I18n
fallbacks](https://github.com/svenfuchs/i18n/wiki/Fallbacks).

### <a name=""default""></a>Default values

Another option is to assign a default value, using the `default` plugin:

```diff
 plugins do
   # ...
+  default 'foo'
```

Here we've set a ""default default"" of `'foo'`, which will be returned if a fetch would
otherwise return `nil`. This can be overridden from model classes:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, default: 'foo'
end

Mobility.locale = :ja
word = Word.create(name: ""モビリティ"")
word.name
#=> ""モビリティ""
Mobility.locale = :de
word.name
#=> ""foo""
```

You can override the default by passing a `default` option to the attribute reader:

```ruby
word.name
#=> 'foo'
word.name(default: nil)
#=> nil
word.name(default: 'bar')
#=> 'bar'
```

The default can also be a `Proc`, which will be called with the context as the
model itself, and passed optional arguments (attribute, locale and options
passed to accessor) which can be used to customize behaviour. See the [API
docs][docs] for details.

### <a name=""dirty""></a>Dirty Tracking

Dirty tracking (tracking of changed attributes) can be enabled for models which
support it. Currently this is models which include
[ActiveModel::Dirty](http://api.rubyonrails.org/classes/ActiveModel/Dirty.html)
(like `ActiveRecord::Base`) and Sequel models (through the
[dirty](http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/Dirty.html)
plugin).

First, ensure the `dirty` plugin is enabled in your configuration, and that you
have enabled an ORM plugin (either `active_record` or `sequel`), since the
dirty plugin will depend on one of these being enabled.

```diff
 plugins do
   # ...
   active_record
+  dirty
```

(Once enabled globally, the dirty plugin can be selectively disabled on classes
by passing `dirty: false` to `translates`.)

Take this ActiveRecord class:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title
end
```

Let's assume we start with a post with a title in English and Japanese:

```ruby
post = Post.create(title: ""Introducing Mobility"")
Mobility.with_locale(:ja) { post.title = ""モビリティの紹介"" }
post.save
```

Now let's change the title:

```ruby
post = Post.first
post.title                      #=> ""Introducing Mobility""
post.title = ""a new title""
Mobility.with_locale(:ja) do
  post.title                    #=> ""モビリティの紹介""
  post.title = ""新しいタイトル""
  post.title                    #=> ""新しいタイトル""
end
```

Now you can use dirty methods as you would any other (untranslated) attribute:

```ruby
post.title_was
#=> ""Introducing Mobility""
Mobility.locale = :ja
post.title_was
#=> ""モビリティの紹介""
post.changed
[""title_en"", ""title_ja""]
post.save
```

You can also access `previous_changes`:

```ruby
post.previous_changes
#=>
{
  ""title_en"" =>
    [
      ""Introducing Mobility"",
      ""a new title""
    ],
  ""title_ja"" =>
    [
      ""モビリティの紹介"",
      ""新しいタイトル""
    ]
}
```

Notice that Mobility uses locale suffixes to indicate which locale has changed;
dirty tracking is implemented this way to ensure that it is clear what
has changed in which locale, avoiding any possible ambiguity.

For performance reasons, it is highly recommended that when using the Dirty
plugin, you also enable [locale accessors](#getset) for all locales which will
be used, so that methods like `title_en` above are defined; otherwise they will
be caught by `method_missing` (using fallthrough accessors), which is much slower.

For more details on dirty tracking, see the [API
documentation](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Dirty).

### Cache

The Mobility cache caches localized values that have been fetched once so they
can be quickly retrieved again. The cache plugin is included in the default
configuration created by the install generator:

```diff
 plugins do
   # ...
+  cache
```

It can be disabled selectively per model by passing `cache: false` when
defining an attribute, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, cache: false
end
```

You can also turn off the cache for a single fetch by passing `cache: false` to
the getter method, i.e. `post.title(cache: false)`. To remove the cache plugin
entirely, remove the `cache` line from the global plugins configuration.

The cache is normally just a hash with locale keys and string (translation)
values, but some backends (e.g. KeyValue and Table backends) have slightly more
complex implementations.

### <a name=""querying""></a>Querying

Mobility backends also support querying on translated attributes. To enable
this feature, include the `query` plugin, and ensure you also have an ORM
plugin enabled (`active_record` or `sequel`):

```diff
 plugins do
   # ...
   active_record
+  query
```

Querying defines a scope or dataset class method, whose default name is `i18n`.
You can override this by passing a default in the configuration, like
`query :t` to use a name `t`.

Querying is supported in two different ways. The first is via query methods
like `where` (and `not` and `find_by` in ActiveRecord, and `except` in Sequel).

So for ActiveRecord, assuming a model using KeyValue as its default backend:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
end
```

... we can query for posts with title ""foo"" and content ""bar"" just as we would
query on untranslated attributes, and Mobility will convert the queries to
whatever the backend requires to actually return the correct results:

```ruby
Post.i18n.find_by(title: ""foo"", content: ""bar"")
```

results in the SQL:

```sql
SELECT ""posts"".* FROM ""posts""
INNER JOIN ""mobility_string_translations"" ""Post_title_en_string_translations""
  ON ""Post_title_en_string_translations"".""key"" = 'title'
  AND ""Post_title_en_string_translations"".""locale"" = 'en'
  AND ""Post_title_en_string_translations"".""translatable_type"" = 'Post'
  AND ""Post_title_en_string_translations"".""translatable_id"" = ""posts"".""id""
INNER JOIN ""mobility_text_translations"" ""Post_content_en_text_translations""
  ON ""Post_content_en_text_translations"".""key"" = 'content'
  AND ""Post_content_en_text_translations"".""locale"" = 'en'
  AND ""Post_content_en_text_translations"".""translatable_type"" = 'Post'
  AND ""Post_content_en_text_translations"".""translatable_id"" = ""posts"".""id""
WHERE ""Post_title_en_string_translations"".""value"" = 'foo'
  AND ""Post_content_en_text_translations"".""value"" = 'bar'
```

As can be seen in the query above, behind the scenes Mobility joins two tables,
one with string translations and one with text translations, and aliases the
joins for each attribute so as to match the particular model, attribute(s),
locale(s) and value(s) passed in to the query. Details of how this is done can
be found in the [Wiki page for the KeyValue
backend](https://github.com/shioyama/mobility/wiki/KeyValue-Backend#querying).

You can also use methods like `order`, `select`, `pluck` and `group` on
translated attributes just as you would with normal attributes, and Mobility
will handle generating the appropriate SQL:

```ruby
Post.i18n.pluck(:title)
#=> [""foo"", ""bar"", ...]
```

If you would prefer to avoid the `i18n` scope everywhere, you can define it as
a default scope on your model:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
  default_scope { i18n }
end
```

Now translated attributes can be queried just like normal attributes:

```ruby
Post.find_by(title: ""Introducing Mobility"")
#=> finds post with English title ""Introducing Mobility""
```

If you want more fine-grained control over your queries, you can alternatively
pass a block to the query method and call attribute names from the block scope
to build Arel predicates:

```ruby
Post.i18n do
  title.matches(""foo"").and(content.matches(""bar""))
end
```

which generates the same SQL as above, except the `WHERE` clause becomes:

```sql
SELECT ""posts"".* FROM ""posts""
  ...
WHERE ""Post_title_en_string_translations"".""value"" ILIKE 'foo'
  AND ""Post_content_en_text_translations"".""value"" ILIKE 'bar'
```

The block-format query format is very powerful and allows you to build complex
backend-independent queries on translated and untranslated attributes without
having to deal with the details of how these translations are stored. The same
interface is supported with Sequel to build datasets.

<a name=""backends""></a>Backends
--------

Mobility supports different storage strategies, called ""backends"". The default
backend is the `KeyValue` backend, which stores translations in two tables, by
default named `mobility_text_translations` and `mobility_string_translations`.

You can set the default backend to a different value in the global
configuration, or you can set it explicitly when defining a translated
attribute, like this:

```ruby
class Word < ApplicationRecord
  translates :name, backend: :table
end
```

This would set the `name` attribute to use the `Table` backend (see below).
The `type` option (`type: :string` or `type: :text`) is missing here because
this is an option specific to the KeyValue backend (specifying which shared
table to store translations on). Backends have their own specific options; see
the [Wiki][wiki] and [API documentation][docs] for which options are available
for each.

Everything else described above (fallbacks, dirty tracking, locale accessors,
caching, querying, etc) is the same regardless of which backend you use.

### Table Backend (like Globalize)

The `Table` backend stores translations as columns on a model-specific table. If
your model uses the table `posts`, then by default this backend will store an
attribute `title` on a table `post_translations`, and join the table to
retrieve the translated value.

To use the table backend on a model, you will need to first create a
translation table for the model, which (with Rails) you can do using the
`mobility:translations` generator:

```
rails generate mobility:translations post title:string content:text
```

This will generate the `post_translations` table with columns `title` and
`content`, and all other necessary columns and indices. For more details see
the [Table
Backend](https://github.com/shioyama/mobility/wiki/Table-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Table`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Table).

### Column Backend (like Traco)

The `Column` backend stores translations as columns with locale suffixes on
the model table. For an attribute `title`, these would be of the form
`title_en`, `title_fr`, etc.

Use the `mobility:translations` generator to add columns for locales in
`I18n.available_locales` to your model:

```
rails generate mobility:translations post title:string content:text
```

For more details, see the [Column
Backend](https://github.com/shioyama/mobility/wiki/Column-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Column`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Column).

### PostgreSQL-specific Backends

Mobility also supports JSON and Hstore storage options, if you are using
PostgreSQL as your database. To use this option, create column(s) on the model
table for each translated attribute, and set your backend to `:json`, `:jsonb`
or `:hstore`. If you are using Sequel, note that you
will need to enable the [pg_json](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_json_rb.html)
or
[pg_hstore](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_hstore_rb.html)
extensions with `DB.extension :pg_json` or `DB.extension :pg_hstore` (where
`DB` is your database instance).

Another option is to store all your translations on a single jsonb column (one
per model). This is called the ""container"" backend.

For details on these backends, see the [Postgres
Backend](https://github.com/shioyama/mobility/wiki/Postgres-Backends-%28Column-Attribute%29)
and [Container
Backend](https://github.com/shioyama/mobility/wiki/Container-Backend)
pages of the wiki and in the API documentation
([`Mobility::Backend::Jsonb`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Jsonb)
and
[`Mobility::Backend::Hstore`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Hstore)).

*Note: The Json backend (`:json`) may also work with recent versions of MySQL
with JSON column support, although this backend/db combination is not tested.
See [this issue](https://github.com/shioyama/mobility/issues/226) for details.*

Development
-----------

### Custom Backends

Although Mobility is primarily oriented toward storing ActiveRecord model
translations, it can potentially be used to handle storing translations in
other formats. In particular, the features mentioned above (locale accessors,
caching, fallbacks, dirty tracking to some degree) are not specific to database
storage.

To use a custom backend, simply pass the name of a class which includes
`Mobility::Backend` to `translates`:

```ruby
class MyBackend
  include Mobility::Backend
  # ...
end

class MyClass
  extend Mobility
  translates :foo, backend: MyBackend
end
```

For details on how to define a backend class, see the [Introduction to Mobility
Backends](https://github.com/shioyama/mobility/wiki/Introduction-to-Mobility-Backends)
page of the wiki and the [API documentation on the `Mobility::Backend`
module](http://www.rubydoc.info/gems/mobility/Mobility/Backend).

### Testing Backends

All included backends are tested against a suite of shared specs which ensure
they conform to the same expected behaviour. These examples can be found in:

- `spec/support/shared_examples/accessor_examples.rb` (minimal specs testing
  translation setting/getting)
- `spec/support/shared_examples/querying_examples.rb` (specs for
  [querying](#querying))
- `spec/support/shared_examples/serialization_examples.rb` (specialized specs
  for backends which store translations as a Hash: `serialized`, `hstore`,
  `json` and `jsonb` backends)

A minimal test can simply define a model class and use helpers defined in
`spec/support/helpers.rb` to run these examples, by extending either
`Helpers::ActiveRecord` or `Helpers::Sequel`:

```ruby
describe MyBackend do
  extend Helpers::ActiveRecord

  before do
    stub_const 'MyPost', Class.new(ActiveRecord::Base)
    MyPost.extend Mobility
    MyPost.translates :title, :content, backend: MyBackend
  end

  include_accessor_examples 'MyPost'
  include_querying_examples 'MyPost'
  # ...
end
```

Shared examples expect the model class to have translated attributes `title`
and `content`, and an untranslated boolean column `published`. These defaults
can be changed, see the shared examples for details.

Backends are also each tested against specialized specs targeted at their
particular implementations.

Integrations
------------

* [friendly_id-mobility](https://github.com/shioyama/friendly_id-mobility): Use
  Mobility with [FriendlyId](https://github.com/norman/friendly_id).
* [mobility-ransack](https://github.com/shioyama/mobility-ransack): Search
  attributes translated by Mobility with
  [Ransack](https://github.com/activerecord-hackery/ransack).
* [mobility-actiontext](https://github.com/sedubois/mobility-actiontext): Translate
  Rails [Action Text](https://guides.rubyonrails.org/action_text_overview.html) rich text
  with Mobility.

Tutorials
---------

- [Polyglot content in a rails
  app](https://revs.runtime-revolution.com/polyglot-content-in-a-rails-app-aed823854955)
- [Translating with
  Mobility](https://dejimata.com/2017/3/3/translating-with-mobility)
- [JSONify your Ruby
  Translations](https://dejimata.com/2018/3/20/jsonify-your-ruby-translations)

More Information
----------------

- [Github repository](https://www.github.com/shioyama/mobility)
- [API documentation][docs]
- [Wiki][wiki]

<a name=""#companies-using-mobility""></a>Companies using Mobility
------------------------

<img alt=""Logos of companies using Mobility"" src=""./img/companies-using-mobility.png"" style=""width: 100%"" />

- [Doorkeeper](https://www.doorkeeper.jp/)
- [Oreegano](https://www.oreegano.com/)
- [Venuu](https://venuu.fi)
- ... <sup>&#10033;</sup>

<sup>&#10033;</sup> <small>Post an issue or email me to add your company's name to this list.</small>

License
-------

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).
"
2944,Github repo with tutorials to fine tune transformers for diff NLP tasks,"﻿# <h1 align=""center"">PyTorch Transformers Tutorials </h1>

<p align=""center"">
<img alt=""Transformer Tutorials"" src=""meta/banner.png"">
</p>

<p align=""center"">
<a href=""https://github.com/abhimishra91/transformers-tutorials/issues""><img alt=""GitHub issues"" src=""https://img.shields.io/github/issues/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/network""><img alt=""GitHub forks"" src=""https://img.shields.io/github/forks/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/stargazers""><img alt=""Github Stars"" src=""https://img.shields.io/github/stars/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/blob/master/LICENSE""><img alt=""GitHub license"" src=""https://img.shields.io/github/license/abhimishra91/transformers-tutorials""></a>


### Introduction

The field of **NLP** was revolutionized in the year 2018 by introduction of **BERT** and his **Transformer** friends(RoBerta, XLM etc.).

These novel transformer based neural network architectures and new ways to training a neural network on natural language data introduced transfer learning to NLP problems. Transfer learning had been giving out state of the art results in the Computer Vision domain for a few years now and introduction of transformer models for NLP brought about the same paradigm change in NLP.

Companies like [Google](https://github.com/google-research/bert) and [Facebook](https://github.com/pytorch/fairseq/tree/master/examples/roberta) trained their neural networks on large swathes of Natural Language Data to grasp the intricacies of language thereby generating a  Language model. Finally these models were fine tuned to specific domain dataset to achieve state of the art results for a specific problem statement. They also published these trained models to open source community. The community members were now able to fine tune these models to their specific use cases.

[Hugging Face](https://github.com/huggingface) made it easier for community to access and fine tune these models using their Python Package: [Transformers](https://github.com/huggingface/transformers). 

### Motivation
Despite these amazing technological advancements applying these solutions to business problems is still a challenge given the niche knowledge required to understand and apply these method on specific problem statements. Hence, In the following tutorials i will be demonstrating how a user can leverage technologies along with some other python tools to fine tune these Language models to specific type of tasks. 

Before i proceed i will like to mention the following groups for the fantastic work they are doing and sharing which have made these notebooks and tutorials possible:

Please review these amazing sources of information and subscribe to their channels/sources.
 - [Hugging Face Team](https://huggingface.co/)
 - Abhishek Thakur for his amazing [Youtube videos](https://www.youtube.com/user/abhisheksvnit)

The problem statements that i will be working with are:

| Notebook |Github Link |Colab Link|Kaggle Kernel|
|--|--|--|--|
|Text Classification: Multi-Class| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb) |[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multiclass-classification-ipynb)|
|Text Classification: Multi-Label| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multi-label-classification)|
|Sentiment Classification **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_sentiment/runs/1zwn4gbg?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)||
|Named Entity Recognition: **with TPU processing!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-ner)|
|Question Answering||||
|Summary Writing: **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_summarization?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-summarization-t5/output)|



### Directory Structure

 1. `data`: This folder contains all the toy data used for fine tuning. 
 2. `utils`: This folder will contain any miscellaneous script used to prepare for the fine tuning.
 3. `models`: Folder to save all the artifacts post fine tuning. 

### Further Watching/Reading

I will try to cover the practical and implementation aspects of fine tuning of these language models on various NLP tasks. You can improve your knowledge on this topic by reading/watching the following resources.


 - Watching
	 - [Introduction in Simple terms](https://www.youtube.com/watch?v=gcHkxP9adiM)
	 - [Transfer Learning in NLP](https://www.youtube.com/watch?v=0T_Qr4qBrqc)
	 - [BERT Research Series from ChrisMcCormickAI](https://www.youtube.com/playlist?list=PLam9sigHPGwOBuH4_4fr-XvDbe5uneaf6)

- Reading
	 - [Transformers Documentation](https://huggingface.co/transformers/)
	 - [Pytorch Documentation](https://pytorch.org/docs/stable/index.html)
	 - [Google AI Blog](https://ai.googleblog.com/)
"
1387,Laravel 8+ Content management framework,"<div align=""center"">

![Sharp](./docs/img/sharplogo.png)

</div>

Sharp is a content management framework, a toolset which provides help to build a CMS section in a website, with some rules in mind:
- the public website **should not have any knowledge of the CMS** — the CMS is a part of the system, not the center of it. In fact, removing the CMS should not have any effect on the project.
- Content administrators **should work with their data and terminology**, not CMS terms. I mean, if the project is about spaceships, space travels and pilots, why would the CMS talk about articles, categories and tags?
- Developers **should not have to work on the front-end development for the CMS**. Because life is complicated enough, Sharp takes care of all the responsive / CSS / JS stuff.
- The CMS **should not have any expectations from the persistence layer**: MySQL is cool — but it's not the perfect tool for every problem. And more important, the DB structure has nothing to do with the CMS.

Sharp intends to provide a clean solution to the following needs:
- create, update or delete any structured data of the project, handling validation and errors;
- display, search, sort or filter data;
- execute custom commands on one instance, a selection or all instances;
- handle authorizations and validation;
- all without write a line of front code, and using a clean API in the PHP app.

Sharp needs Laravel 8+ and PHP 8.0+.

## Documentation 📖

The full documentation is available here: [sharp.code16.fr/docs](http://sharp.code16.fr/docs).

## Online example 🖥️

A Sharp instance for a demo project is online here: [sharp.code16.fr/sharp/](http://sharp.code16.fr/sharp/).

Data of this demo is reset each hour. 

## Additional resources 🖊️

See [Code 16's blog](https://code16.fr/blog/), and start with this introduction post: [Leveraging Sharp, an open source content management framework, in a Laravel project](https://code16.fr/posts/leveraging-sharp-laravel-open-source-content-management-framework/).
"
962,Convert Ubuntu Server for Raspberry Pi into a Desktop,"<h1 align=""center"">
  <!-- <img src="".github/logo.png"" alt=""Quickemu"" /> -->
  <br />
  Desktopify
</h1>

<p align=""center""><b>Convert Ubuntu Server for Raspberry Pi to a Desktop.</b></p>
<!-- <div align=""center""><img src="".github/screenshot.png"" alt=""Quickemu Screenshot"" /></div> -->
<p align=""center"">Made with 💝 for <img src="".github/ubuntu.png"" align=""top"" width=""18"" /></p>

## Introduction

Desktopify is a simple script to convert
[Ubuntu Server for the Raspberry Pi](https://ubuntu.com/download/raspberry-pi)
to one of the official Ubuntu desktop flavours.

We have a Discord for this project: [![Discord](https://img.shields.io/discord/712850672223125565?color=0C306A&label=WimpysWorld%20Discord&logo=Discord&logoColor=ffffff&style=flat-square)](https://discord.gg/hy7uZfX)

[![Raspberry Pi 4 8GB - Install Ubuntu Desktop 20.04 LTS](https://img.youtube.com/vi/umtZuUJOU38/0.jpg)](https://www.youtube.com/watch?v=umtZuUJOU38)

## Installation

  * Put an [Ubuntu Server image for Raspberry Pi](https://ubuntu.com/download/raspberry-pi) on a SDHC card.
  * Boot the Ubuntu Server SDHC on a Raspberry Pi 2, 3 or 4.
  * Login to the Raspberry Pi; username `ubuntu` and password `ubuntu`
      * You will be prompted to change the password
  * Clone the project
    * `git clone https://github.com/wimpysworld/desktopify.git`
  * Change your current directory to desktopify directory
    * `cd desktopify`
  * Convert the server to a desktop
    * `sudo ./desktopify --de ubuntu-mate`

### Usage

```
Usage
  ./desktopify --de <desktop environment>

Available desktop environments are
  lubuntu
  kubuntu
  ubuntu
  ubuntu-budgie
  ubuntu-kylin
  ubuntu-mate
  ubuntu-studio
  xubuntu

You can also pass the optional --oem option which will run a setup
wizard on the next boot.
```

## TODO

- [ ] Emoji status

## DONE

- [x] Install GPIO utilities and libraries
- [x] Enable Bluetooth
- [x] Make sure it's Ubuntu on a Pi
- [x] Make Network Manager the default backend
- [x] Prevent low power WiFi mode
- [x] Disable overscan
- [x] Enable fkms driver
- [x] Enable boot splash
- [x] Enable Firefox hardware acceleration
- [x] Create a snap
- [x] Kubuntu
- [x] Lubuntu
- [x] Ubuntu
- [x] Ubuntu Budgie
- [x] Ubuntu Kylin
- [x] Ubuntu MATE
- [x] Ubuntu Studio
- [x] Xubuntu
- [x] Drop `dpkg-architecture` requirement
- [x] Optimise Ubuntu MATE (Marco) window manager
- [x] Enable initial setup
- [x] Prevent pointless re-installs
- [x] Install snaps
- [x] Install gpio tools
"
1957,从零编写游戏引擎教程 Writing a game engine tutorial from scratch,"﻿# [游戏引擎 浅入浅出](https://github.com/ThisisGame/cpp-game-engine-book)

## 项目介绍 README

本书以实际项目开发Timeline，完整介绍一个游戏引擎的所有模块，从最基础的OpenGL环境搭建，到骨骼动画、多线程渲染、阴影实现等等，最后实现一个完整的游戏引擎。

![](imgs/ieg_open_source/book_chapter.gif)

## 章节内容 Chapter

第 1 章介绍游戏引擎框架，以Unity为例，介绍游戏引擎组成。

第 2 章介绍OpenGL开发环境搭建，创建一个OpenGL空窗口来入坑。

第 3 章介绍使用OpenGL绘制三角形、正方形、立方体，来熟悉游戏渲染的最基础元素。

第 4 章介绍Shader的概念，编译链接，以及Shader格式、关键字。

第 5 章介绍贴图格式，从直接读取PNG、JPG渲染，然后介绍GPU所使用的的压缩纹理。

第 6 章介绍索引与缓冲区对象，索引就是多个顶点的下标，使用索引可以复用顶点渲染。而缓冲区则是将顶点数据存储于显存中，不用再每一帧都从内存上传到GPU。

第 7 章介绍引擎自定义的Mesh文件格式以及材质的组成。将原来写死在代码中的顶点数据存储到Mesh文件中，将原来写死在代码中的Shader参数存储到材质中。

第 8 章介绍使用Blender制作模型并编写Python代码导出为Mesh文件。

第 9 章介绍如何实现GameObject-Component模式。

第 10 章介绍什么是相机，以及多相机渲染排序。

第 11 章介绍获取鼠标、键盘输入。

第 12 章介绍如何将Demo代码，拆分为引擎源码与项目源码。

第 13 章介绍使用FreeType对指定字符生成单Alpha通道的纹理并渲染，以及使用顶点色实现彩色文字。

第 14 章介绍基础GUI控件的实现，包括UIImage、UIMask、UIText、UIButton。有了这几个基础，可以实现其他复杂的控件。

第 15 章介绍使用FMOD播放MP3、Wav音乐，以及使用FMOD专业音频编辑器制作音效与解析播放。

第 16 章介绍easy_profiler这个C++性能分析库。

第 17 章介绍使用Sol2这个开源库，将Lua集成到引擎，后续使用C++开发引擎，使用Lua编写测试代码。

第 18 章介绍骨骼动画原理，并介绍使用Blender制作骨骼动画、导出到skeleton_anim文件，在引擎解析。

第 19 章介绍骨骼蒙皮动画，在Blender刷权重，导出到weight文件，在引擎解析，渲染。

第 20 章介绍如何从FBX文件导出Mesh、骨骼动画、权重，实例导出古风少女并渲染。

第 21 章介绍多线程渲染，将OpenGL API放到单独的渲染线程，从主线程发命令到渲染线程，将DrawCall的影响分出去，减轻主线程负担。

第 22 章介绍不定时更新。

## 特性列表 Feature

写这本书的目的是普及游戏引擎基础知识，面向的读者有一定的Unity经验，对引擎某些点感兴趣即可。

每一章节介绍的知识点，都是供入门了解，并没有深挖。

简单、容易上手、短期目标、不枯燥，是这本书的追求的，太复杂的很容易中途放弃，我花了很多时间在这个上。

#### 容易上手

* 每一篇都从入门角度编写，一些名词，能和其他名词关联的我都会尽量关联。
  例如Shader的编译与Link，我用C语言的编译来对比。
  |   |   C语言| Shader|
  |---|---|---|
  |  目标硬件 | CPU  |GPU|
  |编译流程|创建项目|创建GPU程序|
  ||创建编写多个C代码文件|创建编写Shader(顶点Shader和片段Shader)|
  ||把C代码发给编译器|把Shader代码发送到编译器|
  ||编译C代码|编译Shader代码|
  ||添加到链接列表|添加到链接列表|
  ||链接|链接|

* 每一小节开头就贴上了这一节项目地址，把文件夹拖到CLion里面立即可以调试。
  ![](imgs/ieg_open_source/project_dir_line.jpg)
  <br>
* 代码片段开头标注这个代码所在文件以及行数。
  ![](imgs/ieg_open_source/code_file_line.jpg)

#### 内容全面

从最简单的三角形绘制，到骨骼动画渲染、灯光阴影、多线程、物理、寻路AI、音频解析都会进行介绍。

| ![](imgs/opengl_draw_polygon/draw_triangle/draw_triangle.png)  |  ![](imgs/texture_make_beautiful/draw_cube_texture/draw_cube_urban.gif) |  ![](imgs/ieg_open_source/draw_blender_mesh.jpg) |
|---|---|---|
|![](imgs/ieg_open_source/draw_ttf_font_freetype_color.jpg)|![](imgs/ieg_open_source/gui.gif)|![](imgs/ieg_open_source/fbx_skinned_mesh.gif)|


#### 引擎生态

这应该是首次在引擎书里教如何建模、音频编辑。

Blender建模、FMOD、WWise音频制作，我都录制了视频。

其他的Substance、Toolbag插件开发，Renderdoc DrawCall分析都有简单介绍。


| ![](imgs/ieg_open_source/blender_1_hq720.jpg)  |  ![](imgs/ieg_open_source/substance_painter_1_hq720.jpg) | ![](imgs/ieg_open_source/toolbag_1_hq720.jpg)|
|---|---|---|
| ![](imgs/ieg_open_source/fmod_2_hq720.jpg)  |  ![](imgs/ieg_open_source/wwise_1_hq720.jpg) | ![](imgs/ieg_open_source/renderdoc_hq720.jpg)|


#### 短期目标

渲染的模型动画用美女、帅哥、色彩丰富的物体，更有成就感。

有了一定功能后，就会基于现有功能开发一个小游戏，阶段性成就才能长时间坚持。

| ![](imgs/ieg_open_source/hunter_need_head_phone.jpg)  |  ![](imgs/ieg_open_source/empty_960_640.jpg) | ![](imgs/ieg_open_source/empty_960_640.jpg)|
|---|---|---|

## 快速上手 Getting Start

#### 阅读图书

在线阅读：`http://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=Introduction.md`

本地阅读，按照下面步骤：

1. 安装`GitBook`

2. 克隆项目:`git clone https://github.com/ThisisGame/cpp-game-engine-book.git`

3. 双击`gitbook_serve.bat`启动本地GitBook服务器，成功后，打开浏览器访问`http://localhost:4000`，即可阅读。

#### 随书项目调试

1. 安装CLion。
2. 在每小节开头找到CLion项目目录，用CLion打开。

## 常见问题 FAQ

#### 书中讲述的引擎技术适用哪些系统平台？

目前适配Windows与MacOS。

```diff
- 由于Arm版Mac只支持OpenGL Core，所以《6.3 OpenGL Core Profile》之前的章节实例无法在Arm版Mac运行。
```

#### 如何使用VisualStudio开发？

随书实例使用CLion开发，CLion支持Windows与Mac，跨平台不需要额外学习成本。

VisualStudio从2019开始支持CMake项目，所以在Windows上也可以使用VisualStudio2019及以上版本打开随书实例CLion项目。

具体请参考 [2.3 使用VisualStudio开发](https://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=2.%20opengl_dev_env/2.3%20dev_with_visualstudio.md)

## 行为准则 Code Of Conduct

* 引擎使用C++开发，遵从Google C++规范，贡献代码时，需要先熟悉代码风格。
  ![](imgs/ieg_open_source/google_cpp_style.png)
  
* 贡献代码时，请先fork本项目到你的名下，然后修改代码，通过合并请求来提交。
* 目前适配Windows和Mac，同样，你可以在这两个系统上开发。代码提交前，请确保功能在这两个系统上都是正常且一致的。

## 如何加入 How To Join

* 你可以直接打开在线阅读：`http://www.thisisgame.com.cn/tutorial?book=cpp-game-engine-book&lang=zh&md=Introduction.md`
* 本书是开源的，你可以fork本项目，然后修改代码，然后提交合并请求。
* 欢迎大家提Issue，反馈遇到的问题。内网可以直接联系我。也可以加入q群(879187705)讨论，得到答案后，更新issue，方便其他人查询。
  
  | ![](imgs/readme/qq_qrcode.png)  |
  |---|


## 团队介绍 Members

* captainchen:作者

## 感谢支持 Thanks

项目使用CLion IDE，使用PVS-Studio作为代码扫描分析工具，感谢其提供的开源许可。

| ![](imgs/readme/pvsstudio.png)  |  ![](imgs/readme/jetbrains-variant-4.png) |
|---|---|
|  PVS-Studio |  JetBrains |


"
3249,Curriculum for learning front-end development during #100DaysOfCode.,"**Note:** this resource is old! I will be archiving this repository by the end of July 2021 as I feel that many of the recommendations here are outdated for learning front-end web development in 2021.

---

<p align=""center"">
  <img alt=""#100DaysOfCode Front-End Development"" src=""https://i.imgur.com/dwYOP0B.jpg"" />
</p>

**Please support this repo by giving it a star ⭐️ at the top of the page and [follow me](https://github.com/nas5w) for more resources!**

Want to learn more about frontend development? Consider:
- signing up for my [free newsletter](https://buttondown.email/devtuts?100DoC) where I periodically send out digestible bits of frontend knowledge!
- subscribing to my [YouTube channel](https://www.youtube.com/c/devtutsco) where I teach JavaScript, Typescript, and React.

---

This is a somewhat opinionated curriculum for learning front-end development during #100DaysOfCode. As it covers a wide range of front-end development topics, it can be thought of as more of a ""survey"" style course rather than a deep dive into any one area. Ideally, your takeaway from completing this curriculum will be some familiarity with each topic and the ability to easily dive deeper in any area in the future when necessary.

This curriculum was influenced significantly by Kamran Ahmed's [Modern Frontend Developer](https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c) roadmap. Please check it out--it is excellent.

**Note**: I know front-end development means a lot of different things to a lot of people! If you're a front-end developer and you think this guide could be improved, please let me know by raising an issue as described in the [Contributing](#contributing) section. Thank you!

# Translations

Thanks to some incredible contributors, this curriculum has been translated into the following languages!

- [Russian русский](/ru) (translation by [@Ibochkarev](https://github.com/Ibochkarev) and [@JonikUl](https://github.com/JonikUl))
- [Chinese 中文](/chinese) (translation by [@simplefeel](https://github.com/simplefeel))
- [Portuguese Português](/portuguese) (translation by [@Zardosh](https://github.com/Zardosh))
- [Polish polski](/polish) (translation by [@mbiesiad](https://github.com/mbiesiad))
- [Malay/Indonesia](/Malay) (translation by [@asyraf-labs](https://github.com/asyraf-labs))
- [Vietnamese Tiếng Việt](/Vietnam) (translation by [@duca7](https://github.com/duca7))
- [Japanese 日本語](/japanese) (translation by [miily8310s](https://github.com/miily8310s))
- [Bangla বাংলা](/bangla) (translation by [mirajus-salehin](https://github.com/mirajus-salehin))

# :calendar: Curriculum

The underlying principle of this repository is [timeboxing](https://en.wikipedia.org/wiki/Timeboxing). If you have spent any amount of time in the past trying to learn web development or a similar skill, you have likely experienced going down a rabbit hole on any one particular topic. This repository aims to assign a certain number of days to each technology and encourages you to move to the next once that number of days is up. 

It is anticipated that everyone is at a different level of proficiency when starting this challenge, and that's okay. Beginner and expert front-end developers alike can benefit from timeboxed practice in each of these areas.

The recommended day-by-day activities are as follows:

- Days 1-8: [HTML](#html)
- Days 9-16: [CSS](#css)
- Days 17-24: [JavaScript Basics](#javascript)
- Days 25-27: [jQuery](#jquery)
- Days 28-33: [Responsive Web Design](#rwd)
- Days 34-36: [Accessibility](#accessibility)
- Days 37-39: [Git](#git)
- Days 40-44: [Node and NPM](#node)
- Days 45-50: [Sass](#sass)
- Days 51-54: [Bootstrap](#bootstrap)
- Day 55: [BEM](#bem)
- Days 57-61: [Gulp](#gulp)
- Days 62-65: [Webpack](#webpack)
- Day 66: [ESLint](#eslint)
- Days 68-83: [React](#react)
- Days 84-89: [Redux](#redux)
- Days 90-94: [Jest](#jest)
- Days 95-97: [TypeScript](#typescript)
- Days 98-100: [NextJS](#nextjs)

# :mag_right: The Details

Below you can find a little information about each topic in the curriculum as well as some ideas/guidance on what to do for each. For inspiration on projects to do alongside this curriculum, see the [Project Ideas section](#project-ideas).

As part of the timeboxing principle, it's okay if you don't get through all of the items in the ""Learning Areas and Ideas"" sections. You should instead focus on getting the most you can out of the number of days assigned to each area and then move on.

<a name=""html""></a>
![HTML](https://i.imgur.com/O0F5XSR.jpg)

Hypertext Markup Language (HTML) is the standard markup language for creating web pages and web applications. With Cascading Style Sheets (CSS) and JavaScript, it forms a triad of cornerstone technologies for the World Wide Web. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. (Source: [Wikipedia](https://en.wikipedia.org/wiki/HTML))

### :bulb: Quick Takeaway

HTML is really the foundation of web development. Even in the javascript-based frameworks, you end up writing HTML in one form or another.

### :book: Learning Areas and Ideas

- Take the [Basic HTML and HTML5 section](https://learn.freecodecamp.org/) on freeCodeCamp.
- HTML page structure
- HTML elements
- Nesting HTML elements
- Semantic markup
- Links / multiple pages
- Images
- Audio/video media
- Forms and form elements
- Create a multi-page website! (See [Project Ideas](#project-ideas) if you need some inspiration).

<a name=""css""></a>
![CSS](https://i.imgur.com/028GOR0.jpg)

Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language like HTML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts. This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file, and reduce complexity and repetition in the structural content. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Cascading_Style_Sheets))

### :bulb: Quick Takeaway

CSS is another essential component of web development. While it is mainly used to style and position HTML elements, it has become increasingly capable of more dynamic tasks (e.g., animations) that would once be handled by javascript.

### :book: Learning Areas and Ideas

- Take the [Basic CSS, CSS flexbox, and CSS grid sections](https://learn.freecodecamp.org/) on freeCodeCamp.
- In-line CSS
- `<style>` tags
- External CSS with `<link>`
- Styling elements
- Selectors
- Floats, clearing floats
- Layouts (grid, flexbox)
- Fonts, custom fonts
- Style the HTML page(s) you made when learning HTML!

<a name=""javascript""></a>
![JavaScript](https://i.imgur.com/oHdD86j.jpg)

JavaScript , often abbreviated as JS, is a high-level, interpreted programming language that conforms to the ECMAScript specification. It is a language that is also characterized as dynamic, weakly typed, prototype-based and multi-paradigm. Alongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web. JavaScript enables interactive web pages and thus is an essential part of web applications. The vast majority of websites use it, and all major web browsers have a dedicated JavaScript engine to execute it. (Source: [Wikipedia](https://en.wikipedia.org/wiki/JavaScript))

### :bulb: Quick Takeaway

JavaScript has become increasingly important in the front-end world. While it was once used mainly to make pages dynamic, it is now the foundation of many front-end frameworks. These frameworks handle a lot of the tasks that were formerly handled by the back-end (e.g., routing and displaying different views).

### :book: Learning Areas and Ideas

- Take the [Basic JavaScript and ES6 sections](https://learn.freecodecamp.org/) on freeCodeCamp.
- Too many language fundamentals to list here!
- `<script>` tag and placement
- Accessing HTML elements
- The event loop, call stack, and event queue
- Prototypal Inheritance
- Reference vs. value
- Add some dynamic elements or logic to your HTML/CSS page(s) developed earlier!

<a name=""jquery""></a>
![jQuery](https://i.imgur.com/m9j02Fo.jpg)

jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. With a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript. (Source: [jQuery.com](https://jquery.com/))

### :bulb: Quick Takeaway

After you have spent some time with plain (also called ""vanilla"") javascript, you may find some tasks a bit cumbersome, especially those related to accessing and manipulating HTML elements. For quite a while, jQuery was the go-to library for making these kinds of tasks easier and consistent across different browsers. Nowadays, jQuery isn't necessarily ""mandatory"" learning because of advancements in vanilla javascript, CSS, and newer javascript frameworks (we'll look at frameworks later). Still, it would be beneficial to take a little time to learn some jQuery and apply it to a small project.

### :book: Learning Areas and Ideas

- Take the [jQuery section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Document ready
- Selectors
- Toggle classes
- Animation
- Add or move HTML elements
- Add jQuery to your site!

<a name=""rwd""></a>
![Responsive Web Design](https://i.imgur.com/Bt1zWwq.jpg)

Responsive web design (RWD) is an approach to web design that makes web pages render well on a variety of devices and window or screen sizes. Recent work also considers the viewer proximity as part of the viewing context as an extension for RWD. Content, design and performance are necessary across all devices to ensure usability and satisfaction. A site designed with RWD adapts the layout to the viewing environment by using fluid, proportion-based grids, flexible images, and CSS3 media queries, an extension of the @media rule. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Responsive_web_design))

### :bulb: Quick Takeaway

Responsive web design is all about making web applications look and function properly on all types of device. A quick-and-dirty example would be that a website should look and function properly both in a desktop web browser and on a mobile phone browser. An understanding of responsive design is crucial for any front-end developer!

### :book: Learning Areas and Ideas

- Take the [Responsive Web Design Principles section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Media queries, breakpoints
- Responsive images
- Make your website responsive!
- Use Chrome DevTools to view your site on different devices/viewports.

<a name=""accessibility""></a>
![Accessibility](https://i.imgur.com/ayioMQw.jpg)

Web accessibility is the inclusive practice of ensuring there are no barriers that prevent interaction with, or access to, websites on the World Wide Web by people with disabilities. When sites are correctly designed, developed and edited, generally all users have equal access to information and functionality. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Web_accessibility))

### :bulb: Quick Takeaway

Accessibility, often written as a11y, is one of the most important topics in front-end web development, yet it seems to often get short shrift. Creating accessible web applications is not only ethically sound, but also makes a lot of business sense considering the additional audience that will be able to view your applications when they are accessible.

### :book: Learning Areas and Ideas

- Take the [Applied Accessibility section](https://learn.freecodecamp.org/) on freeCodeCamp.
- Read some content on [The A11Y Project](https://a11yproject.com/about)
- Review their [checklist](https://a11yproject.com/checklist)
- Update your site(s) for accessibility based on this checklist

<a name=""git""></a>
![Git](https://i.imgur.com/5QoNJqs.jpg)

Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. (Source: [git-scm.com](https://git-scm.com/))

### :bulb: Quick Takeaway

Version/code control is an essential part of any web developer's toolkit. There are a number of different version control systems, but Git is by far the most prevalent at the moment. You can (and should!) use it to track your projects as you learn!

### :book: Learning Areas and Ideas

- [Git Tutorial for Beginners (Video)](https://www.youtube.com/watch?v=HVsySz-h9r4)
- Install git
- Set up a [github](https://github.com) account
- Learn the most-used git commands:
  - init
  - clone
  - add
  - commit
  - push
  - pull
  - merge
  - rebase
- Add your existing projects to github!

<a name=""node""></a>
![Node and NPM](https://i.imgur.com/8ik2alD.jpg)

Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code outside of a browser. JavaScript is used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a ""JavaScript everywhere"" paradigm, unifying web application development around a single programming language, rather than different languages for server side and client side scripts. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Node.js))

### :bulb: Quick Takeaway

While Node.js is typically known as a back-end solution, it is used quite frequently to support front-end development. It does this in a number of ways, including things like running build tools, testing, and linting (all to be covered soon!). Node Package Manager (npm) is another great feature of Node and can be used to manage dependencies of your project (i.e., code libraries your project might rely on -- jQuery is an example!).

### :book: Learning Areas and Ideas

- Research node and how it is different than the browser
- Install node (npm comes with it)
- Create a simple javascript file and run it with node
- Use NPM to manage any dependencies in your existing project(s) (e.g., jQuery!)

<a name=""sass""></a>
![Sass](https://i.imgur.com/ZRedLge.jpg)

Sass is an extension of CSS that adds power and elegance to the basic language. It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly, particularly with the help of the Compass style library. (Source: [sass-lang.com](https://sass-lang.com/documentation/file.SASS_REFERENCE.html))

### :bulb: Quick Takeaway

Sass allows you to write CSS in a more programmatic way. If you've done some CSS, you might have noticed that you end up repeating a lot of information--for example, specifying the same color code. In Sass, you can use things like variables, loops, and nesting to reduce redundancy and increase readability. After writing your code in Sass, you can quickly and easily compile it to regular CSS.

### :book: Learning Areas and Ideas

- [Install Sass](https://sass-lang.com/install) globally with npm!
- [Sass Crash Course Video](https://www.youtube.com/watch?v=roywYSEPSvc)
- Follow the [Learn Sass](https://sass-lang.com/guide) tutorial and/or [freeCodeCamp](https://learn.freecodecamp.org/) Sass tutorial.
- Update your existing site to generate your CSS using Sass!

<a name=""bootstrap""></a>
![Bootstrap](https://i.imgur.com/cJ21eH2.jpg)

\* Some alternatives: Foundation, Bulma, Materialize

Bootstrap is a free and open-source front-end framework for developing websites and web applications. It contains HTML and CSS-based design templates for typography, forms, buttons, navigation and other interface components, as well as optional JavaScript extensions. (Source: [Wikipedia](<https://en.wikipedia.org/wiki/Bootstrap_(front-end_framework)>))

### :bulb: Quick Takeaway

There are many options for laying out, styling, and making your web application dynamic, but you'll find that starting with a framework helps you tremendously in getting a head start. Bootstrap is one such framework, but it is definitely far from the only option! I recommend getting familiar with one framework like this, but it's far more important to grasp HTML, CSS, and JavaScript fundamentals than it is to get caught up in any one framework.

### :book: Learning Areas and Ideas

- Learn what Bootstrap is and why you would want to use it
- [Bootstrap 4 Crash Course (Video)](https://www.youtube.com/watch?v=hnCmSXCZEpU)
- Complete the Bootstrap section on [freeCodeCamp](https://learn.freecodecamp.org/)
- Refactor your site using bootstrap!

<a name=""bem""></a>
![BEM](https://i.imgur.com/MCvMRQl.jpg)

The Block, Element, Modifier methodology (commonly referred to as BEM) is a popular naming convention for classes in HTML and CSS. Developed by the team at Yandex, its goal is to help developers better understand the relationship between the HTML and CSS in a given project. (Source: [css-tricks.com](https://css-tricks.com/bem-101/))

### :bulb: Quick Takeaway

It's important to know naming and organization systems like BEM exist and why they are used. Do some research here, but at a beginner level I wouldn't recommend devoting too much time to the subject.

### :book: Learning Areas and Ideas

- Read the [BEM introduction](http://getbem.com/introduction/)
- [Why I Use BEM (Video)](https://www.youtube.com/watch?v=SLjHSVwXYq4)
- Create a simple webpage using BEM conventions.

<a name=""gulp""></a>
![Gulp](https://i.imgur.com/KQrByqq.jpg)

Gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something. (Source: [gulpjs.com](https://gulpjs.com/))

### :bulb: Quick Takeaway

In modern front-end development, you'll often find yourself needing to automate tasks like bundling, moving files, and injecting references into HTML files. Gulp is one tool that can help you do these things!

### :book: Learning Areas and Ideas

- Install gulp with npm
- Follow the [gulp for beginners tutorial](https://css-tricks.com/gulp-for-beginners/) on CSS-Tricks
- In your website, set up gulp to:
  - Compile Sass for you
  - Put the generated CSS file in `build` subdirectory
  - Move your web pages to the build directory
  - Inject a reference to your generated CSS file into your web pages

<a name=""webpack""></a>
![Webpack](https://i.imgur.com/0rx82Kl.jpg)

At its core, webpack is a static module bundler for modern JavaScript applications. When webpack processes your application, it internally builds a dependency graph which maps every module your project needs and generates one or more bundles. (Source: [webpack.js.org](https://webpack.js.org/concepts/))

### :bulb: Quick Takeaway

Imagine that you have a large web development project with a number of different developers working on a lot of different tasks. Rather than all working in the same files, you might want to modularize them as much as possible. Webpack helps enable this by letting your team work modularly and then, come time to build the application, Webpack will stick it all together: HTML, CSS/Sass, JavasScript, images, etc. Webpack isn't the only module bundler, but it seems to be the front-runner at the moment.

### :book: Learning Areas and Ideas

- Read [webpack concepts](https://webpack.js.org/concepts/)
- [What is Webpack, How does it work? (Video)](https://www.youtube.com/watch?v=GU-2T7k9NfI)
- [This webpack tutorial](https://hackernoon.com/a-tale-of-webpack-4-and-how-to-finally-configure-it-in-the-right-way-4e94c8e7e5c1)

<a name=""eslint""></a>
![ESLint](https://i.imgur.com/CJb6ZnL.jpg)

ESLint is an open source JavaScript linting utility originally created by Nicholas C. Zakas in June 2013. Code linting is a type of static analysis that is frequently used to find problematic patterns or code that doesn’t adhere to certain style guidelines. There are code linters for most programming languages, and compilers sometimes incorporate linting into the compilation process. (Source: [eslint.org](https://eslint.org/docs/about/))

### :bulb: Quick Takeaway

Linting is a fantastic tool for code quality, readability, and consistency. Using a linter will help you catch syntax and formatting mistakes before they go to production. You can run linters manually or include them in your build/deployment process.

### :book: Learning Areas and Ideas

- Install eslint using npm
- [How to Setup VS Code + Prettier + ESLint (Video)](https://www.youtube.com/watch?v=YIvjKId9m2c)
- Lint your JavaScript

<a name=""react""></a>
![React](https://i.imgur.com/uLYz15W.jpg)

\* Some alternatives: Vue, Angular, Ember

React (also known as React.js or ReactJS) is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. Complex React applications usually require the use of additional libraries for state management, routing, and interaction with an API. (source: [Wikipedia](<https://en.wikipedia.org/wiki/React_(JavaScript_library)>))

### :bulb: Quick Takeaway

Front-end JavaScript frameworks are at the forefront of modern front-end development. One important takeaway here is that React, despite being incredibly popular, is only a library for building user interfaces whereas frameworks like Vue and Angular aim to be more full-featured. For example, if you build an application with in React that needs to route to different views, you'll need to bring in something like `react-router`.

### :book: Learning Areas and Ideas

- Take the [React tutorial](https://reactjs.org/tutorial/tutorial.html)
- [Learn React with Mosh](https://www.youtube.com/watch?v=Ke90Tje7VS0)
- Refactor your website as a React app!
- Note: `create-react-app` is a convenient tool to scaffold new React projects.

<a name=""redux""></a>
![Redux](https://i.imgur.com/S9H2Dbp.jpg)

Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger. (Source: [redux.js.org](https://redux.js.org/introduction/getting-started))

### :bulb: Quick Takeaway

As you build bigger and bigger front-end applications, you start realizing that it's hard to maintain application state: things like the if the user is logged in, who the user is, and generally what's going on in the application. Redux is a great library that helps you maintain a single source of state on which your application can base its logic.

### :book: Learning Areas and Ideas

- This [Redux video tutorial](https://www.youtube.com/watch?v=93p3LxR9xfM)
- This [Redux video series](https://egghead.io/courses/getting-started-with-redux) by Dan Abramov, creator of Redux
- Take note of the [Redux three principles](https://redux.js.org/introduction/three-principles)
  - Single source of truth
  - State is read-only
  - Changes are made with pure functions
- Add Redux state management to your app!

<a name=""jest""></a>
![Jest](https://i.imgur.com/Cr39axw.jpg)

Jest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more! (Source: [jestjs.io](https://jestjs.io))

### :bulb: Quick Takeaway

It is very important to set up automated testing for your front-end projects. Setting up automated testing will allow you to make future changes with confidence--if you make changes and your tests still pass, you will be fairly comfortable you didn't break any existing functionality. There are too many testing frameworks to list; Jest is simply one of my favorties.

### :book: Learning Areas and Ideas

- Learn [Jest basics](https://jestjs.io/docs/en/getting-started)
- If you used `create-react-app`, [Jest is already configured](https://facebook.github.io/create-react-app/docs/running-tests).
- Add tests to your application!

<a name=""typescript""></a>
![TypeScript](https://i.imgur.com/BZROJNs.jpg)

\* Alternative: Flow

TypeScript is an open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing to the language. TypeScript is designed for development of large applications and transcompiles to JavaScript. As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs. TypeScript may be used to develop JavaScript applications for both client-side and server-side (Node.js) execution. (Source: [Wikipedia](https://en.wikipedia.org/wiki/TypeScript))

### :bulb: Quick Takeaway

JavaScript is dynamically typed. However, it is a common belief that static typing (i.e., specifying variable types, classes, interfaces ahead of time) is both clearer and reduces the likelihood of defects/bugs. Regardless of how you feel on the topic, it's important to at least get a feel for a statically-typed version of JavaScript like TypeScript. Note that TypeScript compiles down to JavaScript so it can be interpreted by browsers (i.e., browsers don't natively interpret TypeScript).

### :book: Learning Areas and Ideas

- [Learn TypeScript in 5 minutes](https://medium.freecodecamp.org/learn-typescript-in-5-minutes-13eda868daeb)
- [Learn TypeScript in 50 minutes (Video)](https://www.youtube.com/watch?v=WBPrJSw7yQA)
- Optionally [create a React app with TypeScript](https://levelup.gitconnected.com/typescript-and-react-using-create-react-app-a-step-by-step-guide-to-setting-up-your-first-app-6deda70843a4)

<a name=""nextjs""></a>
![NextJS](https://i.imgur.com/YNtW38J.jpg)

Next.js is a minimalistic framework for server-rendered React applications. (Source: [Next.js — React Server Side Rendering Done Right](https://hackernoon.com/next-js-react-server-side-rendering-done-right-f9700078a3b6))

### :bulb: Quick Takeaway

Now we're getting advanced! By now you've built a React (or Vue or Angular) application that does quite a bit of work in the browser. For various reasons (e.g., SEO, concerns over client performance), you might actually want your front-end application to be rendered on the server rather than the client. That's where a framework like next.js comes in.

### :book: Learning Areas and Ideas

- Next.js [Getting Started](https://nextjs.org/learn/)
- [Next.js Crash Course (Video)](https://www.youtube.com/watch?v=IkOVe40Sy0U)
- Create a Next.js app or migrate your existing app to Next.js

# But What About X?

This list is supposed to give you broad exposure to the front-end ecosystem, but it's simply impossible to hit on every single topic, not to mention the myriad tools within each area! If you do think I missed something very important, please see the [Contributing](#contributing) section to see how you can help make this guide better.

# Project Ideas

As you progress through #100DaysOfCode, you'll want one or multiple projects to which you can apply your new knowledge. In this section, I attempt to provide a few project ideas that you can use. Alternatively, you're encouraged to come up with your own project ideas as those ideas may interest and motivate you more.

- Beginner ideas:
  - Build a portfolio website
- Intermediate/Advanced ideas:
  - Build a tweet analysis app (If you know back-end and API integration already)
  
# Need Help?

Generally, I have found the following resources invaluable to learning software development:

- Googling the issue
- [StackOverflow](http://www.stackoverflow.com) (There's a good chance your question has already been asked and will be a high-ranking result when googling).
- [Mozilla MDN Web Docs](https://developer.mozilla.org/en-US/)
- [freeCodeCamp](https://www.freecodecamp.org/)
- Local software development Meetups! Most are very friendly to all experience levels.

If you'd like my input on anything, feel free to [connect with me on Twitter](http://www.twitter.com/nas5w) and I'll do my best to try to offer some assistance. If you think there's an issue with the curriculum or have a recommendation, see the [contributing section](#contributing) below.

# Contributing

## Spread the Word

If you appreciate the work done here, you can contribute significantly by spreading the word about this repository, including things like:

- Starring and forking this repository
- Sharing this repository on social media

## Contribute to this Repository

This is a work in progress and I very much appreciate any help in maintaining this knowledge base!

When contributing to this repository, please first discuss the change you wish to make via issue before making a change. Otherwise, it will be very hard to understand your proposal and could potentially result in you putting in a lot of work to a change that won't get merged.

Please note that everyone involved in this project is either trying to learn or trying to help--Please be nice!

## Pull Request Process

1. Create an issue outlining the proposed pull request.
2. Obtain approval from a project owner to make the proposed change.
3. Create the pull request.
"
1400,trace for PHP,"Fiery
====== 
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/44598eccff7c4eb58f6d66d1d51ff415)](https://www.codacy.com/app/xcl_rockman/fiery?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=weiboad/fiery/&amp;utm_campaign=Badge_Grade)
![logo](https://img.shields.io/badge/status-alpha-red.svg)
[![Build Status](https://travis-ci.org/weiboad/fiery.png)](https://travis-ci.org/weiboad/fiery)
[![License](https://img.shields.io/badge/license-apache2-blue.svg)](LICENSE) 

[中文文档](./README_CN.md)
 
![showtrace](docs/imgs/showtrace.png)

 Fiery is an APM-Application Performance Management for the PHP

### Introduction
 * All Service in an jar.easy to deploy
 * Burial SDK: integrated burial package for php project
 * Log Pusher: collect the ragnarsdk logs and push to the server
 * Server: index, storage, statistics the logs, web Management interface
 * Goto [wiki](https://github.com/weiboad/fiery/wiki) to get More Infomation
 
### Requirements
 * PHP 5.3 or later with bcmath
 * Linux, OS X and Windows
 * Memory: 2G or more 
 * Java 8 Runtime

### Getting Started
 1. Download [Java 8 Runtime](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
 2. tar xvf jdk-1.8.tar.gz
 3. Download Recent Relasese Jar on [Release page](https://github.com/weiboad/fiery/releases)
 4. mkdir logs index db
 5. Startup the Fiery Server by command:

> nohup java -XX:-MaxFDLimit -Xms3750m -Xmx3750m -XX:ReservedCodeCacheSize=240m -XX:+UseCompressedOops -jar ragnarserver-0.5.3-SNAPSHOT.jar --server.port=9090 &

 6. Browse the web address http://127.0.0.1:9090/ragnar/

### Burial SDK
 * [Integrated On PHP Project](https://github.com/weiboad/fierysdk/blob/master/README.md)


### LogPusher


>  nohup java -XX:-MaxFDLimit -Xms128m -Xmx450m -XX:ReservedCodeCacheSize=240m -XX:+UseCompressedOops -jar logpusher-0.5.3-SNAPSHOT.jar  -c ./conf/logpusher.properties &

Tips: now the log pusher supported the kafka 0.9(if you want new version kafka please change pom.xml kafka client depend  version)

### Parameter And Config file
 Log pusher(use config file, cmd option -c specified [config file](./conf/logpusher.properties) path)

|     parameter   |      option   |   desc    |
| --------------- |:-------------:| ---------:|
|path            | the ragnarsdk log path | which variable defined on nginx parameter|
|outTime         | log expire clean up day| when the monitored file expire by day will clean up by log pusher |
|pushType       | http(default) kafka(for the mass log user)|the way you push log to server|
|host            | 127.0.0.1:9090 | only for http push type,set the fiery server ip:port|
|threadCount     | 8  |when you using push type http,will improve the push speed but expensive|
|kafkaServer    | 10.10.1.1:9192,10.10.1.2:9192| kafka broker ip:port,ip:port list|
|kafkaTopic    | fiery_test|kafka push topic|

Server(use cmd option)

|     Parameter   |      option   |   desc    |
| --------------- |:-------------:| ---------:|
|--server.port    | 9090| fiery server listened port|
|--fiery.kafkaenable|true false| using kafka ?|
|--fiery.kafkaserver|10.1.1.1:9191,10.1.1.2:9191|kafka broker ip:port,ip:port list|
|--fiery.kafkatopic|kafka topic|kafka topic.mutiple topic eg:fiery_test,fiery_test1|
|--fiery.kafkagroupid|kafka groupid|kafka groupid|
|--fiery.keepdataday|how long the data keep day|the day of log keep|

#### Todo
 * Service Manage Shell(startup stop restart)
 * Persistent memory statistics
 * Statsd

#### Depend Package
> * Alibaba Druid
> * Spring Boot
> * Facebook RocksDB
> * Lucene
> * Google Gson

## Contact Us
 * WeiboAD ADINF Team
 * QQ Group: 318051466
 
"
2844,A New Cross-Platform 2D 3D Game Engine,"<p align=""center"">
    <img width=""48"" height=""48"" src=""https://raw.githubusercontent.com/timi-liuliang/echo/master/editor/echo/Resource/App.ico"">
</p>  

# Echo

## Introduction  

**Echo** is a new game engine, which uses many industry-standards of nowadays for game development. This new design concept makes the engine simpler to use and more powerful.

[Download](https://github.com/timi-liuliang/echo/releases)   
[Examples](https://github.com/timi-liuliang/echo-examples)  
[Documentation](https://github.com/timi-liuliang/echo/wiki)  

## Build
### [Editor]   
[How to Compile ""Echo Engine"" From Source Code](https://github.com/timi-liuliang/echo/wiki/Compile-Echo-From-Source-Code)

### [App]   

## Features

### Easy Concept  
Scene manager is easy, No Entiy, No GameObject, No Component, No Prefab. Only Node and NodeTree.

###  Highly Efficient Workflow   
![](https://media.githubusercontent.com/media/timi-liuliang/echo-download/master/images/intro/echo.png)  

### Multi-Platform Support  
iOS Android Html5 Windows Mac Linux Steam  

### New Industry Standards Supported
Gltf 2.0, Vulkan, Metal, Pbr, real time ray tracing.

### 2D And 3D Seamless Transition  
Every node can be 2d or 3d. The core difference is the camera and the unit the node use. So you can just switch a node to 2d or 3d easily.

### Easy To Program  
Mostly, you'll use Lua as your main programming language. and also can also use C++ directly. The design of our node tree makes the Lua logic code more easy to write. And the embedded Lua editor and the embedded documents help you to write code in the echo editor directly.   
Besides Lua, can you also choose to use the embedded Scratch language as the main development tool. This is a type of visual script inspired by [MIT](https://scratch.mit.edu/). In the Echo engine is Scratch based on Lua, when running the app, It'll convert to Lua and make sure it's good both to merge and will run efficent..   
If you really like other types of scripting languages, you can tell us or you can support it by modifying the C++ code directly.

![](https://media.githubusercontent.com/media/timi-liuliang/echo-download/master/images/intro/echo1.png)   

### Data Flow Programming Based ShaderEditor
Programming visualization is a very important concept for non-programmers and with the help of the DataFlowProgramming framework [nodeeditor](https://github.com/paceholder/nodeeditor), shader programming becomes easier to understand.

![](https://media.githubusercontent.com/media/timi-liuliang/echo-download/master/images/intro/shadereditor.png)   

### Frame Pipeline Visualization (Developing)
Inspired by [CI|CD pipeline](https://semaphoreci.com/blog/cicd-pipeline), we decided to make a frame pipeline editor, so that not only programmers, but everyone can configure the engine frame render process.   
1. Forward Rendering?   
2. Deferred Shading?    
3. Forward+ (Tiled Forward Rendering)?
Try configuring it by your needs.

![](https://media.githubusercontent.com/media/timi-liuliang/echo-download/master/images/intro/framepipeline.png) 

### Configurable Module   
Most of the engine's Functionality was implemented by configurable modules. that means when you release your app, you can just choose the module you really need. Which makes your app smaller in size and more efficiently running.

### Animate Everything   
With Timeline, you can animate everything. You can not only animate any Object's (Node, Setting, Res) property. But also you can call any Object's function.

### Channel References
You can compute the value of one property based on the value of another property, possibly on a different node. This lets you duplicate values, or makes values relative to other values, and have the Echo automatically update them whenever they change.

### Open Source  
Echo is licensed under the MIT license. You can just do what you want as you wish.

## Examples
|Example|Screenshot|Description|Download|
|---|---|---|---|
|Build-House|<img src=""https://github.com/timi-liuliang/echo-examples/blob/master/ads/build_house.gif?raw=true"" alt=""build house""  height=""128px"" />|A little build house game, used for test sprite node|[build-house-android.apk](https://github.com/timi-liuliang/echo-examples/releases/tag/build-house-1.0)|
|Spine|<img src=""https://github.com/timi-liuliang/echo-examples/raw/master/ads/spine.gif?raw=true"" alt=""build house""  height=""128px"" />|Spine 2d animation|
|Live2D|<img src=""https://github.com/timi-liuliang/echo-examples/raw/master/ads/live2d.gif?raw=true"" alt=""build house""  height=""128px"" />|live2d animation|
|Pbr|<img src=""https://github.com/timi-liuliang/echo-examples/raw/master/ads/cubemap.png?raw=true"" alt=""build house""  height=""128px"" />|gltf and light prob test|
|Force Field|<img src=""https://github.com/timi-liuliang/echo-examples/blob/master/ads/forcefield.gif?raw=true"" alt=""force field""  height=""128px"" />|Force Field Effect; Shader Graph + Procedural Sphere|
|Gaussian Blur|<img src=""https://github.com/timi-liuliang/echo-examples/blob/master/ads/gaussianblur.png?raw=true"" alt=""gaussian blur""  height=""128px"" />|Gaussian blur; Shader Graph + Procedural plane|
|Zoom Blur|<img src=""https://github.com/timi-liuliang/echo-examples/blob/master/ads/zoomblur.png?raw=true"" alt=""zoom blur""  height=""128px"" />|Zoom blur; Shader Graph + Procedural plane|
"
1181,An eCommerce  administration built with Laravel to create and manage online shop with multi-vendor.,"<p align=""center"">
    <a href=""https://laravelshopper.io"" title=""Shopper Dashboard Screenshoot""><img src=""https://github.com/shopperlabs/art/blob/main/socialcard.png""></a>
</p>

<p align=""center"">
    <a href=""https://github.com/shopperlabs/framework/actions"">
        <img src=""https://github.com/shopperlabs/framework/workflows/tests/badge.svg"" alt=""Build Status"">
    </a>
    <a href=""https://laravel.com"">
        <img alt=""Laravel v8.x"" src=""https://img.shields.io/badge/Laravel-v8.x-FF2D20"">
    </a>
    <a href=""https://packagist.org/packages/shopper/framework"">
        <img src=""https://img.shields.io/packagist/dt/shopper/framework"" alt=""Total Downloads"">
    </a>
    <a href=""https://packagist.org/packages/shopper/framework"">
        <img src=""https://img.shields.io/packagist/v/shopper/framework"" alt=""Latest Stable Version"">
    </a>
    <a href=""https://packagist.org/packages/shopper/framework"">
        <img src=""https://img.shields.io/packagist/l/shopper/framework"" alt=""License"">
    </a>
</p>

## Introduction

[Shopper](https://laravelshopper.io) is an Admin Management build for Laravel 8.0+ which includes all the necessary for your online market application.
Web Application has made using Laravel. We feel building ecommerce websites has become a convoluted and confusing process that leaves developers unsatisfied.
We want to turn you around to the simpler side and get back to basics.

## Installation

Instructions on how to install Shopper can be found at the [installation guide](https://laravelshopper.dev/installing).

### Quick start installation

For advanced users, run this in your terminal to install Shopper from command line:

``` bash
composer require shopper/framework
```

Run this command to install Shopper in your project

```php
php artisan shopper:install
```

The best place to learn Shopper is by [reading the documentation](https://laravelshopper.dev) or following some tutorials.

## Foundation library

The Framework uses [Laravel](https://laravel.com) as a foundation PHP framework.

## Contact

You can communicate with us using the following mediums:

* [Follow us on Twitter](https://twitter.com/laravelshopper) for announcements and updates.
* [Join us on Discord](https://laravelshopper.io/discord) to chat with us.

## Contributing

Please see [contributing.md](CONTRIBUTING.md) for details and a todolist.

## Security

If you discover any security related issues, please email contact@shopperlabs.io instead of using the issue tracker.

It's _heavily_ recommended that you **[subscribe to the Shopper Newsletter](http://laravelshopper.io)** so you can find out about any security updates, breaking changes or major features.
We send an email about 3-4 emails per year. Sometimes less.

## Credits

- [Arthur Monney][link-author]
- [Jean-Vincent QUILICHINI][link-author-2]
- [Laravel Fortify](https://github.com/laravel/fortify)
- [MailEclipse](https://github.com/Qoraiche/laravel-mail-editor)
- [All Contributors][link-contributors]

And a special thanks to [Caneco](https://twitter.com/caneco) for the logo ✨

## License

The Shopper Framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

## Sponsoring

Support this project by becoming a sponsor. Your logo will show up here with a link to your website.

[link-author]: https://github.com/mckenziearts
[link-author-2]: https://github.com/sense
[link-contributors]: ../../contributors
"
54,"coobjc provides coroutine support for Objective-C and Swift. We added await method、generator and actor model like C#、Javascript and Kotlin. For convenience, we added coroutine categories for some Foundation and UIKit API in cokit framework like NSFileManager, JSON, NSData, UIImage etc. We also add tuple support in coobjc.","<p align=""center"" >
  <img src=""coobjc_icon.png"" alt=""coobjc"" title=""coobjc"">
</p>

This library provides coroutine support for Objective-C and Swift. We added await method、generator and actor model like C#、Javascript and Kotlin. For convenience, we added coroutine categories for some Foundation and UIKit API in [cokit framework](cokit/README.md) like NSFileManager, JSON, NSData, UIImage etc. We also add tuple support in coobjc.

[cooobjc 中文文档](README_cn.md)

## 0x0 iOS Asynchronous programming problem

Block-based asynchronous programming callback is currently the most widely used asynchronous programming method for iOS. The GCD library provided by iOS system makes asynchronous development very simple and convenient, but there are many disadvantages based on this programming method：

* get into Callback hell

    Sequence of simple operations is unnaturally composed in the nested blocks. This ""Callback hell"" makes it difficult to keep track of code that is running, and the stack of closures leads to many second order effects.

* Handling errors becomes difficult and very verbose

* Conditional execution is hard and error-prone

* forget to call the completion block

* Because completion handlers are awkward, too many APIs are defined synchronously

    This is hard to quantify, but the authors believe that the awkwardness of defining and using asynchronous APIs (using completion handlers) has led to many APIs being defined with apparently synchronous behavior, even when they can block. This can lead to problematic performance and responsiveness problems in UI applications - e.g. spinning cursor. It can also lead to the definition of APIs that cannot be used when asynchrony is critical to achieve scale, e.g. on the server.

* Multi-threaded crashes that are difficult to locate

* Locks and semaphore abuse caused by blocking


## 0x1 Solution

These problem have been faced in many systems and many languages, and the abstraction of coroutines is a standard way to address them. Without delving too much into theory, coroutines are an extension of basic functions that allow a function to return a value or be suspended. They can be used to implement generators, asynchronous models, and other capabilities - there is a large body of work on the theory, implementation, and optimization of them.

Kotlin is a static programming language supported by JetBrains that supports modern multi-platform applications. It has been quite hot in the developer community for the past two years. In the Kotlin language, async/await based on coroutine, generator/yield and other asynchronous technologies have become syntactic standard, Kotlin coroutine related introduction, you can refer to：[https://www.kotlincn.net/docs/reference/coroutines/basics.html](https://www.kotlincn.net/docs/reference/coroutines/basics.html)

## 0x2 Coroutine

> **Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed. Coroutines are well-suited for implementing familiar program components such as cooperative tasks, exceptions, event loops, iterators, infinite lists and pipes**


The concept of coroutine has been proposed in the 1960s. It is widely used in the server. It is extremely suitable for use in high concurrency scenarios. It can greatly reduce the number of threads in a single machine and improve the connection and processing capabilities of a single machine. In the meantime, iOS currently does not support the use of coroutines（That's why we want to support it.）

## 0x3 coobjc framework

coobjc is a coroutine development framework that can be used on the iOS by the Alibaba Taobao-Mobile architecture team. Currently it supports the use of Objective-C and Swift. We use the assembly and C language for development, and the upper layer provides the interface between Objective-C and Swift. Currently, It's open source here under Apache open source license.

### 0x31 Install

* cocoapods for objective-c:  pod 'coobjc'
* cocoapods for swift: pod 'coswift'
* cocoapods for cokit: pod 'cokit'
* source code: All the code is in the ./coobjc directory

### 0x32 Documents

* Read the [Coroutine framework design](docs/arch_design.md) document.
* Read the [coobjc Objective-C Guide](docs/usage.md) document.
* Read the [coobjc Swift Guide](docs/usage_swift.md) document.
* Read the [cokit framework](cokit/README.md) document, learn how to use the wrapper api of System Interface.
* We have provided [coobjcBaseExample](Examples/coobjcBaseExample) demos for coobjc, [coSwiftDemo](Examples/coSwiftDemo) for coswift, [coKitExamples](cokit/Examples/coKitExamples) for cokit

### 0x33 Features

#### async/await

* create coroutine

Create a coroutine using the co_launch method

```objc
co_launch(^{
    ...
});
```

The coroutine created by co_launch is scheduled by default in the current thread.

* await asynchronous method

In the coroutine we use the await method to wait for the asynchronous method to execute, get the asynchronous execution result

```objc
- (void)viewDidLoad {
    ...
    co_launch(^{
        // async downloadDataFromUrl
        NSData *data = await(downloadDataFromUrl(url));
        
        // async transform data to image
        UIImage *image = await(imageFromData(data));

        // set image to imageView
        self.imageView.image = image;
    });
}
```

The above code turns the code that originally needs dispatch_async twice into sequential execution, and the code is more concise.

* error handling

In the coroutine, all our methods are directly returning the value, and no error is returned. Our error in the execution process is obtained by co_getError(). For example, we have the following interface to obtain data from the network. When the promise will reject: error

```objc
- (COPromise*)co_GET:(NSString*)url parameters:(NSDictionary*)parameters{
    COPromise *promise = [COPromise promise];
    [self GET:url parameters:parameters progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        [promise fulfill:responseObject];
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        [promise reject:error];
    }];
    return promise;
}
```

Then we can use the method in the coroutine：

```objc
co_launch(^{
    id response = await([self co_GET:feedModel.feedUrl parameters:nil]);
    if(co_getError()){
        //handle error message
    }
    ...
});
```

#### Generator

* create generator

We use co_sequence to create the generator

```objc
COCoroutine *co1 = co_sequence(^{
            int index = 0;
            while(co_isActive()){
                yield_val(@(index));
                index++;
            }
        });
```

In other coroutines, we can call the next method to get the data in the generator.

```objc
co_launch(^{
            for(int i = 0; i < 10; i++){
                val = [[co1 next] intValue];
            }
        });
```

* use case

The generator can be used in many scenarios, such as message queues, batch download files, bulk load caches, etc.:

```objc
int unreadMessageCount = 10;
NSString *userId = @""xxx"";
COSequence *messageSequence = co_sequence_onqueue(background_queue, ^{
   //thread execution in the background
    while(1){
        yield(queryOneNewMessageForUserWithId(userId));
    }
});

//Main thread update UI
co_launch(^{
   for(int i = 0; i < unreadMessageCount; i++){
       if(!isQuitCurrentView()){
           displayMessage([messageSequence next]);
       }
   }
});
```

Through the generator, we can load the data from the traditional producer--notifying the consumer model, turning the consumer into the data-->telling the producer to load the pattern, avoiding the need to use many shared variables for the state in multi-threaded computing. Synchronization eliminates the use of locks in certain scenarios.

#### Actor

> **_The concept of Actor comes from Erlang. In AKKA, an Actor can be thought of as a container for storing state, behavior, Mailbox, and child Actor and Supervisor policies. Actors do not communicate directly, but use Mail to communicate with each other._**

* create actor

We can use co_actor_onqueue to create an actor in the specified thread.

```objc
COActor *actor = co_actor_onqueue(q, ^(COActorChan *channel) {
    ...  //Define the state variable of the actor

    for(COActorMessage *message in channel){
        ...//handle message
    }
});
```

* send a message to the actor

The actor's send method can send a message to the actor

```objc
COActor *actor = co_actor_onqueue(q, ^(COActorChan *channel) {
    ...  //Define the state variable of the actor

    for(COActorMessage *message in channel){
        ...//handle message
    }
});

// send a message to the actor
[actor send:@""sadf""];
[actor send:@(1)];
```

#### tuple

* create tuple
we provide co_tuple method to create tuple

```objc
COTuple *tup = co_tuple(nil, @10, @""abc"");
NSAssert(tup[0] == nil, @""tup[0] is wrong"");
NSAssert([tup[1] intValue] == 10, @""tup[1] is wrong"");
NSAssert([tup[2] isEqualToString:@""abc""], @""tup[2] is wrong"");
```

you can store any value in tuple

* unpack tuple
we provide co_unpack method to unpack tuple

```objc
id val0;
NSNumber *number = nil;
NSString *str = nil;
co_unpack(&val0, &number, &str) = co_tuple(nil, @10, @""abc"");
NSAssert(val0 == nil, @""val0 is wrong"");
NSAssert([number intValue] == 10, @""number is wrong"");
NSAssert([str isEqualToString:@""abc""], @""str is wrong"");

co_unpack(&val0, &number, &str) = co_tuple(nil, @10, @""abc"", @10, @""abc"");
NSAssert(val0 == nil, @""val0 is wrong"");
NSAssert([number intValue] == 10, @""number is wrong"");
NSAssert([str isEqualToString:@""abc""], @""str is wrong"");

co_unpack(&val0, &number, &str, &number, &str) = co_tuple(nil, @10, @""abc"");
NSAssert(val0 == nil, @""val0 is wrong"");
NSAssert([number intValue] == 10, @""number is wrong"");
NSAssert([str isEqualToString:@""abc""], @""str is wrong"");

NSString *str1;

co_unpack(nil, nil, &str1) = co_tuple(nil, @10, @""abc"");
NSAssert([str1 isEqualToString:@""abc""], @""str1 is wrong"");
```

* use tuple in coroutine
first create a promise that resolve tuple value

```objc
COPromise<COTuple*>*
cotest_loadContentFromFile(NSString *filePath){
    return [COPromise promise:^(COPromiseFullfill  _Nonnull resolve, COPromiseReject  _Nonnull reject) {
        if ([[NSFileManager defaultManager] fileExistsAtPath:filePath]) {
            NSData *data = [[NSData alloc] initWithContentsOfFile:filePath];
            resolve(co_tuple(filePath, data, nil));
        }
        else{
            NSError *error = [NSError errorWithDomain:@""fileNotFound"" code:-1 userInfo:nil];
            resolve(co_tuple(filePath, nil, error));
        }
    }];
}
```

then you can fetch the value like this:

```objc
co_launch(^{
    NSString *tmpFilePath = nil;
    NSData *data = nil;
    NSError *error = nil;
    co_unpack(&tmpFilePath, &data, &error) = await(cotest_loadContentFromFile(filePath));
    XCTAssert([tmpFilePath isEqualToString:filePath], @""file path is wrong"");
    XCTAssert(data.length > 0, @""data is wrong"");
    XCTAssert(error == nil, @""error is wrong"");
});
```

use tuple you can get multiple values from await return

#### Actual case using coobjc

Let's take the code of the Feeds stream update in the GCDFetchFeed open source project as an example to demonstrate the actual usage scenarios and advantages of the coroutine. The following is the original implementation of not using coroutine：

```objc
- (RACSignal *)fetchAllFeedWithModelArray:(NSMutableArray *)modelArray {
    @weakify(self);
    return [RACSignal createSignal:^RACDisposable *(id<RACSubscriber> subscriber) {
        @strongify(self);
        //Create a parallel queue
        dispatch_queue_t fetchFeedQueue = dispatch_queue_create(""com.starming.fetchfeed.fetchfeed"", DISPATCH_QUEUE_CONCURRENT);
        dispatch_group_t group = dispatch_group_create();
        self.feeds = modelArray;
        for (int i = 0; i < modelArray.count; i++) {
            dispatch_group_enter(group);
            SMFeedModel *feedModel = modelArray[i];
            feedModel.isSync = NO;
            [self GET:feedModel.feedUrl parameters:nil progress:nil success:^(NSURLSessionTask *task, id responseObject) {
                dispatch_async(fetchFeedQueue, ^{
                    @strongify(self);
                    //parse feed
                    self.feeds[i] = [self.feedStore updateFeedModelWithData:responseObject preModel:feedModel];
                    //save to db
                    SMDB *db = [SMDB shareInstance];
                    @weakify(db);
                    [[db insertWithFeedModel:self.feeds[i]] subscribeNext:^(NSNumber *x) {
                        @strongify(db);
                        SMFeedModel *model = (SMFeedModel *)self.feeds[i];
                        model.fid = [x integerValue];
                        if (model.imageUrl.length > 0) {
                            NSString *fidStr = [x stringValue];
                            db.feedIcons[fidStr] = model.imageUrl;
                        }
                        //sendNext
                        [subscriber sendNext:@(i)];
                        //Notification single completion
                        dispatch_group_leave(group);
                    }];
                    
                });//end dispatch async
                
            } failure:^(NSURLSessionTask *operation, NSError *error) {
                NSLog(@""Error: %@"", error);
                dispatch_async(fetchFeedQueue, ^{
                    @strongify(self);
                    [[[SMDB shareInstance] insertWithFeedModel:self.feeds[i]] subscribeNext:^(NSNumber *x) {
                        SMFeedModel *model = (SMFeedModel *)self.feeds[i];
                        model.fid = [x integerValue];
                        dispatch_group_leave(group);
                    }];
                    
                });//end dispatch async
                
            }];
            
        }//end for
        //Execution event after all is completed
        dispatch_group_notify(group, dispatch_get_main_queue(), ^{
            [subscriber sendCompleted];
        });
        return nil;
    }];
}
```

The following is the call to the above method in viewDidLoad:

```objc
[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
self.fetchingCount = 0;
@weakify(self);
[[[[[[SMNetManager shareInstance] fetchAllFeedWithModelArray:self.feeds] map:^id(NSNumber *value) {
    @strongify(self);
    NSUInteger index = [value integerValue];
    self.feeds[index] = [SMNetManager shareInstance].feeds[index];
    return self.feeds[index];
}] doCompleted:^{
    @strongify(self);
    NSLog(@""fetch complete"");
    self.tbHeaderLabel.text = @"""";
    self.tableView.tableHeaderView = [[UIView alloc] init];
    self.fetchingCount = 0;
    [self.tableView.mj_header endRefreshing];
    [self.tableView reloadData];
    if ([SMFeedStore defaultFeeds].count > self.feeds.count) {
        self.feeds = [SMFeedStore defaultFeeds];
        [self fetchAllFeeds];
    }
    [self cacheFeedItems];
}] deliverOn:[RACScheduler mainThreadScheduler]] subscribeNext:^(SMFeedModel *feedModel) {
    @strongify(self);
    self.tableView.tableHeaderView = self.tbHeaderView;
    self.fetchingCount += 1;
    self.tbHeaderLabel.text = [NSString stringWithFormat:@""正在获取%@...(%lu/%lu)"",feedModel.title,(unsigned long)self.fetchingCount,(unsigned long)self.feeds.count];
    feedModel.isSync = YES;
    [self.tableView reloadData];
}];
```

The above code is relatively poor in terms of readability and simplicity. Let's take a look at the code after using the coroutine transformation:

```objc
- (SMFeedModel*)co_fetchFeedModelWithUrl:(SMFeedModel*)feedModel{
    feedModel.isSync = NO;
    id response = await([self co_GET:feedModel.feedUrl parameters:nil]);
    if (response) {
        SMFeedModel *resultModel = await([self co_updateFeedModelWithData:response preModel:feedModel]);
        int fid = [[SMDB shareInstance] co_insertWithFeedModel:resultModel];
        resultModel.fid = fid;
        if (resultModel.imageUrl.length > 0) {
            NSString *fidStr = [@(fid) stringValue];
            [SMDB shareInstance].feedIcons[fidStr] = resultModel.imageUrl;
        }
        return resultModel;
    }
    int fid = [[SMDB shareInstance] co_insertWithFeedModel:feedModel];
    feedModel.fid = fid;
    return nil;
}
```

Here is the place in viewDidLoad that uses the coroutine to call the interface:

```objc
co_launch(^{
    for (NSUInteger index = 0; index < self.feeds.count; index++) {
        SMFeedModel *model = self.feeds[index];
        self.tableView.tableHeaderView = self.tbHeaderView;
        self.tbHeaderLabel.text = [NSString stringWithFormat:@""正在获取%@...(%lu/%lu)"",model.title,(unsigned long)(index + 1),(unsigned long)self.feeds.count];
        model.isSync = YES;
        SMFeedModel *resultMode = [[SMNetManager shareInstance] co_fetchFeedModelWithUrl:model];
        if (resultMode) {
            self.feeds[index] = resultMode;
            [self.tableView reloadData];
        }
    }
    self.tbHeaderLabel.text = @"""";
    self.tableView.tableHeaderView = [[UIView alloc] init];
    self.fetchingCount = 0;
    [self.tableView.mj_header endRefreshing];
    [self.tableView reloadData];
    [self cacheFeedItems];
});
```

The code after the coroutine transformation has become easier to understand and less error-prone.

#### Swift

coobjc fully supports Swift through top-level encapsulation, enabling us to enjoy the coroutine ahead of time in Swift.
Because Swift has richer and more advanced syntax support, coobjc is more elegant in Swift, for example:

```swift
func test() {
    co_launch {//create coroutine
        //fetch data asynchronous
        let resultStr = try await(channel: co_fetchSomething())
        print(""result: \(resultStr)"")
    }

    co_launch {//create coroutine
        //fetch data asynchronous
        let result = try await(promise: co_fetchSomethingAsynchronous())
        switch result {
            case .fulfilled(let data):
                print(""data: \(String(describing: data))"")
                break
            case .rejected(let error):
                print(""error: \(error)"")
        }
    }
}
```

## 0x4 Advantages of the coroutine

* Concise
  * Less concept: there are only a few operators, compared to dozens of operators in response, it can't be simpler.
  * The principle is simple: the implementation principle of the coroutine is very simple, the entire coroutine library has only a few thousand lines of code
* Easy to use
  * Simple to use: it is easier to use than GCD, with few interfaces
  * Easy to retrofit: existing code can be corouted with only a few changes, and we have a large number of coroutine interfaces for the system library.
* Clear
  * Synchronous write asynchronous logic: Synchronous sequential way of writing code is the most acceptable way for humans, which can greatly reduce the probability of error
  * High readability: Code written in coroutine mode is much more readable than block nested code
* High performance
  * Faster scheduling performance: The coroutine itself does not need to switch between kernel-level threads, scheduling performance is fast, Even if you create tens of thousands of coroutines, there is no pressure.
  * Reduce app block: The use of coroutines to help reduce the abuse of locks and semaphores, and to reduce the number of stalls and jams from the root cause by encapsulating the coroutine interfaces such as IOs that cause blocking, and improve the overall performance of the application.

## 0x5 Communication

* If you **need help**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/coobjc). (Tag 'coobjc')
* If you'd like to **ask a general question**, use [Stack Overflow](http://stackoverflow.com/questions/tagged/coobjc).
* If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.
* If you **have a feature request**, open an issue.
* If you **want to contribute**, submit a pull request.
* If you are interested in **joining Alibaba Taobao-Mobile architecture team**, please send your resume to [junzhan](mailto:junzhan.yzw@taobao.com)

## 0x6 Unit Tests

coobjc includes a suite of unit tests within the Tests subdirectory. These tests can be run simply be executed the test action on the platform framework you would like to test. You can find coobjc's unit tests in Examples/coobjcBaseExample/coobjcBaseExampleTests. You can find cokit's unit tests in cokit/Examples/coKitExamples/coKitExamplesTests.

## 0x7 Credits

coobjc couldn't exist without:

* [Promises](https://github.com/google/promises) - Google's Objective-C and Swift Promises framework.
* [libtask](https://swtch.com/libtask/) - A simple coroutine library.
* [movies](https://github.com/KMindeguia/movies) - a ios demo app, we use the code in coobjc examples
* [v2ex](https://github.com/singro/v2ex) - An iOS client for v2ex.com, we use the code in coobjc examples
* [tuples](https://github.com/atg/tuples) - Objective-C tuples.
* [fishhook](https://github.com/facebook/fishhook) - Rebinding symbols in Mach-O binaries
* [Sol](https://github.com/comyar/Sol) - Sol° beautifully displays weather information so you can plan your day accordingly. Check the weather in your current location or any city around the world. Implemented in Objective-C.
* [Swift](https://github.com/apple/swift) - The Swift Programming Language
* [libdispatch](https://github.com/apple/swift-corelibs-libdispatch) - The libdispatch Project, (a.k.a. Grand Central Dispatch), for concurrency on multicore hardware
* [objc4](https://opensource.apple.com/source/objc4/objc4-750.1/) - apple objc framework
* https://blog.csdn.net/qq910894904/article/details/41911175
* http://www.voidcn.com/article/p-fwlohnnc-gc.html
* https://blog.csdn.net/shenlei19911210/article/details/61194617

## 0x8 Authors

* [pengyutang125](https://github.com/pengyutang125)
* [NianJi](https://github.com/NianJi)
* [intheway](https://github.com/intheway)
* [ValiantCat](https://github.com/ValiantCat)
* [jmpews](https://github.com/jmpews)

## 0x9 Contributing

* [Contributing](./CONTRIBUTING.md)

## 0xA License

coobjc is released under the Apache 2.0 license. See [LICENSE](LICENSE) for details.
"
2327,Python for《Deep Learning》，该书为《深度学习》(花书) 数学推导、原理剖析与源码级别代码实现,"# Deep Learning

《**深度学习**》是深度学习领域唯一的综合性图书，全称也叫做**深度学习 AI圣经(Deep Learning)**，由三位全球知名专家IanGoodfellow、YoshuaBengio、AaronCourville编著，全书囊括了数学及相关概念的背景知识，包括线性代数、概率论、信息论、数值优化以及机器学习中的相关内容。同时，它还介绍了工业界中实践者用到的深度学习技术，包括深度前馈网络、正则化、优化算法、卷积网络、序列建模和实践方法等，并且调研了诸如自然语言处理、语音识别、计算机视觉、在线推荐系统、生物信息学以及视频游戏方面的应用。最后，深度学习全书还提供了一些研究方向，涵盖的理论主题包括线性因子模型、自编码器、表示学习、结构化概率模型、蒙特卡罗方法、配分函数、近似推断以及深度生成模型，适用于相关专业的大学生或研究生使用。

<img src=""https://github.com/MingchaoZhu/DeepLearning/blob/master/docs/cover.jpg"" width=""200"" height=""300"" alt=""深度学习封面"" align=center>

可以下载《深度学习》的中文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.1/DL_cn.pdf) 和英文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.0/DL_en.pdf) 直接阅读。

对于本项目的工作，你可以直接下载 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf) (后面会对该书不断更新)

---

《深度学习》可以说是深度学习与人工智能的入门宝典，许多算法爱好者、机器学习培训班、互联网企业的面试，很多都参考这本书。但本书晦涩，加上官方没有提供代码实现，因此某些地方较难理解。本项目**基于数学推导和产生原理重新描述了书中的概念**，并用**Python** (numpy 库为主) 复现了书本内容 ( **源码级代码实现。推导过程和代码实现均放在了下载区的 pdf 文件中**，重要部分的实现代码也放入 **code 文件夹**中 )。

然而我水平有限，但我真诚地希望这项工作可以帮助到更多人学习深度学习算法。我需要大家的建议和帮助。如果你在阅读中遇到有误或解释不清的地方，希望可以汇总你的建议，在 Issues 提出。如果你也想加入这项工作书写中或有其他问题，可以联系我的邮箱。如果你在你的工作或博客中用到了本书，还请可以注明引用链接。

写的过程中参考了较多网上优秀的工作，所有参考资源保存在了`reference.txt`文件中。

# 留言

这份工作就是在写这一本 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf)。正如你在 pdf 文件中所见到的，《深度学习》涉及到的每一个概念，都会去给它详细的描述、原理层面的推导，以及用代码的实现。代码实现不会调用 Tensorflow、PyTorch、MXNet 等任何深度学习框架，甚至包括 sklearn (pdf 里用到 sklearn 的部分都是用来验证代码无误)，一切代码都是从原理层面实现 (Python 的基础库 NumPy)，并有详细注释，与代码区上方的原理描述区一致，你可以结合原理和代码一起理解。

这份工作的起因是我自身的热爱，但为完成这份工作我需要投入大量的时间精力，一般会写到凌晨两三点。推导、代码、作图都是慢慢打磨的，我会保证这份工作的质量。这份工作会一直更新完，已经上传的章节也会继续补充内容。如果你在阅读过程中遇到有想要描述的概念点或者错误点，请发邮件告知我。

真的很感谢你的认可与推广。最后，请等待下一次更新。

我是 朱明超，我的邮箱是：deityrayleigh@gmail.com

# 更新说明

2020/3/：

```python
1. 修改第五章决策树部分，补充 ID3 和 CART 的原理，代码实现以 CART 为主。
2. 第七章添加 L1 和 L2 正则化最优解的推导 (即 L1稀疏解的原理)。
3. 第七章添加集成学习方法的推导与代码实现，包括 Bagging (随机森林)、Boosting (Adaboost、GBDT、XGBoost)。
4. 第八章添加牛顿法与拟牛顿法 (DFP、BFGS、L-BFGS) 的推导。
5. 第十一章节添加贝叶斯线性回归、高斯过程回归 (GPR) 与贝叶斯优化的推导与代码实现。
```
后面每次的更新内容会统一放在 `update.txt` 文件中。

# 章节目录与文件下载

除了《深度学习》书中的概念点，**本项目也在各章节添加一些补充知识，例如第七章集成学习部分的 随机森林、Adaboost、GBDT、XGBoost 的原理剖析和代码实现等，又或者第十二章对当前一些主流方法的描述**。大的章节目录和 pdf 文件下载链接可以详见下表，而具体 pdf 文件中的实际目录请参考 `contents.txt`。你可以在下面的 pdf 链接中下载对应章节，也可以在 [releases](https://github.com/MingchaoZhu/DeepLearning/releases) 界面直接下载所有文件。

| 中文章节 | 英文章节 | 下载<br />(含推导与代码实现) |
| ------------ | ------------ | ------------ |
| 第一章 前言 | 1 Introduction |  |
| 第二章 线性代数 | 2 Linear Algebra | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/2%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.pdf) |
| 第三章 概率与信息论                 | 3 Probability and Information Theory | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/3%20%E6%A6%82%E7%8E%87%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%AE%BA.pdf) |
| 第四章 数值计算                     | 4 Numerical Computation | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/4%20%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97.pdf) |
| 第五章 机器学习基础                 | 5 Machine Learning Basics | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/5%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.pdf) |
| 第六章 深度前馈网络                 | 6 Deep Feedforward Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/6%20%E6%B7%B1%E5%BA%A6%E5%89%8D%E9%A6%88%E7%BD%91%E7%BB%9C.pdf) |
| 第七章 深度学习中的正则化           | 7 Regularization for Deep Learning | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/7%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%96.pdf) |
| 第八章 深度模型中的优化 | 8 Optimization for Training Deep Models | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/8%20%E6%B7%B1%E5%BA%A6%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96.pdf) |
| 第九章 卷积网络 | 9 Convolutional Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/9%20%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C.pdf) |
| 第十章 序列建模：循环和递归网络 | 10 Sequence Modeling: Recurrent and Recursive Nets |  |
| 第十一章 实践方法论                 | 11 Practical Methodology | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/11%20%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95%E8%AE%BA.pdf) |
| 第十二章 应用 | 12 Applications |  |
| 第十三章 线性因子模型 | 13 Linear Factor Models |  |
| 第十四章 自编码器                   | 14 Autoencoders |  |
| 第十五章 表示学习                   | 15 Representation Learning |  |
| 第十六章 深度学习中的结构化概率模型 | 16 Structured Probabilistic Models for Deep Learning |  |
| 第十七章 蒙特卡罗方法 | 17 Monte Carlo Methods |  |
| 第十八章 直面配分函数 | 18 Confronting the Partition Function |  |
| 第十九章 近似推断                   | 19 Approximate Inference |  |
| 第二十章 深度生成模型 | 20 Deep Generative Models |  |

尚未上传的章节会在后续陆续上传。

# 致谢

感谢对本项目的认可和推广。

+ 专知：https://mp.weixin.qq.com/s/dVD-vKJsMGqnBz2v4O-Q3Q
+ GitHubDaily：https://m.weibo.cn/5722964389/4504392843690487
+ 程序员遇见GitHub：https://mp.weixin.qq.com/s/EzFOnwpkv7mr2TSjPtVG9A
+ 爱可可：https://m.weibo.cn/1402400261/4503389646699745

# 赞助

本项目书写耗费时间精力。如果本项目对你有帮助，可以请作者吃份冰淇淋：

<img src=""./docs/pay.jpg"" width=""200"" height=""200"" alt=""支付"" align=center>
"
863,CSS styled emails without the hassle.,"# premailer-rails

CSS styled emails without the hassle.

[![Build Status][build-image]][build-link]
[![Gem Version][gem-image]][gem-link]
[![Code Climate][gpa-image]][gpa-link]

## Introduction

This gem is a drop in solution for styling HTML emails with CSS without having
to do the hard work yourself.

Styling emails is not just a matter of linking to a stylesheet. Most clients,
especially web clients, ignore linked stylesheets or `<style>` tags in the HTML.
The workaround is to write all the CSS rules in the `style` attribute of each
tag inside your email. This is a rather tedious and hard to maintain approach.

Premailer to the rescue! The great [premailer] gem applies all CSS rules to each
matching HTML element by adding them to the `style` attribute. This allows you
to keep HTML and CSS in separate files, just as you're used to from web
development, thus keeping your sanity.

This gem is an adapter for premailer to work with [actionmailer] out of the box.
Actionmailer is the email framework used in Rails, which also works outside of
Rails. Although premailer-rails has certain Rails specific features, **it also
works in the absence of Rails** making it compatible with other frameworks such
as sinatra.

## How It Works

premailer-rails works with actionmailer by registering a delivery hook. This
causes all emails that are delivered to be processed by premailer-rails. This
means that by simply including premailer-rails in your `Gemfile` you'll get
styled emails without having to set anything up.

Whenever premailer-rails processes an email, it collects the URLs of all linked
stylesheets (`<link rel=""stylesheet"" href=""css_url"">`). Then, for each of these
URLs, it tries to get the content through a couple of strategies. As long as
a strategy does not return anything, the next one is used. The strategies
available are:

-   `:filesystem`: If there's a file inside `public/` with the same path as in
    the URL, it is read from disk. E.g. if the URL is
    `http://cdn.example.com/assets/email.css` the contents of the file located
    at `public/assets/email.css` gets returned if it exists.

-   `:asset_pipeline`: If Rails is available and the asset pipeline is enabled,
    the file is retrieved through the asset pipeline. E.g. if the URL is
    `http://cdn.example.com/assets/email-fingerprint123.css`, the file
    `email.css` is requested from the asset pipeline. That is, the fingerprint
    and the prefix (in this case `assets` is the prefix) are stripped before
    requesting it from the asset pipeline.

-   `:network`: As a last resort, the URL is simply requested and the response
    body is used. This is useful when the assets are not bundled in the
    application and only available on a CDN. On Heroku e.g. you can add assets
    to your `.slugignore` causing your assets to not be available to the app
    (and thus resulting in a smaller app) and deploy the assets to a CDN such
    as S3/CloudFront.

You can configure which strategies you want to use as well as specify their
order. Refer to the *Configuration* section for more on this.

Note that the retrieved CSS is cached when the gem is running with Rails in
production.

## Installation

Simply add the gem to your `Gemfile`:

```ruby
gem 'premailer-rails'
```

premailer-rails and premailer require a gem that is used to parse the email's
HTML. For a list of supported gems and how to select which one to use, please
refer to the [*Adapter*
section](https://github.com/premailer/premailer#adapters) of premailer. Note
that there is no hard dependency from either gem so you should add one yourself.
Also note that this gem is only tested with [nokogiri].

## Configuration

Premailer itself accepts a number of options. In order for premailer-rails to
pass these options on to the underlying premailer instance, specify them
as follows (in Rails you could do that in an initializer such as
`config/initializers/premailer_rails.rb`):

```ruby
Premailer::Rails.config.merge!(preserve_styles: true, remove_ids: true)
```

For a list of options, refer to the [premailer documentation]. The default
configs are:

```ruby
{
  input_encoding: 'UTF-8',
  generate_text_part: true,
  strategies: [:filesystem, :asset_pipeline, :network]
}
```

If you don't want to automatically generate a text part from the html part, set
the config `:generate_text_part` to false.

Note that the options `:with_html_string` and `:css_string` are used internally
by premailer-rails and thus will be overridden.

If you're using this gem outside of Rails, you'll need to call
`Premailer::Rails.register_interceptors` manually in order for it to work. This
is done ideally in some kind of initializer, depending on the framework you're
using.

premailer-rails reads all stylesheet `<link>` tags, inlines the linked CSS
and removes the tags. If you wish to ignore a certain tag, e.g. one that links to
external fonts such as Google Fonts, you can add a `data-premailer=""ignore""`
attribute.

## Usage

premailer-rails processes all outgoing emails by default. If you wish to skip
premailer for a certain email, simply set the `:skip_premailer` header:

```ruby
class UserMailer < ActionMailer::Base
  def welcome_email(user)
    mail to: user.email,
         subject: 'Welcome to My Awesome Site',
         skip_premailer: true
  end
end
```

Note that the mere presence of this header causes premailer to be skipped, i.e.,
even setting `skip_premailer: false` will cause premailer to be skipped. The
reason for that is that the `skip_premailer` is a simple header and the value is
transformed into a string, causing `'false'` to become truthy.

Emails are only processed upon delivery, i.e. when calling `#deliver` on the
email, or when [previewing them in
rails](http://api.rubyonrails.org/v4.1.0/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Previewing+emails).
If you wish to manually trigger the inlining, you can do so by calling the hook:

```ruby
mail = SomeMailer.some_message(args)
Premailer::Rails::Hook.perform(mail)
```

This will modify the email in place, useful e.g. in tests.

## Supported Rails Versions

This gem is tested on Rails versions 5 through 7.

For Rails 7, it support both the classical Sprockets asset pipeline as well as the new [Propshaft](https://github.com/rails/propshaft) gem.

If you're looking to integrate with Webpacker, check out [these instructions](https://github.com/fphilipe/premailer-rails/issues/232#issuecomment-839819705).

## Small Print

### Author

Philipe Fatio ([@fphilipe][fphilipe twitter])

### License

premailer-rails is released under the MIT license. See the [license file].

[build-image]: https://github.com/fphilipe/premailer-rails/actions/workflows/test.yml/badge.svg
[build-link]:  https://github.com/fphilipe/premailer-rails/actions/workflows/test.yml
[gem-image]:   https://badge.fury.io/rb/premailer-rails.svg
[gem-link]:    https://rubygems.org/gems/premailer-rails
[gpa-image]:   https://codeclimate.com/github/fphilipe/premailer-rails.svg
[gpa-link]:    https://codeclimate.com/github/fphilipe/premailer-rails
[tip-image]:   https://rawgithub.com/twolfson/gittip-badge/0.1.0/dist/gittip.svg
[tip-link]:    https://www.gittip.com/fphilipe/

[premailer]:    https://github.com/premailer/premailer
[actionmailer]: https://github.com/rails/rails/tree/main/actionmailer
[nokogiri]:     https://github.com/sparklemotion/nokogiri

[premailer documentation]: https://www.rubydoc.info/gems/premailer/Premailer:initialize

[fphilipe twitter]: https://twitter.com/fphilipe
[license file]:     LICENSE
"
3395,"Network recon framework. Build your own, self-hosted and fully-controlled alternatives to Shodan / ZoomEye / Censys and GreyNoise, run your Passive DNS service, collect and analyse network intelligence from your sensors, and much more!","[![Join the chat at Gitter](https://badges.gitter.im/ivre/ivre.svg)](https://gitter.im/ivre/ivre)
[![Follow on Twitter](https://img.shields.io/twitter/follow/IvreRocks.svg?logo=twitter)](https://twitter.com/IvreRocks)
![Follow on Mastodon](https://img.shields.io/mastodon/follow/109349639355238149?domain=https%3A%2F%2Finfosec.exchange&style=social)
[![GitHub stars](https://img.shields.io/github/stars/ivre/ivre?style=social)](https://github.com/ivre/ivre)
[![PyPI downloads](https://pepy.tech/badge/ivre)](https://pypi.org/project/ivre/)
[![Docker pulls](https://img.shields.io/docker/pulls/ivre/web)](https://hub.docker.com/u/ivre/)

[![MongoDB tests](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/mongodb.yml/?branch=master)
[![Elasticsearch tests](https://github.com/ivre/ivre/actions/workflows/elastic.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/elastic.yml/?branch=master)
[![PostgreSQL tests](https://github.com/ivre/ivre/actions/workflows/postgres.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/postgres.yml/?branch=master)
[![TinyDB tests](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/tinydb.yml/?branch=master)
[![SQLite tests](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/sqlite.yml/?branch=master)
[![Maxmind tests](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/workflows/maxmind.yml/?branch=master)
[![Linting tests](https://github.com/ivre/ivre/actions/workflows/linting.yml/badge.svg?branch=master)](https://github.com/ivre/ivre/actions/linting/mongodb.yml/?branch=master)
[![Documentation Status](https://readthedocs.org/projects/ivre/badge/?version=latest)](https://doc.ivre.rocks/en/latest/?badge=latest)

# IVRE #

<img align=""right"" src=""https://ivre.rocks/logo.png"" alt=""Logo""/> IVRE
(Instrument de veille sur les réseaux extérieurs) or DRUNK (Dynamic
Recon of UNKnown networks) is a network recon framework, including
tools for passive and active recon. IVRE can use data from:

- Passive tools:
  - [Zeek](https://zeek.org/)
  - [Argus](http://qosient.com/argus/)
  - [Nfdump](https://github.com/phaag/nfdump)
  - [p0f](https://lcamtuf.coredump.cx/p0f3/)
  - [airodump-ng](https://www.aircrack-ng.org/)
- Active tools:
  - [Nmap](https://nmap.org/)
  - [Masscan](https://github.com/robertdavidgraham/masscan)
  - [ZGrab2](https://github.com/zmap/zgrab2)
  - [ZDNS](https://github.com/zmap/zdns)
  - [Nuclei](https://nuclei.projectdiscovery.io/)
  - [httpx](https://github.com/projectdiscovery/httpx)
  - [dnsx](https://github.com/projectdiscovery/dnsx)
  - [tlsx](https://github.com/projectdiscovery/tlsx)
  - [Dismap](https://github.com/zhzyker/dismap/)

The advertising slogans are:

-   (in French): IVRE, il scanne Internet.
-   (in English): Know the networks, get DRUNK!
-   (in Latin): Nunc est bibendum.

The names IVRE and DRUNK have been chosen as a tribute to ""Le
Taullier"".

## Overview ##

You can have a look at the [project homepage](https://ivre.rocks/),
the
**[screenshot gallery](https://doc.ivre.rocks/en/latest/overview/screenshots.html)**,
and the
[quick video introduction](https://www.youtube.com/watch?v=GBu5QMq6ewY)
for an overview of the Web interface.

We have a **demonstration instance**, just [contact us](#contact) to
get an access.

A few
**[blog posts](http://pierre.droids-corp.org/blog/html/tags/ivre.html)**
have been written to show some features of IVRE.

## Documentation ##

[IVRE's documentation](https://doc.ivre.rocks/) is hosted by Read The
Docs, based on files from the [doc/](doc/) directory of the
repository.

On an IVRE web server, the `doc/*` files are available, rendered,
under `/doc/`.

On a system with IVRE installed, you can use a `--help` option with
most IVRE CLI tools, and `help(ivre.module)` with most IVRE Python
sub-modules.

## License ##

IVRE is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

IVRE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
[along with IVRE](doc/license.rst). If not, see
[the gnu.org web site](http://www.gnu.org/licenses/).

## Support ##

Try `--help` for the CLI tools, `help()` under Python and the ""HELP""
button in the web interface.

Have a look at the
[FAQ](https://doc.ivre.rocks/en/latest/overview/faq.html)!

Feel free to contact the author and offer him a beer if you need help!

If you don't like beer, a good scotch or any other good alcoholic
beverage will do (it is the author's unalienable right to decide
whether a beverage is good or not).

## Contributing ##

Code contributions (pull-requests) are of course welcome!

The project needs scan results and capture files that can be provided
as examples. If you can contribute some samples, or if you want to
contribute some samples and would need some help to do so, or if you
can provide a server to run scans, please contact the author.

## Contact ##

For both support and contribution, the
[repository](https://github.com/ivre/ivre) on Github should be
used: feel free to create a new issue or a pull request!

You can also join the
[Gitter conversation](https://gitter.im/ivre/ivre) (that is the
preferred way to get in touch for questions), or use the e-mail `dev`
on the domain `ivre.rocks`.

## Talking about IVRE ##

### Research ###

If you are using IVRE in you research, please cite it as follows:

IVRE contributors. *IVRE, a network recon framework*.
[https://github.com/ivre/ivre](https://github.com/ivre/ivre),
2011-2022.

Here is the appropriate bibtex entry:

    @MISC{ivre,
        title = {{IVRE}, a network recon framework},
        author={IVRE contributors},
        url = {https://ivre.rocks/},
        howpublished = {\url{https://github.com/ivre/ivre/}},
        year = {2011--2022},
    }

### Technical documents & blog posts ###

You can mention ""IVRE, a network recon framework"", together with the
project homepage, [https://ivre.rocks/](https://ivre.rocks/) and/or
the repository,
[https://github.com/ivre/ivre](https://github.com/ivre/ivre).

On twitter, you can follow and/or mention
[@IvreRocks](https://twitter.com/IvreRocks).
"
3375,Canonical actor model implementation for .NET with local + distributed actors in C# and F#.,"# Akka.NET

![Akka.NET logo](docs/shfb/icons/AkkaNetLogo.Normal.png)

[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/akkadotnet/akka.net?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) <br/>

**Akka.NET** is a professional-grade port of the popular Java/Scala framework [Akka](http://akka.io) distributed actor framework to .NET.

Akka.NET is a [.NET Foundation](https://dotnetfoundation.org/) project.

![.NET Foundation Logo](docs/images/dotnetfoundationhorizontal.svg)

## Build Status

| Stage                                   | Status                                                                                                                                                                                                                                                                |
|-------------------------------------    |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    |
| Build                                   | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=Windows%20Build)](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                                       |
| NuGet Pack                              | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=NuGet%20Pack)](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                                          |
| .NET Framework Unit Tests               | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Framework%20Unit%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)           |
| .NET Framework MultiNode Tests          | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Framework%20Multi-Node%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)     |
| .NET Core (Windows) Unit Tests          | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Unit%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                |
| .NET Core (Linux) Unit Tests            | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Unit%20Tests%20(Linux))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)                  |
| .NET Core (Windows) MultiNode Tests     | [![Build Status](https://dev.azure.com/dotnet/Akka.NET/_apis/build/status/akka.net/PR%20Validation?branchName=dev&jobName=.NET%20Core%20Multi-Node%20Tests%20(Windows))](https://dev.azure.com/dotnet/Akka.NET/_build/latest?definitionId=84&branchName=dev)          |
| .NET Core (Linux) MultiNode Tests       |                                                                                                                                                                                                                                                                       |
| Docs                                    | [![Build Status](https://dev.azure.com/petabridge/akkadotnet-tools/_apis/build/status/Akka.NET%20Docs?branchName=dev)](https://dev.azure.com/petabridge/akkadotnet-tools/_build/latest?definitionId=82&branchName=dev)                                                |


### Documentation and resources

#### [Akka.NET Project Site](http://getakka.net)


### Install Akka.NET via NuGet

If you want to include Akka.NET in your project, you can [install it directly from NuGet](https://www.nuget.org/packages/Akka)

To install Akka.NET Distributed Actor Framework, run the following command in the Package Manager Console

```
PM> Install-Package Akka
PM> Install-Package Akka.Remote
```

And if you need F# support:

```
PM> Install-Package Akka.FSharp
```

## Builds
Please see [Building Akka.NET](http://getakka.net/community/building-akka-net.html).

To access nightly Akka.NET builds, please [see the instructions here](http://getakka.net/community/getting-access-to-nightly-builds.html).

## Support
If you need help getting started with Akka.NET, there's a number of great community resources online:

* Subscribe to the Akka.NET project feed on Twitter: https://twitter.com/AkkaDotNet  (@AkkaDotNet)
* Join the Akka.NET project Gitter chat: https://gitter.im/akkadotnet/akka.net
* Ask Akka.NET questions on Stack Overflow: http://stackoverflow.com/questions/tagged/akka.net

If you and your company are interested in getting professional Akka.NET support, you can [contact Petabridge for dedicated Akka.NET support](https://petabridge.com/).
"
2537,Classic overhead run-and-gun game,"# ![C-Dogs SDL](http://cxong.github.io/cdogs-sdl/images/title.png)

[![Build Status](https://github.com/cxong/cdogs-sdl/workflows/Build/badge.svg)](https://github.com/cxong/cdogs-sdl/actions)
[![Build Status (Windows)](https://ci.appveyor.com/api/projects/status/github/cxong/cdogs-sdl?svg=true)](https://ci.appveyor.com/project/cxong/cdogs-sdl)
[![Github All Releases](https://img.shields.io/github/downloads/cxong/cdogs-sdl/total.svg)](https://github.com/cxong/cdogs-sdl/releases)
[![Release](http://img.shields.io/github/release/cxong/cdogs-sdl.svg)](https://github.com/cxong/cdogs-sdl/releases/latest)
[![Custom campaigns](https://img.shields.io/badge/%F0%9F%94%97-custom%20campaigns-brightgreen)](http://cdogs.morezombies.net/)

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/column.png) Introduction

C-Dogs SDL is a classic overhead run-and-gun game, supporting up to 4 players
in co-op and deathmatch modes. Customize your player, choose from many weapons,
and blast, slide and slash your way through over 100 user-created campaigns.
Have fun!

[Releases and release notes](https://github.com/cxong/cdogs-sdl/releases)

For more information about the original C-Dogs read [`original\_readme.txt`](https://raw.githubusercontent.com/cxong/cdogs-sdl/master/doc/original_readme.txt).

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/folder.png) What is C-Dogs SDL

![Walk cycle](https://github.com/cxong/cxong.github.io/blob/master/_posts/cdogs_walk_cycle_jones.gif)

[C-Dogs](https://en.wikipedia.org/wiki/C-Dogs) is a freeware DOS game made between 1997-2001 by Ronny Wester, who's also known for making Cyberdogs (1994). Although relatively obscure, it was one of the more well-known games of its kind, and built a small following with many fans creating custom campaigns for it. Players loved it for its simple yet addictive gameplay and wicked explosions.

![Explosions](https://github.com/cxong/cdogs-sdl/blob/gh-pages/_posts/shake.gif)

- Internet Archive: http://web.archive.org/web/20050305054405/http://www.orcsoftware.com/~ronny/C-Dogs.html

The story would have ended there had Ronny not been awesome enough to release the source code in 2002. There it was picked up by Jeremy Chin and Lucas Martin-King, who ported the game to SDL and made it available for modern PCs. A few other ports came and went, for systems as varied as BeOS and Wii.

These days the project is maintained by Cong Xu, who along with a few other contributors, have been making the game even better while staying true to the original game's vision. 4-player multiplayer, co-op AI, moddability and new campaigns/maps are just some of the enhancements available.

So what are you waiting for? Download C-Dogs SDL today and have a blast!


## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/barrel_blue.png) Platforms

[![Packaging status](https://repology.org/badge/tiny-repos/cdogs-sdl.svg)](https://repology.org/project/cdogs-sdl/versions)

C-Dogs SDL runs on Windows, Linux and macOS. Other platforms and ports are also available, but may be outdated.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/cd.png) Installation

The easiest way is to [download from **itch.io**](https://congusbongus.itch.io/cdogs-sdl). If you use the itch.io app, your game installation will be updated automatically.

For building on your platform, follow the [getting started wiki](https://github.com/cxong/cdogs-sdl/wiki#getting-started). You will need the SDL2 development libraries installed.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/barrel_skull.png) License

tl;dr: **GPLv2** for code, **CC0/CC-BY/CC-BY-SA** for assets. Significant amounts of **BSD 2-clause** code.

Code is licensed under GPL version 2, with significant portions under BSD 2-clause. The code is free software; you can use, modify and redistribute for any purpose, as long as you follow the GPL and BSD licenses!

Data is licensed under various free terms, including CC0, CC-BY and CC-BY-SA. [The original C-Dogs data is also under CC-BY](https://raw.githubusercontent.com/cxong/cdogs-sdl/master/doc/README_DATA.md). New data is licensed as CC0 if not specified. You are free to use, modify and redistribute these for any purpose, as long as you follow their licenses.

## ![](https://github.com/cxong/cdogs-sdl/blob/master/graphics/circuit.png) Contact

If you have any questions, comments, bug reports, patches or anything else related to C-Dogs SDL:

- [Raise an issue](https://github.com/cxong/cdogs-sdl/issues)
- Email: [Cong](<mailto:congusbongus@gmail.com>)
"
1357,Some helper classes for writing functional tests in Symfony,"[![Build Status](https://github.com/liip/LiipFunctionalTestBundle/actions/workflows/tests.yml/badge.svg)](https://github.com/liip/LiipFunctionalTestBundle/actions/workflows/tests.yml)
[![Latest Stable Version](https://poser.pugx.org/liip/functional-test-bundle/v/stable)](https://packagist.org/packages/liip/functional-test-bundle)
[![Latest Unstable Version](https://poser.pugx.org/liip/functional-test-bundle/v/unstable)](https://packagist.org/packages/liip/functional-test-bundle)
[![Scrutinizer Code Quality][Scrutinizer image]
![Scrutinizer][Scrutinizer Coverage Image]][Scrutinizer]

Introduction
============

This Bundle provides base classes for functional tests.
It also provides a DI aware mock builder for unit tests.

Documentation
------------

* [Installation](doc/installation.md)
* [Basic usage](doc/basic.md)
* [Command test](doc/command.md)
* [Logged client](doc/logged.md)
* [Query counter](doc/query.md)
* [Examples](doc/examples.md)
* [Caveats](doc/caveats.md)

To run tests in parallel:
* [Fastest](doc/fastest.md)

[Travis Master]: https://travis-ci.org/liip/LiipFunctionalTestBundle
[Travis Master image]: https://travis-ci.org/liip/LiipFunctionalTestBundle.svg?branch=master
[Scrutinizer]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/?branch=master
[Scrutinizer image]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/badges/quality-score.png?b=master
[Scrutinizer Coverage image]: https://scrutinizer-ci.com/g/liip/LiipFunctionalTestBundle/badges/coverage.png?b=master
"
1535,Angular with ngRx and experimental ngrx-data helper,"# Angular ngrx-data

> **This repository is now merged with @ngrx into @ngrx/data. You can find the [ngrx/data docs here](https://ngrx.io/guide/data) and the [github repository with ngrx/data in it here](https://github.com/ngrx/platform)**

**Please read the note above**

[![prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://prettier.io/)

## Zero Ngrx Boilerplate

**You may never write an action, reducer, selector, effect, or HTTP dataservice again.**

[_NgRx_](https://github.com/ngrx/platform/blob/master/README.md) helps Angular applications manage shared state in a ""reactive"" style, following the [redux](https://redux.js.org) pattern.

But to use it properly requires _both_ a deep understanding of redux/ngrx _and_ a lot of _boilerplate code_.

_Ngrx-data_ is an _ngrx_ extension that offers a gentle introduction to _ngrx/redux_ without the boilerplate.

> **Try it!** See the [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md) for instructions on adding NgRx and ngrx-data to your app.

<a id=""why""></a>

## Why use _ngrx-data_?

Many applications have substantial _domain models_ with 10s or 100s of [entity types](docs/faq.md/#entity)
such as _Customer_, _Order_, _LineItem_, _Product_, and _User_.

In plain _ngrx_, to create, retrieve, update, and delete (CRUD) data for every entity type is an overwhelming task. You're writing _actions_, _action-creators_, _reducers_, _effects_, _dispatchers_, and _selectors_ as well as the HTTP GET, PUT, POST, and DELETE methods _for each entity type_.

In even a small model, this is a ton of repetitive code to create, maintain, and test.

The _ngrx-data_ library is _one_ way to stay on the _ngrx_ path while radically reducing the ""boilerplate"" necessary to manage entities with _ngrx_.

## It's still _NgRx_

**This is a _library for ngrx_, not an ngrx alternative.**

It's easy to combine standard ngrx with ngrx-data.
It's easy to take control when you need it and hand control back to ngrx-data when you're done.

Every entity has its own actions. Every operation takes its unique journey through the store, reducers, effects, and selectors. You just let _ngrx-data_ create these for you.

You can add custom store properties, actions, reducers, selectors, and effects. You can override any ngrx-data behavior for an individual entity type or for all entities.
You can make your own calls to the server and update the cached entity collections with the results using ngrx-data _cache-only_ actions.

You can see the _ngrx machinery_ at work with the [_redux developer tools_](#redux-dev-tools). You can listen to the flow of actions directly. You can _intercept and override anything_ ... but you only have to intervene where you want to add custom logic.

### Learn about it

For a hands-on experience, try the [QuickStart](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md)
in the tutorial git repo, **[ngrx-data-lab](https://github.com/johnpapa/ngrx-data-lab/)**,
which guides you on the few, simple steps necessary to migrate from a typical service-based Angular app, to an app that manages state with _ngrx-data_.

_This_ **ngrx-data repository** has the main documentation and its own sample app.

The sample app in the `src/client/app/` folder presents an editor for viewing and changing _Heroes_ and _Villains_.

The following _reduced_ extract from that demo illustrates the essential mechanics of configuring and using _ngrx-data_.

You begin with a description of the entity model in a few lines of metadata.

```javascript
// Metadata for the entity model
export const entityMetadata: EntityMetadataMap = {
  Hero: {},
  Villain: {}
};

// Help ngrx-data pluralize entity type names
// because the plural of ""Hero"" is not ""Heros""
export const pluralNames = {
  Hero: 'Heroes' // the plural of Hero
};
```

You register the metadata and plurals with the `ngrx-data` module.

```javascript
@NgModule({
  imports: [
    NgrxDataModule.forRoot({
      entityMetadata: entityMetadata,
      pluralNames: pluralNames
    })
  ]
})
export class EntityStoreModule {}
```

Your component accesses each entity data through an `EntityCollectionService` which you can acquire from the _ngrx_data_ `EntityServices`.

In the following example,
the `HeroesComponent` injects `EntityServices` and asks it for an `EntityCollectionService`
registered under the `Hero` entity name.

The component uses that service to read and save _Hero_ entity data
in a reactive, immutable style, _without reference to any of the ngrx artifacts_.

```javascript
import { EntityCollectionService, EntityServices } from 'ngrx-data';
import { Hero } from '../../core';

@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class HeroesComponent implements OnInit {
  heroes$: Observable<Hero[]>;
  heroesService: EntityCollectionService<Hero>;

  constructor(entityServices: EntityServices) {
    this.heroesService = entityServices.getEntityCollectionService('Hero');
    this.heroes$ = this.heroesService.entities$;
  }

  ngOnInit() {
    this.getHeroes();
  }

  getHeroes() {
    this.heroesService.getAll();
  }

  addHero(hero: Hero) {
    this.heroesService.add(hero);
  }

  deleteHero(hero: Hero) {
    this.heroesService.delete(hero.id);
  }

  updateHero(hero: Hero) {
    this.heroesService.update(hero);
  }
}
```

As you explore _ngrx-data_ and its documentation,
you'll learn many extension points and customizations that
tailor the developer experience to your application needs.

## QuickStart

Try the [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md) to experience NgRx and ngrx-data in your app.

<a id=""explore""></a>

## Explore this repository

This repository contains the _ngrx-data_ source code and a
demonstration application (the ""demo app"") that exercises many of the library features.

The key folders in this repository are:

* docs --> the docs for the library and the demo
* lib ---> the ngrx-data library source code that we publish to npm
* src/app ---> the demo app source
* server ---> a node server for remote data access

<a id=""docs-list""></a>

### Learn more in the docs

* [Quick Start](https://github.com/johnpapa/ngrx-data-lab/blob/master/README.md)
* [Architecture](docs/architecture.md)
* [Entity Metadata](docs/entity-metadata.md)
* [Entity Collection](docs/entity-collection.md)
* [Entity Collection Service](docs/entity-collection-service.md)
* [Entity Services](docs/entity-services.md)
* [Entity DataService](docs/entity-dataservice.md)
* [Entity Actions](docs/entity-actions.md)
* [Entity Reducer](docs/entity-reducer.md)
* [Entity Change Tracker](docs/entity-change-tracker.md)
* [Saving multiple-entities at once](docs/save-entities.md)
* [Extension Points](docs/extension-points.md)
* [Limitations](docs/limitations.md)
* [FAQ: Frequently Asked Questions](docs/faq.md)

### Install and run

The demo app is based on the Angular CLI. You may want to install the CLI globally if you have not already done so.

```bash
npm install -g @angular/cli
```

Then follow these steps:

1.  Clone this repository

    ```bash
    git clone https://github.com/johnpapa/angular-ngrx-data.git
    cd angular-ngrx-data
    ```

2.  Install the npm packages

    ```bash
    npm install
    ```

3.  Build the `ngrx-data` library

    ```bash
    npm run build-setup
    ```

4.  Serve the CLI-based demo app

    ```bash
    ng serve -o
    ```

Refer to the [troubleshooting](#installation) section if you run into installation issues.

## Run the library tests

The _ngrx-data_ library ships with unit and E2E (end-to-end) tests to validate functionality and guard against regressions.

These tests also demonstrate features of the library that are not covered in the demo app. They're worth reading to discover more advanced techniques.

Run this CLI command to execute the **unit tests** for the library.

```bash
ng test
```

Run the sample app **E2E (end-to-end) tests**.

```bash
npm run e2e
```

We welcome [PRs](https://github.com/johnpapa/angular-ngrx-data/pulls) that add to the tests as well as those that fix bugs and documentation.

Be sure to run these tests before submitting a PR for review.

<a id=""redux-dev-tools""></a>

## Monitor the app with Redux DevTools

The demo app is [configured for monitoring](https://github.com/ngrx/platform/tree/master/docs/store-devtools) with the [Redux DevTools](https://github.com/zalmoxisus/redux-devtools-extension).

Follow these instructions to [install them in your browser](https://github.com/zalmoxisus/redux-devtools-extension) and learn how to use them.

## Debug the library in browser dev tools

When running _tests_, open the browser dev tools, go to the ""Sources"" tab, and look for the library files by name.

> In chrome, type [Command-P] and letters of the file name.

When _running the app_ (e.g., with `ng serve`), the browser dev tools give you TWO choices for a given TypeScript source file, both claiming to be from `.ts`.

The one you want for library and app files ends in `/lib/src/file-name.ts` and `/src/client/app/path/file-name.ts` respectively.

> Hope to solve the _two file_ problem.

## Build the app against the source

The demo app is setup to build and run against the ngPackagr artifacts in `dist/ngrx-data`,
the same artifacts delivered in the npm package.

> Re-build the library `npm run build-lib` or `npm run build-setup` or `npm run build-all`
> to update these artifacts.

This approach, while safe, can be inconvenient when you're evolving the library code because
""Go to definition"" takes you to the `d.ts` files in `dist/ngrx-data` rather than
the source files in `lib/src`.

If you want to ""Go to definition"" to take you to the source files,
make the following **\*temporary changes** to the TypeScript configuration.

1.  **_Replace_** the paths target in the root `tsconfig.json` so that the IDE (e.g., VS Code) looks for `ngrx-data` in `src/lib`.

    ```bash
      ""paths"": {
        ""ngrx-data"": [""lib/src""]
      },
    ```

2.  **_Replace_** _that same setting_ in the config at `src/tsconfig.json`.

3.  **_Replace_** _that same setting_ in `src/client/tsconfig.app.json`.
    Now `ng build` references `src/lib` when it builds the demo app.

> **Remember to _restore the `tsconfig` settings_ when you're done. Do not commit those changes!**

## Use a real database

The demo app queries and saves mock entity data to an in-memory database with the help of the
[Angular In-memory Web API](https://github.com/angular/in-memory-web-api).

The ""Remote Data"" toggle switch in the header switches
to the remote database.

The app fails when you switch to the remote database.

> Notice how the app detects errors and pops up a toast message with the failed _ngrx_ `Action.type`.
>
> The error details are in the browser's console log.

You must first set up a database and launch a web api server that talks to it.

The `src/server` folder has code for a local node web api server, configured for the demo app.

> TODO:
> Explain how to build and run the server.
> Explain how to build and serve the mongo db

## Bad/surplus _npm scripts_

We know there are a great many npm script commands in `package.json`, many (most?) of which don't work.

They're on our list for future cleanup.
Please don't create issues for them
(although PRs that fix them are welcome).

<!--

>TODO: Fix the broken server-oriented commands in package.json

### Create a MongoDb

1. Create a [CosmosDB instance](https://docs.microsoft.com/azure/cosmos-db/tutorial-develop-mongodb-nodejs-part4?WT.mc_id=angularngrxdata-github-jopapa)

### Build and launch the node server

1. Build the Angular app and launch the node server

```bash
???
```

1. Open the browser to <http://localhost:3001>

### Docker

* Install and run [Docker](https://www.docker.com/community-edition)

#### Environment file

Create an empty file named `.env` in the root of the app. We'll fill this in later.

#### Docker Compose with Debugging

Create the Docker image and run it locally. This commands uses `docker-compose` to build the image
and run the container.

This opens port `9229` for debugging.

```bash
npm run docker-debug
open http://localhost:3001
```

Open VS Code, launch the `Docker: Attach to Node` debugging profile

### Optional Database

```bash
NODE_ENV=development

PORT=3001
PUBLICWEB=./publicweb

COSMOSDB_ACCOUNT=your_cosmos_account
COSMOSDB_DB=your_cosmos_db
COSMOSDB_KEY=your_cosmos_key
COSMOSDB_PORT=10255
```

Out of the box you can run the demo with an in memory data service instead of a live database. If you wish to use a database, you can set up a local mongo server or a remote CosmosDB/MongoDB server in the cloud.

1. Configure Cosmos DB server settings

   Copy the contents from `.env.example` into `.env`. Replace the values with your specific configuration. Don't worry, this file is in the `.gitignore` so it won't get pushed to github.

   ```javascript
   NODE_ENV=development

   PORT=3001
   PUBLICWEB=./publicweb

   COSMOSDB_ACCOUNT=your_cosmos_account
   COSMOSDB_DB=your_cosmos_db
   COSMOSDB_KEY=your_cosmos_key
   COSMOSDB_PORT=10255
   ```
-->

## Troubleshooting

### Installation

1.  If you are on Windows and run into this error during `npm install`: _""snyk couldn't patch the specified vulnerabilities because gnu's patch is not available""_, refer to this [issue](https://github.com/linnovate/mean/issues/1711) for the fix. In short, your `Git` installation is not correct or `C:\Program Files\Git\usr\bin` (typically) is not added to your system environment variable `%PATH%`.

## Problems or Suggestions

[Open an issue here](https://github.com/johnpapa/angular-ngrx-data/issues)
"
2529,Apache Thrift,"Apache Thrift
=============

Introduction
============

Thrift is a lightweight, language-independent software stack for
point-to-point RPC implementation.
Thrift provides clean abstractions and implementations for data transport,
data serialization, and application level processing. The code generation
system takes a simple definition language as input and generates code
across programming languages that uses the abstracted stack to build
interoperable RPC clients and servers.

![Apache Thrift Layered Architecture](doc/images/thrift-layers.png)

Thrift makes it easy for programs written in different programming
languages to share data and call remote procedures.  With support
for [28 programming languages](LANGUAGES.md), chances are Thrift
supports the languages that you currently use.

Thrift is specifically designed to support non-atomic version changes
across client and server code.  This allows you to upgrade your
server while still being able to service older clients; or have newer
clients issue requests to older servers.  An excellent community-provided
write-up about thrift and compatibility when versioning an API can be
found in the [Thrift Missing Guide](https://diwakergupta.github.io/thrift-missing-guide/#_versioning_compatibility).

For more details on Thrift's design and implementation, see the Thrift
whitepaper included in this distribution, or at the README.md file
in your particular subdirectory of interest.

Status
======

| Branch | Travis | Appveyor | Coverity Scan | codecov.io | Website |
| :----- | :----- | :------- | :------------ | :--------- | :------ |
| [`master`](https://github.com/apache/thrift/tree/master) | [![Build Status](https://api.travis-ci.com/apache/thrift.svg?branch=master)](https://app.travis-ci.com/apache/thrift/branches) | [![Build status](https://ci.appveyor.com/api/projects/status/github/apache/thrift?branch=master&svg=true)](https://ci.appveyor.com/project/ApacheSoftwareFoundation/thrift/history) | [![Coverity Scan Build Status](https://scan.coverity.com/projects/1345/badge.svg)](https://scan.coverity.com/projects/thrift) | | [![Website](https://img.shields.io/badge/official-website-brightgreen.svg)](https://thrift.apache.org/) |
| [`0.17.0`](https://github.com/apache/thrift/tree/0.17.0) | [![Build Status](https://api.travis-ci.com/apache/thrift.svg?branch=0.17.0)](https://app.travis-ci.com/apache/thrift/branches) | | | | |

Releases
========

Thrift does not maintain a specific release calendar at this time.

We strive to release twice yearly.  Download the [current release](http://thrift.apache.org/download).

License
=======

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements. See the NOTICE file
distributed with this work for additional information
regarding copyright ownership. The ASF licenses this file
to you under the Apache License, Version 2.0 (the
""License""); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the
specific language governing permissions and limitations
under the License.

Project Hierarchy
=================

thrift/

  compiler/

    Contains the Thrift compiler, implemented in C++.

  lib/

    Contains the Thrift software library implementation, subdivided by
    language of implementation.

    cpp/
    go/
    java/
    php/
    py/
    rb/
    ...

  test/

    Contains sample Thrift files and test code across the target programming
    languages.

  tutorial/

    Contains a basic tutorial that will teach you how to develop software
    using Thrift.

Development
===========

To build the same way Travis CI builds the project you should use docker.
We have [comprehensive building instructions for docker](build/docker/README.md).

Requirements
============

See http://thrift.apache.org/docs/install for a list of build requirements (may be stale).  Alternatively, see the docker build environments for a list of prerequisites.

Resources
=========

More information about Thrift can be obtained on the Thrift webpage at:

     http://thrift.apache.org

Acknowledgments
===============

Thrift was inspired by pillar, a lightweight RPC tool written by Adam D'Angelo,
and also by Google's protocol buffers.

Installation
============

If you are building from the first time out of the source repository, you will
need to generate the configure scripts.  (This is not necessary if you
downloaded a tarball.)  From the top directory, do:

    ./bootstrap.sh

Once the configure scripts are generated, thrift can be configured.
From the top directory, do:

    ./configure

You may need to specify the location of the boost files explicitly.
If you installed boost in `/usr/local`, you would run configure as follows:

    ./configure --with-boost=/usr/local

Note that by default the thrift C++ library is typically built with debugging
symbols included. If you want to customize these options you should use the
CXXFLAGS option in configure, as such:

    ./configure CXXFLAGS='-g -O2'
    ./configure CFLAGS='-g -O2'
    ./configure CPPFLAGS='-DDEBUG_MY_FEATURE'

To enable gcov required options -fprofile-arcs -ftest-coverage enable them:

    ./configure  --enable-coverage

Run ./configure --help to see other configuration options

Please be aware that the Python library will ignore the --prefix option
and just install wherever Python's distutils puts it (usually along
the lines of `/usr/lib/pythonX.Y/site-packages/`).  If you need to control
where the Python modules are installed, set the PY_PREFIX variable.
(DESTDIR is respected for Python and C++.)

Make thrift:

    make

From the top directory, become superuser and do:

    make install

Uninstall thrift:

    make uninstall

Note that some language packages must be installed manually using build tools
better suited to those languages (at the time of this writing, this applies
to Java, Ruby, PHP).

Look for the README.md file in the lib/<language>/ folder for more details on the
installation of each language library package.

Package Managers
================

Apache Thrift is available via a number of package managers, a list which is
is steadily growing. A more detailed overview can be found
[at the Apache Thrift web site under ""Libraries""](http://thrift.apache.org/lib/)
and/or in the respective READMEs for each language under /lib

Testing
=======

There are a large number of client library tests that can all be run
from the top-level directory.

    make -k check

This will make all of the libraries (as necessary), and run through
the unit tests defined in each of the client libraries. If a single
language fails, the make check will continue on and provide a synopsis
at the end.

To run the cross-language test suite, please run:

    make cross

This will run a set of tests that use different language clients and
servers.


"
1390,A Laravel package for multilingual models,"# Introduction

[![Latest Version](http://img.shields.io/packagist/v/astrotomic/laravel-translatable.svg?label=Release&style=for-the-badge)](https://packagist.org/packages/astrotomic/laravel-translatable)
[![MIT License](https://img.shields.io/github/license/Astrotomic/laravel-translatable.svg?label=License&color=blue&style=for-the-badge)](https://github.com/Astrotomic/laravel-translatable/blob/master/LICENSE)
[![Offset Earth](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-green?style=for-the-badge)](https://plant.treeware.earth/Astrotomic/laravel-translatable)
[![Larabelles](https://img.shields.io/badge/Larabelles-%F0%9F%A6%84-lightpink?style=for-the-badge)](https://www.larabelles.com/)

[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Astrotomic/laravel-translatable/run-tests?style=flat-square&logoColor=white&logo=github&label=Tests)](https://github.com/Astrotomic/laravel-translatable/actions?query=workflow%3Arun-tests)
[![StyleCI](https://styleci.io/repos/192333549/shield)](https://styleci.io/repos/192333549)
[![Codecov Coverage](https://img.shields.io/codecov/c/github/Astrotomic/laravel-translatable?logo=codecov&logoColor=white&label=Codecov&style=flat-square)](https://codecov.io/gh/Astrotomic/laravel-translatable)
[![Total Downloads](https://img.shields.io/packagist/dt/astrotomic/laravel-translatable.svg?label=Downloads&style=flat-square)](https://packagist.org/packages/astrotomic/laravel-translatable)
[![GitBook](https://img.shields.io/badge/GitBook-Astrotomic-7e57c2.svg?style=flat-square)](https://docs.astrotomic.info/laravel-translatable)

<p align=""center"">
    <img src=""/art/socialcard.png"" alt=""laravel-translatable socialcard"">
</p>

**If you want to store translations of your models into the database, this package is for you.**

This is a Laravel package for translatable models. Its goal is to remove the complexity in retrieving and storing multilingual model instances. With this package you write less code, as the translations are being fetched/saved when you fetch/save your instance.

The full documentation can be found at [GitBook](https://docs.astrotomic.info/laravel-translatable).

## Installation

```bash
composer require astrotomic/laravel-translatable
```

## Quick Example

### **Getting translated attributes**

```php
$post = Post::first();
echo $post->translate('en')->title; // My first post

App::setLocale('en');
echo $post->title; // My first post

App::setLocale('de');
echo $post->title; // Mein erster Post
```

### **Saving translated attributes**

```php
$post = Post::first();
echo $post->translate('en')->title; // My first post

$post->translate('en')->title = 'My cool post';
$post->save();

$post = Post::first();
echo $post->translate('en')->title; // My cool post
```

### **Filling multiple translations**

```php
$data = [
  'author' => 'Gummibeer',
  'en' => ['title' => 'My first post'],
  'fr' => ['title' => 'Mon premier post'],
];
$post = Post::create($data);

echo $post->translate('fr')->title; // Mon premier post
```

## Tutorials

- [How To Add Multilingual Support to Eloquent](https://laravel-news.com/how-to-add-multilingual-support-to-eloquent)
- [How To Build An Efficient and SEO Friendly Multilingual Architecture For Your Laravel Application](https://mydnic.be/post/how-to-build-an-efficient-and-seo-friendly-multilingual-architecture-for-your-laravel-application)
- [How to Add Multi-Language Models to Laravel QuickAdminPanel](https://quickadminpanel.com/blog/how-to-add-multi-language-models-to-laravel-quickadminpanel/)

## Changelog

Please see [CHANGELOG](docs/changelog.md) for more information on what has changed recently.

## Contributing

Please see [CONTRIBUTING](https://github.com/Astrotomic/.github/blob/master/CONTRIBUTING.md) for details. You could also be interested in [CODE OF CONDUCT](https://github.com/Astrotomic/.github/blob/master/CODE_OF_CONDUCT.md).

### Security

If you discover any security related issues, please check [SECURITY](https://github.com/Astrotomic/.github/blob/master/SECURITY.md) for steps to report it.

## Credits

- [Tom Witkowski](https://github.com/Gummibeer) *current maintainer*
- [Dimitrios Savvopoulos](https://github.com/dimsav) *original author*
- [David Llop](https://github.com/Lloople) *refactoring testsuite*
- [Caneco](https://github.com/caneco) *artwork*
- [All Contributors](../../contributors)

## Versions

| Package             | Laravel                       | PHP       |
|:--------------------|:------------------------------|:----------|
| **v11.10 - v11.10** | `8.* / 9.*`                   | `^8.0`    |
| **v11.6 - v11.9**   | `5.8.* / 6.* / 7.* / 8.*`     | `>=7.2`   |
| **v11.4 - v11.5**   | `5.6.* / 5.7.* / 5.8.* / 6.*` | `>=7.1.3` |
| **v11.0 - v11.3**   | `5.6.* / 5.7.* / 5.8.*`       | `>=7.1.3` |

## Treeware

You're free to use this package, but if it makes it to your production environment I would highly appreciate you buying the world a tree.

It’s now common knowledge that one of the best tools to tackle the climate crisis and keep our temperatures from rising above 1.5C is to [plant trees](https://www.bbc.co.uk/news/science-environment-48870920). If you contribute to my forest you’ll be creating employment for local families and restoring wildlife habitats.

You can buy trees at [offset.earth/treeware](https://plant.treeware.earth/Astrotomic/laravel-translatable)

Read more about Treeware at [treeware.earth](https://treeware.earth)
"
2472,Firebase Javascript SDK,"# Firebase Javascript SDK

<!-- BADGES -->
![Build Status](https://img.shields.io/github/workflow/status/firebase/firebase-js-sdk/Run%20All%20Tests.svg)
[![Version](https://img.shields.io/npm/v/firebase.svg?label=version)](https://www.npmjs.com/package/firebase)
[![Coverage Status](https://coveralls.io/repos/github/firebase/firebase-js-sdk/badge.svg?branch=master)](https://coveralls.io/github/firebase/firebase-js-sdk?branch=master)
<!-- END BADGES -->

The Firebase JavaScript SDK implements the client-side libraries used by
applications using Firebase services. This SDK is distributed via:

- [CDN](https://firebase.google.com/docs/web/setup/#add-sdks-initialize)
- [npm package](https://www.npmjs.com/package/firebase)
- [Bower package](https://github.com/firebase/firebase-bower)

To get started using Firebase, see
[Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

[![Release Notes](https://img.shields.io/npm/v/firebase.svg?style=flat-square&label=Release%20Notes%20for&labelColor=039be5&color=666)](https://firebase.google.com/support/release-notes/js)

## Upgrade to Version 9
Version 9 has a redesigned API that supports tree-shaking. Read the [Upgrade Guide](https://firebase.google.com/docs/web/modular-upgrade) to learn more.
## Supported Environments
Please see [Environment Support](https://firebase.google.com/support/guides/environments_js-sdk).

## SDK Dev Workflow

### Prerequisites

#### Node.js

Before you can start working on the Firebase JS SDK, you need to have Node.js
installed on your machine. The currently supported versions are `10.15.0` or greater.

To download Node.js visit https://nodejs.org/en/download/.

_NOTE: You can use a tool like [`NVM`](https://github.com/creationix/nvm)
or [`N`](https://github.com/tj/n) to install and manage multiple node versions_

#### Yarn

In addition to Node.js we use `yarn` to facilitate multi package development.

To install `yarn` follow the instructions listed on their website:
https://yarnpkg.com/en/docs/install

#### Java

The closure compiler requires a modern Java installation. Java 8+ should be installed: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

#### Verify Prerequisites

You can verify your setup by running the following commands in your terminal:

```bash
$ node -v
$ yarn -v
$ java -version
```

Your Node.js version should be `10.15.0` or greater, your `yarn` version should
be `1.0.0` or greater, and your `java` version should be `1.8.0` or greater.

_NOTE: We will update the documentation as new versions are required, however
for continuing development on the SDK, staying up to date on the stable versions
of these packages is advised_

### Install Dependencies

Once you have Node.js and `yarn` installed on your machine and have validated
that you are running the proper version, you can set up the development environment
by running the following at the root of the SDK:

```bash
$ yarn
```

Once you have installed all the dependencies, you can build the entire SDK by
running the following command the root of the SDK:

```bash
$ yarn build
```

## Testing the SDK

### Test Setup

A production project is required to test the Firebase JS SDK. You can create a
new project by visiting the [Firebase Console](https://console.firebase.google.com/).

#### Web App Setup

Visit the ""Project Overview"" and select ""Add app"" under your project name. Register the app with a
nickname and click through the remaining steps. Without performing this step, you will encounter
the error in the test setup:

```
FirebaseError: There are no WEB apps associated with this Firebase project
```

#### Firestore Database Setup

Visit the ""Firestore Database"" section of the console and create a Cloud Firestore
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Realtime Database Setup

Visit the ""Realtime Database"" section of the console and create a realtime
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Authentication Support

Visit the authentication config in your project and enable the `Anonymous`
sign-in provider to complete your project config.

#### Automated Setup

The tests need to be configured to use the Firebase production project that you
created in the ""Test Setup"" section above. To do this, run the `yarn test:setup`
command, as follows:


```bash
# Select the Firebase project via the text-based UI.
$ yarn test:setup

# Specify the Firebase project via the command-line arguments.
$ yarn test:setup --projectId=<test_firebase_project_id>
```

If you see an error like
```
HTTP Error: 404, Project '<test_firebase_project_id>' does not exist.
```
then make sure that you have created the database as specified in the ""Firestore
Database Setup"" section above.

### Running the tests

Each of the directories in the `integration` directory as well as the `packages`
directory have their own test suites. You will need to build the SDK before
running tests. Test suites can be run all together by running the following 
command at the root of the package:

```bash
$ yarn test
```

In addition, you can run any of the tests individually by running `yarn test` in
an individual package directory.

## Building the SDK

### Introduction

The Firebase JS SDK is built with a series of individual packages that are all
contained in this repository. Development is coordinated via [yarn
workspaces](https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/) and
[Lerna](https://lerna.js.org/) (a monorepo management tool).

Each package in the `packages` directory, constitute a piece of our
implementation. The SDK is built via a combination of all of these packages
which are published under the [`firebase`
scope](https://www.npmjs.com/search?q=scope%3Afirebase) on NPM.

### Testing the SDK Locally

Please be sure to build your repo before proceeding any further.
In order to manually test your SDK changes locally, you must use [yarn link](https://classic.yarnpkg.com/en/docs/cli/link):

```shell
$ cd packages/firebase
$ yarn link # initialize the linking to the other folder
$ cd ../<my-test-app-dir> # cd into your personal project directory
$ yarn link firebase # tell yarn to use the locally built firebase SDK instead
```

This will create a symlink and point your `<my-test-app-dir>` to the locally built version of the firebase SDK.

### Helper Scripts

Each package in the `packages` directory exposes a `dev` script. This script
will set up a watcher for development on the individual piece of the SDK. In
addition, there is a top level `dev` script that can be run to start all of the
watch tasks as well as a sandbox server.

You can run the dev script by running the following at the root of the package:

```bash
$ yarn dev
```

### Prepush Hooks

As part of this repo, we use the NPM package [`husky`](https://npm.im/husky) to
implement git hooks. We leverage the prepush hook to do two things:

- Automated code styling (using [`prettier`](https://npm.im/prettier))
- Automated LICENSE header insertion

## Contributing

See [Contributing](./CONTRIBUTING.md) for more information on contributing to the Firebase
JavaScript SDK.

### Big Thanks

Cross-browser Testing Platform and Open Source <3 Provided by [Sauce Labs][homepage]

[homepage]: https://saucelabs.com
"
3256,PostgreSQL cloud native High Availability and more.,"# stolon - PostgreSQL cloud native High Availability

[![Build Status](https://run.agola.io/api/v1alpha/badges/org%2Fstolon%2Fstolon?branch=master)](https://run.agola.io/org/stolon/projects/stolon.proj)
[![Discourse](https://img.shields.io/discourse/https/talk.stolon.io/status.svg)](https://talk.stolon.io)
[![Go Report Card](https://goreportcard.com/badge/github.com/sorintlab/stolon)](https://goreportcard.com/report/github.com/sorintlab/stolon)
[![Downloads](https://img.shields.io/github/downloads/sorintlab/stolon/latest/total.svg)](https://github.com/sorintlab/stolon/releases)
[![Latest release](https://img.shields.io/github/release/sorintlab/stolon.svg)](https://github.com/sorintlab/stolon/releases)

![Stolon Logo](logos/stolon-color.png)

stolon is a cloud native PostgreSQL manager for PostgreSQL high availability. It's cloud native because it'll let you keep an high available PostgreSQL inside your containers (kubernetes integration) but also on every other kind of infrastructure (cloud IaaS, old style infrastructures etc...)

For an introduction to stolon you can also take a look at [this post](https://sgotti.dev/post/stolon-introduction/)

## Features

* Leverages PostgreSQL streaming replication.
* Resilient to any kind of partitioning. While trying to keep the maximum availability, it prefers consistency over availability.
* [kubernetes integration](examples/kubernetes/README.md) letting you achieve postgreSQL high availability.
* Uses a cluster store like [etcd](https://etcd.io), [consul](https://www.consul.io) or kubernetes API server as an high available data store and for leader election
* Asynchronous (default) and [synchronous](doc/syncrepl.md) replication.
* Full cluster setup in minutes.
* Easy [cluster administration](doc/stolonctl.md)
* Can do point in time recovery integrating with your preferred backup/restore tool.
* [Standby cluster](doc/standbycluster.md) (for multi site replication and near zero downtime migration).
* Automatic service discovery and dynamic reconfiguration (handles postgres and stolon processes changing their addresses).
* Can use [pg_rewind](doc/pg_rewind.md) for fast instance resynchronization with current master.

## Architecture

Stolon is composed of 3 main components

* keeper: it manages a PostgreSQL instance converging to the clusterview computed by the leader sentinel.
* sentinel: it discovers and monitors keepers and proxies and computes the optimal clusterview.
* proxy: the client's access point. It enforce connections to the right PostgreSQL master and forcibly closes connections to old masters.

For more details and requirements see [Stolon Architecture and Requirements](doc/architecture.md)

![Stolon architecture](doc/architecture_small.png)

## Documentation

[Documentation Index](doc/README.md)

## Installation

Stolon is available in [brew](https://brew.sh/). It is **unofficial and not supported** by the project.
So check the version before installing using `brew`.

[Step to install using brew](doc/unofficial_packages.md)

## Quick start and examples

* [Simple cluster example](doc/simplecluster.md)
* [Kubernetes example](examples/kubernetes/README.md)
* [Two (or more) nodes setup](doc/twonodes.md)

## Project Status

Stolon is under active development and used in different environments. Probably its on disk format (store hierarchy and key contents) will change in future to support new features. If a breaking change is needed it'll be documented in the release notes and an upgrade path will be provided.

Anyway it's quite easy to reset a cluster from scratch keeping the current master instance working and without losing any data.

## Requirements

* PostgreSQL 15, 14, 13, 12, 11, 10, 9.6
* etcd2 >= v2.0, etcd3 >= v3.0, consul >= v0.6 or kubernetes >= 1.8 (based on the store you're going to use)

* OS: currently stolon is tested on GNU/Linux (with reports of people using it also on Solaris, *BSD and Darwin)

## build

To build stolon we usually test and support the latest two major versions of Go like in the [Go release policy](https://golang.org/doc/devel/release.html#policy).

```
make
```

## High availability

Stolon tries to be resilient to any partitioning problem. The cluster view is computed by the leader sentinel and is useful to avoid data loss (one example over all avoid that old dead masters coming back are elected as the new master).

There can be tons of different partitioning cases. The primary ones are covered (and in future more will be added) by various [integration tests](tests/integration)

## FAQ

See [here](doc/faq.md) for a list of faq. If you have additional questions please ask.

## Contributing to stolon

stolon is an open source project under the Apache 2.0 license, and contributions are gladly welcomed!
To submit your changes please open a pull request.

## Contacts

* For general discussion about using and developing stolon, join the [stolon forum](https://talk.stolon.io)
* For bugs and feature requests file an [issue](https://github.com/sorintlab/stolon/issues/new/choose)
"
3435,"The codes of paper ""Long Text Generation via Adversarial Training with Leaked Information""  on AAAI 2018.  Text generation using GAN and Hierarchical Reinforcement Learning.","﻿# LeakGAN
The code of research paper [Long Text Generation via Adversarial Training with Leaked Information](https://arxiv.org/abs/1709.08624). 

This paper has been accepted at the Thirty-Second AAAI Conference on Artificial Intelligence ([AAAI-18](https://aaai.org/Conferences/AAAI-18/)).
## Requirements
* **Tensorflow r1.2.1**
* Python 2.7
* CUDA 7.5+ (For GPU)

## Introduction
Automatically generating coherent and semantically meaningful text has many applications in machine translation, dialogue systems, image captioning, etc. Recently, by combining with policy gradient, Generative Adversarial Nets (GAN) that use a discriminative model to guide the training of the generative model as a reinforcement learning policy has shown promising results in text generation. However, the scalar guiding signal is only available after the entire text has been generated and lacks intermediate information about text structure during the generative process. As such, it limits its success when the length of the generated text samples is long (more than 20 words). In this project, we propose a new framework, called LeakGAN, to address the problem for long text generation. We allow the discriminative net to leak its own high-level extracted features to the generative net to further help the guidance. The generator incorporates such informative signals into all generation steps through an additional Manager module, which takes the extracted features of current generated words and outputs a latent vector to guide the Worker module for next-word generation. Our extensive experiments on synthetic data and various real-world tasks with Turing test demonstrate that LeakGAN is highly effective in long text generation and also improves the performance in short text generation scenarios. More importantly, without any supervision, LeakGAN would be able to implicitly learn sentence structures only through the interaction between Manager and Worker.

![](https://github.com/CR-Gjx/LeakGAN/blob/master/figures/leakgan.png)

As the illustration of LeakGAN. We specifically introduce a hierarchical generator G, which consists of a high-level MANAGER module and a low-level WORKER module. The MANAGER is a long short term memory network (LSTM) and serves as a mediator. In each step, it receives generator D’s high-level feature representation, e.g., the feature map of the CNN, and uses it to form the guiding goal for the WORKER module in that timestep. As the information from D is internally-maintained and in an adversarial game it is not supposed to provide G with such information. We thus call it a leakage of information from D.

Next, given the goal embedding produced by the MANAGER, the WORKER firstly encodes current generated words with another LSTM, then combines the output of the LSTM and the goal embedding to take a final action at current state. As such, the guiding signals from D are not only available to G at the end in terms of the scalar reward signals, but also available in terms of a goal embedding vector during the generation process to guide G how to get improved.

## Reference
```bash
@article{guo2017long,
  title={Long Text Generation via Adversarial Training with Leaked Information},
  author={Guo, Jiaxian and Lu, Sidi and Cai, Han and Zhang, Weinan and Yu, Yong and Wang, Jun},
  journal={arXiv preprint arXiv:1709.08624},
  year={2017}
}
```


You can get the code and run the experiments in follow folders.
## Folder

Synthetic Data: synthetic data experiment

Image COCO: a real text example for our model using dataset Image COCO (http://cocodataset.org/#download)

Note: this code is based on the [previous work by LantaoYu](https://github.com/LantaoYu/SeqGAN). Many thanks to [LantaoYu](https://github.com/LantaoYu).
"
3262,"Baserow is an open source no-code database tool and Airtable alternative. This is a mirrored repository, the official one is hosted on https://gitlab.com/bramw/baserow.","## Baserow is an open source no-code database tool and Airtable alternative.

Create your own online database without technical experience. Our user-friendly no-code
tool gives you the powers of a developer without leaving your browser.

* A spreadsheet database hybrid combining ease of use and powerful data organization.
* Easily self-hosted with no storage restrictions or sign-up on https://baserow.io to
  get started immediately.
* Alternative to Airtable.
* Open-core with all non-premium and non-enterprise features under
  the [MIT License](https://choosealicense.com/licenses/mit/) allowing commercial and
  private use.
* Headless and API first.
* Uses popular frameworks and tools like [Django](https://www.djangoproject.com/),
  [Vue.js](https://vuejs.org/) and [PostgreSQL](https://www.postgresql.org/).

[![Deploy to Heroku](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/bram2w/baserow/tree/master)

```bash
docker run -v baserow_data:/baserow/data -p 80:80 -p 443:443 baserow/baserow:1.14.0
```

![Baserow screenshot](docs/assets/screenshot.png ""Baserow screenshot"")

## Get Involved

**We're hiring remotely**! More information at https://baserow.io/jobs.

Join our forum on https://community.baserow.io/ or on Gitter via
https://gitter.im/bramw-baserow/community. See [CONTRIBUTING.md](./CONTRIBUTING.md) on
how to become a contributor.

## Installation

* [**Docker**](docs/installation/install-with-docker.md)
* [**Ubuntu**](docs/installation/install-on-ubuntu.md)
* [**Docker Compose** ](docs/installation/install-with-docker-compose.md)
* [**
  Heroku**: Easily install and scale up Baserow on Heroku.](docs/installation/install-on-heroku.md)
* [**
  Render**: Easily install and scale up Baserow on Render.](docs/installation/install-on-render.md)
* [**
  Cloudron**: Install and update Baserow on your own Cloudron server.](docs/installation/install-on-cloudron.md)

## Official documentation

The official documentation can be found on the website at https://baserow.io/docs/index
or [here](./docs/index.md) inside the repository. The API docs can be found here at
https://api.baserow.io/api/redoc/ or if you are looking for the OpenAPI schema here
https://api.baserow.io/api/schema.json.

## Become a sponsor

If you would like to get new features faster, then you might want to consider becoming a
sponsor. By becoming a sponsor we can spend more time on Baserow which means faster
development.

[Become a GitHub Sponsor](https://github.com/sponsors/bram2w)

## Development environment

If you want to contribute to Baserow you can setup a development environment like so:

```
$ git clone https://gitlab.com/bramw/baserow.git
$ cd baserow
$ ./dev.sh --build
```

The Baserow development environment is now running.
Visit [http://localhost:3000](http://localhost:3000) in your browser to see a working
version in development mode with hot code reloading and other dev features enabled.

More detailed instructions and more information about the development environment can be
found
at [https://baserow.io/docs/development/development-environment](./docs/development/development-environment.md)
.

## Plugin development

Because of the modular architecture of Baserow it is possible to create plugins. Make
your own fields, views, applications, pages or endpoints. We also have a plugin
boilerplate to get you started right away. More information can be found in the
[plugin introduction](./docs/plugins/introduction.md) and in the
[plugin boilerplate docs](./docs/plugins/boilerplate.md).

## Meta

Created by Baserow B.V. - bram@baserow.io.

Distributes under the MIT license. See `LICENSE` for more information.

Version: 1.14.0

The official repository can be found at https://gitlab.com/bramw/baserow.

The changelog can be found [here](./changelog.md).

Become a GitHub Sponsor [here](https://github.com/sponsors/bram2w).

Community chat via https://gitter.im/bramw-baserow/community.
"
3254,Database migration tool for .NET and .NET Core projects. Inspired by Flyway.,"# Evolve [![AppVeyor build status](https://img.shields.io/appveyor/build/lecaillon/evolve/master?label=AppVeyor)](https://ci.appveyor.com/project/lecaillon/evolve) [![Azure build Status](https://img.shields.io/azure-devops/build/lecaillon/Evolve-CI/2/master?label=Azure)](https://lecaillon.visualstudio.com/Evolve-CI/_build/latest?definitionId=2&branchName=master) [![Code coverage](https://img.shields.io/azure-devops/coverage/lecaillon/evolve-ci/2/master.svg?color=brightgreen)](https://lecaillon.visualstudio.com/Evolve-CI/_build/latest?definitionId=2&branchName=master) [![NuGet](https://img.shields.io/nuget/dt/evolve)](https://www.nuget.org/packages/Evolve) [![Twitter](https://img.shields.io/twitter/follow/evolve_db?label=Evolve&style=social)](https://twitter.com/intent/follow?screen_name=evolve_db)
<img align=""right"" width=""173px"" height=""173px"" src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/logo.png"">

Evolve is a personal, free-time project with no funding. If you use Evolve in your daily work and feel that it makes your life easier, consider supporting its development via [GitHub Sponsors](https://github.com/sponsors/lecaillon) :heart: and by adding a star to this repository :star:

I’m very passionate about doing personal projects and very grateful that other people find them useful, too. I want to share as much as possible, but it doesn’t pay the bills. With your help, I can focus on open-source work more and make it sustainable. If your company uses any of my libraries, consider donating too as a sign of gratitude and for priority support!

## Beloved sponsors
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        <a href=""https://www.veepee.com"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve.Doc/master/static/images/Veepee.png"" style=""margin: 0rem auto"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://megaslice.uk"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve.Doc/master/static/images/Megaslice.png"" style=""margin: 0rem auto"">
        </a>
      </td>
    </tr>
  </tbody>
</table>

## Introduction
Evolve is a cross platform database migration tool inspired by [Flyway](https://flywaydb.org/), that uses plain SQL scripts.

Its purpose is to automate your database changes, and help keep those changes synchronized through all your environments and development teams. This makes it an ideal tool for continuous integration / delivery.

Overall Evolve embraces simplicity. Every time you run your project, it will automatically ensure that your database is up-to-date. Install it and forget it!

## Installation
Evolve is available as a .NET library, a .NET tool and a standalone CLI.

|  | Evolve | Evolve Tool | Evolve CLI |
|-|-|-|-|
| Repository | [![NuGet Evolve](https://img.shields.io/nuget/dt/evolve)](https://www.nuget.org/packages/Evolve) | [![NuGet Evolve.Tool](https://img.shields.io/nuget/dt/Evolve.Tool)](https://www.nuget.org/packages/Evolve.Tool) | [![GitHub CLI](https://img.shields.io/badge/GitHub-releases-brightgreen.svg?logo=github)](https://github.com/lecaillon/Evolve/releases/latest) |

## Supported databases
<table>
  <tbody>
    <tr>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/sqlserver"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/sqlserver.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/postgresql"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/postgresql.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/mysql"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/mysql.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/mariadb"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/mariadb.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/sqlite"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/sqlite.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/cassandra"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/cassandra.png"">
        </a>
      </td>
      <td align=""center"" valign=""middle"">
        <a href=""https://evolve-db.netlify.com/requirements/cockroachdb"" target=""_blank"">
          <img src=""https://raw.githubusercontent.com/lecaillon/Evolve/master/images/cockroachdb.png"">
        </a>
      </td>
    </tr>
  </tbody>
</table>

## Documentation
You can read the latest documentation at [https://evolve-db.netlify.com](https://evolve-db.netlify.com) and find samples [here](https://github.com/lecaillon/Evolve/tree/master/samples).

## Changelog
Detailed changes for each release are documented in the [release notes](https://github.com/lecaillon/Evolve/releases).
"
123,"Microservices using Spring Boot, Spring Cloud, Docker and Kubernetes","# Spring MicroServices

[![Image](https://www.springboottutorial.com/images/Course-Master-Microservices-with-Spring-Boot-and-Spring-Cloud.png ""Master Microservices with Spring Boot and Spring Cloud"")](https://www.udemy.com/course/microservices-with-spring-boot-and-spring-cloud/)

Learn how to create awesome Microservices and RESTful web services with Spring and Spring Boot.

## Overview
* [Installing Tools](#installing-tools)
* [Running Examples](#running-examples)
* [Course Overview](#course-overview)
  - [Course Steps](#step-list)
  - [Expectations](#expectations)
* [About in28Minutes](#about-in28minutes)
  - [Our Beliefs](#our-beliefs)
  - [Our Approach](#our-approach)
  - [Find Us](#useful-links)
  - [Other Courses](#other-courses)

### Introduction

Developing RESTful web services is fun. The combination of Spring Boot, Spring Web MVC, Spring Web Services and JPA makes it even more fun. And its even more fun to create Microservices.

There are two parts to this course - RESTful web services and Microservices

Architectures are moving towards microservices. 

RESTful web services are the first step to developing great microservices. Spring Boot, in combination with Spring Web MVC (also called Spring REST) makes it easy to develop RESTful web services. 

In the first part of the course, you will learn the basics of RESTful web services developing resources for a social media application. You will learn to implement these resources with multiple features - versioning, exception handling, documentation (Swagger), basic authentication (Spring Security), filtering and HATEOAS. You will learn the best practices in designing RESTful web services.

In this part of the course, you will be using Spring (Dependency Management), Spring MVC (or Spring REST), Spring Boot, Spring Security (Authentication and Authorization), Spring Boot Actuator (Monitoring), Swagger (Documentation), Maven (dependencies management), Eclipse (IDE), Postman (REST Services Client) and Tomcat Embedded Web Server. We will help you set up each one of these.

In the second part of the course, you will learn the basics of Microservices. You will understand how to implement microservices using Spring Cloud.

In this part of the course, you will learn to establish communication between microservices, enable load balancing, scaling up and down of microservices. You will also learn to centralize configuration of microservices with Spring Cloud Config Server. You will implement Eureka Naming Server and Distributed tracing with Spring Cloud Sleuth and Zipkin. You will create fault toleranct microservices with Zipkin


### You will learn
- You will be able to develop and design RESTful web services
- You will setup Centralized Microservice Configuration with Spring Cloud Config Server
- You will understand how to implement Exception Handling, Validation, HATEOAS and filtering for RESTful Web Services.
- You will implement client side load balancing (Ribbon), Dynamic scaling(Eureka Naming Server) and an API Gateway (Zuul)
- You will learn to implement Distributed tracing for microservices with Spring Cloud Sleuth and Zipkin
- You will implement Fault Tolerance for microservices with Zipkin
- You will understand how to version your RESTful Web Services
- You will understand how to monitor RESTful Services with Spring Boot Actuator
- You will understand how to document RESTful Web Services with Swagger
- You will understand the best practices in designing RESTful web services
- Using Spring Cloud Bus to exchange messages about Configuration updates
- Simplify communication with other Microservices using Feign REST Client


### Step Wise Details
Refer each steps

### Expectations
- You should know Java and Spring. 
- A basic understanding of developing web applications is a bonus but NOT mandatory. 
- A basic understanding of Spring Boot is a bonus but NOT mandatory. We have seperate section to introduce Spring Boot.
- A basic understanding of JPA is a bonus but NOT mandatory. We have seperate section to introduce JPA.
- You are NOT expected to have any experience with Eclipse, Maven or Tomcat.
- We will help you install Eclipse and get up and running with Maven and Tomcat.

## Installing Tools
- Eclipse & Embedded Maven
- PostMan
- Git Client - https://git-scm.com/
- Rabbit MQ - https://www.rabbitmq.com/download.html


### Installing Eclipse & Embedded Maven
- Installation Video : https://www.youtube.com/playlist?list=PLBBog2r6uMCSmMVTW_QmDLyASBvovyAO3
- GIT Repository For Installation : https://github.com/in28minutes/getting-started-in-5-steps
- PDF : https://github.com/in28minutes/SpringIn28Minutes/blob/master/InstallationGuide-JavaEclipseAndMaven_v2.pdf

### Installing Rabbit MQ

#### Windows
- https://www.rabbitmq.com/install-windows.html
- https://www.rabbitmq.com/which-erlang.html
- http://www.erlang.org/downloads
- Video - https://www.youtube.com/watch?v=gKzKUmtOwR4

#### Mac
- https://www.rabbitmq.com/install-homebrew.html

## Running Examples
- Download the zip or clone the Git repository.
- Unzip the zip file (if you downloaded one)
- Open Command Prompt and Change directory (cd) to folder containing pom.xml
- Open Eclipse 
   - File -> Import -> Existing Maven Project -> Navigate to the folder where you unzipped the zip
   - Select the right project
- Choose the Spring Boot Application file (search for @SpringBootApplication)
- Right Click on the file and Run as Java Application
- You are all Set
- For help : use our installation guide - https://www.youtube.com/playlist?list=PLBBog2r6uMCSmMVTW_QmDLyASBvovyAO3

### Diagrams

- Check notes.md

### Troubleshooting
- Refer our TroubleShooting Guide - https://github.com/in28minutes/in28minutes-initiatives/tree/master/The-in28Minutes-TroubleshootingGuide-And-FAQ

## Youtube Playlists - 500+ Videos

[Click here - 30+ Playlists with 500+ Videos on Spring, Spring Boot, REST, Microservices and the Cloud](https://www.youtube.com/user/rithustutorials/playlists?view=1&sort=lad&flow=list)

## Keep Learning in28Minutes

in28Minutes is creating amazing solutions for you to learn Spring Boot, Full Stack and the Cloud - Docker, Kubernetes, AWS, React, Angular etc. - [Check out all our courses here](https://github.com/in28minutes/learn)

![in28MinutesLearningRoadmap-July2019.png](https://github.com/in28minutes/in28Minutes-Course-Roadmap/raw/master/in28MinutesLearningRoadmap-July2019.png)
"
2776,QRec: A Python Framework for quick implementation of recommender systems (TensorFlow Based),"<img src=""https://raw.githubusercontent.com/Coder-Yu/QRec/master/logo.png"" alt=""logo"" width=""400"" border=""0""><br>
<p float=""left""><img src=""https://img.shields.io/badge/python-v3.7-red""> <img src=""https://img.shields.io/badge/tensorflow-v1.14-blue""> <img alt=""GitHub last commit"" src=""https://img.shields.io/github/last-commit/Coder-Yu/QRec""></p>
<h2>Introduction</h2>

**QRec** is a Python framework for recommender systems (Supported by Python 3.7.4 and Tensorflow 1.14+) in which a number of influential and newly state-of-the-art recommendation models are implemented. QRec has a lightweight architecture and provides user-friendly interfaces. It can facilitate model implementation and evaluation.
<br>
**Founder and principal contributor**: [@Coder-Yu ](https://github.com/Coder-Yu)<br>
**Other contributors**: [@DouTong](https://github.com/DouTong) [@Niki666](https://github.com/Niki666) [@HuXiLiFeng](https://github.com/HuXiLiFeng) [@BigPowerZ](https://github.com/BigPowerZ) [@flyxu](https://github.com/flyxu)<br>
**Supported by**: [@AIhongzhi](https://github.com/AIhongzhi) (<a href=""https://sites.google.com/view/hongzhi-yin/home"">A/Prof. Hongzhi Yin</a>, UQ), [@mingaoo](https://github.com/mingaoo) (<a href=""http://www.cse.cqu.edu.cn/info/2096/3497.htm"">A/Prof. Min Gao</a>, CQU) <br> 
<br>
**We also provide Pytorch implementations of some models in another library. Please click [here](https://github.com/Coder-Yu/SELFRec)**

<h2>What's New</h2>
<p>
31/03/2022 - SimGCL proposed in our SIGIR'22 paper has been added. <br>
12/10/2021 - BUIR proposed in SIGIR'21 paper has been added. <br>
30/07/2021 - We have transplanted QRec from py2 to py3. <br>
07/06/2021 - SEPT proposed in our KDD'21 paper has been added. <br>
16/05/2021 - SGL proposed in SIGIR'21 paper has been added. <br>
16/01/2021 - MHCN proposed in our WWW'21 paper has been added.<br>
22/09/2020 - DiffNet proposed in SIGIR'19 has been added. <br>
19/09/2020 - DHCF proposed in KDD'20 has been added. <br>
29/07/2020 - ESRF proposed in my TKDE paper has been added. <br>
23/07/2020 - LightGCN proposed in SIGIR'20 has been added. <br>
17/09/2019 - NGCF proposed in SIGIR'19 has been added. <br>
13/08/2019 - RSGAN proposed in ICDM'19 has been added.<br>
09/08/2019 - Our paper is accepted as full research paper by ICDM'19. <br>
20/02/2019 - IRGAN proposed in SIGIR'17 has been added. <br>
12/02/2019 - CFGAN proposed in CIKM'18 has been added.<br>
</p>

<h2>Architecture</h2>

![QRec Architecture](https://i.ibb.co/zJwLXnb/architecture.png)

<h2>Workflow</h2>

![QRec Architecture](https://i.ibb.co/7W9xTfd/workflow.png)

<h2>Features</h2>
<ul>
<li><b>Cross-platform</b>: QRec can be easily deployed and executed in any platforms, including MS Windows, Linux and Mac OS.</li>
<li><b>Fast execution</b>: QRec is based on Numpy, Tensorflow and some lightweight structures, which make it run fast.</li>
<li><b>Easy configuration</b>: QRec configs recommenders with a configuration file and provides multiple evaluation protocols.</li>
<li><b>Easy expansion</b>: QRec provides a set of well-designed recommendation interfaces by which new algorithms can be easily implemented.</li>
</ul>
<h2>Requirements</h2>
<ul>
<li>gensim==4.1.2</li>
<li>joblib==1.1.0</li>
<li>mkl==2022.0.0</li>
<li>mkl_service==2.4.0</li>
<li>networkx==2.6.2</li>
<li>numba==0.53.1</li>
<li>numpy==1.20.3</li>
<li>scipy==1.6.2</li>
<li>tensorflow==1.14.0</li>
</ul>
<h2>Usage</h2>
<p>There are two ways to run the recommendation models in QRec:</p>
<ul>
<li>1.Configure the xx.conf file in the directory named config. (xx is the name of the model you want to run)</li>
<li>2.Run main.py.</li>
</ul>
<p>Or</p>
<ul>
<li>Follow the codes in snippet.py.</li>
</ul>
        
For more details, we refer you to the [handbook of QRec](https://www.showdoc.com.cn/QRecHelp/7342003725025529).           


<h2>Configuration</h2>
<h3>Essential Options</h3>
<div>
 <table class=""table table-hover table-bordered"">
  <tr>
    <th width=""12%"" scope=""col""> Entry</th>
    <th width=""23%"" class=""conf"" scope=""col"">Example</th>
    <th width=""65%"" class=""conf"" scope=""col"">Description</th>
  </tr>
  <tr>
    <td>ratings</td>
    <td>D:/MovieLens/100K.txt</td>
    <td>Set the file path of the dataset. Format: each row separated by empty, tab or comma symbol. </td>
  </tr>
 <tr>
    <td>social</td>
    <td>D:/MovieLens/trusts.txt</td>
    <td>Set the file path of the social dataset. Format: each row separated by empty, tab or comma symbol. </td>
  </tr>
  <tr>
    <td scope=""row"">ratings.setup</td>
    <td>-columns 0 1 2</td>
    <td>-columns: (user, item, rating) columns of rating data are used.<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">social.setup</td>
    <td>-columns 0 1 2</td>
    <td>-columns: (trustor, trustee, weight) columns of social data are used.<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">mode.name</td>
    <td>UserKNN</td>
    <td>name of the recommendation model. <br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">evaluation.setup</td>
    <td>-testSet ./dataset/test.txt </td>
    <td>Main option: -testSet, -ap, -cv (choose one of them) <br>
      -testSet path/to/test/file (need to specify the test set manually)<br>
      -ap ratio (ap means that the ratings are automatically partitioned into training set and test set, the number is the ratio of the test set. e.g. -ap 0.2)<br>
      -cv k (-cv means cross validation, k is the number of the fold. e.g. -cv 5)<br>
      -predict path/to/user list/file (predict for a given list of users without evaluation; need to mannually specify the user list file (each line presents a user)) <br>
      Secondary option:-b, -p, -cold, -tf, -val (multiple choices) <br>
      <b>-val ratio </b> (model test would be conducted on the validation set which is generated by randomly sampling the training dataset with the given ratio.)<br> 
      -b thres （binarizing the rating values. Ratings equal or greater than thres will be changed into 1, and ratings lower than thres will be left out. e.g. -b 3.0）<br>
      -p (if this option is added, the cross validation wll be executed parallelly, otherwise executed one by one) <br>
      <b>-tf </b> (model training will be conducted on TensorFlow (only applicable and needed for shallow models)) <br>
      -cold thres (evaluation on cold-start users; users in the training set with rated items more than thres will be removed from the test set)
     </td>
  </tr>
  <tr>
    <td scope=""row"">item.ranking</td>
    <td>off -topN -1 </td>
    <td>Main option: whether to do item ranking<br>
      -topN N1,N2,N3...: the length of the recommendation list. *QRec can generate multiple evaluation results for different N at the same time<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">output.setup</td>
    <td>on -dir ./Results/</td>
    <td>Main option: whether to output recommendation results<br>
      -dir path: the directory path of output results.
       </td>
  </tr>  
  </table>
</div>

<h3>Memory-based Options</h3>
<div>
<table class=""table table-hover table-bordered"">
  <tr>
    <td scope=""row"">similarity</td>
    <td>pcc/cos</td>
    <td>Set the similarity method to use. Options: PCC, COS;</td>
  </tr>
  <tr>
    <td scope=""row"">num.neighbors</td>
    <td>30</td>
    <td>Set the number of neighbors used for KNN-based algorithms such as UserKNN, ItemKNN. </td>
  </tr>
  </table>
</div>

<h3>Model-based Options</h3>
<div>
 <table class=""table table-hover table-bordered"">
  <tr>
    <td scope=""row"">num.factors</td>
    <td>5/10/20/number</td>
    <td>Set the number of latent factors</td>
  </tr>
  <tr>
    <td scope=""row"">num.max.epoch</td>
    <td>100/200/number</td>
    <td>Set the maximum number of epoch for iterative recommendation algorithms. </td>
  </tr>
  <tr>
    <td scope=""row"">learnRate</td>
    <td>-init 0.01 -max 1</td>
    <td>-init initial learning rate for iterative recommendation algorithms; <br>
      -max: maximum learning rate (default 1);<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">reg.lambda</td>
    <td>-u 0.05 -i 0.05 -b 0.1 -s 0.1</td>
    <td>
      -u: user regularizaiton; -i: item regularization; -b: bias regularizaiton; -s: social regularization</td>
  </tr> 
  </table>
</div>

<h2>Implement Your Model</h2>
<ul>
<li>1.Make your new algorithm generalize the proper base class.</li>
<li>2.Reimplement some of the following functions as needed.</li>
</ul>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- readConfiguration()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- printAlgorConfig()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- initModel()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- trainModel()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- saveModel()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- loadModel()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- predictForRanking()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- predict()<br>
<br>

For more details, we refer you to the [handbook of QRec](https://www.showdoc.com.cn/1526742200869027/7347975167213420).           

<h2>Implemented Algorithms</h2>
<div>

 <table class=""table table-hover table-bordered"">
  <tr>
		<th>Rating prediction</th>
		<th>Paper</th>
  </tr>
  <tr>
	<td scope=""row"">SlopeOne</td>
    <td>Lemire and Maclachlan, Slope One Predictors for Online Rating-Based Collaborative Filtering, SDM'05.<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">PMF</td>
    <td>Salakhutdinov and Mnih, Probabilistic Matrix Factorization, NIPS'08.
     </td>
  </tr> 
  <tr>
    <td scope=""row"">SoRec</td>
    <td>Ma et al., SoRec: Social Recommendation Using Probabilistic Matrix Factorization, SIGIR'08.
     </td>
  </tr>
     <tr>
    <td scope=""row"">SVD++</td>
    <td>Koren, Factorization meets the neighborhood: a multifaceted collaborative filtering model, SIGKDD'08.
     </td>
  </tr>
    <tr>
    <td scope=""row"">RSTE</td>
    <td>Ma et al., Learning to Recommend with Social Trust Ensemble, SIGIR'09.
     </td>
  </tr>
  <tr>
    <td scope=""row"">SVD</td>
    <td>Y. Koren, Collaborative Filtering with Temporal Dynamics, SIGKDD'09.
     </td>
  </tr>
  <tr>
    <td scope=""row"">SocialMF</td>
    <td>Jamali and Ester, A Matrix Factorization Technique with Trust Propagation for Recommendation in Social Networks, RecSys'10.
     </td>
  </tr>
    <tr>
    <td scope=""row"">EE</td>
    <td>Khoshneshin et al., Collaborative Filtering via Euclidean Embedding, RecSys'10.
     </td>
  </tr>
    <tr>
    <td scope=""row"">SoReg</td>
    <td>Ma et al., Recommender systems with social regularization, WSDM'11.
     </td>
  </tr>
    <tr>
    <td scope=""row"">LOCABAL</td>
    <td>Tang, Jiliang, et al. Exploiting local and global social context for recommendation, AAAI'13.
     </td>
  </tr>

  <tr>
    <td scope=""row"">SREE</td>
    <td>Li et al., Social Recommendation Using Euclidean embedding, IJCNN'17.
     </td>
  </tr>
    <tr>
    <td scope=""row"">CUNE-MF</td>
    <td>Zhang et al., Collaborative User Network Embedding for Social Recommender Systems, SDM'17.
     </td>
  </table>

  <br>
  <table class=""table table-hover table-bordered"">
  <tr>
		<th>Item Ranking</th>
		<th>Paper</th>

   </tr>
  <tr>
	<td scope=""row"">BPR</td>
    <td>Rendle et al., BPR: Bayesian Personalized Ranking from Implicit Feedback, UAI'09.<br>
    </td>
  </tr>
    <tr>
    <td scope=""row"">WRMF</td>
    <td>Yifan Hu et al.Collaborative Filtering for Implicit Feedback Datasets, KDD'09.
     </td>
  </tr>
  <tr>
	<td scope=""row"">SBPR</td>
    <td>Zhao et al., Leveraing Social Connections to Improve Personalized Ranking for Collaborative Filtering, CIKM'14<br>
    </td>
  </tr>
  <tr>
	<td scope=""row"">ExpoMF</td>
    <td>Liang et al., Modeling User Exposure in Recommendation, WWW''16.<br>
    </td>
  </tr>
    <tr>
    <td scope=""row"">CoFactor</td>
    <td>Liang et al., Factorization Meets the Item Embedding: Regularizing Matrix Factorization with Item Co-occurrence, RecSys'16.
     </td>
  </tr>
  <tr>
    <td scope=""row"">TBPR</td>
    <td>Wang et al. Social Recommendation with Strong and Weak Ties, CIKM'16'.
     </td>
  </tr>
    <tr>
	<td scope=""row"">CDAE</td>
    <td>Wu et al., Collaborative Denoising Auto-Encoders for Top-N Recommender Systems, WSDM'16'.<br>
    </td>
  </tr>
    <tr>
	<td scope=""row"">DMF</td>
    <td>Xue et al., Deep Matrix Factorization Models for Recommender Systems, IJCAI'17'.<br>
    </td>
  </tr>
    <tr>
    <td scope=""row"">NeuMF</td>
    <td>He et al. Neural Collaborative Filtering, WWW'17.
     </td>
  </tr>
  <tr>
    <td scope=""row"">CUNE-BPR</td>
    <td>Zhang et al., Collaborative User Network Embedding for Social Recommender Systems, SDM'17'.
     </td>
  </tr>
   <tr>
	<td scope=""row"">IRGAN</td>
    <td>Wang et al., IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models, SIGIR'17'.<br>
    </td>
  </tr>
    <tr>
	<td scope=""row"">SERec</td>
    <td>Wang et al., Collaborative Filtering with Social Exposure: A Modular Approach to Social Recommendation, AAAI'18'.<br>
    </td>
  </tr>
    <tr>
	<td scope=""row"">APR</td>
    <td>He et al., Adversarial Personalized Ranking for Recommendation, SIGIR'18'.<br>
    </td>
  </tr>
  <tr>
    <td scope=""row"">IF-BPR</td>
    <td>Yu et al. Adaptive Implicit Friends Identification over Heterogeneous Network for Social Recommendation, CIKM'18'.
     </td>
  </tr>
  <tr>
    <td scope=""row"">CFGAN</td>
    <td>Chae et al. CFGAN: A Generic Collaborative Filtering Framework based
on Generative Adversarial Networks, CIKM'18.
     </td>    
    <tr>
    <td scope=""row"">NGCF</td>
        <td>Wang et al. Neural Graph Collaborative Filtering, SIGIR'19'.
         </td>
      </tr>
     <tr>
    <td scope=""row"">DiffNet</td>
        <td>Wu et al. A Neural Influence Diffusion Model for Social Recommendation, SIGIR'19'.
         </td>
      </tr>
    <tr>
    <td scope=""row"">RSGAN</td>
        <td>Yu et al. Generating Reliable Friends via Adversarial Learning to Improve Social Recommendation, ICDM'19'.
         </td>
      </tr>
     <tr>
    <td scope=""row"">LightGCN</td>
        <td>He et al. LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation, SIGIR'20.
         </td>
      </tr>
     <tr>
    <td scope=""row"">DHCF</td>
        <td>Ji et al. Dual Channel Hypergraph Collaborative Filtering, KDD'20.
         </td>
      </tr>
     <tr>
    <td scope=""row"">ESRF</td>
        <td>Yu et al. Enhancing Social Recommendation with Adversarial Graph Convlutional Networks, TKDE'20.
         </td>
      </tr>
      <tr>
    <td scope=""row"">MHCN</td>
        <td>Yu et al. Self-Supervised Multi-Channel Hypergraph Convolutional Network for Social Recommendation, WWW'21.
         </td>
      </tr>
     <tr>
    <td scope=""row"">SGL</td>
        <td>Wu et al. Self-supervised Graph Learning for Recommendation, SIGIR'21.
         </td>
      </tr>
    <tr>
    <td scope=""row"">SEPT</td>
        <td>Yu et al. Socially-Aware Self-supervised Tri-Training for Recommendation, KDD'21.
         </td>
      </tr>
          <tr>
    <td scope=""row"">BUIR</td>
        <td>Lee et al. Bootstrapping User and Item Representations for One-Class Collaborative Filtering, SIGIR'21.
         </td>
      </tr>
     <tr>
    <td scope=""row"">SimGCL</td>
        <td>Yu et al. Are Graph Augmentations Necessary? Simple Graph Contrastive Learning for Recommendation, SIGIR'22.
         </td>
      </tr>
  </table>
</div>


<h2>Related Datasets</h2>
<div>
 <table class=""table table-hover table-bordered"">
  <tr>
    <th rowspan=""2"" scope=""col"">Data Set</th>
    <th colspan=""5"" scope=""col"" class=""text-center"">Basic Meta</th>
    <th colspan=""3"" scope=""col"" class=""text-center"">User Context</th> 
    </tr>
  <tr>
    <th class=""text-center"">Users</th>
    <th class=""text-center"">Items</th>
    <th colspan=""2"" class=""text-center"">Ratings (Scale)</th>
    <th class=""text-center"">Density</th>
    <th class=""text-center"">Users</th>
    <th colspan=""2"" class=""text-center"">Links (Type)</th>
    </tr> 
  <tr>
    <td><a href=""https://pan.baidu.com/s/1qY7Ek0W"" target=""_blank""><b>Ciao</b></a> [1]</td>
    <td>7,375</td>
    <td>105,114</td>
    <td width=""6%"">284,086</td>
    <td width=""10%"">[1, 5]</td>
    <td>0.0365%</td>
    <td width=""4%"">7,375</td>
    <td width=""5%"">111,781</td>
    <td>Trust</td>
    </tr> 
  <tr>
    <td><a href=""http://www.trustlet.org/downloaded_epinions.html"" target=""_blank""><b>Epinions</b></a> [2]</td>
    <td>40,163</td>
    <td>139,738</td>
    <td width=""6%"">664,824</td>
    <td width=""10%"">[1, 5]</td>
    <td>0.0118%</td>
    <td width=""4%"">49,289</td>
    <td width=""5%"">487,183</td>
    <td>Trust</td>
    </tr> 
   <tr>
    <td><a href=""https://pan.baidu.com/s/1hrJP6rq"" target=""_blank""><b>Douban</b></a> [3]</td>
    <td>2,848</td>
    <td>39,586</td>
    <td width=""6%"">894,887</td>
    <td width=""10%"">[1, 5]</td>
    <td>0.794%</td>
    <td width=""4%"">2,848</td>
    <td width=""5%"">35,770</td>
    <td>Trust</td>
    </tr> 
	 <tr>
    <td><a href=""http://files.grouplens.org/datasets/hetrec2011/hetrec2011-lastfm-2k.zip"" target=""_blank""><b>LastFM</b></a> [4]</td>
    <td>1,892</td>
    <td>17,632</td>
    <td width=""6%"">92,834</td>
    <td width=""10%"">implicit</td>
    <td>0.27%</td>
    <td width=""4%"">1,892</td>
    <td width=""5%"">25,434</td>
    <td>Trust</td>
    </tr> 
    <tr>
    <td><a href=""https://www.dropbox.com/sh/h97ymblxt80txq5/AABfSLXcTu0Beib4r8P5I5sNa?dl=0"" target=""_blank""><b>Yelp</b></a> [5]</td>
    <td>19,539</td>
    <td>21,266</td>
    <td width=""6%"">450,884</td>
    <td width=""10%"">implicit</td>
    <td>0.11%</td>
    <td width=""4%"">19,539</td>
    <td width=""5%"">864,157</td>
    <td>Trust</td>
    </tr>
    <tr>
    <td><a href=""https://www.dropbox.com/sh/20l0xdjuw0b3lo8/AABBZbRg9hHiN42EHqBSvLpta?dl=0"" target=""_blank""><b>Amazon-Book</b></a> [6]</td>
    <td>52,463</td>
    <td>91,599</td>
    <td width=""6%"">2,984,108</td>
    <td width=""10%"">implicit</td>
    <td>0.11%</td>
    <td width=""4%"">-</td>
    <td width=""5%"">-</td>
    <td>-</td>
    </tr>  
  </table>
</div>


<h3>Reference</h3>
<p>[1]. Tang, J., Gao, H., Liu, H.: mtrust:discerning multi-faceted trust in a connected world. In: International Conference on Web Search and Web Data Mining, WSDM 2012, Seattle, Wa, Usa, February. pp. 93–102 (2012)</p>
<p>[2]. Massa, P., Avesani, P.: Trust-aware recommender systems. In: Proceedings of the 2007 ACM conference on Recommender systems. pp. 17–24. ACM (2007) </p>
<p>[3]. G. Zhao, X. Qian, and X. Xie, “User-service rating prediction by exploring social users’ rating behaviors,” IEEE Transactions on Multimedia, vol. 18, no. 3, pp. 496–506, 2016.</p>
<p>[4]. Iván Cantador, Peter Brusilovsky, and Tsvi Kuflik. 2011. 2nd Workshop on Information Heterogeneity and Fusion in Recom- mender Systems (HetRec 2011). In Proceedings of the 5th ACM conference on Recommender systems (RecSys 2011). ACM, New York, NY, USA</p>
<p>[5]. Yu et al. Self-Supervised Multi-Channel Hypergraph Convolutional Network for Social Recommendation, WWW'21.</p>
<p>[6]. He et al. LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation, SIGIR'20.</p>
<h2>Acknowledgment</h2>
<p>This project is supported by the Responsible Big Data Intelligence Lab (RBDI) at the school of ITEE, University of Queensland, and Chongqing University.</p>

If our project is helpful to you, please cite one of these papers.<br>
<br>
@inproceedings{yu2021socially,<br>
  title={Socially-aware self-supervised tri-training for recommendation},<br>
  author={Yu, Junliang and Yin, Hongzhi and Gao, Min and Xia, Xin and Zhang, Xiangliang and Viet Hung, Nguyen Quoc},<br>
  booktitle={Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery \& Data Mining},<br>
  pages={2084--2092},<br>
  year={2021}<br>
}
<br>
<br>
@inproceedings{yu2021self,<br>
  title={Self-Supervised Multi-Channel Hypergraph Convolutional Network for Social Recommendation},<br>
  author={Yu, Junliang and Yin, Hongzhi and Li, Jundong and Wang, Qinyong and Hung, Nguyen Quoc Viet and Zhang, Xiangliang},<br>
  booktitle={Proceedings of the Web Conference 2021},<br>
  pages={413--424},<br>
  year={2021}<br>
}
"
706,Concourse is a container-based continuous thing-doer written in Go.,"# Concourse: the continuous thing-doer.

[![Discord](https://img.shields.io/discord/219899946617274369.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)][discord]
[![Build](https://ci.concourse-ci.org/api/v1/teams/main/pipelines/concourse/badge)](https://ci.concourse-ci.org/teams/main/pipelines/concourse)
[![Contributors](https://img.shields.io/github/contributors/concourse/concourse)](https://github.com/concourse/concourse/graphs/contributors)
[![Help Wanted](https://img.shields.io/github/labels/concourse/concourse/help%20wanted)](https://github.com/concourse/concourse/labels/help%20wanted)

Concourse is an automation system written in Go. It is most commonly used for
CI/CD, and is built to scale to any kind of automation pipeline, from simple to
complex.

![booklit pipeline](screenshots/booklit-pipeline.png)

Concourse is very opinionated about a few things: idempotency, immutability,
declarative config, stateless workers, and reproducible builds.

## The road to Concourse v10

[Concourse v10][v10] is the code name for a set of features which, when used
in combination, will have a massive impact on Concourse's capabilities as a
generic continuous thing-doer. These features, and how they interact, are
described in detail in the [Core roadmap: towards v10][v10] and [Re-inventing
resource types][prototypes] blog posts. (These posts are *slightly* out of
date, but they get the idea across.)

Notably, **v10 will make Concourse not suck for multi-branch and/or
pull-request driven workflows** - examples of *spatial* change, where the set
of things to automate grows and shrinks over time.

Because v10 is really an alias for a ton of separate features, there's a lot
to keep track of - here's an overview:

| Feature                  | RFC              | Status |
| ------------------------ | ---------------- | ------ |
| `set_pipeline` step      | ✔ [#31][rfc-31]  | ✔ v5.8.0 (experimental) |
| Var sources for creds    | ✔ [#39][rfc-39]  | ✔ v5.8.0 (experimental), TODO: [#5813][issue-5813] |
| Archiving pipelines      | ✔ [#33][rfc-33]  | ✔ v6.5.0 |
| Instanced pipelines      | ✔ [#34][rfc-34]  | ✔ v7.0.0 (experimental) |
| Static `across` step     | 🚧 [#29][rfc-29] | ✔ v6.5.0 (experimental) |
| Dynamic `across` step    | 🚧 [#29][rfc-29] | ✔ v7.4.0 (experimental, not released yet) |
| Projects                 | 🚧 [#32][rfc-32] | 🙏 RFC needs feedback! |
| `load_var` step          | ✔ [#27][rfc-27]  | ✔ v6.0.0 (experimental) |
| `get_var` step           | ✔ [#27][rfc-27]  | 🚧 [#5815][issue-5815] in progress! |
| [Prototypes][prototypes] | ✔ [#37][rfc-37]  | ⚠ Pending first use of protocol (any of the below) |
| `run` step               | 🚧 [#37][rfc-37]  | ⚠ Pending its own RFC, but feel free to experiment |
| Resource prototypes      | ✔ [#38][rfc-38]  | 🙏 [#5870][issue-5870] looking for volunteers! |
| Var source prototypes    |                  | 🚧 [#6275][issue-6275] planned, may lead to RFC |
| Notifier prototypes      | 🚧 [#28][rfc-28] | ⚠ RFC not ready |

The Concourse team at VMware will be working on these features, however in the
interest of growing a healthy community of contributors we would really
appreciate any volunteers. This roadmap is very easy to parallelize, as it is
comprised of many orthogonal features, so the faster we can power through it,
the faster we can all benefit. We want these for our own pipelines too! 😆

If you'd like to get involved, hop in [Discord][discord] or leave a comment on
any of the issues linked above so we can coordinate. We're more than happy to
help figure things out or pick up any work that you don't feel comfortable
doing (e.g. UI, unfamiliar parts, etc.).

Thanks to everyone who has contributed so far, whether in code or in the
community, and thanks to everyone for their patience while we figure out how to
support such common functionality the ""Concoursey way!"" 🙏

[issue-5813]: https://github.com/concourse/concourse/issues/5813
[issue-5814]: https://github.com/concourse/concourse/issues/5814
[issue-5815]: https://github.com/concourse/concourse/issues/5815
[issue-5870]: https://github.com/concourse/concourse/issues/5870
[issue-5921]: https://github.com/concourse/concourse/issues/5921
[issue-6275]: https://github.com/concourse/concourse/issues/6275
[pr-5896]: https://github.com/concourse/concourse/pull/5896
[rfc-27]: https://github.com/concourse/rfcs/blob/master/027-var-steps/proposal.md
[rfc-28]: https://github.com/concourse/rfcs/pull/28
[rfc-29]: https://github.com/concourse/rfcs/pull/29
[rfc-31]: https://github.com/concourse/rfcs/blob/master/031-set-pipeline-step/proposal.md
[rfc-32]: https://github.com/concourse/rfcs/pull/32
[rfc-33]: https://github.com/concourse/rfcs/blob/master/033-archiving-pipelines/proposal.md
[rfc-34]: https://github.com/concourse/rfcs/blob/master/034-instanced-pipelines/proposal.md
[rfc-37]: https://github.com/concourse/rfcs/blob/master/037-prototypes/proposal.md
[rfc-38]: https://github.com/concourse/rfcs/blob/master/038-resource-prototypes/proposal.md
[rfc-39]: https://github.com/concourse/rfcs/blob/master/039-var-sources/proposal.md

[v10]: https://blog.concourse-ci.org/core-roadmap-towards-v10/
[prototypes]: https://blog.concourse-ci.org/reinventing-resource-types/

## Installation

Concourse is distributed as a single `concourse` binary, available on the [Releases page](https://github.com/concourse/concourse/releases/latest).

If you want to just kick the tires, jump ahead to the [Quick Start](#quick-start).

In addition to the `concourse` binary, there are a few other supported formats.
Consult their GitHub repos for more information:

* [Docker image](https://github.com/concourse/concourse-docker)
* [BOSH release](https://github.com/concourse/concourse-bosh-release)
* [Kubernetes Helm chart](https://github.com/concourse/concourse-chart)


## Quick Start

```sh
$ wget https://concourse-ci.org/docker-compose.yml
$ docker-compose up
Creating docs_concourse-db_1 ... done
Creating docs_concourse_1    ... done
```

Concourse will be running at [127.0.0.1:8080](http://127.0.0.1:8080). You can
log in with the username/password as `test`/`test`.

> :warning: **If you are using an M1 mac**: M1 macs are incompatible with the `containerd` runtime. After downloading the docker-compose file, change `CONCOURSE_WORKER_RUNTIME: ""containerd""` to `CONCOURSE_WORKER_RUNTIME: ""houdini""`.
**This feature is experimental**

Next, install `fly` by downloading it from the web UI and target your local
Concourse as the `test` user:

```sh
$ fly -t ci login -c http://127.0.0.1:8080 -u test -p test
logging in to team 'main'

target saved
```

### Configuring a Pipeline

There is no GUI for configuring Concourse. Instead, pipelines are configured as
declarative YAML files:

```yaml
resources:
- name: booklit
  type: git
  source: {uri: ""https://github.com/vito/booklit""}

jobs:
- name: unit
  plan:
  - get: booklit
    trigger: true
  - task: test
    file: booklit/ci/test.yml
```

Most operations are done via the accompanying `fly` CLI. If you've got Concourse
[installed](https://concourse-ci.org/install.html), try saving the above example
as `booklit.yml`, [target your Concourse
instance](https://concourse-ci.org/fly.html#fly-login), and then run:

```sh
fly -t ci set-pipeline -p booklit -c booklit.yml
```

These pipeline files are self-contained, maximizing portability from one
Concourse instance to the next.


### Learn More

* The [Official Site](https://concourse-ci.org) for documentation,
  reference material, and example pipelines (which no longer live in this repository).
* The [Concourse Tutorial](https://concoursetutorial.com) by Stark & Wayne is
  great for a guided introduction to all the core concepts.
* See Concourse in action with our [production pipelines](https://ci.concourse-ci.org/)
* Hang around in the [GitHub discussions](https://github.com/concourse/concourse/discussions) or in
  [Discord](https://discord.gg/MeRxXKW).
* See what we're working on on the [project board](https://github.com/orgs/concourse/projects). 


## Contributing

Our user base is basically everyone that develops software (and wants it to
work).

It's a lot of work, and we need your help! If you're interested, check out our
[contributing docs](CONTRIBUTING.md).

[discord]: https://discord.gg/MeRxXKW
"
1407,The TYPO3 Core - Enterprise Content Management System. Synchronized mirror of https://review.typo3.org/q/project:Packages/TYPO3.CMS,"TYPO3 CMS
=========

TYPO3 is an open source PHP based web content management system released
under the GNU GPL. TYPO3 is copyright © 1999-2023 by Kasper Skårhøj.

This document provides a basic introduction to TYPO3.

Getting Started
---------------

TYPO3 requires a web server with PHP and a database (e.g. MySQL).
The backend is accessed via a supported browser.

Please see the [Installation Guide](https://docs.typo3.org/installation)
in order to set up a basic TYPO3 installation on your web server.

What is TYPO3?
--------------

TYPO3 is a free and open source Content Management Framework. It is
released under the GNU General Public License. It can run on several web
servers, such as Apache, nginx or IIS, on top of many operating systems,
among them Linux, Microsoft Windows, FreeBSD or macOS.

TYPO3 was initially authored by Kasper Skårhøj and is now further
developed by a community of contributors and the [TYPO3 Core Development
Team](https://typo3.org/community/teams/typo3-development/).

To get more info about the GPL license, visit
https://opensource.org/licenses/gpl-license

What is a Content Management Framework?
---------------------------------------

A Content Management Framework is more than just a content management
system, due to the separation of the streamlined core and optional
plugins (extensions). TYPO3 has an open API that allows you to extend
the frontend (website) and/or backend (administration) functionality.

The concept of extensions makes TYPO3 capable of being developed and
used in almost any way you can imagine, either by using any of the many
extensions which are available for download, or by writing your own.

TYPO3 System requirements
-------------------------

TYPO3 is based upon PHP and uses a database management system like
MySQL.

For more specific information regarding requirements see the file
[INSTALL.md](INSTALL.md#server-system-requirements) in this folder.

TYPO3 resources
---------------

Here is an overview of the most important TYPO3 resources to help you
get started:

### Get more information

* https://typo3.org/ is the main project website. It provides up-to-date
  official news, information about events and the TYPO3 community.

* https://docs.typo3.org/: TYPO3 is one of the most thoroughly
  documented OpenSource products around, with manuals covering basic
  tutorials, TypoScript, administration, development, core structure,
  etc. You should make the time to locate the various documents, and
  read those that apply to the work you want to do.

* https://get.typo3.org/ is the platform where you can download TYPO3
  and find all release notes and change logs of TYPO3 releases.

* https://extensions.typo3.org/ is the platform where you can search for
  and download TYPO3 extensions.

### Chat with us

The TYPO3 community is using a tool called Slack to openly communicate
with each other and with the public. Several TYPO3 teams use Slack as a
way to communicate internally and most channels are a welcome place for
you to join and get yourself involved.

* Register: https://my.typo3.org/about-mytypo3org/slack
* Slack: https://typo3.slack.com/

### Exchange information, ask questions, get help

Slack is nice for short discussions, but when asking questions, most
answers are lost in the noise after a few minutes.

#### StackOverflow

**To let everyone profit from an answer, we recommend to ask questions
on StackOverflow**. If you like, you can then post a link into the
corresponding Slack channel to raise attention. And please, do not
forget to tag your questions correctly with `typo3` (and possibly other
tags like `typo3-9.5.x`, `Fluid` or `Extbase`).

* [StackOverflow questions tagged ""TYPO3""](https://stackoverflow.com/questions/tagged/typo3)

#### Official meet the TYPO3 Community overview:

Visit https://typo3.org/community/meet/

Contributing
------------

If you want to contribute to the TYPO3 source code, take a look at our
Contributors Walkthrough and Review System:

* https://docs.typo3.org/core-contribution
* https://review.typo3.org/

> Please use the [TYPO3 Slack chat](#chat-with-us), if you need help in
> setting up your contribution environment. The community is very
> helpful and get you up and running! (Please post your questions in
> Slack Channel `#typo3-cms-coredev` regarding contribution support)

The [repository at GitHub](https://github.com/typo3/typo3) is a
synchronized mirror of the primary TYPO3 core git repository:

* https://git.typo3.org/typo3/typo3

If you want to file a bug report, take a look at:

* [https://forge.typo3.org](https://forge.typo3.org/projects/typo3cms-core/issues)

Security
--------

If you learn about a potential security issue in the TYPO3 core or in
an extension, please always contact the TYPO3 Security Team via security@typo3.org.
Please always include the version number where you've discovered the issue.
If we can confirm a problem in a third-party extension, we will inform the
author immediately.

If you discover a security problem in your own extension, please inform
the TYPO3 Security Team as well. They can help you to fix it, and they
may want to issue an advisory once it is fixed.

For more details see [TYPO3 Security Team](https://typo3.org/community/teams/security/).

Final notes
-----------

TYPO3 is said to be one of the most sophisticated PHP / Internet related
applications available, and the more you play with it, the more you will
agree.

Due to the advanced level of the code and functionality, a degree of
study, time and perseverance is required to fully understand it, and get
the best from it. You should keep trying, as we say it's definitely
worth it. TYPO3 is the Enterprise Content Management System ""for all"".

The GPL license allows for developments that are based upon TYPO3 to
also be freely available under the GPL. Please remember this, because
TYPO3 is about ""Inspiring People To Share"". If you are making money with
TYPO3 you can donate or become a member of the TYPO3 Association.

By becoming a supporting member, individuals and organisations mainly
fund core development of TYPO3. The decision about what the funds are
used for, is made by all members of the Association and the Expert
Advisory Board (EAB). The decisions will be made transparent to the
community and especially the supporting members. Your funds will also
serve for other purposes as laid out in the bylaws.

* Donate: https://typo3.org/donate
* Become a member of the TYPO3 Association:
  https://typo3.org/project/association/

Copyleft
--------

This document is a part of the TYPO3 project.
"
2188,Blockchain and Crytocurrency Resources,"# Blockchain-stuff

Curated list of blockchain and general cryptocurrency resources

# Table of Contents

- [Bitcoin Books](#bitcoin)
- [Blockchain Art](#blockchain-art)
- [Blockchain Books](#blockchain-books)
- [Courses](#courses)
- [Documentaries](#documentaries)
- [Ethereum and Smart Contracts](#ethereum-and-smart-contracts)
- [Explorers](#explorers)
- [Infographics](#infographics)
- [Talks](#talks)
- [White Papers](#white-papers)
- [Youtube Channels](#youtube-channels)
- [Assets](#assets)
- [Private Blockchains](#private-blockchain)




### Blockchain Books
* [Blockchain Explained: A Technology Guide to the Bitcoin and Cryptocurrency Fintech Revolution](https://www.amazon.com/Blockchain-Explained-Technology-Cryptocurrency-Revolution/dp/1535315946/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=1535315946&pd_rd_r=615DFBPATQX6GX4RBPWP&pd_rd_w=96Va0&pd_rd_wg=M6xmm&psc=1&refRID=615DFBPATQX6GX4RBPWP) - R.J Simmons
* [Blockchain Fast and Simple - What It Is, How It Works, Why It Matters: Understand the basics, join the revolution](https://www.amazon.com/Blockchain-Fast-Simple-Understand-revolution-ebook/dp/B01M1J671W/ref=sr_1_1?s=books&ie=UTF8&qid=1476984683&sr=1-1&keywords=Blockchain+Fast+and+Simple+-+What+It+Is%2C+How+It+Works%2C+Why+It+Matters%3A+Understand+the+basics%2C+join+the+revolution) - Pierro Martini
* [Cryptocurrency Investment: How to Invest in Cryptocurrencies and Make Money in the Long-term](https://www.amazon.com/dp/B07588PNMR) - Tamas Torok
* [Blockchain Revolution: How the Technology behind Bitcoin Is Changing Money, Business, and the World](https://www.amazon.com/Blockchain-Revolution-Technology-Changing-Business/dp/1101980133/ref=pd_sim_14_11?_encoding=UTF8&pd_rd_i=1101980133&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) -  Don and AlexTapscott
* [Blockchain Revolution: The Ultimate Guide to Mastering Bitcoin and How to Use Blockchain for Your Benefit](https://www.amazon.com/Blockchain-Revolution-Technology-Changing-Business/dp/1101980133/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=1101980133&pd_rd_r=JMGHCB5WB1SFP0HYMK6E&pd_rd_w=uHeeo&pd_rd_wg=cburT&psc=1&refRID=JMGHCB5WB1SFP0HYMK6E) - Phil Stein
* [Blockchain The Ultimate Guide to Understanding the Hidden Economy](https://www.amazon.com/Blockchain-Ultimate-Understanding-Hidden-Economy/dp/1534839720/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=1534839720&pd_rd_r=6W5M79GD2JFECEZDHPJF&pd_rd_w=19drm&pd_rd_wg=DMS0s&psc=1&refRID=6W5M79GD2JFECEZDHPJF) -s Oscar Flynt
* [Blockchain: Blueprint for a New Economy](https://www.amazon.com/Blockchain-Blueprint-Economy-Melanie-Swan/dp/1491920491/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1491920491&pd_rd_r=3KQXC5RXYM1R64CDQ0DW&pd_rd_w=YGgzx&pd_rd_wg=udR6C&psc=1&refRID=3KQXC5RXYM1R64CDQ0DW) - Melanie Swan
* [Blockchain: Easiest Ultimate Guide To Understand Blockchain](https://www.amazon.com/Blockchain-Understand-Programming-Contracts-Revolution/dp/1537533371/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1537533371&pd_rd_r=904DCPSY2QZX2VM23XQD&pd_rd_w=3oCFL&pd_rd_wg=jJFBs&psc=1&refRID=904DCPSY2QZX2VM23XQD) - Jared Norton
* [Blockchain: Quick Start Guide to Understanding Blockchain, the Biggest Revolution in Financial Technology and Beyond Since the Internet](https://www.amazon.com/Blockchain-Understanding-Revolution-Financial-Technology/dp/153469093X/ref=pd_sim_14_1?_encoding=UTF8&pd_rd_i=153469093X&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) - Seth Ramsey
* [Blockchain: The Comprehensive Guide to Mastering the Hidden Economy](https://www.amazon.com/Blockchain-Comprehensive-Mastering-Technology-Financial/dp/1537272039/ref=pd_sim_14_9?_encoding=UTF8&pd_rd_i=1537272039&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) - Timothy Short
* [Blockchain: The Essential Guide to Understanding the Blockchain Revolution](https://www.amazon.com/Blockchain-Essential-Guide-Understanding-Revolution/dp/1537317504/ref=pd_sim_14_2?_encoding=UTF8&pd_rd_i=1537317504&pd_rd_r=N3211HRZ6T4ETTER3MY3&pd_rd_w=I44Hf&pd_rd_wg=evC6k&psc=1&refRID=N3211HRZ6T4ETTER3MY3) - Jeff Reed
* [Blockchain: The Future of Internet Innovation - Ideas, Applications and Uses for Blockchain Technology](https://www.amazon.com/Blockchain-Innovation-Applications-Cryptocurrencies-Technological-ebook/dp/B01G80V3O2/ref=sr_1_2?ie=UTF8&qid=1476985977&sr=8-2&keywords=Blockchain+contracts+and+CyberLaw) - Jerry Kershen
* [Blockchain: The Simple Guide To Everything You Need To Know](https://www.amazon.com/Blockchain-Simple-Guide-Everything-Need/dp/1533161577/ref=pd_sim_14_23?_encoding=UTF8&pd_rd_i=1533161577&pd_rd_r=26RQGPJBS5V65WXKFS9Z&pd_rd_w=DJMVN&pd_rd_wg=E1guu&psc=1&refRID=26RQGPJBS5V65WXKFS9Z) - Jacob William
* [Bye Bye Banks?: How Retail Banks are Being Displaced, Diminished and Disintermediated by Tech Startups and What They Can Do to Survive](https://www.amazon.com/Bye-Banks-Displaced-Diminished-Disintermediated/dp/0993220649/ref=sr_1_1?ie=UTF8&qid=1476986040&sr=8-1&keywords=Bye+Bye+Banks%3F) - James Haycock
* [Decentralized Applications: Harnessing Bitcoin's Blockchain Technology](https://www.amazon.com/Decentralized-Applications-Harnessing-Blockchain-Technology/dp/1491924543/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1491924543&pd_rd_r=7XN6AJY2PX75QDZTZAPM&pd_rd_w=ZDHwi&pd_rd_wg=oQ9Te&psc=1&refRID=7XN6AJY2PX75QDZTZAPM) - Siraj Raval
* [Financial Technology: This Book Bundle Includes FinTech and Blockchain](https://www.amazon.com/Financial-Technology-Bundle-FinTech-Blockchain/dp/1533477299/ref=pd_sim_14_3?_encoding=UTF8&pd_rd_i=1533477299&pd_rd_r=D7A8BRAQA9GNYQYES830&pd_rd_w=76sME&pd_rd_wg=SCgV1&psc=1&refRID=D7A8BRAQA9GNYQYES830) -  Jacob William
* [How to Program a Block Chain Explorer with Python and Bitcoin](https://www.amazon.com/Program-Block-Explorer-Python-Bitcoin-ebook/dp/B014B6890G/ref=sr_1_1?s=books&ie=UTF8&qid=1476984581&sr=1-1&keywords=How+to+Program+a+Block+Chain+Explorer+with+Python+and+Bitcoin) - Alex Gorale
* [The Business Blockchain: Promise, Practice, and Application of the Next Internet Technology](https://www.amazon.com/FINTECH-Book-Technology-Entrepreneurs-Visionaries/dp/111921887X/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=111921887X&pd_rd_r=Z5ZRQN8RG5TEQTMKYHA9&pd_rd_w=qIgXN&pd_rd_wg=wZM9d&psc=1&refRID=Z5ZRQN8RG5TEQTMKYHA9) -  William Mougayar
* [The FinTech Book: The Financial Technology Handbook for Investors, Entrepreneurs and Visionaries](https://www.amazon.com/FINTECH-Book-Technology-Entrepreneurs-Visionaries/dp/111921887X/ref=pd_bxgy_14_img_3?_encoding=UTF8&pd_rd_i=111921887X&pd_rd_r=Z5ZRQN8RG5TEQTMKYHA9&pd_rd_w=qIgXN&pd_rd_wg=wZM9d&psc=1&refRID=Z5ZRQN8RG5TEQTMKYHA9) - Susanne Chishti and Janos Barberis
* [The Fourth Industrial Revolution](https://www.amazon.com/Fourth-Industrial-Revolution-Klaus-Schwab/dp/1944835008/ref=sr_1_1?s=books&ie=UTF8&qid=1476984488&sr=1-1&keywords=The+Fourth+Industrial+Revolution) - Prof Klaus Schwab
* [The Science of the Blockchain](https://www.amazon.com/Science-Blockchain-Inverted-Forest-Publishing/dp/1522751831/ref=pd_sim_14_10?_encoding=UTF8&pd_rd_i=1522751831&pd_rd_r=FF7D9XVT7EPCACXH29Z8&pd_rd_w=JXBSj&pd_rd_wg=pcc0Z&psc=1&refRID=FF7D9XVT7EPCACXH29Z8) - Roger Wattenhofer
* [ValueWeb: How FinTech firms are using mobile and blockchain technologies to create the Internet of Value](https://www.amazon.com/ValueWeb-Fintech-Blockchain-Technologies-Internet/dp/9814677175/ref=pd_sim_14_10?_encoding=UTF8&pd_rd_i=9814677175&pd_rd_r=BCCHSTJWGE32H74XN9GZ&pd_rd_w=2YGDw&pd_rd_wg=UB9kN&psc=1&refRID=BCCHSTJWGE32H74XN9GZ) -Chris Skinner
* [Building Ethereum ĐApps](https://www.manning.com/books/building-ethereum-dapps) -Roberto Infante


### White papers
* [A Fistful of Bitcoins: Characterizing Payments Among Men with No Names](http://cseweb.ucsd.edu/~smeiklejohn/files/imc13.pdf) - University of San Diego California
* [A brave new world? What impact will distributed ledger technology have on the financial industry?](https://www.ecb.europa.eu/paym/pdf/infocus/20160422_infocus_dlt.pdf) -  The European Central Bank
* [An Architecture for the Internet of Money](https://docs.google.com/document/d/1Bc-kZXROTeMzG6AvH7rrTrUy24UwHoEcgiL7ALHMO0A/pub) - Meher Roy
* [Banking in a world of programmable assets](https://www.accenture.com/t20160509T223022__w__/us-en/_acnmedia/PDF-16/Accenture-Strategy-Banking-World-of-Programmable-Assets.pdf) - Accenture
* [Bitcoin Primer](http://www.macroriskadvisors.com/layout/pdf/bitcoin%20primer%20BTC.pdf) - Macro Risk Advisors
* [Bitcoin as Money?](http://www.bostonfed.org/economic/current-policy-perspectives/2014/cpp1404.pdf) - Stephanie Lo and J. Christina Wang
* [Bitcoin](http://research.microsoft.com/pubs/156072/bitcoin.pdf) - Microsoft Research
* [BlockChain Technology Beyond Bitcoin](http://scet.berkeley.edu/wp-content/uploads/BlockchainPaper.pdf) - University of California,Berkeley
* [Blockchain: practical implications of a revolutionary technology for financial markets and beyond](https://www.dlapiper.com/en/uk/insights/events/2016/04/blockchain-practical-implications/11-apr-2016/)  - DLA Piper
* [Blockchain: the solution for transparency in product supply chains](https://www.provenance.org/whitepaper) - Project Provenance Ltd
* [Blockstack: A Global Naming and Storage System Secured by Blockchains](https://blockstack.org/blockstack.pdf) - Muneeb Ali, Jude Nelson, Ryan Shea and Michael J. Freedman
* [Bootstrapping Trust in Distributed Systems with Blockchains](https://blockstack.org/blockstack-login.pdf) - Muneeb Ali, Jude Nelson, Ryan Shea and Michael J. Freedman
* [Consensus – Immutable agreement for the internet of value](https://assets.kpmg.com/content/dam/kpmg/pdf/2016/06/kpmg-blockchain-consensus-mechanism.pdf) - KPMG
* [Distributed Ledger Technology: beyond block chain](https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/492972/gs-16-1-distributed-ledger-technology.pdf) - UK Government Chief Scientific Adviser
* [Economics of Bitcoin](http://nakamotoinstitute.org/static/docs/economics-of-bitcoin.pdf) - Peter Surda
* [Enabling Blockchain Innovations with Pegged Sidechains](https://blockstream.com/sidechains.pdf) - Adam Back, Matt Corallo, Luke Dashjr, Mark Friedenbach, Gregory Maxwell, Andrew Miller, Andrew Poelstra, Jorge Timón, and Pieter Wuille
* [Extending Existing Blockchains with Virtualchain](https://blockstack.org/virtualchain.pdf) - Jude Nelson, Muneeb Ali, Ryan Shea and Michael J. Freedman
* [The Impact and Potential of Blockchain on the Securities Transaction Lifecycle](http://www.zyen.com/Publications/The%20Impact%20and%20Potential%20of%20Blockchain%20on%20the%20Securities%20Transaction%20Lif....pdf) - The Swift Institute
* [World Citizenship by Creating Affordable Private Passport Service](https://docs.google.com/document/d/1hq52GT0sQ8mJBZ3_qr-LIpZTBFqIDA2WV8vb_1m8i4U/edit#) - Chris Ellis

### Bitcoin
* [Who is Bitcoin address owner, mentions on the Internet, forums, scam alerts, and other metadata.](https://allprivatekeys.com/whose-bitcoin-address.php) - Maksim Boyarov
* [Anonymous Cryptocurrencies: The rise of bitcoin alternatives that offer true anonymity](https://www.amazon.com/Cryptocurrencies-bitcoin-alternatives-offer-anonymity/dp/1500682586/ref=pd_sim_14_24?_encoding=UTF8&pd_rd_i=1500682586&pd_rd_r=PMB5GABNHVFM2VHE3WBH&pd_rd_w=6yGsW&pd_rd_wg=yVxm8&psc=1&refRID=PMB5GABNHVFM2VHE3WBH) - Will Martin
* [Bitcoin and Lightning Network on Raspberry Pi](https://www.amazon.com/Bitcoin-Lightning-Network-Raspberry-Pi/dp/1484255216) - Harris Brakmic
* [Bit by Bit: How P2P Is Freeing the World](https://www.amazon.com/Bit-How-P2P-Freeing-World-ebook/dp/B00S085TRS/ref=sr_1_1?ie=UTF8&qid=1476985273&sr=8-1&keywords=Bit+by+Bit) - Jeffery Tucker
* [Bitcoin : A Complete Beginner's Guide - Master The Game](https://www.amazon.com/Bitcoin-Complete-Beginners-Guide-Master-ebook/dp/B01JU6KD9C/ref=sr_1_2?ie=UTF8&qid=1476986332&sr=8-2&keywords=The+Bitcoin+Tutorial%3A) - Luke Sutton
* [Bitcoin Basics](https://www.amazon.com/Bitcoin-Basics-Creating-Investing-Bitcoins/dp/1508478945/ref=pd_sim_14_4?_encoding=UTF8&pd_rd_i=1508478945&pd_rd_r=YMYPCM376H2JNJ9NVB6D&pd_rd_w=0gtr5&pd_rd_wg=iqdC9&psc=1&refRID=YMYPCM376H2JNJ9NVB6D) - Benjamin Tideas
* [Bitcoin Decoded: Bitcoin Beginner's Guide to Mining and the Strategies to Make Money with Cryptocurrencies](https://www.amazon.com/Bitcoin-Decoded-Beginners-Strategies-Cryptocurrencies/dp/061595524X/ref=pd_sim_14_12?_encoding=UTF8&pd_rd_i=061595524X&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) -  Brett Combs,Tom Mitsoff
* [Bitcoin For Dummies](https://www.amazon.com/Bitcoin-Dummies-Prypto/dp/1119076137/ref=pd_sim_14_30?_encoding=UTF8&pd_rd_i=1119076137&pd_rd_r=26RQGPJBS5V65WXKFS9Z&pd_rd_w=DJMVN&pd_rd_wg=E1guu&psc=1&refRID=26RQGPJBS5V65WXKFS9Z) - Prypto
* [Bitcoin Internals: A Technical Guide to Bitcoin](https://www.amazon.com/Bitcoin-Internals-Technical-Guide-ebook/dp/B00DG8EPT0/ref=sr_1_1?ie=UTF8&qid=1476985144&sr=8-1&keywords=Bitcoin+Internals%3A) - Chris Clark
* [Bitcoin Step by Step for Beginners: How to Invest and Profit from Bitcoin Today!](https://www.amazon.com/Bitcoin-Step-Beginners-Invest-Profit-ebook/dp/B00K5RUKEE/ref=sr_1_1?ie=UTF8&qid=1476986366&sr=8-1&keywords=Bitcoin+Step+by+Step) - Leo Kallstrom
* [Bitcoin The Future of Money](https://www.amazon.com/Bitcoin-future-money-Dominic-Frisby/dp/1783521023/ref=pd_sim_14_19?_encoding=UTF8&pd_rd_i=1783521023&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Dominic Frisby
* [Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction](https://www.amazon.com/Bitcoin-Cryptocurrency-Technologies-Comprehensive-Introduction/dp/0691171696/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=0691171696&pd_rd_r=0CHWWTBSREYE58R7P0SX&pd_rd_w=gCU04&pd_rd_wg=gZavr&psc=1&refRID=0CHWWTBSREYE58R7P0SX) - Arvind Narayanan,Joseph Bonneau,Edward Felten, Andrew Miller,Steven Goldfeder ([free version of first draft](https://d28rh4a8wq0iu5.cloudfront.net/bitcointech/readings/princeton_bitcoin_book.pdf?a=1))
* [Bitcoin and The Future of Money](https://www.amazon.com/Bitcoin-Future-Money-Jose-Pagliery/dp/1629370363/ref=pd_sim_14_14?_encoding=UTF8&pd_rd_i=1629370363&pd_rd_r=NHZ4SY5ACXYYFA2FN5PK&pd_rd_w=WI1XD&pd_rd_wg=LtNFM&psc=1&refRID=NHZ4SY5ACXYYFA2FN5PK) - Jose Pagliery
* [Bitcoin for the Befuddled](https://www.amazon.com/Bitcoin-Befuddled-Conrad-Barski/dp/1593275730/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=1593275730&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Conrad Barski and Chris Wilmer
* [Bitcoin in English](https://www.amazon.com/Bitcoin-English-Understanding-HOW-Works-ebook/dp/B00X09LBX8/ref=sr_1_1?ie=UTF8&qid=1476985191&sr=8-1&keywords=Bitcoin+in+English) - Peter H Le
* [Bitcoin: Mastering Bitcoin & Cyptocurrency for Beginners](https://www.amazon.com/Bitcoin-Mastering-Cyptocurrency-Reinventing-Currencies/dp/153342733X/ref=pd_sim_14_6?_encoding=UTF8&pd_rd_i=153342733X&pd_rd_r=TJJ3Y2F85RACYQSF23GZ&pd_rd_w=kwfLQ&pd_rd_wg=koGbV&psc=1&refRID=TJJ3Y2F85RACYQSF23GZ) - Tim Harris
* [Digital Gold: The Untold Story of Bitcoin](https://www.amazon.com/Digital-Gold-Bitcoin-Millionaires-Reinvent/dp/0062362496/ref=pd_sim_14_1?_encoding=UTF8&pd_rd_i=0062362496&pd_rd_r=D7KMJCP493PPH9ADVPCR&pd_rd_w=g5Hrb&pd_rd_wg=KsfK5&psc=1&refRID=D7KMJCP493PPH9ADVPCR) -  Nathaniel Popper
* [Everything you need to know about buying, selling and investing in Bitcoin](https://www.amazon.com/Everything-selling-investing-Bitcoin-Technology/dp/1493699474/ref=pd_sim_14_17?_encoding=UTF8&pd_rd_i=1493699474&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - A. H Smithers
* [Mastering Bitcoin: Unlocking Digital Cryptocurrencies](https://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Cryptocurrencies/dp/1449374042/ref=sr_1_1?ie=UTF8&qid=1476978890&sr=8-1&keywords=Mastering+Bitcoin%3A+Unlocking+Digital+Cryptocurrencies) Andreas M.  Antonopoulos
* [The Age of Cryptocurrency: How Bitcoin and Digital Money are challenging the Global Economic Order](https://www.amazon.com/Age-Cryptocurrency-Bitcoin-Challenging-Economic/dp/1250065631/ref=pd_sim_14_6?_encoding=UTF8&pd_rd_i=1250065631&pd_rd_r=7XN6AJY2PX75QDZTZAPM&pd_rd_w=ZDHwi&pd_rd_wg=oQ9Te&psc=1&refRID=7XN6AJY2PX75QDZTZAPM) - Paul Vigna and Michael J. Casey
* [The Anatomy of a Money-Like Informational Commodity: A study of Bitcoin](https://www.amazon.com/Anatomy-Money-like-Informational-Commodity-Bitcoin-ebook/dp/B00MEAO7XK/ref=sr_1_1?ie=UTF8&qid=1476985224&sr=8-1&keywords=The+Anatomy+of+a+Money) - Tim Swanson
* [The Bitcoin Bible](https://www.amazon.com/Bitcoin-Bible-Gold-Benjamin-Guttmann/dp/3732296962/ref=pd_sim_14_18?_encoding=UTF8&pd_rd_i=3732296962&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Benjamin Guttmann
* [The Bitcoin Big Bang: How Alternative Currencies Are About to Change the World](https://www.amazon.com/Bitcoin-Big-Bang-Alternative-Currencies/dp/1118963660/ref=pd_sim_14_13?_encoding=UTF8&pd_rd_i=1118963660&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Brian Kelly
* [The Bitcoin Tutor: Unlocking the Secrets of Bitcoin](https://www.amazon.com/Bitcoin-Tutor-Unlocking-Secrets/dp/0979864917/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=0979864917&pd_rd_r=QZN41AYGXJSCS7Q32WA7&pd_rd_w=2i7o1&pd_rd_wg=nbCJJ&psc=1&refRID=QZN41AYGXJSCS7Q32WA7) - Marc A. Carignan
* [The Bitcoin Tutorial: Develop an intuitive understanding of the currency and blockchain technology](https://www.amazon.com/Bitcoin-Tutorial-understanding-blockchain-technology-ebook/dp/B01EP9SVE8/ref=sr_1_1?ie=UTF8&qid=1476986332&sr=8-1&keywords=The+Bitcoin+Tutorial%3A) - Bruce Kleinman
* [The Black Book of Bitcoin: A Step-by-Step Bitcoin Guide on Everything You Need to Know About this New Currency](https://www.amazon.com/Black-Book-Bitcoin-Step-Step/dp/1519284527/ref=pd_sim_14_22?_encoding=UTF8&pd_rd_i=1519284527&pd_rd_r=PMB5GABNHVFM2VHE3WBH&pd_rd_w=6yGsW&pd_rd_wg=yVxm8&psc=1&refRID=PMB5GABNHVFM2VHE3WBH) - Mark Janniro
* [The Book of Satoshi](https://www.amazon.com/Book-Satoshi-Collected-Writings-Nakamoto/dp/0996061312/ref=pd_sim_14_8?_encoding=UTF8&pd_rd_i=0996061312&pd_rd_r=9QB4ZB20S6CY4NGE029X&pd_rd_w=2TjP2&pd_rd_wg=VjLqC&psc=1&refRID=9QB4ZB20S6CY4NGE029X) - Paul Champagne
* [The Digital Money Game: Competing in the multi-trillion dollar payments industry](https://www.amazon.com/Digital-Money-Game-Competing-multi-trillion-ebook/dp/B00LZ3T66K/ref=sr_1_1?ie=UTF8&qid=1476985249&sr=8-1&keywords=The+Digital+Money+Game%3A) - Charmaine Oak
* [The Internet of Money - Andreas M Antonopoulos](https://www.amazon.com/Internet-Money-Andreas-M-Antonopoulos/dp/1537000454/ref=pd_bxgy_14_img_2?_encoding=UTF8&pd_rd_i=1537000454&pd_rd_r=XPR2XE7MNFCYAB70VZDM&pd_rd_w=xn5TU&pd_rd_wg=4Sqi0&psc=1&refRID=XPR2XE7MNFCYAB70VZDM)
* [Understanding Bitcoin: Cryptography, Engineering and Economics](https://www.amazon.com/Understanding-Bitcoin-Cryptography-Engineering-Economics/dp/1119019168/ref=pd_sim_14_16?_encoding=UTF8&pd_rd_i=1119019168&pd_rd_r=KF66S03S94P6CMSN0K29&pd_rd_w=Dibne&pd_rd_wg=jRGoU&psc=1&refRID=KF66S03S94P6CMSN0K29) - Pedro Franco
* [Virtual Billions: The Genius, the Drug Lord, and the Ivy League Twins behind the Rise of Bitcoin](https://www.amazon.com/Virtual-Billions-Genius-League-Bitcoin/dp/163388144X/ref=sr_1_1?ie=UTF8&qid=1476986258&sr=8-1&keywords=Virtual+Billions%3A+The+Genius) - Eric Geissinger
* [Wildcat Currency](https://www.amazon.com/Wildcat-Currency-Virtual-Revolution-Transforming/dp/0300186134/ref=sr_1_1?ie=UTF8&qid=1476986207&sr=8-1&keywords=Wildcat+Currency) - Edward Castronova
* [The Bitcoin Standard](https://www.amazon.com/Bitcoin-Standard-Decentralized-Alternative-Central/dp/1119473861) - Saifedean Ammous

### Ethereum and Smart Contracts
* [A Proof of Stake Design Philosophy](https://medium.com/@VitalikButerin/a-proof-of-stake-design-philosophy-506585978d51#.43e2aeta8) - Vitalik Buterin
* [Blockchain contracts and CyberLaw](https://www.amazon.com/BLOCKCHAIN-CONTRACTS-CYBERLAW-PAVAN-DUGGAL-ebook/dp/B019S2I1CE/ref=sr_1_1?ie=UTF8&qid=1476985977&sr=8-1&keywords=Blockchain+contracts+and+CyberLaw) - Pavan Duggal
* [EatTheBlocks](https://eattheblocks.com)
* [Ethereum Builder's Guide](https://www.gitbook.com/book/ethereumbuilders/guide/details) - Ethereum
* [Ethereum Frontier Guide](https://ethereum.gitbooks.io/frontier-guide/) - Ethereum
* [Ethereum: A look into the world of Ethereum and everything you need to know about it's trade and investment](https://www.amazon.com/Ethereum-everything-investment-Blockchain-Cryptocurrency-ebook/dp/B01IC6NT8S/ref=sr_1_1?ie=UTF8&qid=1476984793&sr=8-1&keywords=Ethereum%3A+A+look+into+the+world+of+Ethereum+and+everything+you+need+to+know+about+it%27s+trade+and+investment%21) - Ben Abner
* [Ethereum: The Complete Beginners Guide -Blockchain, Cryptocurrencies, Ethereum](https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=Ethereum%3A+The+Complete+Beginners+Guide)  - Ray Hammond
* [FinTech: Financial Technology and Modern Finance in the 21st Century](https://www.amazon.com/FinTech-Financial-Technology-Blockchain-Contracts-ebook/dp/B01MEFL03W/ref=sr_1_1?ie=UTF8&qid=1476985691&sr=8-1&keywords=FinTech%3A+Financial+Technology+and+Modern+Finance+in+the+21st+Century) - Jeff Reed
* [Great Chain of Numbers: A Guide to Smart Contracts, Smart Property and Trustless Asset Management](https://www.amazon.com/Great-Chain-Numbers-Contracts-Management-ebook/dp/B00IRUBMXO/ref=sr_1_1?ie=UTF8&qid=1476985949&sr=8-1&keywords=Great+Chain+of+Numbers%3A+A+Guide+to+Smart+Contracts%2C+Smart+Property+and+Trustless+Asset+Management) - Tim Swanson
* [Learn Ethereum Dapps: Build a ToDo List with a Solidity smart contract](https://eattheblocks.com/learn-to-build-an-ethereum-dapp-step-by-step-ebook-tutorial-for-beginners/)
* [Investing In Ethereum: The Complete Guide To Smart Investing - Learn How To Easily Profit From Cryptocurrencies!](https://www.amazon.com/Investing-Ethereum-Complete-Easily-Cryptocurrencies/dp/1537677209/ref=sr_1_fkmr0_1?ie=UTF8&qid=1476985775&sr=8-1-fkmr0&keywords=Ethereum%3A+The+Complete+Beginners+Guide) - 	Thomas Sanders
* [Investing in Ethereum: The Ultimate Guide to Learning and Profiting from--Cryptocurrencies](https://www.amazon.com/Investing-Ethereum-Learning-Profiting-Cryptocurrencies/dp/153530281X/ref=pd_sim_14_5?_encoding=UTF8&pd_rd_i=153530281X&pd_rd_r=EH8VPZEJ5BMM540BQEZW&pd_rd_w=CywQ3&pd_rd_wg=p4U9s&psc=1&refRID=EH8VPZEJ5BMM540BQEZW) - Oscar Flynt
* [Investing in Ethereum: Understanding Cryptocurrencies for the Smart Investor](https://www.amazon.com/Investing-Ethereum-Understanding-Cryptocurrencies-Investor-ebook/dp/B01DD6XVJE/ref=sr_1_1?ie=UTF8&qid=1476985905&sr=8-1&keywords=investing+in+Ethereum%3A+Understanding) - Michael K Nungesser
* [Practical Guide to Smart Contracts](https://www.gitbook.com/book/smart-contract-japan/prictical-guide-of-smart-contracts/details) - Smart Contract Japan
* [Smart Contracts: How to Use Blockchain Smart Contracts for Cryptocurrency Exchange](https://www.amazon.com/Smart-Contracts-Blockchain-Cryptocurrency-Exchange-ebook/dp/B01IQJM53Q/ref=sr_1_1?ie=UTF8&qid=1476984876&sr=8-1&keywords=Smart+Contracts%3A+How+to+Use+Blockchain) - Oscar Flynt
* [Smart Contracts: The Essential Guide to Using Blockchain Smart Contracts for Cryptocurrency Exchange](https://www.amazon.com/Smart-Contracts-Essential-Blockchain-Cryptocurrency-ebook/dp/B01LXGO7GH/ref=sr_1_1?ie=UTF8&qid=1476985747&sr=8-1&keywords=Smart+Contracts%3A+The+Essential+Guide) - Jeff Reed
* [Smart Contracts: The Ultimate Guide To Blockchain Smart Contracts - Learn How To Use Smart Contracts For Cryptocurrency Exchange!](https://www.amazon.com/Smart-Contracts-Ultimate-Blockchain-Cryptocurrency-ebook/dp/B01LYK175F/ref=sr_1_2?ie=UTF8&qid=1476984876&sr=8-2&keywords=Smart+Contracts%3A+How+to+Use+Blockchain) - Terry Parker
* [The Modern Ethereum](https://www.amazon.com/Modern-Ethereum-Ryan-Venter-ebook/dp/B01KIRQZ0S/ref=sr_1_1?ie=UTF8&qid=1476985723&sr=8-1&keywords=The+Modern+Ethereum) - Ryan Venter
* [TurboEthereum Guide](https://www.gitbook.com/book/gavofyork/turboethereum/details) - Gavin Wood
* [Building Ethereum ĐApps](https://www.manning.com/books/building-ethereum-dapps) -Roberto Infante


### Infographics
- [Bitcoin's History 2008-2014](https://i.imgur.com/kVF3kFu.png)
- [How a Transaction Works](https://i.imgur.com/fZyX3Od.jpg)
- [Crypto Table - A Periodic Table of Cryptocurrencies](https://jes.al/crypto-table/)

### Talks
* [Balaji Srinivasan gives a quick talk at Goldman Sachs. (14 min)](https://www.youtube.com/watch?v=7-vYEsfsa30)
* [Balaji Srinivasan on Silicon Valley’s ultimate exit, the USA the Microsoft of nations (16 min)](https://www.youtube.com/watch?v=cOubCHLXT6A)
* [Beyond Bitcoin - Block Chains and the Future of Trustless Computing (27 min)](https://www.youtube.com/watch?v=IgETC2JMUBI)
* [Bitcoin Is Exciting Because It's Cheap](https://www.youtube.com/watch?t=26&v=DyAufA2lWn0) - Bill Gates
* [Bitcoin threatens Kleptocracy (7 min):](http://youtu.be/jaHqtXvGxy4)
* [Bitcoin. Sweat. Tide. Meet the future of branded currency.(11min)](https://www.ted.com/talks/paul_kemp_robertson_bitcoin_sweat_tide_meet_the_future_of_branded_currency?language=en) - Paul Kemp-Robertson
* [Convergex Group, Nick Colas (3min):](https://www.youtube.com/watch?v=CdVVECKKSXo)
* [Defining bitcoin ownership, 2 min](https://www.youtube.com/watch?v=TANjGSo16Uk)
* [Ending the Federal Reserve's Monopoly (6 min):](http://vimeo.com/94697840)
* [Everything You Need to Know About Bitcoin](https://www.youtube.com/watch?v=SNssKmeXrGs) - Reihan Salams
* [How Cryptocurrencies Can Succeed: the Stripe Perspective(20min)](https://www.youtube.com/watch?v=6qZwl7mukZ8) - Greg Brockman
* [How the Blockchain is Changing Money and Business (19 min)](https://www.ted.com/talks/don_tapscott_how_the_blockchain_is_changing_money_and_business?language=en) - Don Tapscott
* [Internet vs Bitcoin (3min):](https://www.youtube.com/watch?v=s0luLPVHkO4)
* [Join The Bitcoin Revolution (4min):](https://www.youtube.com/watch?v=24ce5tV-pgg)
* [TEDx, Crytpocurrencies like Bitcoin are coming, and it's a good thing (11min):](https://www.youtube.com/watch?v=0GL9PTQiqxw) - Juan Llanos
* [Powerful Technology Transforming Society: (6min)](http://www.youtube.com/watch?v=YIVAluSL9SUA)
* [Quick Introduction to Bitcoin (5min)](https://www.youtube.com/watch?v=slFuj5N4twc)
* [Stefan Molyneux- Money, Power and Politics (30min):](https://www.youtube.com/watch?v=_bmlVqs9qSY)
* [Stopping War: (1 min)](https://www.youtube.com/watch?v=eyU3TgQqtV8)
* [TEDx, Distributing Power & Trust (18min)](https://www.youtube.com/watch?v=WI1pbHi1fww) -  Eric Spano
* [Testimony for the Australian Senate Commitee on Economics References(36min)](https://www.youtube.com/watch?v=XotOwt8bTeI&feature=youtu.be)
* [The Future of Bitcoin: New Applications and Rebuilding the banking system: (28min)](https://www.youtube.com/watch?v=mD4L7xDNCmA) - Mike Hearn
* [The Story of Genesis: (3min)](http://youtu.be/gD4llSr-Ik8)
* [The future will be decentralized (14mins)](https://www.youtube.com/watch?v=97ufCT6lQcY) - Charles Hoskinson
* [Xapo, the history of money (5 min):](http://youtu.be/IP0jCjyrew8)
* [Masters of Blockchain (11 episodes)](http://mastersofblockchain.org/)


### Youtube Channels
* [AirBitz](https://www.youtube.com/channel/UCJaTFo0_z9lEG_v7L_LT2pw/videos)
* [Andreas Antonopolous](https://www.youtube.com/user/aantonop)
* [Andy Ofiesh](https://www.youtube.com/user/JellyBaby68/videos)
* [Bitcoin Embassy](https://www.youtube.com/user/JellyBaby68/videos)
* [Bitcoin Foundation](https://www.youtube.com/user/BitcoinFoundation/videos)
* [Bitcoin Wednesday](https://www.youtube.com/channel/UCt-Po2gFQxiUngwJXh6s04w/videos)
* [Blockchain University](https://www.youtube.com/channel/UCJ5uHx90mZGlK0lC-GSmtzw/videos)
* [Blockstack](https://www.youtube.com/channel/UC3J2iHnyt2JtOvtGVf_jpHQ)
* [Bruce Fenton First Mover](https://www.youtube.com/user/BruceFenton/videos)
* [Coin Brief](https://www.youtube.com/user/Coinbrief/videos)
* [Decentral.tv](https://www.youtube.com/user/decentralTV/videos)
* [EatTheBlocks](https://www.youtube.com/c/eattheblocks)
* [Ethereum for Dummies - Dr. Gavin Wood](https://www.youtube.com/watch?v=U_LK0t_qaPo)
* [Draper University](https://www.youtube.com/user/TimothyDraper/videos)
* [EtherCasts](https://www.youtube.com/user/EtherCasts)
* [Ethereum Project](https://www.youtube.com/user/ethereumproject)
* [EverydayCrpto](https://www.youtube.com/user/Cryptoeveryday/videos)
* [Let's Talk Bitcoin](https://www.youtube.com/user/LetsTalkBitcoinChan)
* [MIT Bitcoin Club](https://www.youtube.com/user/MITBitcoinClub/videos)
* [SF Bitcoin Meetup Industry](https://www.youtube.com/channel/UCOLeHoKV7SHwAAS0zBwsV-A/videos)
* [Satoshi Pollen Technical](https://www.youtube.com/user/IamSatoshiNakamoto/videos)
* [Texas Bitcoin Conference](https://www.youtube.com/channel/UCI_T5wLHpVh6URSkxG6-x_g)
* [University Of Nicosia](https://www.youtube.com/user/MScDigitalCurrency/videos)
* [WBN](https://www.youtube.com/channel/UCgo7FCCPuylVk4luP3JAgVw/videos)
* [World Crypto Network](https://www.youtube.com/user/WorldCryptoNetwork)
* [deBitcoin](https://www.youtube.com/user/deBitcoin/videos)
* [Trust Disrupted](https://www.youtube.com/playlist?list=PLHRxVckaE8daSH4OEReWshCKWu3iIOIS-)
* [Introduction to Ethereum and Smart Contracts](https://www.youtube.com/watch?v=r7GVVk8v2Ik)
* [BitcoinLectures.tv](http://bitcoinlectures.tv)

### Courses
* [EatTheBlocks Pro](http://pro.eattheblocks.com)
* [Ethereum DApps In Motion: build a decentralized exchange with Solidity & Truffle](https://www.manning.com/livevideo/ethereum-dapps-in-motion?a_aid=eattheblocks)
* [Bitcoin and Cryptocurrency Technologies ](https://www.coursera.org/learn/cryptocurrency) - Princeton University
* [Bitcoin or How I learned to stop worrying and love Crypto ](https://www.udemy.com/bitcoin-or-how-i-learned-to-stop-worrying-and-love-crypto/#/) - Udemy
* [Bitcoin](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-what-is-it) - Khan Academy Series
* [Crypto Currencies, the Blockchain, and Smart Contracts](https://crypto.stanford.edu/cs251/) - Standford
* [Ethereum Developer: Build A Decentralised Blockchain App](https://www.udemy.com/ethereum-developer/) - Udemy
* [Introduction to Bitcoin and Decentralized Technology By Scott Driscoll](https://www.pluralsight.com/courses/bitcoin-decentralized-technology) - Pluralsight
* [The Basics of Blockchain: A Beginner's Guide to Blockchain](https://www.udemy.com/the-basics-of-blockchain/) - Udemy
* [The Complete Ethereum Course](https://www.udemy.com/ethereum/?couponCode=DEVCON) - udemy
* [Blockchain for Finance Professionals](https://www.experfy.com/training/courses/blockchain-for-finance-professionals) - Experfy
* [Blockchain Technology Fundamentals](https://www.experfy.com/training/courses/blockchain-technology-fundamentals) - Experfy
* [Introduction to Digital Currencies](https://www.unic.ac.cy/blockchain/free-mooc/) - University of Nicosia


### Documentaries
* [Banking on Bitcoin(Trailer)](https://www.youtube.com/watch?v=LJsbebFyM48)
* [Bitcoin in Uganda](https://www.youtube.com/watch?v=BrRXP1tp6Kw)
* [Inside Man with Morgan Spurlock ](http://www.disclose.tv/action/viewvideo/198650/Morgan_Spurlock__Living_On_Bitcoin__The_Inside_Man_Bitcoin_CNN_Full_Documentary/)
* [Bitcoin: Liberating Organic Farmers](http://www.youtube.com/watch?v=fBLpx6gQtUU)
* [Bitcoins in Argentina](http://www.youtube.com/watch?v=e__m-w4N7NI)
* [Life Inside of a Secret Chinese Bitcoin Mine](https://www.youtube.com/watch?v=K8kua5B5K3I)
* [The Bitcoin Doco](https://vimeo.com/112223859)
* [The Rise and Rise of Bitcoin](https://vimeo.com/ondemand/bitcoindoc)


### Blockchain Art
* [Artlery](https://artlery.com)
* [Ascribe](https://www.ascribe.io)
* [Bitmark](https://bitmark.com)
* [Blockai](https://blockai.com)
* [Everledger](http://www.everledger.io)
* [MediaChain Labs](http://www.mediachainlabs.com)
* [Monegraph](https://monegraph.com)
* [Tagsmart](http://www.tagsmart.com)
* [Verisart](https://www.verisart.com)


### Explorers
* [Apirone.com](https://apirone.com/btc/)
* [Bitaps](https://bitaps.com/)
* [Bitinfocharts](https://bitinfocharts.com/bitcoin/explorer/)
* [Block Explorer](https://blockexplorer.com/)
* [Blockchain Size:](https://blockchain.info/charts/blocks-size)
* [Blockonomics](https://www.blockonomics.co/)
* [Blockstack Explorer](https://explorer.blockstack.org/)
* [Blockr](http://blockr.io/)
* [Blocktrail](https://www.blocktrail.com/BTC)
* [Btc Chain](https://btc.com/)
* [Chain Flyer](http://chainflyer.bitf"
752,"A development tool for all your projects that is fast, easy, powerful and liberating","<div align=""center"">

<a href=""https://lando.dev"" target=""_blank""><img width=""250"" src=""https://docs.lando.dev/images/icon.svg"" alt=""Lando logo""></a>

# Lando

### A Liberating Dev Tool For All Your Projects

The local development and DevOps tool trusted by professional developers across the galaxy.

Free yourself from the mind-forged manacles of lesser dev tools. Save time, headaches, frustration and do more real work.

**[learn more](https://lando.dev) | 
[what is it good for?](https://docs.lando.dev/getting-started/#what-is-it-good-for) | 
[wait, doesn't docker compose do this?](https://docs.lando.dev/getting-started/#wait-doesn-t-docker-compose-do-this)**

## Support Lando

Lando is and always will be FREE and OPEN SOURCE. As such it relies on generous contributions from its community to fund its development. Join our list of list of [great sponsors!](https://lando.dev/sponsor/) by contributing.

[GitHub Sponsors](https://github.com/sponsors/lando) | 
[Patreon](https://www.patreon.com/devwithlando) | 
[OpenCollective](https://opencollective.com/lando)

## Documentation

### Getting Started

[Introduction](https://docs.lando.dev/getting-started) | 
[CLI Usage](https://docs.lando.dev/cli/) | 
[Installation](https://docs.lando.dev/getting-started/installation)

### Recipes

[Backdrop](https://docs.lando.dev/backdrop/) | 
[Drupal 6, 7, 8, 9, and 10](https://docs.lando.dev/drupal/) | 
[Joomla](https://docs.lando.dev/joomla/) | 
[Lagoon](https://docs.lando.dev/lagoon/) | 
[Laravel](https://docs.lando.dev/laravel/) | 
[LAMP](https://docs.lando.dev/lamp/) | 
[LEMP](https://docs.lando.dev/lemp/) | 
[MEAN](https://docs.lando.dev/mean/) | 
[Pantheon](https://docs.lando.dev/pantheon/) | 
[Platform.sh](https://docs.lando.dev/platformsh/) | 
[WordPress](https://docs.lando.dev/wordpress/)

### Services

[Apache](https://docs.lando.dev/apache/) | 
[Compose](https://docs.lando.dev/compose/) | 
[dotnet](https://docs.lando.dev/dotnet/) | 
[Elasticsearch](https://docs.lando.dev/elasticsearch/) | 
[Go](https://docs.lando.dev/go/) | 
[MailHog](https://docs.lando.dev/mailhog/) | 
[MariaDB](https://docs.lando.dev/mariadb/) | 
[MySQL](https://docs.lando.dev/mysql/) | 
[MSSQL](https://docs.lando.dev/mssql/) | 
[nginx](https://docs.lando.dev/nginx/) | 
[Node](https://docs.lando.dev/node/) | 
[PHP](https://docs.lando.dev/php/) | 
[PhpMyAdmin](https://docs.lando.dev/phpmyadmin/) | 
[Postgres](https://docs.lando.dev/postgres/) | 
[Python](https://docs.lando.dev/python/) | 
[Redis](https://docs.lando.dev/redis/) | 
[Ruby](https://docs.lando.dev/ruby/) | 
[Solr](https://docs.lando.dev/solr/) | 
[Tomcat](https://docs.lando.dev/tomcat/) | 
[Varnish](https://docs.lando.dev/varnish/)

### Advanced Configuration

[Landofile](https://docs.lando.dev/config/lando.html) | 
[Recipes](https://docs.lando.dev/config/recipes.html) | 
[Services & Build Steps](https://docs.lando.dev/config/services.html) | 
[Tooling](https://docs.lando.dev/config/tooling.html) | 
[Proxy & Nice Url Routing](https://docs.lando.dev/config/proxy.html) | 
[Environment](https://docs.lando.dev/config/env.html) | 
[Events & Automation](https://docs.lando.dev/config/events.html) | 
[Experimental](https://docs.lando.dev/config/experimental.html) | 
[Networking](https://docs.lando.dev/config/networking.html) | 
[Performance](https://docs.lando.dev/config/performance.html) | 
[Release Channels](https://docs.lando.dev/config/releases.html) | 
[SSH Keys](https://docs.lando.dev/config/ssh.html) | 
[Global Config](https://docs.lando.dev/config/global.html)

## Help, Troubleshooting & Support

[Guides and Tutorials](https://docs.lando.dev/guides/lando-info.html) | 
[Examples](https://docs.lando.dev/getting-started/what-it-do.html#you-have-some-examples) | 
[Known Issues](https://docs.lando.dev/help/dns-rebind.html) | 
[Accessing Logs](https://docs.lando.dev/help/logs.html) | 
[GitHub Issue Queue](https://github.com/lando/lando/issues) | 
[Slack Channel](https://launchpass.com/devwithlando) | 
[YouTube Videos](https://www.youtube.com/channel/UCl_QBNuGJNoo7yH-n18K7Kg)

## Engage

[Contribute to the Project](https://docs.lando.dev/contrib) | 
[Join the Alliance](https://docs.lando.dev/contrib) | 
[Events and Meetups](https://lando.dev/events/) | 
[Blog](https://lando.dev/blog/) | 
[Follow on Twitter](https://twitter.com/devwithlando)

## Security Issues
If you have discovered a security issue with Lando, please contact the Lando Security Team directly at [security@devwithlando.io](mailto:security@devwithlando.io). We manage security issues separately in a private repository until the issue has been resolved. Even if you're not sure if it's a security problem, please contact the security team before filing an issue, blogging, or tweeting about it.

## Other Resources
* [Mountain climbing advice](https://www.youtube.com/watch?v=tkBVDh7my9Q)
"
588,🎉 An all-purpose toolbox app. | 一个万用的工具箱 🎉,"<pre align=""center"">
██╗  ██╗    ██╗    ████████╗              ██╗  ██╗
██║ ██╔╝    ██║    ╚══██╔══╝              ╚██╗██╔╝
█████╔╝     ██║       ██║       █████╗     ╚███╔╝ 
██╔═██╗     ██║       ██║       ╚════╝     ██╔██╗ 
██║  ██╗    ██║       ██║                 ██╔╝ ██╗
╚═╝  ╚═╝    ╚═╝       ╚═╝                 ╚═╝  ╚═╝
</pre>

<a href=""https://kitx.apps.catrol.cn/"">
  <img align=""right"" src=""https://source.catrol.cn/icons/Project/Catrol/KitX/KitX.png"" height=""200"" width=""200""/>
</a>

##### 💻 Support OS
[![Windows](https://img.shields.io/badge/Windows-0078D6?style=for-the-badge&logo=windows&logoColor=white)](#)
[![Linux](https://img.shields.io/badge/Linux-FCC624?style=for-the-badge&logo=linux&logoColor=black)](#)
[![MacOS](https://img.shields.io/badge/mac%20os-000000?style=for-the-badge&logo=macos&logoColor=F0F0F0)](#)
[![Android](https://img.shields.io/badge/Android-3DDC84?style=for-the-badge&logo=android&logoColor=white)](#)
[![iOS](https://img.shields.io/badge/iOS-000000?style=for-the-badge&logo=ios&logoColor=white)](#)

##### 📢 Info
[![LICENSE](https://img.shields.io/github/license/Crequency/KitX?style=for-the-badge)](./LICENSE)
[![Downloads](https://img.shields.io/github/downloads/Crequency/KitX/total?style=for-the-badge&color=%239F7AEA)](https://github.com/Crequency/KitX/releases)
[![Discussions](https://img.shields.io/github/discussions/Crequency/KitX?color=%23ED8936&style=for-the-badge)](https://github.com/Crequency/KitX/discussions)
[![Code Size](https://img.shields.io/github/languages/code-size/Crequency/KitX?style=for-the-badge)](#)
[![Commit Activity](https://img.shields.io/github/commit-activity/m/Crequency/KitX?style=for-the-badge)](https://github.com/Crequency/KitX/commits/)

<details>
<summary>状态 | Status</summary>

[![Build Universal](https://img.shields.io/github/actions/workflow/status/Crequency/KitX/build.yml?branch=main&style=for-the-badge&label=Build%20Universal)](https://github.com/Crequency/KitX/actions/workflows/build.yml)
[![Build Loaders](https://img.shields.io/github/actions/workflow/status/Crequency/KitX/build-loaders.yml?branch=main&style=for-the-badge&label=Build%20Loaders)](https://github.com/Crequency/KitX/actions/workflows/build-loaders.yml)
[![Build Plugins](https://img.shields.io/github/actions/workflow/status/Crequency/KitX/build-plugins.yml?branch=main&style=for-the-badge&label=Build%20Plugins)](https://github.com/Crequency/KitX/actions/workflows/build-plugins.yml)

</details>

##### 📧 Social
[![Forks](https://img.shields.io/github/forks/Crequency/KitX?style=social)](https://github.com/Crequency/KitX/network/members)
[![Stars](https://img.shields.io/github/stars/Crequency/KitX?style=social)](https://github.com/Crequency/KitX/stargazers)
[![Watches](https://img.shields.io/github/watchers/Crequency/KitX?style=social)](https://github.com/Crequency/KitX/watchers)
[![Discord](https://img.shields.io/discord/935095924785549372?style=social&label=Discord)](https://discord.gg/TGx3FYbUBb)

---

![ScreenShot of About View](https://raw.githubusercontent.com/Dynesshely/SmallStorge/master/Crequency-KitX/screenshot_about.png)

<details>
<summary>更多截图 More Screenshots</summary>

![ScreenShot of About View](https://raw.githubusercontent.com/Dynesshely/SmallStorge/master/Crequency-KitX/screenshot_plugins.png)
![ScreenShot of About View](https://raw.githubusercontent.com/Dynesshely/SmallStorge/master/Crequency-KitX/screenshot_devices.png)
![ScreenShot of About View](https://raw.githubusercontent.com/Dynesshely/SmallStorge/master/Crequency-KitX/screenshot_update.png)

</details>

---

<br>

<p align=""center"">  
  🌐 <a href=""#-中文简介"">中文简介</a> | <a href=""#-english-introduction"">English Introduction</a><br>
</p>

<br>

<details>
<summary>目录 | Toc</summary>

- [文档总览 | Docs Preview](#文档总览-docs-preview)
- [📃 中文简介](#中文简介)
  - [ℹ 应用简介](#ℹ-应用简介)
  - [🗃 应用架构](#应用架构)
  - [🪧 运行要求](#运行要求)
    - [KitX Dashboard (面向最终用户)](#kitx-dashboard-面向最终用户)
      - [系统支持](#系统支持)
      - [环境支持](#环境支持)
        - [桌面端支持](#桌面端支持)
        - [移动端支持](#移动端支持)
  - [⛏ 参与开发](#参与开发)
- [📃 English Introduction](#english-introduction)
  - [ℹ App Description](#ℹ-app-description)
  - [🗃 Application Architecture](#application-architecture)
  - [🪧 Operating requirements](#operating-requirements)
    - [KitX Dashboard (For end users)](#kitx-dashboard-for-end-users)
      - [System Support](#system-support)
      - [Environmental support](#environmental-support)
        - [Desktop support](#desktop-support)
        - [Mobile support](#mobile-support)
  - [⛏ Participating in development](#participating-in-development)
- [更新周期 Update Plan](#更新周期-update-plan)
- [贡献者 Contributors](#贡献者-contributors)

</details>

---

# 文档总览 | Docs Preview

<details>
<summary>展开 | Expand</summary>

| Languages | Docs                                                                             |
|-----------|----------------------------------------------------------------------------------|
| zh-cn     | [简体中文](https://github.com/Crequency/KitX-Docs/blob/main/zh-cn/README.md)     |
| zh-cnt    | [繁體中文](https://github.com/Crequency/KitX-Docs/blob/main/zh-cnt/README.md)    |
| en-us     | [English (US)](https://github.com/Crequency/KitX-Docs/blob/main/en-us/README.md) |
| ja-jp     | [日本語](https://github.com/Crequency/KitX-Docs/blob/main/ja-jp/README.md)       |

</details>

---

# 📃 中文简介

<details>
<summary>中文简介</summary>

## ℹ 应用简介
KitX 是一个开放, 共享, 免费的工具平台. 允许`开发者(第三方)`以任何`受支持的语言, 框架`为这个平台增添功能.  
`最终用户`可以从`市场`中自由下载免费插件或是购买付费插件来搭建符合自己`工作流`的`快捷自动化环境`.  
基于 KitX 的`三层设计`, 使得`最终用户`可以轻易在`终端场景`中进行不同设备间的流转与同步, 也可以轻松进行`终端场景`中的`多设备协同`.  
同样得益于优秀的`三层设计`, `第三方`可以使用自己熟悉的语言, 框架来工作, 同样可以很轻松将旧有的代码进行迁移, 甚至可以保持旧有逻辑的同时支持 KitX 平台.  

<details>
<summary>注解</summary>

> `开发者(第三方)` => 指为 KitX 平台开发插件, 新功能或是更新旧有代码使之支持 KitX 平台的开发者们.

> `受支持的语言, 框架` => 取决于第一方开发者(即我们)为 KitX 开发了哪些 Loader (三层设计中的一层).

> `最终用户` => 指在终端设备安装 KitX 来使用 KitX 平台以及社区功能并搭建符合自己工作流的用户.

> `市场` => KitX 当然支持旁加载, 但市场是一个更加方便, 有组织, 安全的插件获取平台(KitX Marketplace).

> `工作流` => KitX 所有的插件支持管道消息, 可以在插件间进行任务流动, 以达到插件间协作的目的.

> `快捷自动化环境` => KitX 的`任务计划`模块允许用户设定触发条件, 触发钩子等使工作流自动化.

> `三层设计` => 见下方`应用架构`部分.

> `终端场景` => 最终用户具体使用 KitX 平台的具体场景, 某些语境下指最终用户的局域网环境.

> `多设备协同` => KitX Dashboard (三层设计中的一层) 目前已支持的系统参见下方`运行要求`部分.

> `第三方` => 同上`开发者(第三方)`.

</details>

## 🗃 应用架构

<details>
<summary>展开</summary>

KitX 采用了三层设计


`第三方` 开发 =--> `Plugins` <--= 互操作 =--> `Loaders` <--= Socket 通信 =--> `Dashboard` <--= UI 操作 =--> 用户


第三方负责参照文档实现 Plugin 应该实现的接口, 具体如何实现每种语言不同框架以及选择实现的 Loaders 都不同.  
每种语言或者说框架都会有一个对应的 Loader 来实现与 Plugin 的互操作, 而 Loader 与 Dashboard 通过 Socket 通信, 汇报情况以及传递命令.  
而这三层设计中的每一层都是可以替换的, 任何一层都可以自定义或是采用第三方的解决方案.  
如此一来, 局域网中的其它设备上的插件也可以连接到当前设备, 因此可以实现局域网互联.  

</details>

## 🪧 运行要求

<details>
<summary>展开</summary>

### KitX Dashboard (面向最终用户)
#### 系统支持
桌面端支持: Windows (10, 11) x64 arm, Linux x64 arm, MacOS x64 arm  
移动端支持: Android (5+) arm, iOS (12+) arm

#### 环境支持
##### 桌面端支持
全平台支持 .NET AOT 编译, 进一步增强运行速度, 但是缺少测试, 稳定性没有保证  
Windows: 可选 带环境 与 不带环境 的便携版, 以及 在线安装包 和 离线安装包.  
Linux:   可选 带环境 的便携版, 也可以在 snap 中在线安装, 或者使用 .deb .rpm 包进行安装.  
MacOS:   可选 带环境 的便携版, 也可以在 App Store 中在线安装.  

##### 移动端支持
Android: 可选 .apk 直接安装, 以及 Crequency Hub 中在线安装.  
iOS:     可选 App Store 中在线安装.  

</details>

## ⛏ 参与开发

<details>
<summary>展开</summary>

1. 获取源代码
```shell
git clone git@github.com:Crequency/KitX.git
cd KitX
```

2. 选择您要开发的领域
- Windows
```shell
ToolKits/start.ps1 <type>
```
- Linux/MacOS
```shell
chmod +x ToolKits/start.sh
ToolKits/start.sh <type>
```
`<type>` 为您要开发的领域, 可选值为 `dashboard`, `mobile`, `loader`, `plugin`, `installer`  
此脚本会帮助您获取该领域子模块的源代码, 包含其依赖的子模块  
如果您要获取全部子模块的源代码, 请执行以下命令:  
```shell
git submodule update --init --recursive
```

</details>

</details>

---

# 📃 English Introduction

<details>
<summary>English Introduction</summary>

## ℹ App Description

KitX is an open, shared, free tool platform. Allows `developers (3rd party)` to add functionality to the platform in any `supported languages, frameworks`.  
`End users` can freely download from `market` for free Plug-ins or purchase paid plug-ins to build a `quick automation environment` that conforms to your `workflow`.  
Based on the `three-layer design` of KitX, `end users` can easily transfer and exchange between different devices in the `terminal scene` Synchronization, you can also easily perform `multi-device collaboration` in `terminal scene`.  
Also thanks to the excellent `three-layer design`, `third parties` can use their familiar languages and frameworks to work, and can also easily integrate The old code can be migrated, and even the KitX platform can be supported while maintaining the old logic.  

<details>
<summary>Annotation</summary>

> `Developer (Third Party)` => Refers to developers who develop plugins for the KitX platform, new functions or update old code to support the KitX platform.

> `Supported Languages, Frameworks` => Depends on what Loaders (one of the three-tier design) the first-party developer (i.e. us) has developed for KitX.

> `End user` => Refers to installing KitX on the terminal device to use the KitX platform and community functions and build users who conform to their own workflow.

> `Market` => KitX certainly supports sideloading, but the Marketplace is a much more convenient, organized, and secure platform for getting plugins (KitX Marketplace).

> `Workflow` => All KitX plugins support pipeline messages, and tasks can flow between plugins to achieve the purpose of collaboration between plugins.

> `Quick Automation Environment` => KitX's `Task Scheduler` module allows users to set trigger conditions, trigger hooks, etc. to automate workflows.

> `Three-Tier Design` => See the `Application Architecture` section below.

> `Terminal scene` => The specific scene of the end user using the KitX platform, in some contexts it refers to the end user's local area network environment.

> `Multi-device collaboration` => KitX Dashboard (one layer of the three-tier design) Currently supported systems see the `Running Requirements` section below.

> `Third Party` => Same as above `Developer (Third Party)`.

</details>

## 🗃 Application Architecture

<details>
<summary>Expand</summary>

KitX uses a three-layer design


`Third Party` Development =--> `Plugins` <--= Interop =--> `Loaders` <--= Socket Communication =--> `Dashboard` <--= UI Operation =--> User


The third party is responsible for referring to the documentation to implement the interface that the Plugin should implement, how to implement the different frameworks of each language and the Loaders chosen to implement are different.  
Each language or framework will have a corresponding Loader to achieve interoperability with Plugin, and Loader communicates with Dashboard through Socket, reporting the situation and passing commands.  
Each of these three-layer designs can be replaced, and any layer can be customized or a third-party solution can be used.  
In this way, plug-ins on other devices in the LAN can also be connected to the current device, so LAN interconnection can be achieved.  

</details>

## 🪧 Operating requirements

<details>
<summary>Expand</summary>

### KitX Dashboard (For end users)
#### System Support
Desktop support: Windows (10, 11) x64 arm, Linux x64 arm, MacOS x64 arm  
Mobile support:  Android (5+) arm, iOS (12+) arm

#### Environmental support
##### Desktop support
Any platform supports .NET AOT compilation, which further enhances the running speed, but lacks testing and stability is not guaranteed.  
Windows: Optional with environment, and portable version without environment, as well as online installation package and offline installation package.  
Linux:   Optional portable version with environment, can also be installed online in snap, or installed using .deb .rpm package.  
MacOS:   Optional portable version with environment, can also be installed online in the App Store.

##### Mobile support
Android: Optional .apk direct installation, and online installation in Crequency Hub.
iOS:     Optional online installation from the App Store.

</details>

## ⛏ Participating in development

<details>
<summary>Expand</summary>

1. Get source code
```shell
git clone git@github.com:Crequency/KitX.git
cd KitX
```

2. Select your development area
- Windows
```shell
ToolKits/start.ps1 <type>
```
- Linux/MacOS
```shell
chmod +x ToolKits/start.sh
ToolKits/start.sh <type>
```
`<type>` is area you want to develop, you can choose `dashboard`, `mobile`, `loader`, `plugin`, `installer`  
This script help you get source code of this area, include its dependencies.  
If you want to get source code of all submodules, please execute following command:  
```shell
git submodule update --init --recursive
```

</details>

</details>

---

# 更新周期 Update Plan

<details>
<summary>旧版 Old versions</summary>

| Version                                                                 | Info    | Code       | Support | Term | Require            | Runs on |
|-------------------------------------------------------------------------|---------|------------|---------|------|--------------------|---------|
| Beta_10016                                                              | Beta    | Beta1      | :x:     | 0    | .Net Framework 4.8 | Windows |
| Beta_10213                                                              | Beta    | Beta2      | :x:     | 0    | .Net Framework 4.8 | Windows |
| Beta_10235                                                              | Beta    | Beta3      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.0.0](https://github.com/Crequency/KitX/releases/tag/v1.0.0)         | Release | Hello      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.0.4](https://github.com/Crequency/KitX/releases/tag/v1.0.4)         | Release | WoW        | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.0.5](https://github.com/Crequency/KitX/releases/tag/v1.0.5)         | Release | Nice Try   | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.1.0](https://github.com/Crequency/KitX/releases/tag/v1.1.0)         | Release | Apple      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.1.1](https://github.com/Crequency/KitX/releases/tag/v1.1.1-v1.1.5)  | Release | Banana     | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.1.2](https://github.com/Crequency/KitX/releases/tag/v1.1.1-v1.1.5)  | Release | Cabbage    | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.1.4](https://github.com/Crequency/KitX/releases/tag/v1.1.1-v1.1.5)  | Release | Durin      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.1.5](https://github.com/Crequency/KitX/releases/tag/v1.1.1-v1.1.5)  | Release | Grape      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.0](https://github.com/Crequency/KitX/releases/tag/v1.2.0)         | Release | Herring    | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.1](https://github.com/Crequency/KitX/releases/tag/v1.2.1)         | Release | Wonderful  | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.2](https://github.com/Crequency/KitX/releases/tag/v1.2.2)         | Release | Abandon    | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.4](https://github.com/Crequency/KitX/releases/tag/v1.2.4-preview) | Preview | Panda      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.4](https://github.com/Crequency/KitX/releases/tag/v1.2.4)         | Release | Panda      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.5](https://github.com/Crequency/KitX/releases/tag/v1.2.5)         | Release | Orange     | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.6](https://github.com/Crequency/KitX/releases/tag/v1.2.6)         | Release | Muik       | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v1.2.7](https://github.com/Crequency/KitX/releases/tag/v1.2.7)         | Release | Cookie     | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.0](https://github.com/Crequency/KitX/releases/tag/v2.0.0)         | Release | Sea        | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.1](https://github.com/Crequency/KitX/releases/tag/v2.0.1)         | Release | Ocean      | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.2](https://github.com/Crequency/KitX/releases/tag/v2.0.2)         | Release | Calculator | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.3](https://github.com/Crequency/KitX/releases/tag/v2.0.3)         | Release | Wood       | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.4](https://github.com/Crequency/KitX/releases/tag/v2.0.4)         | Release | Computer   | :x:     | 0    | .Net Framework 4.8 | Windows |
| [v2.0.5](https://github.com/Crequency/KitX/releases/tag/v2.0.5-preview) | Preview | Laptop     | :x:     | 0    | .Net Framework 4.8 | Windows |

</details>

| Version                                                                           | Info    | Code      | Support            | Term               | Require                      | Runs on                                                    |
|-----------------------------------------------------------------------------------|---------|-----------|--------------------|--------------------|------------------------------|------------------------------------------------------------|
| [v3.0.6187.47831](https://github.com/Crequency/KitX/releases/tag/v3.0.6187.47831) | Preview | Fly       | :white_check_mark: | 2022.04 -> 2023.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |
| [v3.22.04.6230](https://github.com/Crequency/KitX/releases/tag/v3.22.04.6230)     | Preview | Telegram  | :white_check_mark: | 2022.04 -> 2023.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |
| [v3.22.04.6235](https://github.com/Crequency/KitX/releases/tag/v3.22.04.6235)     | Release | Break     | :white_check_mark: | 2022.04 -> 2023.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |
| [v3.22.04.6287](https://github.com/Crequency/KitX/releases/tag/v3.22.04.6287)     | Release | Evolution | :white_check_mark: | 2022.04 -> 2023.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |
| v3.22.10.x                                                                        | Release | Hi        | coding             | 2022.10 -> 2023.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |
| v3.23.04.x                                                                        | Release | ToYou     | coding             | 2023.04 -> 2024.04 | .Net 6 (Also Self-Contained) | Windows, Linux, MacOS, Android, iOS, Browser, Raspberry Pi |

# 贡献者 Contributors
<a href = ""https://github.com/Crequency/KitX/graphs/contributors"">
  <img src = ""https://contrib.rocks/image?repo=Crequency/KitX""/>
</a>

    
"
2129,A list of resources we at flyeralarm use to get new developers up and running,"# Advanced Curriculum For The Software Craftsman

This document is intended as a guidance for new developers joining our teams at [FLYERALARM](https://flyeralarm.com).
Because we think it might help others as well we open-sourced it. If you know something that's missing feel free to send us a Pull-Request.

## Basics

* [How The Web Works](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works)
* [HTTP on Wikipedia](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)
* [What Happens When](https://github.com/alex/what-happens-when/blob/master/README.rst)
* [What to learn next](https://roadmap.sh/)
* [An Introduction To HTTP Basics](https://personal.ntu.edu.sg/ehchua/programming/webprogramming/HTTP_Basics.html)
* [Choosing an HTTP Status Code — Stop Making It Hard](https://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html)
* [TCP/IP Protocol Fundamentals Explained with a Diagram](http://www.thegeekstuff.com/2011/11/tcp-ip-fundamentals)
* [Google Developer Training For The Web](https://developers.google.com/training/web/)
* [Visualising data structures and algorithms through animation](https://visualgo.net/)
* [Algorithms, Data Structures, and Design Patterns for Self-Taught Developers](https://web.archive.org/web/20210625134101/https://antjanus.com/blog/web-development-tutorials/learn-the-unlearned-algorithms-data-structures-and-design-patterns/)
* [HTTP: The Protocol Every Web Developer Must Know](https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177)
* [An Introduction to Networking Terminology, Interfaces, and Protocols](https://www.digitalocean.com/community/tutorials/an-introduction-to-networking-terminology-interfaces-and-protocols)
* [How Browser Caching Works](https://thesocietea.org/2016/05/how-browser-caching-works/)
* [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets](http://www.joelonsoftware.com/articles/Unicode.html)
* [What Every Programmer Should Know About Memory](https://www.akkadia.org/drepper/cpumemory.pdf)
* [What Every Developer Should Know About Time](https://unix4lyfe.org/time/?v=1)
* [A story about an angry carrot and a floating point fairy](http://blog.ruslans.com/2014/12/a-story-about-angry-carrot-and-floating.html)

## Design And Architecture Of Software

* [Clean Code](https://www.amazon.com/gp/product/0132350882/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0132350882&linkCode=as2&tag=sdrl-20)
* [DesignPatternsPHP](https://github.com/DesignPatternsPHP/DesignPatternsPHP)
* [What's a design pattern?](https://refactoring.guru/design-patterns/what-is-pattern)
* [All the cool kids...](https://www.youtube.com/watch?v=EDXgNA_pXX0)
* [18 must-watch PHP architecture talks](https://www.reddit.com/r/PHP/comments/3kklt5/18_mustwatch_php_architecture_talks_13hrs/)
* [Object Design Style Guide](https://www.manning.com/books/object-design-style-guide)
* [Practical Object-Oriented Design in Ruby](https://www.amazon.de/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/ref=sr_1_1?s=books-intl-de&ie=UTF8&qid=1476881380&sr=1-1&keywords=practical+object-oriented+design+in+ruby)
* [Patterns of Enterprise Application Architecture](https://www.amazon.de/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/ref=sr_1_1?ie=UTF8&qid=1476887236&sr=8-1&keywords=patterns+of+enterprise+application+architecture)
* [Domain Driven Design](https://www.amazon.de/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&qid=1476887211&sr=8-1&keywords=domain+driven+design)
* [Introduction to CQRS](http://www.codeproject.com/Articles/555855/Introduction-to-CQRS)
* [CQRS and Event Sourcing](https://www.youtube.com/watch?v=JHGkaShoyNs)
* [Your Code as a Crime Scene](https://pragprog.com/titles/atcrime/your-code-as-a-crime-scene/)
* [Awesome API](https://github.com/Kikobeats/awesome-api)
* [An introduction to APIs](https://zapier.com/learn/apis/)
* [Architectural Katas](http://nealford.com/katas/)

## PHP

* [PHP The Right Way](http://www.phptherightway.com/)
* [PHP The Wrong Way](http://www.phpthewrongway.com/)
* [A response to PHP The Wrong Way](https://medium.com/@jon.lemaitre/a-response-to-php-the-wrong-way-fe7bb253e295)
* [PHP Framework Interoperability Group](http://www.php-fig.org/)
* [PSR - PHP Standard Recommendation](https://en.wikipedia.org/wiki/PHP_Standard_Recommendation)
* [PHP Library Discovery](https://www.youtube.com/watch?v=3kD9t0GVGGY&feature=youtu.be)
* [PHP Logging Basics](https://www.loggly.com/ultimate-guide/php-logging-basics/)
* [Awesome PHP (A curated list of amazingly awesome PHP libraries, resources and shiny things)](https://github.com/ziadoz/awesome-php)
* [Reference - What does this error mean in PHP?](https://stackoverflow.com/questions/12769982/reference-what-does-this-error-mean-in-php)

## Kotlin

* [Resources To Learn Kotlin The Right Way](https://superkotlin.com/resources-learn-kotlin/)
* [Programming Kotlin by Venkat Subramaniam](https://pragprog.com/titles/vskotlin/programming-kotlin/)
* [Awesome Kotlin](https://github.com/KotlinBy/awesome-kotlin)
* [Mastering Kotlin standard functions: run, with, let, also and apply](https://medium.com/@elye.project/mastering-kotlin-standard-functions-run-with-let-also-and-apply-9cd334b0ef84)
* [KotlinConf 2018 - Kotlin Coroutines in Practice by Roman Elizarov](https://www.youtube.com/watch?v=a3agLJQ6vt8)
* [Ktor: Web backend framework for Kotlin. Easy to use, fun and asynchronous.](https://ktor.io)

## JavaScript & Frontend

* [JS for Cats](http://jsforcats.com/)
* [JavaScript for impatient programmers](https://exploringjs.com/impatient-js)
* [You don't know JS](https://github.com/getify/You-Dont-Know-JS)
* [Eloquent Javascript](http://eloquentjavascript.net/)
* [Essential Javascript Patterns](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)
* [MDN - Mozilla Developer Network](https://developer.mozilla.org/de/)
* [CSS-Tricks](https://css-tricks.com/)
* [Netflix UI Engineers Youtube Channel](https://www.youtube.com/channel/UCGGRRqAjPm6sL3-WGBDnKJA)
* [Don't make me think - Web Usability](https://www.amazon.de/Dont-make-think-Usability-intuitive/dp/3826697057/ref=sr_1_1?ie=UTF8&qid=1476888649&sr=8-1&keywords=dont+make+me+think)

## Tools

* [git](https://git-scm.com/)
* [Atlassian git Tutorials](https://www.atlassian.com/git/tutorials/)
* [Interactive git Cheatsheet](http://ndpsoftware.com/git-cheatsheet.html)
* [Composer - Dependency Manager For PHP](https://getcomposer.org/)
* [Packagist - The PHP Package Repository](https://packagist.org/)
* [Gradle Guide](https://gradle.org/guides/)
* [PHPStan](https://github.com/phpstan/phpstan)
* [PHPUnit](https://phpunit.de/)
* [Introduction to PHP Unit](https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/)
* [Twelve Benefits of Writing Unit Tests First](http://sd.jtimothyking.com/2006/07/11/twelve-benefits-of-writing-unit-tests-first/)
* [A Beginner's Guide to npm](https://www.sitepoint.com/beginners-guide-node-package-manager/)

## Environment

* [Basic UNIX commands](http://mally.stanford.edu/~sr/computing/basic-unix.html)
* [Explain Shell - Let it explain you what's going on](http://explainshell.com/)
* [Effective DevOps](http://shop.oreilly.com/product/0636920039846.do)
* [Docker Docs](https://docs.docker.com/)
* [Docker Swarms Introduction](https://docs.docker.com/get-started/part4/)
* [What is Kubernetes](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/)
* [Request routing with Traefik](https://doc.traefik.io/traefik/getting-started/concepts/)
* [How to write Ansible Playbooks](https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks)
* [Ansible Docs](https://docs.ansible.com/)
* [Artifactory User Guide](https://www.jfrog.com/confluence/pages/viewpage.action?pageId=46107472)

## Persistence

* [SQL Performance Explained - Short and useful book about SQL performance for developers](https://www.amazon.de/SQL-Performance-Explained-Entwickler-SQL-Performance/dp/3950307818)
* [Use the index, Luke - a guide to database performance for developers](http://use-the-index-luke.com/)
* [The Little Redis Book](https://github.com/karlseguin/the-little-redis-book)

## Monitoring & Alerting

* [How to monitor system metrics with the TICK stack - Can also be used for gathering business metrics](https://www.digitalocean.com/community/tutorials/how-to-monitor-system-metrics-with-the-tick-stack-on-centos-7)
* [How to setup & use Icinga2](https://www.digitalocean.com/community/tutorials/how-to-monitor-hosts-and-services-with-icinga-on-ubuntu-16-04)
* [Using InfluxDB with Grafana](http://docs.grafana.org/features/datasources/influxdb/)
* [Grafana Docs](http://docs.grafana.org/)
* [InfluxDB Docs](http://docs.influxdata.com/influxdb/v1.6/)

## Apache Kafka

* [Kafka as a Platform: the Ecosystem from the Ground Up](https://www.youtube.com/watch?v=WpfJ86_DYfY)
* [Apache Kafka in a Nutshell](https://medium.com/swlh/apache-kafka-in-a-nutshell-5782b01d9ffb)
* [Why Avro for Kafka Data?](https://www.confluent.de/blog/avro-kafka-data/)
* [Deal with Failure in an Event-Driven System](https://www.confluent.io/blog/using-kafka-merge-purge-to-simplify-kafka-failures/)

## Processes & Culture

* [The Agile Manifesto](http://agilemanifesto.org/)
* [Agile Retrospectives](https://pragprog.com/titles/dlret/agile-retrospectives/)
* [The Phoenix Project](https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592)
* [Team Geek - A Software Developer's Guide to Working Well with Others](https://www.amazon.com/Team-Geek-Software-Developers-Working/dp/1449302440/)

## Information Security

* [OWASP - Open Web Application Security Project](https://www.owasp.org/index.php/Main_Page)
* [A Gentle Introduction to Application Security](https://paragonie.com/blog/2015/08/gentle-introduction-application-security)
* [Juice Shop - A vulnerable web app to play around](https://github.com/bkimminich/juice-shop)

## Best Practices

* [The Best Code is No Code At All](https://blog.codinghorror.com/the-best-code-is-no-code-at-all/)
* [The Pragmatic Programmer](https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/)
* [The Clean Coder](https://www.oreilly.com/library/view/the-clean-coder/9780132542913/)
* [Simple Made Easy](https://www.youtube.com/watch?v=rI8tNMsozo0)
* [A Philosophy of Software Design](https://www.youtube.com/watch?v=bmSAYlu0NcY)
* [Refactoring: Improving the Design of Existing Code](https://www.amazon.com/exec/obidos/ASIN/0201485672/codihorr-20)
* [The full stackoverflow developer](https://www.christianheilmann.com/2015/07/17/the-full-stackoverflow-developer/)
* [Measure anything, measure everything](https://codeascraft.com/2011/02/15/measure-anything-measure-everything/)
* Go to a local user group
* Read open-source code on [GitHub](https://www.github.com)
* Never stop building stuff



On a side note: [We are searching for talented people to join our various teams of developers in multiple locations](https://karriere.flyeralarm.com/jobs)"
3116,😎 A collection of awesome Git Hooks,"# Awesome Git Hooks [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)

> A curated list of awesome [Git hooks](https://git-scm.com/docs/githooks)

Git Hooks are scripts that run automatically every time a particular event occurs in a Git repository.

## Contents
- [Useful Git Hooks scripts](#useful-git-hooks-scripts)
- [Tools](#tools)
- [Projects](#projects)
- [Articles](#articles)
- [Video Tutorials](#video-tutorials)
- [Support](#support)

## Useful Git Hooks scripts

- [pre-commit](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-commit) - This hook is called before obtaining the proposed commit message.
- [prepare-commit-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/prepare-commit-msg) - Called after receiving the default commit message, just prior to firing up the commit message editor.
- [pre-receive](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-receive) - This is called on the remote repo just before updating the pushed refs.
- [commit-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/commit-msg) - Can be used to adjust the message after it has been edited in order to ensure conformity to a standard or to reject based on any criteria.
- [pre-push](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-push) - Called prior to a push to a remote. In addition to the parameters, additional information, separated by a space is passed in through stdin in the form of `<local ref> <local sha1> <remote ref> <remote sha1>`.
- [pre-auto-gc](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-auto-gc) - Is used to do some checks before automatically cleaning repos. 
- [pre-rebase](https://github.com/aitemr/awesome-git-hooks/tree/master/pre-rebase) - Called when rebasing a branch. Mainly used to halt the rebase if it is not desirable.
- [applypatch-msg](https://github.com/aitemr/awesome-git-hooks/tree/master/applypatch-msg) - Can edit the commit message file and is often used to verify or actively format a patch's message to a project's standards.
- [post-receive](https://github.com/aitemr/awesome-git-hooks/tree/master/post-receive) - This is run on the remote when pushing after the all refs have been updated. It does not take parameters, but receives info through stdin in the form of `<old-value> <new-value> <ref-name>`. 
- [post-rewrite](https://github.com/aitemr/awesome-git-hooks/tree/master/post-rewrite) - This is called when git commands are rewriting already committed data.
- [post-rewrite](https://github.com/aitemr/awesome-git-hooks/tree/master/post-commit) - Called after a successful commit. Useful for triggering notifications, etc.

## Tools

- [Husky](https://github.com/typicode/husky) - Git hooks made easy.
- [Komondor](https://github.com/orta/Komondor) - Git Hooks for Swift projects.
- [Quickhook](https://github.com/dirk/quickhook/) - Faster Git hook (pre-commit, etc.) runner.
- [git-hooks](https://github.com/icefox/git-hooks/) - A tool to manage project, user, and global Git hooks.
- [overcommit](https://github.com/brigade/overcommit/) - A fully configurable and extendable Git hook manager.
- [Grunt GitHooks](https://github.com/wecodemore/grunt-githooks) - Setup, manage and update your hooks with Grunt. Can be used with all languages, supports templates.
- [Autohook](https://github.com/nkantar/Autohook) - A very, very small Git hook manager with focus on automation.
- [Githooks](https://github.com/rycus86/githooks) - Auto-install Git hook, that supports hooks in any language checked into Git and also shared repos.
- [Hooks](https://www.npmjs.com/package/node-hooks) - A command line git hook management tool.
- [Lefthook](https://github.com/Arkweid/lefthook) - Fast and powerful Git hooks manager for any type of projects. 
- [pre-commit](https://github.com/pre-commit/pre-commit) - A framework for managing and maintaining multi-language pre-commit hooks.

## Projects 

- [Lolcommits](https://github.com/mroth/lolcommits) - Takes a snapshot with your webcam every time you git commit code, and archives a lolcat style image with it.
- [Podmena](https://github.com/bmwant/podmena) - Enhance your commit messages adding random emoji to it.
- [Git Hooks Manager](https://github.com/icefox/git-hooks) - A tool to manage project, user, and global Git hooks for multiple Git repositories.
- [Git::Hooks](https://github.com/gnustavo/Git-Hooks) - A framework for implementing Git (and Gerrit) hooks.
- [git-pre-commit-hook](https://pypi.org/project/git-pre-commit-hook/) - Hook that blocks bad commits. Useful for Python-development.
- [App::GitHooks](https://metacpan.org/pod/App::GitHooks) -  A modular and easy to configure git hooks framework, supporting many plugins. 
- [Jig](https://pythonhosted.org/jig/) - A pre-commit hook on steroids.
- [GitPHPHooks](https://github.com/wecodemore/GitPHPHooks) - Write your hooks in PHP, manage and organize them on a task and project level. Has an additional Hooks library on GitHub.
- [git-hooks-php](https://github.com/BernardoSilva/git-hooks-php) - Git hooks for PHP based projects.
- [commandbox-githooks](https://github.com/elpete/commandbox-githooks) - Git hooks for CommandBox CFML based projects.
- [hooks4git](https://pypi.org/project/hooks4git/) - A simple, flexible and language agnostic git hook management approach.
- [Commit Colors](https://github.com/sparkbox/commit-colors) - See a color swatch in your terminal every time you author a commit.

## Articles

- [Official Documentation](https://git-scm.com/docs/githooks)
- [Git Hooks (Part I): The Basics](http://omerkatz.com/blog/2013/2/15/git-hooks-part-1-the-basics)
- [Git Hooks (Part II): Implementing Git Hooks using Python](http://omerkatz.com/blog/2013/5/23/git-hooks-part-2-implementing-git-hooks-using-python)
- [Atlassian Git Hooks tutorial](https://ru.atlassian.com/git/tutorials/git-hooks)
- [Tips for using Git pre commit hook](https://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/)
- [Use a boostrap shell script to use Git Hooks in Mac with PowerShell and with IntelliJ](https://wilsonmar.github.io/git-hooks/)
- [githooks.com](https://githooks.com)
- [How To Use Git Hooks To Automate Development and Deployment Tasks](https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks)
- [Automate your workflow with git hooks
](https://medium.com/backticks-tildes/how-to-automate-your-git-workflow-with-git-hooks-c905296c49bc)
- [Automate your development workflow](https://medium.com/the-andela-way/git-hooks-beautifully-automate-tasks-stages-bfb29f42fea1)
- [Deploying websites with a Git hook](http://ryanflorence.com/deploying-websites-with-a-tiny-git-hook/) 
- [The missing Git hooks documentation](https://longair.net/blog/2011/04/09/missing-git-hooks-documentation/)

## Video Tutorials 

- [Introduction to Git Hooks](https://www.youtube.com/watch?v=8-JL6NOTZOw)
- [Git hooks, practical uses (yes, even on Windows)](https://www.youtube.com/watch?v=fMYv6-SZsSo)
- [Life’s better with Git hooks](https://www.youtube.com/watch?v=RG26-Iozg70)
- [Husky and the Git Hooks](https://www.youtube.com/watch?v=EpxkBgd8yq8)

## Support

If you have a question, find a bug, or just want to say hi, please open an [issue on GitHub](https://github.com/aitemr/awesome-git-hooks/issues/new). If you want to contribute, please read the [guide](./contributing.md).

## License

[![CC0](http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)

To the extent possible under law, [Islam Temirbek](https://aitemr.github.io) has waived all copyright and related or neighboring rights to this work.
"
683,"Lightweight, fault-tolerant message streams.","![Liftbridge Logo](./website/static/img/liftbridge_full.png)
---
[![Build][Build-Status-Image]][Build-Status-Url] [![License][License-Image]][License-Url] [![ReportCard][ReportCard-Image]][ReportCard-Url] [![Coverage][Coverage-Image]][Coverage-Url]

Liftbridge provides lightweight, fault-tolerant message streams by implementing
a durable, replicated, and scalable message log. The vision for Liftbridge is
to deliver a ""Kafka-lite"" solution designed with the Go community first in
mind. Unlike Kafka, which is built on the JVM and whose canonical client
library is Java (or the C-based librdkafka), Liftbridge and its canonical
client, [go-liftbridge](https://github.com/liftbridge-io/go-liftbridge), are
implemented in Go. The ultimate goal of Liftbridge is to provide a lightweight
message-streaming solution with a focus on simplicity and usability. Use it as
a simpler and lighter alternative to systems like Kafka and Pulsar or to add
streaming semantics to an existing NATS deployment.

See the [introduction](https://bravenewgeek.com/introducing-liftbridge-lightweight-fault-tolerant-message-streams/)
post on Liftbridge and [this post](https://bravenewgeek.com/building-a-distributed-log-from-scratch-part-5-sketching-a-new-system/)
for more context and some of the inspiration behind it.

## Documentation

- [Official documentation](https://liftbridge.io/docs/overview.html)
- [Getting started](https://liftbridge.io/docs/quick-start.html)
- [FAQ](https://liftbridge.io/docs/faq.html)
- [Website](https://liftbridge.io)

## Community

- [Slack](https://liftbridge.slack.com) - click [here](https://liftbridge.io/help.html) to request an invite
- [Twitter](https://twitter.com/liftbridge_io)


[License-Url]: https://www.apache.org/licenses/LICENSE-2.0
[License-Image]: https://img.shields.io/badge/License-Apache2-blue.svg
[Build-Status-Url]: https://circleci.com/gh/liftbridge-io/liftbridge
[Build-Status-Image]: https://circleci.com/gh/liftbridge-io/liftbridge.svg?style=svg
[ReportCard-Url]: https://goreportcard.com/report/github.com/liftbridge-io/liftbridge
[ReportCard-Image]: https://goreportcard.com/badge/github.com/liftbridge-io/liftbridge
[Coverage-Url]: https://coveralls.io/github/liftbridge-io/liftbridge?branch=master
[Coverage-image]: https://coveralls.io/repos/github/liftbridge-io/liftbridge/badge.svg?branch=master
"
1880,"LiteApp is a high performance mobile cross-platform implementation, The realization of cross-platform functionality is base on webview and provides different ideas and solutions for improve webview performance.","# Introduction

<p align=""center"" >
  <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/logo.png?raw=true"" alt=""LiteApp"" title=""LiteApp"">
</p>

**LiteApp is a high performance mobile cross-platform framework. The implementation of its cross-platform functionality is based on webview but improved with novel ideas and solutions for better performance.**

`LiteApp` dedicates to enable developers to use modern web development technology to build applications on both Android and iOS with a single codebase. More specifically, you can use javascript and modern front-end framework Vue.js to develop mobile apps by using LiteApp, with which, productivity and performance can coexist ,application you build will be running on web with performance close to native. We achieve this by decoupling the render engine from the syntax layer, see more detail below.

## Requirements

| Platform |        System        |       Notes        |
| :------: | :------------------: | :----------------: |
|   iOS    |   iOS 9.0 or later   | Xcode 9.0 or later |
| Android  | Android 4.0 or later |        n/a         |
|   Web    |         n/a          |        n/a         |

## Architecture

`系统架构图`

<div align=center>
<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/Architecture.png?raw=true"" alt=""Architecture""/>
</div>`

## 

## Demo Project

[ iOS Display ]() 

> <div align=center>
>
> <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/iOS_Video.gif?raw=true"" width = ""300"" height = ""300*16/9""  alt=""iOS Demo""/>
>
> </div>`

[Android Display]() 

<div align=center>

<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/Andriod_Video.gif?raw=true"" width = ""300"" height = ""300*16/9"" alt=""Android Demo""/>
</div>`

## Features

- [x] **High Performance**: Writing on web, have the same performance as the native app
- [x] **Load Fast** Fast rendering  for all pages , especially for the first time
- [x] **Mobile Cross-platform**  Build both Android and iOS  with a single codebase
- [x] **Asynchronous Threads** the render engines are separated from the syntax layer 
- [x] **Simple Code**  Few code but powerful
- [x] **Expandable**   Proprietary API for extension and it can add more features
- [x] **Complete Documentation** Each section has a corresponding document and easy to understand

## How To Get Started

- [Download LiteApp](https://github.com/iqiyi/LiteApp/wiki/common-Download-LiteApp) and try out the included Mac and iPhone example apps
- Read the [""Getting Started"" guide](https://github.com/iqiyi/LiteApp/wiki/common-How-To-Get-Started), or [other articles on the Wiki](https://github.com/iqiyi/LiteApp/wiki/home)
- Check out the [documentation](https://github.com/iqiyi/LiteApp/wiki/common-Documents) for a comprehensive look at all of the APIs available in LiteApp

## Installation

```
$ git clone https://github.com/iqiyi/LiteApp.git
$ cd liteApp
```

## Communication

- If you **need help**, use [Email](zhangyanqiang@qiyi.com) or [Github](https://github.com/iqiyi/LiteApp) . (Tag 'LiteApp')
- If you'd like to **ask a general question**, use [Email](zhangyanqiang@qiyi.com) or [Github](https://github.com/iqiyi/LiteApp).
- If you **found a bug**, _and can provide steps to reliably reproduce it_, open an issue.
- If you **have a feature request**, open an issue.
- If you **want to contribute**, submit a pull request.

## Performance Test

`LiteApp VS H5 App Results：70% reduction in first load time，Switch Page is 60 FPS`

| Project   | Loading Time/ms |         Switch Page/fps          |
| :-------- | :-------------: | :------------------------------: |
| LiteApp   |   250-500 ms    |            Perfect/60            |
| HTML5 App |    > 1000ms     | White screen for a short time/53 |

`LiteApp`

> <div align=center>
>
> <img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/liteApp.gif?raw=true"" width = ""300"" height = ""300*16/9""  alt=""iOS Demo""/>
>
> </div>`

`HTML5 App`

<div align=center>

<img src=""https://github.com/iqiyi/LiteApp/blob/master/Images/html5.gif?raw=true"" width = ""300"" height = ""300*16/9"" alt=""Android Demo""/>
</div>`

## 

## Credits

LiteApp was originally created by [Guodong Chen](www.breakerror.com)  [Chen Zhang](https://github.com/zhch0633)  [Jingyuan Zhou](https://github.com/pricelesss)   [Yanqiang Zhang](https://github.com/Richard-zhang-iOS) .

LiteApp's logo was designed by [Guodong Chen](www.breakerror.com)

And most of all, thanks to LiteApp's Contributors

### Security Disclosure

If you believe you have identified a security vulnerability with LiteApp, you can contact  [Guodong Chen](www.breakerror.com) as soon as possible. Please do not post it to a public issue tracker.

## License

LiteApp is released under the Apache License, Version 2.0. See [LICENSE](http://gitlab.qiyi.domain/cross-team/lite-app/blob/master/LICENSE) for details.
"
2258,Code for some of my articles,"# Tutorials

This repository contains the code for all my articles and videos.

| Name         | Article | Video | Code |
|:---------------:|:--------:|:----------:|:------:|
| Generating text using a Recurrent Neural Network | [Link](https://gilberttanner.com/blog/generating-text-using-a-recurrent-neuralnetwork) | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Keras-Tutorials/4.%20LSTM%20Text%20Generation/Keras%20LSTM%20Text%20Generation.ipynb) |
| Building a book Recommendation System using Keras | [Link](https://gilberttanner.com/blog/building-a-book-recommendation-system-usingkeras) | [Link](https://youtu.be/4vwNkHFuZBk) | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Recommendation%20System/Recommendation%20System.ipynb) |
| Introduction to Web Scraping with BeautifulSoup | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Web%20Scraping%20with%20BeautifulSoup) |
| Scraping Reddit data | [Link](https://gilberttanner.com/blog/scraping-redditdata) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Reddit%20Webscraping%20using%20PRAW) |
| Introduction to Deep Learning with Keras | [Link](https://gilberttanner.com/blog/introduction-to-deep-learning-withkeras) | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Introduction%20to%20Deep%20Learning%20with%C2%A0Keras/Introduction%20to%20Deep%20Learning%20with%20Keras.ipynb) |
| Introduction to Data Visualization in Python | [Link](https://gilberttanner.com/blog/introduction-to-data-visualization-inpython) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Data%20Visualization%20in%C2%A0Python) |
| Live Object Detection with the Tensorflow Object Detection API | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/Tensorflow%20Object%20Detection/detect_object_in_webcam_video.ipynb) |
| FastAI Image Classification | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Animal%20detector%20from%20Google%20images.ipynb) |
| FastAI Multi-label image classification | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/%20Multi-label%20prediction%20with%20Planet%20Amazon%20dataset.ipynb) |
| Introduction to Uber’s Ludwig | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Uber%20Ludwig%20Introduction) |
| Productionizing your Machine Learning model | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Deploying%20your%20ML%20Model) |
| Creating a discord sentiment analysis bot using VADER | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Discord%20Sentiment%20Analysis%20Bot) |
| FastAI Image Segmentation | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Image%20segmentation%20on%20CamVid%20dataset.ipynb) |
| Collaborative filtering with FastAI | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Book%20Recommendation%20System.ipynb) |
| FastAI Sentiment Analysis | - | - | [Link](https://github.com/TannerGilbert/Tutorials/blob/master/FastAI/Twitter%20US%20Airline%20Sentiment.ipynb) |
| Uber Ludwig Applications | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Uber%20Ludwig%20Examples) |
| Introduction to Ensemble Learning | - | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/A%20guide%20to%20Ensemble%C2%A0Learning) |
| Introduction to Machine Learning in C# with ML.NET | [Link](https://gilberttanner.com/blog/introduction-to-machine-learning-in-c-with-ml-net) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Introduction%20to%20Machine%20Learning%20in%20C%23%20with%20ML.NET/CreditCardFraudDetection) |
| Turn your data science scripts into websites with Streamlit | [Link](https://gilberttanner.com/blog/turn-your-data-science-script-into-websites-with-streamlit) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Streamlit) |
| Deploying your Streamlit dashboard with Heroku | [Link](https://gilberttanner.com/blog/deploying-your-streamlit-dashboard-with-heroku) | - | [Link](https://github.com/TannerGilbert/Tutorials/tree/master/Streamlit/Deploy-Application-with-Heroku) |

## Author
 **Gilbert Tanner**
 
## Support me

<a href=""https://www.buymeacoffee.com/gilberttanner"" target=""_blank""><img src=""https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"" alt=""Buy Me A Coffee"" style=""height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;"" ></a>

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE) file for details
"
298,Java wrapper for the popular chat & VOIP service: Discord https://discord.com,"[maven-central]: https://img.shields.io/maven-central/v/net.dv8tion/JDA?color=blue
[jitpack]: https://img.shields.io/badge/Snapshots-JitPack-blue
[download]: #download
[discord-invite]: https://discord.gg/0hMr4ce0tIl3SLv5
[migration]: https://jda.wiki/introduction/migration-v3-v4/
[jenkins]: https://ci.dv8tion.net/job/JDA5
[license]: https://github.com/DV8FromTheWorld/JDA/tree/master/LICENSE
[faq]: https://jda.wiki/introduction/faq/
[troubleshooting]: https://jda.wiki/using-jda/troubleshooting/
[discord-shield]: https://discord.com/api/guilds/125227483518861312/widget.png
[faq-shield]: https://img.shields.io/badge/Wiki-FAQ-blue.svg
[troubleshooting-shield]: https://img.shields.io/badge/Wiki-Troubleshooting-darkgreen.svg
[jenkins-shield]: https://img.shields.io/badge/Download-Jenkins-purple.svg
[license-shield]: https://img.shields.io/badge/License-Apache%202.0-white.svg
[migration-shield]: https://img.shields.io/badge/Wiki-Migrating%20from%20V3-darkgreen.svg

<img align=""right"" src=""https://github.com/DV8FromTheWorld/JDA/blob/assets/assets/readme/logo.png?raw=true"" height=""200"" width=""200"">

[ ![maven-central][] ][download]
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)
[ ![jenkins-shield][] ][jenkins]
[ ![license-shield][] ][license]

[ ![discord-shield][] ][discord-invite]
[ ![faq-shield] ][faq]
[ ![troubleshooting-shield] ][troubleshooting]
[ ![migration-shield][] ][migration]


# JDA (Java Discord API)

JDA strives to provide a clean and full wrapping of the Discord REST api and its Websocket-Events for Java.
This library is a helpful tool that provides the functionality to create a discord bot in java.

## Summary

Due to official statements made by the Discord developers we will no longer support unofficial features. These features
are undocumented API endpoints or protocols that are not available to bot-accounts.

_Please see the [Discord docs](https://discord.com/developers/docs/reference) for more information about bot accounts._

1. [Introduction](#creating-the-jda-object)
2. [Sharding](#sharding-a-bot)
3. [Entity Lifetimes](#entity-lifetimes)
4. [Download](#download)
5. [Documentation](#documentation)
6. [Support](#getting-help)
7. [Extensions And Plugins](#third-party-recommendations)
8. [Contributing](#contributing-to-jda)
9. [Dependencies](#dependencies)
10. [Other Libraries](#related-projects)

## UserBots and SelfBots

Discord is currently prohibiting creation and usage of automated client accounts (AccountType.CLIENT).
We have officially dropped support for client login as of version **4.2.0**!
Note that JDA is not a good tool to build a custom discord client as it loads all servers/guilds on startup unlike
a client which does this via lazy loading instead.
If you need a bot, use a bot account from the [Application Dashboard](https://discord.com/developers/applications).

[Read More](https://support.discord.com/hc/en-us/articles/115002192352-Automated-user-accounts-self-bots-)

## Creating the JDA Object

Creating the JDA Object is done via the JDABuilder class. After setting the token and other options via setters,
the JDA Object is then created by calling the `build()` method. When `build()` returns,
JDA might not have finished starting up. However, you can use `awaitReady()`
on the JDA object to ensure that the entire cache is loaded before proceeding.
Note that this method is blocking and will cause the thread to sleep until startup has completed.

**Example**:

```java
JDA jda = JDABuilder.createDefault(""token"").build();
```

### Configuration

Both the `JDABuilder` and the `DefaultShardManagerBuilder` allow a set of configurations to improve the experience.

**Example**:

```java
public static void main(String[] args) {
    JDABuilder builder = JDABuilder.createDefault(args[0]);
    
    // Disable parts of the cache
    builder.disableCache(CacheFlag.MEMBER_OVERRIDES, CacheFlag.VOICE_STATE);
    // Enable the bulk delete event
    builder.setBulkDeleteSplittingEnabled(false);
    // Set activity (like ""playing Something"")
    builder.setActivity(Activity.watching(""TV""));
    
    builder.build();
}
```

> See [JDABuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/JDABuilder.html)
  and [DefaultShardManagerBuilder](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/sharding/DefaultShardManagerBuilder.html)

You can configure the memory usage by changing enabled `CacheFlags` on the `JDABuilder`.
Additionally, you can change the handling of member/user cache by setting either a `ChunkingFilter`, disabling **intents**, or changing the **member cache policy**.

```java
public void configureMemoryUsage(JDABuilder builder) {
    // Disable cache for member activities (streaming/games/spotify)
    builder.disableCache(CacheFlag.ACTIVITY);

    // Only cache members who are either in a voice channel or owner of the guild
    builder.setMemberCachePolicy(MemberCachePolicy.VOICE.or(MemberCachePolicy.OWNER));

    // Disable member chunking on startup
    builder.setChunkingFilter(ChunkingFilter.NONE);

    // Disable presence updates and typing events
    builder.disableIntents(GatewayIntent.GUILD_PRESENCE, GatewayIntent.GUILD_MESSAGE_TYPING);

    // Consider guilds with more than 50 members as ""large"". 
    // Large guilds will only provide online members in their setup and thus reduce bandwidth if chunking is disabled.
    builder.setLargeThreshold(50);
}
```

### Listening to Events

The event system in JDA is configured through a hierarchy of classes/interfaces.
We offer two implementations for the `IEventManager`:

- **InterfacedEventManager** which uses an `EventListener` interface and the `ListenerAdapter` abstract class
- **AnnotatedEventManager** which uses the `@SubscribeEvent` annotation that can be applied to methods

By default the **InterfacedEventManager** is used.
Since you can create your own implementation of `IEventManager` this is a very versatile and configurable system.
If the aforementioned implementations don't suit your use-case you can simply create a custom implementation and
configure it on the `JDABuilder` with `setEventManager(...)`.

#### Examples:

**Using EventListener**:

```java
public class ReadyListener implements EventListener
{
    public static void main(String[] args)
            throws InterruptedException
    {
        // Note: It is important to register your ReadyListener before building
        JDA jda = JDABuilder.createDefault(""token"")
            .addEventListeners(new ReadyListener())
            .build();

        // optionally block until JDA is ready
        jda.awaitReady();
    }

    @Override
    public void onEvent(GenericEvent event)
    {
        if (event instanceof ReadyEvent)
            System.out.println(""API is ready!"");
    }
}
```

**Using ListenerAdapter**:

```java
public class MessageListener extends ListenerAdapter
{
    public static void main(String[] args)
    {
        JDA jda = JDABuilder.createDefault(""token"")
                .enableIntents(GatewayIntent.MESSAGE_CONTENT) // enables explicit access to message.getContentDisplay()
                .build();
        //You can also add event listeners to the already built JDA instance
        // Note that some events may not be received if the listener is added after calling build()
        // This includes events such as the ReadyEvent
        jda.addEventListener(new MessageListener());
    }

    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        if (event.isFromType(ChannelType.PRIVATE))
        {
            System.out.printf(""[PM] %s: %s\n"", event.getAuthor().getName(),
                                    event.getMessage().getContentDisplay());
        }
        else
        {
            System.out.printf(""[%s][%s] %s: %s\n"", event.getGuild().getName(),
                        event.getTextChannel().getName(), event.getMember().getEffectiveName(),
                        event.getMessage().getContentDisplay());
        }
    }
}
```

**Slash-Commands**:

```java
public class Bot extends ListenerAdapter
{
    public static void main(String[] args)
    {
        if (args.length < 1) {
            System.out.println(""You have to provide a token as first argument!"");
            System.exit(1);
        }
        // args[0] would be the token (using an environment variable or config file is preferred for security)
        // We don't need any intents for this bot. Slash commands work without any intents!
        JDA jda = JDABuilder.createLight(args[0], Collections.emptyList())
            .addEventListeners(new Bot())
            .setActivity(Activity.playing(""Type /ping""))
            .build();

        // Sets the global command list to the provided commands (removing all others)
        jda.updateCommands().addCommands(
            Commands.slash(""ping"", ""Calculate ping of the bot""),
            Commands.slash(""ban"", ""Ban a user from the server"")
                    .setDefaultPermissions(DefaultMemberPermissions.enabledFor(Permission.BAN_MEMBERS)) // only usable with ban permissions
                    .setGuildOnly(true) // Ban command only works inside a guild
                    .addOption(OptionType.USER, ""user"", ""The user to ban"", true) // required option of type user (target to ban)
                    .addOption(OptionType.STRING, ""reason"", ""The ban reason"") // optional reason
        ).queue();
    }
    
    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event)
    {
        // make sure we handle the right command
        switch (event.getName()) {
            case ""ping"":
                long time = System.currentTimeMillis();
                event.reply(""Pong!"").setEphemeral(true) // reply or acknowledge
                     .flatMap(v ->
                          event.getHook().editOriginalFormat(""Pong: %d ms"", System.currentTimeMillis() - time) // then edit original
                     ).queue(); // Queue both reply and edit
                break;
            case ""ban"":
                // double check permissions, don't trust discord on this!
                if (!event.getMember().hasPermission(Permission.BAN_MEMBERS)) {
                    event.reply(""You cannot ban members! Nice try ;)"").setEphemeral(true).queue();
                    break;
                }
                User target = event.getOption(""user"", OptionMapping::getUser);
                // optionally check for member information
                Member member = event.getOption(""user"", OptionMapping::getMember);
                if (!event.getMember().canInteract(member)) {
                    event.reply(""You cannot ban this user."").setEphemeral(true).queue();
                    break;
                }
                // Before starting our ban request, tell the user we received the command
                // This sends a ""Bot is thinking..."" message which is later edited once we finished
                event.deferReply().queue();
                String reason = event.getOption(""reason"", OptionMapping::getAsString);
                AuditableRestAction<Void> action = event.getGuild().ban(target, 0); // Start building our ban request
                if (reason != null) // reason is optional
                    action = action.reason(reason); // set the reason for the ban in the audit logs and ban log
                action.queue(v -> {
                    // Edit the thinking message with our response on success
                    event.getHook().editOriginal(""**"" + target.getAsTag() + ""** was banned by **"" + event.getUser().getAsTag() + ""**!"").queue();
                }, error -> {
                    // Tell the user we encountered some error
                    event.getHook().editOriginal(""Some error occurred, try again!"").queue();
                    error.printStackTrace();
                });
        }
    }
}
```

### RestAction

Through [RestAction](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html) we provide request handling with
 
 - [callbacks](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#queue%28java.util.function.Consumer%29)
 - [promises](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#submit%28%29)
 - and [sync](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#complete%28%29)

and it is up to the user to decide which pattern to utilize.
It can be combined with reactive libraries such as [reactor-core](https://github.com/reactor/reactor-core) due to being lazy.

The RestAction interface also supports a number of operators to avoid callback hell:

- [`map`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#map%28java.util.function.Function%29)
    Convert the result of the `RestAction` to a different value
- [`flatMap`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#flatMap%28java.util.function.Function%29)
    Chain another `RestAction` on the result
- [`delay`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/requests/RestAction.html#delay%28java.time.Duration%29)
    Delay the element of the previous step

**Example**:

```java
public RestAction<Void> selfDestruct(MessageChannel channel, String content) {
    return channel.sendMessage(""The following message will destroy itself in 1 minute!"")
        .delay(10, SECONDS, scheduler) // edit 10 seconds later
        .flatMap((it) -> it.editMessage(content))
        .delay(1, MINUTES, scheduler) // delete 1 minute later
        .flatMap(Message::delete);
}
```

### More Examples

We provide a small set of Examples in the [Example Directory](https://github.com/DV8FromTheWorld/JDA/tree/master/src/examples/java).

<!--
TODO: Find good examples
- [JDA Butler](https://github.com/Almighty-Alpaca/JDA-Butler)

[And many more!](https://github.com/search?q=JDA+discord+bot&type=Repositories&utf8=%E2%9C%93)
-->

## Sharding a Bot

Discord allows Bot-accounts to share load across sessions by limiting them to a fraction of the total connected Guilds/Servers of the bot.
<br>This can be done using **sharding** which will limit JDA to only a certain amount of Guilds/Servers including events and entities.
Sharding will limit the amount of Guilds/Channels/Users visible to the JDA session so it is recommended to have some kind of elevated management to
access information of other shards.

To use sharding in JDA you will need to use `JDABuilder.useSharding(int shardId, int shardTotal)`. The **shardId** is 0-based which means the first shard
has the ID 0. The **shardTotal** is the total amount of shards (not 0-based) which can be seen similar to the length of an array, the last shard has the ID of
`shardTotal - 1`.

The [`SessionController`](https://ci.dv8tion.net/job/JDA5/javadoc/net/dv8tion/jda/api/utils/SessionController.html) is a tool of the JDABuilder
that allows to control state and behaviour between shards (sessions). When using multiple builders to build shards you have to create one instance
of this controller and add the same instance to each builder: `builder.setSessionController(controller)`

Since version **3.4.0** JDA provides a `ShardManager` which automates this building process.

### Example Sharding - Using JDABuilder

```java
public static void main(String[] args) throws Exception
{
    JDABuilder shardBuilder = JDABuilder.createDefault(args[0]);
    //register your listeners here using shardBuilder.addEventListeners(...)
    shardBuilder.addEventListeners(new MessageListener());
    for (int i = 0; i < 10; i++)
    {
        shardBuilder.useSharding(i, 10)
                    .build();
    }
}
```

> When the `useSharding` method is invoked for the first time, the builder automatically sets a SessionController internally (if none is present)

### Example Sharding - Using DefaultShardManager
```java
public static void main(String[] args) throws Exception
{
    DefaultShardManagerBuilder builder = DefaultShardManagerBuilder.createDefault(args[0]);
    builder.addEventListeners(new MessageListener());
    builder.build();
}
```

## Entity Lifetimes

An **Entity** is the term used to describe types such as **GuildChannel**/**Message**/**User** and other entities that Discord provides.
Instances of these entities are created and deleted by JDA when Discord instructs it. This means the lifetime depends on signals provided by the Discord API which are used to create/update/delete entities.
This is done through Gateway Events known as ""dispatches"" that are handled by the JDA WebSocket handlers.
When Discord instructs JDA to delete entities, they are simply removed from the JDA cache and lose their references.
Once that happens, nothing in JDA interacts or updates the instances of those entities, and they become useless.
Discord may instruct to delete these entities randomly for cache synchronization with the API.

**It is not recommended to store _any_ of these entities for a longer period of time!**
Instead of keeping (e.g.) a `User` instance in some field, an ID should be used. With the ID of a user,
you can use `getUserById(id)` to get and keep the user reference in a local variable (see below).

### Entity Updates

When an entity is updated through its manager, they will send a request to the Discord API which will update the state
of the entity. The success of this request **does not** imply the entity has been updated yet. All entities are updated
by the aforementioned **Gateway Events** which means you cannot rely on the cache being updated yet once the
execution of a RestAction has completed. Some requests rely on the cache being updated to correctly update the entity.
An example of this is updating roles of a member which overrides all roles of the member by sending a list of the
new set of roles. This is done by first checking the current cache, the roles the member has right now, and appending
or removing the requested roles. If the cache has not yet been updated by an event, this will result in unexpected behavior.

### Entity Deletion

Discord may request that a client (the JDA session) invalidates its entire cache. When this happens, JDA will
remove all of its current entities and reconnect the session. This is signaled through the `ReconnectEvent`.
When entities are removed from the JDA cache, they lose access to the encapsulating entities. For instance,
a channel loses access to its guild. Once that happens, they are unable to make any API requests through RestAction
and instead throw an `IllegalStateException`. It is **highly recommended** to only keep references to entities
by storing their **id** and using the respective `get...ById(id)` method when needed.

#### Example

```java
public class UserLogger extends ListenerAdapter 
{
    private final long userId;
    
    public UserLogger(User user)
    {
        this.userId = user.getIdLong();
    }
    
    @Override
    public void onMessageReceived(MessageReceivedEvent event)
    {
        User author = event.getAuthor();
        Message message = event.getMessage();
        if (author.getIdLong() == userId)
        {
            // Print the message of the user
            System.out.println(author.getAsTag() + "": "" + message.getContentDisplay());
        }
    }
    
    @Override
    public void onGuildJoin(GuildJoinEvent event)
    {
        JDA api = event.getJDA();
        User user = api.getUserById(userId); // Acquire a reference to the User instance through the id
        user.openPrivateChannel().queue((channel) ->
        {
            // Send a private message to the user
            channel.sendMessageFormat(""I have joined a new guild: **%s**"", event.getGuild().getName()).queue();
        });
    }
}
```

## Download

[ ![maven-central][] ](https://mvnrepository.com/artifact/net.dv8tion/JDA/latest)
[ ![jitpack][] ](https://jitpack.io/#DV8FromtheWorld/JDA)

Latest Release: [GitHub Release](https://github.com/DV8FromTheWorld/JDA/releases/latest) <br>

Be sure to replace the **VERSION** key below with the one of the versions shown above! For snapshots, please use the instructions provided by [JitPack](https://jitpack.io/#DV8FromTheWorld/JDA).

**Maven**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
</dependency>
```

**Maven without Audio**
```xml
<dependency>
    <groupId>net.dv8tion</groupId>
    <artifactId>JDA</artifactId>
    <version>VERSION</version>
    <exclusions>
        <exclusion>
            <groupId>club.minnced</groupId>
            <artifactId>opus-java</artifactId>
        </exclusion>
    </exclusions>
</dependency>
```

**Gradle**
```gradle
repositories {
    mavenCentral()
}

dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"")
}
```

**Gradle without Audio**
```gradle
dependencies {
    //Change 'implementation' to 'compile' in old Gradle versions
    implementation(""net.dv8tion:JDA:VERSION"") {
        exclude module: 'opus-java'
    }
}
```

The snapshot builds are only available via JitPack and require adding the JitPack resolver, you need to specify specific commits to access those builds.
Stable releases are published to [maven-central](https://mvnrepository.com/artifact/net.dv8tion/JDA).

If you do not need any opus de-/encoding done by JDA (voice receive/send with PCM) you can exclude `opus-java` entirely.
This can be done if you only send audio with an `AudioSendHandler` which only sends opus (`isOpus() = true`). (See [lavaplayer](https://github.com/sedmelluq/lavaplayer))

If you want to use a custom opus library you can provide the absolute path to `OpusLibrary.loadFrom(String)` before using
the audio api of JDA. This works without `opus-java-natives` as it only requires `opus-java-api`.
<br>_For this setup you should only exclude `opus-java-natives` as `opus-java-api` is a requirement for en-/decoding._

See [opus-java](https://github.com/discord-java/opus-java)

### Logging Framework - SLF4J

JDA is using [SLF4J](https://www.slf4j.org/) to log its messages.

That means you should add some SLF4J implementation to your build path in addition to JDA.
If no implementation is found, following message will be printed to the console on startup:
```
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
```

JDA currently provides a fallback Logger in case that no SLF4J implementation is present.
We strongly recommend to use one though, as that can improve speed and allows you to customize the Logger as well as log to files

There is a guide for logback-classic available in our wiki: [Logging Setup](https://jda.wiki/setup/logging/)

## Documentation

Docs can be found on the [Jenkins][jenkins] or directly [here](https://ci.dv8tion.net/job/JDA5/javadoc/)
<br>A simple Wiki can also be found at [jda.wiki](https://jda.wiki/)

### Annotations

We use a number of annotations to indicate future plans for implemented functionality such as new features of
the Discord API.

- [Incubating](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/Incubating.java)
    <br>This annotation is used to indicate that functionality may change in the future. Often used when a new feature is added.
- [ReplaceWith](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ReplaceWith.java)
    <br>Paired with `@Deprecated` this is used to inform you how the new code-fragment is supposed to look once the hereby annotated functionality is removed.
- [ForRemoval](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/ForRemoval.java)
    <br>Paired with `@Deprecated` this indicates that we plan to entirely remove the hereby annotated functionality in the future.
- [DeprecatedSince](https://github.com/DV8FromTheWorld/JDA/blob/master/src/main/java/net/dv8tion/jda/annotations/DeprecatedSince.java)
    <br>Paired with `@Deprecated` this specifies when a feature was marked as deprecated.

[Sources](https://github.com/DV8FromTheWorld/JDA/tree/master/src/main/java/net/dv8tion/jda/annotations)

## Getting Help

For general troubleshooting you can visit our wiki [Troubleshooting][troubleshooting] and [FAQ][faq].
<br>If you need help, or just want to talk with the JDA or other Devs, you can join the [Official JDA Discord Guild][discord-invite].

Alternatively you can also join the [Unofficial Discord API Guild](https://discord.gg/discord-api).
Once you joined, you can find JDA-specific help in the `#java_jda` channel.

For guides and setup help you can also take a look at the [wiki](https://jda.wiki/)
<br>Especially interesting are the [Getting Started](https://jda.wiki/introduction/jda/)
and [Setup](https://jda.wiki/setup/intellij/) Pages.

## Third Party Recommendations

### [LavaPlayer](https://github.com/sedmelluq/lavaplayer)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>LavaPlayer is the most popular library used by Music Bots created in Java.
It is highly compatible with JDA and Discord4J and allows to play audio from
Youtube, Soundcloud, Twitch, Bandcamp and [more providers](https://github.com/sedmelluq/lavaplayer#supported-formats).
<br>The library can easily be expanded to more services by implementing your own AudioSourceManager and registering it.

It is recommended to read the [Usage](https://github.com/sedmelluq/lavaplayer#usage) section of LavaPlayer
to understand a proper implementation.
<br>Sedmelluq provided a demo in his repository which presents an example implementation for JDA:
https://github.com/sedmelluq/lavaplayer/tree/master/demo-jda

### [Lavalink](https://github.com/freyacodes/Lavalink)

Maintained by [Freya Arbjerg](https://github.com/freyacodes).

Lavalink is a popular standalone audio sending node based on Lavaplayer. Lavalink was built with scalability in mind,
and allows streaming music via many servers. It supports most of Lavaplayer's features.

Lavalink is used by many large bots, as well as bot developers who can not use a Java library like Lavaplayer.
If you plan on serving music on a smaller scale with JDA it is often preferable to just use Lavaplayer directly
as it is easier.

[Lavalink-Client](https://github.com/FredBoat/Lavalink-Client) is the official Lavalink client for JDA.


### [jda-nas](https://github.com/sedmelluq/jda-nas)

Created and maintained by [sedmelluq](https://github.com/sedmelluq)
<br>Provides a native implementation for the JDA Audio Send-System to avoid GC pauses.

Note that this send system creates an extra UDP-Client which causes audio receive to no longer function properly
since discord identifies the sending UDP-Client as the receiver.

```java
JDABuilder builder = JDABuilder.createDefault(BOT_TOKEN)
    .setAudioSendFactory(new NativeAudioSendFactory());
```

### [jda-ktx](https://github.com/MinnDevelopment/jda-ktx)

Created and maintained by [MinnDevelopment](https://github.com/MinnDevelopment).
<br>Provides [Kotlin](https://kotlinlang.org/) extensions for **RestAction** and events that provide a more idiomatic Kotlin experience.

```kotlin
fun main() {
    val jda = light(BOT_TOKEN)
    
    jda.onCommand(""ping"") { event ->
        val time = measureTime {
            event.reply(""Pong!"").await() // suspending
        }.inWholeMilliseconds

        event.hook.editOriginal(""Pong: $time ms"").queue()
    }
}
```

There is a number of examples available in the [README](https://github.com/MinnDevelopment/jda-ktx/#jda-ktx).

------

More can be found in our github organization: [JDA-Applications](https://github.com/JDA-Applications)

## Contributing to JDA

If you want to contribute to JDA, make sure to base your branch off of our **development** branch (or a feature-branch)
and create your PR into that **same** branch. **We will be rejecting any PRs between branches or into release branches!**
It is very possible that your change might already be in development or you missed something.

More information can be found at the wiki page [Contributing](https://github.com/DV8FromTheWorld/JDA/wiki/5\)-Contributing)

### Deprecation Policy

When a feature is introduced to replace or enhance existing functionality we might deprecate old functionality.

A deprecated method/class usually has a replacement mentioned in its documentation which should be switched to. Deprecated
functionality might or might not exist in the next minor release. (Hint: The minor version is the `MM` of `XX.MM.RR` in our version format)

It is possible that some features are deprecated without replacement, in this case the functionality is no longer supported by either the JDA structure
due to fundamental changes (for example automation of a feature) or due to Discord API changes that cause it to be removed.

We highly recommend discontinuing usage of deprecated functionality and update by going through each minor release instead of jumping.
For instance, when updating from version 3.3.0 to version 3.5.1 you should do the following:

- Update to `3.4.RR` and check for deprecation, replace
- Update to `3.5.1` and check for deprecation, replace

The `RR` in version `3.4.RR` should be replaced by the latest version that was published for `3.4`, you can find out which the latest
version was by looking at the [release page](https://github.com/DV8FromTheWorld/JDA/releases)

## Dependencies:

This project requires **Java 8+**.<br>
All dependencies are managed automatically by Gradle.
 * NV Websocket Client
   * Version: **2.14**
   * [Github](https://github.com/TakahikoKawasaki/nv-websocket-client)
 * OkHttp
   * Version: **4.10.0**
   * [Github](https://github.com/square/okhttp)
 * Apache Commons Collections4
   * Version: **4.4**
   * [Website](https://commons.apache.org/proper/commons-collections)
 * jackson
   * Version: **2.14.1**
   * [Github](https://github.com/FasterXML/jackson)
 * Trove4j
   * Version: **3.0.3**
   * [BitBucket](https://bitbucket.org/trove4j/trove)
 * slf4j-api
   * Version: **1.7.36**
   * [Website](https://www.slf4j.org/)
 * opus-java (optional)
   * Version: **1.1.1**
   * [GitHub](https://github.com/discord-java/opus-java)

## Related Projects

- [Discord4J](https://github.com/Discord4J/Discord4J)
- [Discord.NET](https://github.com/discord-net/Discord.Net)
- [discord.py](https://github.com/Rapptz/discord.py)
- [serenity](https://github.com/serenity-rs/serenity)

**See also:** [Discord API Community Libraries](https://github.com/apacheli/discord-api-libs)
"
3194,Command line driven CI frontend and development task automation tool.,"# tox

[![PyPI](https://img.shields.io/pypi/v/tox)](https://pypi.org/project/tox/)
[![Supported Python
versions](https://img.shields.io/pypi/pyversions/tox.svg)](https://pypi.org/project/tox/)
[![Downloads](https://pepy.tech/badge/tox/month)](https://pepy.tech/project/tox)
[![Documentation
status](https://readthedocs.org/projects/tox/badge/?version=latest)](https://tox.readthedocs.io/en/latest/?badge=latest)
[![check](https://github.com/tox-dev/tox/actions/workflows/check.yml/badge.svg)](https://github.com/tox-dev/tox/actions/workflows/check.yml)

`tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing
and release process of Python software (alongside [pytest](https://docs.pytest.org/en/latest/) and
[devpi](https://www.devpi.net)).

tox is a generic virtual environment management and test command line tool you can use for:

- checking your package builds and installs correctly under different environments (such as different Python
  implementations, versions or installation dependencies),
- running your tests in each of the environments with the test tool of choice,
- acting as a frontend to continuous integration servers, greatly reducing boilerplate and merging CI and shell-based
  testing.

Please read our [user guide](https://tox.wiki/en/latest/user_guide.html#basic-example) for an example and more detailed
introduction, or watch [this YouTube video](https://www.youtube.com/watch?v=SFqna5ilqig) that presents the problem space
and how tox solves it.
"
1448,"This is a code repository for the corresponding YouTube video. In this tutorial, we're going to build and deploy a React Video Chat Application using WebRTC.","# Realtime Chat Application

![Video Chat](https://i.ibb.co/7WZRLD1/122.jpg)

## Introduction
This is a code repository for the corresponding video tutorial. 

In this tutorial, we're going to build and deploy a React Video Chat Application using WebRTC.

Setup:
- run ```npm i && npm start``` for both client and server side to start the development server
"
2588,A shell🐚 by the beach🏖️!,"# dune

A shell by the beach!

<p float=""left"">
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/welcome3.png"" width=""47.5%""/></a>
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/about.png"" width=""48%""/></a>
</p>

##### _NOTE: Click the image above for a video demonstration._

## About the Author

I'm a *bored* sophomore in college working on projects to fill the time. If you enjoy my work, consider supporting me by buying me a coffee! 

<a href=""https://www.buymeacoffee.com/adam.mcdaniel"" target=""_blank"">
  <img src=""https://cdn.buymeacoffee.com/buttons/v2/default-blue.png"" alt=""Buy Me A Coffee"" height=""60px"" width=""217px""/>
</a>

## Why write another shell?

I feel that bash is great in a lot of ways, but it doesn't exactly feel *cozy*: it's lacking a sort of personal touch, and it's also missing quick and easy customizability. With my last shell, [Atom](https://github.com/adam-mcdaniel/atom), I had accomplished some of the coziness that bash was missing, but I also introduced a lot of *really* fatal flaws in the syntax and the type system.

Dune, however, is designed ***completely*** differently from Atom (although you might notice the similarities in their widget systems). The interpreter itself is standalone, and it holds almost none of the functionality you see in the default distribution of Dune. If you wanted to, you could write a custom frontend and make a unique Dune based shell of your own!

This frontend implementation turns the coziness dial to 11. Just check out the shell's default startup script!

<p float=""left"">
  <img src=""./assets/intro.png"" width=""32%""/>
  <img src=""./assets/help.png"" width=""32%""/>
  <img src=""./assets/bye.png"" width=""32%""/>
</p>

I put a *lot* of work into making Dune just fun to use. It's like a neat little operating system itself!

Dune also attempts to be a usable scripting language, and even offers a few niche metaprogramming features such as quoting *(borrowed from [Lisp](https://github.com/adam-mcdaniel/wisp))*, operator overloading, and macros!

<p float=""left"">
  <img src=""./assets/metaprogramming.png"" width=""45%""/>
  <img src=""./assets/operator-overloading2.png"" width=""52.4%""/>
</p>

Overall, I wrote Dune to have a *complete* shell of my own: one that's fast, useful, and pretty.

*(Also, writing a shell is just kinda really fun)*

## Usage

Dune has a bunch of customizable components. Here's how you can change them and make your shell your own!

### The Prelude

Before entering interactive mode, Dune executes *the prelude*. The prelude is just the startup file `.dune-prelude` stored in the home directory for your user. If you don't provide your own prelude file, Dune will execute its own default prelude with an introduction to the shell.

You can see my example personal prelude [here](./.dune-prelude).

### The REPL

Dune's REPL is entirely customizable by overloading the following functions:

|Name|Purpose|Default Implementation|
|-|-|-|
|`prompt`|This function is called to generate the text which prompts the user for input. It takes the current working directory, and returns a string.|<pre>let prompt = cwd -> fmt@bold ((fmt@dark@blue ""(dune) "") +<br/> (fmt@bold (fmt@dark@green cwd)) +<br/> (fmt@bold (fmt@dark@blue ""$ "")))</pre>|
|`incomplete_prompt`|This function is called to generate the text which prompts the user for input when they have entered an incomplete expression. It takes the current working directory, and returns a string.|<pre>let incomplete_prompt = cwd -> ((len cwd) +<br/> (len ""(dune) "")) * "" "" +<br/> (fmt@bold (fmt@dark@yellow ""> ""));</pre>|
|`report`|This function is called to print a value to the console after evaluation.|*The default implementation is a builtin function (implemented in Rust), but you can overload it with any callable value nonetheless.*|

I highly recommend using the `fmt` module when implementing your own customizations for your prompt!

### Aliases

This distribution of Dune uses the *`Symbol`* type (the type of variable names and paths) to implement calling programs. Whenever an expression of type *`Symbol`* is evaluated as a command in interactive mode, it is invoked as a program.

Because of this, you can define aliases by assigning a variable to a program's name like so!

<a href=""https://asciinema.org/a/7Cr96ndSzsIch7oGVYI3aIaX9""><img src=""./assets/alias.png"" width=""48%""/></a>

If you have defined a variable that overshadows your program's name (such as an alias), you can *quote* the program name to run it.

![Overshadowed](./assets/overshadowed.png)

### Macros

To write functions that modify your shell's environment and act like commands or programs themselves, use a macro!

![Macros](./assets/macros.png)

Macros, when called with zero arguments, are passed the current working directory. When invoked, they assume the environment of the callee: if you execute a macro, it will execute as if you executed the contents of the macro itself with the parameter defined as the argument passed.

### Piping and Redirection

Piping and redirection are done with the `|` and `>>` operators. Here's some example uses!

![Piping and Redirection](./assets/piping.png)

If a value is piped into a callable object, like a function or macro, it is performed as an application; otherwise, the expression is treated like a regular call to a program.

## Standard Library

Dune offers an extensive standard library, and also provides a pretty interface to see all the functions available in each module!

<img src=""./assets/math.png"" width=""48%""/>

Dune offers the following builtin libraries:

|Name|Description|
|-|-|
|`rand`|A library for randomness|
|`time`|A library with date and time functions|
|`math`|A module for math and trig functionality|
|`fs`|A module for interacting with the file system|
|`fn`|A functional programming library|
|`fmt`|A library for text formatting on the console (color, styling, hyperlinks, text wrapping, etc.)|
|`os`|A small module with the host's OS info|
|`widget`|A module for creating text widgets|
|`shell`|A small module for information about the Dune shell|
|`console`|A library for manipulating the console|

For more information about each, just run `echo library-name`.

## Installation

To install, you must download Rust from [here](https://www.rust-lang.org/).
_If you already have Rust installed **you will probably need to update**. Dune uses a lot of recently stabilized features._

#### Development Build

```bash
# Install directly from git with cargo
cargo install --git https://github.com/adam-mcdaniel/dune

# Or, alternatively, the repo and install from source
git clone https://github.com/adam-mcdaniel/dune
cd dune
cargo install -f --path .
```

#### Releases
To get the current release build, install from [crates.io](https://crates.io/crates/dune).

```bash
# Also works for updating dune
cargo install -f dune
```
_Currently, since Dune is in its early stages of development, I would recommend against using releases at the moment. There are a lot of bug fixes and new features added inbetween releases._

#### After Install

```bash
# Just run the dune executable!
dunesh
```
"
2101,"✨ React patterns, techniques, tips and tricks ✨","# [React Bits](https://vasanthk.gitbooks.io/react-bits)

A compilation of React Patterns, techniques, tips and tricks.

**Gitbook format**: https://vasanthk.gitbooks.io/react-bits

**Github repo**: https://github.com/vasanthk/react-bits

> Your contributions are heartily ♡ welcome. (✿◠‿◠)

> **Translations by community:**
> - 中文版 (Chinese): [react-bits-cn](https://github.com/hateonion/react-bits-CN)
> - 한국어 (Korean): [react-bits-ko](https://github.com/rayleighko/react-bits-ko)


- Design Patterns and Techniques
  - [Conditional in JSX](./patterns/18.conditionals-in-jsx.md)
  - [Async Nature Of setState()](./patterns/19.async-nature-of-setState.md)
  - [Dependency Injection](./patterns/20.dependency-injection.md)
  - [Context Wrapper](./patterns/21.context-wrapper.md)
  - [Event Handlers](./patterns/22.event-handlers.md)
  - [Flux Pattern](./patterns/23.flux-pattern.md)
  - [One Way Data Flow](./patterns/24.one-way-data-flow.md)
  - [Presentational vs Container](./patterns/25.presentational-vs-container.md)
  - [Third Party Integration](./patterns/26.third-party-integration.md)
  - [Passing Function To setState()](./patterns/27.passing-function-to-setState.md)
  - [Decorators](./patterns/28.decorators.md)
  - [Feature Flags](./patterns/29.feature-flags-using-redux.md)
  - [Component Switch](./patterns/30.component-switch.md)
  - [Reaching Into A Component](./patterns/31.reaching-into-a-component.md)
  - [List Components](./patterns/32.list-components.md)
  - [Format Text via Component](./patterns/33.format-text-via-component.md)
  - [Share Tracking Logic](./patterns/34.share-tracking-logic.md)
- Anti-Patterns
  - [Introduction](./anti-patterns/README.md)
  - [Props In Initial State](./anti-patterns/01.props-in-initial-state.md)
  - [findDOMNode()](./anti-patterns/02.findDOMNode.md)
  - [Mixins](./anti-patterns/03.mixins.md)
  - [setState() in componentWillMount()](./anti-patterns/04.setState-in-componentWillMount.md)
  - [Mutating State](./anti-patterns/05.mutating-state.md)
  - [Using Indexes as Key](./anti-patterns/06.using-indexes-as-key.md)
  - [Spreading Props on DOM elements](./anti-patterns/07.spreading-props-dom.md)
- Handling UX Variations
  - [Introduction](./ux-variations/README.md)
  - [Composing UX Variations](./ux-variations/01.composing-variations.md)
  - [Toggle UI Elements](./ux-variations/02.toggle-ui-elements.md)
  - [HOC for Feature Toggles](./ux-variations/03.HOC-feature-toggles.md)
  - [HOC props proxy](./ux-variations/04.HOC-props-proxy.md)
  - [Wrapper Components](./ux-variations/05.wrapper-components.md)
  - [Display Order Variations](./ux-variations/06.display-order-variations.md)
- Perf Tips
  - [Introduction](./perf-tips/README.md)
  - [shouldComponentUpdate() check](./perf-tips/01.shouldComponentUpdate-check.md)
  - [Using Pure Components](./perf-tips/02.pure-component.md)
  - [Using reselect](./perf-tips/03.reselect.md)
- Styling
  - [Introduction](./styling/README.md)
  - [Stateless UI Components](./styling/01.stateless-ui-components.md)
  - [Styles Module](./styling/02.styles-module.md)
  - [Style Functions](./styling/03.style-functions.md)
  - [NPM Modules](./styling/04.using-npm-modules.md)
  - [Base Component](./styling/05.base-component.md)
  - [Layout Component](./styling/06.layout-component.md)
  - [Typography Component](./styling/07.typography-component.md)
  - [HOC for Styling](./styling/08.HOC-for-styling.md)
- Gotchas
  - [Introduction](./gotchas/README.md)
  - [Pure render checks](./gotchas/01.pure-render-checks.md)
  - [Synthetic Events](./gotchas/02.synthetic-events.md)
- [Related Links](./READINGS.md)
"
3212,"General statistics, mathematical programming, and numerical/scientific computing scripts and notebooks in Python","# Statistics/ Mathematical Computing Notebooks
Jupyter Notebooks on the topics of statistical analysis, mathematics, and numerical/sceintific computing (in Python).

### Please feel free to [connect with me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) if you are interested in data science and like to connect.

----

### Requirements
* **Python 3.6+**
* **NumPy (`$ pip install numpy`)**
* **Pandas (`$ pip install pandas`)**
* **Scikit-learn (`$ pip install scikit-learn`)**
* **SciPy (`$ pip install scipy`)**
* **Statsmodels (`$ pip install statsmodels`)**
* **MatplotLib (`$ pip install matplotlib`)**
* **Seaborn (`$ pip install seaborn`)**

---
### [Set Algebra basics](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Set_Algebra_with_Python.ipynb)
![set](http://www.efgh.com/math/algebra/venn.gif)
### [Permutations and Combinations](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Permutations_and_Combinations.ipynb)
![permutation and combination](http://slideplayer.com/slide/6113299/18/images/1/Permutation+and+Combination.jpg)
### [Probability distributions (Discrete)](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Prob_Distributions_Discrete.ipynb)
![binom](https://www.maplesoft.com/support/help/content/1898/image50.png)
### [Linear Regression Methods](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Linear_Regression_Methods.ipynb)
![lm](http://rasbt.github.io/mlxtend/user_guide/regressor/LinearRegression_files/simple_regression.png)
### [_R-style_ Statistical functions written using Python](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/R-style%20Functions.ipynb)
![rstyle](https://cdn-images-1.medium.com/max/1200/1*FqR5zGQYic_pNRyakzj_Cw.png)
### [Diagnostics of a linear regression problem](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Regression_Diagnostics.ipynb)

### [Introduction to hypothesis testing](https://github.com/tirthajyoti/Stats-Maths-with-Python/blob/master/Intro_Hypothesis_Testing.ipynb)

## Articles
Check out this article I wrote on Medium: ___[Essential Math for Data Science.](https://towardsdatascience.com/essential-math-for-data-science-why-and-how-e88271367fbd)___

Check out this article I wrote on Medium about ___[""How to write your favorite R functions — in Python?""](https://towardsdatascience.com/how-to-write-your-favorite-r-functions-in-python-11e1e9c29089)___

Check out this article I wrote on Medium about ___[""Mathematical programming — a key habit to build up for advancing in data science?""](https://towardsdatascience.com/mathematical-programming-a-key-habit-to-built-up-for-advancing-in-data-science-c6d5c29533be)___

Check out this article I wrote on Medium about ___[""Bayes’ rule with a simple and practical example""](https://towardsdatascience.com/bayes-rule-with-a-simple-and-practical-example-2bce3d0f4ad0)___

Check out this article I wrote on Medium about ___[""Statistical modeling with “Pomegranate” — fast and intuitive""](https://towardsdatascience.com/statistical-modeling-with-pomegranate-fast-and-intuitive-4d605d9c33a9)___
"
2930,A TensorFlow & Deep Learning online course I taught in 2016,"# TensorFlow and DeepLearning Tutorial

This is a collection of my deep learning tutorials.

这是我的深度学习教程集合。

Season 1 is introduction to TensorFlow, fully connected neural networks and convolutional neural networks.

Season 2 is about Natural Language Processing, sort of.
"
1333,The adaptive interface system for modern web experiences.,"
![fast_banner_github_914.png](https://static.fast.design/assets/fast_banner_github_914.png)

# FAST

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![lerna](https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg)](https://lerna.js.org/)
[![TypeScript](https://img.shields.io/badge/%3C%2F%3E-TypeScript-%230074c1.svg)](https://www.typescriptlang.org/)
[![code style: prettier](https://img.shields.io/badge/code_style-prettier-f8bc45.svg)](https://github.com/prettier/prettier)

[![Maintainability](https://api.codeclimate.com/v1/badges/8a74621e634a6e9b9561/maintainability)](https://codeclimate.com/github/Microsoft/fast/maintainability)
[![Test Coverage](https://api.codeclimate.com/v1/badges/8a74621e634a6e9b9561/test_coverage)](https://codeclimate.com/github/Microsoft/fast/test_coverage)
[![Validate PRs](https://github.com/microsoft/fast/actions/workflows/ci-validate-pr.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/ci-validate-pr.yml)
[![Validate Platforms/Browsers](https://github.com/microsoft/fast/actions/workflows/ci-validate-platforms.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/ci-validate-platforms.yml)

[![Deploy Documentation](https://github.com/microsoft/fast/actions/workflows/cd-deploy-www-production.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/cd-deploy-www-production.yml)
[![Deploy CDN](https://github.com/microsoft/fast/actions/workflows/cd-deploy-cdn.yml/badge.svg)](https://github.com/microsoft/fast/actions/workflows/cd-deploy-cdn.yml)

[![Discord](https://img.shields.io/badge/chat%20on-discord-7289da.svg)](https://discord.gg/FcSNfg4)
[![Twitter](https://img.shields.io/twitter/follow/fast_ui.svg?style=social&label=Follow)](https://twitter.com/intent/follow?screen_name=fast_ui)

This is the FAST monorepo, containing web component packages, tools, examples, and documentation. FAST tech can be used à la carte or as a suite to build enterprise-grade websites, applications, components, design systems, and more.

:star: We appreciate your star, it helps!

## Introduction

FAST is a collection of technologies built on Web Components and modern Web Standards, designed to help you efficiently tackle some of the most common challenges in website and application design and development.

**TL;DR**

* Create reusable UI components with `@microsoft/fast-element`, all based on W3C Web Component standards.
* Use our `@microsoft/fast-foundation` library to rapidly build [W3C OpenUI-based](https://open-ui.org/) design systems without re-implementing component logic.
* Leverage modern, W3C standards-based SSR for Web Components by plugging in `@microsoft/fast-ssr`.
* Bring all the pieces together to build SPAs and rich experiences with our Web Components router by installing `@microsoft/fast-router`.
* React users can drop in `@microsoft/fast-react-wrapper` to turn any Web Component into a native React component.
* Integrate FAST Web Components with any library, framework, or build system. You can adopt incrementally without re-writing your existing systems.

For an in-depth explanation of FAST [see our docs introduction](https://www.fast.design/docs/introduction/).

## Packages

### `@microsoft/fast-element`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-element.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-element)

The `@microsoft/fast-element` library is a lightweight means to easily build performant, memory-efficient, standards-compliant Web Components. FAST Elements work in every major browser and can be used in combination with any front-end framework or even without a framework. To get up and running with `@microsoft/fast-element` see [the Getting Started guide](https://fast.design/docs/fast-element/getting-started).

### `@microsoft/fast-foundation`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-foundation.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-foundation)

The `@microsoft/fast-foundation` package is a library of Web Component classes, templates, and other utilities intended to be composed into registered Web Components by design systems (e.g. Fluent Design, Material Design, etc.). The exports of this package can generally be thought of as un-styled base components that implement semantic and accessible markup and behavior.

This package does not export Web Components registered as [custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) - it exports parts and pieces intended to be *composed* into Web Components, allowing you to implement your own design language by simply applying CSS styles and behaviors without having to write all the JavaScript that's involved in building production-quality component implementations.

### `@microsoft/fast-ssr`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-ssr.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-ssr)

The `@microsoft/fast-ssr` package contains a NodeJS solution for rendering FAST templates and components. While primarily intended for supporting server-side rendering (SSR) scenarios, it also allows FAST to be used as a general purpose HTML templating solution.

### `@microsoft/fast-router`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40microsoft%2Ffast-router.svg)](https://badge.fury.io/js/%40microsoft%2Ffast-router)

The `@microsoft/fast-router` package contains a history-based navigation and routing solution designed around Web Components. By using `fast-router`, you can create multi-page and full application experiences. The router works with any Web Components, but has special support for Web Components built on FAST.

### `@fluentui/web-components`

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![npm version](https://badge.fury.io/js/%40fluentui%2Fweb-components.svg)](https://badge.fury.io/js/%40fluentui%2Fweb-components)

`@fluentui/web-components` is a library of Web Components that *composes* `@microsoft/fast-foundation`. `@fluentui/web-components` makes use of different stylesheets and may include components that specifically support Microsoft's Fluent design language.

The Fluent UI Web Components are built on `@microsoft/fast-element` and `@microsoft/fast-foundation`. The source for `@fluentui/web-components` is hosted in [the Fluent UI monorepo](https://github.com/microsoft/fluentui/tree/master/packages/web-components).

## Getting Started

We hope you're excited by the possibilities that FAST presents. But, you may be wondering where to start. Here are a few statements that describe various members of our community. We recommend that you pick the statement you most identify with and follow the links where they lead. You can always come back and explore another topic at any time.

* ""I just want ready-made components!""
  * [Check out the FluentUI Web Components.](https://docs.microsoft.com/en-us/fluent-ui/web-components/)
* ""I want to build my own design system.""
  * [Jump to the design system docs.](https://fast.design/docs/design-systems/overview)
* ""I want to build my own components.""
  * [Jump to the fast-element docs.](https://fast.design/docs/fast-element/getting-started)
* ""I need to integrate FAST with another framework or build system.""
  * [Jump to the integration docs.](https://fast.design/docs/integrations/introduction)
* ""I want to look at a quick reference.""
  * [Jump to the Cheat Sheet](https://fast.design/docs/resources/cheat-sheet)

## Joining the Community

Looking to get answers to questions or engage with us in realtime? Our community is most active [on Discord](https://discord.gg/FcSNfg4). Submit requests and issues on [GitHub](https://github.com/Microsoft/fast/issues/new/choose), or join us by contributing on [some good first issues via GitHub](https://github.com/Microsoft/fast/labels/community:good-first-issue).

Get started here with the [Contributor Guide](https://www.fast.design/docs/community/contributor-guide).

We look forward to building an amazing open source community with you!

## Features & benefits

### Unopinionated

There are a million and one great ways to build your next website or application. To support the technologies you choose, creating unopinionated code is at the center of every decision we make in FAST.

This principle of being unopinionated manifests in several important ways including:

* A flat component architecture that lets you compose what you need without struggling with rigid patterns and complex objects.
* Separating base components from styles and design systems to support multiple implementations without re-writing or duplicating styles. Use the design system to customize existing styled components, or build your own styles, with your design system, without having to rebuild or duplicate the base components.
* Framework agnostic tooling that lets you use our development tools with any view framework.
* The ability to replace almost any FAST package with your package of choice. Just use one package or leverage our entire suite of packages to build your next project from the ground up; it's your call.

### Tooling

Leverage our (upcoming!) FAST CLI to accelerate your design or development workflow. You can create new projects from scratch, create design systems, and add or customize from dozens of components in our foundation library.

### Bring your design system

Widely available design systems from companies like Microsoft (Fluent), Google (Material), or Salesforce (Lightning) are useful when it is essential to align with a platform or take advantage of a polished system at low cost, but many companies have a design system of their own, and some may have multiple design systems or variations.

Because FAST has abstracted base components from their style, you get a head start on your design system by building on top of tried and true base components and style libraries like our offerings for color, animation, and elevation.

## Contact

* Join the community and chat with us in real-time on [Discord](https://discord.gg/FcSNfg4).
* Submit requests and issues on [GitHub](https://github.com/Microsoft/fast/issues/new/choose).
* Contribute by helping out on some of our recommended first issues on [GitHub](https://github.com/Microsoft/fast/labels/community:good-first-issue).
"
2114,A list of resources in different fields of Computer Science,"<h1 align=""center"">Computer Science Resources</h1>

<h1 align=""center"">
    <img alt=""CS"" title=""Computer-Science-Resources"" src=""https://raw.githubusercontent.com/the-akira/Computer-Science-Resources/master/avatar.png""> </br>
</h1>

<p align=""center"">
	A list of resources in different fields of <b>Computer Science</b> (in multiple languages).
</p>

## Content

- Getting Started
  - [Map of Computer Science](https://www.youtube.com/watch?v=SzJ46YA_RaA)
  - [Map of Mathematics](https://www.youtube.com/watch?v=OmJ-4B-mS-Y)
  - [Map of Physics](https://www.youtube.com/watch?v=ZihywtixUYo&t)
  - [MIT Courses](https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/)
  - [MIT 6.00 Intro to Computer Science & Programming](https://www.youtube.com/watch?v=k6U-i4gXkLM&list=PL4C4720A6F225E074)
  - [MIT 6.0001 Introduction to Computer Science & Programming in Python](https://www.youtube.com/playlist?list=PLUl4u3cNGP63WbdFxL8giv4yhgdMGaZNA)
  - [MIT 6.0002 Introduction to Computational Thinking and Data Science](https://www.youtube.com/playlist?list=PLUl4u3cNGP619EG1wp0kT-7rDE_Az5TNd)
  - [CS50 Harvard](https://www.youtube.com/watch?v=y62zj9ozPOM&list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu)
  - [Audio/Video Courses from Colleges and Universities](http://www.infocobuild.com/education/audio-video-courses/)
  - [Everything Computer Science](https://everythingcomputerscience.com/)
- Computer Fundamentals
  - [Algorithms & Data Structures](https://github.com/the-akira/Computer-Science-Resources/blob/master/db/algorithms_data_structures.md)
  - [Computer Architecture](https://github.com/the-akira/computer_science_web_resources/blob/master/db/computer_architecture.md)
  - [Operating Systems](https://github.com/the-akira/computer_science_web_resources/blob/master/db/operating_systems.md)
  - [Mathematics](https://github.com/the-akira/computer_science_web_resources/blob/master/db/mathematics.md)
  - [Regular Expressions](https://github.com/the-akira/computer_science_web_resources/blob/master/db/regular_expressions.md)
  - [Physics](https://github.com/the-akira/computer_science_web_resources/blob/master/db/physics.md)
  - [Signals and Systems](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/signals_systems.md)
  - [Information Theory](https://github.com/the-akira/Computer-Science-Resources/blob/master/db/information_theory.md)
  - [Cloud Computing](https://github.com/the-akira/computer_science_web_resources/blob/master/db/cloud_computing.md)
  - [Quantum Computing](https://github.com/the-akira/computer_science_web_resources/blob/master/db/quantum_computing.md)
  - [Computer Networks](https://github.com/the-akira/computer_science_web_resources/blob/master/db/computer_networks.md)
  - [Computer Graphics](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/computer_graphics.md)
  - [Virtual Reality](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/virtual_reality.md)
- Programming Languages
  - [Assembly](https://github.com/the-akira/computer_science_web_resources/blob/master/db/assembly.md)
  - [C](https://github.com/the-akira/computer_science_web_resources/blob/master/db/c.md)
  - [C++](https://github.com/the-akira/computer_science_web_resources/blob/master/db/cpp.md)
  - [Python](https://github.com/the-akira/computer_science_web_resources/blob/master/db/python.md)
  - [Java](https://github.com/the-akira/computer_science_web_resources/blob/master/db/java.md)
  - [Javascript](https://github.com/the-akira/computer_science_web_resources/blob/master/db/javascript.md)
  - [Ruby](https://github.com/the-akira/computer_science_web_resources/blob/master/db/ruby.md)
  - [Bash](https://github.com/the-akira/computer_science_web_resources/blob/master/db/bash.md)
  - [Go](https://github.com/the-akira/computer_science_web_resources/blob/master/db/go.md)
  - [PHP](https://github.com/the-akira/computer_science_web_resources/blob/master/db/php.md)
  - [Haskell](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/haskell.md)
  - [R](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/r.md)
  - [Julia](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/julia.md)
  - [Elixir](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/elixir.md)
- Artificial Intelligence
  - [Machine Learning](https://github.com/the-akira/computer_science_web_resources/blob/master/db/machine_learning.md)
  - [Artificial Neural Networks](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/artificial_neural_network.md)
  - [Natural Language Processing](https://github.com/the-akira/computer_science_web_resources/blob/master/db/natural_language_processing.md)
  - [Computer Vision](https://github.com/the-akira/Computer_Science_Web_Resources/blob/master/db/computer_vision.md)
  - [Cybernetics & Robotics](https://github.com/the-akira/computer_science_web_resources/blob/master/db/cybernetics_and_robotics.md)
- Information Security
  - [Computer Security](https://github.com/the-akira/computer_science_web_resources/blob/master/db/cyber_security.md)
  - [Web Hacking](https://github.com/the-akira/computer_science_web_resources/blob/master/db/web_hacking.md)
  - [Exploits](https://github.com/the-akira/computer_science_web_resources/blob/master/db/exploits.md) 
  - [Reverse Engineering](https://github.com/the-akira/computer_science_web_resources/blob/master/db/reverse_engineering.md)
  - [Social Engineering](https://github.com/the-akira/computer_science_web_resources/blob/master/db/social_engineering.md)
  - [Cryptography](https://github.com/the-akira/computer_science_web_resources/blob/master/db/cryptography.md)
- Databases
  - [SQL](https://github.com/the-akira/computer_science_web_resources/blob/master/db/sql.md)
  - [NOSQL](https://github.com/the-akira/computer_science_web_resources/blob/master/db/nosql.md)
  - [Big Data](https://github.com/the-akira/computer_science_web_resources/blob/master/db/big_data.md)
  - [Data Mining](https://github.com/the-akira/computer_science_web_resources/blob/master/db/data_mining.md)"
2919,This is Andrew NG Coursera Handwritten Notes.,"# Andrew NG Notes Collection

**This is the first course of the deep learning specialization at [Coursera](https://www.coursera.org/specializations/deep-learning) which is moderated by [DeepLearning.ai](http://deeplearning.ai/). The course is taught by Andrew Ng.**

**<Span style=""color:red;"">Andrew NG Machine Learning Notebooks  :</span>**  [**Reading**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Machine%20Learning%20notebooks%20By%20Andrew%20NG)   

**<Span style=""color:red;"">Deep learning Specialization Notes in One pdf :</span>**  [**Reading**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20learning%20by%20AndrewNG%20Tutorial%20%20Notes.pdf)

| **Sr No** | **Article Reading**                                          |
| --------- | :----------------------------------------------------------- |
| **1.**    | **[Neural Network Deep Learning](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md)** |
| **2.**    | **[Improving Deep learning Network](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md)** |
| **3.**    | **[Structure of ML Projects](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md)** |
| **4.**    | **[Convolutions Neural Network](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md)** |
| **5.**    | **[Sequence Models](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md)** |

| Sr. No | MOOC LECTURE LINK                                            |
| ------ | ------------------------------------------------------------ |
| 1.     | [**Machine learning by Andrew-NG**](https://www.youtube.com/playlist?list=PLLssT5z_DsK-h9vYZkQkYNWcItqhlRJLN) |
|        | **DEEP LEARNING SERIES**                                     |
| 1.     | [**Neural Network and Deep Learning**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Ec-XTbcX1uRg2_u4xOEky0) |
| 2.     | [**Improving deep neural networks: hyperparameter tuning, regularization and optimization**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Hn0vK8co82zjQtt3T2Nkqc) |
| 3.     | [**Structuring Machine Learning Projects**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6E7jZ9sN_xHwSHOdjUxUW_b) |
| 4.     | [**Convolution Neural Network**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF) |
| 5.     | [**Sequence Models**](https://www.youtube.com/playlist?list=PLkDaE6sCZn6F6wUI9tvS_Gw1vaFAx6rd6) |
| 6.     | [**CS230: Deep Learning \| Autumn 2018**](https://www.youtube.com/playlist?list=PLoROMvodv4rOABXSygHTsbvUz4G_YQhOb ) |

## [**1.Neural Network Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md)   

## ![](https://systweak1.vo.llnwd.net/content/wp/systweakblogsnew/uploads_new/2018/03/hidden-layers-in-network.gif)

* **This Notes Give you brief introduction about :** 
  * [**What is neural network? How it's work?**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#what-is-a-neural-network-nn)
  * [**Supervised Learning using Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#neural-networks-basics)
  * [**Shallow Neural Network Design**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#shallow-neural-networks)
  * [**Deep Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-1-neural-network-deep-learning.md#deep-neural-networks)
*  **Notebooks** :
  * Week1 - [**Introduction to deep learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week1)
  * Week2 - [**Neural Networks Basics**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Logistic%20Regression%20with%20a%20Neural%20Network%20mindset.ipynb)
  * Week3 - [**Shallow neural networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Logistic%20Regression%20with%20a%20Neural%20Network%20mindset.ipynb)
  * Week4 - [**Deep Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Neural%20Networks%20and%20Deep%20Learning/Building%20your%20Deep%20Neural%20Network%20-%20Step%20by%20Step.ipynb) 

## [**2 Improving Deep learning Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md)

## ![](https://i.pinimg.com/originals/63/62/8f/63628f546ad55fd31091e23c623cb9f5.gif)



* **This Notes Give you introduction about :** 
  * [**Practical aspects of Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#practical-aspects-of-deep-learning)
  * [**Optimization algorithms**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#optimization-algorithms)
  * [**Hyperparameter tuning, Batch Normalization and Programming Frameworks**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-2-improving-deep-learning-network.md#hyperparameter-tuning-batch-normalization-and-programming-frameworks)
* **Notebooks**:
  * Week1 - [**Practical aspects of Deep Learning**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization)
       - Setting up your Machine Learning Application
    - Regularizing your neural network
    - Setting up your optimization problem
  * Week2 - [**Optimization algorithms**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization/Optimization%20methods.ipynb)
  * Week3 - [**Hyperparameter tuning, Batch Normalization and Programming Frameworks**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Improving%20Deep%20Neural%20Networks%20Hyperparameter%20tuning%2C%20Regularization%20and%20Optimization)

## [**3.Structure ML Projects**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md)

![](https://i.pinimg.com/originals/9b/fa/97/9bfa978a4cf40fe2cdf8c710deb9b6f9.png)



* **In This Notes, you can learn about How to Structure Machine Learning Project:**
  * [**Why ML Structure?**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md#ml-strategy-1)
  * [**Error Analysis**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-3-structuring-ml-projects.md#ml-strategy-2)
* **Notebooks:**
  * Week1 - [**Introduction to ML Strategy**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Structuring%20Machine%20Learning%20Projects/Week%201%20Quiz%20-%20Bird%20recognition%20in%20the%20city%20of%20Peacetopia%20(case%20study).md)
       - Setting up your goal
    - Comparing to human-level performance
  * Week2 - [**ML Strategy (2)**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Structuring%20Machine%20Learning%20Projects/Week%202%20Quiz%20-%20Autonomous%20driving%20(case%20study).md)
       - Error Analysis
    - Mismatched training and dev/test set
    - Learning from multiple tasks
    - End-to-end deep learning

## [**4.Convolution Neural Network**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md)

* **Matrix Multiplication Between Image and Kernel Known as *Convolution Operation***

![](https://i.stack.imgur.com/9OZKF.gif)



![](https://cdn-images-1.medium.com/max/600/1*GdxHFaUDbvTXJreKg3S8SQ.gif)







![](https://www.guru99.com/images/tensorflow/082918_1325_ConvNetConv9.gif)



* **In This Notes, you can learn about Brief architecture CNN:**
  * [**Foundations of CNNs**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#foundations-of-cnns)
  * [**Deep convolutional models: case studies**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#deep-convolutional-models-case-studies)
  * [**Object detection**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#object-detection)
  * [**Special applications: Face recognition & Neural style transfer**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-4-convolutional-neural-network.md#special-applications-face-recognition--neural-style-transfer)
*  **Notebooks :** 
  * Week1 - [**Foundations of Convolutional Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week1/Convolution%20model%20-%20Step%20by%20Step.ipynb)
  * Week2 - [**Deep convolutional models: case studies**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week2/ResNets/Residual%20Networks.ipynb) 
    - **Papers for read:**  
      - [**ImageNet Classification with Deep Convolutional Neural Networks**](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)
      - [**Very Deep Convolutional Networks For Large-Scale Image Recognition**](https://arxiv.org/pdf/1409.1556.pdf)
  * Week3 - [**Object detection**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week3/Car%20detection%20for%20Autonomous%20Driving/Autonomous%20driving%20application%20-%20Car%20detection.ipynb) 
    - **Papers for read:** 
      - [**You Only Look Once: Unified, Real-Time Object Detection**](https://arxiv.org/pdf/1506.02640.pdf)
      - [**YOLO**](https://arxiv.org/pdf/1612.08242.pdf)
  * Week4 - [**Special applications: Face recognition & Neural style transfer**](https://github.com/ashishpatel26/Andrew-NG-Notes/tree/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4) 
    - **Papers for read:** 
      - [**DeepFace**](https://www.cs.toronto.edu/~ranzato/publications/taigman_cvpr14.pdf) ([**Notebook**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4/Face%20Recognition/Face%20Recognition%20for%20the%20Happy%20House.ipynb))
      - [**FaceNet**](https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf)
      - [**Neural Style Transfer**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Convolutional%20Neural%20Networks/Week4/Neural%20Style%20Transfer/Art%20Generation%20with%20Neural%20Style%20Transfer.ipynb)

## [**5.Sequence Models**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md)

![](https://3.bp.blogspot.com/-3Pbj_dvt0Vo/V-qe-Nl6P5I/AAAAAAAABQc/z0_6WtVWtvARtMk0i9_AtLeyyGyV6AI4wCLcB/s1600/nmt-model-fast.gif)

---

* **Vanila RNN**

  ![](https://cdn-images-1.medium.com/max/880/1*xn5kA92_J5KLaKcP7BMRLA.gif)

* **LSTM**

![](https://cdn-images-1.medium.com/max/880/1*goJVQs-p9kgLODFNyhl9zA.gif)

* **GRU**

![](https://cdn-images-1.medium.com/max/880/1*FpRS0C3EHQnELVaWRvb8bg.gif)

* **In This Section, you can learn about Sequence to Sequence Learning**

  * [**Recurrent Neural Networks**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#recurrent-neural-networks)
  * [**Natural Language Processing & Word Embeddings**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#natural-language-processing--word-embeddings)
  * [**Sequence models & Attention mechanism**](https://github.com/ashishpatel26/Andrew-NG-Notes/blob/master/andrewng-p-5-sequence-models.md#sequence-models--attention-mechanism)

* **Notebooks:**

  * Week1 - [**Recurrent Neural Networks**](https://nbviewer.jupyter.org/github/ashishpatel26/Andrew-NG-Notes/blob/master/Deep%20Learning%20Notebooks%20by%20Andrew%20NG/Sequence%20Models/Week1/Building%20a%20Recurrent%20Neural%20Network%20-%20Step%20by%20Step/Building%20a%20Recurrent%20Neural%20Network%20-%20Step%20by%20Step.ipynb)
  * Week2 - [**Natural Language Processing & Word Embeddings**](https://github.com/ashishpatel26/Deep-Learning-Coursera/tree/master/Sequence%20Models/Week2)
  * Week3 - [**Sequence models & Attention mechanism**](https://github.com/ashishpatel26/Deep-Learning-Coursera/tree/master/Sequence%20Models/Week3)

  

**Thanks for Reading....Happy Learning...!!!**
"
3426,"An NLP library for building bots, with entity extraction, sentiment analysis, automatic language identify, and so more","![NLPjs logo](screenshots/nlplogo.gif)

# NLP.js

[![](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml/badge.svg?branch=master)](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml)
[![Coverage Status](https://coveralls.io/repos/github/axa-group/nlp.js/badge.svg?branch=master)](https://coveralls.io/github/axa-group/nlp.js?branch=master)
[![NPM version](https://img.shields.io/npm/v/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![NPM downloads](https://img.shields.io/npm/dm/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=alert_status)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=security_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)

*If you're looking for the version 3 docs, you can find them here* [Version 3](docs/v3/README.md)

""NLP.js"" is a general natural language utility for nodejs. Currently supporting:

- Guess the language of a phrase
- Fast _Levenshtein_ distance of two strings
- Search the best substring of a string with less _Levenshtein_ distance to a given pattern.
- Get stemmers and tokenizers for several languages.
- Sentiment Analysis for phrases (with negation support).
- Named Entity Recognition and management, multi-language support, and acceptance of similar strings, so the introduced text does not need to be exact.
- Natural Language Processing Classifier, to classify an utterance into intents.
- NLP Manager: a tool able to manage several languages, the Named Entities for each language, the utterances, and intents for the training of the classifier, and for a given utterance return the entity extraction, the intent classification and the sentiment analysis. Also, it is able to maintain a Natural Language Generation Manager for the answers.
- 40 languages natively supported, 104 languages supported with BERT integration
- Any other language is supported through tokenization, even fantasy languages

![Hybrid bot](screenshots/hybridbot.gif)

## New in version 4`!`

Version 4 is very different from previous versions. Before this version, NLP.js was a monolithic library. The big changes:

- Now the library is split into small independent packages.
- So every language has its own package
- It provides a plugin system, so you can provide your own plugins or replace the existing ones.
- It provides a container system for the plugins, settings for the plugins and also pipelines
- A pipeline is code defining how the plugins interact. Usually it is linear: there is an input into the plugin, and this generates the input for the next one. As an example, the preparation of a utterance (the process to convert the utterance to a hashmap of stemmed features) is now a pipeline like this: `normalize -> tokenize -> removeStopwords -> stem -> arrToObj`
- There is a simple compiler for the pipelines, but they can also be built using a modified version of javascript and python (compilers are also included as plugins, so other languages can be added as a plugin).
- NLP.js now includes connectors, a connector is understood to be something that has at least 2 methods: `hear` and `say`. Examples of connectors included: Console Connector, Microsoft Bot Framework Connector and a Direct Line Offline Connector (this one allows you to build a web chatbot using the Microsoft Webchat, but without having to deploy anything in Azure).
- Some plugins can be registered by language, so for different languages different plugins will be used. Also some plugins, like NLU, can be registered not only by language but also by domain (a functional set of intents that can be trained separately)
- As an example of per-language/domain plugins, a Microsoft LUIS NLU plugin is provided. You can configure your chatbot to use the NLU from NLP.js for some languages/domains, and LUIS for other languages/domains.
- Having plugins and pipelines makes it possible to write chatbots by only modifying the configuration and the pipelines file, without modifying the code.

### TABLE OF CONTENTS

<!--ts-->

- [Installation](#installation)
- [QuickStart](docs/v4/quickstart.md)
  - [Install the library](docs/v4/quickstart.md#install-the-library)
  - [Create the code](docs/v4/quickstart.md#create-the-code)
  - [Extracting the corpus into a file](docs/v4/quickstart.md#extracting-the-corpus-into-a-file)
  - [Extracting the configuration into a file](docs/v4/quickstart.md#extracting-the-configuration-into-a-file)
  - [Creating your first pipeline](docs/v4/quickstart.md#creating-your-first-pipeline)
  - [Console Connector](docs/v4/quickstart.md#adding-your-first-connector)
  - [Extending your bot with the pipeline](docs/v4/quickstart.md#extending-your-bot-with-the-pipeline)
  - [Adding multiple languages](docs/v4/quickstart.md#adding-multilanguage)
  - [Adding API and WebChat](docs/v4/quickstart.md#adding-api-and-webchat)
  - [Using Microsoft Bot Framework](docs/v4/quickstart.md#using-microsoft-bot-framework)
  - [Recognizing the bot name and the channel](docs/v4/quickstart.md#recognizing-the-bot-name-and-the-channel)
  - [One bot per connector](docs/v4/quickstart.md#one-bot-per-connector)
  - [Different port for Microsoft Bot Framework and Webchat](docs/v4/quickstart.md#different-port-for-microsoft-bot-framework-and-webchat)
  - [Adding logic to an intent](docs/v4/quickstart.md#adding-logic-to-an-intent)
  - [Mini FAQ](docs/v4/mini-faq.md)
- [Web and React Native](docs/v4/webandreact.md)
  - [Preparing to generate a bundle](docs/v4/webandreact.md#preparing-to-generate-a-bundle)
  - [Your first web NLP](docs/v4/webandreact.md#your-first-web-nlp)
  - [Creating a distributable version](docs/v4/webandreact.md#creating-a-distributable-version)
  - [Load corpus from URL](docs/v4/webandreact.md#load-corpus-from-url)
- [QnA](docs/v4/qna.md)
  - [Install the library and the qna plugin](docs/v4/qna.md#install-the-library-and-the-qna-plugin)
  - [Train and test a QnA file](docs/v4/qna.md#train-and-test-a-qna-file)
  - [Extracting the configuration into a file](docs/v4/qna.md#extracting-the-configuration-into-a-file)
  - [Exposing the bot with a Web and API](docs/v4/qna.md#exposing-the-bot-with-a-web-and-api)
- [NER Quickstart](docs/v4/ner-quickstart.md)
  - [Install the needed packages](docs/v4/ner-quickstart.md#install-the-needed-packages)
  - [Create the conf.json](docs/v4/ner-quickstart.md#create-the-confjson)
  - [Create the corpus.json](docs/v4/ner-quickstart.md#create-the-corpusjson)
  - [Create the heros.json](docs/v4/ner-quickstart.md#create-the-herosjson)
  - [Create the index.js](docs/v4/ner-quickstart.md#create-the-indexjs)
  - [Start the application](docs/v4/ner-quickstart.md#start-the-application)
  - [Stored context](docs/v4/ner-quickstart.md#stored-context)
- [NeuralNetwork](docs/v4/neural.md)
  - [Introduction](docs/v4/neural.md#introduction)
  - [Installing](docs/v4/neural.md#installing)
  - [Corpus Format](docs/v4/neural.md#corpus-format)
  - [Example of use](docs/v4/neural.md#example-of-use)
  - [Exporting trained model to JSON and importing](docs/v4/neural.md#exporting-trained-model-to-json-and-importing)
  - [Options](docs/v4/neural.md#options)
- [Logger](docs/v4/logger.md)
  - [Introduction](docs/v4/logger.md#introduction)
  - [Default logger in @nlpjs/core](docs/v4/logger.md#default-logger-in-nlpjscore)
  - [Default logger in @nlpjs/basic](docs/v4/logger.md#default-logger-in-nlpjsbasic)
  - [Adding your own logger to the container](docs/v4/logger.md#adding-your-own-logger-to-the-container)
- [@nlpjs/emoji](docs/v4/emoji.md)
  - [Introduction](docs/v4/emoji.md#introduction)
  - [Installing](docs/v4/emoji.md#installing)
  - [Example of use](docs/v4/emoji.md#example-of-use)
- [@nlpjs/console-connector](docs/v4/console-connector.md)
  - [Installation](docs/v4/console-connector.md#installation)
  - [Example of use inside NLP.js](docs/v4/console-connector.md#example-of-use-inside-nlpjs)
  - [Example of use of the package](docs/v4/console-connector.md#example-of-use-of-the-package)
  - [Example of use with @nlpjs/basic](docs/v4/console-connector.md#example-of-use-with-nlpjsbasic)
- [@nlpjs/similarity](docs/v4/similarity.md)
  - [Installation](docs/v4/similarity.md#installation)
  - [leven](docs/v4/similarity.md#leven)
  - [similarity](docs/v4/similarity.md#similarity)
  - [SpellCheck](docs/v4/similarity.md#spellcheck)
  - [SpellCheck trained with words trained from a text](docs/v4/similarity.md#spellcheck-trained-with-words-trained-from-a-text)
- [@nlpjs/nlu](docs/v4/nlu.md)
  - [Installation](docs/v4/nlu.md#installation)
  - [NluNeural](docs/v4/nlu.md#nluneural)
  - [DomainManager](docs/v4/nlu.md#domainmanager)
  - [NluManager](docs/v4/nlu.md#nlumanager)
- [React Native](#react-native)
- [Example of use](#example-of-use)
- [False Positives](#false-positives)
- [Log Training Progress](#log-training-progress)
- [Benchmarking](docs/v3/benchmarking.md)
- [Language Support](docs/v4/language-support.md)
  - [Supported languages](docs/v4/language-support.md#supported-languages)
  - [Sentiment Analysis](docs/v4/language-support.md#sentiment-analysis)
  - [Comparision with other NLP products](docs/v4/language-support.md#comparision-with-other-nlp-products)
  - [Example with several languages](docs/v4/language-support.md#example-with-several-languages)
- [Language Guesser](docs/v3/language-guesser.md)
- [Similar Search](docs/v3/similar-search.md)
- [NLU](docs/v3/nlu-manager.md)
  - [NLU Manager](docs/v3/nlu-manager.md)
  - [Brain NLU](docs/v3/brain-nlu.md)
  - [Bayes NLU](docs/v3/bayes-nlu.md)
  - [Binary Relevance NLU](docs/v3/binary-relevance-nlu.md)
  - [Logistic Regression NLU](docs/v3/logistic-regression-nlu.md)
- [NER Manager](docs/v4/ner-manager.md)
  - [Enum Named Entities](docs/v4/ner-manager.md#enum-entities)
  - [Regular Expression Named Entities](docs/v4/ner-manager.md#regex-entities)
  - [Trim Named Entities](docs/v4/ner-manager.md#trim-entities)
  - [Utterances with duplicated Entities](docs/v4/ner-manager.md#enum-entities)
- [Integration with Duckling](docs/v3/builtin-duckling.md)
  - [Language support](docs/v3/builtin-duckling.md#language-support)
  - [How to integrate with duckling](docs/v3/builtin-duckling.md#how-to-integrate-with-duckling)
  - [Email Extraction](docs/v3/builtin-duckling.md#email-extraction)
  - [Phone Number Extraction](docs/v3/builtin-duckling.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-duckling.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-duckling.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-duckling.md#ordinal-extraction)
  - [Dimension Extraction](docs/v3/builtin-duckling.md#dimension-extraction)
  - [Quantity Extraction](docs/v3/builtin-duckling.md#quantity-extraction)
  - [Amount of Money Extraction](docs/v3/builtin-duckling.md#amount-of-money-extraction)
  - [Date Extraction](docs/v3/builtin-duckling.md#date-extraction)
- [Builtin Entity Extraction](docs/v3/builtin-entity-extraction.md)
  - [Email Extraction](docs/v3/builtin-entity-extraction.md#email-extraction)
  - [IP Extraction](docs/v3/builtin-entity-extraction.md#ip-extraction)
  - [Hashtag Extraction](docs/v3/builtin-entity-extraction.md#hashtag-extraction)
  - [Phone Number Extraction](docs/v3/builtin-entity-extraction.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-entity-extraction.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-entity-extraction.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-entity-extraction.md#ordinal-extraction)
  - [Percentage Extraction](docs/v3/builtin-entity-extraction.md#percentage-extraction)
  - [Age Extraction](docs/v3/builtin-entity-extraction.md#age-extraction)
  - [Currency Extraction](docs/v3/builtin-entity-extraction.md#currency-extraction)
  - [Date Extraction](docs/v3/builtin-entity-extraction.md#date-extraction)
  - [Duration Extraction](docs/v3/builtin-entity-extraction.md#duration-extraction)
- [Sentiment Analysis](docs/v3/sentiment-analysis.md)
- [NLP Manager](docs/v4/nlp-manager.md)
  - [Load/Save](docs/v4/nlp-manager.md#loadsave)
  - [Import/Export](docs/v4/nlp-manager.md#importexport)
  - [Context](docs/v4/nlp-manager.md#context)
  - [Intent Logic (Actions, Pipelines)](docs/v4/nlp-intent-logics.md)
- [Slot Filling](docs/v4/slot-filling.md)
- [Loading from Excel](docs/v3/loading-from-excel.md)
- [Microsoft Bot Framework](docs/v3/microsoft-bot-framework.md)
  - [Introduction](docs/v3/microsoft-bot-framework.md#introduction)
  - [Example of use](docs/v3/microsoft-bot-framework.md#example-of-use)
  - [Recognizer and Slot filling](docs/v3/microsoft-bot-framework.md#recognizer-and-slot-filling)
- Languages
  - [English](https://github.com/axa-group/nlp.js/blob/master/packages/lang-en/README.md)
  - [Indonesian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-id/README.md)
  - [Italian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-it/README.md)
  - [Spanish](https://github.com/axa-group/nlp.js/blob/master/packages/lang-es/README.md)
- [Contributing](#contributing)
- [Contributors](#contributors)
- [Code of Conduct](#code-of-conduct)
- [Who is behind it](#who-is-behind-it)
- [License](#license)
  <!--te-->

## Installation

If you're looking to use NLP.js in your Node application, you can install via NPM like so:

```bash
    npm install node-nlp
```

## React Native

There is a version of NLP.js that works in React Native, so you can build chatbots that can be trained and executed on the mobile even without the internet. You can install it via NPM:

```bash
    npm install node-nlp-rn
```

Some limitations:

- No Chinese
- The Japanese stemmer is not the complete one
- No Excel import
- No loading from a file, or saving to a file, but it can still import from JSON and export to JSON.

## Example of use

You can see a great example of use in the folder [`/examples/02-qna-classic`](https://github.com/axa-group/nlp.js/tree/master/examples/02-qna-classic). This example is able to train the bot and save the model to a file, so when the bot is started again, the model is loaded instead of being trained again.

You can start to build your NLP from scratch with a few lines:

```javascript
const { NlpManager } = require('node-nlp');

const manager = new NlpManager({ languages: ['en'], forceNER: true });
// Adds the utterances and intents for the NLP
manager.addDocument('en', 'goodbye for now', 'greetings.bye');
manager.addDocument('en', 'bye bye take care', 'greetings.bye');
manager.addDocument('en', 'okay see you later', 'greetings.bye');
manager.addDocument('en', 'bye for now', 'greetings.bye');
manager.addDocument('en', 'i must go', 'greetings.bye');
manager.addDocument('en', 'hello', 'greetings.hello');
manager.addDocument('en', 'hi', 'greetings.hello');
manager.addDocument('en', 'howdy', 'greetings.hello');

// Train also the NLG
manager.addAnswer('en', 'greetings.bye', 'Till next time');
manager.addAnswer('en', 'greetings.bye', 'see you soon!');
manager.addAnswer('en', 'greetings.hello', 'Hey there!');
manager.addAnswer('en', 'greetings.hello', 'Greetings!');

// Train and save the model.
(async() => {
    await manager.train();
    manager.save();
    const response = await manager.process('en', 'I should go now');
    console.log(response);
})();
```

This produces the following result in a console:

```bash
{ utterance: 'I should go now',
  locale: 'en',
  languageGuessed: false,
  localeIso2: 'en',
  language: 'English',
  domain: 'default',
  classifications:
   [ { label: 'greetings.bye', value: 0.698219120207268 },
     { label: 'None', value: 0.30178087979273216 },
     { label: 'greetings.hello', value: 0 } ],
  intent: 'greetings.bye',
  score: 0.698219120207268,
  entities:
   [ { start: 12,
       end: 14,
       len: 3,
       accuracy: 0.95,
       sourceText: 'now',
       utteranceText: 'now',
       entity: 'datetime',
       resolution: [Object] } ],
  sentiment:
   { score: 1,
     comparative: 0.25,
     vote: 'positive',
     numWords: 4,
     numHits: 2,
     type: 'senticon',
     language: 'en' },
  actions: [],
  srcAnswer: 'Till next time',
  answer: 'Till next time' }
```

## False Positives

By default, the neural network tries to avoid false positives. To achieve that, one of the internal processes is that words never seen by the network are represented as a feature that gives some weight to the `None` intent. So, if you try the previous example with ""_I have to go_"" it will return the `None` intent because 2 of the 4 words have never been seen while training.
If you don't want to avoid those false positives, and you feel more comfortable with classifications into the intents that you declare, then you can disable this behavior by setting the `useNoneFeature` to false:

```javascript
const manager = new NlpManager({ languages: ['en'], nlu: { useNoneFeature: false } });
```

## Log Training Progress

You can also add a log progress, so you can trace what is happening during the training.
You can log the progress to the console:

```javascript
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: true } });
```

Or you can provide your own log function:

```javascript
const logfn = (status, time) => console.log(status, time);
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: logfn } });
```

## Contributing

You can read the guide for how to contribute at [Contributing](CONTRIBUTING.md).

## Contributors

[![Contributors](https://contributors-img.firebaseapp.com/image?repo=axa-group/nlp.js)](https://github.com/axa-group/nlp.js/graphs/contributors)

Made with [contributors-img](https://contributors-img.firebaseapp.com).

## Code of Conduct

You can read the Code of Conduct at [Code of Conduct](CODE_OF_CONDUCT.md).

## Who is behind it`?`

This project is developed by AXA Group Operations Spain S.A.

If you need to contact us, you can do it at the email opensource@axa.com

## License

Copyright (c) AXA Group Operations Spain S.A.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
""Software""), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
1222,REST API Client Library,"
# Purest

[![npm-version]][npm] [![test-ci-img]][test-ci-url] [![test-cov-img]][test-cov-url] [![snyk-vulnerabilities]][snyk]

> _REST API Client Library_

```js
var purest = require('purest')
var google = purest({provider: 'google'})

await google
  .query('youtube')
  .select('channels')
  .where({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

## Table of Contents

> _This is Purest **v4**, for older releases take a look at [v3] and [v2]_

- **[Introduction](#introduction)**
- **[Purest Options](#purest-options)**
- **[Request Options](#request-options)**
- **[Examples](#examples)**
- **[Article]**

---

## Introduction

> _**Purest** is a tool for building **expressive** REST API clients_

### Default Endpoint

Here is a basic configuration for Google:

```json
{
  ""google"": {
    ""default"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""{path}"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    }
  }
}
```

The above configuration can be used to instantiate that provider:

```js
var google = purest({provider: 'google', config})
```

Then we can request some data from YouTube:

```js
var {res, body} = await google
  .get('youtube/v3/channels')
  .qs({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

### Explicit Endpoint

We can define explicit endpoint for accessing the YouTube API:

```json
{
  ""google"": {
    ""default"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""{path}"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    },
    ""youtube"": {
      ""origin"": ""https://www.googleapis.com"",
      ""path"": ""youtube/{version}/{path}"",
      ""version"": ""v3"",
      ""headers"": {
        ""authorization"": ""Bearer {auth}""
      }
    }
  }
}
```

And then request the same data:

```js
var {res, body} = await google('youtube')
  .get('channels')
  .qs({forUsername: 'GitHub'})
  .auth(token)
  .request()
```

### Defaults

Every method in Purest can also be preconfigured with a value:

```js
var google = purest({provider: 'google', config,
  defaults: {auth: token}
})
```

Then we no longer need to set the access token on each request:

```js
var {res, body} = await google('youtube')
  .get('channels')
  .qs({forUsername: 'GitHub'})
  .request()
```

### Method Aliases

Each method in Purest can have multiple aliases defined for it:

```js
var google = purest({provider: 'google', config,
  defaults: {auth: token},
  methods: {get: ['select'], qs: ['where']}
})
```

And then use it like this:

```js
var {res, body} = await google('youtube')
  .select('channels')
  .where({forUsername: 'GitHub'})
  .request()
```

---

## Purest Options

> _**Purest** is a flexible tool for **abstracting** out REST APIs_

```js
var google = purest({config: {}, provider: 'google', defaults: {}, methods: {}})
```

| Key            | Type | Description
| :-             | :-:  | :-
| **`provider`** | `''` | Provider name to initialize from the list of providers found in `config`
| **`config`**   | `{}` | Providers configuration to use
| **`defaults`** | `{}` | Any supported configuration option set by default, see below
| **`methods`**  | `{}` | List of methods and their aliases to use with this instance

---

## Request Options

> _**Purest** is built on top of a **[powerful HTTP Client][request-compose]**_

### URL Options

| Option      | Description
| :-          | :-
| `origin`    | The protocol and domain part of the URL, can contain `{subdomain}` token
| `path`      | The path part of the URL, can contain `{version}`, `{path}` and `{type}` tokens
| `subdomain` | Subdomain part of the URL to replace in `origin`
| `version`   | Version string to replace in `path`
| `type`      | Type string to replace in `path`, typically `json` or `xml`

### HTTP Methods

All HTTP methods `get` `head` `post` `put` `patch` `options` `delete` `trace` `connect` accept a string to replace the `{path}` configuration token with, or absolute URL to set the entire `url`.

### Request Options

| Option     | Type                  | Description
| :--        | :--                   | :--
| `method`   | `'string'` | Request method, implicitly set if one of the above HTTP Methods is used
| `url`      | `'string'` [`url object`][url-parse] | Absolute URL, automatically constructed if the URL Options above are being used, or absolute URL is passed to any of the HTTP Methods above
| `proxy`    | `'string'` [`url object`][url-parse] | Proxy URL; for HTTPS you have to use [tunneling][tunnel-agent] [agent][proxy-agent] instead
| `qs`       | `{object}` `'string'` | URL querystring
| `headers`  | `{object}` | Request headers
| `form`     | `{object}` `'string'` | `application/x-www-form-urlencoded` request body
| `json`     | `{object}` `'string'` | JSON encoded request body
| `multipart`| `{object}` `[array]`  | `multipart/form-data` as object or `multipart/related` as array request body using [request-multipart]
| `body`     | `'string'` [`Buffer`][buffer] [`Stream`][stream-readable] | Raw request body
| `auth`     | `'string'` `['string', 'string']` `{user, pass}`        | String or array of strings to replace the `{auth}` configuration token with, or Basic authorization as object
| `oauth`    | `{object}` | OAuth 1.0a authorization using [request-oauth]
| `encoding` | [`'string'`][buffer-encoding] | Response body encoding
| `redirect` | `{object}` | HTTP redirect [configuration][redirect-config]
| `timeout`  | `number` | Request timeout in milliseconds
| `agent`    | [`Agent`][agent] | HTTP agent

### Response Options

#### `request`

- buffers the response body
- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header
- converts the response body to string using `utf8` encoding by default
- tries to parse `JSON` and `querystring` encoded bodies with valid `content-type` header

Returns either String or Object.

#### `buffer`

- buffers the response body
- decompresses `gzip` and `deflate` encoded bodies with valid `content-encoding` header

Returns [Buffer][buffer].

#### `stream`

Returns the response [Stream][stream-incoming-message].

### Node Core Options

Any other HTTP request option not explicitly exposed in Purest can be set using any of the response methods:

```js
await google.request({socketPath: ''})
await google.buffer({socketPath: ''})
await google.stream({socketPath: ''})
```

### Endpoint

The explicit `endpoint` configuration can be accessed in various ways:

```js
// as argument to the Purest instance
await google('youtube')
// using the option name
await google.endpoint('youtube')
// or the default method alias defined for it
await google.query('youtube')
```

---

## Examples

> _**Purest** comes with a **[fancy logger][request-logs]**_

```bash
npm i --save-dev request-logs
```

```bash
DEBUG=req,res,body,json node examples/file-name.js 'example name'
```

| Category | Topic | Providers | Example
| :-       | :-    | :-        | :-
| **OAuth 2.0** | _Refresh Access Tokens_ | `box` `google` `twitch` | [Refresh access tokens][refresh-token]
| **OpenID Connect** | *Verify id_token* | `auth0` `google` `microsoft` | [Discover public keys and verify id_token signature][openid-connect]
| **OAuth 1.0a** | _OAuth 1.0a_ | `flickr` `trello` `twitter` | [Get user profile][oauth-1]
| **Storage** | _Multipart, Streams_ | `box` `dropbox` `drive` | [Upload files][file-stream]
| **Storage** | _HTTP Streams_ | `box` `dropbox` | [Stream file from DropBox to Box][http-stream]

> _Get access tokens using **[Grant]**_


  [npm-version]: https://img.shields.io/npm/v/purest.svg?style=flat-square (NPM Version)
  [test-ci-img]: https://img.shields.io/travis/simov/purest/master.svg?style=flat-square (Build Status)
  [test-cov-img]: https://img.shields.io/coveralls/simov/purest.svg?style=flat-square (Test Coverage)
  [snyk-vulnerabilities]: https://img.shields.io/snyk/vulnerabilities/npm/purest.svg?style=flat-square (Vulnerabilities)

  [npm]: https://www.npmjs.com/package/purest
  [test-ci-url]: https://github.com/simov/purest/actions/workflows/test.yml
  [test-cov-url]: https://coveralls.io/r/simov/purest?branch=master
  [snyk]: https://snyk.io/test/npm/purest

  [v3]: https://github.com/simov/purest/tree/3.x
  [v2]: https://github.com/simov/purest/tree/2.x
  [article]: https://dev.to/simov/purest-53k0

  [request-compose]: https://github.com/simov/request-compose
  [request-oauth]: https://github.com/simov/request-oauth
  [request-multipart]: https://github.com/simov/request-multipart
  [request-cookie]: https://github.com/simov/request-cookie
  [request-logs]: https://github.com/simov/request-logs

  [grant]: https://github.com/simov/grant
  [redirect-config]: https://github.com/simov/request-compose#redirect
  [tunnel-agent]: https://github.com/simov/request-compose/blob/master/examples/misc-tunnel-agent.js
  [proxy-agent]: https://github.com/simov/request-compose/blob/master/examples/misc-proxy-agent.js
  [methods.json]: https://github.com/simov/purest/blob/master/config/methods.json

  [refresh-token]: https://github.com/simov/purest/blob/master/examples/refresh-token.js
  [openid-connect]: https://github.com/simov/purest/blob/master/examples/openid-connect.js
  [oauth-1]: https://github.com/simov/purest/blob/master/examples/oauth-1.js
  [file-stream]: https://github.com/simov/purest/blob/master/examples/file-stream.js
  [http-stream]: https://github.com/simov/purest/blob/master/examples/http-stream.js

  [url-parse]: https://nodejs.org/dist/latest-v10.x/docs/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost
  [buffer]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html
  [buffer-encoding]: https://nodejs.org/dist/latest-v10.x/docs/api/buffer.html#buffer_buffers_and_character_encodings
  [stream-readable]: https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_class_stream_readable
  [stream-incoming-message]: https://nodejs.org/dist/latest-v10.x/docs/api/http.html#http_class_http_incomingmessage
  [agent]: https://nodejs.org/docs/latest-v10.x/api/http.html#http_class_http_agent
"
2612,Predictable state container for JavaScript apps,"# <a href='https://redux.js.org'><img src='https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67' height='60' alt='Redux Logo' aria-label='redux.js.org' /></a>

Redux is a predictable state container for JavaScript apps.
(Not to be confused with a WordPress framework – [Redux Framework](https://redux.io))

It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as [live code editing combined with a time traveling debugger](https://github.com/reduxjs/redux-devtools).

You can use Redux together with [React](https://reactjs.org), or with any other view library.
It is tiny (2kB, including dependencies), and has a rich ecosystem of addons.

![GitHub Workflow Status](https://img.shields.io/github/workflow/status/reduxjs/redux/Tests/master?style=flat-square)
[![npm version](https://img.shields.io/npm/v/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)
[![npm downloads](https://img.shields.io/npm/dm/redux.svg?style=flat-square)](https://www.npmjs.com/package/redux)
[![redux channel on discord](https://img.shields.io/badge/discord-%23redux%20%40%20reactiflux-61dafb.svg?style=flat-square)](https://discord.gg/0ZcbPKXt5bZ6au5t)
[![Changelog #187](https://img.shields.io/badge/changelog-%23187-lightgrey.svg?style=flat-square)](https://changelog.com/187)

## Installation

[**Redux Toolkit**](https://redux-toolkit.js.org) is our official recommended approach for writing Redux logic. It wraps around the Redux core, and contains packages and functions that we think are essential for building a Redux app. Redux Toolkit builds in our suggested best practices, simplifies most Redux tasks, prevents common mistakes, and makes it easier to write Redux applications.

```
npm install @reduxjs/toolkit react-redux
```

For the Redux core library by itself:

```
npm install redux
```

For more details, see [the Installation docs page](https://redux.js.org/introduction/installation).

## Documentation

The Redux docs are located at **https://redux.js.org**:

- [Introduction](https://redux.js.org/introduction/getting-started)
- [Tutorials](https://redux.js.org/tutorials/index)
- [Usage Guides](https://redux.js.org/usage/index)
- [FAQ](https://redux.js.org/faq)
- [API Reference](https://redux.js.org/api/api-reference)

## Learn Redux

### Redux Essentials Tutorial

The [**Redux Essentials tutorial**](https://redux.js.org/tutorials/essentials/part-1-overview-concepts) is a ""top-down"" tutorial that teaches ""how to use Redux the right way"", using our latest recommended APIs and best practices. We recommend starting there.

### Redux Fundamentals Tutorial

The [**Redux Fundamentals tutorial**](https://redux.js.org/tutorials/fundamentals/part-1-overview) is a ""bottom-up"" tutorial that teaches ""how Redux works"" from first principles and without any abstractions, and why standard Redux usage patterns exist.

### Additional Tutorials

- The Redux repository contains several example projects demonstrating various aspects of how to use Redux. Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online. See the complete list of examples in the **[Examples page](https://redux.js.org/introduction/examples)**.
- Redux creator Dan Abramov's **free [""Getting Started with Redux"" video series](https://app.egghead.io/playlists/fundamentals-of-redux-course-from-dan-abramov-bd5cc867)** and **[Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux)** video courses on Egghead.io
- Redux maintainer Mark Erikson's **[""Redux Fundamentals"" conference talk](https://blog.isquaredsoftware.com/2018/03/presentation-reactathon-redux-fundamentals/)** and [**""Redux Fundamentals"" workshop slides**](https://blog.isquaredsoftware.com/2018/06/redux-fundamentals-workshop-slides/)
- Dave Ceddia's post [**A Complete React Redux Tutorial for Beginners**](https://daveceddia.com/redux-tutorial/)

### Other Resources

- The **[Redux FAQ](https://redux.js.org/faq)** answers many common questions about how to use Redux, and the **[""Using Redux"" docs section](https://redux.js.org/usage/index)** has information on handling derived data, testing, structuring reducer logic, and reducing boilerplate.
- Redux maintainer Mark Erikson's **[""Practical Redux"" tutorial series](https://blog.isquaredsoftware.com/series/practical-redux/)** demonstrates real-world intermediate and advanced techniques for working with React and Redux (also available as **[an interactive course on Educative.io](https://www.educative.io/collection/5687753853370368/5707702298738688)**).
- The **[React/Redux links list](https://github.com/markerikson/react-redux-links)** has categorized articles on working with [reducers and selectors](https://github.com/markerikson/react-redux-links/blob/master/redux-reducers-selectors.md), [managing side effects](https://github.com/markerikson/react-redux-links/blob/master/redux-side-effects.md), [Redux architecture and best practices](https://github.com/markerikson/react-redux-links/blob/master/redux-architecture.md), and more.
- Our community has created thousands of Redux-related libraries, addons, and tools. The **[""Ecosystem"" docs page](https://redux.js.org/introduction/ecosystem)** lists our recommendations, and also there's a complete listing available in the **[Redux addons catalog](https://github.com/markerikson/redux-ecosystem-links)**.

### Help and Discussion

The **[#redux channel](https://discord.gg/0ZcbPKXt5bZ6au5t)** of the **[Reactiflux Discord community](https://www.reactiflux.com)** is our official resource for all questions related to learning and using Redux. Reactiflux is a great place to hang out, ask questions, and learn - please come and join us there!

## Before Proceeding Further

Redux is a valuable tool for organizing your state, but you should also consider whether it's appropriate for your situation. Please don't use Redux just because someone said you should - instead, please take some time to understand the potential benefits and tradeoffs of using it.

Here are some suggestions on when it makes sense to use Redux:

- You have reasonable amounts of data changing over time
- You need a single source of truth for your state
- You find that keeping all your state in a top-level component is no longer sufficient

Yes, these guidelines are subjective and vague, but this is for a good reason. The point at which you should integrate Redux into your application is different for every user and different for every application.

> **For more thoughts on how Redux is meant to be used, please see:**<br>
>
> - **[When (and when not) to reach for Redux](https://changelog.com/posts/when-and-when-not-to-reach-for-redux)**
> - **[You Might Not Need Redux](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367)**<br>
> - **[The Tao of Redux, Part 1 - Implementation and Intent](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/)**<br>
> - **[The Tao of Redux, Part 2 - Practice and Philosophy](https://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/)**
> - **[Redux FAQ](https://redux.js.org/faq)**

## Developer Experience

Dan Abramov (author of Redux) wrote Redux while working on his React Europe talk called [“Hot Reloading with Time Travel”](https://www.youtube.com/watch?v=xsSnOQynTHs). His goal was to create a state management library with a minimal API but completely predictable behavior. Redux makes it possible to implement logging, hot reloading, time travel, universal apps, record and replay, without any buy-in from the developer.

## Influences

Redux evolves the ideas of [Flux](https://facebook.github.io/flux/), but avoids its complexity by taking cues from [Elm](https://github.com/evancz/elm-architecture-tutorial/).
Even if you haven't used Flux or Elm, Redux only takes a few minutes to get started with.

## Basic Example

The whole global state of your app is stored in an object tree inside a single _store_.
The only way to change the state tree is to create an _action_, an object describing what happened, and _dispatch_ it to the store.
To specify how state gets updated in response to an action, you write pure _reducer_ functions that calculate a new state based on the old state and the action.

```js
import { createStore } from 'redux'

/**
 * This is a reducer - a function that takes a current state value and an
 * action object describing ""what happened"", and returns a new state value.
 * A reducer's function signature is: (state, action) => newState
 *
 * The Redux state should contain only plain JS objects, arrays, and primitives.
 * The root state value is usually an object.  It's important that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * You can use any conditional logic you want in a reducer. In this example,
 * we use a switch statement, but it's not required.
 */
function counterReducer(state = { value: 0 }, action) {
  switch (action.type) {
    case 'counter/incremented':
      return { value: state.value + 1 }
    case 'counter/decremented':
      return { value: state.value - 1 }
    default:
      return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counterReducer)

// You can use subscribe() to update the UI in response to state changes.
// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.
// There may be additional use cases where it's helpful to subscribe as well.

store.subscribe(() => console.log(store.getState()))

// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'counter/incremented' })
// {value: 1}
store.dispatch({ type: 'counter/incremented' })
// {value: 2}
store.dispatch({ type: 'counter/decremented' })
// {value: 1}
```

Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called _actions_. Then you write a special function called a _reducer_ to decide how every action transforms the entire application's state.

In a typical Redux app, there is just a single store with a single root reducing function. As your app grows, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components.

This architecture might seem like a lot for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action.

### Redux Toolkit Example

Redux Toolkit simplifies the process of writing Redux logic and setting up the store. With Redux Toolkit, that same logic looks like:

```js
import { createSlice, configureStore } from '@reduxjs/toolkit'

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    incremented: state => {
      // Redux Toolkit allows us to write ""mutating"" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a ""draft state"" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decremented: state => {
      state.value -= 1
    }
  }
})

export const { incremented, decremented } = counterSlice.actions

const store = configureStore({
  reducer: counterSlice.reducer
})

// Can still subscribe to the store
store.subscribe(() => console.log(store.getState()))

// Still pass action objects to `dispatch`, but they're created for us
store.dispatch(incremented())
// {value: 1}
store.dispatch(incremented())
// {value: 2}
store.dispatch(decremented())
// {value: 1}
```

Redux Toolkit allows us to write shorter logic that's easier to read, while still following the same Redux behavior and data flow.

## Examples

Almost all examples have a corresponding CodeSandbox sandbox. This is an interactive version of the code that you can play with online.

- [**Counter Vanilla**](https://redux.js.org/introduction/examples#counter-vanilla): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter-vanilla)
- [**Counter**](https://redux.js.org/introduction/examples#counter): [Source](https://github.com/reduxjs/redux/tree/master/examples/counter) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/counter)
- [**Todos**](https://redux.js.org/introduction/examples#todos): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos)
- [**Todos with Undo**](https://redux.js.org/introduction/examples#todos-with-undo): [Source](https://github.com/reduxjs/redux/tree/master/examples/todos-with-undo) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todos-with-undo)
- [**TodoMVC**](https://redux.js.org/introduction/examples#todomvc): [Source](https://github.com/reduxjs/redux/tree/master/examples/todomvc) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/todomvc)
- [**Shopping Cart**](https://redux.js.org/introduction/examples#shopping-cart): [Source](https://github.com/reduxjs/redux/tree/master/examples/shopping-cart) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/shopping-cart)
- [**Tree View**](https://redux.js.org/introduction/examples#tree-view): [Source](https://github.com/reduxjs/redux/tree/master/examples/tree-view) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/tree-view)
- [**Async**](https://redux.js.org/introduction/examples#async): [Source](https://github.com/reduxjs/redux/tree/master/examples/async) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/async)
- [**Universal**](https://redux.js.org/introduction/examples#universal): [Source](https://github.com/reduxjs/redux/tree/master/examples/universal)
- [**Real World**](https://redux.js.org/introduction/examples#real-world): [Source](https://github.com/reduxjs/redux/tree/master/examples/real-world) | [Sandbox](https://codesandbox.io/s/github/reduxjs/redux/tree/master/examples/real-world)

## Testimonials

> [“Love what you're doing with Redux”](https://twitter.com/jingc/status/616608251463909376)
> Jing Chen, creator of Flux

> [“I asked for comments on Redux in FB's internal JS discussion group, and it was universally praised. Really awesome work.”](https://twitter.com/fisherwebdev/status/616286955693682688)
> Bill Fisher, author of Flux documentation

> [“It's cool that you are inventing a better Flux by not doing Flux at all.”](https://twitter.com/andrestaltz/status/616271392930201604)
> André Staltz, creator of Cycle

## Thanks

- [The Elm Architecture](https://github.com/evancz/elm-architecture-tutorial) for a great intro to modeling state updates with reducers;
- [Turning the database inside-out](https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/) for blowing my mind;
- [Developing ClojureScript with Figwheel](https://www.youtube.com/watch?v=j-kj2qwJa_E) for convincing me that re-evaluation should “just work”;
- [Webpack](https://webpack.js.org/concepts/hot-module-replacement/) for Hot Module Replacement;
- [Flummox](https://github.com/acdlite/flummox) for teaching me to approach Flux without boilerplate or singletons;
- [disto](https://github.com/threepointone/disto) for a proof of concept of hot reloadable Stores;
- [NuclearJS](https://github.com/optimizely/nuclear-js) for proving this architecture can be performant;
- [Om](https://github.com/omcljs/om) for popularizing the idea of a single state atom;
- [Cycle](https://github.com/cyclejs/cycle-core) for showing how often a function is the best tool;
- [React](https://github.com/facebook/react) for the pragmatic innovation.

Special thanks to [Jamie Paton](https://jdpaton.github.io) for handing over the `redux` NPM package name.

## Logo

You can find the official logo [on GitHub](https://github.com/reduxjs/redux/tree/master/logo).

## Change Log

This project adheres to [Semantic Versioning](https://semver.org/).
Every release, along with the migration instructions, is documented on the GitHub [Releases](https://github.com/reduxjs/redux/releases) page.

## Patrons

The work on Redux was [funded by the community](https://www.patreon.com/reactdx).
Meet some of the outstanding companies that made it possible:

- [Webflow](https://github.com/webflow)
- [Ximedes](https://www.ximedes.com/)

[See the full list of Redux patrons](PATRONS.md), as well as the always-growing list of [people and companies that use Redux](https://github.com/reduxjs/redux/issues/310).

## License

[MIT](LICENSE.md)
"
2414,The Hypersistence Utils library (previously known as Hibernate Types) gives you Spring and Hibernate utilities that can help you get the most out of your data access layer.,"[![License](https://img.shields.io/github/license/vladmihalcea/hypersistence-utils.svg)](https://raw.githubusercontent.com/vladmihalcea/hypersistence-utils/master/LICENSE)
[![Maven Central](https://img.shields.io/maven-central/v/io.hypersistence/hypersistence-utils-parent.svg)](https://central.sonatype.dev/search?q=io.hypersistence)
[![JavaDoc](http://javadoc.io/badge/io.hypersistence/hypersistence-utils-hibernate-55.svg)](http://www.javadoc.io/doc/io.hypersistence/hypersistence-utils-hibernate-55)

### Migrating to version 3

The project name was changed from Hibernate Types to Hypersistence Utils because the scope
of the project is much broader now, offering Spring utilities as well.

For this reason, when migrating from the Hibernate Types 2.x to Hypersistence Utils 3.x,
you will need to follow these steps:

1. First, you will need to change your Maven or Gradle dependency as illustrated by the [Installation Guide](#installation-guide).
2. Second, you will need to change the package name from `com.vladmihalcea.hibernate` to `io.hypersistence.utils.hibernate`.
3. Third, you will need to change the package name from `com.vladmihalcea.spring` to `io.hypersistence.utils.spring`.

That's it!

### Introduction

The Hypersistence Utils project gives you general-purpose utilities for both Spring and Hibernate. 

The main advantage of this project is that it supports a broad range of Hibernate versions, spanning from **Hibernate ORM 6.1** to **6.0**, **5.6**, **5.5**, **5.4**, **5.3**, **5.2**, **5.1**, and Hibernate **5**.

### Installation Guide

Depending on the Hibernate version you are using, you need to add the following dependency:

#### Hibernate 6.1 and 6.0

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-60</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.6 and 5.5

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-55</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.4, 5.3 and 5.2

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-52</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Hibernate 5.1 and 5.0

    <dependency>
        <groupId>io.hypersistence</groupId>
        <artifactId>hypersistence-utils-hibernate-5</artifactId>
        <version>3.1.2</version>
    </dependency>

#### Optional Maven Dependencies

The Hypersistence Utils project defines a list of optional dependencies that you will have to declare explicitly in your project in order to use them.

The reason why all these dependencies are optional, like Guava, Jackson, or PostgreSQL JDBC Driver, is because not all projects may need them.

More, the dependency version is extremely important because, from time to time, security issues may be discovered that get fixed in newer versions.

> So, relying on this library to supply you with the dependency versions is a very dangerous thing to do. 
> 
> For instance, there have been [65 security issues discovered in the Jackson Data Bind library](https://www.cvedetails.com/vulnerability-list/vendor_id-15866/product_id-42991/Fasterxml-Jackson-databind.html) this project is heavily relying on. 
> 
> To avoid risking security issues, you need to take the responsibility of constantly upgrading all the dependencies that you are using along with the Hypersistence Utils library.

##### JSON Optional Maven Dependencies

If you are using JSON Types, then you might be interested in setting the following dependencies based on your Hibernate version:

###### Hibernate 6.1 and 6.0

````xml
<dependency>
    <groupId>com.fasterxml.jackson.module</groupId>
    <artifactId>jackson-module-jakarta-xmlbind-annotations</artifactId>
    <version>${jackson-module-jakarta-xmlbind-annotation}</version>
</dependency>
````

###### Hibernate 5.6, 5.5, 5.4, 5.3, and 5.2

````xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>${jackson-databind.version}</version>
</dependency>

<dependency>
    <groupId>com.fasterxml.jackson.module</groupId>
    <artifactId>jackson-module-jaxb-annotations</artifactId>
    <version>${jackson-module-jaxb-annotation}</version>
</dependency>
````

###### Hibernate 5.1, 5.0

````xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>${jackson.version}</version>
</dependency>
````

##### Guava Optional Maven Dependency

If you are mapping a `Range` using Guava, then you have to provide the Guava dependency explicitly:

````xml
<dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>${guava.version}</version>
</dependency>
````

##### Java Money and Currency API Optional Maven Dependency

If you are mapping a `MonetaryAmount`, then you have to provide the Moneta dependency explicitly:

````xml
<dependency>
    <groupId>org.javamoney</groupId>
    <artifactId>moneta</artifactId>
    <version>${moneta.version}</version>
    <type>pom</type>
</dependency>
````

##### PostgreSQL Optional Maven Dependency

If you are mapping a PostgreSQL-specific column type (e.g., `inet`, `hstore`, `array`, `interval`), then you have to provide the PostgreSQL dependency explicitly:

````xml
<dependency>
    <groupId>org.postgresql</groupId>
    <artifactId>postgresql</artifactId>
    <version>${postgresql.version}</version>
</dependency>
````

### Features

#### JSON 

##### Generic JSON Type

The `JsonType` allows you to map JSON column types, no matter if you're using Oracle,
SQL Server, PostgreSQL or MySQL.

###### Hibernate 6

If you're using Hibernate 6, you can map any JSON column to `Map`, `List`, POJO, `String`, or `JsonNode` entity property:

````java
@Type(JsonType.class)
private Map<String, String> properties = new HashMap<>();
````

###### Hibernate 5

If you're using Hibernate 5, you can either provide the fully-qualified name of the Hibernate Type:

````
@Type(type = ""io.hypersistence.utils.hibernate.type.json.JsonType"")
````

Or, you can add the following mapping to your `package-info.java` class in the same package where your JPA entities are located:

````java
@TypeDef(
    name = ""json"", typeClass = JsonType.class
)
package io.hypersistence.optimizer;

import io.hypersistence.utils.hibernate.type.json.JsonType;
import org.hibernate.annotations.TypeDef;
````

And later, you can map the `Map`, `List`, POJO, `String`, or `JsonNode` entity properties to JSON columns like this:

````java
@Type(type = ""json"")
private Map<String, String> properties = new HashMap<>();
````

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

##### Best Practices

> When mapping a JSON column type to a `POJO`, `List<POJO>` or `Map<String, POJO>`, you need to make sure that the `POJO` type overrides the default `equals` and `hashCode` methods and implements them according to the JSON object content. 
> 
> Otherwise, the Hibernate dirty checking mechanism may trigger unexpected UPDATE statements. Check out the [#134 issue for more details](https://github.com/vladmihalcea/hypersistence-utils/issues/138).

##### Database-specific JSON types

###### Oracle

When using Oracle, you have several options:

- you can use the generic `JsonType` that can work with the `JSON`, `VARCHAR`, or `BLOB` column types,
as long as you hint the column type using the `columnDefinition` attribute of the JPA `@Column` annotation.
- you can use the `JsonStringType` to map a `VARCHAR2` column type storing JSON.
- you can use the `JsonBlobType` to map a `BLOB` column type storing JSON.

For more details, check out [this article](https://vladmihalcea.com/oracle-json-jpa-hibernate/).

###### SQL Server

When using SQL Server, you can use the generic `JsonType` or the `JsonStringType` to map an `NVARCHAR` column type storing JSON.

For more details, check out [this article](https://vladmihalcea.com/sql-server-json-hibernate/).

###### PostgreSQL

When using PostgreSQL, you can use the generic `JsonType` or the `JsonBinaryType` to map both `jsonb` and `json` column types.

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

###### MySQL

When using MySQL, you can use the generic `JsonType` or the `JsonStringType` to map the `json` column type.

For more details, check out [this article](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/).

##### JSON mapping examples

* [How to map a POJO to a JSON column using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/)
* [How to map a String JPA property to a JSON column using Hibernate](https://vladmihalcea.com/map-string-jpa-property-json-column-hibernate/)
* [How to map a Jackson `JsonNode` to a JSON column](https://vladmihalcea.com/how-to-store-schema-less-eav-entity-attribute-value-data-using-json-and-hibernate/)
* [How to map JSON collections using JPA and Hibernate](https://vladmihalcea.com/how-to-map-json-collections-using-jpa-and-hibernate/)
* [How to map a Java Map entity property as a JSON column with JPA and Hibernate](https://vladmihalcea.com/java-map-json-jpa-hibernate/)
* [How to map Java Records to JSON columns using Hibernate](https://vladmihalcea.com/java-records-json-hibernate/)
* [How to map polymorphic JSON objects with JPA and Hibernate](https://vladmihalcea.com/polymorphic-json-objects-hibernate/)
* [How to encrypt and decrypt JSON properties with JPA and Hibernate](https://vladmihalcea.com/encrypt-decrypt-json-jpa/)
* [Why you should use Hibernate Dynamic Update for JSON properties](https://vladmihalcea.com/hibernate-dynamic-update-json-properties/)
* [How to map Oracle JSON columns using JPA and Hibernate](https://vladmihalcea.com/oracle-json-jpa-hibernate/)
* [How to map SQL Server JSON columns using JPA and Hibernate](https://vladmihalcea.com/sql-server-json-hibernate/)
* [How to customize the Jackson ObjectMapper used by Hypersistence Utils](https://vladmihalcea.com/hibernate-types-customize-jackson-objectmapper/)
* [How to customize the JSON Serializer used by Hypersistence Utils](https://vladmihalcea.com/how-to-customize-the-json-serializer-used-by-hibernate-types/)
* [How to fix the Hibernate `No Dialect mapping for JDBC type: 1111` issue when mixing JSON types with native SQL queries](https://vladmihalcea.com/hibernate-no-dialect-mapping-for-jdbc-type/)
* [How to fix the `column is of type jsonb but expression is of type record` or `bytea` issue](https://vladmihalcea.com/jpa-query-setparameter-hibernate/)

#### ARRAY 

* [How to map a PostgreSQL ARRAY to a Java `List` with JPA and Hibernate](https://vladmihalcea.com/postgresql-array-java-list/)
* [How to map the PostgreSQL ARRAY to Java Arrays with JPA and Hibernate](https://vladmihalcea.com/how-to-map-java-and-sql-arrays-with-jpa-and-hibernate/)
* [Multidimensional array mapping with JPA and Hibernate](https://vladmihalcea.com/multidimensional-array-jpa-hibernate/)
* [How to map the HSQLDB ARRAY type with JPA and Hibernate](https://vladmihalcea.com/hibernate-hsqldb-array-type/)

#### PostgreSQL Types (e.g. ENUM, INET, HSTORE, RANGE)

* [Java Enum to PostgreSQL Enum Type](https://vladmihalcea.com/the-best-way-to-map-an-enum-type-with-jpa-and-hibernate/)
* [How to map the PostgreSQL Inet type with JPA and Hibernate](https://vladmihalcea.com/postgresql-inet-type-hibernate/)
* [How to map a PostgreSQL HStore entity property with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-hstore-jpa-entity-property-hibernate/)
* [How to map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate](https://vladmihalcea.com/map-postgresql-enum-array-jpa-entity-property-hibernate/)
* [How to map a PostgreSQL Range column type with JPA and Hibernate](https://vladmihalcea.com/map-postgresql-range-column-type-jpa-hibernate/)
* [How to map a PostgreSQL Interval to a Java `Duration` with Hibernate](https://vladmihalcea.com/map-postgresql-interval-java-duration-hibernate/)

#### Generic Types

* [The best way to map `MonetaryAmount` with JPA and Hibernate](https://vladmihalcea.com/monetaryamount-jpa-hibernate/)
* [How to map `java.time.YearMonth` to DATE or INTEGER column](https://vladmihalcea.com/java-yearmonth-jpa-hibernate/)
* [How to map `java.time.Year` and `java.time.Month` with JPA and Hibernate](https://vladmihalcea.com/java-time-year-month-jpa-hibernate/)
* [`Character` to nullable CHAR column](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)
* [`ImmutableType` utility to simplify `UserType` implementations](https://vladmihalcea.com/how-to-implement-a-custom-basic-type-using-hibernate-usertype/)

#### Utilities

##### Spring

* [The awesome BaseJpaRepository](https://vladmihalcea.com/basejparepository-hypersistence-utils/)
* [The best Spring Data JpaRepository](https://vladmihalcea.com/best-spring-data-jparepository/)
* [The Spring Data `findAll` Anti-Pattern](https://vladmihalcea.com/spring-data-findall-anti-pattern/)
* [The Spring `@Retry` annotation to automaticlaly retry on failure](https://vladmihalcea.com/optimistic-locking-retry-with-jpa/)

###### BaseJpaRepository

The `BaseJpaRepository` is a much better alternative to the default Spring Data `JpaRepository` because it does not provide a `findAll` method or a `save` method that makes no sense in JPA terminology.

To use the `BaseJpaRepository` utility, make sure that you provide the `repositoryBaseClass` attribute in the `@EnableJpaRepositories` configuration to reference the `BaseJpaRepositoryImpl` from the Hypersistence Utils project:

````java
@Configuration
@EnableJpaRepositories(
    value = ""your.repository.package"",
    repositoryBaseClass = BaseJpaRepositoryImpl.class
)
public class JpaConfiguration {
    ...
}
````

The `your.repository.package` is the Java package of your Spring repositories.

###### HibernateRepository

While the `BaseJpaRepository` is to be preferred, in case you need to use the default `JpaRepository`, then you can at least extend the `HibernateRepository` as well to deprecate the methods that may cause problems.

To use the `HibernateRepository`, make sure that you include the `io.hypersistence.utils.spring.repository` package in your `@EnableJpaRepositories` configuration:

````java
@Configuration
@EnableJpaRepositories(
    value = {
        ""io.hypersistence.utils.spring.repository"",
        ""your.repository.package"",
        ...
    }
)
public class JpaConfiguration {
    ...
}
````

The `your.repository.package` is the Java package of your Spring repositories.

##### Identifier Generators

* [`BatchSequenceGenerator` - Hibernate Batch Sequence Generator](https://vladmihalcea.com/hibernate-batch-sequence-generator/)

##### Naming Strategy

* [`CamelCaseToSnakeCaseNamingStrategy` - How to map camelCase properties to snake_case column names with Hibernate](https://vladmihalcea.com/map-camel-case-properties-snake-case-column-names-hibernate/)

##### DTO Projection and ResultTransformer

* [`ClassImportIntegrator` - How to write a compact DTO projection query with JPA](https://vladmihalcea.com/dto-projection-jpa-query/)
* [`ListResultTransformer` - The best way to use a Hibernate ResultTransformer](https://vladmihalcea.com/hibernate-resulttransformer/)
* [`MapResultTransformer` - How to return a Map result from a JPA or Hibernate query](https://vladmihalcea.com/jpa-query-map-result/)

##### SQL Statement Count Validator

* [`SQLStatementCountValidator` - How to detect the Hibernate N+1 query problem during testing](https://vladmihalcea.com/how-to-detect-the-n-plus-one-query-problem-during-testing/)

### Requirements

* Java version supported by the Hibernate ORM version you are using.
* SLF4J
* Jackson Databind

### Issue management

If you have an issue, then there are two ways to address it.

#### Option 1: Providing your own fix

Since this project is open-source, you have the ability to fix any issue you bump into.
Therefore, when dealing with a problem, this is what you need to do:

1. Provide a replicating test case using the existing test cases as a template
2. Provide a fix proposal
3. Send a Pull Request with the fix proposal and the test case

#### Option 2: Paid support

If you don't have the time to provide a fix, then I can fix your issue via [consulting](https://vladmihalcea.com/consulting/). If you're in a hurry, this is going to be your best option.

### Are you struggling with application performance issues?

<a href=""https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://vladmihalcea.com/wp-content/uploads/2019/03/Hypersistence-Optimizer-300x250.jpg"" alt=""Hypersistence Optimizer"">
</a>

Imagine having a tool that can automatically detect if you are using JPA and Hibernate properly. No more performance issues, no more having to spend countless hours trying to figure out why your application is barely crawling.

Imagine discovering early during the development cycle that you are using suboptimal mappings and entity relationships or that you are missing performance-related settings. 

More, with Hypersistence Optimizer, you can detect all such issues during testing and make sure you don't deploy to production a change that will affect data access layer performance.

[Hypersistence Optimizer](https://vladmihalcea.com/hypersistence-optimizer/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) is the tool you've been long waiting for!

#### Training

If you are interested in on-site training, I can offer you my [High-Performance Java Persistence training](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes),
which can be adapted to one, two or three days of sessions. For more details, check out [my website](https://vladmihalcea.com/trainings/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### Consulting

If you want me to review your application and provide insight into how you can optimize it to run faster, 
then check out my [consulting page](https://vladmihalcea.com/consulting/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### High-Performance Java Persistence Video Courses

If you want the fastest way to learn how to speed up a Java database application, then you should definitely enroll in [my High-Performance Java Persistence video courses](https://vladmihalcea.com/courses/?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes).

#### High-Performance Java Persistence Book

Or, if you prefer reading books, you are going to love my [High-Performance Java Persistence book](https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes) as well.

<a href=""https://vladmihalcea.com/books/high-performance-java-persistence?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_h200.jpg"" alt=""High-Performance Java Persistence book"">
</a>

<a href=""https://vladmihalcea.com/courses?utm_source=GitHub&utm_medium=banner&utm_campaign=hibernatetypes"">
<img src=""https://i0.wp.com/vladmihalcea.com/wp-content/uploads/2018/01/HPJP_Video_Vertical_h200.jpg"" alt=""High-Performance Java Persistence video course"">
</a>

#### Contributing Guide

The project uses [Maven Toolchains](https://maven.apache.org/guides/mini/guide-using-toolchains.html) as different modules are compiled and tested using different Java versions. Hypersistence Utils 6 requires Java 17 while the other modules are compiled with either Java 1.8 or 1.6.

To see how to configure Maven Toolchains, check out [this article](https://vladmihalcea.com/maven-and-java-multi-version-modules/).

The project uses various database systems for integration testing, and you can configure the JDBC connection settings using the 
`DatasourceProvider` instances (e.g., `PostgreSQLDataSourceProvider`), and the project uses Testcontainers to bootstrap a Docker container
with the required Oracle, SQL Server, PostgreSQL, or MySQL instance on demand. 

> If you are a regular contributor, it's advisable to set up the required database locally or use the Docker Compose configuration provided in the `docker` folder,
> as bootstrapping the containers on demand is slower, and your tests are going to take longer to run.

If you want to fix an issue or add support for a new feature, please provide the associated integration test case that proves the improvement is working as expected.

"
72,This is a sample app that is part of a series of blog posts I have written about how to architect an android application using Uncle Bob's clean architecture approach.,"Android-CleanArchitecture 
=========================

## New version available written in Kotlin:
[Architecting Android… Reloaded](https://fernandocejas.com/2018/05/07/architecting-android-reloaded/)

Introduction
-----------------
This is a sample app that is part of a blog post I have written about how to architect android application using the Uncle Bob's clean architecture approach. 

[Architecting Android…The clean way?](http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/)

[Architecting Android…The evolution](http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/)

[Tasting Dagger 2 on Android](http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/)

[Clean Architecture…Dynamic Parameters in Use Cases](http://fernandocejas.com/2016/12/24/clean-architecture-dynamic-parameters-in-use-cases/)

[Demo video of this sample](http://youtu.be/XSjV4sG3ni0)

Clean architecture
-----------------
![http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/](https://github.com/android10/Sample-Data/blob/master/Android-CleanArchitecture/clean_architecture.png)

Architectural approach
-----------------
![http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/](https://github.com/android10/Sample-Data/blob/master/Android-CleanArchitecture/clean_architecture_layers.png)

Architectural reactive approach
-----------------
![http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/](https://github.com/android10/Sample-Data/blob/master/Android-CleanArchitecture/clean_architecture_layers_details.png)

Local Development
-----------------

Here are some useful Gradle/adb commands for executing this example:

 * `./gradlew clean build` - Build the entire example and execute unit and integration tests plus lint check.
 * `./gradlew installDebug` - Install the debug apk on the current connected device.
 * `./gradlew runUnitTests` - Execute domain and data layer tests (both unit and integration).
 * `./gradlew runAcceptanceTests` - Execute espresso and instrumentation acceptance tests.
 
Discussions
-----------------

Refer to the issues section: https://github.com/android10/Android-CleanArchitecture/issues
 

Code style
-----------

Here you can download and install the java codestyle.
https://github.com/android10/java-code-styles


License
--------

    Copyright 2018 Fernando Cejas

    Licensed under the Apache License, Version 2.0 (the ""License"");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an ""AS IS"" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.


![http://www.fernandocejas.com](https://github.com/android10/Sample-Data/blob/master/android10/android10_logo_big.png)

[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android--CleanArchitecture-brightgreen.svg?style=flat)](https://android-arsenal.com/details/3/909)

<a href=""https://www.buymeacoffee.com/android10"" target=""_blank""><img src=""https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png"" alt=""Buy Me A Coffee"" style=""height: auto !important;width: auto !important;"" ></a>
"
1548,🌈‒ the Ethereum wallet that lives in your pocket,"![](https://pbs.twimg.com/profile_banners/1103191459409420288/1573207178/1500x500)

### 🌈️ Rainbow

> the Ethereum wallet that lives in your pocket!

📲️ [Available on the iOS App Store.](https://apps.apple.com/us/app/rainbow-ethereum-wallet/id1457119021)

🤖 [Android Beta available on Google Play Store](https://play.google.com/store/apps/details?id=me.rainbow)

🐦️ [Follow us on Twitter](https://twitter.com/rainbowdotme)

## Setup

### General

- Install NVM or Node.js 14: https://github.com/creationix/nvm
- Install all project dependencies with `yarn setup`

### MacOS

1. Install the [latest version of XCode](https://developer.apple.com/xcode/).

2. Install Watchman:

   ```shell
   brew install watchman
   ```

3. Install CocoaPods:

   ```shell
   sudo gem install cocoapods
   ```

4. Install the required bundles and Pods for this project:
   ```shell
   yarn install-bundle && yarn install-pods
   ```

### Linux

1. Install system dependencies:

   ```shell
   sudo apt install libsecret-tools watchman
   ```

2. Follow the [React Native environment setup
   instructions](https://reactnative.dev/docs/environment-setup) carefully,
   which will involve installing Android Studio, the Android SDK, the emulator,
   etc. and making them available in your `$PATH`.

3. Ensure at least one [AVD
   image](https://developer.android.com/studio/run/managing-avds) is available
   for the emulator (unless using a physical device).

## Developing

If you are new to React Native, this is a helpful introduction:
https://reactnative.dev/docs/getting-started

### Preflight

1. Run `nvm use 14` to force Node.js v14.

2. Set up your .env file, use our env.example as a guide.

   **_Note that some features are currently not accessible, we are working with our Data Providers in order to provide open source API Keys!_**

   Here are some resources to generate your own API keys:

   - Etherscan: https://etherscan.io/apis
   - Infura: https://infura.io/
   - ETH Gas Station: https://docs.ethgasstation.info/
   - Imgix: https://www.imgix.com/

3. Ensure a `google-services.json` has been added to the relevant project
   directory/directories so the compile will not fail.

   This can either be the live Google Services config (for internal development)
   or a self-provided config for a personal Firebase project (third-party
   contributors) registered under the package name `me.rainbow`.

### MacOS

_Note: Darwin versions of the application can only be developed/built on Darwin
platforms with XCode._

1. Start a React Native webserver with:

   ```shell
   yarn start
   ```

2. Open `rainbow-wallet/ios/Rainbow.xcworkspace` in XCode.

3. Run the project by clicking the play button.

### Linux

_Note: Linux development environments cannot develop or build Darwin versions of the
project._

1. Start a React Native webserver with:

   ```shell
   yarn start
   ```

2. Build/install/start the debug version of the app in an emulator with:
   ```shell
   yarn android
   ```
"
601,"💻Build one codebase and get native UI on Windows, Linux and Web","![Capy](https://capy-ui.org/img/capy_big.png)

**As of now, Capy is NOT ready for use in production as I'm still making breaking changes**

---

![the glorius software in action](https://raw.githubusercontent.com/zenith391/bottom-zig-gui/main/.github/screenshot.png)

## Introduction

Capy is a **graphical user interface library for Zig**. It is mainly intended for creating applications using native controls from the operating system.
Capy is a declarative UI library aiming to be easy to write for and versatile.

It has been made with the goal to empower standalone UI applications, integration in games or any other rendering process is a non-goal.

## Features
- Use Zig for frontend and backend
- Accessibility: compatibility with almost all accessibility tools
- Cross-platform
- Uses the target OS toolkit
- Cross-compilable from any platform to any other platform
- *Tiny* executables - Every [example](https://github.com/capy-ui/capy/tree/master/examples)'s size < 2MB, which is smaller than 'hello world' in Go

## Usage

A simple application using capy:

```zig
const capy = @import(""capy"");
const std = @import(""std"");

pub fn main() !void {
    try capy.backend.init();

    var window = try capy.Window.init();
    try window.set(
        capy.Column(.{ .spacing = 10 }, .{ // have 10px spacing between each column's element
            capy.Row(.{ .spacing = 5 }, .{ // have 5px spacing between each row's element
                capy.Button(.{ .label = ""Save"", .onclick = buttonClicked }),
                capy.Button(.{ .label = ""Run"",  .onclick = buttonClicked })
            }),
            // Expanded means the widget will take all the space it can
            // in the parent container
            capy.Expanded(
                capy.TextArea(.{ .text = ""Hello World!"" })
            )
        })
    );

    window.resize(800, 600);
    window.show();
    capy.runEventLoop();
}

fn buttonClicked(button: *capy.Button_Impl) !void {
    std.log.info(""You clicked button with text {s}"", .{button.getLabel()});
}
```

It is easy to add something like a button or a text area. The example can already be used to notice a widget's parameters are usually enclosed in anonymous
structs (`.{ .label = ""Save"" }`). You can also see that simply wrapping a widget with `capy.Expanded( ... )` will tell it to take all the space it can.

## Getting Started

If you're starting a new project, simply clone [capy-template](https://github.com/capy-ui/capy-template) and follow build instructions.

Otherwise or for more information, please look in the [wiki](https://github.com/capy-ui/capy/wiki/Installation).

You can questions and receive updates on the [#capy-ui Matrix channel](https://matrix.to/#/#capy-ui:matrix.org).

## Contributing
Contributing can be as simple as opening an issue and detailling what bug you encountered or what feature you wish to have.  
If you want to help the project more directly, you can fork the project and then create a pull request.

## Supported platforms

A platform is considered supported only if it can be built to from every other OS.

### Desktop

✅ Windows x86_64  
✅ Windows i386

🏃 macOS M1  
🏃 macOS x86_64  

✅ Linux x86_64  
✅ Linux i386  
✅ Linux aarch64 (PinePhone, PineBook...)  

✅ FreeBSD x86_64  

### Mobile

🧪 Android  
🏃 iOS

### Web

✅ WebAssembly  

- ✅ Working and can be cross-compile from all platforms supported by Zig
- 🧪 Experimental
- 🏃 Planned

Note: As there's no ""official"" GUI library for Linux, GTK 3 has been chosen as it is the one
that works and can be configured on the most distros. It's also the reason Libadwaita won't
be adopted, as it's meant for GNOME and GNOME only by disallowing styling and integration
with other DEs.

"
1266,A TensorFlow recommendation algorithm and framework in Python.,"# TensorRec
A TensorFlow recommendation algorithm and framework in Python.

[![PyPI version](https://badge.fury.io/py/tensorrec.svg)](https://badge.fury.io/py/tensorrec) [![Build Status](https://travis-ci.org/jfkirk/tensorrec.svg?branch=master)](https://travis-ci.org/jfkirk/tensorrec) [![Gitter chat](https://badges.gitter.im/tensorrec/gitter.png)](https://gitter.im/tensorrec)

## NOTE: TensorRec is not under active development

TensorRec will not be receiving any more planned updates. Please feel free to open pull requests -- I am happy to review them.

Thank you for your contributions, support, and usage of TensorRec!

-James Kirk, @jfkirk

For similar tools, check out:

[TensorFlow Ranking](https://github.com/tensorflow/ranking/)

[Spotlight](https://github.com/maciejkula/spotlight)

[LightFM](https://github.com/lyst/lightfm)

## What is TensorRec?
TensorRec is a Python recommendation system that allows you to quickly develop recommendation algorithms and customize them using TensorFlow.

TensorRec lets you to customize your recommendation system's representation/embedding functions and loss functions while TensorRec handles the data manipulation, scoring, and ranking to generate recommendations.

A TensorRec system consumes three pieces of data: `user_features`, `item_features`, and `interactions`. It uses this data to learn to make and rank recommendations.

For an overview of TensorRec and its usage, please see the [wiki.](https://github.com/jfkirk/tensorrec/wiki)

For more information, and for an outline of this project, please read [this blog post.](https://medium.com/@jameskirk1/tensorrec-a-recommendation-engine-framework-in-tensorflow-d85e4f0874e8)

For an introduction to building recommender systems, please see [these slides.](https://www.slideshare.net/JamesKirk58/boston-ml-architecting-recommender-systems)

![TensorRec System Diagram](https://raw.githubusercontent.com/jfkirk/tensorrec/master/examples/system_diagram.png)

### Example: Basic usage
```python
import numpy as np
import tensorrec

# Build the model with default parameters
model = tensorrec.TensorRec()

# Generate some dummy data
interactions, user_features, item_features = tensorrec.util.generate_dummy_data(
    num_users=100,
    num_items=150,
    interaction_density=.05
)

# Fit the model for 5 epochs
model.fit(interactions, user_features, item_features, epochs=5, verbose=True)

# Predict scores and ranks for all users and all items
predictions = model.predict(user_features=user_features,
                            item_features=item_features)
predicted_ranks = model.predict_rank(user_features=user_features,
                                     item_features=item_features)

# Calculate and print the recall at 10
r_at_k = tensorrec.eval.recall_at_k(predicted_ranks, interactions, k=10)
print(np.mean(r_at_k))
```

## Quick Start
TensorRec can be installed via pip:
```pip install tensorrec```
"
2803,TensorFlow template application for deep learning,"## Introduction

It is the generic golden program for deep learning with [TensorFlow](https://github.com/tensorflow/tensorflow).

![](./architecture.jpeg)

- [x] Data Formats
  - [x] [CSV](./data/)
  - [x] [LIBSVM](./data/)
  - [x] [TFRecords](./data/)
- [x] Predict Server
  - [x] [TensorFlow serving](./cpp_predict_server/)
  - [x] [Python HTTP server](./http_service/)
- [x] Predict Client
  - [x] [Python gPRC client](./python_predict_client/)
  - [x] [Java gPRC client](./java_predict_client/)
  - [x] [Scala gPRC client](./java_predict_client/)
  - [x] [Golang gRPC client](./golang_predict_client/)
  - [x] [C++ gRPC client](./cpp_predict_client/)
  - [x] [Spark client](./java_predict_client/)
  - [x] [Android client](./android_client/)
  - [x] [iOS client](./ios_client/)
- [x] Network Models
  - [x] Logistic regression
  - [x] Deep neural network
  - [x] Convolution neural network
  - [x] Wide and deep model
  - [x] Regression model
  - [x] Customized models
- [x] Other Features
  - [x] Checkpoint
  - [x] TensorBoard
  - [x] Exporter
  - [x] Dropout
  - [x] Optimizers
  - [x] Learning rate decay
  - [x] Batch normalization
  - [x] Benchmark mode
  - [x] [Distributed training](./distributed/)

## Usage

### Generate TFRecords

If your data is in CSV format, generate TFRecords like this.

```
cd ./data/cancer/

./generate_csv_tfrecords.py
```

If your data is in LIBSVM format, generate TFRecords like this.

```
cd ./data/a8a/

./generate_libsvm_tfrecord.py
```

For large dataset, you can use Spark to do that. Please refer to [data](./data/).

### Run Training

You can train with the default configuration.

```
./dense_classifier.py

./sparse_classifier.py
```

Using different models or hyperparameters is easy with TensorFlow flags.

```
./dense_classifier.py --batch_size 1024 --epoch_number 1000 --step_to_validate 10 --optmizier adagrad --model dnn --model_network ""128 32 8""
```

If you use other dataset like [iris](./data/iris/), no need to modify the code. Just run with parameters to specify the TFRecords files.

```
./dense_classifier.py --train_file ./data/iris/iris_train.csv.tfrecords --validate_file ./data/iris/iris_test.csv.tfrecords --feature_size 4 --label_size 3  --enable_colored_log

./dense_classifier.py --train_file ./data/iris/iris_train.csv --validate_file ./data/iris/iris_test.csv --feature_size 4 --label_size 3 --input_file_format csv --enable_colored_log
```

If you want to use CNN model, try this command.

```
./dense_classifier.py --train_file ./data/lung/fa7a21165ae152b13def786e6afc3edf.dcm.csv.tfrecords --validate_file ./data/lung/fa7a21165ae152b13def786e6afc3edf.dcm.csv.tfrecords --feature_size 262144 --label_size 2 --batch_size 2 --validate_batch_size 2 --epoch_number -1 --model cnn
```

For [boston housing](./data/boston_housing/) dataset.

```
./dense_classifier.py --train_file ./data/boston_housing/train.csv.tfrecords --validate_file ./data/boston_housing/train.csv.tfrecords --feature_size 13 --label_size 1 --scenario regression  --batch_size 1 --validate_batch_size 1
```

### Export The Model

After training, it will export the model automatically. Or you can export manually.

```
./dense_classifier.py --mode savedmodel
```

### Validate The Model

If we want to run inference to validate the model, you can run like this.

```
./dense_classifier.py --mode inference
```

### Use TensorBoard

The program will generate TensorFlow event files automatically.

```
tensorboard --logdir ./tensorboard/
```

Then go to `http://127.0.0.1:6006` in the browser.

### Serving and Predicting

The exported model is compatible with [TensorFlow Serving](https://github.com/tensorflow/serving). You can follow the document and run the `tensorflow_model_server`.

```
./tensorflow_model_server --port=9000 --model_name=dense --model_base_path=./model/
```

We have provided some gRPC clients for dense and sparse models, such as [Python predict client](./python_predict_client/) and [Java predict client](./java_predict_client/).

```
./predict_client.py --host 127.0.0.1 --port 9000 --model_name dense --model_version 1

mvn compile exec:java -Dexec.mainClass=""com.tobe.DensePredictClient"" -Dexec.args=""127.0.0.1 9000 dense 1""
```

## Contribution

This project is widely used for different tasks with dense or sparse data.

If you want to make contributions, feel free to open an [issue](https://github.com/tobegit3hub/deep_recommend_system/issues) or [pull-request](https://github.com/tobegit3hub/deep_recommend_system/pulls).
"
1458,Redefined chart library built with React and D3,"# Recharts

[![storybook](https://raw.githubusercontent.com/storybooks/brand/master/badge/badge-storybook.svg)](https://master--63da8268a0da9970db6992aa.chromatic.com/)
[![Build Status](https://github.com/recharts/recharts/workflows/Node.js%20CI/badge.svg)](https://github.com/recharts/recharts/actions)
[![Coverage Status](https://coveralls.io/repos/recharts/recharts/badge.svg?branch=master&service=github)](https://coveralls.io/github/recharts/recharts?branch=master)
[![npm version](https://badge.fury.io/js/recharts.svg)](http://badge.fury.io/js/recharts)
[![npm downloads](https://img.shields.io/npm/dm/recharts.svg?style=flat-square)](https://www.npmjs.com/package/recharts)
[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](/LICENSE)

## Introduction

Recharts is a **Redefined** chart library built with [React](https://facebook.github.io/react/) and [D3](http://d3js.org).

The main purpose of this library is to help you to write charts in React applications without any pain. Main principles of Recharts are:

1. **Simply** deploy with React components.
2. **Native** SVG support, lightweight depending only on some D3 submodules.
3. **Declarative** components, components of charts are purely presentational.

Documentation at [recharts.org](https://recharts.org)

Please see [the wiki](https://github.com/recharts/recharts/wiki) for FAQ.

## Examples

```jsx
<LineChart
  width={400}
  height={400}
  data={data}
  margin={{ top: 5, right: 20, left: 10, bottom: 5 }}
>
  <XAxis dataKey=""name"" />
  <Tooltip />
  <CartesianGrid stroke=""#f5f5f5"" />
  <Line type=""monotone"" dataKey=""uv"" stroke=""#ff7300"" yAxisId={0} />
  <Line type=""monotone"" dataKey=""pv"" stroke=""#387908"" yAxisId={1} />
</LineChart>
```

All the components of Recharts are clearly separated. The lineChart is composed of x axis, tooltip, grid, and line items, and each of them is an independent React Component. The clear separation and composition of components is one of the principle Recharts follows.

## Installation

### npm

NPM is the easiest and fastest way to get started using Recharts. It is also the recommended installation method when building single-page applications (SPAs). It pairs nicely with a CommonJS module bundler such as Webpack.


```sh
# latest stable
$ npm install recharts
```

### umd

The UMD build is also available on unpkg.com:

```html
 <script src=""https://unpkg.com/react/umd/react.production.min.js""></script>
 <script src=""https://unpkg.com/react-dom/umd/react-dom.production.min.js""></script>
 <script src=""https://unpkg.com/recharts/umd/Recharts.min.js""></script>
```

Then you can find the library on `window.Recharts`.

### dev build

```sh
$ git clone https://github.com/recharts/recharts.git
$ cd recharts
$ npm install
$ npm run build
```

## Demo

To examine the demos in your local build, execute:

```sh
$ npm run[-script] demo
```

and then browse to http://localhost:3000.

## Storybook

We are in the process of unifying documentation and examples in storybook. To run it locally, execute

```sh
$ npm run[-script] storybook
```

and then browse to http://localhost:6006.

## Module Formats

- [babel-plugin-recharts](https://github.com/recharts/babel-plugin-recharts) A simple transform to cherry-pick Recharts modules so you don’t have to.

## License

[MIT](http://opensource.org/licenses/MIT)

Copyright (c) 2015-2022 Recharts Group.
"
1635,Tutorial on how to make a custom React renderer,"# Building a custom React renderer

[![Build Status](https://travis-ci.org/nitin42/Making-a-custom-React-renderer.svg?branch=master)](https://travis-ci.org/nitin42/Making-a-custom-React-renderer)

> Let's make a custom React renderer 😎

<p align=""center"">
  <img src=""https://cdn.filestackcontent.com/5KdzhvGRG61WMQhBa1Ql"" width=""630"" height=""350"">
</p>

## Introduction

This is a small tutorial on how to build your custom React renderer and render the components to the host environment you need. The tutorial is divided into three parts -

* **Part 1** - Creating a React reconciler (using [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package).

* **Part 2** - Creating a public interface to the reconciler i.e ""Renderer"".

* **Part 3** - Creating a render method to flush everything to the host environment we need.

## Brief

### [Part-I](./part-one.md)

In part one, we will create a React reconciler using the [`react-reconciler`](https://github.com/facebook/react/tree/master/packages/react-reconciler) package. We will implement the renderer using Fiber as it has a first-class renderer API for creating custom renderer.

### [Part-II](./part-two.md)

In part two, we will create a public interface to the reconciler i.e a renderer. We will create a custom method for `createElement` and will also architect the component API for our example.

### [Part-III](./part-three.md)

In part three, we will create a render method which will render our input component.

## What we will build?

We will create a custom renderer that will render a React component to a word document. I've already made one. Full source code and the documentation for that is available [here](https://github.com/nitin42/redocx).

We will use [officegen](https://github.com/Ziv-Barber/officegen) for this. I'll explain some of it's basic concepts here.

Officegen can generate Open Office XML files for Microsoft Office 2007 and later. It generates a output stream and not a file.
It is independent of any output tool.

**Creating a document object**

```js
let doc = officegen('docx', { __someOptions__ });
```

**Generating output stream**

```js
let output = fs.createWriteStream (__filePath__);

doc.generate(output);
```

**Events**

`finalize` - It is fired after a stream has been generated successfully.

`error` - Fired when there are any errors

## Running the project

```
git clone https://github.com/nitin42/Making-a-custom-React-renderer
cd Making-a-custom-React-renderer
yarn install
yarn example
```

After you run `yarn example`, a docx file will be generated in the [demo](./demo) folder.

## Contributing

Suggestions to improve the tutorial are welcome 😃.

**If you've completed the tutorial successfully, you can either watch/star this repo or follow me on [twitter](https://twitter.com/NTulswani) for more updates.**

<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer'>
  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/FCRW65HPiwhNtebDx2tTc53E/nitin42/Making-a-custom-React-renderer.svg' />
</a>
"
3406,Pluggable Ruby translation framework,"Mobility
========

[![Gem Version](https://badge.fury.io/rb/mobility.svg)][gem]
[![Build Status](https://github.com/shioyama/mobility/workflows/CI/badge.svg)][actions]
[![Code Climate](https://api.codeclimate.com/v1/badges/72200f2b00c339ec4537/maintainability.svg)][codeclimate]
[![Gitter Chat](https://badges.gitter.im/mobility-ruby/mobility.svg)](https://gitter.im/mobility-ruby/mobility)

[gem]: https://rubygems.org/gems/mobility
[actions]: https://github.com/shioyama/mobility/actions
[codeclimate]: https://codeclimate.com/github/shioyama/mobility
[docs]: http://www.rubydoc.info/gems/mobility
[wiki]: https://github.com/shioyama/mobility/wiki

**This is the readme for version 1.x of Mobility. If you are using an earlier
version (0.8.x or earlier), you probably want the readme on the [0-8
branch](https://github.com/shioyama/mobility/tree/0-8).**

Mobility is a gem for storing and retrieving translations as attributes on a
class. These translations could be the content of blog posts, captions on
images, tags on bookmarks, or anything else you might want to store in
different languages. For examples of what Mobility can do, see the
<a href=""#companies-using-mobility"">Companies using Mobility</a> section below.

Storage of translations is handled by customizable ""backends"" which encapsulate
different storage strategies. The default way to store translations
is to put them all in a set of two shared tables, but many alternatives are
also supported, including [translatable
columns](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-1) and
[model translation
tables](http://dejimata.com/2017/3/3/translating-with-mobility#strategy-2), as
well as database-specific storage solutions such as
[json/jsonb](https://www.postgresql.org/docs/current/static/datatype-json.html) and
[Hstore](https://www.postgresql.org/docs/current/static/hstore.html) (for
PostgreSQL).

Mobility is a cross-platform solution, currently supporting both
[ActiveRecord](http://api.rubyonrails.org/classes/ActiveRecord/Base.html)
and [Sequel](http://sequel.jeremyevans.net/) ORM, with support for other
platforms planned.

For a detailed introduction to Mobility, see [Translating with
Mobility](http://dejimata.com/2017/3/3/translating-with-mobility). See also my
talk at RubyConf 2018, [Building Generic
Software](https://www.youtube.com/watch?v=RZkemV_-__A), where I explain the
thinking behind Mobility's design.

If you're coming from Globalize, be sure to also read the [Migrating from
Globalize](https://github.com/shioyama/mobility/wiki/Migrating-from-Globalize)
section of the wiki.

Installation
------------

Add this line to your application's Gemfile:

```ruby
gem 'mobility', '~> 1.2.9'
```

### ActiveRecord (Rails)

Requirements:
- ActiveRecord >= 5.0 (including 6.x)

(Support for most backends and features is also supported with
ActiveRecord/Rails 4.2, but there are some tests still failing. To see exactly
what might not work, check pending specs in Rails 4.2 builds.)

To translate attributes on a model, extend `Mobility`, then call `translates`
passing in one or more attributes as well as a hash of options (see below).

If using Mobility in a Rails project, you can run the generator to create an
initializer and a migration to create shared translation tables for the
default `KeyValue` backend:

```
rails generate mobility:install
```

(If you do not plan to use the default backend, you may want to use
the `--without_tables` option here to skip the migration generation.)

The generator will create an initializer file `config/initializers/mobility.rb`
which looks something like this:

```ruby
Mobility.configure do

  # PLUGINS
  plugins do
    backend :key_value

    active_record

    reader
    writer

    # ...
  end
end
```

Each method call inside the block passed to `plugins` declares a plugin, along
with an optional default. To use a different default backend, you can
change the default passed to the `backend` plugin, like this:

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :table
```

See other possible backends in the [backends section](#backends).

You can also set defaults for backend-specific options. Below, we set the
default `type` option for the KeyValue backend to `:string`.

```diff
 Mobility.configure do

   # PLUGINS
   plugins do
-    backend :key_value
+    backend :key_value, type: :string
   end
 end
```

We will assume the configuration above in the examples that follow.

See [Getting Started](#quickstart) to get started translating your models.

### Sequel

Requirements:
- Sequel >= 4.0

When configuring Mobility, ensure that you include the `sequel` plugin:

```diff
 plugins do
   backend :key_value

-    active_record
+    sequel
```

You can extend `Mobility` just like in ActiveRecord, or you can use the
`mobility` plugin, which does the same thing:

```ruby
class Word < ::Sequel::Model
  plugin :mobility
  translates :name, :meaning
end
```

Otherwise everything is (almost) identical to AR, with the exception that there
is no equivalent to a Rails generator, so you will need to create the migration
for any translation table(s) yourself, using Rails generators as a reference.

The models in examples below all inherit from `ApplicationRecord`, but
everything works exactly the same if the parent class is `Sequel::Model`.

Usage
-----

### <a name=""quickstart""></a>Getting Started

Once the install generator has been run to generate translation tables, using
Mobility is as easy as adding a few lines to any class you want to translate.
Simply pass one or more attribute names to the `translates` method with a hash
of options, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, :meaning
end
```

Note: When using the KeyValue backend, use the options hash to pass each attribute's type:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    type: :string
  translates :meaning, type: :text
end
```

This is important because this is how Mobility knows to which of the [two translation tables](https://github.com/shioyama/mobility/wiki/KeyValue-Backend) it should save your translation.

You now have translated attributes `name` and `meaning` on the model `Word`.
You can set their values like you would any other attribute:

```ruby
word = Word.new
word.name = ""mobility""
word.meaning = ""(noun): quality of being changeable, adaptable or versatile""
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
word.save
word = Word.first
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
```

Presence methods are also supported:

```ruby
word.name?
#=> true
word.name = nil
word.name?
#=> false
word.name = """"
word.name?
#=> false
```

What's different here is that the value of these attributes changes with the
value of `I18n.locale`:

```ruby
I18n.locale = :ja
word.name
#=> nil
word.meaning
#=> nil
```

The `name` and `meaning` of this word are not defined in any locale except
English. Let's define them in Japanese and save the model:

```ruby
word.name = ""モビリティ""
word.meaning = ""(名詞):動きやすさ、可動性""
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
word.save
```

Now our word has names and meanings in two different languages:

```ruby
word = Word.first
I18n.locale = :en
word.name
#=> ""mobility""
word.meaning
#=> ""(noun): quality of being changeable, adaptable or versatile""
I18n.locale = :ja
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
```

Internally, Mobility is mapping the values in different locales to storage
locations, usually database columns. By default these values are stored as keys
(attribute names) and values (attribute translations) on a set of translation
tables, one for strings and one for text columns, but this can be easily
changed and/or customized (see the [Backends](#backends) section below).

### <a name=""getset""></a> Getting and Setting Translations

The easiest way to get or set a translation is to use the getter and setter
methods described above (`word.name` and `word.name=`), enabled by including
the `reader` and `writer` plugins.

You may also want to access the value of an attribute in a specific locale,
independent of the current value of `I18n.locale` (or `Mobility.locale`). There
are a few ways to do this.

The first way is to define locale-specific methods, one for each locale you
want to access directly on a given attribute. These are called ""locale
accessors"" in Mobility, and can be enabled by including the `locale_accessors`
plugin, with a default set of accessors:

```diff
 plugins do
   # ...
+  locale_accessors [:en, :ja]
```

You can also override this default from `translates` in any model:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, locale_accessors: [:en, :ja]
end
```

Since we have enabled locale accessors for English and Japanese, we can access
translations for these locales with `name_en` and `name_ja`:

```ruby
word.name_en
#=> ""mobility""
word.name_ja
#=> ""モビリティ""
word.name_en = ""foo""
word.name
#=> ""foo""
```

Other locales, however, will not work:

```ruby
word.name_ru
#=> NoMethodError: undefined method `name_ru' for #<Word id: ... >
```

With no plugin option (or a default of `true`), Mobility generates methods for
all locales in `I18n.available_locales` at the time the model is first loaded.

An alternative to using the `locale_accessors` plugin is to use the
`fallthrough_accessors` plugin. This uses Ruby's
[`method_missing`](http://apidock.com/ruby/BasicObject/method_missing) method
to implicitly define the same methods as above, but supporting any locale
without any method definitions. (Locale accessors and fallthrough locales can
be used together without conflict, with locale accessors taking precedence if
defined for a given locale.)

Ensure the plugin is enabled:

```diff
 plugins do
   # ...
+  fallthrough_accessors
```

... then we can access any locale we want, without specifying them upfront:

```ruby
word = Word.new
word.name_fr = ""mobilité""
word.name_fr
#=> ""mobilité""
word.name_ja = ""モビリティ""
word.name_ja
#=> ""モビリティ""
```

(Note however that Mobility will complain if you have
`I18n.enforce_available_locales` set to `true` and you try accessing a locale
not present in `I18n.available_locales`; set it to `false` if you want to allow
*any* locale.)

Another way to fetch values in a locale is to pass the `locale` option to the
getter method, like this:

```ruby
word.name(locale: :en)
#=> ""mobility""
word.name(locale: :fr)
#=> ""mobilité""
```

Note that setting the locale this way will pass an option `locale: true` to the
backend and all plugins. Plugins may use this option to change their behavior
(passing the locale explicitly this way, for example, disables
[fallbacks](#fallbacks), see below for details).

You can also *set* the value of an attribute this way; however, since the
`word.name = <value>` syntax does not accept any options, the only way to do this is to
use `send` (this is included mostly for consistency):

```ruby
word.send(:name=, ""mobiliteit"", locale: :nl)
word.name_nl
#=> ""mobiliteit""
```

Yet another way to get and set translated attributes is to call `read` and
`write` on the storage backend, which can be accessed using the method
`<attribute>_backend`. Without worrying too much about the details of
how this works for now, the syntax for doing this is simple:

```ruby
word.name_backend.read(:en)
#=> ""mobility""
word.name_backend.read(:nl)
#=> ""mobiliteit""
word.name_backend.write(:en, ""foo"")
word.name_backend.read(:en)
#=> ""foo""
```

Internally, all methods for accessing translated attributes ultimately end up
reading and writing from the backend instance this way.  (The `write` methods
do not call underlying backend's methods to persist the change. This is up to
the user, so e.g. with ActiveRecord you should call `save` write the changes to
the database).

Note that accessor methods are defined in an included module, so you can wrap
reads or writes in custom logic:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title

  def title(*)
    super.reverse
  end
end
```

### Setting the Locale

It may not always be desirable to use `I18n.locale` to set the locale for
content translations. For example, a user whose interface is in English
(`I18n.locale` is `:en`) may want to see content in Japanese. If you use
`I18n.locale` exclusively for the locale, you will have a hard time showing
stored translations in one language while showing the interface in another
language.

For these cases, Mobility also has its own locale, which defaults to
`I18n.locale` but can be set independently:

```ruby
I18n.locale = :en
Mobility.locale              #=> :en
Mobility.locale = :fr
Mobility.locale              #=> :fr
I18n.locale                  #=> :en
```

To set the Mobility locale in a block, you can use `Mobility.with_locale` (like
`I18n.with_locale`):

```ruby
Mobility.locale = :en
Mobility.with_locale(:ja) do
  Mobility.locale            #=> :ja
end
Mobility.locale              #=> :en
```

Mobility uses [RequestStore](https://github.com/steveklabnik/request_store) to
reset these global variables after every request, so you don't need to worry
about thread safety. If you're not using Rails, consult RequestStore's
[README](https://github.com/steveklabnik/request_store#no-rails-no-problem) for
details on how to configure it for your use case.

### <a name=""fallbacks""></a>Fallbacks

Mobility offers basic support for translation fallbacks. First, enable the
`fallbacks` plugin:

```diff
 plugins do
   # ...
+  fallbacks
+  locale_accessors
```

Fallbacks will require `fallthrough_accessors` to handle methods like
`title_en`, which are used to track changes. For performance reasons it's
generally best to also enable the `locale_accessors` plugin as shown above.

Now pass a hash with fallbacks for each locale as an option when defining
translated attributes on a class:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name,    fallbacks: { de: :ja, fr: :ja }
  translates :meaning, fallbacks: { de: :ja, fr: :ja }
end
```

Internally, Mobility assigns the fallbacks hash to an instance of
`I18n::Locale::Fallbacks.new`.

By setting fallbacks for German and French to Japanese, values will fall
through to the Japanese value if none is present for either of these locales,
but not for other locales:

```ruby
Mobility.locale = :ja
word = Word.create(name: ""モビリティ"", meaning: ""(名詞):動きやすさ、可動性"")
Mobility.locale = :de
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :fr
word.name
#=> ""モビリティ""
word.meaning
#=> ""(名詞):動きやすさ、可動性""
Mobility.locale = :ru
word.name
#=> nil
word.meaning
#=> nil
```

You can optionally disable fallbacks to get the real value for a given locale
(for example, to check if a value in a particular locale is set or not) by
passing `fallback: false` (*singular*, not plural) to the getter method:

```ruby
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
Mobility.locale = :fr
word.meaning(fallback: false)
#=> nil
Mobility.locale = :ja
word.meaning(fallback: false)
#=> ""(名詞):動きやすさ、可動性""
```

You can also set the fallback locales for a single read by passing one or more
locales:

```ruby
Mobility.with_locale(:fr) do
  word.meaning = ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
end
word.save
Mobility.locale = :de
word.meaning(fallback: false)
#=> nil
word.meaning(fallback: :fr)
#=> ""(nf): aptitude à bouger, à se déplacer, à changer, à évoluer""
word.meaning(fallback: [:ja, :fr])
#=> ""(名詞):動きやすさ、可動性""
```

Also note that passing a `locale` option into an attribute reader or writer, or
using [locale accessors or fallthrough accessors](#getset) to get or set
any attribute value, will disable fallbacks (just like `fallback: false`).
(This will take precedence over any value of the `fallback` option.)

Continuing from the last example:

```ruby
word.meaning(locale: :de)
#=> nil
word.meaning_de
#=> nil
Mobility.with_locale(:de) { word.meaning }
#=> ""(名詞):動きやすさ、可動性""
```

For more details, see the [API documentation on
fallbacks](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Fallbacks)
and [this article on I18n
fallbacks](https://github.com/svenfuchs/i18n/wiki/Fallbacks).

### <a name=""default""></a>Default values

Another option is to assign a default value, using the `default` plugin:

```diff
 plugins do
   # ...
+  default 'foo'
```

Here we've set a ""default default"" of `'foo'`, which will be returned if a fetch would
otherwise return `nil`. This can be overridden from model classes:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, default: 'foo'
end

Mobility.locale = :ja
word = Word.create(name: ""モビリティ"")
word.name
#=> ""モビリティ""
Mobility.locale = :de
word.name
#=> ""foo""
```

You can override the default by passing a `default` option to the attribute reader:

```ruby
word.name
#=> 'foo'
word.name(default: nil)
#=> nil
word.name(default: 'bar')
#=> 'bar'
```

The default can also be a `Proc`, which will be called with the context as the
model itself, and passed optional arguments (attribute, locale and options
passed to accessor) which can be used to customize behaviour. See the [API
docs][docs] for details.

### <a name=""dirty""></a>Dirty Tracking

Dirty tracking (tracking of changed attributes) can be enabled for models which
support it. Currently this is models which include
[ActiveModel::Dirty](http://api.rubyonrails.org/classes/ActiveModel/Dirty.html)
(like `ActiveRecord::Base`) and Sequel models (through the
[dirty](http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/Dirty.html)
plugin).

First, ensure the `dirty` plugin is enabled in your configuration, and that you
have enabled an ORM plugin (either `active_record` or `sequel`), since the
dirty plugin will depend on one of these being enabled.

```diff
 plugins do
   # ...
   active_record
+  dirty
```

(Once enabled globally, the dirty plugin can be selectively disabled on classes
by passing `dirty: false` to `translates`.)

Take this ActiveRecord class:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title
end
```

Let's assume we start with a post with a title in English and Japanese:

```ruby
post = Post.create(title: ""Introducing Mobility"")
Mobility.with_locale(:ja) { post.title = ""モビリティの紹介"" }
post.save
```

Now let's change the title:

```ruby
post = Post.first
post.title                      #=> ""Introducing Mobility""
post.title = ""a new title""
Mobility.with_locale(:ja) do
  post.title                    #=> ""モビリティの紹介""
  post.title = ""新しいタイトル""
  post.title                    #=> ""新しいタイトル""
end
```

Now you can use dirty methods as you would any other (untranslated) attribute:

```ruby
post.title_was
#=> ""Introducing Mobility""
Mobility.locale = :ja
post.title_was
#=> ""モビリティの紹介""
post.changed
[""title_en"", ""title_ja""]
post.save
```

You can also access `previous_changes`:

```ruby
post.previous_changes
#=>
{
  ""title_en"" =>
    [
      ""Introducing Mobility"",
      ""a new title""
    ],
  ""title_ja"" =>
    [
      ""モビリティの紹介"",
      ""新しいタイトル""
    ]
}
```

Notice that Mobility uses locale suffixes to indicate which locale has changed;
dirty tracking is implemented this way to ensure that it is clear what
has changed in which locale, avoiding any possible ambiguity.

For performance reasons, it is highly recommended that when using the Dirty
plugin, you also enable [locale accessors](#getset) for all locales which will
be used, so that methods like `title_en` above are defined; otherwise they will
be caught by `method_missing` (using fallthrough accessors), which is much slower.

For more details on dirty tracking, see the [API
documentation](http://www.rubydoc.info/gems/mobility/Mobility/Plugins/Dirty).

### Cache

The Mobility cache caches localized values that have been fetched once so they
can be quickly retrieved again. The cache plugin is included in the default
configuration created by the install generator:

```diff
 plugins do
   # ...
+  cache
```

It can be disabled selectively per model by passing `cache: false` when
defining an attribute, like this:

```ruby
class Word < ApplicationRecord
  extend Mobility
  translates :name, cache: false
end
```

You can also turn off the cache for a single fetch by passing `cache: false` to
the getter method, i.e. `post.title(cache: false)`. To remove the cache plugin
entirely, remove the `cache` line from the global plugins configuration.

The cache is normally just a hash with locale keys and string (translation)
values, but some backends (e.g. KeyValue and Table backends) have slightly more
complex implementations.

### <a name=""querying""></a>Querying

Mobility backends also support querying on translated attributes. To enable
this feature, include the `query` plugin, and ensure you also have an ORM
plugin enabled (`active_record` or `sequel`):

```diff
 plugins do
   # ...
   active_record
+  query
```

Querying defines a scope or dataset class method, whose default name is `i18n`.
You can override this by passing a default in the configuration, like
`query :t` to use a name `t`.

Querying is supported in two different ways. The first is via query methods
like `where` (and `not` and `find_by` in ActiveRecord, and `except` in Sequel).

So for ActiveRecord, assuming a model using KeyValue as its default backend:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
end
```

... we can query for posts with title ""foo"" and content ""bar"" just as we would
query on untranslated attributes, and Mobility will convert the queries to
whatever the backend requires to actually return the correct results:

```ruby
Post.i18n.find_by(title: ""foo"", content: ""bar"")
```

results in the SQL:

```sql
SELECT ""posts"".* FROM ""posts""
INNER JOIN ""mobility_string_translations"" ""Post_title_en_string_translations""
  ON ""Post_title_en_string_translations"".""key"" = 'title'
  AND ""Post_title_en_string_translations"".""locale"" = 'en'
  AND ""Post_title_en_string_translations"".""translatable_type"" = 'Post'
  AND ""Post_title_en_string_translations"".""translatable_id"" = ""posts"".""id""
INNER JOIN ""mobility_text_translations"" ""Post_content_en_text_translations""
  ON ""Post_content_en_text_translations"".""key"" = 'content'
  AND ""Post_content_en_text_translations"".""locale"" = 'en'
  AND ""Post_content_en_text_translations"".""translatable_type"" = 'Post'
  AND ""Post_content_en_text_translations"".""translatable_id"" = ""posts"".""id""
WHERE ""Post_title_en_string_translations"".""value"" = 'foo'
  AND ""Post_content_en_text_translations"".""value"" = 'bar'
```

As can be seen in the query above, behind the scenes Mobility joins two tables,
one with string translations and one with text translations, and aliases the
joins for each attribute so as to match the particular model, attribute(s),
locale(s) and value(s) passed in to the query. Details of how this is done can
be found in the [Wiki page for the KeyValue
backend](https://github.com/shioyama/mobility/wiki/KeyValue-Backend#querying).

You can also use methods like `order`, `select`, `pluck` and `group` on
translated attributes just as you would with normal attributes, and Mobility
will handle generating the appropriate SQL:

```ruby
Post.i18n.pluck(:title)
#=> [""foo"", ""bar"", ...]
```

If you would prefer to avoid the `i18n` scope everywhere, you can define it as
a default scope on your model:

```ruby
class Post < ApplicationRecord
  extend Mobility
  translates :title,   type: :string
  translates :content, type: :text
  default_scope { i18n }
end
```

Now translated attributes can be queried just like normal attributes:

```ruby
Post.find_by(title: ""Introducing Mobility"")
#=> finds post with English title ""Introducing Mobility""
```

If you want more fine-grained control over your queries, you can alternatively
pass a block to the query method and call attribute names from the block scope
to build Arel predicates:

```ruby
Post.i18n do
  title.matches(""foo"").and(content.matches(""bar""))
end
```

which generates the same SQL as above, except the `WHERE` clause becomes:

```sql
SELECT ""posts"".* FROM ""posts""
  ...
WHERE ""Post_title_en_string_translations"".""value"" ILIKE 'foo'
  AND ""Post_content_en_text_translations"".""value"" ILIKE 'bar'
```

The block-format query format is very powerful and allows you to build complex
backend-independent queries on translated and untranslated attributes without
having to deal with the details of how these translations are stored. The same
interface is supported with Sequel to build datasets.

<a name=""backends""></a>Backends
--------

Mobility supports different storage strategies, called ""backends"". The default
backend is the `KeyValue` backend, which stores translations in two tables, by
default named `mobility_text_translations` and `mobility_string_translations`.

You can set the default backend to a different value in the global
configuration, or you can set it explicitly when defining a translated
attribute, like this:

```ruby
class Word < ApplicationRecord
  translates :name, backend: :table
end
```

This would set the `name` attribute to use the `Table` backend (see below).
The `type` option (`type: :string` or `type: :text`) is missing here because
this is an option specific to the KeyValue backend (specifying which shared
table to store translations on). Backends have their own specific options; see
the [Wiki][wiki] and [API documentation][docs] for which options are available
for each.

Everything else described above (fallbacks, dirty tracking, locale accessors,
caching, querying, etc) is the same regardless of which backend you use.

### Table Backend (like Globalize)

The `Table` backend stores translations as columns on a model-specific table. If
your model uses the table `posts`, then by default this backend will store an
attribute `title` on a table `post_translations`, and join the table to
retrieve the translated value.

To use the table backend on a model, you will need to first create a
translation table for the model, which (with Rails) you can do using the
`mobility:translations` generator:

```
rails generate mobility:translations post title:string content:text
```

This will generate the `post_translations` table with columns `title` and
`content`, and all other necessary columns and indices. For more details see
the [Table
Backend](https://github.com/shioyama/mobility/wiki/Table-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Table`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Table).

### Column Backend (like Traco)

The `Column` backend stores translations as columns with locale suffixes on
the model table. For an attribute `title`, these would be of the form
`title_en`, `title_fr`, etc.

Use the `mobility:translations` generator to add columns for locales in
`I18n.available_locales` to your model:

```
rails generate mobility:translations post title:string content:text
```

For more details, see the [Column
Backend](https://github.com/shioyama/mobility/wiki/Column-Backend) page of the
wiki and API documentation on the [`Mobility::Backend::Column`
class](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Column).

### PostgreSQL-specific Backends

Mobility also supports JSON and Hstore storage options, if you are using
PostgreSQL as your database. To use this option, create column(s) on the model
table for each translated attribute, and set your backend to `:json`, `:jsonb`
or `:hstore`. If you are using Sequel, note that you
will need to enable the [pg_json](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_json_rb.html)
or
[pg_hstore](http://sequel.jeremyevans.net/rdoc-plugins/files/lib/sequel/extensions/pg_hstore_rb.html)
extensions with `DB.extension :pg_json` or `DB.extension :pg_hstore` (where
`DB` is your database instance).

Another option is to store all your translations on a single jsonb column (one
per model). This is called the ""container"" backend.

For details on these backends, see the [Postgres
Backend](https://github.com/shioyama/mobility/wiki/Postgres-Backends-%28Column-Attribute%29)
and [Container
Backend](https://github.com/shioyama/mobility/wiki/Container-Backend)
pages of the wiki and in the API documentation
([`Mobility::Backend::Jsonb`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Jsonb)
and
[`Mobility::Backend::Hstore`](http://www.rubydoc.info/gems/mobility/Mobility/Backends/Hstore)).

*Note: The Json backend (`:json`) may also work with recent versions of MySQL
with JSON column support, although this backend/db combination is not tested.
See [this issue](https://github.com/shioyama/mobility/issues/226) for details.*

Development
-----------

### Custom Backends

Although Mobility is primarily oriented toward storing ActiveRecord model
translations, it can potentially be used to handle storing translations in
other formats. In particular, the features mentioned above (locale accessors,
caching, fallbacks, dirty tracking to some degree) are not specific to database
storage.

To use a custom backend, simply pass the name of a class which includes
`Mobility::Backend` to `translates`:

```ruby
class MyBackend
  include Mobility::Backend
  # ...
end

class MyClass
  extend Mobility
  translates :foo, backend: MyBackend
end
```

For details on how to define a backend class, see the [Introduction to Mobility
Backends](https://github.com/shioyama/mobility/wiki/Introduction-to-Mobility-Backends)
page of the wiki and the [API documentation on the `Mobility::Backend`
module](http://www.rubydoc.info/gems/mobility/Mobility/Backend).

### Testing Backends

All included backends are tested against a suite of shared specs which ensure
they conform to the same expected behaviour. These examples can be found in:

- `spec/support/shared_examples/accessor_examples.rb` (minimal specs testing
  translation setting/getting)
- `spec/support/shared_examples/querying_examples.rb` (specs for
  [querying](#querying))
- `spec/support/shared_examples/serialization_examples.rb` (specialized specs
  for backends which store translations as a Hash: `serialized`, `hstore`,
  `json` and `jsonb` backends)

A minimal test can simply define a model class and use helpers defined in
`spec/support/helpers.rb` to run these examples, by extending either
`Helpers::ActiveRecord` or `Helpers::Sequel`:

```ruby
describe MyBackend do
  extend Helpers::ActiveRecord

  before do
    stub_const 'MyPost', Class.new(ActiveRecord::Base)
    MyPost.extend Mobility
    MyPost.translates :title, :content, backend: MyBackend
  end

  include_accessor_examples 'MyPost'
  include_querying_examples 'MyPost'
  # ...
end
```

Shared examples expect the model class to have translated attributes `title`
and `content`, and an untranslated boolean column `published`. These defaults
can be changed, see the shared examples for details.

Backends are also each tested against specialized specs targeted at their
particular implementations.

Integrations
------------

* [friendly_id-mobility](https://github.com/shioyama/friendly_id-mobility): Use
  Mobility with [FriendlyId](https://github.com/norman/friendly_id).
* [mobility-ransack](https://github.com/shioyama/mobility-ransack): Search
  attributes translated by Mobility with
  [Ransack](https://github.com/activerecord-hackery/ransack).
* [mobility-actiontext](https://github.com/sedubois/mobility-actiontext): Translate
  Rails [Action Text](https://guides.rubyonrails.org/action_text_overview.html) rich text
  with Mobility.

Tutorials
---------

- [Polyglot content in a rails
  app](https://revs.runtime-revolution.com/polyglot-content-in-a-rails-app-aed823854955)
- [Translating with
  Mobility](https://dejimata.com/2017/3/3/translating-with-mobility)
- [JSONify your Ruby
  Translations](https://dejimata.com/2018/3/20/jsonify-your-ruby-translations)

More Information
----------------

- [Github repository](https://www.github.com/shioyama/mobility)
- [API documentation][docs]
- [Wiki][wiki]

<a name=""#companies-using-mobility""></a>Companies using Mobility
------------------------

<img alt=""Logos of companies using Mobility"" src=""./img/companies-using-mobility.png"" style=""width: 100%"" />

- [Doorkeeper](https://www.doorkeeper.jp/)
- [Oreegano](https://www.oreegano.com/)
- [Venuu](https://venuu.fi)
- ... <sup>&#10033;</sup>

<sup>&#10033;</sup> <small>Post an issue or email me to add your company's name to this list.</small>

License
-------

The gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).
"
1728,"A curated list of awesome SwiftUI tutorials, libraries, videos and articles.","# Awesome SwiftUI [<u>🕶️</u>](https://chinsyo.com/awesome-swiftui ""Open in browser"")

A curated list of awesome SwiftUI tutorials, libraries, sessions and articles.

## Contributing

Found a SwiftUI library or snippet that you think is *awesome*? Fork this repository and send your pull request.

## Index

- [Websites](#websites) 
- [Tutorials](#tutorials)
- [Sessions](#sessions)
- [Documents](#documents)
- [Articles](#articles)
- [Samples](#samples)

## Websites

* SwiftUI [developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/)
* Documentation [developer.apple.com/documentation/swiftui](https://developer.apple.com/documentation/swiftui)
* WWDC 2020 [developer.apple.com/wwdc20/](https://developer.apple.com/wwdc20/)


> Notice: Apple Developer Program required.
<details open>
  <summary>Resource <a href=""https://developer.apple.com/download/"">download</a></summary>
  <ul>
  <li>Xcode 13 <a href=""https://apps.apple.com/us/app/xcode/id497799835"">Download</a></li>
  <li>iOS Image <a href=""https://developer.apple.com/download/#ios-restore-images-iphone-new"">Download restore image</a></li>
  <li>iPadOS Image <a href=""https://developer.apple.com/download/#ios-restore-images-ipad-new"">Download restore image</a></li>
  <li>macOS Catalina Image <a href=""https://developer.apple.com/services-account/download?path=/WWDC_2019/macOS_10.15_Developer_Beta_Access_Utility/macOSDeveloperBetaAccessUtility.dmg"">Install profile</a></li>
  <li>watchOS Image <a href=""https://developer.apple.com/services-account/download?path=/WWDC_2019/watchOS_6_beta_Configuration_Profile/watchOS_6_Beta_Profilemobileconfig.mobileconfig"">Install profile</a></li>
  </ul>
</details>

## Tutorials
*  [iOS App Dev Training](https://developer.apple.com/tutorials/app-dev-training)
*  [Creating a macOS App](https://developer.apple.com/tutorials/swiftui/creating-a-macos-app)
*  [Creating a watchOS App](https://developer.apple.com/tutorials/swiftui/creating-a-watchos-app)
*  [Creating and Combining Views](https://developer.apple.com/tutorials/swiftui/creating-and-combining-views)
*  [Building Lists and Navigation](https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation)
*  [Handling User Input](https://developer.apple.com/tutorials/swiftui/handling-user-input)
*  [Drawing Paths and Shapes](https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes)
*  [Animating Views and Transitions](https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions)
*  [Composing Complex Interfaces](https://developer.apple.com/tutorials/swiftui/composing-complex-interfaces)
*  [Working with UI Controls](https://developer.apple.com/tutorials/swiftui/working-with-ui-controls)
*  [Interfacing with UIKit](https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit)
*  [Present your app’s content in widgets with SwiftUI views.](https://developer.apple.com/documentation/widgetkit/swiftui-views)
* [SwiftUI Cheatsheet](https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet)
* [SwiftUI 与 Combine 编程](https://objccn.io/products/swift-ui)
* [SwiftUI 编程思想](https://objccn.io/products/thinking-in-swiftui)
* [SwiftUI by Tutorials](https://store.raywenderlich.com/products/swiftui-by-tutorials)
* [100 Days of SwiftUI](https://www.hackingwithswift.com/100/swiftui)
* [SwiftUI by Example](https://www.hackingwithswift.com/quick-start/swiftui)
* [肘子的Swift记事本](https://www.fatbobman.com/)

## Sessions

- WWDC 2019
  * 204 - [Introducing SwiftUI: Building Your First App](https://developer.apple.com/videos/play/wwdc2019/204/)
  * 237 - [Building Custom Views with SwiftUI](https://developer.apple.com/videos/play/wwdc2019/237)
  * 238 - [Accessibility in SwiftUI](https://developer.apple.com/videos/play/wwdc2019/238)
  * 226 - [Data Flow Through SwiftUI](https://developer.apple.com/videos/play/wwdc2019/226)
  * 231 - [Integrating SwiftUI](https://developer.apple.com/videos/play/wwdc2019/231)
  * 233 - [Mastering Xcode Previews](https://developer.apple.com/videos/play/wwdc2019/233)
  * 216 - [SwiftUI Essentials](https://developer.apple.com/videos/play/wwdc2019/216)
  * 240 - [SwiftUI On All Devices](https://developer.apple.com/videos/play/wwdc2019/240)
  * 219 - [SwiftUI on watchOS](https://developer.apple.com/videos/play/wwdc2019/219)

- WWDC 2020
  * 10119 - [Introduction to SwiftUI](https://developer.apple.com/wwdc20/10119/)
  * 10041 - [What's new in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10041/)
  * 10031 - [Stacks, Grids, and Outlines in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10031/)
  * 10037 - [App essentials in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10037/)
  * 10040 - [Data Essentials in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10040/)
  * 10149 - [Structure your app for SwiftUI previews](https://developer.apple.com/videos/play/wwdc2020/10149/)
  * 10033 - [Build SwiftUI views for widgets](https://developer.apple.com/videos/play/wwdc2020/10033/)
  * 10039 - [Build document-based apps in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10039/)
  * 10042 - [Build SwiftUI apps for tvOS](https://developer.apple.com/videos/play/wwdc2020/10042/)
  * 10048 - [Build complications in SwiftUI](https://developer.apple.com/videos/play/wwdc2020/10048/)
  * 10185 - [Visually edit SwiftUI views](https://developer.apple.com/videos/play/wwdc2020/10185/)

- WWDC 2021
  * 10018 - [What's new in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10018/)
  * 10017 - [Bring Core Data concurrency to Swift and SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10017/)
  * 10019 - [Discover concurrency in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10019/)
  * 10119 - [SwiftUI Accessibility: Beyond the basics](https://developer.apple.com/videos/play/wwdc2021/10119/)
  * 10220 - [Localize your SwiftUI app](https://developer.apple.com/videos/play/wwdc2021/10220/)
  * 10021 - [Add rich graphics to your SwiftUI app](https://developer.apple.com/videos/play/wwdc2021/10021/)
  * 10022 - [Demystify SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10022/)
  * 10023 - [Direct and reflect focus in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10023/)
  * 10176 - [Craft search experiences in SwiftUI](https://developer.apple.com/videos/play/wwdc2021/10176/)
  * 10062 - [SwiftUI on the Mac: Build the fundamentals](https://developer.apple.com/videos/play/wwdc2021/10062/)
  * 10289 - [SwiftUI on the Mac: The finishing touches](https://developer.apple.com/videos/play/wwdc2021/10289/)

## Documents

* [App Structure and Behavior](https://developer.apple.com/documentation/swiftui/app-structure-and-behavior)
* [Views and Controls](https://developer.apple.com/documentation/swiftui/views-and-controls)
* [View Layout and Presentation](https://developer.apple.com/documentation/swiftui/view-layout-and-presentation)
* [Drawing and Animation](https://developer.apple.com/documentation/swiftui/drawing-and-animation)
* [Framework Integration](https://developer.apple.com/documentation/swiftui/framework-integration)
* [State and Data Flow](https://developer.apple.com/documentation/swiftui/state-and-data-flow)
* [Gestures](https://developer.apple.com/documentation/swiftui/gestures)
* [Preview in Xcode](https://developer.apple.com/documentation/swiftui/previews-in-xcode)


## Articles

* [Easily format phone numbers entirly in SwiftUI](https://benjaminlsage.medium.com/format-phone-numbers-entirely-in-swiftui-9456f52990a1) - IcyHovercraft
* An Instagram clone using SwiftUI and GraphQL [[1]](https://blog.back4app.com/2019/08/27/instagram-clone/) [[2]](https://blog.back4app.com/2019/09/03/swift-instagram-clone/) [[3]](https://blog.back4app.com/2019/09/16/instagram-clone-profile/) [[4]](https://blog.back4app.com/2019/09/26/instagram-clone-homeview/)
* SwiftUI, Combine, and Firebase [[1]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part1/) [[2]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part2/) [[3]](https://peterfriese.dev/replicating-reminder-swiftui-firebase-part3/) - - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [SwiftUI + Combine = ❤️](https://peterfriese.dev/swift-combine-love/) - - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [Get started with SwiftUI](https://www.hackingwithswift.com/articles/194/get-started-with-swiftui) - Hacking with Swift
* [Inside SwiftUI's Declarative Syntax's Compiler Magic](https://swiftrocks.com/inside-swiftui-compiler-magic.html) - SwiftRocks
* [SwiftUI’s relationship to UIKit and AppKit](https://wwdcbysundell.com/2019/swiftui-relationship-to-uikit-appkit/) - WWDC by Sundell
* [A first look at SwiftUI: Apple's declarative new UI framework](https://wwdcbysundell.com/2019/swiftui-first-look/) - WWDC by Sundell
* [Answers to the most common questions about SwiftUI](https://wwdcbysundell.com/2019/swiftui-common-questions/) - WWDC by Sundell
* [Making real-world app with SwiftUI](https://mecid.github.io/2019/06/05/swiftui-making-real-world-app/) - Majid's
* [SwiftUI 的一些初步探索 (一)](https://xiaozhuanlan.com/topic/7652341890) - 小专栏[@onevcat](https://xiaozhuanlan.com/u/onevcat)
* [SwiftUI 的一些初步探索 (二)](https://xiaozhuanlan.com/topic/5346879201) - 小专栏[@onevcat](https://xiaozhuanlan.com/u/onevcat)
* [SwiftUI 的 DSL 语法分析](https://zhuanlan.zhihu.com/p/68294674) - 知乎专栏[@黄二少碎碎念](https://zhuanlan.zhihu.com/hjcapple)
* [从 SwiftUI 谈声明式 UI 与类型系统](https://zhuanlan.zhihu.com/p/68275232) - 知乎专栏[@CyanTalks](https://zhuanlan.zhihu.com/cyantalks)
* [SwiftUI Are we saying goodbye to IB(UIStoryboard) ?](https://medium.com/@themedo8000/swiftui-are-we-saying-goodbye-to-ib-718035e83b07) - Medium[@Mohammad Sawalha](https://medium.com/@themedo8000)
* [Tutorial: How to setup a SwiftUI project](https://medium.com/@martinlasek/swiftui-getting-started-372389fff423) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [What SwiftUI Means for Flutter](https://medium.com/flutter-nyc/what-swiftui-means-for-flutter-6d5898f7adf7) - Medium[@Martin Rybak](https://medium.com/@martinrybak)
* [SwiftUI 程式開發初體驗](https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/swiftui-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E5%88%9D%E9%AB%94%E9%A9%97-aea9122741b1) - Medium[@彼得潘的 iOS App Neverland](https://medium.com/@apppeterpan)
* [SwiftUI - How to setup a project](https://medium.com/@martinlasek/swiftui-getting-started-372389fff423) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [How To Make a Simple Countdown Timer with SwiftUI](https://medium.com/better-programming/make-a-simple-countdown-with-timer-and-swiftui-3ce355b54986) - Medium[@Antoine Barrault](https://medium.com/@ant_one)
* [SwiftUI - Understanding State](https://medium.com/@martinlasek/swiftui-understanding-state-8afa23fd9f1f) - Medium[@Martin Lasek](https://medium.com/@martinlasek)
* [Understanding SwiftUI in depth](https://medium.com/techtron/understanding-swiftui-in-depth-58d42614619e) - Medium[@Balraj Singh](https://medium.com/@erbalrajs)
* [A Skeptics view on SwiftUI](https://medium.com/@JillevdWeerd/a-skeptics-view-on-swiftui-cc6636b6fd3b) - Medium[@Jille van der Weerd](https://medium.com/@JillevdWeerd)
* [Optionals in SwiftUI](https://medium.com/q42-engineering/swiftui-optionals-ead04edd439f) - Medium[@Jasper Haggenburg](https://medium.com/@jpunt)
* [URL Image view in SwiftUI](https://medium.com/@dmytro.anokhin/url-image-view-in-swiftui-f08f85d942d8) - Medium[@Dmytro Anokhin](https://medium.com/@dmytro.anokhin)
* [What Swift UI means to current Apps and Frameworks](https://medium.com/@luca.kiedrowski/what-swift-ui-means-to-current-apps-and-frameworks-goodbye-hybrid-apps-77479a1ba0d9) - Medium[@Luca Kiedrowski](https://medium.com/@luca.kiedrowski)
* [How to build a Chat App or Messenger in SwiftUI for iOS Swift](https://medium.com/@halavins/how-to-build-a-chat-app-or-messenger-in-swiftui-for-ios-swift-b46dbe5cc0ab) - Medium[@Nick Halavins](https://medium.com/@halavins)
* [Presenting UIViewControllers in SwiftUI](https://medium.com/@Johannes_Nevels/presenting-uiviewcontrollers-in-swiftui-22388616a24c) - Medium[@Johannes Nevels](https://medium.com/@Johannes_Nevels)
* [A Week With SwiftUI](https://icalvin.dev/post/403) - iCalvin.dev
* [SwiftUI, First Impression](https://medium.com/@ahmadfayyas/swiftui-first-impression-37a734fa6f02) - Medium[@Ahmad Fayyas](https://medium.com/@ahmadfayyas)
* [SwiftUI & Combine: Better Together](https://medium.com/flawless-app-stories/swiftui-plus-combine-equals-love-791ad444a082) - Medium[@Peter Friese](https://medium.com/@peterfriese)
* [Programmatic navigation in SwiftUI project](https://medium.com/flawless-app-stories/programmatic-navigation-in-swiftui-project-81200f35150) - Medium[@nalexn](https://medium.com/@nalexn)
* [Clean Architecture for SwiftUI](https://medium.com/swlh/clean-architecture-for-swiftui-6d6c4eb1cf6a) - Medium[@nalexn](https://medium.com/@nalexn)
* [Variadic DisposeBag for Combine subscriptions](https://medium.com/better-programming/cancelbag-d928d126e8ca) - Medium[@nalexn](https://medium.com/@nalexn)
* [8 Amazing SwiftUI Libraries to Use in Your Next Project](https://medium.com/better-programming/8-amazing-swiftui-libraries-to-use-in-your-next-project-52efaf211143) - Medium[@rudrankriyam](https://medium.com/@rudrankriyam)
* [Create a map view compatible with SwiftUI](https://docs.mapbox.com/help/tutorials/ios-swiftui/) - Mapbox
* [SwiftUI Architectures: Model-View, Redux & MVVM](https://quickbirdstudios.com/blog/swiftui-architecture-redux-mvvm/) - QuickBird Studios
* [Modern Dependency Injection in Swift](https://medium.com/better-programming/modern-dependency-injection-in-swift-952286b308be) - Medium[@michaellong](https://medium.com/@michaellong)
* [How to Speed Up SwiftUI Development and Testing Using PreviewSnapshots](https://doordash.engineering/2023/01/18/how-to-speed-up-swiftui-development-and-testing-using-previewsnapshots/) - DoorDash Engineering

## Samples
*  [Building Widgets Using WidgetKit and SwiftUI](https://developer.apple.com/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui) - Create widgets to show your app’s content on the Home screen, with custom intents for user-customizable settings.
*  [Fruta: Building a Feature-Rich App with SwiftUI](https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui) - Create a shared codebase to build a multiplatform app that offers widgets and an App Clip.
*  [Creating Accessible Views](https://developer.apple.com/documentation/accessibility/creating_accessible_views) - Make your app accessible to everyone by applying accessibility modifiers to your SwiftUI views.
* [MojtabaHs/iPhoneNumberField](https://github.com/MojtabaHs/iPhoneNumberField) - A SwiftUI text field view that formats your phone number as you type
* [devxoul/SwiftUITodo](https://github.com/devxoul/SwiftUITodo) - An example to-do list app using SwiftUI which is introduced in WWDC19
* [marty-suzuki/GitHubSearchWithSwiftUI](https://github.com/marty-suzuki/GitHubSearchWithSwiftUI) - SwiftUI and Combine based GitHubSearch example.
* [ra1028/SwiftUI-Combine-Example](https://github.com/ra1028/SwiftUI-Combine-Example) - This is an example project of SwiftUI and Combine using GitHub API.
* [timdonnelly/SwiftUITimeTravel](https://github.com/timdonnelly/SwiftUITimeTravel) - An experimental time traveling state store for SwiftUI
* [alexpaul/SwiftUI-Landmarks](https://github.com/alexpaul/SwiftUI-Landmarks) - Introducing SwiftUI. A declarative way to create User Interfaces with Swift.
* [Yohrd/iOS-Portfolio-Rodrigo](https://github.com/Yohrd/iOS-Portfolio-Rodrigo) - Portfolio criado em Swift 5.1 (Beta) e SwiftUI
* [ra1028/SwiftUI-Flux](https://github.com/ra1028/SwiftUI-Flux) - This is a tiny experimental application using SwiftUI with Flux architecture.
* [unixzii/SwiftUI-2048](https://github.com/unixzii/SwiftUI-2048) - A 2048 game writing with SwiftUI.
* [agiletalk/SwiftUINote](https://github.com/agiletalk/SwiftUINote) - Simple note app using SwiftUI
* [artemnovichkov/SwiftUI-by-Examples](https://github.com/artemnovichkov/SwiftUI-by-Examples) - Examples of new SwiftUI framework
* [jrtibbetts/TempusRomanumII](https://github.com/jrtibbetts/TempusRomanumII) - The SwiftUI implementation of TempusRomanum
* [hotchner/SwiftUICalculator](https://github.com/hotchner/SwiftUICalculator) - A calculator app using SwiftUI which is introduced in WWDC19
* [YOONMS/WWDCPlayer](https://github.com/YOONMS/WWDCPlayer) - WWDC19 player using SwiftUI 
* [leavenstee/InstaFake-Swift-UI](https://github.com/leavenstee/InstaFake-Swift-UI) - Swift UI Demo for an instagram copy
* [Dimillian/MovieSwiftUI](https://github.com/Dimillian/MovieSwiftUI) - SwiftUI & Combine app using MovieDB API
* [alexdrone/DispatchStore](https://github.com/alexdrone/DispatchStore) - Package that implements an operation based multi-store à-la Flux for SwiftUI.
* [miliPolo/SwiftUI_Jike](https://github.com/miliPolo/SwiftUI_Jike) - Build Jike App UI with SwiftUI
* [danielctull/SwiftUI-Tutorials](https://github.com/danielctull/SwiftUI-Tutorials) - All of the SwiftUI tutorials in one easy download.
* [robbiet480/TransitPal](https://github.com/robbiet480/TransitPal) - A open source Swift app for iOS 13 that allows you to check your NFC transit card information. Written with SwiftUI.
* [vinhnx/CombineUnsplash](https://github.com/vinhnx/CombineUnsplash) - Exploring SwiftUI + Combine + Result by using Unsplash API, with detailed code explaination
* [Jinxiansen/SwiftUI](https://github.com/Jinxiansen/SwiftUI) - SwiftUI Framework Learning and Usage Guide. 
* [StevenLambion/SwiftDux](https://github.com/StevenLambion/SwiftDux) - Redux inspired predictable state management for SwiftUI applications.
* [antgar/CombineMarbles-SwiftUI](https://github.com/antgar/CombineMarbles-SwiftUI) - Diagrams for the new Combine framework 
* [SwiftUIX/SwiftUIX](https://github.com/SwiftUIX/SwiftUIX) - An extension to the standard SwiftUI library
* [SwiftWebUI/SwiftWebUI](https://github.com/SwiftWebUI/SwiftWebUI) - A demo implementation of SwiftUI for the Web
* [pietropizzi/GridStack](https://github.com/pietropizzi/GridStack) - A flexible grid layout view for SwiftUI
* [nickffox/KeyboardObserving](https://github.com/nickffox/KeyboardObserving) - ⌨️A Combine-based way to observe and adjust for Keyboard notifications in SwiftUI
* [SwiftUIX/GoshDarnBugs](https://github.com/SwiftUIX/GoshDarnBugs) - A collection of bugs present in the SwiftUI beta.
* [luoxiu/CombineX](https://github.com/luoxiu/CombineX) - CombineX is an open source implementation for Apple's Combine specs.
* [alexejn/TypeYouCard](https://github.com/alexejn/TypeYouCard) - SwiftUI Paycard form
* [nalexn/clean-architecture-swiftui](https://github.com/nalexn/clean-architecture-swiftui) - Clean Architecture for SwiftUI demo app
* [nalexn/ViewInspector](https://github.com/nalexn/ViewInspector) - Runtime inspection and unit testing of SwiftUI views
* [muukii/Verge](https://github.com/muukii/Verge) - iOS + Flux - Verge is a state management tools (Store, ViewModel, ORM, Reactive) on iOS App (UIKit / SwiftUI)
* [apptekstudios/ASCollectionView](https://github.com/apptekstudios/ASCollectionView) - A SwiftUI collection view
* [siteline/SwiftUI-Introspect](https://github.com/siteline/SwiftUI-Introspect) - Introspect underlying UIKit components from SwiftUI
* [dmytro-anokhin/url-image](https://github.com/dmytro-anokhin/url-image) - Asynchronous image loading in SwiftUI
* [hbmartin/Directory-SwiftUI](https://github.com/hbmartin/Directory-SwiftUI) - A card interface contacts app built on Core Data and Alamofire
* [onurhuseyincantay/Hover](https://github.com/onurhuseyincantay/Hover) - Hover an async combine supported network library
* [joehinkle11/Lazy-Pop-SwiftUI](https://github.com/joehinkle11/Lazy-Pop-SwiftUI) Modifier that allows swiping on any part of the screen to start an interruptible pop animation to the previous view.
* [joehinkle11/Login-with-Apple-Firebase-SwiftUI](https://github.com/joehinkle11/Login-with-Apple-Firebase-SwiftUI) SwiftUI component that handles logging in with Apple into Firebase. Complete tutorial in the README.
* [Cay-Zhang/SwiftSpeech](https://github.com/Cay-Zhang/SwiftSpeech) - A speech recognition framework designed for SwiftUI
* [Zaprogramiacz/GrowingTextView](https://github.com/Zaprogramiacz/GrowingTextView) - Growing text view implementation in SwiftUI
* [mythxn/DesignCode-SwiftUI](https://github.com/mythxn/DesignCode-SwiftUI) - 📱 An app fully written in SwiftUI showcasing beautiful design and animations.
* [carson-katri/reddit-swiftui](https://github.com/carson-katri/reddit-swiftui) - A cross-platform Reddit client built in SwiftUI
* [mecid/swiftui-recipes-app](https://github.com/mecid/swiftui-recipes-app) - Recipes app written in SwiftUI using Single State Container
* [sgr-ksmt/FireTodo](https://github.com/sgr-ksmt/FireTodo) - Simple Todo Application using SwiftUI / Firebase / Redux.
* [caiobzen/water-reminder-swiftui](https://github.com/caiobzen/water-reminder-swiftui) - A simple Apple Watch app to remind you to drink water!
* [simonboots/SwiftUIFourierSeries](https://github.com/simonboots/SwiftUIFourierSeries) - A Fourier Series visualisation written in Swift/SwiftUI
* [sindresorhus/Defaults](https://github.com/sindresorhus/Defaults#swiftui-support) - `@State` replacement for UserDefaults.
* [sindresorhus/Preferences](https://github.com/sindresorhus/Preferences#swiftui-support) - Create a good-looking preferences window for your macOS app in SwiftUI.
* [sindresorhus/KeyboardShortcuts](https://github.com/sindresorhus/KeyboardShortcuts) - User-customizable global keyboard shortcuts for your macOS app.
* [quassummanus/SVG-to-SwiftUI](https://github.com/quassummanus/SVG-to-SwiftUI) - SVG to SwiftUI Shape converter tool.
* [lorenzofiamingo/SharedObject](https://github.com/lorenzofiamingo/SwiftUI-SharedObject) - 🍱 A new property wrapper for SwiftUI `ObservableObject`.
* [stleamist/BetterSafariView](https://github.com/stleamist/BetterSafariView) - A better way to present a `SFSafariViewController` or start a `ASWebAuthenticationSession` in SwiftUI.
* [huybuidac/SwiftUIFontIcon](https://github.com/huybuidac/SwiftUIFontIcon) - Font icon for SwiftUI (Material icon, Ionicons, Font Awesome 5 Free)
* [SimformSolutionsPvtLtd/SSToastMessage](https://github.com/SimformSolutionsPvtLtd/SSToastMessage) - 📱 An library writtern in purly in SwiftUI to show `toast, alert or floating message` with using modifier.
* [Zaprogramiacz/MGFlipView](https://github.com/Zaprogramiacz/MGFlipView) - MGFlipView allows to create flipping view in easy way without worrying about flipping animation and flipping logic.
* [VerticalTabView](https://github.com/lorenzofiamingo/SwiftUI-VerticalTabView) - 🔝 A native way to display paged vertical content in SwiftUI, using `TabView`.
* [SwiftUIKit](https://github.com/youjinp/SwiftUIKit) - A collection of missing SwiftUI components
* [huseyinbagana/TransactionAlert](https://github.com/huseyinbagana/TransactionAlert) - Simple SwiftUI Alert
* [philipturner/ar-multipendulum](https://github.com/philipturner/ar-multipendulum) - AR app using SwiftUI for touchscreen interface
* [philipturner/ARHeadsetKit](https://github.com/philipturner/ARHeadsetKit) - High-level AR framework for replicating Hololens, using SwiftUI instead of Storyboard
* [exyte/Grid](https://github.com/exyte/Grid) - Grid view inspired by CSS Grid and written with SwiftUI
* [lorenzofiamingo/CachedAsyncImage](https://github.com/lorenzofiamingo/SwiftUI-CachedAsyncImage) - 🗃️ The simplest way to add cache to your AsyncImage.
* [vinhnx/Clendar](https://github.com/vinhnx/Clendar) - Clendar - universal calendar app. Written in SwiftUI. Available on App Store. MIT License. 
* [zzanehip/The-OldOS-Project](https://github.com/zzanehip/The-OldOS-Project) - Recreating a fully functional version of iOS 4 in SwiftUI.
* [soundcloud/Axt](https://github.com/soundcloud/Axt) - SwiftUI view testing library
* [siteline/SwiftUI-Introspect](https://github.com/siteline/SwiftUI-Introspect) - Introspect underlying UIKit components from SwiftUI
* [joogps/SlideOverCard](https://github.com/joogps/SlideOverCard) - A SwiftUI card view, made great for setup interactions.
* [TokamakUI/Tokamak](https://github.com/TokamakUI/Tokamak) - SwiftUI-compatible framework for building browser apps with WebAssembly and native apps for other platforms
* [markiv/SwiftUI-Shimmer](https://github.com/markiv/SwiftUI-Shimmer) - Shimmer is a super-light modifier that adds a shimmering effect to any SwiftUI View, for example, to show that an operation is in progress. It works well on light and dark modes, and across iOS, macOS, tvOS and watchOS.

## Videos
* [Format phone numbers in SwiftUI](https://www.youtube.com/watch?v=4SnmiWFvolM&ab_channel=WhatisiSwiftUI%3F) - What is iSwiftUI

"
1496,A series of examples on how to TDD React,"# react-tdd-guide
A series of examples on how to TDD React

## Getting started

1. install [nvm](https://github.com/creationix/nvm)
- Grab an editor or IDE. I recommend Webstorm, Atom, and VIM, in that order.
- `git clone` ...
- `nvm install 4` OR if v4 of node.js is installed, `nvm use`
- `npm i`

## How to use this guide

Each section is broken out into its own folder, starting with [basics](https://github.com/zpratt/react-tdd-guide/tree/master/basics). What you'll find there is the finished example. I am experimenting with using the [commit history](https://github.com/zpratt/react-tdd-guide/commits/master/basics) and comments to drive the guide itself. Feedback on whether this works or not would be appreciated.

Each commit that is suffixed with **""- red""** can be checked out separately to examine the failing test. Each commit that is suffixed with **""- green""** shows how I finally passed the failing assertion.

Looking at the history for each section will show you only the steps needed to drive that part of the application.

## Philosophy

* Avoid the need for runners and browsers
  * Achieved by using jest and [react-testing-library](https://testing-library.com/docs/react-testing-library/intro)

## Table of Contents

* [Basics](https://github.com/zpratt/react-tdd-guide/commits/master/basics) - Steps for TDD'ing the simplest of React components: An unordered list of items. Start here if you're not familiar with TDD'ing React and want to see a simple introduction.
  * [Running version](http://zpratt.github.io/react-tdd-guide/examples/basics/)
* [Simple event handling](https://github.com/zpratt/react-tdd-guide/commits/master/event-handling) (WIP)
* [Simple stateful input](https://github.com/zpratt/react-tdd-guide/commits/master/state)
* Centralized state management techniques (not done)
* Redux (not done)
* React router (not done)

## Running the tests for a section

* `npm run <section name>`

## Running all tests

* `npm test`

## Contributing

Please feel free to open an issue for:

* A question on how to do something
* A request for further clarification

Use a pull request for

* Suggestions on changing how something is tested
* To add an example you think would be valuable

## Caveats

I am not a windows user, therefore this has only been tested on OSX.
"
573,"A lightweight free Spotify 🎧 crossplatform-client 🖥📱 which handles playback manually, streams music using Youtube & no Spotify premium account is needed 😱","<p align=""center""><img width=""700"" src=""assets/spotube_banner.png"" alt=""Spotube Logo""></p>

<p align=""center"">
  <a href=""https://spotube.netlify.app/"">spotube.netlify.app</a>
</p>

<p align=""center"">
  <a href=""https://github.com/KRTirtho/spotube/actions/workflows/spotube-nightly.yml"">
    <img alt=""GitHub Workflow Status"" src=""https://img.shields.io/github/actions/workflow/status/KRTirtho/spotube/spotube-nightly.yml?color=1585be&style=flat-square"">
  </a>
  <a href=""https://github.com/KRTirtho/Spotube/releases"">
    <img alt=""GitHub release"" src=""https://img.shields.io/github/v/release/KRTirtho/spotube?color=1585be&style=flat-square""/>
  </a>
  <a href=""LICENSE"">
    <img alt=""License"" src=""https://img.shields.io/aur/license/spotube-bin?color=1585be&style=flat-square""/>
  </a>
  <a href=""https://github.com/KRTirtho"">
    <img alt=""Maintainer"" src=""https://img.shields.io/badge/Maintainer-KRTirtho-1585be?style=flat-square""/>
  </a>
  <a href=""https://opencollective.com/spotube"">
    <img alt=""Open Collective backers and sponsors"" src=""https://img.shields.io/opencollective/all/spotube?color=1585be&style=flat-square""/>
  </a>
  <a href=""https://discord.gg/uJ94vxB6vg"">
    <img alt=""Discord"" src=""https://img.shields.io/discord/1012234096237350943?color=1585be&label=Discord%20Server&logoColor=1585be&style=flat-square"">
  </a>
</p>


Spotube is a [Flutter](https://flutter.dev) based lightweight spotify client. It utilizes the power of Spotify & Youtube's public API & creates a hazardless, performant & resource friendly User Experience

#### <p align=""center"">Desktop</p>

![Application Desktop Screenshot](assets/spotube-screenshot.jpg)

#### <p align=""center"">Mobile</p>

![Application Mobile Screenshot](assets/mobile-screenshots/mobile-combined.jpg)

<p align=""center"">
  <a href=""https://discord.gg/uJ94vxB6vg"">
    <img src=""https://discord.com/api/guilds/1012234096237350943/widget.png?style=banner2"">
  </a>
</p>

# Features

Following are the features that currently spotube offers:

- Open Source
- Anonymous/Guest Login
- Cross platform
- No telemetry, diagnostics or user data collection
- Lightweight & resource friendly
- Native performance (Thanks to Flutter+Skia)
- Playback control is on user's machine instead of server based
- Small size & less data hungry
- No spotify or youtube ads since it uses all public & free APIs (But it's recommended to support the creators by watching/liking/subscribing to the artists youtube channel or add as favourite track in spotify. Mostly buying spotify premium is the best way to support their valuable creations)
- Synced Lyrics
- Downloadable track

# Support this project

<a href=""https://patreon.com/krtirtho""><img src=""https://user-images.githubusercontent.com/61944859/180249027-678b01b8-c336-451e-b147-6d84a5b9d0e7.png"" width=""250""/></a>
[![""Donate to out Collective""](https://opencollective.com/spotube/donate/button.png?color=blue)](https://opencollective.com/spotube)
[![""Buy Me A Coffee""](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/krtirtho)

# Installation

I'm always releasing newer versions of binary of the software each 2-3 month with minor changes & each 6-8 month with major changes. Grab the binaries

| Platform                                        | Package/Installation Method                                                                                                                                                                                                                                                                                               |
| ----------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Android                                         | [<img width='240' alt='Android Download' src='https://www.remcsteuben.com/sites/default/files/images/apkdaddy%20download.png'/>][android-dlink]<br/>[<img width='240' alt='Android Download' src='https://user-images.githubusercontent.com/61944859/174589876-bace24c0-b3fd-4c4a-bdb4-6fa82b5853ec.png'/>][fdroid-dlink] |
| Debian/Ubuntu                                   | [<img width='240' alt='Linux Debian/Ubuntu Download' src='https://user-images.githubusercontent.com/61944859/169097994-e92aff78-fd75-4c93-b6e4-f072a4b5a7ed.png'/>][deb-dlink] <br/> Then run: `sudo apt install Spotube-linux-x86_64.deb`                                                                                |
| Flatpak                                         | `flatpak install com.github.KRTirtho.Spotube` <br/> <a href='https://flathub.org/apps/details/com.github.KRTirtho.Spotube'><img width='240' alt='Download on Flathub' src='https://flathub.org/assets/badges/flathub-badge-en.png'/></a>                                                                                  |
| Arch/Manjaro                                    | pamac: `pamac install spotube-bin` <br/> yay: `yay -Sy spotube-bin`                                                                                                                                                                                                                                                       |
| AppImage                                        | [<img width='240' alt='AppImage Download' src='https://user-images.githubusercontent.com/61944859/169455015-13385466-8901-48fe-ba90-b62d58b0be64.png'/>][appimage-dlink]<br/> **Note**: AppImages require [appimage-launcher](https://github.com/TheAssassin/AppImageLauncher) to be installed                            |
| Linux (tarball)                                 | [<img width='240' alt='Tarball Download' src='https://user-images.githubusercontent.com/61944859/169456985-e0ba1fd4-10e8-4cc0-ab94-337acc6e0295.png'/>][linux-dlink]                                                                                                                                                      |
| Windows                                         | [<img width='240' alt='Windows Download' src='https://get.todoist.help/hc/article_attachments/4403191721234/WindowsButton.svg'/>][win32-dlink]                                                                                                                                                                            |
| Windows (Chocolatey)                            | `choco install spotube`                                                                                                                                                                                                                                                                                                   |
| Windows (<a href=""https://scoop.sh/"">Scoop</a>) | `scoop bucket add extras`  <br/> `scoop install spotube`                                                                                                                                                                                                                                                                  |
| Windows (WinGet)                                | `winget install --id KRTirtho.Spotube`                                                                                                                                                                                                                                                                                    |
| MacOS                                           | [<img width='240' alt='MacOS Download' src='https://reachify.io/wp-content/uploads/2018/09/mac-download-button-1.png'/>][mac-dlink]                                                                                                                                                                                       |

> **Note!:** If you don't understand this download table. You can read [installation instructions][wiki-installation-instructions] from the wiki

## Nightly Builds
Get the latest nightly builds of Spotube [here](https://github.com/KRTirtho/spotube/releases/tag/nightly)

# TODO:
- [ ] Windows OS Media Control & Media Keys Support
- [ ] Spotify Listen Along
- [x] Skip non-music sections from Audio Track
- [ ] Language Translations/Localization

# Building from source

You can find the details [here](CONTRIBUTION.md#your-first-code-contribution)

# Things that don't work

- Shows & Podcasts aren't supported as it'd require premium anyway

# License

[BSD-4-Clause](/LICENSE)

But why? You can learn about it [here](https://dev.to/krtirtho/choosing-open-source-license-wisely-1m3p)

# Financial Contributors
## Backers
![Backers](https://opencollective.com/spotube/backer.svg?button=false)
![Donors](https://opencollective.com/spotube/tiers/donor.svg?button=false)

## Sponsors
![Donors](https://opencollective.com/spotube/tiers/sponsor.svg)

# Library/Plugin/Framework Credits

- [Flutter](https://flutter.dev/) - Flutter transforms the app development process. Build, test, and deploy beautiful mobile, web, desktop, and embedded apps from a single codebase
- [Linux](https://www.linux.org/) - Linux is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged in a Linux distribution
- [AUR](https://aur.archlinux.org/) - AUR stands for Arch User Repository. It is a community-driven repository for Arch-based Linux distributions users
- [Flatpak](https://flatpak.org/) - Flatpak is a utility for software deployment and package management for Linux
- [rentanadviser](https://www.rentanadviser.com/) - Generous Synced lyrics API provider service
- [SponsorBlock](https://sponsor.ajay.app/) - SponsorBlock is an open-source crowdsourced browser extension and open API for skipping sponsor segments in YouTube videos.
- [spotify (dart)](https://github.com/rinukkusu/spotify-dart) - A dart library for interfacing with the Spotify API
- [audioplayers](https://github.com/bluefireteam/audioplayers) - A Flutter plugin to play multiple audio files simultaneously (Android/iOS)
- [youtube_explode_dart](https://github.com/Hexer10/youtube_explode_dart) - YoutubeExplode is a library that provides an interface to query metadata of YouTube videos, playlists and channels, as well as to resolve and download video streams and closed caption tracks
- [bitsdojo_window](https://github.com/bitsdojo/bitsdojo_window) - A Flutter package that makes it easy to customize and work with your Flutter desktop app window on Windows, macOS and Linux
- [Inno Setup](https://jrsoftware.org/isinfo.php) - Inno Setup is a free installer for Windows programs by Jordan Russell and Martijn Laan
- [collection](https://github.com/dart-lang/collection) - The collection package for Dart contains a number of separate libraries with utility functions and classes that makes working with collections easier 
- [flutter_riverpod](https://riverpod.dev/) - A Reactive Caching and Data-binding Framework
- [flutter_hooks](https://github.com/rrousselGit/flutter_hooks) - React hooks for Flutter. Hooks are a new kind of object that manages a Widget life-cycles. They are used to increase code sharing between widgets and as a complete replacement for StatefulWidget
- [hooks_riverpod](https://riverpod.dev/) - Riverpod with hooks
- [go_router](https://github.com/flutter/packages/tree/main/packages/go_router) - A declarative router for Flutter based on Navigation 2 supporting deep linking, data-driven routes and more
- [palette_generator](https://github.com/flutter/packages/tree/main/packages/palette_generator) - Flutter package for generating palette colors from a source image.
- [logger](https://github.com/leisim/logger) - Small, easy to use and extensible logger which prints beautiful logs
- [flutter_launcher_icons](https://github.com/fluttercommunity/flutter_launcher_icons) - A package which simplifies the task of updating your Flutter app's launcher icon.
- [permission_handler](https://github.com/baseflow/flutter-permission-handler) - Permission plugin for Flutter. This plugin provides a cross-platform (iOS, Android) API to request and check permissions. 
- [marquee](https://github.com/MarcelGarus/marquee) - ⏩ A Flutter widget that scrolls text infinitely. Provides many customizations including custom scroll directions, durations, curves as well as pauses after every round
- [scroll_to_index](https://github.com/quire-io/scroll-to-index) - scroll to index with fixed/variable row height inside Flutter scrollable widget 
- [package_info_plus](https://github.com/fluttercommunity/plus_plugins/tree/main/packages/) - This Flutter plugin provides an API for querying information about an application package.
- [version](https://github.com/dartninja/version) - A dart library providing a Version class 
- [audio_service](https://github.com/ryanheise/audio_service) - Flutter plugin to play audio in the background while the screen is off.
- [skeleton_text](https://github.com/101Loop/Skeleton-Text) - Flutter package for Skeleton Text Animation
- [hive](https://github.com/hivedb/hive) - Lightweight and blazing fast key-value database written in pure Dart. 
- [dbus](https://github.com/canonical/dbus.dart) - Native Dart client library to use DBus
- [introduction_screen](https://github.com/pyozer/introduction_screen) - Add easily to your app an introduction screen to provide informations to new users
- [audio_session](https://github.com/ryanheise/audio_session) - Sets the iOS audio session category and Android audio attributes for your app, and manages your app's audio focus, mixing and ducking behaviour.
- [file_picker](https://github.com/miguelpruivo/flutter_file_picker) - A Flutter plugin to let users pick a file from the file system, be it from a local storage or a remote one (e.g. Google Drive, Dropbox, iCloud, etc).
- [popover](https://github.com/minikin/popover) - Popover for Flutter. A popover is a transient view that appears above other content onscreen when you tap a control or in an area. 
- [queue](https://github.com/rknell/dart_queue) - A library to easily handle sequential queueing of futures in dart
- [auto_size_text](https://github.com/leisim/auto_size_text) - Flutter widget that automatically resizes text to fit perfectly within its bounds.
- [badges](https://github.com/yako-dev/flutter_badges) - A flutter package for creating badges.
- [mime](https://github.com/dart-lang/mime) - Dart package for working with MIME type definitions and for processing streams of MIME multipart media types.
- [metadata_god](https://github.com/KRTirtho/metadata_god) - Audio file Metadata reading and writing library for Flutter 
- [visibility_detector](https://github.com/google/flutter.widgets/tree/master/packages/visibility_detector) - A widget that detects the visibility of its child and notifies a callback
- [fl_query](https://github.com/KRTirtho/fl-query) - Asynchronous data caching, refetching & invalidation library for Flutter
- [fl_query_hooks](https://github.com/KRTirtho/fl-query/tree/main/packages/fl_query_hooks) - Elite flutter_hooks compatible library for fl_query, the Asynchronous data caching, refetching & invalidation library for Flutter
- [flutter_inappwebview](https://github.com/pichillilorenzo/flutter_inappwebview) - A Flutter plugin that allows you to add an inline webview, to use a headless webview, and to open an in-app browser window

# The Team

- [Kingkor Roy Tirtho](https://github.com/KRTirtho) - The Founder, Maintainer and Lead Developer
- [Owen Conor](https://github.com/owencz1998) - The Cool Discord Moderator
- [Piotr Rogowski](https://github.com/karniv00l) - The MacOS Developer
- [Rusty Apple](https://github.com/RustyApple) - The Mysterious Unknown Guy

# Social handlers

Follow me on [Twitter](https://twitter.com/@krtirtho) for newer updates about this application


<p align=""center"">&copy; 2022 Spotube</p>


<!-- Variables/Text References -->
[win32-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-windows-x86_64-setup.exe
[deb-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.deb
[linux-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.tar.xz
[appimage-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-linux-x86_64.AppImage
[mac-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-macos-x86_64.dmg
[android-dlink]: https://github.com/KRTirtho/spotube/releases/latest/download/Spotube-android-all-arch.apk
[fdroid-dlink]: https://f-droid.org/packages/oss.krtirtho.spotube/

[wiki-installation-instructions]: https://github.com/KRTirtho/spotube/wiki/Installation-Instrcutions
"
2438,Learn how to bring animation to your web projects,"# CSS Animation 101

![](https://github.com/cssanimation/css-animation-101/raw/master/images/cover-small.png)

Animation using CSS can be overwhelming to learn all at once.

This book gives you a solid introduction to the topic, combining theory with practical lessons. You’ll learn how, and why to use animation on your web pages and hopefully be inspired to try it on your own projects!

## Download

* [ePub version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/epub/cssanimation-101.epub) 
* [PDF version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/pdf/cssanimation-101.pdf)
* [Web version](https://cssanimation.rocks/css-animation-101/)

Find more including free tutorials and other courses at [CSSAnimation.rocks](https://cssanimation.rocks).

## More CSS Animation stuff

I have a great [video course on CSS Animation](https://www.udemy.com/course/level-up-your-css-animation-skills/) you should totally check out. You'll find it a practical guide to building and animating all sorts of parts of a landing page.

I also send out a free weekly [CSS Animation newsletter](https://cssanimation.rocks/weekly/). Sign up and get an email of cool inspiration in your inbox each week.

Lastly, if you want to help me with the above, consider [being a CSS Animation patreon](https://www.patreon.com/cssanimation). I've been running the newsletter for approaching 3 years and will continue to do so thanks to the support of people like you!

## Translations

Want to create a translation? Some tips:

* Fork this repo and rename it `css-animation-101-xx` where `xx` is your language code, such as `cn` or `ru`
* Translate the `chapters` content as well as the meta information
* Don't forget the `ReadMe` file also. Be sure to include a link back to this repo and the site CSSAnimation.rocks.
* Let me know [on Twitter](https://twitter.com/cssanimation) or [by email](mailto:donovan@cssanimation.rocks) and I'll link your work from here

You can find this book in the following languages:

### 中文 (Chinese) 

[Source files](https://github.com/H-Wakanda/css-animation-101-cn)

* [ePub version](https://github.com/H-Wakanda/css-animation-101-cn/raw/master/build/epub/book.epub)
* [Web version](https://h-wakanda.github.io/css-animation-101-cn/)

### العربية (Arabic) 

* [PDF version](https://github.com/cssanimation/css-animation-101/raw/master/downloads/translations/arabic/CSS-Animation-Arabic.pdf): Translated by [@HsoubAcademy](http://academy.hsoub.com)

## Contributing

I love to get feedback, even if just to helpfully point out a typo! Pull requests welcomed, or else you can message me [on Twitter](https://twitter.com/cssanimation) or [by email](mailto:donovan@cssanimation.rocks).

## Technical details

This book is generated with [Pandoc book template](https://github.com/wikiti/pandoc-book-template).

## License

[Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/)
"
1135,"An open-source, next-generation ""runc"" that empowers rootless containers to run workloads such as Systemd, Docker, Kubernetes, just like VMs.","<p align=""center"">
    <img alt=""sysbox"" src=""./docs/figures/sysbox-ce-header.png""/>
</p>

<p align=""center"">
    <a href=""https://github.com/nestybox/sysbox/blob/master/LICENSE""><img alt=""GitHub license"" src=""https://img.shields.io/github/license/nestybox/sysbox""></a>
    <a href=""https://travis-ci.com/nestybox/sysbox"">
    <img src=""https://img.shields.io/circleci/project/github/badges/shields/master"" alt=""build status""></a>
    <a href=""https://nestybox-support.slack.com/join/shared_invite/enQtOTA0NDQwMTkzMjg2LTAxNGJjYTU2ZmJkYTZjNDMwNmM4Y2YxNzZiZGJlZDM4OTc1NGUzZDFiNTM4NzM1ZTA2NDE3NzQ1ODg1YzhmNDQ#"">
    <img src=""https://img.shields.io/badge/chat-on%20slack-FF3386""></a>
</p>

***

**May 2022:**

**Docker advances container isolation and workloads with acquisition of Nestybox**:

Hi everyone, this is Cesar & Rodny, co-founders of [Nestybox](https://www.nestybox.com).

We are humbled and excited to announce that Nestybox is now officially part of
Docker, Inc! Docker is an excellent home for Sysbox and this will accelerate
innovation of Sysbox to advance container isolation and workloads.

Please see this [blog][docker-acquisition] and
this [Q&A](https://www.nestybox.com/docker-nestybox-qa) for more info. Thanks!
***

## Introduction

**Sysbox** is an open-source and free container runtime (a specialized ""runc""),
developed by [Nestybox](https://www.nestybox.com), that enhances containers in
two key ways:

*   **Improves container isolation:**

    *   Linux user-namespace on all containers (i.e., root user in the container
        has zero privileges on the host).

    *   Virtualizes portions of procfs & sysfs inside the container.

    *   Hides host info inside the container.

    *   Locks the container's initial mounts, and more.

*   **Enables containers to run same workloads as VMs**:

    *   With Sysbox, containers can run system-level software such as systemd,
        Docker, Kubernetes, K3s, buildx, legacy apps, and more seamlessly &
        securely.

    *   This software can run inside Sysbox containers without modification and
        without using special versions of the software (e.g., rootless
        variants).

    *   No privileged containers, no complex images, no tricky entrypoints, no
        special volume mounts, etc.

Think of it as a **""container supercharger""**: it enables your existing container
managers / orchestrators (e.g., Docker, Kubernetes, etc.) to deploy containers
that have hardened isolation and can run almost any workload that runs in VMs.

Sysbox does this by making the container resemble a VM-like environment as much
as possible, using advanced OS virtualization techniques.

Unlike alternative runtimes such as Kata and KubeVirt, **it does not use VMs**.
This makes it easier to use (particularly in cloud environments by avoiding
nested virtualization), although it does not provide the level of isolation
that VM-based runtimes do. See [here](#comparison-to-related-technologies) for a
comparison.

There is no need to learn new tools or modify your existing container images or
workflows to take advantage of Sysbox. Simply install it and point your container
manager / orchestrator to it to deploy enhanced containers.

Sysbox can live side-by-side with other container runtimes on the same host
(e.g., the default OCI runc, Kata, etc.) You can easily choose which containers
or pods to run with each, depending on your needs.

## Demo Videos

*   [""VM-like"" containers with Docker + Sysbox](https://asciinema.org/a/kkTmOxl8DhEZiM2fLZNFlYzbo?speed=2)

*   [Rootless Kubernetes pods with Sysbox](https://asciinema.org/a/401488?speed=1.5)

## Contents

*   [License](#license)
*   [Motivation](#motivation)
*   [How it Works](#how-it-works)
*   [Comparison to Related Technologies](#comparison-to-related-technologies)
*   [Audience](#audience)
*   [Sysbox Enterprise Edition](#sysbox-enterprise-edition)
*   [Sysbox Features](#sysbox-features)
*   [System Containers](#system-containers)
*   [Installation](#installation)
*   [Using Sysbox](#using-sysbox)
*   [Documentation](#documentation)
*   [Performance](#performance)
*   [Under the Covers](#under-the-covers)
*   [Contributing](#contributing)
*   [Security](#security)
*   [Troubleshooting & Support](#troubleshooting--support)
*   [Uninstallation](#uninstallation)
*   [Roadmap](#roadmap)
*   [Relationship to Nestybox](#relationship-to-nestybox)
*   [Contact](#contact)
*   [Thank You](#thank-you)

## License

Sysbox is free and open-source, licensed under the Apache License,
Version 2.0. See the [LICENSE](LICENSE) file for details.

## Motivation

Sysbox solves problems such as:

*   Enhancing the isolation of containerized microservices
    (root in the container maps to an unprivileged user on the host).

*   Enabling a highly capable root user inside the container without
    compromising host security.

*   Securing CI/CD pipelines by enabling Docker-in-Docker (DinD) or
    Kubernetes-in-Docker (KinD) without insecure privileged containers
    or host Docker socket mounts.

*   Enabling the use of containers as ""VM-like"" environments for development,
    local testing, learning, etc., with strong isolation and the ability
    to run systemd, Docker, IDEs, and more inside the container.

*   Running legacy apps inside containers (instead of less efficient VMs).

*   Replacing VMs with an easier, faster, more efficient, and more portable
    container-based alternative, one that can be deployed across cloud
    environments easily.

*   Partitioning bare-metal hosts into multiple isolated compute environments
    with 2X the density of VMs (i.e., deploy twice as many VM-like containers
    as VMs on the same hardware at the same performance).

*   Partitioning cloud instances (e.g., EC2, GCP, etc.) into multiple isolated
    compute environments without resorting to expensive nested virtualization.

## How it Works

<p align=""center"">
    <img alt=""sysbox"" src=""./docs/figures/sysbox-diagram.png""/>
</p>

Sysbox [installs easily](#installation) on Linux hosts (bare-metal, VM, on-prem, cloud, etc.). It
works on all mayor cloud-based IaaS and Kubernetes services (e.g., EC2, GCP, GKE,
EKS, AKS, Rancher, etc.)

Once installed, Sysbox works under the covers: you use Docker, Kubernetes, etc.
to deploy containers with it.

For example, this simple Docker command creates a container with Sysbox:

    $ docker run --runtime=sysbox-runc -it any_image

You get a well isolated container capable of seamlessly running most software
that runs in a VM (e.g., systemd, Docker, Kubernetes, etc).

More on how to use Sysbox [here](#using-sysbox).

## Comparison to Related Technologies

<p align=""center"">
    <img alt=""sysbox"" src=""./docs/figures/sysbox-comparison.png""/>
</p>

As shown, Sysbox enables unprivileged containers to run system-level workloads
such as systemd, Docker, Kubernetes, etc., seamlessly, while giving you a
balanced approach between container isolation, performance, efficiency, and
portability.

And it does this with minimal configuration changes to your existing infra: just
install Sysbox and configure your container manager/orchestrator to launch
containers with it, using the image of your choice.

Note that while Sysbox hardens the isolation of standard containers and voids
the need for insecure privileged containers in many scenarios, it does not (yet)
provide the same level of isolation as VM-based alternatives or user-space OSes
like gVisor. Therefore, for scenarios where the highest level of isolation is
required, alternatives such as KubeVirt may be preferable (at the expense of
lower performance and efficiency, and higher complexity and cost).

See this [blog post](https://blog.nestybox.com/2020/10/06/related-tech-comparison.html) for
more.

## Audience

The Sysbox project is intended for anyone looking to experiment, invent, learn,
and build systems using [system containers](#system-containers). It's
cutting-edge OS virtualization, and contributions are welcomed.

## Sysbox Enterprise Edition [DEPRECATED]

Prior to the [acquisition by Docker][docker-acquisition] on 05/2022, Nestybox
offered [Sysbox Enterprise][sysbox-ee-repo] as an enhanced version of Sysbox
(e.g., more security, more workloads, and official support).

After the acquisition however, Sysbox Enterprise is no longer offered as a
standalone product but has instead been incorporated into [Docker Desktop](https://www.docker.com/products/docker-desktop/)
(see [Docker Hardened Desktop](https://docs.docker.com/desktop/hardened-desktop/)).

**NOTE:** As Sysbox Enterprise is no longer offered as a standalone product, Docker
plans to make some Sysbox Enterprise features available in Sysbox Community
Edition. The features are TBD and [your feedback](#contact) on this is welcome.

## Sysbox Features

The table below summarizes the key features of the Sysbox container runtime.

It also provides a comparison between the Sysbox Community Edition (i.e., this
repo) and the previously available Sysbox Enterprise Edition.

<p align=""center"">
    <img alt=""sysbox"" src=""./docs/figures/sysbox-features.png"" width=""1000"" />
</p>

More on the Sysbox features [here](docs/user-guide/features.md).

If you have questions, you can reach us [here](#contact).

## System Containers

We call the containers deployed by Sysbox **system containers**, to highlight the
fact that they can run not just micro-services (as regular containers do), but
also system software such as Docker, Kubernetes, Systemd, inner containers, etc.

More on system containers [here](docs/user-guide/concepts.md#system-container).

## Installation

### Host Requirements

The Sysbox host must meet the following requirements:

*   It must be running one of the [supported Linux distros](docs/distro-compat.md)
    and be a machine with a [supported architecture](docs/arch-compat.md) (e.g., amd64, arm64).

*   We recommend a minimum of 4 CPUs (e.g., 2 cores with 2 hyperthreads) and 4GB
    of RAM. Though this is not a hard requirement, smaller configurations may
    slow down Sysbox.

### Installing Sysbox

The method of installation depends on the environment where Sysbox will be
installed:

*   To install Sysbox on a Kubernetes cluster, use the [sysbox-deploy-k8s daemonset](docs/user-guide/install-k8s.md).

*   Otherwise, use the [Sysbox package](docs/user-guide/install-package.md) for
    your distro.

*   Alternatively, if a package for your distro is not yet available, or if you
    want to get the latest changes from upstream, you can [build and install Sysbox from source](docs/developers-guide/README.md).

## Using Sysbox

Once Sysbox is installed, you create a container using your container manager
or orchestrator (e.g., Docker or Kubernetes) and an image of your choice.

Docker command example:

```console
$ docker run --runtime=sysbox-runc --rm -it --hostname my_cont registry.nestybox.com/nestybox/ubuntu-bionic-systemd-docker
root@my_cont:/#
```

Kubernetes pod spec example:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: ubu-bio-systemd-docker
  annotations:
    io.kubernetes.cri-o.userns-mode: ""auto:size=65536""
spec:
  runtimeClassName: sysbox-runc
  containers:
  - name: ubu-bio-systemd-docker
    image: registry.nestybox.com/nestybox/ubuntu-bionic-systemd-docker
    command: [""/sbin/init""]
  restartPolicy: Never
```

You can choose whatever container image you want, Sysbox places no requirements
on the image.

Nestybox makes several reference images available in its [Dockerhub](https://hub.docker.com/u/nestybox)
and [GitHub Container Registry](https://github.com/orgs/nestybox/packages) repos. These are
images that typically include systemd, Docker, Kubernetes, and more inside the containers.
The Dockerfiles are [here](https://github.com/nestybox/dockerfiles/tree/master). Feel free
to use and modify per your needs.

## Documentation

We strive to provide good documentation; it's a key component of the Sysbox project.

We have several documents to help you get started and get the best out of
Sysbox.

*   [Sysbox Distro Compatibility Doc](docs/distro-compat.md)

    *   Distro compatibility requirements. Check this out before installing Sysbox.

*   [Sysbox Quick Start Guide](docs/quickstart/README.md)

    *   Provides many examples for using Sysbox. New users should start here.

*   [Sysbox User Guide](docs/user-guide/README.md)

    *   Provides more detailed information on Sysbox installation,
        configuration, features and design.

*   [Nestybox blog site](https://blog.nestybox.com/)

    *   Articles on using Sysbox to solve real-life problems.

## Performance

Sysbox is fast and efficient, as described in this [Nestybox blog post](https://blog.nestybox.com/2020/09/23/perf-comparison.html).

The containers created by Sysbox have similar performance to those created by
the OCI runc (the default runtime for Docker and Kubernetes).

Even containers deployed inside the system containers have excellent
performance, thought there is a slight overhead for network IO (as expected
since packets emitted by inner containers go through an additional network
interface / bridge inside the system container).

Now, if you use Sysbox to deploy system containers that replace VMs, then the
performance and efficiency gains are significant: you can deploy 2X as many
system containers as VMs on the same server and get the same performance, and do
this with a fraction of the memory and storage consumption. The blog post
referenced above has more on this.

## Under the Covers

Sysbox was forked from the excellent [OCI runc][oci-runc] in early 2019 and it
stands on the shoulders of the work done by the OCI runc developers.

Having said this, Sysbox adds significant functionality on top. It's written in
Go, and it is currently composed of three components: sysbox-runc, sysbox-fs,
and sysbox-mgr.

Sysbox uses many OS-virtualization features of the Linux kernel and complements
these with OS-virtualization techniques implemented in user-space. These include
using all Linux namespaces (in particular the user-namespace), partial
virtualization of procfs and sysfs, selective syscall trapping, and more.

More on Sysbox's design can be found in the [Sysbox user guide](docs/user-guide/design.md).

### Sysbox does not use hardware virtualization

Though the containers generated by Sysbox resemble virtual machines in some ways
(e.g., you can run as root, run multiple services, and deploy Docker and K8s
inside), Sysbox does **not** use hardware virtualization.

Sysbox is a pure OS-virtualization technology meant to create containers that
can run applications as well as system-level software, easily and securely.

This makes the containers created by Sysbox fast, efficient, and portable (i.e.,
they aren't tied to a hypervisor).

Isolation wise, it's fair to say that Sysbox containers provide stronger
isolation than regular Docker containers (by virtue of using the Linux
user-namespace and light-weight OS shim), but weaker isolation than VMs (by
sharing the Linux kernel among containers).

## Contributing

We welcome contributions to Sysbox, whether they are small documentation changes,
bug fixes, or feature additions. Please see the [contribution guidelines](CONTRIBUTING.md)
and [developer's guide](docs/developers-guide/README.md) for more info.

## Security

See the User Guide's [Security Chapter](docs/user-guide/security.md) for
info on how Sysbox secures containers.

If you find bugs or issues that may expose a Sysbox vulnerability, please report
these by sending an email to security@nestybox.com. Please do not open security
issues in this repo. Thanks!

In addition, a few vulnerabilities have recently been found in the Linux kernel
that in some cases reduce or negate the enhanced isolation provided by Sysbox
containers. Fortunately they are all fixed in recent Linux kernels. See the
Sysbox User Guide's [Vulnerabilities & CVEs chapter](docs/user-guide/security-cve.md)
for more info, and reach out on the [Sysbox Slack channel][slack] for further questions.

## Troubleshooting & Support

Refer to the [Troubleshooting document](docs/user-guide/troubleshoot.md)
and to the [issues](https://github.com/nestybox/sysbox/issues) for help.

Reach us at our [slack channel][slack] for any questions.

## Uninstallation

Prior to uninstalling Sysbox, make sure all containers deployed with it are
stopped and removed.

The method of uninstallation depends on the method used to install Sysbox:

*   To uninstall Sysbox on a Kubernetes cluster, follow [these instructions](docs/user-guide/install-k8s.md#uninstallation).

*   Otherwise, to uninstall the Sysbox package, follow [these instructions](docs/user-guide/install-package.md#uninstallation).

*   If Sysbox was built and installed from source, follow [these instructions](docs/developers-guide/build.md#cleanup--uninstall).

## Roadmap

The following is a list of features in the Sysbox roadmap.

We list these here so that our users can get a better idea of where we
are going and can give us feedback on which of these they like best
(or least).

Here is a short list; the Sysbox issue tracker has many more.

*   Support for more Linux distros.

*   More improvements to procfs and sysfs virtualization.

*   Continued improvements to container isolation.

*   Exposing host devices inside system containers with proper permissions.

## Relationship to Nestybox & Docker

Sysbox was initially developed by [Nestybox](https://www.nestybox.com). As
[Nestybox is now part of Docker][docker-acquisition], Docker is the main sponsor
of the Sysbox project.

We encourage participation from the community to help evolve and improve Sysbox,
with the goal of increasing the use cases and benefits it enables. External
maintainers and contributors are welcomed.

## Contact

Slack: [Nestybox Slack Workspace][slack]

Email: contact@nestybox.com

We are available from Monday-Friday, 9am-5pm Pacific Time.

## Thank You

We thank you **very much** for using and/or contributing to Sysbox. We hope you
find it interesting and that it helps you use containers in new and more powerful
ways.

[slack]: https://nestybox-support.slack.com/join/shared_invite/enQtOTA0NDQwMTkzMjg2LTAxNGJjYTU2ZmJkYTZjNDMwNmM4Y2YxNzZiZGJlZDM4OTc1NGUzZDFiNTM4NzM1ZTA2NDE3NzQ1ODg1YzhmNDQ#/

[perf-blog]: https://blog.nestybox.com/2020/09/23/perf-comparison.html

[oci-runc]: https://github.com/opencontainers/runc

[sysbox-ee]: https://www.nestybox.com/sysbox-ee

[sysbox-ee-repo]: https://github.com/nestybox/sysbox-ee

[docker-acquisition]: https://www.docker.com/blog/docker-advances-container-isolation-and-workloads-with-acquisition-of-nestybox/

[docker-desktop]: https://www.docker.com/products/
"
1452,React.js Google Maps integration component,"# react-google-maps
> React.js Google Maps integration component

[![Version][npm-image]][npm-url] [![Travis CI][travis-image]][travis-url] [![Quality][codeclimate-image]][codeclimate-url] [![Coverage][codeclimate-coverage-image]][codeclimate-coverage-url] [![Dependencies][gemnasium-image]][gemnasium-url] [![Gitter][gitter-image]][gitter-url]


## [Introduction](https://tomchentw.github.io/react-google-maps/#introduction)


## [Installation](https://tomchentw.github.io/react-google-maps/#installation)


## [Usage & Configuration](https://tomchentw.github.io/react-google-maps/#usage--configuration)


## [Changelog][changelog-url]

The changelog is automatically generated via [standard-version][standard-version] and can be found in project root as well as npm tarball.


## [Demo App][demo-app-url]

* [Source code][demo-app-source]
* [CodeSandbox](https://codesandbox.io/s/2xyw6n4o9y)

## Getting Help

**Before doing this, did you**:

1. Read the [documentation](https://tomchentw.github.io/react-google-maps)
2. Read the [source code](https://github.com/tomchentw/react-google-maps)


_You can get someone's help in three ways_:

1. Ask on StackOverflow [with a google-maps tag](https://stackoverflow.com/questions/tagged/google-maps?sort=votes&pageSize=50) or [use react-google-maps as a keyword](https://stackoverflow.com/search?q=react-google-maps)
2. Ask in [the chat room][gitter-url]
3. Create a Pull Request with your solutions to your problem

Please, be noted, **no one**, I mean, **no one**, is obligated to help you in **ANY** means. Your time is valuable, so does our contributors. Don't waste our time posting questions like “how do I do X with React-Google-Maps” and “my code doesn't work”. This is not the primary purpose of the issue tracker. Don't abuse.


## For contributors

<details>
  <summary>Some simple guidelines</summary>

* **Don't** manually modify `lib` folder. They're generated during `yarn release` process
* Follow [conventional-commits-specification][conventional-commits-specification]
* [standard-version][standard-version]
* Auto generated: `src/macros` -> `src/components` -> `lib/components`
* Other components are manually maintained
* Use `yarn` and keep `yarn.lock` updated in PR
* Discuss! Discuss! Discuss!

</details>


[npm-image]: https://img.shields.io/npm/v/react-google-maps.svg?style=flat-square
[npm-url]: https://www.npmjs.org/package/react-google-maps

[travis-image]: https://img.shields.io/travis/tomchentw/react-google-maps.svg?style=flat-square
[travis-url]: https://travis-ci.org/tomchentw/react-google-maps
[codeclimate-image]: https://img.shields.io/codeclimate/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[codeclimate-coverage-image]: https://img.shields.io/codeclimate/coverage/github/tomchentw/react-google-maps.svg?style=flat-square
[codeclimate-coverage-url]: https://codeclimate.com/github/tomchentw/react-google-maps
[gemnasium-image]: https://img.shields.io/gemnasium/tomchentw/react-google-maps.svg?style=flat-square
[gemnasium-url]: https://gemnasium.com/tomchentw/react-google-maps
[gitter-image]: https://badges.gitter.im/Join%20Chat.svg
[gitter-url]: https://gitter.im/tomchentw/react-google-maps?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

[changelog-url]: https://github.com/tomchentw/react-google-maps/blob/master/CHANGELOG.md
[demo-app-url]: https://tomchentw.github.io/#/demos/react-google-maps
[demo-app-source]: https://github.com/tomchentw/tomchentw.github.io/blob/master/src/Pages/Demos/ReactGoogleMaps.jsx

[standard-version]: https://github.com/conventional-changelog/standard-version
[conventional-commits-specification]: https://conventionalcommits.org/
"
1469,"This is a code repository for the corresponding video tutorial. In this video, we're going to build a Modern UI/UX Restaurant Landing Page Website","# Restaurant Landing Page
### [Live Site](https://gericht-restaurant.com/)

![Restaurant Landing Page](https://i.ibb.co/5jxBKpw/image.png)

## Stay up to date with new projects
New major projects coming soon, subscribe to the mailing list to stay up to date https://resource.jsmasterypro.com/newsletter

## Introduction
This is a code repository for the corresponding video tutorial. In this video, we're going to build a Modern UI/UX Restaurant Landing Page Website

You might be wondering, what are the prerequisites for building such an amazing website? Don't worry, this course is completely beginner-friendly! We're going to start easy and them move to more complex topics. Every step of the way will be explained. Alongside building the website, you'll learn:

- React Functional components and their reusability
- React file and folder structure
- Fundamental CSS properties to master flex & grid
- Fundamentals of the CSS BEM Model
- From soft and pleasant animations to complex gradients
- Perfectly placed media queries for satisfactory responsiveness covering almost devices
- And at the end you'll learn how to deploy your websites to extremely fast servers and give them a custom domain name.
"
2431,Master the creation of Modern UX/UI Websites,"# Modern UI/UX GPT-3
### [Live Site](https://gpt3-jsm.com/)

![Modern UI/UX GPT-3](https://i.ibb.co/TR5LW9z/image.png)

## Stay up to date with new projects
New major projects coming soon, subscribe to the mailing list to stay up to date https://resource.jsmasterypro.com/newsletter

## Introduction
This is a code repository for the corresponding video tutorial. 

You might be wondering, what are the prerequisites for building such an amazing website? Don't worry, this course is completely beginner-friendly! We're going to start easy and them move to more complex topics. Every step of the way will be explained. Alongside building the website, you'll learn:

- React Functional components and their reusability
- React file and folder structure
- Fundamental CSS properties to master flex & grid
- Fundamentals of the CSS BEM Model
- From soft and pleasant animations to complex gradients
- Perfectly placed media queries for satisfactory responsiveness covering almost devices
- And at the end you'll learn how to deploy your websites to extremely fast servers and give them a custom domain name.
"
3137,A Git-compatible DVCS that is both simple and powerful,"# Jujutsu VCS

![](https://img.shields.io/github/license/martinvonz/jj) ![](https://img.shields.io/github/v/release/martinvonz/jj) ![](https://img.shields.io/github/release-date/martinvonz/jj) ![](https://img.shields.io/crates/v/jujutsu)
<br/>
![](https://github.com/martinvonz/jj/workflows/build/badge.svg) ![](https://img.shields.io/codefactor/grade/github/martinvonz/jj/main) ![](https://img.shields.io/librariesio/github/martinvonz/jj)

- [Disclaimer](#disclaimer)
- [Introduction](#introduction)
- [Status](#status)
- [Installation](#installation)
- [Command-line completion](#command-line-completion)
- [Getting started](#getting-started)
- [Related work](#related-work)

## Disclaimer

This is not a Google product. It is an experimental version-control system
(VCS). It was written by me, Martin von Zweigbergk (martinvonz@google.com). It
is my personal hobby project and my 20% project at Google. It does not indicate
any commitment or direction from Google. However, my presentation from Git Merge
2022 does include some information about Google's plans. See the
[slides](https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view)
or the [recording](https://www.youtube.com/watch?v=bx_LGilOuE4).


## Introduction

Jujutsu is a [Git-compatible](docs/git-compatibility.md)
[DVCS](https://en.wikipedia.org/wiki/Distributed_version_control). It combines
features from Git (data model,
[speed](https://github.com/martinvonz/jj/discussions/49)), Mercurial (anonymous
branching, simple CLI [free from ""the index""](docs/git-comparison.md#the-index),
[revsets](docs/revsets.md), powerful history-rewriting), and Pijul/Darcs
([first-class conflicts](docs/conflicts.md)), with features not found in most
of them ([working-copy-as-a-commit](docs/working-copy.md),
[undo functionality](docs/operation-log.md), automatic rebase,
[safe replication via `rsync`, Dropbox, or distributed file
system](docs/technical/concurrency.md)).

The command-line tool is called `jj` for now because it's easy to type and easy
to replace (rare in English). The project is called ""Jujutsu"" because it matches
""jj"".

If you have any questions, please join us on Discord
[![Discord](https://img.shields.io/discord/968932220549103686.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/dkmfj3aGQN).

## Features

### Compatible with Git

Jujutsu has two backends. One of them is a Git backend (the other is a native
one [^native-backend]). This lets you use Jujutsu as an alternative interface to Git. The commits
you create will look like regular Git commits. You can always switch back to
Git. The Git support uses the [libgit2](https://libgit2.org/) C library.

[^native-backend]: At this time, there's practically no reason to use the native
backend (the only minor reason might be
[#27](https://github.com/martinvonz/jj/issues/27)).
The backend exists mainly to make sure that it's possible to eventually add
functionality that cannot easily be added to the Git backend.

<img src=""demos/git_compat.png"" />

### The working copy is automatically committed

Most Jujutsu commands automatically commit the working copy. This leads to a
simpler and more powerful interface, since all commands work the same way on the
working copy or any other commit. It also means that you can always check out a
different commit without first explicitly committing the working copy changes
(you can even check out a different commit while resolving merge conflicts).

<img src=""demos/working_copy.png"" />

### Operations update the repo first, then possibly the working copy

The working copy is only updated at the end of an operation, after all other
changes have already been recorded. This means that you can run any command
(such as `jj rebase`) even if the working copy is dirty.

### Entire repo is under version control

All operations you perform in the repo are recorded, along with a snapshot of
the repo state after the operation. This means that you can easily revert to an
earlier repo state, or to simply undo a particular operation (which does not
necessarily have to be the most recent operation).

<img src=""demos/operation_log.png"" />

### Conflicts can be recorded in commits

If an operation results in conflicts, information about those conflicts will be
recorded in the commit(s). The operation will succeed. You can then resolve the
conflicts later. One consequence of this design is that there's no need to
continue interrupted operations. Instead, you get a single workflow for
resolving conflicts, regardless of which command caused them. This design also
lets Jujutsu rebase merge commits correctly (unlike both Git and Mercurial).

Basic conflict resolution:

<img src=""demos/resolve_conflicts.png"" />

Juggling conflicts:

<img src=""demos/juggle_conflicts.png"" />

### Automatic rebase

Whenever you modify a commit, any descendants of the old commit will be rebased
onto the new commit. Thanks to the conflict design described above, that can be
done even if there are conflicts. Branches pointing to rebased commits will be
updated. So will the working copy if it points to a rebased commit.

### Comprehensive support for rewriting history

Besides the usual rebase command, there's `jj describe` for editing the
description (commit message) of an arbitrary commit. There's also `jj diffedit`,
which lets you edit the changes in a commit without checking it out. To split
a commit into two, use `jj split`. You can even move part of the changes in a
commit to any other commit using `jj move`.


## Status

The tool is quite feature-complete, but some important features like (the
equivalent of) `git blame` are not yet supported. There
are also several performance bugs. It's also likely that workflows and setups
different from what the core developers use are not well supported.

I (Martin von Zweigbergk) have almost exclusively used `jj` to develop the
project itself since early January 2021. I haven't had to re-clone from source
(I don't think I've even had to restore from backup).

There *will* be changes to workflows and backward-incompatible changes to the
on-disk formats before version 1.0.0. Even the binary's name may change (i.e.
away from `jj`). For any format changes, we'll try to implement transparent
upgrades (as we've done with recent changes), or provide upgrade commands or
scripts if requested.


## Installation

See below for how to build from source. There are also
[pre-built binaries](https://github.com/martinvonz/jj/releases) for Windows,
Mac, or Linux (musl).

If you're installing from source, you need to use Rust version 1.61 or higher,
or you will get a cryptic message like this:
```
error: failed to select a version for the requirement `libgit2-sys = ""=0.14.0""``
candidate versions found which didn't match: 0.13.2+1.4.2, 0.13.1+1.4.2, 0.13.0+1.4.1, ...
```

### Linux

On most distributions, you'll need to build from source using `cargo` directly.

#### Build using `cargo`

First make sure that you have the `libssl-dev`, `openssl`, and `pkg-config`
packages installed by running something like this:
```shell script
sudo apt-get install libssl-dev openssl pkg-config
```

Now run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu
```


#### Nix OS

If you're on Nix OS you can use the flake for this repository.
For example, if you want to run `jj` loaded from the flake, use:

```shell script
nix run 'github:martinvonz/jj'
```

You can also add this flake url to your system input flakes. Or you can
install the flake to your user profile:

```shell script
nix profile install 'github:martinvonz/jj'
```


#### Homebrew

If you use linuxbrew, you can run:

```shell script
brew install jj
```


### Mac

#### Homebrew

If you use Homebrew, you can run:

```shell script
brew install jj
```

#### MacPorts

You can also install `jj` via [MacPorts](https://www.macports.org) (as the `jujutsu` port):

```shell script
sudo port install jujutsu
```

([port page](https://ports.macports.org/port/jujutsu/))

#### From Source

You may need to run some or all of these:
```shell script
xcode-select --install
brew install openssl
brew install pkg-config
export PKG_CONFIG_PATH=""$(brew --prefix)/opt/openssl@3/lib/pkgconfig""
```

Now run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu
```


### Windows

Run:
```shell script
cargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jujutsu --features vendored-openssl
```


## Initial configuration

You may want to configure your name and email so commits are made in your name.
Create a file at `~/.jjconfig.toml` and make it look something like
this:
```shell script
$ cat ~/.jjconfig.toml
[user]
name = ""Martin von Zweigbergk""
email = ""martinvonz@google.com""
```


## Command-line completion

To set up command-line completion, source the output of
`jj debug completion --bash/--zsh/--fish`. Exactly how to source it depends on
your shell.

### Bash
```shell script
source <(jj debug completion)  # --bash is the default
```

### Zsh
```shell script
autoload -U compinit
compinit
source <(jj debug completion --zsh | sed '$d')  # remove the last line
compdef _jj jj
```

### Fish
```shell script
jj debug completion --fish | source
```

### Xonsh
```shell script
source-bash $(jj debug completion)
```


## Getting started

The best way to get started is probably to go through
[the tutorial](docs/tutorial.md). Also see the
[Git comparison](docs/git-comparison.md), which includes a table of
`jj` vs. `git` commands.


## Related work

There are several tools trying to solve similar problems as Jujutsu. See
[related work](docs/related-work.md) for details.
"
2903,Algebraic graphs,"# Algebraic graphs

[![Hackage version](https://img.shields.io/hackage/v/algebraic-graphs.svg?label=Hackage)](https://hackage.haskell.org/package/algebraic-graphs) [![Build status](https://img.shields.io/github/workflow/status/snowleopard/alga/ci/master.svg)](https://github.com/snowleopard/alga/actions)

**Alga** is a library for algebraic construction and manipulation of graphs in Haskell. See
[this Haskell Symposium paper](https://github.com/snowleopard/alga-paper) and the
corresponding [talk](https://www.youtube.com/watch?v=EdQGLewU-8k) for the motivation
behind the library, the underlying theory and implementation details. There is also a
[Haskell eXchange talk](https://skillsmatter.com/skillscasts/10635-algebraic-graphs),
and a [tutorial](https://nobrakal.github.io/alga-tutorial) by Alexandre Moine.

## Main idea

Consider the following data type, which is defined in the top-level module
[Algebra.Graph](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html)
of the library:

```haskell
data Graph a = Empty | Vertex a | Overlay (Graph a) (Graph a) | Connect (Graph a) (Graph a)
```

We can give the following semantics to the constructors in terms of the pair **(V, E)** of graph *vertices* and *edges*:

* `Empty` constructs the empty graph **(∅, ∅)**.
* `Vertex x` constructs a graph containing a single vertex, i.e. **({x}, ∅)**.
* `Overlay x y` overlays graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey)**.
* `Connect x y` connects graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey ∪ Vx × Vy)**.

Alternatively, we can give an algebraic semantics to the above graph construction primitives by defining the following
type class and specifying a set of laws for its instances (see module [Algebra.Graph.Class](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html)):

```haskell
class Graph g where
    type Vertex g
    empty   :: g
    vertex  :: Vertex g -> g
    overlay :: g -> g -> g
    connect :: g -> g -> g
```

The laws of the type class are remarkably similar to those of a [semiring](https://en.wikipedia.org/wiki/Semiring),
so we use `+` and `*` as convenient shortcuts for `overlay` and `connect`, respectively:

* (`+`, `empty`) is an idempotent commutative monoid.
* (`*`, `empty`) is a monoid.
* `*` distributes over `+`, that is: `x * (y + z) == x * y + x * z` and `(x + y) * z == x * z + y * z`.
* `*` can be decomposed: `x * y * z == x * y + x * z + y * z`.

This algebraic structure corresponds to *unlabelled directed graphs*: every expression represents a graph, and every
graph can be represented by an expression. Other types of graphs (e.g. undirected) can be obtained by modifying the
above set of laws. Algebraic graphs provide a convenient, safe and powerful interface for working with graphs in Haskell,
and allow the application of equational reasoning for proving the correctness of graph algorithms.

To represent *non-empty graphs*, we can drop the `Empty` constructor -- see module
[Algebra.Graph.NonEmpty](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html).

To represent *edge-labelled graphs*, we can switch to the following data type, as
explained in my [Haskell eXchange 2018 talk](https://skillsmatter.com/skillscasts/12361-labelled-algebraic-graphs):

```haskell
data Graph e a = Empty
               | Vertex a
               | Connect e (Graph e a) (Graph e a)
```

Here `e` is the type of edge labels. If `e` is a monoid `(<+>, zero)` then graph overlay can be recovered
as `Connect zero`, and `<+>` corresponds to *parallel composition* of edge labels.

## How fast is the library?

Alga can handle graphs comprising millions of vertices and billions of edges in a matter of seconds, which is fast
enough for many applications. We believe there is a lot of potential for improving the performance of the library, and
this is one of our top priorities. If you come across a performance issue when using the library, please let us know.

Some preliminary benchmarks can be found [here](https://github.com/haskell-perf/graphs).

## Blog posts

The development of the library has been documented in the series of blog posts:
* Introduction: https://blogs.ncl.ac.uk/andreymokhov/an-algebra-of-graphs/
* A few different flavours of the algebra: https://blogs.ncl.ac.uk/andreymokhov/graphs-a-la-carte/
* Graphs in disguise or How to plan you holiday using Haskell: https://blogs.ncl.ac.uk/andreymokhov/graphs-in-disguise/
* Old graphs from new types: https://blogs.ncl.ac.uk/andreymokhov/old-graphs-from-new-types/

## Algebraic graphs in other languages

Algebraic graphs were implemented in a few other languages, including
[Agda](http://github.com/algebraic-graphs/agda),
[F#](https://github.com/algebraic-graphs/fsharp),
[Scala](http://github.com/algebraic-graphs/scala) and
[TypeScript](https://github.com/algebraic-graphs/typescript).
"
1286,Write microservices in monolithic style,"<p align=""center"">
  <img src=""doc/micromono-logo.png"" width=""200px""/>
</p>

# MicroMono
[![License MIT][license]](http://opensource.org/licenses/MIT)
[![NPM version][npm-image]][npm-url]
[![Build Status](https://travis-ci.org/lsm/micromono.svg?branch=master)](https://travis-ci.org/lsm/micromono)
[![Coverage Status](https://coveralls.io/repos/github/lsm/micromono/badge.svg?branch=master)](https://coveralls.io/github/lsm/micromono?branch=master)
[![Dependencies][dep-image]][dep-url]
[![Downloads][downloads-image]][npm-url]
[![Code Climate](https://codeclimate.com/github/lsm/micromono/badges/gpa.svg)](https://codeclimate.com/github/lsm/micromono)

MicroMono is a framework for developing **micro-services** in **monolithic** style or reversed. It allows you to **switch** and **mix** between micro-service/monolithic styles without changing the code. Before they were two things which always connected with **VS**. Now with **micromono** you have the ability to get the best of both worlds.

## Quick Start

The easiest way to use micromono is to install it through [npm](https://www.npmjs.com/):

`npm install micromono`

There are several demos in the [example folder](https://github.com/lsm/micromono/tree/master/example) to help you get started:

- **account** utilizes passport.js and exposes its authentication features as a service.
- **home** service uses the features provided by `account` service to protect a private page.
- **io** illustrates how to use socket.io (websocket) in your application.

You can simply clone this repository and follow the instruction in the example folder to play them on your own machine. The only requirement is Node.js.

*`Current implementation of micromono is purely in node.js and is still in its early stages.  It uses open standards and has a clearly defined service specification so porting to other languages and platforms is possible and encouraged.  We need your help to make it better.  Any suggestions, pull requests or thoughts are always welcome.  Don't forget to star it on GitHub or share it with others.`*


# Documentation

## Table Of Contents

- [Introduction](#doc_introduction)
- [The Big Picture](#doc_the_big_picture)
  - [Service](#doc_service)
    - [Define A Service](#doc_define_a_service)
    - [Service Initialization](#doc_service_initialization)
    - [Using Other Service](#doc_using_other_service)
    - [Service Adapter](#doc_service_adapter)
  - [Balancer](#doc_balancer)
    - [Using command line](#doc_using_command_line)
    - [With existing application](#doc_with_existing_application)
  - [Local And Remote](#doc_local_and_remote)
- [Web Framework](#doc_web_framework)
  - [Http Routing](#doc_http_routing)
  - [Middleware](#doc_middleware)
    - [Semi-remote Middleware](#doc_semi_remote_middleware)
    - [Fully-remote Middleware](#doc_fully_remote_middleware)
  - [Render Page](#doc_render_page)
  - [Framework Adapter](#doc_framework_adapter)
- [RPC](#doc_rpc)
- [Frontend Scripts Management](#doc_frontend_scripts_management)
- [Design](#doc_design)
  - [Service Announcement Specification](#doc_service_announcement_specification)


<a name=""doc_introduction""></a>
## Introduction

Monolithic structure is easy to understand and develop. Because, that is the way how we think when we are designing. But, it becomes a different story when it has more and more features or you want to deploy it to serve hundreds of thousands of users. Then there's micro-services architecture. It [has many benefits](http://eugenedvorkin.com/seven-micro-services-architecture-advantages/) in [different ways](http://damianm.com/articles/human-benefits-of-a-microservice-architecture/).  It becomes increasingly easier and more practical to apply these days due to the widely adopted container virtualization technologies (e.g. Docker & its ecosystem). But, the micro-services approach is also a [double-edged sword](http://martinfowler.com/articles/microservice-trade-offs.html) and it is of course [not a free lunch](http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html).  Sometimes you have to rewrite the entire application to meet the requirements of the new architecture.  Unfortunately, even with the rewrite, the application may not be as elegant and efficient as desired due to the complexity and the costs spiraling out of control.  **Micromono's goal is to provide you the flexibility to choose the trade-offs for different circumstances so you could enjoy the best of both worlds.**


<a name=""doc_the_big_picture""></a>
## The Big Picture

MicroMono involves 3 parts of application development:

- **Web framework** (http routing, middleware, page rendering etc.)
- **Remote procedure calls** (RPC)
- **Front-end code management** (static asset files of javacript/css).

Sounds familiar, right? MicroMono is built with proven, open source frameworks and libraries (e.g. [express](http://expressjs.org) and [JSPM](http://jspm.io/)).  You will find yourself right at home when working with MicroMono if you have ever used any of these tools before.

In MicroMono, there are 2 different types of components:
![](doc/images/1-components.png)
- **[Balancer](#doc_balancer)** serves requests directly from clients and proxies requests to the right services behind it.
- **[Service](#doc_service)** runs the code which provide the actual feature.

<a name=""#doc_service""></a>
### Service

A service is a standalone package which groups related features together as an unit. It could have only one RPC endpoint, or it may have a http routing code and client side dependencies. You can think of it as a **micro-monolithic application** with everything you need to run that part of the business logic.  In current node.js implementation it is also a npm package. So in the `package.json` file you can define npm dependencies as well as the required libraries for client-side code. But, this doesn't mean that you have to write your services in node.js. We will cover more about this topic in the [design section](#doc_design).

<a name=""doc_define_a_service""></a>
#### Define A Service

Here's an example that shows how to define a simple service which handles http request/response.

```javascript
// Require micromono and get the Service base class
var Service = require('micromono').Service;

// Subclass Service class to define your service
// (Backbone/Ampersand style inheritance)
var SimpleHttpService = Service.extend({
  // `route` is the object where you define all your routing handlers
  route: {
    'get::/hello/:name': function(req, res) {
      // Basically, this handler function will be directly attached to
      // internal express instance created by micromono. So, any express
      // route handler could be ported to micromono without any modification.
      var name = req.params.name;
      res.send('Hello, ' + name);
    }
  }
});
```

The `'get::/hello/:name': function(req, res){...}` part in above example equivalents to:

```javascript
var app = express();
app.get('/hello/:name', function(req, res){
  var name = req.params.name;
  res.send('Hello, ' + name);
});
```

For more detailed information about http routing, middleware or page rendering please go to [Web Framework](#doc_web_framework).

<a name=""doc_service_initialization""></a>
#### Service Initialization

Each service could have an initialization function `init`. You can do some preparation works here. For example, connect to database or setup internal express server. The `init` function takes no arguments and an instance of `Promise` could to be returned if have async operation in initialization. You need to resolve the returned `Promise` after the work has been done or reject it if there's an error. Let's see an example:

```javascript
var bodyParser = require('body-parser');
var Service = require('micromono').Service;
var MongoClient = require('mongodb').MongoClient;

module.exports = Service.extend({
  // initialization function takes no arguments
  init: function() {
    // get the internal express instance
    var app = this.app;
    // use a middleware
    app.use(bodyParser.json());

    var self = this;
    // create a new promise instance
    var promise = new Promise(function(resolve, reject){
      // do the async operation (connect)
      MongoClient.connect('127.0.0.1', function(err, db){
        if (err) {
          // reject the promise if there's an error
          reject(err);
          return;
        }
        self.db = db;
        // resolve when done
        resolve();
      });
    });
    // init function should return a promise no matter what
    return promise;
  }
});
```

<a name=""doc_service_adapter""></a>
#### Service Adapter

By default micromono uses expressjs to handle the web request, uses socket.io for RPC communication. But, people may have different opinions and everyone could be right even they have different preferences. Because, each combination of developers/teams/products is unique and the best choice is always the one that most *""fit""*. That's why we always put flexibility as a high priority factor being considered when designing micromono. We will cover more about this in [Web Framework Adapter](#doc_framework_adapter) and [RPC Adapter](#doc_rpc_adapter).

<a name=""doc_balancer""></a>
### Balancer

Balancer sits in front of all services which actually glues all the services together and boots up a **server** to serve requests directly from clients. You can use the command line command `micromono` to start up a balancer if you use micromono exclusively. Or you can have micromono running cohesively within your existing server by adding a few lines of code.

<a name=""doc_using_command_line""></a>
#### Using command line

First we need to install micromono globally:

`npm install -g micromono`

Then go to terminal and run:

`micromono --service service1 --service-dir ./services`

This tells micromono to start the balancer with `service1` and try to find the service in a local directory called `services`. If micromono failed to find the service from local machine it will try to find a service provider from local network. We will discuss more about running [Local And Remote](#doc_local_and_remote) services later.

<a name=""doc_with_existing_application""></a>
#### With existing application

The server code is very simple and straight forward. Below is an example shows how to use micromono together with express server.

```javascript
// Require micromono and call to get an instance
var micromono = require('micromono')();

// Require the services you need.
// In this step, micromono will attempt to locate the required package on your local machine.
// If it fails it will try to probe from the network.
micromono.require('home');
micromono.require('account');

// Create an express instance
// We don't alter the express instance, so you can do what ever you want
// to the express instance and they will work as expected.
var app = require('express')();

// start balancer with the express app
micromono.runBalancer(app).then(function(){
    // start serving requests
    app.listen(3000);
});
```

<a name=""doc_local_and_remote""></a>
## Local And Remote

![](doc/images/2-mixed.png)

As we mentioned at the beginning. The pros and cons of micro-services architecture are obvious and have been widely discussed. MicroMono allows you to **choose the right trade-offs for the right scenario**. If you application has 10 services, you may run all the 10 services on your local dev machine. Or run 1 service which you are developing locally and use the rest 9 of them (stable/finished services) remotely through network. Having a completely different setup for deployment or testing services in parallel? Imagination is your only limitation. The most critical thing is **being able to use any services locally or remotely without knowing the difference or changing the code**. MicroMono gives you this ability by rebuilding the exact service class based on service announcement. This is the most important feature MicroMono brings to the table and you won't feel it as MicroMono does the job behind the scenes. It is true no matter what you are dealing with: http request, RPC or front-end scripts.


<a name=""doc_web_framework""></a>
## Web Framework

MicroMono wraps a thin layer on top of the other frameworks (express by default). So, existing applications of supported frameworks should be able to easily be ported without any problems.  In this section we will go through 3 topics to understand the web framework part of MicroMono: **[http routing](#doc_http_routing)**, **[middleware](#doc_middleware)** and **[page rendering](#doc_render_page)**.

<a name=""doc_http_routing""></a>
### Http routing

As you can see in the earlier example. You could define http routing handlers by putting the definition in the 'route' object property when you extend the 'Service' with following format:

```javascript
route: {
  '[http method]::[matching string]': '[request handler function or array]',
  ...
}
```

- **object key** defines the http method and matching string separated with double colons.
- **value** could be a function which will be the handler of the path. Or array of functions which contains middleware functions as well as route handler.

Actually you want read more documentation of the framework being used to get better understanding of how routing works as micromono basically maps the definition directly to the underlying framework. Here is an example of using connect style middleware for a particular route:

```javascript
var bodyParser = require('body-parser');
var Service = require('micromono').Service;

module.exports = Service.extend({
  route: {
    // parse form data only for this path
    'post::/update':[bodyParser.urlencoded(), function(req, res){
      var body = req.body;
      // do something with body
      ...
    }]
  }
});
```
<a name=""doc_middleware""></a>
### Middleware

Normally, middleware is just piece of code which can be plugged-in into your routing system to modify the http request or response stream on the fly. In detail, there are 4 things you can alter:

- Request header (meta)
- Request body (stream)
- Response header (meta)
- Response body (stream)

Some middleware may modify all 4 of them, some may change 1 and some just need the information and do nothing (e.g. logging). Most middleware works fine locally, as they are just some code and don't require external/remote resources. But, some of them you may want to run remotely as services, due to the complexity of the configuration. In MicroMono in order to support remote middleware we separate them into 2 categories: **Semi-remote** and  **Fully-remote** middleware services.

*`Note: When we are talking about remote middleware we mean the ability to use that middleware remotely as a service. Which means you still can use them locally as any other normal middleware you have.`*

<a name=""doc_semi_remote_middleware""></a>
#### Semi-remote middleware

Semi-remote middleware modifies only the meta info of request/response or takes over the control of request/response completely. Authentication middleware would be a perfect example of this scenario. Let's take a closer look at the whole authentication process:

1. Auth middleware gets the request
2. Check if we can get/verify user info from the request data:

  2.1 Auth successfully, add user info to request and let the request keep going to the next middleware or routing handler.

  2.2 Auth failed, redirect request to a designated location (e.g. login page)

As we can see, if auth successfully the response stream of routing handler could be sent directly back to the client without going through the auth middleware. Or, the response from auth middleware would be sufficient to send to client without touching any other middleware or routing handler in the case of failure authentication. In MicroMono the above semi-remote authentication middleware works like this:

![](doc/images/3-middleware.png)

1. MicroMono server gets the request from client.
2. Proxy the request to right service.
3. Service gets the request and proxy the request to remote middleware.
4. Remote middleware does the work and responses to the service.
5. Depends on the response of remote middleware:

  5a. Request will be modified and will be passed to the next handler.

  5b. Response data from middleware will be sent back to the client directly and the original request will not go any further.

6. The route handler gets the requests and sends response back to micromono server.
7. Server gets the response and sends back to the client.

Please check out [example/account](https://github.com/lsm/micromono/tree/master/example/account) and [example/home](https://github.com/lsm/micromono/tree/master/example/home) to learn how to make and use a semi-remote middleware.

<a name=""doc_fully_remote_middleware""></a>
#### Fully-remote middleware

Fully-remote middleware is a normal middleware which requires the request/response data stream go through it during the entire life cycle. MicroMono only supports running fully-remote middleware in the balancer server. Service need to define which middleware to use by using the `use` property:

```javascript

var MyService = module.exports = Service.extend({
  packagePath: __dirname,
  baseUrl: '/myservice',
  use: {
    // tell micromono to use `layout` middleware at the balancer side
    // for request which matches url `/myservice/dashboard` (baseUrl + routeUrl).
    'layout': '/dashboard'
  },

  route: {
    '/dashboard': function (req, res) {
      // a template partial called `dashboard_tpl` will be rendered
      // and the result will be composed by `layout` middleware to generate the final page
      res.render('dashboard_tpl');
    }
  }
});

```

Having any kind of remote middleware will of course slow down the performance dramatically, but sometimes it's worth it, to reduce the complexity of deployment and provide a more modularized architecture. MicroMono is focused on giving you the most flexibility while allowing you to choose the trade-offs.

<a name=""doc_render_page""></a>
### Render Page

Page rendering is a common task for web framework and you will probably need some kind of template reuse if your application has multiple pages. A typical case is header, footer and layout templates which are shared among pages and each page only provides the different part. But, think about what we should do if these pages are rendered by different services which are not physically located on a same machine. A simple way is to have a copy of the shared template files for each service deployed. Or we can use the built-in middleware [layout](https://github.com/lsm/micromono/tree/master/lib/middleware/layout.js) to compose the contents of each page with shared templates:

![](doc/images/4-render-page.png)

```javascript

var Profile = module.exports = Service.extend({
  packagePath: __dirname,
  baseUrl: '/',

  use: {
    // tell micromono to use `layout` middleware at the balancer side
    // for request which matches following urls in the array.
    'layout': ['/profile', '/$']
  },

  route: {

    '/': function(req, res) {
      // response will be re-rendered by `layout` middleware in the balancer process
    },

    'get::/profile': function (req, res) {
      // response will be re-rendered by `layout` middleware in the balancer process
    },

    'post::/upload': function (req, res) {
      // this will not be touched by `layout` as it doesn't match the url
    }
  }
});
```

<a name=""doc_rpc""></a>
## RPC

![](doc/images/5-rpc.png)

<a name=""doc_frontend_scripts_management""></a>
## Frontend Scripts Management

![](doc/images/6-asset.png)

## Discuss

On hacker news: https://news.ycombinator.com/item?id=10157418

## License

MIT

[dep-url]: https://david-dm.org/lsm/micromono
[dep-image]: https://david-dm.org/lsm/micromono.svg
[npm-url]: https://npmjs.org/package/micromono
[npm-image]: http://img.shields.io/npm/v/micromono.svg
[license]: https://img.shields.io/npm/l/micromono.svg
[downloads-image]: http://img.shields.io/npm/dm/micromono.svg
"
2551,FUSE filesystem for LXC,"# lxcfs

## Introduction
LXCFS is a small FUSE filesystem written with the intention of making Linux
containers feel more like a virtual machine. It started as a side-project of
`LXC` but is useable by any runtime.

LXCFS will take care that the information provided by crucial files in `procfs`
such as:

```
/proc/cpuinfo
/proc/diskstats
/proc/meminfo
/proc/stat
/proc/swaps
/proc/uptime
/proc/slabinfo
/sys/devices/system/cpu/online
```

are container aware such that the values displayed (e.g. in `/proc/uptime`)
really reflect how long the container is running and not how long the host is
running.

Prior to the implementation of cgroup namespaces by Serge Hallyn `LXCFS` also
provided a container aware `cgroupfs` tree. It took care that the container
only had access to cgroups underneath it's own cgroups and thus provided
additional safety. For systems without support for cgroup namespaces `LXCFS`
will still provide this feature but it is mostly considered deprecated.

## Upgrading `LXCFS` without restart

`LXCFS` is split into a shared library (a libtool module, to be precise)
`liblxcfs` and a simple binary `lxcfs`. When upgrading to a newer version of
`LXCFS` the `lxcfs` binary will not be restarted. Instead it will detect that
a new version of the shared library is available and will reload it using
`dlclose(3)` and `dlopen(3)`. This design was chosen so that the fuse main loop
that `LXCFS` uses will not need to be restarted. If it were then all containers
using `LXCFS` would need to be restarted since they would otherwise be left
with broken fuse mounts.

To force a reload of the shared library at the next possible instance simply
send `SIGUSR1` to the pid of the running `LXCFS` process. This can be as simple
as doing:

    rm /usr/lib64/lxcfs/liblxcfs.so # MUST to delete the old library file first
    cp liblxcfs.so /usr/lib64/lxcfs/liblxcfs.so # to place new library file
    kill -s USR1 $(pidof lxcfs) # reload

### musl

To achieve smooth upgrades through shared library reloads `LXCFS` also relies
on the fact that when `dlclose(3)` drops the last reference to the shared
library destructors are run and when `dlopen(3)` is called constructors are
run. While this is true for `glibc` it is not true for `musl` (See the section
[Unloading libraries](https://wiki.musl-libc.org/functional-differences-from-glibc.html).).
So users of `LXCFS` on `musl` are advised to restart `LXCFS` completely and all
containers making use of it.

## Building

In order to build LXCFS install fuse and the fuse development headers according
to your distro. LXCFS prefers `fuse3` but does work with new enough `fuse2`
versions:

    git clone git://github.com/lxc/lxcfs
    cd lxcfs
    meson setup -Dinit-script=systemd --prefix=/usr build/
    meson compile -C build/
    sudo meson install -C build/

To build with sanitizers you have to specify `-Db_sanitize=...` option to `meson setup`.
For example, to enable ASAN and UBSAN:

    meson setup -Dinit-script=systemd --prefix=/usr build/ -Db_sanitize=address,undefined
    meson compile -C build/

## Usage
The recommended command to run lxcfs is:

    sudo mkdir -p /var/lib/lxcfs
    sudo lxcfs /var/lib/lxcfs

A container runtime wishing to use `LXCFS` should then bind mount the
approriate files into the correct places on container startup.

### LXC
In order to use lxcfs with systemd-based containers, you can either use
LXC 1.1 in which case it should work automatically, or otherwise, copy
the `lxc.mount.hook` and `lxc.reboot.hook` files (once built) from this tree to
`/usr/share/lxcfs`, make sure it is executable, then add the
following lines to your container configuration:
```
lxc.mount.auto = cgroup:mixed
lxc.autodev = 1
lxc.kmsg = 0
lxc.include = /usr/share/lxc/config/common.conf.d/00-lxcfs.conf
```

## Using with Docker

```
docker run -it -m 256m --memory-swap 256m \
      -v /var/lib/lxcfs/proc/cpuinfo:/proc/cpuinfo:rw \
      -v /var/lib/lxcfs/proc/diskstats:/proc/diskstats:rw \
      -v /var/lib/lxcfs/proc/meminfo:/proc/meminfo:rw \
      -v /var/lib/lxcfs/proc/stat:/proc/stat:rw \
      -v /var/lib/lxcfs/proc/swaps:/proc/swaps:rw \
      -v /var/lib/lxcfs/proc/uptime:/proc/uptime:rw \
      -v /var/lib/lxcfs/proc/slabinfo:/proc/slabinfo:rw \
      -v /var/lib/lxcfs/sys/devices/system/cpu:/sys/devices/system/cpu:rw \
      ubuntu:18.04 /bin/bash
 ```

 In a system with swap enabled, the parameter ""-u"" can be used to set all values in ""meminfo"" that refer to the swap to 0.

 sudo lxcfs -u /var/lib/lxcfs

## Swap handling
If you noticed LXCFS not showing any SWAP in your container despite
having SWAP on your system, please read this section carefully and look
for instructions on how to enable SWAP accounting for your distribution.

Swap cgroup handling on Linux is very confusing and there just isn't a
perfect way for LXCFS to handle it.

Terminology used below:
 - RAM refers to `memory.usage_in_bytes` and `memory.limit_in_bytes`
 - RAM+SWAP refers to `memory.memsw.usage_in_bytes` and `memory.memsw.limit_in_bytes`

The main issues are:
 - SWAP accounting is often opt-in and, requiring a special kernel boot
   time option (`swapaccount=1`) and/or special kernel build options
   (`CONFIG_MEMCG_SWAP`).

 - Both a RAM limit and a RAM+SWAP limit can be set. The delta however
   isn't the available SWAP space as the kernel is still free to SWAP as
   much of the RAM as it feels like. This makes it impossible to render
   a SWAP device size as using the delta between RAM and RAM+SWAP for that
   wouldn't account for the kernel swapping more pages, leading to swap
   usage exceeding swap total.

 - It's impossible to disable SWAP in a given container. The closest
   that can be done is setting swappiness down to 0 which severly limits
   the risk of swapping pages but doesn't eliminate it.

As a result, LXCFS had to make some compromise which go as follow:
 - When SWAP accounting isn't enabled, no SWAP space is reported at all.
   This is simply because there is no way to know the SWAP consumption.
   The container may very much be using some SWAP though, there's just
   no way to know how much of it and showing a SWAP device would require
   some kind of SWAP usage to be reported. Showing the host value would be
   completely wrong, showing a 0 value would be equallty wrong.

 - Because SWAP usage for a given container can exceed the delta between
   RAM and RAM+SWAP, the SWAP size is always reported to be the smaller of
   the RAM+SWAP limit or the host SWAP device itself. This ensures that at no
   point SWAP usage will be allowed to exceed the SWAP size.

 - If the swappiness is set to 0 and there is no SWAP usage, no SWAP is reported.
   However if there is SWAP usage, then a SWAP device of the size of the
   usage (100% full) is reported. This provides adequate reporting of
   the memory consumption while preventing applications from assuming more
   SWAP is available.
"
957,Cloudburst Nukkit - Nuclear-Powered Minecraft: Bedrock Edition Server Software,"![nukkit](.github/images/banner.png)

[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](LICENSE)
[![Build Status](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/badge/icon)](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/)
![Tests](https://img.shields.io/jenkins/t/https/ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master.svg)
[![Discord](https://img.shields.io/discord/393465748535640064.svg)](https://discord.gg/5PzMkyK)

Introduction
-------------

Nukkit is nuclear-powered server software for Minecraft: Pocket Edition.
It has a few key advantages over other server software:

* Written in Java, Nukkit is faster and more stable.
* Having a friendly structure, it's easy to contribute to Nukkit's development and rewrite plugins from other platforms into Nukkit plugins.

Nukkit is **under improvement** yet, we welcome contributions.

Links
--------------------

* __[News](https://nukkitx.com)__
* __[Forums](https://nukkitx.com/forums)__
* __[Discord](https://discord.gg/5PzMkyK)__
* __[Download](https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master)__
* __[Plugins](https://nukkitx.com/resources/categories/nukkit-plugins.1)__
* __[Wiki](https://nukkitx.com/wiki/nukkit)__

Build JAR file
-------------
- `git clone https://github.com/CloudburstMC/Nukkit`
- `cd Nukkit`
- `git submodule update --init`
- `chmod +x mvnw`
- `./mvnw clean package`

The compiled JAR can be found in the `target/` directory.

Running
-------------
Simply run `java -jar nukkit-1.0-SNAPSHOT.jar`.

Plugin API
-------------
Information on Nukkit's API can be found at the [wiki](https://nukkitx.com/wiki/nukkit/).

Docker
-------------

Running Nukkit in [Docker](https://www.docker.com/) (17.05+ or higher).

Build image from the source,

```
docker build -t nukkit .
```

Run once to generate the `nukkit-data` volume, default settings, and choose language,

```
docker run -it -p 19132:19132 -v nukkit-data:/data nukkit
```
Docker Compose
-------------

Use [docker-compose](https://docs.docker.com/compose/overview/) to start server on port `19132` and with `nukkit-data` volume,

```
docker-compose up -d
```

Kubernetes & Helm
-------------

Validate the chart:

`helm lint charts/nukkit`

Dry run and print out rendered YAML:

`helm install --dry-run --debug nukkit charts/nukkit`

Install the chart:

`helm install nukkit charts/nukkit`

Or, with some different values:

```
helm install nukkit \
  --set image.tag=""arm64"" \
  --set service.type=""LoadBalancer"" \
    charts/nukkit
```

Or, the same but with a custom values from a file:

```
helm install nukkit \
  -f helm-values.local.yaml \
    charts/nukkit
```

Upgrade the chart:

`helm upgrade nukkit charts/nukkit`

Testing after deployment:

`helm test nukkit`

Completely remove the chart:

`helm uninstall nukkit`


Contributing
------------
Please read the [CONTRIBUTING](.github/CONTRIBUTING.md) guide before submitting any issue. Issues with insufficient information or in the wrong format will be closed and will not be reviewed.
"
3440,A Unified Semi-Supervised Learning Codebase (NeurIPS'22),"<div id=""top""></div>
<!--
*** Thanks for checking out the Best-README-Template. If you have a suggestion
*** that would make this better, please fork the repo and create a pull request
*** or simply open an issue with the tag ""enhancement"".
*** Don't forget to give the project a star!
*** Thanks again! Now go create something AMAZING! :D
-->

<!-- PROJECT SHIELDS -->

<!--
*** I'm using markdown ""reference style"" links for readability.
*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).
*** See the bottom of this document for the declaration of the reference variables
*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.
*** https://www.markdownguide.org/basic-syntax/#reference-style-links
-->

[![Contributors][contributors-shield]][contributors-url]
[![Forks][forks-shield]][forks-url]
[![Stargazers][stars-shield]][stars-url]
[![Issues][issues-shield]][issues-url]
<!-- 
***[![MIT License][license-shield]][license-url]
-->

<!-- PROJECT LOGO -->

<br />
<div align=""center"">
  <a href=""https://github.com/microsoft/Semi-supervised-learning"">
    <img src=""figures/logo.png"" alt=""Logo"" width=""400"">
  </a>

<!-- <h3 align=""center"">USB</h3> -->

<p align=""center"">
    <strong>USB</strong>: A Unified Semi-supervised learning Benchmark for CV, NLP, and Audio Classification
    <!-- <br />
    <a href=""https://github.com/microsoft/Semi-supervised-learning""><strong>Explore the docs »</strong></a>
    <br /> -->
    <br />
    <a href=""https://arxiv.org/abs/2208.07204"">Paper</a>
    ·
    <a href=""https://github.com/microsoft/Semi-supervised-learning/tree/main/results"">Benchmark</a>
    ·
    <a href=""https://colab.research.google.com/drive/1lFygK31jWyTH88ktao6Ow-5nny5-B7v5"">Demo</a>
    ·
    <a href=""https://usb.readthedocs.io/en/main/"">Docs</a>
    ·
    <a href=""https://github.com/microsoft/Semi-supervised-learning/issues"">Issue</a>
    ·
    <a href=""https://www.microsoft.com/en-us/research/lab/microsoft-research-asia/articles/pushing-the-limit-of-semi-supervised-learning-with-the-unified-semi-supervised-learning-benchmark/"">Blog</a>
    ·
    <a href=""https://zhuanlan.zhihu.com/p/566055279"">Blog (Chinese)</a>
    ·
    <a href=""https://nips.cc/virtual/2022/poster/55710"">Video</a>
    ·
    <a href=""https://www.bilibili.com/video/av474982872/"">Video (Chinese)</a>
  </p>
</div>

<!-- TABLE OF CONTENTS -->

<details>
  <summary>Table of Contents</summary>
  <ol>
    <li><a href=""#news-and-updates"">News and Updates</a></li>
    <li><a href=""#intro"">Introduction</a></li>
    <li>
      <a href=""#getting-started"">Getting Started</a>
      <ul>
        <li><a href=""#prerequisites"">Prerequisites</a></li>
        <li><a href=""#installation"">Installation</a></li>
      </ul>
    </li>
    <li><a href=""#usage"">Usage</a></li>
    <li><a href=""#benchmark-results"">Benchmark Results</a></li>
    <li><a href=""#model-zoo"">Model Zoo</a></li>
    <li><a href=""#contributing"">Community</a></li>
    <li><a href=""#license"">License</a></li>
    <li><a href=""#acknowledgments"">Acknowledgments</a></li>
  </ol>
</details>

<!-- News and Updates -->

## News and Updates
- [01/30/2023] Update semilearn==0.3.0. Add [FreeMatch](https://arxiv.org/abs/2205.07246) and [SoftMatch](https://arxiv.org/abs/2301.10921). Add imbalanced algorithms. Update results and add wandb support. Refer [CHANGE_LOG](CHANGE_LOG.md) for details. [[Results]](https://github.com/microsoft/Semi-supervised-learning/tree/main/results)[[Logs]](https://drive.google.com/drive/folders/1bRSqrRyyuDafgOI3VAuqqiuzHG6CexHF?usp=sharing)[[Wandb]](https://wandb.ai/usb). Older classic logs can be found here: [[TorchSSL Log]](https://1drv.ms/u/s!AlpW9hcyb0KvmyCfsCjGvhDXG5Nb?e=Xc6amH).

- [10/16/2022] Dataset download link and process instructions released! [[Datasets](https://github.com/microsoft/Semi-supervised-learning/tree/main/preprocess)]

- [10/13/2022] We have finished the camera ready version with updated [[Results](https://github.com/microsoft/Semi-supervised-learning/tree/main/results)]. [[Openreview](https://openreview.net/forum?id=QeuwINa96C)]

- [10/06/2022] Training logs and results of USB has been updated! Available dataset will be uploaded soon. [[Logs](https://drive.google.com/drive/folders/1fg3Fxem_UNWhfN5-4x2lRI3mluGxqD4N?usp=sharing)] [[Results](https://github.com/microsoft/Semi-supervised-learning/tree/main/results)]

- [09/17/2022] The USB paper has been accepted by NeurIPS 2022 Dataset and Benchmark Track! [[Openreview](https://openreview.net/forum?id=QeuwINa96C)]

- [08/21/2022] USB has been released!

<!-- Introduction -->

## Introduction

**USB** is a Pytorch-based Python package for Semi-Supervised Learning (SSL). It is easy-to-use/extend, *affordable* to small groups, and comprehensive for developing and evaluating SSL algorithms. USB provides the implementation of 14 SSL algorithms based on Consistency Regularization, and 15 tasks for evaluation from CV, NLP, and Audio domain.

![Code Structure](./figures/code.png)


<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- GETTING STARTED -->

## Getting Started

This is an example of how to set up USB locally.
To get a local copy up, running follow these simple example steps.

### Prerequisites

USB is built on pytorch, with torchvision, torchaudio, and transformers.

To install the required packages, you can create a conda environment:

```sh
conda create --name usb python=3.8
```

then use pip to install required packages:

```sh
pip install -r requirements.txt
```

### Installation

We provide a Python package *semilearn* of USB for users who want to start training/testing the supported SSL algorithms on their data quickly:

```sh
pip install semilearn
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

### Development

You can also develop your own SSL algorithm and evaluate it by cloning USB:

```sh
git clone https://github.com/microsoft/Semi-supervised-learning.git
```

<p align=""right"">(<a href=""#top"">back to top</a>)</p>


### Prepare Datasets

The detailed instructions for downloading and processing are shown in [Dataset Download](./preprocess/). Please follow it to download datasets before running or developing algorithms.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>


<!-- USAGE EXAMPLES -->

## Usage

USB is easy to use and extend. Going through the belowing examples will help you faimiliar with USB for quick use, evaluate an exsiting SSL algorithm on your own dataset, or developing new SSL algorithms.

### Quick Start with USB package

<!-- TODO: add quick start example and refer lighting notebook -->

Please see [Installation](#installation) to install USB first. We provide colab tutorials for:

- [Beginning example](https://colab.research.google.com/drive/1lFygK31jWyTH88ktao6Ow-5nny5-B7v5)
- [Customize datasets](https://colab.research.google.com/drive/1zbswPm1sM8j0fndUQOeqX2HADdYq-wOw)

### Start with Docker

**Step1: Check your environment**

You need to properly install Docker and nvidia driver first. To use GPU in a docker container
You also need to install nvidia-docker2 ([Installation Guide](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker)).
Then, Please check your CUDA version via `nvidia-smi`

**Step2: Clone the project**

```shell
git clone https://github.com/microsoft/Semi-supervised-learning.git
```

**Step3: Build the Docker image**

Before building the image, you may modify the [Dockerfile](Dockerfile) according to your CUDA version.
The CUDA version we use is 11.6. You can change the base image tag according to [this site](https://hub.docker.com/r/nvidia/cuda/tags).
You also need to change the `--extra-index-url` according to your CUDA version in order to install the correct version of Pytorch.
You can check the url through [Pytorch website](https://pytorch.org).

Use this command to build the image

```shell
cd Semi-supervised-learning && docker build -t semilearn .
```

Job done. You can use the image you just built for your own project. Don't forget to use the argument `--gpu` when you want
to use GPU in a container.

### Training

Here is an example to train FixMatch on CIFAR-100 with 200 labels. Trianing other supported algorithms (on other datasets with different label settings) can be specified by a config file:

```sh
python train.py --c config/usb_cv/fixmatch/fixmatch_cifar100_200_0.yaml
```

### Evaluation

After trianing, you can check the evaluation performance on training logs, or running evaluation script:

```
python eval.py --dataset cifar100 --num_classes 100 --load_path /PATH/TO/CHECKPOINT
```

### Develop

Check the developing documentation for creating your own SSL algorithm!

_For more examples, please refer to the [Documentation](https://example.com)_

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- BENCHMARK RESULTS -->

## Benchmark Results

Please refer to [Results](./results) for benchmark results on different tasks.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- MODEL ZOO -->

## Model Zoo

TODO: add pre-trained models.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- ROADMAP -->

## TODO

- [ ] Finish Readme
- [ ] Updating SUPPORT.MD with content about this project's support experience
- [ ] Multi-language Support
  - [ ] Chinese

See the [open issues](https://github.com/microsoft/Semi-supervised-learning/issues) for a full list of proposed features (and known issues).

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- CONTRIBUTING -->

## Contributing

This project welcomes contributions and suggestions.  Most contributions require you to agree to a
Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.

When you submit a pull request, a CLA bot will automatically determine whether you need to provide
a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
provided by the bot. You will only need to do this once across all repos using our CLA.

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

If you have a suggestion that would make USB better, please fork the repo and create a pull request. You can also simply open an issue with the tag ""enhancement"".
Don't forget to give the project a star! Thanks again!

1. Fork the project
2. Create your branch (`git checkout -b your_name/your_branch`)
3. Commit your changes (`git commit -m 'Add some features'`)
4. Push to the branch (`git push origin your_name/your_branch`)
5. Open a Pull Request

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- TRADEMARKS -->

## Trademarks

This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft
trademarks or logos is subject to and must follow
[Microsoft&#39;s Trademark &amp; Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).
Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
Any use of third-party trademarks or logos are subject to those third-party's policies.

<!-- LICENSE -->

## License

Distributed under the MIT License. See `LICENSE.txt` for more information.

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- CONTACT -->

## Community and Contact

The USB comunity is maintained by:

- Yidong Wang (yidongwang37@gmail.com), Tokyo Institute of Technology
- Hao Chen (haoc3@andrew.cmu.edu), Carnegie Mellon University
- Yue Fan (yfan@mpi-inf.mpg.de), Max Planck Institute for Informatics
- Wenxin Hou (wenxinhou@microsoft.com), Microsoft STCA
- Ran Tao (rant@andrew.cmu.edu), Carnegie Mellon University
- Jindong Wang (jindwang@microsoft.com), Microsoft Research Asia

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- CITE -->

## Citing USB

Please cite us if you fine this project helpful for your project/paper:

```
@inproceedings{usb2022,
  doi = {10.48550/ARXIV.2208.07204},
  url = {https://arxiv.org/abs/2208.07204},
  author = {Wang, Yidong and Chen, Hao and Fan, Yue and Sun, Wang and Tao, Ran and Hou, Wenxin and Wang, Renjie and Yang, Linyi and Zhou, Zhi and Guo, Lan-Zhe and Qi, Heli and Wu, Zhen and Li, Yu-Feng and Nakamura, Satoshi and Ye, Wei and Savvides, Marios and Raj, Bhiksha and Shinozaki, Takahiro and Schiele, Bernt and Wang, Jindong and Xie, Xing and Zhang, Yue},
  title = {USB: A Unified Semi-supervised Learning Benchmark for Classification},
  booktitle = {Thirty-sixth Conference on Neural Information Processing Systems Datasets and Benchmarks Track}
  year = {2022}
}

@article{wang2023freematch},
  title={FreeMatch: Self-adaptive Thresholding for Semi-supervised Learning},
  author={Wang, Yidong and Chen, Hao and Heng, Qiang and Hou, Wenxin and Fan, Yue and and Wu, Zhen and Wang, Jindong and Savvides, Marios and Shinozaki, Takahiro and Raj, Bhiksha and Schiele, Bernt and Xie, Xing},
  booktitle={International Conference on Learning Representations (ICLR)},
  year={2023}
}

@article{chen2023softmatch},
  title={SoftMatch: Addressing the Quantity-Quality Trade-off in Semi-supervised Learning},
  author={Chen, Hao and Tao, Ran and Fan, Yue and Wang, Yidong and Wang, Jindong and Schiele, Bernt and Xie, Xing and Raj, Bhiksha and Savvides, Marios},
  booktitle={International Conference on Learning Representations (ICLR)},
  year={2023}
}

@article{zhang2021flexmatch},
  title={FlexMatch: Boosting Semi-supervised Learning with Curriculum Pseudo Labeling},
  author={Zhang, Bowen and Wang, Yidong and Hou, Wenxin and Wu, Hao and Wang, Jindong and Okumura, Manabu and Shinozaki, Takahiro},
  booktitle={Neural Information Processing Systems (NeurIPS)},
  year={2021}
}
```

<!-- ACKNOWLEDGMENTS -->

## Acknowledgments

We thanks the following projects for reference of creating USB:

- [TorchSSL](https://github.com/TorchSSL/TorchSSL)
- [FixMatch](https://github.com/google-research/fixmatch)
- [CoMatch](https://github.com/salesforce/CoMatch)
- [SimMatch](https://github.com/KyleZheng1997/simmatch)
- [HuggingFace](https://huggingface.co/docs/transformers/index)
- [Pytorch Lighting](https://github.com/Lightning-AI/lightning)
- [README Template](https://github.com/othneildrew/Best-README-Template)

<p align=""right"">(<a href=""#top"">back to top</a>)</p>

<!-- MARKDOWN LINKS & IMAGES -->

<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->

[contributors-shield]: https://img.shields.io/github/contributors/microsoft/Semi-supervised-learning.svg?style=for-the-badge
[contributors-url]: https://github.com/microsoft/Semi-supervised-learning/graphs/contributors
[forks-shield]: https://img.shields.io/github/forks/microsoft/Semi-supervised-learning.svg?style=for-the-badge
[forks-url]: https://github.com/microsoft/Semi-supervised-learning/network/members
[stars-shield]: https://img.shields.io/github/stars/microsoft/Semi-supervised-learning.svg?style=for-the-badge
[stars-url]: https://github.com/microsoft/Semi-supervised-learning/stargazers
[issues-shield]: https://img.shields.io/github/issues/microsoft/Semi-supervised-learning.svg?style=for-the-badge
[issues-url]: https://github.com/microsoft/Semi-supervised-learning/issues
[license-shield]: https://img.shields.io/github/license/microsoft/Semi-supervised-learning.svg?style=for-the-badge
[license-url]: https://github.com/microsoft/Semi-supervised-learning/blob/main/LICENSE.txt
"
1169,A REST client inside your Laravel app,"<p align=""center""><img src=""https://res.cloudinary.com/dave24hwj8/image/upload/v1585775689/new-laravel-compass-logo.svg""></p>

<p align=""center"">
<a href=""https://github.com/davidhsianturi/laravel-compass/actions""><img src=""https://github.com/davidhsianturi/laravel-compass/workflows/tests/badge.svg"" alt=""Build Status""></a>
<a href=""https://packagist.org/packages/davidhsianturi/laravel-compass""><img src=""https://img.shields.io/packagist/dt/davidhsianturi/laravel-compass"" alt=""Total Downloads""></a>
<a href=""https://packagist.org/packages/davidhsianturi/laravel-compass""><img src=""https://img.shields.io/packagist/v/davidhsianturi/laravel-compass"" alt=""Latest Stable Version""></a>
<a href=""https://packagist.org/packages/davidhsianturi/laravel-compass""><img src=""https://img.shields.io/packagist/l/davidhsianturi/laravel-compass"" alt=""License""></a>
</p>

<p align=""center"">
<kbd>
<img src=""https://res.cloudinary.com/dave24hwj8/image/upload/v1585775692/Screen_Shot_2020-04-02_at_16.05.24_PM.png"">
</kbd>
</p>

## Introduction

Laravel Compass is an elegant REST assistant for the Laravel framework that you can use to test API calls and create API documentation. it provides automatically endpoints for GET, POST, PUT/PATCH, DELETE, various auth mechanisms, and other utility endpoints based on Laravel routes in your project.

## Installation and usage

This package requires PHP 7.2 and Laravel 6.0 or higher.  
You'll find installation instructions and full documentation on https://davidhsianturi.com/laravel-compass.

## Changelog

Please see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.

## Contributing

Please see [CONTRIBUTING](CONTRIBUTING.md) for details.

## License

Laravel Compass is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
"
2320,Grokking Deep Reinforcement Learning,"# Grokking Deep Reinforcement Learning

**Note:** At the moment, only running the code from the [docker](https://github.com/docker/docker-ce) container (below) is supported. Docker allows for creating a single environment that is more likely to work on all systems. Basically, I install and configure all packages for you, except docker itself, and you just run the code on a tested environment. 

To install docker, I recommend a web search for ""installing docker on \<your os here>"". For running the code on a GPU, you have to additionally install [nvidia-docker](https://github.com/NVIDIA/nvidia-docker). NVIDIA Docker allows for using a host's GPUs inside docker containers. After you have docker (and nvidia-docker if using a GPU) installed, follow the three steps below. 

## Running the code
  0. Clone this repo:  
  `git clone --depth 1 https://github.com/mimoralea/gdrl.git && cd gdrl`
  1. Pull the gdrl image with:  
  `docker pull mimoralea/gdrl:v0.14`
  2. Spin up a container:
     - On Mac or Linux:  
     `docker run -it --rm -p 8888:8888 -v ""$PWD""/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14` 
     - On Windows:  
     `docker run -it --rm -p 8888:8888 -v %CD%/notebooks/:/mnt/notebooks/ mimoralea/gdrl:v0.14`
     - NOTE: Use `nvidia-docker` or add `--gpus all` after `--rm` to the command, if you are using a GPU.
  3. Open a browser and go to the URL shown in the terminal (likely to be: http://localhost:8888). The password is: `gdrl`

## About the book

### Book's website

https://www.manning.com/books/grokking-deep-reinforcement-learning

### Table of content

  1. [Introduction to deep reinforcement learning](#1-introduction-to-deep-reinforcement-learning)
  2. [Mathematical foundations of reinforcement learning](#2-mathematical-foundations-of-reinforcement-learning)
  3. [Balancing immediate and long-term goals](#3-balancing-immediate-and-long-term-goals)
  4. [Balancing the gathering and utilization of information](#4-balancing-the-gathering-and-utilization-of-information)
  5. [Evaluating agents' behaviors](#5-evaluating-agents-behaviors)
  6. [Improving agents' behaviors](#6-improving-agents-behaviors)
  7. [Achieving goals more effectively and efficiently](#7-achieving-goals-more-effectively-and-efficiently)
  8. [Introduction to value-based deep reinforcement learning](#8-introduction-to-value-based-deep-reinforcement-learning)
  9. [More stable value-based methods](#9-more-stable-value-based-methods)
  10. [Sample-efficient value-based methods](#10-sample-efficient-value-based-methods)
  11. [Policy-gradient and actor-critic methods](#11-policy-gradient-and-actor-critic-methods)
  12. [Advanced actor-critic methods](#12-advanced-actor-critic-methods)
  13. [Towards artificial general intelligence](#13-towards-artificial-general-intelligence)

### Detailed table of content

#### 1. Introduction to deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-1)\)
- \(No Notebook\)
      
#### 2. Mathematical foundations of reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-2)\)
- \([Notebook](/notebooks/chapter_02/chapter-02.ipynb)\)
  - Implementations of several MDPs: 
    - Bandit Walk
    - Bandit Slippery Walk
    - Slippery Walk Three
    - Random Walk
    - Russell and Norvig's Gridworld from AIMA
    - FrozenLake
    - FrozenLake8x8
#### 3. Balancing immediate and long-term goals
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-3)\)
- \([Notebook](/notebooks/chapter_03/chapter-03.ipynb)\) 
  - Implementations of methods for finding optimal policies:
    - Policy Evaluation
    - Policy Improvement
    - Policy Iteration
    - Value Iteration
#### 4. Balancing the gathering and utilization of information
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-4)\)
- \([Notebook](/notebooks/chapter_04/chapter-04.ipynb)\)
  - Implementations of exploration strategies for bandit problems:
    - Random
    - Greedy
    - E-greedy
    - E-greedy with linearly decaying epsilon
    - E-greedy with exponentially decaying epsilon
    - Optimistic initialization
    - SoftMax
    - Upper Confidence Bound
    - Bayesian
#### 5. Evaluating agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-5)\)
- \([Notebook](/notebooks/chapter_05/chapter-05.ipynb)\)
  - Implementation of algorithms that solve the prediction problem (policy estimation):
    - On-policy first-visit Monte-Carlo prediction
    - On-policy every-visit Monte-Carlo prediction
    - Temporal-Difference prediction (TD)
    - n-step Temporal-Difference prediction (n-step TD)
    - TD(λ)
#### 6. Improving agents' behaviors
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-6)\)
- \([Notebook](/notebooks/chapter_06/chapter-06.ipynb)\)
  - Implementation of algorithms that solve the control problem (policy improvement):
    - On-policy first-visit Monte-Carlo control
    - On-policy every-visit Monte-Carlo control
    - On-policy TD control: SARSA
    - Off-policy TD control: Q-Learning
    - Double Q-Learning
#### 7. Achieving goals more effectively and efficiently
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-7)\)
- \([Notebook](/notebooks/chapter_07/chapter-07.ipynb)\)
  - Implementation of more effective and efficient reinforcement learning algorithms:
    - SARSA(λ) with replacing traces
    - SARSA(λ) with accumulating traces
    - Q(λ) with replacing traces
    - Q(λ) with accumulating traces
    - Dyna-Q
    - Trajectory Sampling
#### 8. Introduction to value-based deep reinforcement learning
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-8)\)
- \([Notebook](/notebooks/chapter_08/chapter-08.ipynb)\)
  - Implementation of a value-based deep reinforcement learning baseline:
    - Neural Fitted Q-iteration (NFQ)
#### 9. More stable value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-9)\)
- \([Notebook](/notebooks/chapter_09/chapter-09.ipynb)\)
  - Implementation of ""classic"" value-based deep reinforcement learning methods:
    - Deep Q-Networks (DQN)
    - Double Deep Q-Networks (DDQN)
#### 10. Sample-efficient value-based methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-10)\)
- \([Notebook](/notebooks/chapter_10/chapter-10.ipynb)\)
  - Implementation of main improvements for value-based deep reinforcement learning methods:
    - Dueling Deep Q-Networks (Dueling DQN)
    - Prioritized Experience Replay (PER)
#### 11. Policy-gradient and actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-11)\)
- \([Notebook](/notebooks/chapter_11/chapter-11.ipynb)\)
  - Implementation of classic policy-based and actor-critic deep reinforcement learning methods:
    - Policy Gradients without value function and Monte-Carlo returns (REINFORCE)
    - Policy Gradients with value function baseline trained with Monte-Carlo returns (VPG)  
    - Asynchronous Advantage Actor-Critic (A3C)
    - Generalized Advantage Estimation (GAE)
    - \[Synchronous\] Advantage Actor-Critic (A2C)
#### 12. Advanced actor-critic methods
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-12)\)
- \([Notebook](/notebooks/chapter_12/chapter-12.ipynb)\)
  - Implementation of advanced actor-critic methods:
    - Deep Deterministic Policy Gradient (DDPG)
    - Twin Delayed Deep Deterministic Policy Gradient (TD3)
    - Soft Actor-Critic (SAC)
    - Proximal Policy Optimization (PPO)
#### 13. Towards artificial general intelligence
- \([Livebook](https://livebook.manning.com/book/grokking-deep-reinforcement-learning/chapter-13)\)
- \(No Notebook\)
"