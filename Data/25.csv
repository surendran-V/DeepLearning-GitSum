3426,"An NLP library for building bots, with entity extraction, sentiment analysis, automatic language identify, and so more","![NLPjs logo](screenshots/nlplogo.gif)

# NLP.js

[![](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml/badge.svg?branch=master)](https://github.com/axa-group/nlp.js/actions/workflows/node.js.yml)
[![Coverage Status](https://coveralls.io/repos/github/axa-group/nlp.js/badge.svg?branch=master)](https://coveralls.io/github/axa-group/nlp.js?branch=master)
[![NPM version](https://img.shields.io/npm/v/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![NPM downloads](https://img.shields.io/npm/dm/node-nlp.svg?style=flat)](https://www.npmjs.com/package/node-nlp)
[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=alert_status)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)
[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=axa-group_nlp.js&metric=security_rating)](https://sonarcloud.io/dashboard?id=axa-group_nlp.js)

*If you're looking for the version 3 docs, you can find them here* [Version 3](docs/v3/README.md)

""NLP.js"" is a general natural language utility for nodejs. Currently supporting:

- Guess the language of a phrase
- Fast _Levenshtein_ distance of two strings
- Search the best substring of a string with less _Levenshtein_ distance to a given pattern.
- Get stemmers and tokenizers for several languages.
- Sentiment Analysis for phrases (with negation support).
- Named Entity Recognition and management, multi-language support, and acceptance of similar strings, so the introduced text does not need to be exact.
- Natural Language Processing Classifier, to classify an utterance into intents.
- NLP Manager: a tool able to manage several languages, the Named Entities for each language, the utterances, and intents for the training of the classifier, and for a given utterance return the entity extraction, the intent classification and the sentiment analysis. Also, it is able to maintain a Natural Language Generation Manager for the answers.
- 40 languages natively supported, 104 languages supported with BERT integration
- Any other language is supported through tokenization, even fantasy languages

![Hybrid bot](screenshots/hybridbot.gif)

## New in version 4`!`

Version 4 is very different from previous versions. Before this version, NLP.js was a monolithic library. The big changes:

- Now the library is split into small independent packages.
- So every language has its own package
- It provides a plugin system, so you can provide your own plugins or replace the existing ones.
- It provides a container system for the plugins, settings for the plugins and also pipelines
- A pipeline is code defining how the plugins interact. Usually it is linear: there is an input into the plugin, and this generates the input for the next one. As an example, the preparation of a utterance (the process to convert the utterance to a hashmap of stemmed features) is now a pipeline like this: `normalize -> tokenize -> removeStopwords -> stem -> arrToObj`
- There is a simple compiler for the pipelines, but they can also be built using a modified version of javascript and python (compilers are also included as plugins, so other languages can be added as a plugin).
- NLP.js now includes connectors, a connector is understood to be something that has at least 2 methods: `hear` and `say`. Examples of connectors included: Console Connector, Microsoft Bot Framework Connector and a Direct Line Offline Connector (this one allows you to build a web chatbot using the Microsoft Webchat, but without having to deploy anything in Azure).
- Some plugins can be registered by language, so for different languages different plugins will be used. Also some plugins, like NLU, can be registered not only by language but also by domain (a functional set of intents that can be trained separately)
- As an example of per-language/domain plugins, a Microsoft LUIS NLU plugin is provided. You can configure your chatbot to use the NLU from NLP.js for some languages/domains, and LUIS for other languages/domains.
- Having plugins and pipelines makes it possible to write chatbots by only modifying the configuration and the pipelines file, without modifying the code.

### TABLE OF CONTENTS

<!--ts-->

- [Installation](#installation)
- [QuickStart](docs/v4/quickstart.md)
  - [Install the library](docs/v4/quickstart.md#install-the-library)
  - [Create the code](docs/v4/quickstart.md#create-the-code)
  - [Extracting the corpus into a file](docs/v4/quickstart.md#extracting-the-corpus-into-a-file)
  - [Extracting the configuration into a file](docs/v4/quickstart.md#extracting-the-configuration-into-a-file)
  - [Creating your first pipeline](docs/v4/quickstart.md#creating-your-first-pipeline)
  - [Console Connector](docs/v4/quickstart.md#adding-your-first-connector)
  - [Extending your bot with the pipeline](docs/v4/quickstart.md#extending-your-bot-with-the-pipeline)
  - [Adding multiple languages](docs/v4/quickstart.md#adding-multilanguage)
  - [Adding API and WebChat](docs/v4/quickstart.md#adding-api-and-webchat)
  - [Using Microsoft Bot Framework](docs/v4/quickstart.md#using-microsoft-bot-framework)
  - [Recognizing the bot name and the channel](docs/v4/quickstart.md#recognizing-the-bot-name-and-the-channel)
  - [One bot per connector](docs/v4/quickstart.md#one-bot-per-connector)
  - [Different port for Microsoft Bot Framework and Webchat](docs/v4/quickstart.md#different-port-for-microsoft-bot-framework-and-webchat)
  - [Adding logic to an intent](docs/v4/quickstart.md#adding-logic-to-an-intent)
  - [Mini FAQ](docs/v4/mini-faq.md)
- [Web and React Native](docs/v4/webandreact.md)
  - [Preparing to generate a bundle](docs/v4/webandreact.md#preparing-to-generate-a-bundle)
  - [Your first web NLP](docs/v4/webandreact.md#your-first-web-nlp)
  - [Creating a distributable version](docs/v4/webandreact.md#creating-a-distributable-version)
  - [Load corpus from URL](docs/v4/webandreact.md#load-corpus-from-url)
- [QnA](docs/v4/qna.md)
  - [Install the library and the qna plugin](docs/v4/qna.md#install-the-library-and-the-qna-plugin)
  - [Train and test a QnA file](docs/v4/qna.md#train-and-test-a-qna-file)
  - [Extracting the configuration into a file](docs/v4/qna.md#extracting-the-configuration-into-a-file)
  - [Exposing the bot with a Web and API](docs/v4/qna.md#exposing-the-bot-with-a-web-and-api)
- [NER Quickstart](docs/v4/ner-quickstart.md)
  - [Install the needed packages](docs/v4/ner-quickstart.md#install-the-needed-packages)
  - [Create the conf.json](docs/v4/ner-quickstart.md#create-the-confjson)
  - [Create the corpus.json](docs/v4/ner-quickstart.md#create-the-corpusjson)
  - [Create the heros.json](docs/v4/ner-quickstart.md#create-the-herosjson)
  - [Create the index.js](docs/v4/ner-quickstart.md#create-the-indexjs)
  - [Start the application](docs/v4/ner-quickstart.md#start-the-application)
  - [Stored context](docs/v4/ner-quickstart.md#stored-context)
- [NeuralNetwork](docs/v4/neural.md)
  - [Introduction](docs/v4/neural.md#introduction)
  - [Installing](docs/v4/neural.md#installing)
  - [Corpus Format](docs/v4/neural.md#corpus-format)
  - [Example of use](docs/v4/neural.md#example-of-use)
  - [Exporting trained model to JSON and importing](docs/v4/neural.md#exporting-trained-model-to-json-and-importing)
  - [Options](docs/v4/neural.md#options)
- [Logger](docs/v4/logger.md)
  - [Introduction](docs/v4/logger.md#introduction)
  - [Default logger in @nlpjs/core](docs/v4/logger.md#default-logger-in-nlpjscore)
  - [Default logger in @nlpjs/basic](docs/v4/logger.md#default-logger-in-nlpjsbasic)
  - [Adding your own logger to the container](docs/v4/logger.md#adding-your-own-logger-to-the-container)
- [@nlpjs/emoji](docs/v4/emoji.md)
  - [Introduction](docs/v4/emoji.md#introduction)
  - [Installing](docs/v4/emoji.md#installing)
  - [Example of use](docs/v4/emoji.md#example-of-use)
- [@nlpjs/console-connector](docs/v4/console-connector.md)
  - [Installation](docs/v4/console-connector.md#installation)
  - [Example of use inside NLP.js](docs/v4/console-connector.md#example-of-use-inside-nlpjs)
  - [Example of use of the package](docs/v4/console-connector.md#example-of-use-of-the-package)
  - [Example of use with @nlpjs/basic](docs/v4/console-connector.md#example-of-use-with-nlpjsbasic)
- [@nlpjs/similarity](docs/v4/similarity.md)
  - [Installation](docs/v4/similarity.md#installation)
  - [leven](docs/v4/similarity.md#leven)
  - [similarity](docs/v4/similarity.md#similarity)
  - [SpellCheck](docs/v4/similarity.md#spellcheck)
  - [SpellCheck trained with words trained from a text](docs/v4/similarity.md#spellcheck-trained-with-words-trained-from-a-text)
- [@nlpjs/nlu](docs/v4/nlu.md)
  - [Installation](docs/v4/nlu.md#installation)
  - [NluNeural](docs/v4/nlu.md#nluneural)
  - [DomainManager](docs/v4/nlu.md#domainmanager)
  - [NluManager](docs/v4/nlu.md#nlumanager)
- [React Native](#react-native)
- [Example of use](#example-of-use)
- [False Positives](#false-positives)
- [Log Training Progress](#log-training-progress)
- [Benchmarking](docs/v3/benchmarking.md)
- [Language Support](docs/v4/language-support.md)
  - [Supported languages](docs/v4/language-support.md#supported-languages)
  - [Sentiment Analysis](docs/v4/language-support.md#sentiment-analysis)
  - [Comparision with other NLP products](docs/v4/language-support.md#comparision-with-other-nlp-products)
  - [Example with several languages](docs/v4/language-support.md#example-with-several-languages)
- [Language Guesser](docs/v3/language-guesser.md)
- [Similar Search](docs/v3/similar-search.md)
- [NLU](docs/v3/nlu-manager.md)
  - [NLU Manager](docs/v3/nlu-manager.md)
  - [Brain NLU](docs/v3/brain-nlu.md)
  - [Bayes NLU](docs/v3/bayes-nlu.md)
  - [Binary Relevance NLU](docs/v3/binary-relevance-nlu.md)
  - [Logistic Regression NLU](docs/v3/logistic-regression-nlu.md)
- [NER Manager](docs/v4/ner-manager.md)
  - [Enum Named Entities](docs/v4/ner-manager.md#enum-entities)
  - [Regular Expression Named Entities](docs/v4/ner-manager.md#regex-entities)
  - [Trim Named Entities](docs/v4/ner-manager.md#trim-entities)
  - [Utterances with duplicated Entities](docs/v4/ner-manager.md#enum-entities)
- [Integration with Duckling](docs/v3/builtin-duckling.md)
  - [Language support](docs/v3/builtin-duckling.md#language-support)
  - [How to integrate with duckling](docs/v3/builtin-duckling.md#how-to-integrate-with-duckling)
  - [Email Extraction](docs/v3/builtin-duckling.md#email-extraction)
  - [Phone Number Extraction](docs/v3/builtin-duckling.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-duckling.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-duckling.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-duckling.md#ordinal-extraction)
  - [Dimension Extraction](docs/v3/builtin-duckling.md#dimension-extraction)
  - [Quantity Extraction](docs/v3/builtin-duckling.md#quantity-extraction)
  - [Amount of Money Extraction](docs/v3/builtin-duckling.md#amount-of-money-extraction)
  - [Date Extraction](docs/v3/builtin-duckling.md#date-extraction)
- [Builtin Entity Extraction](docs/v3/builtin-entity-extraction.md)
  - [Email Extraction](docs/v3/builtin-entity-extraction.md#email-extraction)
  - [IP Extraction](docs/v3/builtin-entity-extraction.md#ip-extraction)
  - [Hashtag Extraction](docs/v3/builtin-entity-extraction.md#hashtag-extraction)
  - [Phone Number Extraction](docs/v3/builtin-entity-extraction.md#phone-number-extraction)
  - [URL Extraction](docs/v3/builtin-entity-extraction.md#url-extraction)
  - [Number Extraction](docs/v3/builtin-entity-extraction.md#number-extraction)
  - [Ordinal Extraction](docs/v3/builtin-entity-extraction.md#ordinal-extraction)
  - [Percentage Extraction](docs/v3/builtin-entity-extraction.md#percentage-extraction)
  - [Age Extraction](docs/v3/builtin-entity-extraction.md#age-extraction)
  - [Currency Extraction](docs/v3/builtin-entity-extraction.md#currency-extraction)
  - [Date Extraction](docs/v3/builtin-entity-extraction.md#date-extraction)
  - [Duration Extraction](docs/v3/builtin-entity-extraction.md#duration-extraction)
- [Sentiment Analysis](docs/v3/sentiment-analysis.md)
- [NLP Manager](docs/v4/nlp-manager.md)
  - [Load/Save](docs/v4/nlp-manager.md#loadsave)
  - [Import/Export](docs/v4/nlp-manager.md#importexport)
  - [Context](docs/v4/nlp-manager.md#context)
  - [Intent Logic (Actions, Pipelines)](docs/v4/nlp-intent-logics.md)
- [Slot Filling](docs/v4/slot-filling.md)
- [Loading from Excel](docs/v3/loading-from-excel.md)
- [Microsoft Bot Framework](docs/v3/microsoft-bot-framework.md)
  - [Introduction](docs/v3/microsoft-bot-framework.md#introduction)
  - [Example of use](docs/v3/microsoft-bot-framework.md#example-of-use)
  - [Recognizer and Slot filling](docs/v3/microsoft-bot-framework.md#recognizer-and-slot-filling)
- Languages
  - [English](https://github.com/axa-group/nlp.js/blob/master/packages/lang-en/README.md)
  - [Indonesian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-id/README.md)
  - [Italian](https://github.com/axa-group/nlp.js/blob/master/packages/lang-it/README.md)
  - [Spanish](https://github.com/axa-group/nlp.js/blob/master/packages/lang-es/README.md)
- [Contributing](#contributing)
- [Contributors](#contributors)
- [Code of Conduct](#code-of-conduct)
- [Who is behind it](#who-is-behind-it)
- [License](#license)
  <!--te-->

## Installation

If you're looking to use NLP.js in your Node application, you can install via NPM like so:

```bash
    npm install node-nlp
```

## React Native

There is a version of NLP.js that works in React Native, so you can build chatbots that can be trained and executed on the mobile even without the internet. You can install it via NPM:

```bash
    npm install node-nlp-rn
```

Some limitations:

- No Chinese
- The Japanese stemmer is not the complete one
- No Excel import
- No loading from a file, or saving to a file, but it can still import from JSON and export to JSON.

## Example of use

You can see a great example of use in the folder [`/examples/02-qna-classic`](https://github.com/axa-group/nlp.js/tree/master/examples/02-qna-classic). This example is able to train the bot and save the model to a file, so when the bot is started again, the model is loaded instead of being trained again.

You can start to build your NLP from scratch with a few lines:

```javascript
const { NlpManager } = require('node-nlp');

const manager = new NlpManager({ languages: ['en'], forceNER: true });
// Adds the utterances and intents for the NLP
manager.addDocument('en', 'goodbye for now', 'greetings.bye');
manager.addDocument('en', 'bye bye take care', 'greetings.bye');
manager.addDocument('en', 'okay see you later', 'greetings.bye');
manager.addDocument('en', 'bye for now', 'greetings.bye');
manager.addDocument('en', 'i must go', 'greetings.bye');
manager.addDocument('en', 'hello', 'greetings.hello');
manager.addDocument('en', 'hi', 'greetings.hello');
manager.addDocument('en', 'howdy', 'greetings.hello');

// Train also the NLG
manager.addAnswer('en', 'greetings.bye', 'Till next time');
manager.addAnswer('en', 'greetings.bye', 'see you soon!');
manager.addAnswer('en', 'greetings.hello', 'Hey there!');
manager.addAnswer('en', 'greetings.hello', 'Greetings!');

// Train and save the model.
(async() => {
    await manager.train();
    manager.save();
    const response = await manager.process('en', 'I should go now');
    console.log(response);
})();
```

This produces the following result in a console:

```bash
{ utterance: 'I should go now',
  locale: 'en',
  languageGuessed: false,
  localeIso2: 'en',
  language: 'English',
  domain: 'default',
  classifications:
   [ { label: 'greetings.bye', value: 0.698219120207268 },
     { label: 'None', value: 0.30178087979273216 },
     { label: 'greetings.hello', value: 0 } ],
  intent: 'greetings.bye',
  score: 0.698219120207268,
  entities:
   [ { start: 12,
       end: 14,
       len: 3,
       accuracy: 0.95,
       sourceText: 'now',
       utteranceText: 'now',
       entity: 'datetime',
       resolution: [Object] } ],
  sentiment:
   { score: 1,
     comparative: 0.25,
     vote: 'positive',
     numWords: 4,
     numHits: 2,
     type: 'senticon',
     language: 'en' },
  actions: [],
  srcAnswer: 'Till next time',
  answer: 'Till next time' }
```

## False Positives

By default, the neural network tries to avoid false positives. To achieve that, one of the internal processes is that words never seen by the network are represented as a feature that gives some weight to the `None` intent. So, if you try the previous example with ""_I have to go_"" it will return the `None` intent because 2 of the 4 words have never been seen while training.
If you don't want to avoid those false positives, and you feel more comfortable with classifications into the intents that you declare, then you can disable this behavior by setting the `useNoneFeature` to false:

```javascript
const manager = new NlpManager({ languages: ['en'], nlu: { useNoneFeature: false } });
```

## Log Training Progress

You can also add a log progress, so you can trace what is happening during the training.
You can log the progress to the console:

```javascript
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: true } });
```

Or you can provide your own log function:

```javascript
const logfn = (status, time) => console.log(status, time);
const nlpManager = new NlpManager({ languages: ['en'], nlu: { log: logfn } });
```

## Contributing

You can read the guide for how to contribute at [Contributing](CONTRIBUTING.md).

## Contributors

[![Contributors](https://contributors-img.firebaseapp.com/image?repo=axa-group/nlp.js)](https://github.com/axa-group/nlp.js/graphs/contributors)

Made with [contributors-img](https://contributors-img.firebaseapp.com).

## Code of Conduct

You can read the Code of Conduct at [Code of Conduct](CODE_OF_CONDUCT.md).

## Who is behind it`?`

This project is developed by AXA Group Operations Spain S.A.

If you need to contact us, you can do it at the email opensource@axa.com

## License

Copyright (c) AXA Group Operations Spain S.A.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
""Software""), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"
1347,🎉 A list of awesome things related to Quasar,"![Quasar Framework logo](https://cdn.quasar.dev/logo/svg/quasar-logo-awesome.svg)


## Awesome Quasar [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)

> A list of awesome things related to Quasar

- [Resources](#resources)
    - [Official Resources](#official-resources)
    - [External Resources](#external-resources)
    - [Official Community](#official-community)
    - [Local Communities](#local-communities)
    - [Tutorials](#tutorials)
      - [Video Tutorials](#video-tutorials)
      - [Articles](#articles)
- [Community App Extensions](#community-app-extensions)
- [Other Community Components and Tools](#other-community-components-and-tools)
- [Projects Using Quasar](#projects-using-quasar)

# Resources

### Official Resources

- [Official Documentation](https://quasar.dev)
- [Quasar GitHub Repo](https://github.com/quasarframework/quasar)
- [Quasar Release Notes](https://github.com/quasarframework/quasar/releases)
- [Official Blog](https://blog.quasar.dev/)
- [Official Video Tutorials](https://quasar.dev/video-tutorials)

### External Resources
> These resources have not been created by Quasar Team, nor do we maintain them or financially benefit from them.

- Video tutorial @Udemy on ""Quasar Framework: Cross-Platform VueJS Vuex & Firebase Apps"": [https://dannys.link/quasar](https://dannys.link/quasar)
- Video tutorial @Udemy on ""Vue JS 2 - The Complete Guide (incl. Vue Router & Vuex)"": [https://www.udemy.com/vuejs-2-the-complete-guide/](https://www.udemy.com/vuejs-2-the-complete-guide/)

### Official Community

- [Official Facebook](https://www.facebook.com/QuasarFramework)
- [Official Twitter](https://twitter.com/quasarframework)
- [Official Chat Room - Discord](https://chat.quasar.dev)
- [Official Forum](https://forum.quasar.dev/)

### Local Communities
> These communities are not maintained by Quasar Team.

- [Quasar Brazil - Telegram Channel](https://t.me/quasarframeworkbrasil) - *Similar with #brazil channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Russia - Telegram Channel](https://t.me/quasar_ru) - *Similar with #russkiy channel at [Official Discord](https://chat.quasar.dev)*
- [Quasar Spain - Telegram Channel](https://t.me/quasarframework_es) - *Similar with #spanish channel at [Official Discord](https://chat.quasar.dev)*

### Tutorials

#### Video Tutorials

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [YouTube](https://www.youtube.com/playlist?list=PLBjvYfV_TvwJlOctQ49KiOrxrFwJGqAdr)| Introduction to the Quasar Framework | v0.17.18 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=iml3hDVboHk&t=287s)| Quasar Framework: Create a Vue js app & deploy to web, mobile app & desktop app in 30 minutes! | v0.17.20 |
| Danny Connell | [YouTube](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0&index=1)| Quasar Framework V1 Course Preview: Create a Real-World, Cross-Platform App | v1.0.0-beta.19 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) | [YouTube](https://www.youtube.com/watch?v=wTaV4qXyzOg) | Building a multiplatform application with Quasar Framework. (pt-br) | v1.0.5 |
| [Program With Eric](https://www.youtube.com/channel/UCshZ3rdoCLjDYuTR_RBubzw) | [YouTube serie](https://www.youtube.com/watch?v=C-v262YhYvw&list=PL-lxoPS_1OXXBGVdJuBkjCn3qZPYeyoYD) | Quasar Vue.js Tutorial | |
| [Tobias Mesquita](https://dev.to/tobymosque) | [Medium](https://dev.to/quasar/quasar-ssr-using-cookies-with-other-libs-services-4nkl) | Quasar - SSR and using cookies ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube](https://www.youtube.com/watch?v=fj1yog9KB3Q&list=PLAiDzIdBfy8gw5EKbHpNRYBZlpN4yQT4o) | Quasar Framework: Icons & Splashscreens for Web, iOS, Android, Mac & WIndows apps Instantly! ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=opmng7llVJ0&list=PLAiDzIdBfy8iu_MZrq3IPuSFcRgCQ0iL0) | Quasar Framework: Vue.js Cross Platform App ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=Kfg789g_UTg&list=PLAiDzIdBfy8iZTjdu3mjNglucWadtLG1v) |Quasar Framework: Vue.js Chat App - with Vuex & Firebase (for Web, Mobile & Desktop) ||
| [Danny Connell](https://www.youtube.com/channel/UC6eR_ndNgaTeE5t2Ud4ZiHw) | [YouTube serie](https://www.youtube.com/watch?v=JucCBZfeKqM&list=PLAiDzIdBfy8jwqO1vJkWvBWFA0dwD7K_O) | Quasar Framework: Animated Winner Picker App! ||
| [Andre Madarang](https://www.youtube.com/channel/UCtb40EQj2inp8zuaQlLx3iQ) | [YouTube](https://www.youtube.com/watch?v=Ud8jS3VlVHw) | Quasar Framework for Vue.js ||
| [codeguru](https://www.youtube.com/channel/UCyNpa6WDH4i2lEznoju1lMg) | [YouTube serie](https://www.youtube.com/watch?v=qxn7VdC8iCI&list=PLAl8os33KyOVpzfYznpguV_5euzKJ626V) | Quasar framework - Building production web app using GraphQL, AWS Amplify, and Quasar ||
| [Impeccable Ninja](https://www.youtube.com/channel/UC9Vn7Ye-wJmH97IqPHIcSig) | [YouTube](https://www.youtube.com/watch?v=GVOsLNgS2Gg&feature=youtu.be) | Sign and align Cordova apps created with Vue and Quasar ||
| [Patrick Monteiro](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | [YouTube serie](https://www.youtube.com/playlist?list=PLBjvYfV_TvwL7srfoBB0QxP1P-iJ5sQnc) | Quasar Framwork 1.0 course(pt-br) | v1.x |

Do not forget to watch official [video tutorials](https://quasar.dev/video-tutorials).

#### Articles

| Author | Links | Description | Quasar |
| --- | --- | --- | --- |
| [hawkeye64](https://github.com/hawkeye64) | [Medium](https://medium.com/quasar-framework/building-an-electron-file-explorer-with-quasar-and-vue-7bf94f1bbf6), [github](https://github.com/hawkeye64/electron-quasar-file-explorer) | Building an Electron File Explorer with Quasar (and Vue) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Article](http://viladosilicio.com.br/testes-e2e-com-cypress-no-quasar-framework)| E2E Test with Cypress in the Quasar Framework(pt-br) | v0.17.18 |
| [Patrick Monteiro](https://github.com/patrickmonteiro/quasar-hello-auth) (pt-br) and [William Comnisky](https://github.com/wcomnisky/quasar-hello-auth) (en) | [website (en)](https://wcomnisky.github.io/quasar-hello-auth/) | Quasar Framework with Social Login using Hello.js | v1.0.3 |
| [Navicstein Rotciv](https://dev.to/navicsteinr) | [dev.to](https://dev.to/navicsteinr/deploying-an-app-from-gitlab-to-heroku-using-the-quasar-framework-and-sailsjs-3d00) | Deploying an app from Gitlab to Heroku using the Quasar framework and Sailsjs ||
| [Jeff Galbraith](https://dev.to/hawkeye64) | [dev.to](https://dev.to/quasar/publish-your-quasar-spa-on-github-io-with-history-mode-20h2) | Publish your Quasar SPA on Github.io with History Mode ||
| [Xkonti](https://xkonti.tech) | [Article](https://xkonti.tech/blog/quasar-framework-with-typescript/), [dev.to](https://dev.to/xkonti/creating-quasar-framework-project-with-typescript-support-m9b) | Creating Quasar Framework project with Typescript support ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-4ffecaf33933) | Adding Charts in Quasar ||
| [Pratik Patel](https://medium.com/@pratikpatel_60309) | [Medium](https://medium.com/@pratikpatel_60309/adding-charts-in-quasar-using-umd-unified-module-definition-fc2015648b3a) | Adding Charts in Quasar using UMD (Unified Module Definition) ||
| [nothingismagick](https://dev.to/nothingismagick) | [Medium](https://dev.to/tauri/use-sass-variables-in-javascript-583o) | Use Sass Variables in Javascript  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/12097067.html) | Quasar BEX preview guide (Chinese)  ||
| [farwish](https://cnblogs.com/farwish) | [Article](https://www.cnblogs.com/farwish/p/11980595.html) | Deploy Quasar SSR combine with pm2 and Nginx for proxy (Chinese)  ||
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-embedded-google-maps-to-your-application-432605cdbeac) | Add Embedded Google Maps to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-recurring-rules-for-calendar-dates-to-your-application-401e39b56b2f) | Add Recurring Rules for Calendar Dates to Your Application | ^1.12.0 |
| [Troy Moreland](https://github.com/34fame) | [Medium](https://levelup.gitconnected.com/add-dynamic-forms-to-your-vue-app-609de4005a2b) | Add Dynamic Forms to Your Vue App | ^1.13.0 |
| [Patrick Monteiro](https://github.com/patrickmonteiro) | [Medium](https://medium.com/building-kovi/criando-um-pwa-com-framework-vue-js-e-quasar-6b7e1fbc743d) | Criando um PWA com Vue.js e Quasar(pt-br) | v1.x |
| [Joel Olawanle](https://github.com/olawanlejoel) | [Smashing Magazine](https://www.smashingmagazine.com/2021/10/introduction-quasar-framework-cross-platform-applications/) | An Introduction To Quasar Framework: Building Cross-Platform Applications ||

Do not forget to read the official [blog](https://blog.quasar.dev/).

# Community App Extensions

| Name | Description |
| --- | --- |
| [qmodeltd](https://www.npmjs.com/package/quasar-app-extension-qmodeltd) | QModelTd is an UI app extension for Quasar that simplifies the usage of editable or selectable QTd |
| [remote-dev-tools](https://github.com/bloodf/quasar-remote-dev-tools) | Vue remote devtools for Cordova and Electron apps made with Quasar |
| [alpaca-forms](https://github.com/221B-io/quasar-alpaca-form-builder#readme) | Alpaca form builder built for Quasar |
| [draggable](https://github.com/mesqueeb/quasar-app-extension-draggable) | A Quasar extension that makes elements draggable and movable with keyboard. |
| [swipe-to-close](https://github.com/mesqueeb/quasar-app-extension-swipe-to-close/) | A Quasar Framework app extension that allows you to close dialogs by swiping. |
| [qdatetimepicker](https://github.com/TobyMosque/app-extension-qdatetimepicker#readme) | QDatetimePicker for Quasar |
| [qribbon](https://github.com/webnoob/app-extension-qribbon) | Customisable ribbons with a component builder. Allows ribbons at the top, corners, bottom etc. |
| [http-authentication](https://github.com/stefanvanherwijnen/quasar-app-extension-http-authentication) | HTTP authentication using the Vuex store with basic login, registration and password reset pages. |
| [system-environment-variables](https://github.com/marcorivm/quasar-app-extension-system-environment-variables) | Loading of system environment variables for deploying on CI environment. |
| [easy-forms](https://quasar-easy-forms.web.app) | A component to easily generate (Quasar) forms by only defining a ""schema"" object. |
| [easy-tables](https://quasar-easy-tables.web.app) | A component to easily generate (Quasar) tables by only defining a ""schema"" object. (based on the same schema as `easy-forms`) |
| [vuelidate-rules](https://github.com/cuatromedios/quasar-app-extension-vuelidate-rules) | A Quasar Framework app extension that allows you to use [Vuelidate](https://vuelidate.js.org/) methods as **internal** Quasar rules in fields of a form |
| [QGrid](https://github.com/pratik227/quasar-qgrid) | QGrid is a Quasar App Extension. It allows you to filter data for each column, Drag and Drop Rows and also allows you to filter data using header filters. |
| [QHierarchy](https://github.com/pratik227/quasar-qhierarchy) | QHierarchy is a Quasar App Extension. It allows you to display data in hierarchy structure on your page. |
| [QDraggableTree](https://github.com/mayank091193/quasar-draggable-tree) | QDraggableTree is a Quasar Framework app extension that allows you to drag and drop the nodes in the Quasar QTree |
| [APIWrapper](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper) | An out of the box API client that wrap [axios](https://github.com/axios/axios) with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency...|
| Quasar Tiptap | [github](https://github.com/donotebase/quasar-tiptap), [demo](https://donotebase.github.io/quasar-tiptap) | A modern WYSIWYG rich-text editor built on top of tiptap and Quasar Framework for Vue.js. | v1.9.14 |
| [QFilterConfigurator](https://github.com/heartbeatLV/app-extension-q-filter-configurator) | An easy filter viewer | v1.0.7 |
| [QDatePicker](https://github.com/heartbeatLV/app-extension-q-date-picker) | A date selector (single/period) with the comparison functionality | v1.0.0-rc.1 |
| [QsSelect](https://github.com/heartbeatLV/app-extension-qs-select) | A searchable QSelect with which accepts an url | v0.4.2 |
| [QGoogleMap](https://github.com/mayur091193/q-google-map) , [Docs and Examples](https://q-google-map.netlify.app/) | QGoogleMap(q-google-map) - Quasar app extension to integrate Google Maps | v1.13.2 |
| [QWidgets](https://github.com/mayank091193/quasar-widgets) , [Docs and Examples](https://quasar-widgets.netlify.app/#/docs) | QWidgets(q-widgets) - An awesome set of beautiful Widgets made with love using Quasar Framework and Vue.js! | v1.1.0 |
| [QStatistic](https://github.com/Junvary/quasar-app-extension-qstatistic) | QStatistic allows you to display data statistically. |
| [QCascader](https://github.com/Junvary/quasar-app-extension-qcascader) | QCascader can be used to display and select tree structured data. |

# Other Community Components and Tools
> For older Quasar versions or not supplied through a Quasar App Extension

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [github](https://github.com/mayur091193/readme-pro), [demo](https://readmepro.netlify.app/) | An easy and simple way to generate readme written in quasar framework  |  v2.7.7 |
| Quasar Echarts Example | [github](https://github.com/pratik227/quasar-echarts), [demo](https://quasar-echarts-v5.netlify.app/) | Project using Quasar framework and Echarts 📊 📈 📉 |  v1.15.0 |
| Quasar Geolocation Example | [github](https://github.com/tomers/quasar-geolocation-example), [demo](https://quasar-geolocation-example.surge.sh/) | Sample app to demonstrate usage of geolocation with Quasar Framework | v1.9.8 |
| Quasar 3D Model | [github](https://github.com/patrickmonteiro/quasar-3d-model), [demo](http://quasar3d.surge.sh/) | Sample application with a 3D file renderer (.stl, .obj, .json, .dae, .ply, .gltf) | v1.1.2 |
| Quasar Apex Charts | [github](https://github.com/patrickmonteiro/quasar-apexcharts), [demo](https://quasar-apexcharts.surge.sh) | Project using Quasar framework and ApexCharts 📊 📈 📉 | v1.1.2 |
| Quasar Barcode Reader | [github](https://github.com/patrickmonteiro/quasar-barcode-reader), [demo](https://quasar-barcode-reader.surge.sh/#/) | Base code for a code reader application:   EAN, CODE 128, CODE 39, EAN 8, UPC-A, UPC-C, I2of5, 2of5, CODE 93 e CODABAR with QuaggaJS and Quasar Framework(no dependency on cordova) | v1.1.2 |
| Quasar QRCode Reader | [github](https://github.com/patrickmonteiro/quasar-qrcode-reader), [demo](https://quasar-qrcode-reader.surge.sh/#/) | A simple Javascript-only QRCode generator and reader (no dependency on cordova). Great for web and PWA solutions. | v1.0.6 |
| Quasar Speech API | [github](https://github.com/patrickmonteiro/quasar-speech-api), [demo](https://quasarspeechapi.surge.sh/#/) | Example project using Speech Web API to transcribe speech into text and synthesize text into speech. | v1.0.6 |
| QInputEx Component | [github](https://github.com/snowyu/qinputex) | The Advance Input Component for Quasar is used as single-line input box for date, time, password, color, select etc. | v1.0.0-beta.1 |
| Quasar Snippets | [github](https://github.com/Abdelaziz18003/vscode-quasar-snippets), [Marketplace](https://marketplace.visualstudio.com/items?itemName=abdelaziz18003.quasar-snippets) | Quasar components' snippets for VSCode that can increase your productivity working on Quasar projects. | v0.17.x |
| Quasar Steem Beneficiaries | [github](https://github.com/irelandscape/qv-steem-beneficiaries)<br/>[npm](https://www.npmjs.com/package/qv-steem-beneficiaries) | A Quasar/Vue component for easily adding beneficiaries support to your Steem dapp. | v0.17.16 |
| Quasar calendar | [github](https://github.com/stormseed/quasar-calendar) | A full calendar display in multiple formats that accepts event data and display it in month, week, multi-day, single day and agenda views | v0.15.6 |
| Laqu-l | [github](https://github.com/laqul/laqul/) | A complete starter kit that allows you create amazing apps that look native thanks to the Quasar Framework. Powered by an API developed in Laravel Framework using the easy GraphQL queries language. And ready to use the Google Firebase features. | v0.15.10 |
| Quasar Cloud | [github](https://github.com/mstaack/quasar-cloud-demo) | An online file manager project (like dropbox) showing usage of axios, vuex, validation, authentication | v0.15.10 |
| Quasar Oh-my-zsh | [github](https://github.com/sajt/oh-my-zsh) | A plugin for Oh-my-zsh | v1.0.0 |
| APIWrapper | [github](https://github.com/RobertoLangarica/quasar-app-extension-api-wrapper), [npm](https://www.npmjs.com/package/api-client-wrapper) | A package designed to wrap up the most common features of an api client implementation, with common features like: Vuex store integration, masive requests, homogeneous responses, concurrency... | v1 |
| Quasar DevOps | [github](https://github.com/Qoyyuum/quasar-devops) | A repo dedicated to CI/CD for Quasar Framework | v1 |
| Starter kit | [github](https://github.com/MilosPaunovic/quasar-v1-starter) | Starter kit for quickly lifting your project from the ground up; includes public pages (Login, Register, Reset Password) with Cypress testing setup, Router & VUEX are present with a lot more helpful stuff implemented. | v1 |

# Projects Using Quasar

| Name | Links | Description | Quasar |
| --- | --- | --- | --- |
| Readme Pro | [Github](https://github.com/mayur091193/readme-pro), [Website](https://readmepro.netlify.app/) | Readme Pro is an open-source readme and github profile generator written in Quasar Framework | v2.7.7 |
| Quasar Admin Premium  | [website](https://quasar-admin-premium.netlify.app/) | Beautiful premium Quasar admin template for Vue 3 | v2.7.1 |
| Tomatodo  | [github](https://github.com/emingenc/tomatodo),[website](https://tomatodo.web.app/),[android](https://play.google.com/store/apps/details?id=com.emdiapps.tomatodo)  | Pomodoro app that rewards with luck wheel after pomodoro sessions | v2.0.0 |
| GreaterWMS | [github](https://github.com/Singosgu/GreaterWMS),[website](https://production.56yhz.com/#/) | Open Source Warehouse Management System | v2.1.0 |
| Gobazar.uz | [website](https://gobazar.uz) | The first big e-commerce website made with Vue.js/Quasar | v1 |
| Jump Park | [ios](https://apps.apple.com/us/app/jump-park-%D0%BF%D0%B0%D1%80%D0%BA-%D1%81-%D0%B1%D0%B0%D1%82%D1%83%D1%82%D0%B0%D0%BC%D0%B8/id1563315885), [android](https://play.google.com/store/apps/details?id=org.bazumax.jumppark.app) | Take control gym membership for admin, and clients can see info. The first production mobile app using Quasar v2. | v2.0.0-beta.12 |
| Quasar Gaming Template | [github](https://github.com/pratik227/quasar-gaming), [website](https://quasar-gaming.netlify.app/) | Free Quasar Gaming Template based on Vue js and Quasar Framework. | v1.12.12 |
| Kudos - Company profile template | [github](https://github.com/mayank091193/vue-quasar-company-profile-website), [website](https://quasar-company-profile-template.netlify.app/) | Free template for company profile made using Quasar Framework and Vue.js! It is a fully responsive template which you can use for your company or may be for your own portfolio website. | v1.9.15 |
| Expense Tracker | [github](https://github.com/rbretecher/expense-tracker), [website](https://expense-tracker-demo-42250.firebaseapp.com) | A simple application to track expenses and split bills. | v1 |
| Quasar Scrum | [github](https://github.com/mayank091193/quasar-scrum), [website](https://quasar-scrum.netlify.com/) | A Free Quasar Scrum Template : Agile process framework for managing complex tasks | v1.9.12 |
| Quasar Admin | [github](https://github.com/pratik227/quasar-admin), [website](https://quasar-admin-demo.netlify.com/) | A Free and beautiful Quasar Admin template | v1.9.3 |
| Quasar Shopping | [github](https://github.com/mayur091193/quasar-shopping), [website](https://quasar-shopping.netlify.com) | Free and Open source eCommerce UI template written in Vue.js/Quasar | v1.9.3 |
| Quasar CRM Admin | [github](https://github.com/mayank091193/quasar-admin-crm), [website](https://quasar-admin-crm-template.netlify.com/) | A free and beautiful Quasar template for CRM needs. | v1.8.5 |
| Personal website template | [github](https://github.com/mayank091193/mayank-profile), [website](https://mayank-patel.netlify.app/#/) | Free template for personal website | v1.9.15 |
| Quasar Typescript Admin Template| [github](https://github.com/dirkhe1051931999/quasar-typescript-admin-template) | 💫 💫 template for quasar admin with typescript 🌝 🌝 support pwa,electron,spa,Ionic | v0.0.1 |
| Alighieri | [github](https://github.com/zuck/alighieri/), [website](https://zuck.github.io/alighieri) | A distraction-free writer tool | v1.15.4 |
| P.volve | [website](https://my.pvolve.com) | [Video workout subscription](https://my.pvolve.com/preview), [landing pages](https://my.pvolve.com/offer/subway), also includes weight tracking, photo upload, etc. for subscribers | v0.15.9 |
| Brotheld | [android](https://play.google.com/store/apps/details?id=de.sopamo.brotheld), [ios](https://itunes.apple.com/de/app/brotheld/id1193619132?l=de&ls=1&mt=8) | Brotheld (Bread Hero), a german app for hobby bakers | v0.14 |
| MyClinic | [android](https://play.google.com/store/apps/details?id=today.myclinic.mobileapp&hl=en), [ios](https://itunes.apple.com/us/app/myclinic/id1311703491?ls=1&mt=8) | Application for displaying and managing medical clinic examination room status | v0.14 |
| Weacast | [github](https://github.com/weacast/weacast), [website](https://weacast.github.io/weacast-docs/) | Open source platform to gather, expose and make use of weather forecast data | v0.13.10 |
| CryptoPrice | [github](https://github.com/lmfresneda/crypto-price), [android](https://play.google.com/store/apps/details?id=com.es.cryptoprice) | An app to inform us of price (USD & EUR) of the main crypto-coins | v0.14.4 |
| Quran App | [website](https://quran-lite.firebaseapp.com), [android](https://play.google.com/store/apps/details?id=rashidnk.quran) | Quran Lite with English translation | v0.14.4 |
| SHUhelper | [github](https://github.com/shuopensourcecommunity/SHUhelper), [website](https://www.shuhelper.cn)| Open source university online community and toolkits | v0.14.7 |
| 2018 Quarterly Tax Estimator | [android](https://play.google.com/store/apps/details?id=com.codingfriend.quarterlytaxes), [iOS](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1360874746?ls=1&mt=8), [Mac App Store](https://itunes.apple.com/us/app/2018-quarterly-tax-estimator/id1342826706?ls=1&mt=12) | Estimates quarterly taxes and taxes to save per paycheck | v0.14 |
| Go2See | [website](https://m.go2see.ru) | Russian online travel service | v0.14.7 |
| Guitar Workshop | [website](https://guitarworkshop.digital) | E-commerce shop, library, streaming video player, real time chat | v0.15.9 |
| Karrot (Foodsaving Worldwide) | [github](https://github.com/yunity/karrot-frontend), [website](https://karrot.world) | A web-app to support foodsaving groups worldwide, with the goal to save our common resources as much as possible | v1.14.6 |
| onvif-nvt-snapshot-vue-sample | [github](https://github.com/hawkeye64/onvif-nvt-snapshot-vue-sample) | An onvif-nvt (package) sample project for snapshots and PTZ using Vue 2.5 and Quasar 0.14.7 | v0.14.7 |
| Finca Report | [website/android/ios](https://fincareport.com/) | Sistema de informacion para el cultivo de palma africana| v0.15.3 |
| SoFoot | [android](https://play.google.com/store/apps/details?id=com.sofoot), [ios](https://itunes.apple.com/fr/app/so-foot/id591043947?mt=8) | SO FOOT is an iOS & Android mobile football news application, seen differently. With original and offbeat content, the app is based on real time and smart content feed to make it simple and accessible with a scroll. | v0.14.7 |
| PaintTubeTV | [website](https://painttube.tv) | Shop, library, streaming video player, real time chat | v0.15.9 |
| MyBibou | [android](https://play.google.com/store/apps/details?id=io.benovea.mybibou&hl=fr), [ios](https://itunes.apple.com/fr/app/mybibou/id1319283569) | MyBibou is an iOS & Android mobile application that simplifies the life of parents for successful family outings. The app geolocates users on a map and give them relevant information based on their needs and situation. | v0.14.7 |
| Budgex | [pwa](https://budgex-e481b.firebaseapp.com) | Budget and expense tracker | v0.15.1 |
| Booly | [website](https://boolyapp.com/) | A people-matching tool | v0.14.6 |
| Takista | [android](https://play.google.com/store/apps/details?id=io.sergiuneagu.taskista), [github](https://github.com/sergiuwd/Taskista) | To Do Lists Manager | v0.13.4 |
| Blinga! | [website](https://app.blinga.club/), [android](https://play.google.com/store/apps/details?id=club.blinga.app), [ios](https://itunes.apple.com/us/app/blinga/id1219393599?l=pt&ls=1&mt=8) | A points program and guide for selling products and services in cities. | v0.14.0 |
| Charging Stations | [github](https://github.com/nestebe/charging-stations-tracker) | Charging stations viewer hybrid app | v0.14 |
| Carpool 3D | [website](https://carpol.picktype.com/v/truck) | Carpool 3D Truck | v0.14.7 |
| The Amusing Development | [website](https://portfolio-site-78a03.firebaseapp.com) | Portfolio website | v0.14.7 |
| Habot | [github](https://github.com/ghys/habot) | A chatbot for openHAB using machine-learning natural language processing from OpenNLP | v0.14.6 |
| TMdb | [website](https://codingstones.github.io/tmdb-quasar/#/popular_films), [github](https://github.com/codingstones/tmdb-quasar) | Quasar app with The Movie DB catalog | v0.14.7 |
| Take Action | [android](https://play.google.com/store/apps/details?id=com.stephensuess.takeaction), [ios](https://itunes.apple.com/us/app/takeaction-me/id1276844461) | v0.14.5 ||
| Voting Daap | [github](https://github.com/Vishwas1/voting-daap-2017) | E-voting | v0.14 |
| Kanttum | [website](https://app.kanttum.com/) | Teacher training without complication | v0.14.8 |
| Stock Scanner | [github](https://github.com/vikramIde/stock_scan1) | Working Demo of Barcode/QR code scanner using VueJs+Quasar+Cordova | v0.13.4 |
| ShockPro | [ios](https://itunes.apple.com/us/app/shockpro/id1244901518?mt=8) | Maintenance Interval Tracking | v0.12 |
| My Spells | [website](http://myspells.netlify.com/) | 5e Personal Spellbook | v0.13.9 |
| Tigris | [github](https://github.com/jogral/tigris-desktop-ui) | Micro-learning for professionals | v0.13 |
| Pilgrim and Wanderer's Songbook | [android](https://play.google.com/store/apps/details?id=com.maxprog.songbooks), [ios](https://itunes.apple.com/pl/app/%C5%9Bpiewnik-pielgrzyma-w%C4%99drowca/id1364666898?l=pl&mt=8) | Mobile Application Songbooks has been created for one of the biggest Protestant Church. | v0.15.12 |
| dockJob | [github](https://github.com/rmetcalf9/dockJob), [docker hub](https://hub.docker.com/r/metcarob/dockjob/) | Job scheduler with a web UI - designed to run inside a container. | v0.15.5 |
| Your Daily Walk | [website](https://yourdailywalk.com/) | Subscription ecommerce, workout video calendar, streaming video player, real time chat | v0.15.9 |
| Chronocross | [android](https://play.google.com/store/apps/details?id=org.yevlabs.chronocross) | Productivity tool that combines Pomodoro Technique and Eisenhower Matrix. | v0.15.10 |
| Jornal Pelicano | [android](https://play.google.com/store/apps/details?id=com.cordova.jornalpelicano&hl=pt) | Mobile application for a Navy Web Journal | v0.14.1 |
| Vuenote | [github](https://github.com/ExNG/vuenote) | Vuenote is the simplest note app. | v0.15.10 |
| Sifà | [pwa](https://sifapp.com) | Social platform for buyer groups | v0.15.10 |
| Realworld Conduit | [github](https://github.com/geoidesic/realworld-quasar/) | Medium.com clone | v0.15.10 |
| vue-quasar-admin | [website](http://jaycewu.coding.me/vue-quasar-admin),[github](https://github.com/wjkang/vue-quasar-admin) | admin-dashboard | v0.15.14 |
| letsbutterfly(tm) | [pwa](https://app.letsbutterfly.com) | Real estate platform in your pocket. https://letsbutterfly.com | v0.15.10 |
| quasar-documentation++ | [github](https://github.com/slowaways/quasar-documentation-pp) | All-in-one Quasar Documentation | v0.16.0 |
| Dolphin Note | [website](https://www.donote.info) | A Simple and Elegant markdown note application. | v0.15.14 |
| Quicknote | [website](https://quick.donote.info) | A Simple and Elegant markdown quicknote DApp. | v0.15.14 |
| T9N Manager | [website](http://t9n.ist) | Translation manager for developers | v0.16.0 |
| Kicktrack | [website](https://kicktrack.app), [Android](https://play.google.com/store/apps/details?id=kicktrack.app), [iOS](https://itunes.apple.com/us/app/kicktrack/id1397163195?mt=8) | Foosball score keeper | v0.16.0 |
| Musical Data | [website](https://musicaldata.com) | Access Spotify's data of your favorite music. | v0.16.0 |
| Nebide | [website](https://nebide.block2100.com) | Cross-platform Nebulas smart contract IDE. | v0.16.0 |
| Nick Zuccarelli | [website](https://nickzuccarelli.com.au) | A portfolio website for Nick Zuccarelli (a.k.a: me!) | v0.16.0 |
| jQuizzer | [android](https://play.google.com/store/apps/details?id=org.yevlabs.jquizzer) | Simple Java 8 Quiz / Trainer App | v0.16.0 |
| SA Email Builder | [website](https://emailbuilder.top) | Email template builder responsive v10 | v2.0.4 |
| Boid.com | [website](https://www.boid.com) | A blockchain based social computing platform. Homepage and web/electron app are pure Quasar. | v0.16.4 |
| Dappos Ethereum POS | [github](https://github.com/Dappos/Dappos), [website](http://dappos.app) | A Point of Sale (POS) app like Square! For Ethereum payments. Open in a Mobile wallet and receive customer's payments with an intuitive UI. | v0.17 |
| INTI | [website](https://byinti.com) | Online white-label ticketing system with CRM and custom Applications | Latest |
| Fastient | [PWA](https://fastient.com) | A journaling and stats tracking application for extended fasts. | v0.17.10 |
| Squync | [SPA](https://www.squync.com) | Music library. | v0.14 |
| CidadeMOB | [pwa](https://m.cidademob.com.br/), [android](https://play.google.com/store/apps/details?id=br.com.cidademob), [ios](https://itunes.apple.com/br/app/cidademob/id1154262726?l=en&mt=8) | (Brazil) Application that offers services of the city hall for citizens | v0.17.13 |
| GH Follower | [android](https://play.google.com/store/apps/details?id=com.eladcohen.ghfollower) | Simple app to get push notifications on a GitHub repository new release | v0.17.5 |
| Omnia Livestream | [SPA](https://omnia-app.org) | Free & affordable livestream provider for churches and ministries. Livestream to your website, Facebook, and YouTube, worldwide CDN, and Auto-Archiving.  | v0.15.14 |
| Romi | [PWA](https://romionline.com), [Android](https://play.google.com/store/apps/details?id=com.romionline) | eCommerce applications | v0.17.9 |
| Just Go Vote! | [website/PWA](https://justgovote.org), [ios](https://itunes.apple.com/us/app/just-go-vote/id1414331023), [android](https://play.google.com/store/apps/details?id=com.stephensuess.gotv.app) | App makes it easier for people to vote, and encourages them to do so in the upcoming mid-terms. | v0.17.17 |
| StemQ | [stemq.io](https://stemq.io) | Questions and Answers app dedicated to STEM topics and rewarding contributors with [Steem](https://www.steem.com) cryptocurrency. | v0.17.16 |
| Tenpin Toolkit | [iOS](https://itunes.apple.com/app/apple-store/id1390556454?pt=119111623&mt=8), [Android](https://play.google.com/store/apps/details?id=com.tenpintoolkit.app) | App featuring a collection of tools to help tenpin bowlers and coaches develop their skills and improve their games. | v0.17.17 |
| Trainero.com | [website](https://trainero.com), [iOS](https://itunes.apple.com/fi/app/trainerocomtrainerapp/id1439762339), [android](https://play.google.com/store/apps/details?id=com.trainero.app_trainer) | All-in-one App for a Personal Trainer with +35000 users world-wide | v0.17.18 |
| HyperSign | [Youtube](https://www.youtube.com/watch?v=Slhwunm4oT0), [GitHub](https://github.com/vikramIde/hypersign-mobile) | Hypersign is a cryptography based SingleSignOn Solution that enables users to securely access [Web/Blockchain/Federated] applications without providing their access credentials [usernames and passwords]. | v0.13 |
| schild.report | [github](https://github.com/hmt/schild.report), [German article](https://gist.github.com/hmt/391e5614189f9a4df34e0e1e9571bbd3) | This electron app is a report generator that works with schild data (German student administration)| v0.17.18 |
| P4wnP1_aloa | [website](https://github.com/mame82/P4wnP1_aloa) | Pentesting Framework for the Rapsberry Pi Zero W | v0.17.16 |
| CineMatch | [website](https://cine-match.com), [iOS](https://itunes.apple.com/jp/app/cinematch/id1448631386?l=en&mt=8), [android](https://play.google.com/store/apps/details?id=com.lucaban.cinematch) | A list app to organise films, tv shows and make shared watchlists! | v1-beta.15 |
| RankUp | [website](https://rankup.gg) | RankUp is a website that allows you to find teammates on cooperative and competitive video games like Overwatch or Rainbow Six Siege (more to come), build your team, and stay updated about video game news | v0.17.19 |
| Email Snippets | [mac](https://itunes.apple.com/us/app/email-snippets/id1439319487?mt=12), [ios](https://itunes.apple.com/us/app/email-snippets/id1442836840?mt=8) | Replying to the same emails over and over again? Do it in a snip with Email Snippets! Just choose your snippet to copy it to your clipboard, then paste into your Email app. | v0.17.20 |
| Counter Calculator | [ios](https://itunes.apple.com/us/app/counter-calculator-clicker/id1446418542?mt=8) | Need a counter / tally app that also lets you do those difficult calculations? Counter Calculator is the app for you! | v0.17.20 |
| Map Marker Generator | [website](https://map-marker-generator.firebaseapp.com/) | A Free Online Tool To Generate Custom Map Icons On The Fly | v0.17.19 |
| spoonacular | [website](https://spoonacular.com), [Android](https://play.google.com/store/apps/details?id=app.com.spoonacular), [iOS](https://itunes.apple.com/us/app/spoonacular-food-companion/id1406527413) | spoonacular food companion, meal planner, and shopping list | v0.17.20 |
| +Economicas | [Android](https://play.google.com/store/apps/details?id=buromar.maseconomicas), [iOS](https://itunes.apple.com/us/app/economicas/id1415417683) | An unofficial student made app for public univeristy students from the [Faculty of Economic Sciences, University of Buenos Aires, Argentina.](https://www.economicas.uba.ar/) | v0.16.4 |
| +FADU | [Android](https://play.google.com/store/apps/details?id=io.masfadu), [iOS](https://itunes.apple.com/ar/app/fadu/id1358520979) | An unofficial student made app for public univeristy students from the [Faculty of Architecture, Design and Urbanism, University of Buenos Aires, Argentina.](http://www.fadu.uba.ar/) | v0.17.9 |
| Monocle Reader | [website](https://monoclereader.com/) | A modern and elegant RSS Reader. Feedly meets Pocket. | v0.17.23 |
| Blue Moon Camera and Machine | [website](https://bluemooncamera.com/) | Custom E-Commerce with realtime POS system inventory integration via API. | v0.17.22 |
| NotaCL Note-taking like chat messages | [Android](https://play.google.com/store/apps/details?id=com.jaeven.notaclPro) | Note taking with multiple chat rooms with different colors. | 1.0.0-beta.2 |
| Johnson Lai's Portfolio | [pwa](https://wenghan.me?q=github) | Portfolio Website for Johnson Lai. | 1.0.0-beta.11 |
| mempal | [website](https://mempal.io) | An app that helps you to remember everything you read and learn. | v0.17.20 |
| Agency «Day & Night» | [website](http://www.rent-poltava.com.ua/) | Apartment agency. | v1.0.0-beta |
| Kawal Pemilu (PILPRES) | [android](https://play.google.com/store/apps/details?id=org.sholeh.kawalpemilu&rdid=org.sholeh.kawalpemilu) | Election Guard In Indonesia. | v1.0.0-beta.17 |
| Cashier | [app](http://cashier.alensiljak.ml/), [source](https://gitlab.com/alensiljak/cashier) | An app for creating ledger/hledger transactions | 1.0.0.beta24 |
| Exorcism | [github](https://github.com/siamx/exorcism) | Desktop wallpaper manager | 1.0.0-rc.6 |
| SunEngine | [github](https://github.com/sunengine/SunEngine), [website](https://sunengine.site) | CMS+ site engine with blog, articles and forum functionalities. Asp.Net Core on server side. | 1.2.x+ |
| Timesheet | [github](https://github.com/valasek/timesheet), [website](http://timesheet.simplesw.net:8080/) | Self-hosted application to manage project reporting. Golang, Gin used on server. | 1.9.2 |
| Havidea | [website](https://havidea.ru) | Social network for creative people. | 1.0.0-rc.5 |
| Stelace Heroes Platform | [github](https://github.com/stelace/heroes-platform-demo), [website](https://heroes.demo.stelace.com/s) | Open-source template featuring [Stelace platform runner](https://stelace.com) with Quasar UI and super heroes in NYC. | 1.0.0 |
| Gas Station Gamblers: California Scratchers | [Android](https://play.google.com/store/apps/details?id=com.dizyx.scratchermathcalifornia), [website](https://gsg.dizyx.com) | The smartest way to pick a California Scratcher! | 1.0.0-beta26 |
| issue blog | [github](https://github.com/ttop5/issue-blog), [website](https://ttop5.net/issue-blog) | A blog tool powered by GitHub issues.  | 1.0.0 |
| 61 Financial App | [Android](https://play.google.com/store/apps/details?id=au.com.sixonefinancial.app), [iOS](https://apps.apple.com/au/app/61-financial/id1467327628) | A replica of [61 Financial Web App](https://61financial.com.au) | v1 |
| Vugify | [github](https://github.com/Blaconix/vugify), [website](https://vugify.now.sh/) | Convert Vue HTML syntax to Pug. | v1.0.0 |
| Prokarman Free Resume Builder | [Website](https://prokarman.com/resume-builder) | A free resume builder to craft resumes for your dream job | v1 |
| Yawik Application Form | [gitlab](https://gitlab.com/yawik/applicationform), [website](https://form.yawik.org) | Application Form which can be used to apply for job postings | v2 (patched) |
| Yawik Jobwizard | [gitlab](https://gitlab.com/yawik/jobwizard), [website](https://yawik.gitlab.io/jobwizard) | Jobad generator with Google Jobs JSON-LD. Can authenticate against a keycloak | v2.1 (patched) |
| Content Hub | [Website](https://contenthub.cloud) | Spread the word about your business everywhere online and track your impact. | v1 |
| Gistor | [github](https://github.com/mallgroup/mal-gistor), [website](https://gistlike.pro) | Powerful UI for your Gist snippets stored on GitHub. | v1.2.x |
| Privy | [github](https://github.com/Poeticode/Privy), [Android](https://play.google.com/store/apps/details?id=com.silentsilas.pr1vy) | An educational crypto-toolkit that steps through the math for password security, RSA keypair generation, and hashing algorithms. | 1.0.0-beta.17 |
| LandHo | [gitlab](https://gitlab.com/riot.ai/landho), [PWA](https://landho.app) | Securely maintain your own search history across multiple search engines. | 1.0.0 |
| Webby | [gitlab](https://gitlab.com/riot.ai/w3b3), [PWA](https://heywebby.app) | Discover a better internet.  Find and favorite Blockstack dapps | 1.2.1 |
| Neolink | [website](http://poltava.neolink.com.ua/) | Online store. | v1 |
| Growth Journal | [website](https://growthjournal.app), [Android](https://play.google.com/store/apps/details?id=growthjournal.app), Web | Growth Journal: Become a better you. | 1.2.6|
| KetoShare | [Android](https://play.google.com/store/apps/details?id=com.customautosys.ketoshare), [website](https://customautosys.com/ketoshare) | A recipe and eatery sharing app for the Ketogenic dieting community, especially in Singapore. | v1.11.1 |
| Vertical Kit | [PWA](https://www.vertical-kit.com/en/) | Climbing Ropes catalog. Find your perfect rope. | 1.5.4 |
| MicroIoT Studio | [github](https://github.com/MicroIoT/studio), [website](https://www.microiot.top) | MicroIoT Platform web UI management tool | v1.5.0 |
| Simulstore | [website](https://www.simulstore.com) | Simulstore is an Industrial AppStore. Tools for Engineering Calculations and Digital Twin Applications | v1.5.5 |
| Api Doc | [github](https://github.com/joaomede/Api-Doc) | An open source Crud API documenter | v1.5.11 |
| SAM9000 APM | [PWA](https://www.sam9000.com) | Project Management, File Sharing, Document and Email Management AI Powered | v1.5+ |
| Learn music theory with Sonid | [WEB](https://sonid.app), [iOS](https://apps.apple.com/us/app/sonid/id1490221762?ls=1), [Android](https://play.google.com/store/apps/details?id=org.stroopwafel.music.app) | Easily learn music theory in a fun a structured manner! | v1.5+ |
| Quacker | [github](https://github.com/farwish/quacker) | Browser Extension to clean website ADs | v1.0.0+ |
| Poker2win | [github](https://github.com/poker2win), [SPA](https://poker2win.github.io) | Ethereum Dapp poker game for bet, i18n support | v1.6.0+ |
| Dashblocks Template | [github](https://github.com/slanatech/dashblocks-template), [website](https://slanatech.github.io/dashblocks-template) | A Free and Open Source Quasar Material Admin Template focusing on beautiful Dashboards and In-App Analytics | v1 |
| Github Method | [github](https://github.com/cartovarc/github-method), [website](https://github-method.web.app/) | Cool habit tracker based on Github concept | v1 |
| Afterman | [github](https://github.com/itsalb3rt/afterman) | Create beutiful docs in markdown and HTML from postman collection | v1 |
| Offso | [SSR](https://www.offso.com) | Beautiful search application user interface | v1.9.0+ |
| DevHelper | [website](https://tool.offso.com) | Online tool and software helper for dev | v2.0 |
| Fotrino | [github](https://github.com/michaelmolino/fotrino-frontend), [website](https://www.fotrino.com) | Photo gallery | v1.11.1 |
| coin-monitor | [github](https://github.com/coin-monitor), [SPA](https://coin-monitor.github.io) | Cryptocurrency market quant user interface | v1.11.3+ |
| @winwin/hexo-editor | [github](https://github.com/YuJianghao/winwin-hexo-editor), [website](https://yujianghao.github.io/winwin-hexo-editor/) [demo](http://hexoeditor.demo.yujianghao.cn/)| An online editor for Hexo blog. | v1.8.6 |
| The COVID-19 Game | [Android](https://play.google.com/store/apps/details?id=com.customautosys.covidgame), [Website](https://customautosys.com/covidgame), [Snap](https://snapcraft.io/covidgame), [Firefox](https://addons.mozilla.org/en-US/firefox/addon/the-covid-19-game) | Fight the COVID-19 infection with your white blood cells! | v1.11.3 |
| Groovechat.fm | [website](https://groovechat.fm/) | A collaborative listening app for Spotify, alowing several people to listen to a playlist at the same time. | v1.11.3 |
| Custom Automated Systems Pte Ltd website | [Website](https://customautosys.com) | Custom Automated Systems Pte Ltd website | v1.11.3 |
| Basehop Deployments | [Website](https://www.basehop.co.za) | Zero Downtime PHP application deployment | v1.12.0+ |
| Al-Dig (Al-Quran Digital app) | [github](https://github.com/sm-alfariz/aldig) | Al-Quran Digital with Indonesian translation (for now) | v1.0.0+ |
| Qodo | [github](https://github.com/vycoder/qodo) | An open-source productivity app. Demonstrate how and what it's like to build multi-platform apps using Quasar | v1.9.4 |
| Odoo In Vue | [github](https://gitlab.com/sylnsr/odoo-in-vue) | Get up to speed quickly when building a Vue / Quasar app for your Odoo backend | v1.12+ |
| Tabulo | [Website](https://tabulo.app) | The virtual replacement for whiteboards | v1.13.2+ |
| Skinosis App | [PWA](https://app.skinosis.com), [Android](https://play.google.com/store/apps/details?id=com.skinosis.app) | Skinosis is a one-on-one skin diagnosis and cosultaion app | v1.0.0+ |
| Skinosis App Landing Website | [PWA](https://skinosis.com) | Landing website for Skinosis App | v1.0.0+ |
| Whoops Monitor | [PWA](https://github.com/whoopsmonitor/whoopsmonitor) | A monitoring tool that gives you clarity over your application landscape. | v1.0.0 |
| Agile Visitors | [Github](https://github.com/itsalb3rt/agile-visitors),[Web](https://agile-visitors.netlify.app/) | Application for registering employee entries with the possibility of generating reports, validating and storing users with minimal effort. | v1.14.0 |
| Project Management Application | [Web](http://giovannicosenza.free.fr/) | Project Management Application to track billable hours and budget spent across all projects. Automatic margin calculation and chart generation for reporting. | v1 |
| mipa | [Github](https://github.com/collective-change/mipa), [PWA](https://mipa.collective-change.org/) | A strategic coordination app from [collective-change.org](https://collective-change.org/) to help the world achieve sustainablility by 2030. | v1.14.7 |
| Neeto-Vue | [Github](https://github.com/TankNee/Neeto-Vue) | Yet another awesome wiz note client that was built by Quasar Framework and Electron. | v1.15.0 |
| CreateVidio | [github](https://github.com/newflight-co/createvid), [website](https://createvid.io) | Dynamic cloud-based video generation. | v1 |
| Tutlo | [website](https://tutlo.ir) | Tutlo is online learning platform using BigBlueButton. | v1.14.2 |
| OIPIPE | [website](https://oipipe.com/) | Online Wholesale store. | v1.15.4 |
| KeeperRx | [Website](https://www.keeperrx.com), [PWA](https://app.keeperrx.com) | Take control of your medical life!  Create medical profiles for the entire family. | 1.14.7 (as of 20210324) |
| SINTASI | [Website](https://www.sintasi.com), [SPA](https://app.sintasi.com) | Dashboard for Clinic management system. | v1.15.7 |
| Mission | [github](https://github.com/mission-poss), [SPA](https://mission-poss.github.io) | Mission of small games | v1.11.3+ |
| Coloban | [Web/PWA](https://app.coloban.com), [Android](https://play.google.com/store/apps/details?id=org.cordova.coloban.app), [Windows/MacOS](https://www.coloban.com/download) | Collaborative task manager + Messsenger: Chat and calls to teammates, TODOs on the fly during conversation, Kanban, Calendar, Gantt, Eisenhower Offline mode, Multiplatform and many more! | v2|
| Dadadash | [GitHub](https://github.com/daptin/dadadash) | Office suite with file browser, document editor, spreadsheet editor, calendar and data tables with CRUDX API's ready to deploy | v1.0.0 |
| BlogToNFT | [website](https://blogtonft.com/) | BlogToNFT is for all the writers/bloggers who wish to create their own NFT. At BlogToNFT a blogger/writer will have to prove their ownership and after adding details they can easily publish NFT straightaway into the Blockchain which is also visible on opensea | v1.0.0 |
| Hesabdaram | [website](https://landing.hesabdaram.ir) | Hesabdaram is an accounting social network | v2.7.0 |
| Supplier Of Bamachoub | [website](https://supplier.bamachoub.com) | Management panel and seller panel of Bamachob market website | v2.7.5 |
| gin-quasar-admin | [Github](https://github.com/Junvary/gin-quasar-admin), [Website](http://81.68.159.232/) | A full-featured management system based on Quasar2,Vue3,Go,Gin,Gorm. | v2.10.1 |
"
1073,"ARCHIVED: Contains historical course materials/Homework materials for the FREE MOOC course on ""Creative Applications of Deep Learning w/ Tensorflow"" #CADL","[![Build Status](https://travis-ci.org/pkmital/CADL.svg?branch=master)](https://travis-ci.org/pkmital/CADL) [![Slack Channel](https://cadl.herokuapp.com/badge.svg)](https://cadl.herokuapp.com)

# <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>

This repository contains lecture transcripts and homework assignments as Jupyter Notebooks for the first of three <a href=""https://www.kadenze.com/partners/kadenze-academy"">Kadenze Academy</a> courses on <a href=""https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow/info"">Creative Applications of Deep Learning w/ Tensorflow</a>.  It also contains a python package containing all the code developed during all three courses.

**COURSE 1: Creative Applications of Deep Learning with TensorFlow I**  
Session 1: Introduction to TensorFlow  
Session 2: Training A Network W/ TensorFlow  
Session 3: Unsupervised And Supervised Learning  
Session 4: Visualizing And Hallucinating Representations  
Session 5: Generative Models  

**COURSE 2: Creative Applications of Deep Learning with TensorFlow II**  
Session 1: Cloud Computing, GPUs, Deploying  
Session 2: Mixture Density Networks  
Session 3: Modeling Attention with RNNs, DRAW  
Session 4: Image-to-Image Translation with GANs  

**COURSE 3: Creative Applications of Deep Learning with TensorFlow III**  
Session 1: Modeling Music and Art: Google Brain’s Magenta Lab  
Session 2: Modeling Language: Natural Language Processing  
Session 3: Autoregressive Image Modeling w/ PixelCNN  
Session 4: Modeling Audio w/ Wavenet and NSynth  

# Github Contents Overview

| | Session | Description | Transcript | Homework |
| --- | --- | --- | --- | --- |
| Python Package | **[pycadl](https://github.com/pkmital/pycadl)** | Python package required for courses 2 and 3 | N/A | N/A |
|Installation| **[Installation](#installation-preliminaries)** | Setting up Python/Notebook and necessary libraries. | N/A | N/A |
|Preliminaries| **[Preliminaries with Python](session-0)** | Basics of working with Python and images. | N/A | N/A |
|1| **[Computing with Tensorflow](session-1)** | Working with a small dataset of images.  Dataset preprocessing.  Tensorflow basics.  Sorting/organizing a dataset. | [lecture-1.ipynb](session-1/lecture-1.ipynb) [Colab](https://colab.research.google.com/notebook#fileId=1bjXwBG0AqGcFbSP5pjjL1A981mBhhN0f) | [session-1.ipynb](session-1/session-1.ipynb) |
|2| **[Basics of Neural Networks](session-2)** | Learn how to create a Neural Network.  Learn to use a neural network to paint an image.  Apply creative thinking to the inputs, outputs, and definition of a network. | [lecture-2.ipynb](session-2/lecture-2.ipynb) | [session-2.ipynb](session-2/session-2.ipynb) |
|3| **[Unsupervised and Supervised Learning](session-3)** | Build an autoencoder.  Extend it with convolution, denoising, and variational layers.  Build a deep classification network.  Apply softmax and onehot encodings to classify audio using a Deep Convolutional Network. | [lecture-3.ipynb](session-3/lecture-3.ipynb) | [session-3.ipynb](session-3/session-3.ipynb) |
|4| **[Visualizing Representations](session-4)** | Visualize backpropped gradients, use them to create Deep Dream, extend Deep Dream w/ regularization.  Stylize images or synthesize new images with painterly or hallucinated aesthetics of another image. | [lecture-4.ipynb](session-4/lecture-4.ipynb) | [session-4.ipynb](session-4/session-4.ipynb) |
|5| **[Generative Models](session-5)** | Build a Generative Adversarial Network and extend it with a Variational Autoencoder.  Use the latent space of this network to perform latent arithmetic.  Build a character level Recurrent Neural Network using LSTMs.  Understand different ways of inferring with Recurrent Networks.  | [lecture-5.ipynb](session-5/lecture-5.ipynb) | [session-5-part-1.ipynb](session-5/session-5-part-1.ipynb), [session-5-part-2.ipynb](session-5/session-5-part-2.ipynb) |

<a name=""installation-preliminaries""></a>
# Installation Preliminaries

<!-- MarkdownTOC autolink=true autoanchor=true bracket=round -->

- [Quickstart Guide](#quickstart-guide)
    - [Method 1: pip Install](#method-1-pip-install)
    - [Method 2: Docker Installation](#method-2-docker-installation)
- [What is Notebook?](#what-is-notebook)
- [Docker Toolbox](#docker-toolbox)
- [Jupyter Notebook](#jupyter-notebook)
    - [OSX/Linux](#osxlinux)
    - [Windows/Docker Containers](#windowsdocker-containers)
- [Navigating to Notebook](#navigating-to-notebook)
- [Installing Python Packages](#installing-python-packages)
    - [Ubuntu/Linux 64-bit for Python 3.4](#ubuntulinux-64-bit-for-python-34)
    - [Ubuntu/Linux 64-bit for Python 3.5](#ubuntulinux-64-bit-for-python-35)
    - [OSX for Python 3.4 or Python 3.5](#osx-for-python-34-or-python-35)
    - [Other Linux/OSX varieties](#other-linuxosx-varieties)
- [CUDA/GPU instructions](#cudagpu-instructions)
- [Testing it](#testing-it)
- [CUDA/GPU instructions for MacOS](#cudagpu-instructions-for-macos)
- [Troubleshooting](#troubleshooting)
    - [ImportError: No module named 'tensorflow'](#importerror-no-module-named-tensorflow)
    - [AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'](#attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C)
    - [GPU-related issues](#gpu-related-issues)
    - [Protobuf library related issues](#protobuf-library-related-issues)
    - [Cannot import name 'descriptor'](#cannot-import-name-descriptor)
    - [Can't find setup.py](#cant-find-setuppy)
    - [SSLError: SSL_VERIFY_FAILED](#sslerror-sslverifyfailed)
    - [Jupyter Notebook Kernel is always busy \(Windows\)](#jupyter-notebook-kernel-is-always-busy-windows)
    - [Something Else!](#something-else)

<!-- /MarkdownTOC -->

The first course makes heavy usage of Jupyter Notebook.  This will be necessary for submitting the homeworks and interacting with the guided session notebooks I will provide for each assignment.  Follow along this guide and we'll see how to obtain all of the necessary libraries that we'll be using.  By the end of this, you'll have installed Jupyter Notebook, NumPy, SciPy, and Matplotlib.  While many of these libraries aren't necessary for performing the Deep Learning which we'll get to in later lectures, they are incredibly useful for manipulating data on your computer, preparing data for learning, and exploring results.

<a name=""quickstart-guide""></a>
## Quickstart Guide

**Please skip this section and read the rest of this readme if you are unfamiliar w/ Jupyter Notebook or installing Python libraries.  This section is only for advanced users who want to get started quickly.**

There are two ways to get started.  You can use a native pip installation or use Docker.  There is a quickstart guide for both methods below.  If you have trouble with these, then please skip to the more in depth guides below these sections.

<a name=""method-1-pip-install""></a>
### Method 1: pip Install

For those of you that are proficient w/ Python programming, you'll need Python 3.4+ and the latest TensorFlow which you can install via pip, e.g.:

```bash
$ pip install tensorflow
```

or w/ CUDA as:

```bash
$ pip install tensorflow-gpu
```

<a name=""method-2-docker-installation""></a>
### Method 2: Docker Installation

If you want a controlled environment w/ all dependencies installed for you, and are proficient w/ Docker and Jupyter, you can get started w/ this repo like so:

```bash
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
$ cd CADL
$ docker build -t cadl .
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl /bin/bash
```

Note that you can skip the build step and download from docker hub instead like so:

```bash
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf pkmital/cadl /bin/bash
```

Be sure to replace ""session-1"" with whichever session you are working on, e.g. ""session-2"", ""session-3""...  This will give you a bash prompt with the files for each session:

```bash
root@39c4441bcde8:/notebooks# ls
README.md  lecture-1.ipynb  libs  session-1.ipynb  tests
```

Which you can use to launch jupyter like so:

```bash
root@39c4441bcde8:/notebooks# jupyter notebook --allow-root
[I 01:45:27.712 NotebookApp] [nb_conda_kernels] enabled, 2 kernels found
[I 01:45:27.715 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 01:45:27.729 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[I 01:45:27.799 NotebookApp] [nb_anacondacloud] enabled
[I 01:45:27.802 NotebookApp] [nb_conda] enabled
[I 01:45:27.856 NotebookApp] ✓ nbpresent HTML export ENABLED
[W 01:45:27.856 NotebookApp] ✗ nbpresent PDF export DISABLED: No module named 'nbbrowserpdf'
[I 01:45:27.858 NotebookApp] Serving notebooks from local directory: /notebooks
[I 01:45:27.858 NotebookApp] 0 active kernels
[I 01:45:27.858 NotebookApp] The Jupyter Notebook is running at: http://[all ip addresses on your system]:8888/?token=dd68eeffd8f227dd789327c981d16b24631866e909bd6469
[I 01:45:27.858 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Jupyter should then be running if you navigate Google Chrome (suggested!) to ""http://localhost:8888"".  If you navigate to the session-1.ipynb file, you will see the homework, or to ""lecture-1.ipynb"", to find the lecture transcripts.  The same goes for every other session.

If you need to relaunch the docker image again, you can write:

```bash
$ cd
$ cd CADL
$ docker start -i tf
```

If you want to use a GPU version, and have a Linux machine, and have an NVIDIA GPU, you can use [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) (this only works for Linux machines! for non-Linux machines that want to use GPU, please follow the expanded directions below, or the quickstart pip installation above):

```bash
$ wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.0-rc.3/nvidia-docker_1.0.0.rc.3-1_amd64.deb
$ sudo dpkg -i /tmp/nvidia-docker*.deb && rm /tmp/nvidia-docker*.deb
$ nvidia-docker build -t cadl-gpu -f Dockerfile-gpu .
$ nvidia-docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/session-1:/notebooks --name tf cadl-gpu /bin/bash 
$ nvidia-docker start -i tf
```

If you had any trouble w/ this setup then please go through the rest of this document which provides much more in depth details.


<a name=""what-is-notebook""></a>
## What is Notebook?

Jupyter Notebook, previously called ""iPython Notebook"" prior to version 4.0, is a way of interacting with Python code using a web browser.  It is a very useful instructional tool that we will be using for all of our homework assignments.  Notebooks have the file extensions ""ipynb"" which are abbreviations of ""iPython Notebook"".  Some websites such as [nbviewer.ipython.org](http://nbviewer.ipython.org) or [www.github.com](http://www.github.com) can view `.ipynb` files directly as rendered HTML.  However, these are not *interactive* versions of the notebook, meaning, they are not running the python kernel which evaluates/interacts with the code.  So the notebook is just a static version of the code contained inside of it.

In order to interact with notebook and start coding, you will need to launch Terminal (for Mac and Linux users).  For Windows users, or for anyone having any problems with the Linux/Mac instructions, please follow the next section on [Docker Toolbox](#docker-toolbox) very closely!  If you are not a Windows user, please first try skipping over the next section and use the installation instructions in [Jupyter Notebook](#jupyter-notebook) before trying Docker as this solution will be much faster than running Docker.

<a name=""docker-toolbox""></a>
## Docker Toolbox

Currently, Windows users can only install Tensorflow via [pip using a 64-bit Python 3.5 environment](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation-on-windows) or using Docker, as outlined below.

The easiest way to get up an running on any type of system is to use Docker.  Docker is a way of managing a ""virtual"" Linux machine on your computer which will aid the creation a machine capable of running Tensorflow.  First, please download and install the Docker Toolbox:

https://www.docker.com/products/docker-toolbox

Linux users can install docker using their favorite package manager.

For OSX and Windows users, you'll then need to run the ""Docker Quickstart Terminal"" which will launch a Terminal environment running on a virtual Linux machine on your computer. A virtual machine is basically an emulation of another machine. This is important because we'll use this machine to run Linux and install all of the necessary libraries for running Tensorflow.

Note for Windows users, if you have trouble launching the Docker Quickstart Terminal because you have ""Hyper-V"", please instead try using https://docs.docker.com/docker-for-windows/.  Then launch the newly installed ""Docker CLI"" program.

Once the Terminal is launched, either via Docker CLI or Docker Quickstart Terminal, run the following command (ignoring the `$` sign at the beginning of each line, which just denote that each line is a terminal command that you should type out exactly and then hit ENTER afterwards):

```shell
$ cd
$ docker-machine ip
```

If you are using Docker Toolbox, you should see your virtual machine's IP address as a result of the last command.  This is the location of your virtual machine.  <b>NOTE THIS IP ADDRESS</b>, as we'll need it in a second.  If you are using ""Docker for Windows"" instead, then you won't need this IP as we'll just use ""localhost"".

This next command will move to your ""home"" directory.  We'll then ""clone"" the github repo.  This will download everything for the course using ""git"".  If you have trouble w/ this step, make sure you have installed [git](https://git-scm.com/downloads).

```shell
$ cd
$ git clone --recursive https://github.com/pkmital/CADL.git
```

We'll now print out what the full path to that directory is.  PLEASE NOTE DOWN THIS DIRECTORY.  This is where everything will happen, and I'll explain that in a minute.

```shell
$ echo /$(pwd)/CADL
```

Now run the following command, which will download everything we need to run tensorflow, python, and jupyter notebook (again, ignore the ""$"" at the beginning of the line only)!

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

What this is doing is:
    * Running the docker image [pkmital/cadl](https://hub.docker.com/r/pkmital/cadl/)
    * --name is giving it a shorthand name of ""tf""
    * -v is mirroring the directory ""/$(pwd)/CADL"" to the virtual machine's directory of ""/notebooks""
    * -p is forwarding ports from the virtual machine to your local machine so that you can access the virtual machine's port
    * -it is running it as an interactive process

You will want to put files inside the ""/notebooks"" directory *only*.  If you place files on the virtual machine outside of the ""/notebooks"" directory, which is the SAME as the ""CADL"" directory on your local machine, they will *not* be saved.  We are using Docker to mirror the ""CADL"" directory on a virtual machine which has everything necessary for us to code in Python and Tensorflow.  _Whatever is in that directory will be mirrored on the virtual machine's directory under `/notebooks`._

You can also try running the docker run command with any other directory. For instance:

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v /Users/YOURUSERNAME/Desktop:/notebooks --name tf pkmital/cadl
```

Which would mean that your Desktop is where you can move files around so that on the virtual machine, you can interact with them under the `/notebooks`directory.

For OSX users, if you are installing Docker because you had installation problems using Anaconda and pip, you would instead write the following command (note the missing slash):

```shell
$ docker run -it -p 8888:8888 -p 6006:6006 -v $(pwd)/CADL:/notebooks --name tf pkmital/cadl
```

When you want to start this machine, you will launch the Docker Quickstart Terminal and then write:

```shell
$ cd
$ docker start -i tf
```

Notice that the command prompt will now be `#` instead of `$`.  You should have a new folder ""tensorflow"" inside your Home directory.  This directory will be empty to begin with.  Please make sure you do everything inside this directory only or else any files you make on your virtual machine WILL BE ERASED once it is shutdown!  When you clone the CADL repository, or expand the zip file downloads contents inside this directory via your Windows machine (it will be in your Home directory under a folder ""cadl""), then you will be able to access it via your Docker instance.

For instance, after running the `docker start -i tf` command, try going into the directory `/notebooks`:

```shell
# cd /notebooks
```

<a name=""jupyter-notebook""></a>
## Jupyter Notebook

<a name=""osxlinux""></a>
### OSX/Linux

Note: Windows/Docker users should scroll past this section to [""Windows/Docker""](#windows-docker-containers).  For OSX/Linux users, the easiest way to ensure you have Python 3.4 or higher and Jupter Notebook is to install Anaconda for Python 3.5 located here:

[OSX](https://docs.continuum.io/anaconda/install#anaconda-for-os-x-command-line-install) or [Linux](https://docs.continuum.io/anaconda/install#linux-install)

Make sure you restart your Terminal after you install Anaconda as there are some PATH variables that have to be set.

Then run the following:

```shell
$ curl https://bootstrap.pypa.io/ez_setup.py -o - | python
```

If you already have conda, but only have Python 2, you can very easily [add a new environment w/ Python 3](http://conda.pydata.org/docs/py2or3.html#create-a-python-3-5-environment) and switch back and forth as needed.  Or if you do not have Anaconda, but have a system based install, I'd really recommend either using Anaconda or [pyenv](https://github.com/yyuu/pyenv) to help you manage both python installations.

With Anaconda installed, you will have python and the package ""ipython[notebook]"", along with a ton of other very useful packages such as numpy, matplotlib, scikit-learn, scikit-image, and many others.

With everything installed, restart your Terminal application (on OSX, you can use Spotlight to find the Terminal application), and then navigate to the directory containing the ""ipynb"", or ""iPython Notebook"" file, by ""cd'ing"" (pronounced, see-dee-ing), into that directory.  This involves typing the command: ""cd some_directory"".  Once inside the directory of the notebook file, you will then type: ""jupyter notebook"".  If this command does not work, it means you do not have notebook installed!  Try installed anaconda as above, restart your Terminal application, or manually install notebook like so (ignore the ""$"" signs which just denote that this is a Terminal command that you should type out exactly and then hit ENTER!):

```shell
$ pip3 install ipython[notebook]
$ jupyter notebook
```

If you run into issues that say something such as:

```
[W 20:37:40.543 NotebookApp] Kernel not found: None
```

Then please try first running:

```shell
$ ipython3 kernel install
```

<a name=""windows-docker-containers"">
<a name=""windowsdocker-containers""></a>
### Windows/Docker Containers

For users running firewalls, you must make sure you have an exception as per [Jupyter Notebooks Firewall Instructions](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#firewall-setup) otherwise you may not be able to interact with the notebook.  Namely, you will need to allow connections from 127.0.0.1 (localhost) on ports from 49152 to 65535.  Once inside your Docker container as outlined above, you can now launch notebook like so:

```shell
$ cd /notebooks
$ jupyter notebook &
```

Note on Virtual versus Windows Directories:

This is tricky to grasp, mostly because I didn't explain it. Docker is ""virtual"" computer running inside your computer. It has its own filesystem and its own directories. So you can't reference your Windows machine's directories inside this machine. When you first ran docker (e.g. `$ docker run -it -p 8888:8888 -p 6006:6006 -v /$(pwd)/tensorflow:/notebooks --name tf pkmital/cadl`) it included as part of its command: `-v /$(pwd)/tensorflow:/notebooks`. What that was doing is ""mirroring"" a directory on your Windows machine inside your Virtual machine. So whatever was in your Windows machine under the directory `/$(pwd)/tensorflow` would appear in the Virtual machine under `/notebooks`. That Windows directory is likely `/Users/<YOURUSERNAME>/tensorflow`. So _ONLY_ inside that directory, create it if it doesn't exist, should you put files in order to access it on the Virtual machine.

So let's say your Username was ""pkmital"". Then your home directory would be `/Users/pkmital`, and you would have mirrored `/Users/pkmital/tensorflow` on your Windows Machine to the Virtual machine under `/notebook`. Now let's say I create a directory `/Users/pkmital/tensorflow/images` on my Windows Machine, and then put a bunch of png files in there. I will then see them in my Virtual machine under `/notebook/images`.  If I put the CADL repository inside `/Users/pkmital/tensorflow`, then I should have `/Users/pkmital/tensorflow/CADL/session-1/session-1.ipynb` and on the Virtual machine, it will be in `/notebooks/CADL/session-1/session-1.ipynb` - From this notebook, running on the virtual machine, accessed with Jupyter Notebook, I would access my images like so:

```python
import os
os.listdir('../../images')
```

<a name=""navigating-to-notebook""></a>
## Navigating to Notebook

After running ""jupyter notebook &"", you should see a message similar to:

```shell
root@182bd64f27d2:~# jupyter notebook &
[I 21:15:33.647 NotebookApp] Writing notebook server cookie secret to /root/.local/share/jupyter/runtime/notebook_cookie_secret
[W 21:15:33.712 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using encryption. This is not recommended.
[W 21:15:33.713 NotebookApp] WARNING: The notebook server is listening on all IP addresses and not using authentication. This is highly insecure and not recommended.
[I 21:15:33.720 NotebookApp] Serving notebooks from local directory: /root
[I 21:15:33.721 NotebookApp] 0 active kernels
[I 21:15:33.721 NotebookApp] The IPython Notebook is running at: http://[all ip addresses on your system]:8888/
[I 21:15:33.721 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
```

Don't worry if the IP address or command prompt look different.  Note where it says: `The IPython Notebook is running at`.  If you are running Docker (Windows users), this is where we need that IP address.  For OSX/Linux users, we'll use ""localhost"" so don't worry about this.  Now open up Chrome/Safari/Firefox whatever browser you like, and then navigate to:

http://localhost:8888

or for Windows users:

http://ADDRESS:8888

where ADDRESS is the ip address you should have noted down before. For instance, on my machine, I would visit the website:

http://192.168.99.100:8888

This will launch the Jupyter Notebook where you will be able to interact with the homework assignments!

<a name=""installing-python-packages""></a>
## Installing Python Packages

Packages are libraries or useful extensions to the standard python libraries.  In this course, we'll be using a few including Tensorflow, NumPy, MatPlotLib, SciPy, SciKit-Image, and SciKit-Learn.  Windows users will already have these libraries since the Docker container includes these.  However, if you needed to, you can install these using ""pip"", which is the python package manager.  OSX/Linux users should follow these steps just to be sure they have the latest versions of these packages. In Python 3.4 and higher, `pip` comes with any standard python installation.  In order to use `pip`, first make sure you are using the correct version.  One way to do this is check which pip you are running:

```shell
$ which pip
$ which pip3
```

Use which `pip` points to the install path that makes the most sense (e.g. Anaconda for OSX users for some reason does not symlink pip3 to the python3 pip, and instead points to the system version of python3).

Then you'll write:

```shell
$ pip3 install -U pip setuptools
```

To make sure you have an up to date pip, then:

```shell
$ pip3 install some_package
```

To get the necessary libraries:

```shell
$ pip3 install ""scikit-image>=0.11.3"" ""numpy>=1.11.0"" ""matplotlib>=1.5.1"" ""scikit-learn>=0.17""
```

This should get you all of the libraries we need for the course, EXCEPT for tensorflow.  Tensorflow is a special case, but can be `pip` installed in much the same way by pointing pip to the github repo corresponding to your OS like so.

<a name=""ubuntulinux-64-bit-for-python-34""></a>
### Ubuntu/Linux 64-bit for Python 3.4

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp34-cp34m-linux_x86_64.whl
```

<a name=""ubuntulinux-64-bit-for-python-35""></a>
### Ubuntu/Linux 64-bit for Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0rc1-cp35-cp35m-linux_x86_64.whl
```

<a name=""osx-for-python-34-or-python-35""></a>
### OSX for Python 3.4 or Python 3.5

```shell
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.11.0rc1-py3-none-any.whl
```

<a name=""other-linuxosx-varieties""></a>
### Other Linux/OSX varieties

You can pip install Tensorflow for most OSX/Linux setups including those that are making use of NVIDIA GPUs and CUDA using one the packages listed on this link:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation

If you are having trouble with pip installation, try looking here first: [Common Installation Problems](https://github.com/tensorflow/tensorflow/blob/37451589519d15207448dc2d9b1c0309de15d8db/tensorflow/g3doc/get_started/os_setup.md#common-problems).  Failing that, reach out to us on the forums, or else you may want to instead run a Docker instance as outlined in the Windows instructions above: [Setting up a Docker Container](#docker-toolbox).

<a name=""cudagpu-instructions""></a>
## CUDA/GPU instructions

Note that I have not provided instructions on getting setup w/ CUDA as it is beyond the scope of this course!  If you are interested in using GPU acceleration, I highly recommend using Ubuntu Linux and setting up a machine on [Nimbix](https://www.nimbix.net) or [Amazon EC2](https://aws.amazon.com/ec2/
) using the instructions here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#optional-install-cuda-gpus-on-linux.  If you're using Nimbix, you can skip the install process as there is already a machine pre-installed w/ Tensorflow.  Similarly, for Amazon EC2, there are many existing ""images"" of machines that have Tensorflow already installed.


<a name=""testing-it""></a>
## Testing it

To confirm it worked, try running:

```shell
$ python3 -c 'import tensorflow as tf; print(tf.__version__)'
```

You should see 1.0.0 printed, depending on which version you have installed.


<a name=""cudagpu-instructions-for-macos""></a>
## CUDA/GPU instructions for MacOS

When your Mac is equipped with a NVidia graphics card, you can use the GPU for computing with Tensorflow. GPU enabled computing is not supported for Macs with ATI or Intel graphics cards. 

If you have a previous cpu installation of tensorflow, uninstall it first:

```
$ pip3 uninstall tensorflow
```

Using homebrew, install the following packages:

```
$ brew install coreutils
$ brew tap caskroom/cask
$ brew cask install cuda
```
Once you have the CUDA Toolkit installed you will need to setup the required environment variables by adding the 
following to your `~/.profile`:
```
export CUDA_HOME=/usr/local/cuda
export DYLD_LIBRARY_PATH=""$DYLD_LIBRARY_PATH:$CUDA_HOME/lib""
export PATH=""$CUDA_HOME/bin:$PATH""
```
Tensorflow needs the library libcuda.1.dylib, so we have to create an additional symbolic link:
```
sudo ln -sf /usr/local/cuda/lib/libcuda.dylib /usr/local/cuda/lib/libcuda.1.dylib
```
Finally, you will also want to install the **CUDA Deep Neural Network** (cuDNN v5) library which currently requires an 
[_Accelerated Computing Developer Program_](https://developer.nvidia.com/cudnn) account. Once you have it downloaded 
locally, you can unzip and move the header and libraries to your local CUDA Toolkit folder:
```
$ sudo mv include/cudnn.h /Developer/NVIDIA/CUDA-8.0/include/
$ sudo mv lib/libcudnn* /Developer/NVIDIA/CUDA-8.0/lib
$ sudo ln -s /Developer/NVIDIA/CUDA-8.0/lib/libcudnn* /usr/local/cuda/lib/
```
Then, finally, install tensorflow with GPU support with:
```
$ pip3 install --ignore-installed --upgrade tensorflow-gpu
```

According to the instructions of the TensorFlow website, this should work. However, on MacOS 10.11 (El Capitan) and 
above, the environment variable `DYLD_LIBRARY_PATH` is ignored, resulting in an error in the interactive python console 
and JetBrains PyCharm IDE. The dynamic library `libcudart.8.0.dylib` fails to load. This
is due to a new protection meganism in MacOS 10.11 and higher. El Capitan ships with a new OS X feature: System 
Integrity Protection (SIP), also known as “rootless” mode. This reduces the attack surface for malware that relies on 
modifying system files by preventing any user, whether with system administrator (“root”) privileges or not from 
modifying a number of operating system directories and files.

**Warning:** The point of SIP is to prevent malware and other unwanted modifications into system files. Consider whether 
or not you want to dispense with this protection.
Follow these steps to disable SIP:

* Restart your Mac.
* Before OS X starts up, hold down Command-R and keep it held down until you see an Apple icon and a progress bar. Release. This boots you into Recovery.
* From the Utilities menu, select Terminal.
* At the prompt type exactly the following and then press Return: `csrutil disable`
* Terminal should display a message that SIP was disabled.
* From the  menu, select Restart.

You can re-enable SIP by following the above steps, but using `csrutil enable` instead.



<a name=""troubleshooting""></a>
## Troubleshooting

<a name=""importerror-no-module-named-tensorflow""></a>
### ImportError: No module named 'tensorflow'

You may have different versions of Python installed.  You can troubleshoot this by looking at the output of:

```shell
$ which python3
$ which pip3
$ python3 --version
$ pip3 --version
$ which python
$ which pip
$ python --version
$ pip --version
```

You may simply need to install tensorflow using `pip` instead of `pip3` and/or use `python` instead of `python3`, assuming they point to a version of python which is Python 3 or higher.

<a name=""attributeerror-module-tensorflow-has-no-attribute-%5C%5Cversion%5C%5C""></a>
### AttributeError: module 'tensorflow' has no attribute '\_\_version\_\_'

You could be running python inside a directory that contains the folder ""tensorflow"".  Try running python inside a different directory.


<a name=""gpu-related-issues""></a>
### GPU-related issues

If you encounter the following when trying to run a TensorFlow program:

```python
ImportError: libcudart.so.7.0: cannot open shared object file: No such file or directory
```

Make sure you followed the GPU installation [instructions](#optional-install-cuda-gpus-on-linux).
If you built from source, and you left the Cuda or cuDNN version empty, try specifying them
explicitly.

<a name=""protobuf-library-related-issues""></a>
### Protobuf library related issues

TensorFlow pip package depends on protobuf pip package version
3.0.0b2. Protobuf's pip package downloaded from [PyPI](https://pypi.python.org)
(when running `pip install protobuf`) is a Python only library, that has
Python implementations of proto serialization/deserialization which can be 10x-50x
slower than the C++ implementation. Protobuf also supports a binary extension
for the Python package that contains fast C++ based proto parsing. This
extension is not available in the standard Python only PIP package. We have
created a custom binary pip package for protobuf that contains the binary
extension. Follow these instructions to install the custom binary protobuf pip
package :

```bash
# Ubuntu/Linux 64-bit:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp27-none-linux_x86_64.whl

# Mac OS X:
$ pip install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp27-none-any.whl
```

and for Python 3 :

```bash
# Ubuntu/Linux 64-bit:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/protobuf-3.0.0b2.post2-cp34-none-linux_x86_64.whl

# Mac OS X:
$ pip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/protobuf-3.0.0b2.post2-cp35-none-any.whl
```

Install the above package _after_ you have installed TensorFlow via pip, as the
standard `pip install tensorflow` would install the python only pip package. The
above pip package will over-write the existing protobuf package.
Note that the binary pip package already has support for protobuf larger than
64MB, that should fix errors such as these :

```bash
[libprotobuf ERROR google/protobuf/src/google/protobuf/io/coded_stream.cc:207] A
protocol message was rejected because it was too big (more than 67108864 bytes).
To increase the limit (or to disable these warnings), see
CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.

```

<a name=""cannot-import-name-descriptor""></a>
### Cannot import name 'descriptor'

```python
ImportError: Traceback (most recent call last):
  File ""/usr/local/lib/python3.4/dist-packages/tensorflow/core/framework/graph_pb2.py"", line 6, in <module>
    from google.protobuf import descriptor as _descriptor
ImportError: cannot import name 'descriptor'
```

If you the above error when upgrading to a newer version of TensorFlow, try
uninstalling both TensorFlow and protobuf (if installed) and re-installing
TensorFlow (which will also install the correct protobuf dependency).

<a name=""cant-find-setuppy""></a>
### Can't find setup.py

If, during `pip install`, you encounter an error like:

```bash
...
IOError: [Errno 2] No such file or directory: '/tmp/pip-o6Tpui-build/setup.py'
```

Solution: upgrade your version of pip:

```bash
pip install --upgrade pip
```

This may require `sudo`, depending on how pip is installed.

<a name=""sslerror-sslverifyfailed""></a>
### SSLError: SSL_VERIFY_FAILED

If, during pip install from a URL, you encounter an error like:

```bash
...
SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed
```

Solution: Download the wheel manually via curl or wget, and pip install locally.

<a name=""jupyter-notebook-kernel-is-always-busy-windows""></a>
### Jupyter Notebook Kernel is always busy (Windows)
If your have installed Docker Toolbox on Windows but your jupyter notebook doesn't run properly (the notebook kernel keeps busy all the time when you open any file) then you might need to try different browsers (One guy tried Edge and it solved his problem after struggling for long time on Chrome/Firefox).

And you should also enable port forwarding by:

1. Open VirtualBox
2. Click on your default docker image.
3. Click Settings.
4. Click Network.
5. Click forward port.
6. Add a new rule named jupyter with host ip=127.0.0.1 and host/guess port=8888
7. Now you should be able to browse your notebook app via localhost:8888 (instead of having to browse 192.168.xx.xx:8888)

<a name=""something-else""></a>
### Something Else!

Post on the [Forums](https://www.kadenze.com/courses/creative-applications-of-deep-learning-with-tensorflow-i/forums?sort=recent_activity) or check on the Tensorflow [README](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md#pip-installation)
"
1460,React Hooks for Data Fetching,"[![SWR](https://assets.vercel.com/image/upload/v1572289618/swr/banner.png)](https://swr.vercel.app)

<p align=""center"">
  <a aria-label=""Vercel logo"" href=""https://vercel.com"">
    <img src=""https://badgen.net/badge/icon/Made%20by%20Vercel?icon=zeit&label&color=black&labelColor=black"">
  </a>
  <br/>
  <a aria-label=""NPM version"" href=""https://www.npmjs.com/package/swr"">
    <img alt="""" src=""https://badgen.net/npm/v/swr"">
  </a>
  <a aria-label=""Package size"" href=""https://bundlephobia.com/result?p=swr"">
    <img alt="""" src=""https://badgen.net/bundlephobia/minzip/swr"">
  </a>
  <a aria-label=""License"" href=""https://github.com/vercel/swr/blob/main/LICENSE"">
    <img alt="""" src=""https://badgen.net/npm/license/swr"">
  </a>
</p>

## Introduction

SWR is a React Hooks library for data fetching.

The name “**SWR**” is derived from `stale-while-revalidate`, a cache invalidation strategy popularized by [HTTP RFC 5861](https://tools.ietf.org/html/rfc5861).
**SWR** first returns the data from cache (stale), then sends the request (revalidate), and finally comes with the up-to-date data again.

With just one hook, you can significantly simplify the data fetching logic in your project. And it also covered in all aspects of speed, correctness, and stability to help you build better experiences:

- **Fast**, **lightweight** and **reusable** data fetching
- Transport and protocol agnostic
- Built-in **cache** and request deduplication
- **Real-time** experience
- Revalidation on focus
- Revalidation on network recovery
- Polling
- Pagination and scroll position recovery
- SSR and SSG
- Local mutation (Optimistic UI)
- Built-in smart error retry
- TypeScript
- React Suspense
- React Native

...and a lot more.

With SWR, components will get **a stream of data updates constantly and automatically**. Thus, the UI will be always **fast** and **reactive**.

---

**View full documentation and examples on [swr.vercel.app](https://swr.vercel.app).**

<br/>

## Quick Start

```js
import useSWR from 'swr'

function Profile() {
  const { data, error } = useSWR('/api/user', fetcher)

  if (error) return <div>failed to load</div>
  if (!data) return <div>loading...</div>
  return <div>hello {data.name}!</div>
}
```

In this example, the React Hook `useSWR` accepts a `key` and a `fetcher` function.
The `key` is a unique identifier of the request, normally the URL of the API. And the `fetcher` accepts
`key` as its parameter and returns the data asynchronously.

`useSWR` also returns 2 values: `data` and `error`. When the request (fetcher) is not yet finished,
`data` will be `undefined`. And when we get a response, it sets `data` and `error` based on the result
of `fetcher` and rerenders the component.

Note that `fetcher` can be any asynchronous function, you can use your favourite data-fetching
library to handle that part.

---

**View full documentation and examples on [swr.vercel.app](https://swr.vercel.app).**

<br/>

## Authors

This library is created by the team behind [Next.js](https://nextjs.org), with contributions from our community:

- Shu Ding ([@shuding\_](https://twitter.com/shuding_)) - [Vercel](https://vercel.com)
- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [Vercel](https://vercel.com)
- Joe Haddad ([@timer150](https://twitter.com/timer150)) - [Vercel](https://vercel.com)
- Paco Coursey ([@pacocoursey](https://twitter.com/pacocoursey)) - [Vercel](https://vercel.com)

[Contributors](https://github.com/vercel/swr/graphs/contributors)

Thanks to Ryan Chen for providing the awesome `swr` npm package name!

<br/>

## License

The MIT License.
"
3353,Community-based GPL-licensed network monitoring system,"[![Test Status](https://github.com/librenms/librenms/actions/workflows/test.yml/badge.svg?branch=master&event=push)](https://github.com/librenms/librenms/actions/workflows/test.yml?query=event%3Apush+branch%3Amaster)

Introduction
------------

LibreNMS is an auto-discovering PHP/MySQL/SNMP based network monitoring
which includes support for a wide range of network hardware and operating
systems including Cisco, Linux, FreeBSD, Juniper, Brocade, Foundry, HP and
many more.

We intend LibreNMS to be a viable project and community that:
- encourages contribution,
- focuses on the needs of its users, and
- offers a welcoming, friendly environment for everyone.

The [Debian Social Contract][10] will be the basis of our priority system,
and mutual respect is the basis of our behavior towards others.


Documentation
-------------

Documentation can be found in the [doc directory][5] or [docs.librenms.org][16], including instructions
for installing and contributing.


Participating
-------------

You can participate in the project by:
- Talking to us on [Discord][4] or [Twitter][3].
- Joining the [LibreNMS Community](https://community.librenms.org)
- Improving the [documentation][5].
- Cloning the [repository][2] and filing [pull requests][19] on GitHub.
- [Bug Reports](https://community.librenms.org) on our Community Forums
- See [CONTRIBUTING][15] for more details.


VM image
--------

You can try LibreNMS by downloading a VM image.  Currently, a Ubuntu-based
image is supplied and has been tested with [VirtualBox][8].

Download one of the [VirtualBox images][11] we have available, documentation is provided which details
login credentials and setup details.

License
-------

Copyright (C) 2006-2012 Adam Armstrong <adama@memetic.org>

Copyright (C) 2013-2022 by individual LibreNMS contributors

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.

[LICENSE.txt][14] contains a copy of the full GPLv3 licensing conditions.

The following additional license conditions apply to LibreNMS (a GPL
exception):

  As a special exception, you have permission to link or otherwise combine
  LibreNMS with the included copies of the following third-party software,
  and distribute modified versions, as long as you follow the requirements
  of the GNU GPL v3 in regard to all of the remaining software (comprising
  LibreNMS).

  Please see [Acknowledgements][17]

[2]: https://github.com/librenms/librenms ""Main LibreNMS GitHub repo""
[3]: https://twitter.com/librenms ""@LibreNMS on Twitter""
[4]: https://discord.gg/librenms ""Discord LibreNMS Server""
[5]: https://github.com/librenms/librenms/tree/master/doc/
[8]: https://www.virtualbox.org/ ""VirtualBox""
[10]: http://www.debian.org/social_contract ""Debian project social contract""
[11]: https://www.librenms.org/#downloads
[14]: https://github.com/librenms/librenms/tree/master/LICENSE.txt
[15]: https://docs.librenms.org/General/Contributing/
[16]: https://docs.librenms.org/
[17]: https://docs.librenms.org/General/Acknowledgement/
[19]: https://github.com/librenms/librenms/pulls


## Backers

Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/librenms#backer)]

<a href=""https://opencollective.com/librenms/backer/0/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/0/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/1/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/1/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/2/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/2/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/3/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/3/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/4/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/4/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/5/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/5/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/6/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/6/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/7/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/7/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/8/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/8/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/9/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/9/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/10/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/10/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/11/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/11/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/12/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/12/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/13/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/13/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/14/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/14/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/15/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/15/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/16/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/16/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/17/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/17/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/18/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/18/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/19/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/19/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/20/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/20/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/21/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/21/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/22/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/22/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/23/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/23/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/24/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/24/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/25/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/25/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/26/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/26/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/27/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/27/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/28/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/28/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/backer/29/website"" target=""_blank""><img src=""https://opencollective.com/librenms/backer/29/avatar.svg""></a>


## Sponsors

Become a sponsor and get your logo on our README on GitHub with a link to your site. [[Become a sponsor](https://opencollective.com/librenms#sponsor)]

<a href=""https://opencollective.com/librenms/sponsor/0/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/0/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/1/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/1/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/2/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/2/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/3/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/3/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/4/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/4/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/5/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/5/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/6/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/6/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/7/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/7/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/8/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/8/avatar.svg""></a>
<a href=""https://opencollective.com/librenms/sponsor/9/website"" target=""_blank""><img src=""https://opencollective.com/librenms/sponsor/9/avatar.svg""></a>


"
3122,a cozy nest for your scripts,"# `sd`: my `s`cript `d`irectory

- [Usage](#usage)
- [Installation](#installation)
- [Changelog](#changelog)

Has this ever happened to you?

*Black and white video plays of someone struggling to find a shell script they wrote a year ago and stuffed into their `~/bin` without giving it a very meaningful name.*

Don't you hate it when you can't find the scripts you need, when you need it? Well now there's a better way!

*Color fills the screen. Someone holds `sd` up to the camera, and flashes a winning smile. They've found the script on their first try.*

Introducing `sd`, the script directory for the refined, sophisticated professional. Simply organize your scripts in a logical directory hierarchy, and let `sd` take care of the rest!

    $ tree ~/sd
    /Users/ian/sd
    ├── blog
    │   ├── edit
    │   ├── preview
    │   └── publish
    ├── nix
    │   ├── diff
    │   ├── info
    │   └── sync
    └── tmux
        └── init

And now instead of typing `~/sd/blog/publish`, you can just type `sd blog publish` -- a savings of nearly three whole characters!

But wait! There's more! You'll wonder how you ever lived without `sd`'s best-in-class tab completion:

    $ sd nix <TAB>
    diff  -- prints what will happen if you run sync
    info  -- <package> prints package description
    sync  -- make user environment match ~/dotfiles/user.nix

Simply write a one-line comment in your script, and you'll never be left scratching your head over how you were supposed to call it!

# uhh

Hi okay sorry. [Take a look at this blog post for a real introduction and a fancy asciinema demo of how it works.](https://ianthehenry.com/posts/sd-my-script-directory/)

# Usage

The default behavior for `sd foo bar` is:

- If `~/sd/foo` is an executable file, execute `~/sd/foo bar`.
- If `~/sd/foo/bar` is an executable file, execute it with no arguments.
- If `~/sd/foo/bar` is a directory, this is the same is `sd foo bar --help` (it prints usage information).
- If `~/sd/foo/bar` is a non-executable regular file, this is the same is `sd foo bar --cat` (it just prints the file out).

There are some special flags that are significant to `sd`. If you supply any one of these arguments, `sd` will not invoke your script, and will do something fancier instead.

    $ sd foo bar --help
    $ sd foo bar --new
    $ sd foo bar --edit
    $ sd foo bar --cat
    $ sd foo bar --which
    $ sd foo bar --really

## `--help`

Print the contents of a help file, or generate a help file from comments in a script.

For executables, `sd` looks for a file with the same name but the `.help` extension. For example, `sd nix diff --help` would look for a file called `~/sd/nix/diff.help`, and print it out.

For directories, `sd` looks for a file that's just called `help`. So `sd nix --help` would look for `~/sd/nix/help`.

If there is no help file for an executable, `sd` will print the first comment block in the file instead. `sd` currently only recognizes bash-style `#` comments.

For example:

    $ cat ~/sd/nix/sync

```bash
#!/usr/bin/env bash

# make user environment match ~/dotfiles/user.nix
#
# This will remove any packages you've installed with nix-env
# but have not added to user.nix. To see exactly what this
# will do, run:
#
#     sd nix diff

set -euo pipefail

# maybe this should be configurable
nix-env -irf ~/dotfiles/user.nix
```

That will produce the following help output (note that it only prints the first contiguous comment block):

```
$ sd nix sync --help
make user environment match ~/dotfiles/user.nix

This will remove any packages you've installed with nix-env
but have not added to user.nix. To see exactly what this
will do, run:

    sd nix diff
```

If you run `--help` for a directory, it will also print out a command listing after the help text:

```
$ sd nix --help
nix commands

install    -- <package> use --latest to install from nixpkgs-unstable
shell      -- add gcroots for shell.nix
diff       -- prints what will happen if you run sync
info       -- <package> prints package description
sync       -- make user environment match ~/dotfiles/user.nix
```

## `--new`

Everything to the left of `--new` is considered a command path, and everything to the right of `--new` is considered the command body. For example:

    $ sd foo bar --new echo hi

Will try to create a new command at `~/sd/foo/bar` with an initial contents of `echo hi`.

Actually, to be more precise, it will create this script:

    $ cat ~/sd/foo/bar

```bash
#!/usr/bin/env bash

set -euo pipefail

echo hi
```

Assuming the default template.

If no body is supplied after `--new`, `sd` will open the script for editing.

### custom script templates

You can customize the template used by `--new` by creating a file called `template`, either in `~/sd` or one of its subdirectories.

`sd` will try to find a template by walking recursively up the directory hierarchy. For example, if you run:

```
$ sd foo bar baz --new
```

`sd` will try to find a template at `~/sd/foo/bar/template` first, then fall back to `~/sd/foo/template`, then `~/sd/template`. If it doesn't find any template file, it will use the default bash template shown above.

(There is no need to make your `template` executable -- `sd` will take care of that for you.)

When `--new` is used to create an inline script, that script will always go at the *end* of your template file. There is currently no way to customize this.

## `--cat`

Prints the contents of the script. See `SD_CAT` below.

## `--edit`

Open the script in an editor. See `SD_EDITOR` below.

## `--which`

Prints the path of the script.

## `--really`

Suppress special handling of all of the other special flags. This allows you to pass `--help` or `--new` as arguments to your actual script, instead of being interpreted by `sd`. For example:

    $ sd foo bar --help --really

Will invoke:

    ~/sd/foo/bar --help

The first occurrence of the `--really` argument will be removed from the arguments passed to the script, so if you need to pass a literal `--really`, you must pass it twice to `sd`. For example:

    $ sd foo bar --help --really --really

Will invoke:

    $ ~/sd/foo/bar --help --really

# Context

When a script is invoked, `sd` will set the environment variable `SD` to the directory that the script was found in -- in other words, `$(dirname ""$0"")`.

This makes it slightly more convenient to refer to shared helper files or other scripts relative to the executing script.

# Options

`sd` respects some environment variables:

- `SD_ROOT`: location of the script directory. Defaults to `$HOME/sd`.
- `SD_EDITOR`: used by `sd foo --edit` and `sd foo --new`. Defaults to `$VISUAL`, then `$EDITOR`, then finally falls back to `vi` if neither of those are set.
- `SD_CAT`: program used when printing files, in case you want to use something like [`bat`](https://github.com/sharkdp/bat). Defaults to `cat`.

# Installation

There are two ways to use `sd`:

1. source the `sd` file, which will define the shell function `sd`
2. treat `sd` as a regular executable and put it somewhere on your `PATH`

I prefer to use `sd` as a regular executable, but the function approach is more convenient if you already use a shell plugin manager that knows how to set up `fpath` automatically.

Note that you cannot invoke ""recursive `sd`"" (that is, write scripts that themselves invoke `sd`) if you use the function approach. This includes all of the helper scripts in `sdefaults/` (explained below).

## Installation as a regular script

`sd` is not currently packaged in any package manager that I am aware of, but it should be pretty easy if you want to package it for your distribution. It's just a single script and a single completion file. Until that day:

1. Put the `sd` script somewhere on your `PATH`.
2. Put the `_sd` completion script somewhere on your `fpath`.

I like to symlink `sd` to `~/bin`, which is already on my path. If you've cloned this repo to `~/src/sd`, you can do that by running something like:

    $ ln -s ~/src/sd/sd ~/bin/sd

There isn't really a standard place in your home directory to put completion scripts, so unless you've made your own, you'll probably want to add your clone directly to your `fpath`. You should add that to your `.zshrc` file before the line where you call `compinit`. It should look something like this:

    # ~/.zshrc

    fpath=(~/src/sd $fpath)
    autoload -U compinit
    compinit

If you use a zsh framework like [`oh-my-zsh`](https://github.com/ohmyzsh/ohmyzsh), it probably calls `compinit` for you. In that case, just set your `fpath` before you source the framework's initialization script.

Note that changes you make to your `~/.zshrc` will only take effect for *future* shells you create, so to start enjoying `sd` immediately you'll also want to run these commands in your existing shells:

    $ fpath=(~/src/sd $fpath)
    $ compinit

## Installation as a shell function

You can just source `sd` in your `.zshrc` and set up completion manually (as described below), but `sd` is designed to be compatible with shell plugin managers.

### [Antigen](https://github.com/zsh-users/antigen)

Add this line to your `.zshrc`:

```shell
antigen bundle ianthehenry/sd
```

### [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh):

Clone this repo into your custom plugins directory:

```
$ git clone https://github.com/ianthehenry/sd.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/sd
```

And then add it to the plugins list in your `~/.zshrc` before you source `oh-my-zsh`:

```
plugins+=(sd)
source ""$ZSH/oh-my-zsh.sh""
```

## `sd help command` vs. `sd command --help`

There are some scripts in `sdefaults/` that you can copy into your own `~/sd` if you like. They'll let you type `sd cat foo bar` instead of `sd foo bar --cat` or `sd new foo -- echo hi` instead of `sd foo --new echo hi` (and so on for each of the built-in commands).

These mostly exist for backwards compatibility with an earlier version of `sd`. You don't have to use them if you don't want to. Note that they will not work if you've installed `sd` as a shell function instead of an executable.

# bash/fish autocompletion support

Patrick Jackson contributed [an unofficial fish completion script](https://gist.github.com/patricksjackson/5065e4a9d8e825dafc7824112f17a5e6), which should be usable with some modification (as written it does not respect `SD_ROOT`, but it should act as a very good starting point if you use fish).

Bash doesn't support the fancy completion-with-description feature that is sort of the whole point of `sd`, but there are apparently ways to hack something similar.

# Changelog

## v1.1.0 2022-10-30

- fix a bug where `--help` would print every comment in the script

## v1.0.1 2022-04-17

- better error message if `~/sd` does not exist
- better error message if `~/sd` exists but is not a directory

## v1.0.0 2022-02-27

`sd` is now released under the MIT license. There are no functional changes from the pre-1.0 releases.

## v0.3.0 2022-02-26

- scripts now run with the `SD` environment variable set to the directory they were found in
- autocompletion now completes arguments to commands instead of just commands
    - only completes positional file arguments and the built-in flags (like `--help`)
- `sd` now only forks a subshell when invoked as a function
- `sd` now `exec`s scripts instead of `fork`+`exec`
    - this fixes the rare issue where a long-running script could throw errors when it finished if you were editing the `sd` executable itself while the script was running, because `bash` was trying to execute the ""rest"" of the file and apparently doing so by byte index or something (??)
    - this only affects me

## v0.2.0 2022-02-24

- added per-directory `template` files, to override the `bash` default

## v0.1.1 2021-12-05

- fix a bug where `--new` wouldn't work unless provided with an initial script

## v0.1.0 2021-12-01

- added `--really`
- `dir.help` files are now `dir/help` files

You used to be able to provide a description for a directory called `foo/` by writing a file called `foo.help` as a sibling of that directory.

Now directory help summaries are expected in `foo/help` instead.

This has the sort-of nice effect that `sd foo help` is sometimes similar to `sd foo --help`. Except that the latter also prints out subcommands.
"
2944,Github repo with tutorials to fine tune transformers for diff NLP tasks,"﻿# <h1 align=""center"">PyTorch Transformers Tutorials </h1>

<p align=""center"">
<img alt=""Transformer Tutorials"" src=""meta/banner.png"">
</p>

<p align=""center"">
<a href=""https://github.com/abhimishra91/transformers-tutorials/issues""><img alt=""GitHub issues"" src=""https://img.shields.io/github/issues/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/network""><img alt=""GitHub forks"" src=""https://img.shields.io/github/forks/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/stargazers""><img alt=""Github Stars"" src=""https://img.shields.io/github/stars/abhimishra91/transformers-tutorials""></a>
<a href=""https://github.com/abhimishra91/transformers-tutorials/blob/master/LICENSE""><img alt=""GitHub license"" src=""https://img.shields.io/github/license/abhimishra91/transformers-tutorials""></a>


### Introduction

The field of **NLP** was revolutionized in the year 2018 by introduction of **BERT** and his **Transformer** friends(RoBerta, XLM etc.).

These novel transformer based neural network architectures and new ways to training a neural network on natural language data introduced transfer learning to NLP problems. Transfer learning had been giving out state of the art results in the Computer Vision domain for a few years now and introduction of transformer models for NLP brought about the same paradigm change in NLP.

Companies like [Google](https://github.com/google-research/bert) and [Facebook](https://github.com/pytorch/fairseq/tree/master/examples/roberta) trained their neural networks on large swathes of Natural Language Data to grasp the intricacies of language thereby generating a  Language model. Finally these models were fine tuned to specific domain dataset to achieve state of the art results for a specific problem statement. They also published these trained models to open source community. The community members were now able to fine tune these models to their specific use cases.

[Hugging Face](https://github.com/huggingface) made it easier for community to access and fine tune these models using their Python Package: [Transformers](https://github.com/huggingface/transformers). 

### Motivation
Despite these amazing technological advancements applying these solutions to business problems is still a challenge given the niche knowledge required to understand and apply these method on specific problem statements. Hence, In the following tutorials i will be demonstrating how a user can leverage technologies along with some other python tools to fine tune these Language models to specific type of tasks. 

Before i proceed i will like to mention the following groups for the fantastic work they are doing and sharing which have made these notebooks and tutorials possible:

Please review these amazing sources of information and subscribe to their channels/sources.
 - [Hugging Face Team](https://huggingface.co/)
 - Abhishek Thakur for his amazing [Youtube videos](https://www.youtube.com/user/abhisheksvnit)

The problem statements that i will be working with are:

| Notebook |Github Link |Colab Link|Kaggle Kernel|
|--|--|--|--|
|Text Classification: Multi-Class| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb) |[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multiclass_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multiclass-classification-ipynb)|
|Text Classification: Multi-Label| [Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_multi_label_classification.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-multi-label-classification)|
|Sentiment Classification **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_sentiment/runs/1zwn4gbg?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_sentiment_wandb.ipynb)||
|Named Entity Recognition: **with TPU processing!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_ner.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-ner)|
|Question Answering||||
|Summary Writing: **with Experiment Tracking in [WandB](https://app.wandb.ai/abhimishra-91/transformers_tutorials_summarization?workspace=user-abhimishra-91)!**|[Github](https://github.com/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/abhimishra91/transformers-tutorials/blob/master/transformers_summarization_wandb.ipynb)|[Kaggle](https://www.kaggle.com/eggwhites2705/transformers-summarization-t5/output)|



### Directory Structure

 1. `data`: This folder contains all the toy data used for fine tuning. 
 2. `utils`: This folder will contain any miscellaneous script used to prepare for the fine tuning.
 3. `models`: Folder to save all the artifacts post fine tuning. 

### Further Watching/Reading

I will try to cover the practical and implementation aspects of fine tuning of these language models on various NLP tasks. You can improve your knowledge on this topic by reading/watching the following resources.


 - Watching
	 - [Introduction in Simple terms](https://www.youtube.com/watch?v=gcHkxP9adiM)
	 - [Transfer Learning in NLP](https://www.youtube.com/watch?v=0T_Qr4qBrqc)
	 - [BERT Research Series from ChrisMcCormickAI](https://www.youtube.com/playlist?list=PLam9sigHPGwOBuH4_4fr-XvDbe5uneaf6)

- Reading
	 - [Transformers Documentation](https://huggingface.co/transformers/)
	 - [Pytorch Documentation](https://pytorch.org/docs/stable/index.html)
	 - [Google AI Blog](https://ai.googleblog.com/)
"
2903,Algebraic graphs,"# Algebraic graphs

[![Hackage version](https://img.shields.io/hackage/v/algebraic-graphs.svg?label=Hackage)](https://hackage.haskell.org/package/algebraic-graphs) [![Build status](https://img.shields.io/github/workflow/status/snowleopard/alga/ci/master.svg)](https://github.com/snowleopard/alga/actions)

**Alga** is a library for algebraic construction and manipulation of graphs in Haskell. See
[this Haskell Symposium paper](https://github.com/snowleopard/alga-paper) and the
corresponding [talk](https://www.youtube.com/watch?v=EdQGLewU-8k) for the motivation
behind the library, the underlying theory and implementation details. There is also a
[Haskell eXchange talk](https://skillsmatter.com/skillscasts/10635-algebraic-graphs),
and a [tutorial](https://nobrakal.github.io/alga-tutorial) by Alexandre Moine.

## Main idea

Consider the following data type, which is defined in the top-level module
[Algebra.Graph](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html)
of the library:

```haskell
data Graph a = Empty | Vertex a | Overlay (Graph a) (Graph a) | Connect (Graph a) (Graph a)
```

We can give the following semantics to the constructors in terms of the pair **(V, E)** of graph *vertices* and *edges*:

* `Empty` constructs the empty graph **(∅, ∅)**.
* `Vertex x` constructs a graph containing a single vertex, i.e. **({x}, ∅)**.
* `Overlay x y` overlays graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey)**.
* `Connect x y` connects graphs **(Vx, Ex)** and **(Vy, Ey)** constructing **(Vx ∪ Vy, Ex ∪ Ey ∪ Vx × Vy)**.

Alternatively, we can give an algebraic semantics to the above graph construction primitives by defining the following
type class and specifying a set of laws for its instances (see module [Algebra.Graph.Class](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html)):

```haskell
class Graph g where
    type Vertex g
    empty   :: g
    vertex  :: Vertex g -> g
    overlay :: g -> g -> g
    connect :: g -> g -> g
```

The laws of the type class are remarkably similar to those of a [semiring](https://en.wikipedia.org/wiki/Semiring),
so we use `+` and `*` as convenient shortcuts for `overlay` and `connect`, respectively:

* (`+`, `empty`) is an idempotent commutative monoid.
* (`*`, `empty`) is a monoid.
* `*` distributes over `+`, that is: `x * (y + z) == x * y + x * z` and `(x + y) * z == x * z + y * z`.
* `*` can be decomposed: `x * y * z == x * y + x * z + y * z`.

This algebraic structure corresponds to *unlabelled directed graphs*: every expression represents a graph, and every
graph can be represented by an expression. Other types of graphs (e.g. undirected) can be obtained by modifying the
above set of laws. Algebraic graphs provide a convenient, safe and powerful interface for working with graphs in Haskell,
and allow the application of equational reasoning for proving the correctness of graph algorithms.

To represent *non-empty graphs*, we can drop the `Empty` constructor -- see module
[Algebra.Graph.NonEmpty](http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html).

To represent *edge-labelled graphs*, we can switch to the following data type, as
explained in my [Haskell eXchange 2018 talk](https://skillsmatter.com/skillscasts/12361-labelled-algebraic-graphs):

```haskell
data Graph e a = Empty
               | Vertex a
               | Connect e (Graph e a) (Graph e a)
```

Here `e` is the type of edge labels. If `e` is a monoid `(<+>, zero)` then graph overlay can be recovered
as `Connect zero`, and `<+>` corresponds to *parallel composition* of edge labels.

## How fast is the library?

Alga can handle graphs comprising millions of vertices and billions of edges in a matter of seconds, which is fast
enough for many applications. We believe there is a lot of potential for improving the performance of the library, and
this is one of our top priorities. If you come across a performance issue when using the library, please let us know.

Some preliminary benchmarks can be found [here](https://github.com/haskell-perf/graphs).

## Blog posts

The development of the library has been documented in the series of blog posts:
* Introduction: https://blogs.ncl.ac.uk/andreymokhov/an-algebra-of-graphs/
* A few different flavours of the algebra: https://blogs.ncl.ac.uk/andreymokhov/graphs-a-la-carte/
* Graphs in disguise or How to plan you holiday using Haskell: https://blogs.ncl.ac.uk/andreymokhov/graphs-in-disguise/
* Old graphs from new types: https://blogs.ncl.ac.uk/andreymokhov/old-graphs-from-new-types/

## Algebraic graphs in other languages

Algebraic graphs were implemented in a few other languages, including
[Agda](http://github.com/algebraic-graphs/agda),
[F#](https://github.com/algebraic-graphs/fsharp),
[Scala](http://github.com/algebraic-graphs/scala) and
[TypeScript](https://github.com/algebraic-graphs/typescript).
"
721,A fancy terminal browser for the Gemini protocol.,"# Amfora

<img src=""logo.png"" alt=""amphora logo"" width=""30%"">
<h6>Image modified from: amphora by Alvaro Cabrera from the Noun Project</h6>


[![go reportcard](https://goreportcard.com/badge/github.com/makeworld-the-better-one/amfora)](https://goreportcard.com/report/github.com/makeworld-the-better-one/amfora)
[![license GPLv3](https://img.shields.io/github/license/makeworld-the-better-one/amfora)](https://www.gnu.org/licenses/gpl-3.0.en.html)

<a href=""https://raw.githubusercontent.com/makeworld-the-better-one/amfora/master/demo-large.gif"">
<img src=""demo-large.gif"" alt=""Demo GIF"" width=""80%"">
</a>

###### Recording of v1.0.0

Amfora aims to be the best looking [Gemini](https://geminiquickst.art/) client with the most features... all in the terminal. It does not support Gopher or other non-Web protocols - check out [Bombadillo](http://bombadillo.colorfield.space/) for that.

It also aims to be completely cross platform, with full Windows support. If you're on Windows, I would not recommend using the default terminal software. Use [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701) instead, and make sure it [works with UTF-8](https://akr.am/blog/posts/using-utf-8-in-the-windows-terminal). Note that some of the application colors might not display correctly on Windows, but all functionality will still work.

It fully passes Sean Conman's client torture test, as well as the Egsam one.

## Installation

### Binary

Download a binary from the [releases](https://github.com/makeworld-the-better-one/amfora/releases) page. On Unix-based systems you will have to make the file executable with `chmod +x <filename>`. You can rename the file to just `amfora` for easy access, and move it to `/usr/local/bin/`.

On Windows, make sure you click ""Advanced > Run anyway"" after double-clicking, or something like that.

Unix systems can install the desktop entry file to get Amfora to appear when they search for applications:
```bash
curl -sSL https://raw.githubusercontent.com/makeworld-the-better-one/amfora/master/amfora.desktop -o ~/.local/share/applications/amfora.desktop
update-desktop-database ~/.local/share/applications
```

Make sure to click ""Watch"" in the top right, then ""Custom"" > ""Releases"" to get notified about new releases!


### Linux

<a href=""https://repology.org/project/amfora/versions"">
    <img src=""https://repology.org/badge/vertical-allrepos/amfora.svg"" alt=""Packaging status"" align=""right"">
</a>

Amfora is packaged in many Linux distros. It's also on [Scoop](https://scoop.sh/) for Windows users.

### macOS (Homebrew)

If you use [Homebrew](https://brew.sh/), you can install Amfora with:
```
brew install amfora
```
You can update it with:
```
brew upgrade amfora
```

### macOS (MacPorts)

On macOS, Amfora can also be installed through [MacPorts](https://www.macports.org):
```
sudo port install amfora
```
You can update it with:
```
sudo port selfupdate
sudo port upgrade amfora
```
**NOTE:** this installation source is community-maintained. More information [here](https://ports.macports.org/port/amfora/).

### Termux

If you're using [Termux](https://termux.com/) on Android you can't just run Amfora like normal. After installing Amfora, run `pkg install proot`. Then run `termux-chroot` before running the Amfora binary. You can exit out of the chroot after closing Amfora. See [here](https://stackoverflow.com/q/38959067/7361270) for why this is needed.

### From Source

This section is for advanced users who want to install the latest (possibly unstable) version of Amfora.

<details>
<summary>Click to expand</summary>

**Requirements:**
- Go 1.15 or later
- GNU Make

Please note the Makefile does not intend to support Windows, and so there may be issues.

```shell
git clone https://github.com/makeworld-the-better-one/amfora
cd amfora
# git checkout v1.2.3 # Optionally pin to a specific version instead of the latest commit
make # Might be gmake on macOS
sudo make install # If you want to install the binary for all users
```

Because you installed with the Makefile, running `amfora -v` will tell you exactly what commit the binary was built from.

Arch Linux users can also install the latest commit of Amfora from the AUR. It has the package name `amfora-git`, and is maintained by @lovetocode999

```
yay -S amfora-git
```

MacOS users can also use [Homebrew](https://brew.sh/) to install the latest commit of Amfora:

```
brew install --HEAD amfora
```
You can update it with:
```
brew upgrade --fetch-HEAD amfora
```

</details>


## Features / Roadmap
Features in *italics* are in the master branch, but not in the latest release.

- [x] URL browsing with TOFU and error handling
- [x] Tabbed browsing
- [x] Support ANSI color codes on pages, even for Windows
- [x] Styled page content (headings, links)
- [x] Basic forward/backward history, for each tab
- [x] Input (Status Code 10 & 11)
- [x] Multiple charset support (over 55)
- [x] Built-in search (uses geminispace.info by default)
- [x] Bookmarks
- [x] Download pages and arbitrary data
- [x] Theming
  - Check out the [user contributed themes](https://github.com/makeworld-the-better-one/amfora/tree/master/contrib/themes)!
- [x] Proxying
  - Schemes like Gopher or HTTP can be proxied through a Gemini server
- [x] Client certificate support
  - [ ] Full client certificate UX within the client
    - Create transient and permanent certs within the client, per domain
    - Manage and browse them
    - Similar to [Kristall](https://github.com/MasterQ32/kristall)
    - https://lists.orbitalfox.eu/archives/gemini/2020/001400.html
- [x] Subscriptions
  - Subscribing to RSS, Atom, and [JSON Feeds](https://jsonfeed.org/) are all supported
  - So is subscribing to a page, to know when it changes
- [x] Open non-text files in another application
  - [x] Ability to stream content instead of downloading it first
- [x] *Highlighting of preformatted code blocks that list a language in the alt text*
- [ ] Stream support
- [ ] Table of contents for pages
- [ ] Search in pages with <kbd>Ctrl-F</kbd>
- [ ] Persistent history


## Usage & Configuration
Please see [the wiki](https://github.com/makeworld-the-better-one/amfora/wiki) for an introduction on how to use Amfora and configure it.

## Libraries
Amfora ❤️ open source!

- [cview](https://code.rocketnine.space/tslocum/cview) for the TUI
  - It's a fork of [tview](https://github.com/rivo/tview) with PRs merged and active support
  - It uses [tcell](https://github.com/gdamore/tcell) for low level terminal operations
- [Viper](https://github.com/spf13/viper) for configuration and TOFU storing
- [go-gemini](https://github.com/makeworld-the-better-one/go-gemini), my forked and updated Gemini client/server library
- [progressbar](https://github.com/schollz/progressbar)
- [go-humanize](https://github.com/dustin/go-humanize)
- [gofeed](https://github.com/mmcdole/gofeed)
- [chroma](https://github.com/alecthomas/chroma) for source code syntax highlighting
- [clipboard](https://github.com/atotto/clipboard)
- [termenv](https://github.com/muesli/termenv)

## License
This project is licensed under the GPL v3.0. See the [LICENSE](./LICENSE) file for details.
"
706,Concourse is a container-based continuous thing-doer written in Go.,"# Concourse: the continuous thing-doer.

[![Discord](https://img.shields.io/discord/219899946617274369.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)][discord]
[![Build](https://ci.concourse-ci.org/api/v1/teams/main/pipelines/concourse/badge)](https://ci.concourse-ci.org/teams/main/pipelines/concourse)
[![Contributors](https://img.shields.io/github/contributors/concourse/concourse)](https://github.com/concourse/concourse/graphs/contributors)
[![Help Wanted](https://img.shields.io/github/labels/concourse/concourse/help%20wanted)](https://github.com/concourse/concourse/labels/help%20wanted)

Concourse is an automation system written in Go. It is most commonly used for
CI/CD, and is built to scale to any kind of automation pipeline, from simple to
complex.

![booklit pipeline](screenshots/booklit-pipeline.png)

Concourse is very opinionated about a few things: idempotency, immutability,
declarative config, stateless workers, and reproducible builds.

## The road to Concourse v10

[Concourse v10][v10] is the code name for a set of features which, when used
in combination, will have a massive impact on Concourse's capabilities as a
generic continuous thing-doer. These features, and how they interact, are
described in detail in the [Core roadmap: towards v10][v10] and [Re-inventing
resource types][prototypes] blog posts. (These posts are *slightly* out of
date, but they get the idea across.)

Notably, **v10 will make Concourse not suck for multi-branch and/or
pull-request driven workflows** - examples of *spatial* change, where the set
of things to automate grows and shrinks over time.

Because v10 is really an alias for a ton of separate features, there's a lot
to keep track of - here's an overview:

| Feature                  | RFC              | Status |
| ------------------------ | ---------------- | ------ |
| `set_pipeline` step      | ✔ [#31][rfc-31]  | ✔ v5.8.0 (experimental) |
| Var sources for creds    | ✔ [#39][rfc-39]  | ✔ v5.8.0 (experimental), TODO: [#5813][issue-5813] |
| Archiving pipelines      | ✔ [#33][rfc-33]  | ✔ v6.5.0 |
| Instanced pipelines      | ✔ [#34][rfc-34]  | ✔ v7.0.0 (experimental) |
| Static `across` step     | 🚧 [#29][rfc-29] | ✔ v6.5.0 (experimental) |
| Dynamic `across` step    | 🚧 [#29][rfc-29] | ✔ v7.4.0 (experimental, not released yet) |
| Projects                 | 🚧 [#32][rfc-32] | 🙏 RFC needs feedback! |
| `load_var` step          | ✔ [#27][rfc-27]  | ✔ v6.0.0 (experimental) |
| `get_var` step           | ✔ [#27][rfc-27]  | 🚧 [#5815][issue-5815] in progress! |
| [Prototypes][prototypes] | ✔ [#37][rfc-37]  | ⚠ Pending first use of protocol (any of the below) |
| `run` step               | 🚧 [#37][rfc-37]  | ⚠ Pending its own RFC, but feel free to experiment |
| Resource prototypes      | ✔ [#38][rfc-38]  | 🙏 [#5870][issue-5870] looking for volunteers! |
| Var source prototypes    |                  | 🚧 [#6275][issue-6275] planned, may lead to RFC |
| Notifier prototypes      | 🚧 [#28][rfc-28] | ⚠ RFC not ready |

The Concourse team at VMware will be working on these features, however in the
interest of growing a healthy community of contributors we would really
appreciate any volunteers. This roadmap is very easy to parallelize, as it is
comprised of many orthogonal features, so the faster we can power through it,
the faster we can all benefit. We want these for our own pipelines too! 😆

If you'd like to get involved, hop in [Discord][discord] or leave a comment on
any of the issues linked above so we can coordinate. We're more than happy to
help figure things out or pick up any work that you don't feel comfortable
doing (e.g. UI, unfamiliar parts, etc.).

Thanks to everyone who has contributed so far, whether in code or in the
community, and thanks to everyone for their patience while we figure out how to
support such common functionality the ""Concoursey way!"" 🙏

[issue-5813]: https://github.com/concourse/concourse/issues/5813
[issue-5814]: https://github.com/concourse/concourse/issues/5814
[issue-5815]: https://github.com/concourse/concourse/issues/5815
[issue-5870]: https://github.com/concourse/concourse/issues/5870
[issue-5921]: https://github.com/concourse/concourse/issues/5921
[issue-6275]: https://github.com/concourse/concourse/issues/6275
[pr-5896]: https://github.com/concourse/concourse/pull/5896
[rfc-27]: https://github.com/concourse/rfcs/blob/master/027-var-steps/proposal.md
[rfc-28]: https://github.com/concourse/rfcs/pull/28
[rfc-29]: https://github.com/concourse/rfcs/pull/29
[rfc-31]: https://github.com/concourse/rfcs/blob/master/031-set-pipeline-step/proposal.md
[rfc-32]: https://github.com/concourse/rfcs/pull/32
[rfc-33]: https://github.com/concourse/rfcs/blob/master/033-archiving-pipelines/proposal.md
[rfc-34]: https://github.com/concourse/rfcs/blob/master/034-instanced-pipelines/proposal.md
[rfc-37]: https://github.com/concourse/rfcs/blob/master/037-prototypes/proposal.md
[rfc-38]: https://github.com/concourse/rfcs/blob/master/038-resource-prototypes/proposal.md
[rfc-39]: https://github.com/concourse/rfcs/blob/master/039-var-sources/proposal.md

[v10]: https://blog.concourse-ci.org/core-roadmap-towards-v10/
[prototypes]: https://blog.concourse-ci.org/reinventing-resource-types/

## Installation

Concourse is distributed as a single `concourse` binary, available on the [Releases page](https://github.com/concourse/concourse/releases/latest).

If you want to just kick the tires, jump ahead to the [Quick Start](#quick-start).

In addition to the `concourse` binary, there are a few other supported formats.
Consult their GitHub repos for more information:

* [Docker image](https://github.com/concourse/concourse-docker)
* [BOSH release](https://github.com/concourse/concourse-bosh-release)
* [Kubernetes Helm chart](https://github.com/concourse/concourse-chart)


## Quick Start

```sh
$ wget https://concourse-ci.org/docker-compose.yml
$ docker-compose up
Creating docs_concourse-db_1 ... done
Creating docs_concourse_1    ... done
```

Concourse will be running at [127.0.0.1:8080](http://127.0.0.1:8080). You can
log in with the username/password as `test`/`test`.

> :warning: **If you are using an M1 mac**: M1 macs are incompatible with the `containerd` runtime. After downloading the docker-compose file, change `CONCOURSE_WORKER_RUNTIME: ""containerd""` to `CONCOURSE_WORKER_RUNTIME: ""houdini""`.
**This feature is experimental**

Next, install `fly` by downloading it from the web UI and target your local
Concourse as the `test` user:

```sh
$ fly -t ci login -c http://127.0.0.1:8080 -u test -p test
logging in to team 'main'

target saved
```

### Configuring a Pipeline

There is no GUI for configuring Concourse. Instead, pipelines are configured as
declarative YAML files:

```yaml
resources:
- name: booklit
  type: git
  source: {uri: ""https://github.com/vito/booklit""}

jobs:
- name: unit
  plan:
  - get: booklit
    trigger: true
  - task: test
    file: booklit/ci/test.yml
```

Most operations are done via the accompanying `fly` CLI. If you've got Concourse
[installed](https://concourse-ci.org/install.html), try saving the above example
as `booklit.yml`, [target your Concourse
instance](https://concourse-ci.org/fly.html#fly-login), and then run:

```sh
fly -t ci set-pipeline -p booklit -c booklit.yml
```

These pipeline files are self-contained, maximizing portability from one
Concourse instance to the next.


### Learn More

* The [Official Site](https://concourse-ci.org) for documentation,
  reference material, and example pipelines (which no longer live in this repository).
* The [Concourse Tutorial](https://concoursetutorial.com) by Stark & Wayne is
  great for a guided introduction to all the core concepts.
* See Concourse in action with our [production pipelines](https://ci.concourse-ci.org/)
* Hang around in the [GitHub discussions](https://github.com/concourse/concourse/discussions) or in
  [Discord](https://discord.gg/MeRxXKW).
* See what we're working on on the [project board](https://github.com/orgs/concourse/projects). 


## Contributing

Our user base is basically everyone that develops software (and wants it to
work).

It's a lot of work, and we need your help! If you're interested, check out our
[contributing docs](CONTRIBUTING.md).

[discord]: https://discord.gg/MeRxXKW
"
2327,Python for《Deep Learning》，该书为《深度学习》(花书) 数学推导、原理剖析与源码级别代码实现,"# Deep Learning

《**深度学习**》是深度学习领域唯一的综合性图书，全称也叫做**深度学习 AI圣经(Deep Learning)**，由三位全球知名专家IanGoodfellow、YoshuaBengio、AaronCourville编著，全书囊括了数学及相关概念的背景知识，包括线性代数、概率论、信息论、数值优化以及机器学习中的相关内容。同时，它还介绍了工业界中实践者用到的深度学习技术，包括深度前馈网络、正则化、优化算法、卷积网络、序列建模和实践方法等，并且调研了诸如自然语言处理、语音识别、计算机视觉、在线推荐系统、生物信息学以及视频游戏方面的应用。最后，深度学习全书还提供了一些研究方向，涵盖的理论主题包括线性因子模型、自编码器、表示学习、结构化概率模型、蒙特卡罗方法、配分函数、近似推断以及深度生成模型，适用于相关专业的大学生或研究生使用。

<img src=""https://github.com/MingchaoZhu/DeepLearning/blob/master/docs/cover.jpg"" width=""200"" height=""300"" alt=""深度学习封面"" align=center>

可以下载《深度学习》的中文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.1/DL_cn.pdf) 和英文版 [pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v0.0.0/DL_en.pdf) 直接阅读。

对于本项目的工作，你可以直接下载 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf) (后面会对该书不断更新)

---

《深度学习》可以说是深度学习与人工智能的入门宝典，许多算法爱好者、机器学习培训班、互联网企业的面试，很多都参考这本书。但本书晦涩，加上官方没有提供代码实现，因此某些地方较难理解。本项目**基于数学推导和产生原理重新描述了书中的概念**，并用**Python** (numpy 库为主) 复现了书本内容 ( **源码级代码实现。推导过程和代码实现均放在了下载区的 pdf 文件中**，重要部分的实现代码也放入 **code 文件夹**中 )。

然而我水平有限，但我真诚地希望这项工作可以帮助到更多人学习深度学习算法。我需要大家的建议和帮助。如果你在阅读中遇到有误或解释不清的地方，希望可以汇总你的建议，在 Issues 提出。如果你也想加入这项工作书写中或有其他问题，可以联系我的邮箱。如果你在你的工作或博客中用到了本书，还请可以注明引用链接。

写的过程中参考了较多网上优秀的工作，所有参考资源保存在了`reference.txt`文件中。

# 留言

这份工作就是在写这一本 [深度学习_原理与代码实现.pdf](https://github.com/MingchaoZhu/DeepLearning/releases/download/v1.1.1/default.pdf)。正如你在 pdf 文件中所见到的，《深度学习》涉及到的每一个概念，都会去给它详细的描述、原理层面的推导，以及用代码的实现。代码实现不会调用 Tensorflow、PyTorch、MXNet 等任何深度学习框架，甚至包括 sklearn (pdf 里用到 sklearn 的部分都是用来验证代码无误)，一切代码都是从原理层面实现 (Python 的基础库 NumPy)，并有详细注释，与代码区上方的原理描述区一致，你可以结合原理和代码一起理解。

这份工作的起因是我自身的热爱，但为完成这份工作我需要投入大量的时间精力，一般会写到凌晨两三点。推导、代码、作图都是慢慢打磨的，我会保证这份工作的质量。这份工作会一直更新完，已经上传的章节也会继续补充内容。如果你在阅读过程中遇到有想要描述的概念点或者错误点，请发邮件告知我。

真的很感谢你的认可与推广。最后，请等待下一次更新。

我是 朱明超，我的邮箱是：deityrayleigh@gmail.com

# 更新说明

2020/3/：

```python
1. 修改第五章决策树部分，补充 ID3 和 CART 的原理，代码实现以 CART 为主。
2. 第七章添加 L1 和 L2 正则化最优解的推导 (即 L1稀疏解的原理)。
3. 第七章添加集成学习方法的推导与代码实现，包括 Bagging (随机森林)、Boosting (Adaboost、GBDT、XGBoost)。
4. 第八章添加牛顿法与拟牛顿法 (DFP、BFGS、L-BFGS) 的推导。
5. 第十一章节添加贝叶斯线性回归、高斯过程回归 (GPR) 与贝叶斯优化的推导与代码实现。
```
后面每次的更新内容会统一放在 `update.txt` 文件中。

# 章节目录与文件下载

除了《深度学习》书中的概念点，**本项目也在各章节添加一些补充知识，例如第七章集成学习部分的 随机森林、Adaboost、GBDT、XGBoost 的原理剖析和代码实现等，又或者第十二章对当前一些主流方法的描述**。大的章节目录和 pdf 文件下载链接可以详见下表，而具体 pdf 文件中的实际目录请参考 `contents.txt`。你可以在下面的 pdf 链接中下载对应章节，也可以在 [releases](https://github.com/MingchaoZhu/DeepLearning/releases) 界面直接下载所有文件。

| 中文章节 | 英文章节 | 下载<br />(含推导与代码实现) |
| ------------ | ------------ | ------------ |
| 第一章 前言 | 1 Introduction |  |
| 第二章 线性代数 | 2 Linear Algebra | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/2%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.pdf) |
| 第三章 概率与信息论                 | 3 Probability and Information Theory | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/3%20%E6%A6%82%E7%8E%87%E4%B8%8E%E4%BF%A1%E6%81%AF%E8%AE%BA.pdf) |
| 第四章 数值计算                     | 4 Numerical Computation | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/4%20%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97.pdf) |
| 第五章 机器学习基础                 | 5 Machine Learning Basics | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/5%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.pdf) |
| 第六章 深度前馈网络                 | 6 Deep Feedforward Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/6%20%E6%B7%B1%E5%BA%A6%E5%89%8D%E9%A6%88%E7%BD%91%E7%BB%9C.pdf) |
| 第七章 深度学习中的正则化           | 7 Regularization for Deep Learning | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/7%20%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%96.pdf) |
| 第八章 深度模型中的优化 | 8 Optimization for Training Deep Models | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/8%20%E6%B7%B1%E5%BA%A6%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96.pdf) |
| 第九章 卷积网络 | 9 Convolutional Networks | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/9%20%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C.pdf) |
| 第十章 序列建模：循环和递归网络 | 10 Sequence Modeling: Recurrent and Recursive Nets |  |
| 第十一章 实践方法论                 | 11 Practical Methodology | [pdf](https://github.com/MingchaoZhu/DeepLearning/raw/master/11%20%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95%E8%AE%BA.pdf) |
| 第十二章 应用 | 12 Applications |  |
| 第十三章 线性因子模型 | 13 Linear Factor Models |  |
| 第十四章 自编码器                   | 14 Autoencoders |  |
| 第十五章 表示学习                   | 15 Representation Learning |  |
| 第十六章 深度学习中的结构化概率模型 | 16 Structured Probabilistic Models for Deep Learning |  |
| 第十七章 蒙特卡罗方法 | 17 Monte Carlo Methods |  |
| 第十八章 直面配分函数 | 18 Confronting the Partition Function |  |
| 第十九章 近似推断                   | 19 Approximate Inference |  |
| 第二十章 深度生成模型 | 20 Deep Generative Models |  |

尚未上传的章节会在后续陆续上传。

# 致谢

感谢对本项目的认可和推广。

+ 专知：https://mp.weixin.qq.com/s/dVD-vKJsMGqnBz2v4O-Q3Q
+ GitHubDaily：https://m.weibo.cn/5722964389/4504392843690487
+ 程序员遇见GitHub：https://mp.weixin.qq.com/s/EzFOnwpkv7mr2TSjPtVG9A
+ 爱可可：https://m.weibo.cn/1402400261/4503389646699745

# 赞助

本项目书写耗费时间精力。如果本项目对你有帮助，可以请作者吃份冰淇淋：

<img src=""./docs/pay.jpg"" width=""200"" height=""200"" alt=""支付"" align=center>
"
479,"Build, train, deploy, scale and maintain deep learning models. Understand ML infrastructure and MLOps using hands-on examples.","# Deep Learning In Production Book

### **You can know grab a copy of the book from here:**
  - **Amazon**: [Paperback and Kindle](https://amzn.to/3oa50Vj)
  - **Leanpub**: [Epub and Pdf](https://leanpub.com/DLProd)

#### Build, train, deploy, scale and maintain deep learning models. Understand ML infrastructure and MLOps using hands-on examples.

**What you will learn?**

- Best practices to write Deep Learning code
- How to unit test and debug Machine Learning code
- How to build and deploy efficient data pipelines
- How to serve Deep Learning models
- How to deploy and scale your application
- What is MLOps and how to build end-to-end pipelines

**Who is this book for?**

- Software engineers who are starting out with deep learning
- Machine learning researchers with limited software engineering background
- Machine learning engineers who seek to strengthen their knowledge
- Data scientists who want to productionize their models and build customer-facing applications

**What tools you will use?**

Tensorflow, Flask, uWSGI, Nginx, Docker, Kubernetes, Tensorflow Extended, Google Cloud, Vertex AI

**Book description**

Deep Learning research is advancing rapidly over the past years. Frameworks and libraries are constantly been developed and updated. However, we still lack standardized solutions on how to serve, deploy and scale Deep Learning models. Deep Learning infrastructure is not very mature yet.

This book accumulates a set of best practices and approaches on how to build robust and scalable machine learning applications. It covers the entire lifecycle from data processing and training to deployment and maintenance. It will help you understand how to transfer methodologies that are generally accepted and applied in the software community, into Deep Learning projects.

It's an excellent choice for researchers with a minimal software background, software engineers with little experience in machine learning, or aspiring machine learning engineers.

## More details and a free sample

[Visit the book's page](https://theaisummer.com/deep-learning-in-production-book/)

## Table of Contents
1. Designing a machine learning system
2. Setting up a Deep Learning Workstation
3. Writing and Structuring Deep Learning Code
4. Data Processing
5. Training
6. Serving
7. Deploying
8. Scaling
9. Building an End-to-End Pipeline

## Articles

The books is based on an article series published in our blog ""AI Summer"" and they were later combined and organized into a single resource. Some were rewritten from scratch; some were modified to fit the book's structure. Plus, we added completely new material!

1. Laptop set up and system design: https://theaisummer.com/deep-learning-production/
2. Best practices to write Deep Learning code: Project structure, OOP, Type checking and documentation: https://theaisummer.com/best-practices-deep-learning-code/
3. How to Unit Test Deep Learning: Tests in TensorFlow, mocking and test coverage: https://theaisummer.com/unit-test-deep-learning/
4. Logging and Debugging in Machine Learning: https://theaisummer.com/logging-debugging/
5. Data preprocessing for deep learning: https://theaisummer.com/data-preprocessing/
6. Data preprocessing for deep learning (part2): https://theaisummer.com/data-processing-optimization/
7. How to build a custom production-ready Deep Learning Training loop in Tensorflow from scratch: https://theaisummer.com/tensorflow-training-loop/
8. How to train a deep learning model in the cloud: https://theaisummer.com/training-cloud/
9. Distributed Deep Learning training: Model and Data Parallelism in Tensorflow: https://theaisummer.com/distributed-training/
10. Deploy a Deep Learning model as a web application using Flask and Tensorflow: https://theaisummer.com/deploy-flask-tensorflow/
11.  How to use uWSGI and Nginx to serve a Deep Learning model:  https://theaisummer.com/uwsgi-nginx/
12. How to use Docker containers and Docker Compose for Deep Learning applications: https://theaisummer.com/docker/
13. Scalability in Machine Learning: Grow your model to serve millions of users: https://theaisummer.com/scalability/
14. Introduction to Kubernetes with Google Cloud: Deploy your Deep Learning model effortlessly: https://theaisummer.com/kubernetes/


## Support
If you like our effort, don't forget to star the project :) It matters!
"
2588,A shell🐚 by the beach🏖️!,"# dune

A shell by the beach!

<p float=""left"">
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/welcome3.png"" width=""47.5%""/></a>
  <a href=""https://asciinema.org/a/441120""><img src=""./assets/about.png"" width=""48%""/></a>
</p>

##### _NOTE: Click the image above for a video demonstration._

## About the Author

I'm a *bored* sophomore in college working on projects to fill the time. If you enjoy my work, consider supporting me by buying me a coffee! 

<a href=""https://www.buymeacoffee.com/adam.mcdaniel"" target=""_blank"">
  <img src=""https://cdn.buymeacoffee.com/buttons/v2/default-blue.png"" alt=""Buy Me A Coffee"" height=""60px"" width=""217px""/>
</a>

## Why write another shell?

I feel that bash is great in a lot of ways, but it doesn't exactly feel *cozy*: it's lacking a sort of personal touch, and it's also missing quick and easy customizability. With my last shell, [Atom](https://github.com/adam-mcdaniel/atom), I had accomplished some of the coziness that bash was missing, but I also introduced a lot of *really* fatal flaws in the syntax and the type system.

Dune, however, is designed ***completely*** differently from Atom (although you might notice the similarities in their widget systems). The interpreter itself is standalone, and it holds almost none of the functionality you see in the default distribution of Dune. If you wanted to, you could write a custom frontend and make a unique Dune based shell of your own!

This frontend implementation turns the coziness dial to 11. Just check out the shell's default startup script!

<p float=""left"">
  <img src=""./assets/intro.png"" width=""32%""/>
  <img src=""./assets/help.png"" width=""32%""/>
  <img src=""./assets/bye.png"" width=""32%""/>
</p>

I put a *lot* of work into making Dune just fun to use. It's like a neat little operating system itself!

Dune also attempts to be a usable scripting language, and even offers a few niche metaprogramming features such as quoting *(borrowed from [Lisp](https://github.com/adam-mcdaniel/wisp))*, operator overloading, and macros!

<p float=""left"">
  <img src=""./assets/metaprogramming.png"" width=""45%""/>
  <img src=""./assets/operator-overloading2.png"" width=""52.4%""/>
</p>

Overall, I wrote Dune to have a *complete* shell of my own: one that's fast, useful, and pretty.

*(Also, writing a shell is just kinda really fun)*

## Usage

Dune has a bunch of customizable components. Here's how you can change them and make your shell your own!

### The Prelude

Before entering interactive mode, Dune executes *the prelude*. The prelude is just the startup file `.dune-prelude` stored in the home directory for your user. If you don't provide your own prelude file, Dune will execute its own default prelude with an introduction to the shell.

You can see my example personal prelude [here](./.dune-prelude).

### The REPL

Dune's REPL is entirely customizable by overloading the following functions:

|Name|Purpose|Default Implementation|
|-|-|-|
|`prompt`|This function is called to generate the text which prompts the user for input. It takes the current working directory, and returns a string.|<pre>let prompt = cwd -> fmt@bold ((fmt@dark@blue ""(dune) "") +<br/> (fmt@bold (fmt@dark@green cwd)) +<br/> (fmt@bold (fmt@dark@blue ""$ "")))</pre>|
|`incomplete_prompt`|This function is called to generate the text which prompts the user for input when they have entered an incomplete expression. It takes the current working directory, and returns a string.|<pre>let incomplete_prompt = cwd -> ((len cwd) +<br/> (len ""(dune) "")) * "" "" +<br/> (fmt@bold (fmt@dark@yellow ""> ""));</pre>|
|`report`|This function is called to print a value to the console after evaluation.|*The default implementation is a builtin function (implemented in Rust), but you can overload it with any callable value nonetheless.*|

I highly recommend using the `fmt` module when implementing your own customizations for your prompt!

### Aliases

This distribution of Dune uses the *`Symbol`* type (the type of variable names and paths) to implement calling programs. Whenever an expression of type *`Symbol`* is evaluated as a command in interactive mode, it is invoked as a program.

Because of this, you can define aliases by assigning a variable to a program's name like so!

<a href=""https://asciinema.org/a/7Cr96ndSzsIch7oGVYI3aIaX9""><img src=""./assets/alias.png"" width=""48%""/></a>

If you have defined a variable that overshadows your program's name (such as an alias), you can *quote* the program name to run it.

![Overshadowed](./assets/overshadowed.png)

### Macros

To write functions that modify your shell's environment and act like commands or programs themselves, use a macro!

![Macros](./assets/macros.png)

Macros, when called with zero arguments, are passed the current working directory. When invoked, they assume the environment of the callee: if you execute a macro, it will execute as if you executed the contents of the macro itself with the parameter defined as the argument passed.

### Piping and Redirection

Piping and redirection are done with the `|` and `>>` operators. Here's some example uses!

![Piping and Redirection](./assets/piping.png)

If a value is piped into a callable object, like a function or macro, it is performed as an application; otherwise, the expression is treated like a regular call to a program.

## Standard Library

Dune offers an extensive standard library, and also provides a pretty interface to see all the functions available in each module!

<img src=""./assets/math.png"" width=""48%""/>

Dune offers the following builtin libraries:

|Name|Description|
|-|-|
|`rand`|A library for randomness|
|`time`|A library with date and time functions|
|`math`|A module for math and trig functionality|
|`fs`|A module for interacting with the file system|
|`fn`|A functional programming library|
|`fmt`|A library for text formatting on the console (color, styling, hyperlinks, text wrapping, etc.)|
|`os`|A small module with the host's OS info|
|`widget`|A module for creating text widgets|
|`shell`|A small module for information about the Dune shell|
|`console`|A library for manipulating the console|

For more information about each, just run `echo library-name`.

## Installation

To install, you must download Rust from [here](https://www.rust-lang.org/).
_If you already have Rust installed **you will probably need to update**. Dune uses a lot of recently stabilized features._

#### Development Build

```bash
# Install directly from git with cargo
cargo install --git https://github.com/adam-mcdaniel/dune

# Or, alternatively, the repo and install from source
git clone https://github.com/adam-mcdaniel/dune
cd dune
cargo install -f --path .
```

#### Releases
To get the current release build, install from [crates.io](https://crates.io/crates/dune).

```bash
# Also works for updating dune
cargo install -f dune
```
_Currently, since Dune is in its early stages of development, I would recommend against using releases at the moment. There are a lot of bug fixes and new features added inbetween releases._

#### After Install

```bash
# Just run the dune executable!
dunesh
```
"
2472,Firebase Javascript SDK,"# Firebase Javascript SDK

<!-- BADGES -->
![Build Status](https://img.shields.io/github/workflow/status/firebase/firebase-js-sdk/Run%20All%20Tests.svg)
[![Version](https://img.shields.io/npm/v/firebase.svg?label=version)](https://www.npmjs.com/package/firebase)
[![Coverage Status](https://coveralls.io/repos/github/firebase/firebase-js-sdk/badge.svg?branch=master)](https://coveralls.io/github/firebase/firebase-js-sdk?branch=master)
<!-- END BADGES -->

The Firebase JavaScript SDK implements the client-side libraries used by
applications using Firebase services. This SDK is distributed via:

- [CDN](https://firebase.google.com/docs/web/setup/#add-sdks-initialize)
- [npm package](https://www.npmjs.com/package/firebase)
- [Bower package](https://github.com/firebase/firebase-bower)

To get started using Firebase, see
[Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).

[![Release Notes](https://img.shields.io/npm/v/firebase.svg?style=flat-square&label=Release%20Notes%20for&labelColor=039be5&color=666)](https://firebase.google.com/support/release-notes/js)

## Upgrade to Version 9
Version 9 has a redesigned API that supports tree-shaking. Read the [Upgrade Guide](https://firebase.google.com/docs/web/modular-upgrade) to learn more.
## Supported Environments
Please see [Environment Support](https://firebase.google.com/support/guides/environments_js-sdk).

## SDK Dev Workflow

### Prerequisites

#### Node.js

Before you can start working on the Firebase JS SDK, you need to have Node.js
installed on your machine. The currently supported versions are `10.15.0` or greater.

To download Node.js visit https://nodejs.org/en/download/.

_NOTE: You can use a tool like [`NVM`](https://github.com/creationix/nvm)
or [`N`](https://github.com/tj/n) to install and manage multiple node versions_

#### Yarn

In addition to Node.js we use `yarn` to facilitate multi package development.

To install `yarn` follow the instructions listed on their website:
https://yarnpkg.com/en/docs/install

#### Java

The closure compiler requires a modern Java installation. Java 8+ should be installed: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

#### Verify Prerequisites

You can verify your setup by running the following commands in your terminal:

```bash
$ node -v
$ yarn -v
$ java -version
```

Your Node.js version should be `10.15.0` or greater, your `yarn` version should
be `1.0.0` or greater, and your `java` version should be `1.8.0` or greater.

_NOTE: We will update the documentation as new versions are required, however
for continuing development on the SDK, staying up to date on the stable versions
of these packages is advised_

### Install Dependencies

Once you have Node.js and `yarn` installed on your machine and have validated
that you are running the proper version, you can set up the development environment
by running the following at the root of the SDK:

```bash
$ yarn
```

Once you have installed all the dependencies, you can build the entire SDK by
running the following command the root of the SDK:

```bash
$ yarn build
```

## Testing the SDK

### Test Setup

A production project is required to test the Firebase JS SDK. You can create a
new project by visiting the [Firebase Console](https://console.firebase.google.com/).

#### Web App Setup

Visit the ""Project Overview"" and select ""Add app"" under your project name. Register the app with a
nickname and click through the remaining steps. Without performing this step, you will encounter
the error in the test setup:

```
FirebaseError: There are no WEB apps associated with this Firebase project
```

#### Firestore Database Setup

Visit the ""Firestore Database"" section of the console and create a Cloud Firestore
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Realtime Database Setup

Visit the ""Realtime Database"" section of the console and create a realtime
database. When prompted to select the set of initial security rules, select
any option (e.g. ""Start in Production Mode"") since these permission settings
will be overwritten below.

#### Authentication Support

Visit the authentication config in your project and enable the `Anonymous`
sign-in provider to complete your project config.

#### Automated Setup

The tests need to be configured to use the Firebase production project that you
created in the ""Test Setup"" section above. To do this, run the `yarn test:setup`
command, as follows:


```bash
# Select the Firebase project via the text-based UI.
$ yarn test:setup

# Specify the Firebase project via the command-line arguments.
$ yarn test:setup --projectId=<test_firebase_project_id>
```

If you see an error like
```
HTTP Error: 404, Project '<test_firebase_project_id>' does not exist.
```
then make sure that you have created the database as specified in the ""Firestore
Database Setup"" section above.

### Running the tests

Each of the directories in the `integration` directory as well as the `packages`
directory have their own test suites. You will need to build the SDK before
running tests. Test suites can be run all together by running the following 
command at the root of the package:

```bash
$ yarn test
```

In addition, you can run any of the tests individually by running `yarn test` in
an individual package directory.

## Building the SDK

### Introduction

The Firebase JS SDK is built with a series of individual packages that are all
contained in this repository. Development is coordinated via [yarn
workspaces](https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/) and
[Lerna](https://lerna.js.org/) (a monorepo management tool).

Each package in the `packages` directory, constitute a piece of our
implementation. The SDK is built via a combination of all of these packages
which are published under the [`firebase`
scope](https://www.npmjs.com/search?q=scope%3Afirebase) on NPM.

### Testing the SDK Locally

Please be sure to build your repo before proceeding any further.
In order to manually test your SDK changes locally, you must use [yarn link](https://classic.yarnpkg.com/en/docs/cli/link):

```shell
$ cd packages/firebase
$ yarn link # initialize the linking to the other folder
$ cd ../<my-test-app-dir> # cd into your personal project directory
$ yarn link firebase # tell yarn to use the locally built firebase SDK instead
```

This will create a symlink and point your `<my-test-app-dir>` to the locally built version of the firebase SDK.

### Helper Scripts

Each package in the `packages` directory exposes a `dev` script. This script
will set up a watcher for development on the individual piece of the SDK. In
addition, there is a top level `dev` script that can be run to start all of the
watch tasks as well as a sandbox server.

You can run the dev script by running the following at the root of the package:

```bash
$ yarn dev
```

### Prepush Hooks

As part of this repo, we use the NPM package [`husky`](https://npm.im/husky) to
implement git hooks. We leverage the prepush hook to do two things:

- Automated code styling (using [`prettier`](https://npm.im/prettier))
- Automated LICENSE header insertion

## Contributing

See [Contributing](./CONTRIBUTING.md) for more information on contributing to the Firebase
JavaScript SDK.

### Big Thanks

Cross-browser Testing Platform and Open Source <3 Provided by [Sauce Labs][homepage]

[homepage]: https://saucelabs.com
"
0,LLVM-based compiler for the Nim language,"# Introduction

[nlvm](https://github.com/arnetheduck/nlvm) (the nim-level virtual machine?)
is an [LLVM-based](http://llvm.org) compiler for the [Nim](http://nim-lang.org)
language.

From Nim's point of view, it's a backend just like C or JavaScript - from
LLVM's point of view, it's a language frontend that emits IR.

When I started on this little project, I knew neither llvm nor Nim.
Therefore, I'd specially like to thank the friendly folks at the #nim
channel that never seemed to tire of my nooby questions.
Also, thanks to all tutorial writers out there, on llvm, programming
and other topics for providing such fine sources of copy-pa... er,
inspiration!

Questions, patches, improvement suggestions and reviews welcome. When
you find bugs, feel free to fix them as well :)

Fork and enjoy!

Jacek Sieka (arnetheduck on gmail point com)

# Status

`nlvm` is generally at par with `nim` in terms of features, with the following
notable differences:

* Fast compile times - no intermediate `C` compiler step
* DWARF (""zero-cost"") exception handling
* High-quality `gdb`/`lldb` debug information with source stepping, type
  information etc
* Smart code generation - compiler intrinsics for overflow checking,
  smart constant initialization, etc
* Native `wasm32` support with no extra tooling

Most things from `nim` work just fine (see notes below however!):

* the same standard library is used
* similar command line options are supported (just change `nim` to `nlvm`!)
* `importc` works without needing `C` header files - the declaration in the
  `.nim` file needs to be accurate

Test coverage is not too bad either:

* bootstrapping and compiling itself
* ~95% of all upstream tests - most failures can be traced to
  the standard library and compiler relying on C implementation details - see
  [skipped-tests.txt](skipped-tests.txt) for an updated list of issues
* compiling most applications
* platforms: linux/x86_64, wasm32 (pre-alpha!)
* majority of the nim standard library (the rest can be fixed easily -
  requires upstream changes however)

How you could contribute:

* work on making [skipped-tests.txt](skipped-tests.txt) smaller
* improve platform support (`osx` and `windows` should be easy, `arm` would be
  nice)
* help `nlvm` generate better IR - optimizations, builtins, exception handling..
* help upstream make std library smaller and more `nlvm`-compatible
* send me success stories :)
* leave the computer for a bit and do something real for your fellow earthlings

`nlvm` does _not_:

* understand `C` - as a consequence, `header`, `emit` and similar pragmas
  will not work - neither will the fancy `importcpp`/`C++` features
* support all nim compiler flags and features - do file bugs for anything
  useful that's missing

# Compile instructions

To do what I do, you will need:
* Linux
* A C/C++ compiler (ironically, I happen to use `gcc` most of the time)

Start with a clone:

    cd $SRC
    git clone https://github.com/arnetheduck/nlvm.git
    cd nlvm && git submodule update --init

We will need a few development libraries installed, mainly due to how `nlvm`
processes library dependencies (see dynlib section below):

    # Fedora
    sudo dnf install pcre-devel openssl-devel sqlite-devel ninja-build cmake

    # Debian, ubuntu etc
    sudo apt-get install libpcre3-dev libssl-dev libsqlite3-dev ninja-build cmake

Compile `nlvm` (if needed, this will also build `nim` and `llvm`):

    make

Compile with itself and compare:

    make compare

Run test suite:

    make test
    make stats

You can link statically to LLVM to create a stand-alone binary - this will
use a more optimized version of LLVM as well, but takes longer to build:

    make STATIC_LLVM=1

If you want a faster `nlvm`, you can also try the release build - it will be
called `nlvmr`:

    make STATIC_LLVM=1 nlvmr

When you update `nlvm` from `git`, don't forget the submodule:

    git pull && git submodule update

To build a docker image, use:

    make docker

To run built `nlvm` docker image use:

    docker run -v $(pwd):/code/ nlvm c -r /code/test.nim

# Compiling your code

On the command line, `nlvm` is mostly compatible with `nim`.

When compiling, `nlvm` will generate a single `.o` file with all code from your
project and link it using `$CC` - this helps it pick the right flags for
linking with the C library.

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c fizzbuzz

If you want to see the generated LLVM IR, use the `-c` option:

    cd $SRC/nlvm/Nim/examples
    ../../nlvm/nlvm c -c fizzbuzz
    less fizzbuzz.ll

You can then run the LLVM optimizer on it:

    opt -Os fizzbuzz.ll | llvm-dis

... or compile it to assembly (`.s`):

    llc fizzbuzz.ll
    less fizzbuzz.s

Apart from the code of your `.nim` files, the compiler will also mix in the
compatibility found library in `nlvm-lib/`.

## Pipeline

Generally, the `nim` compiler pipeline looks something like this:

    nim --> c files --> IR --> object files --> executable

In `nlvm`, we remove one step and bunch all the code together:

    nim --> IR --> single object file --> executable

Going straight to the IR means it's possible to express nim constructs more
clearly, allowing `llvm` to understand the code better and thus do a better
job at optimization. It also helps keep compile times down, because the
`c-to-IR` step can be avoided.

The practical effect of generating a single object file is similar to
`gcc -fwhole-program -flto` - it is expensive in terms of memory, but results
in slightly smaller and faster binaries. Notably, the `IR-to-machine-code` step,
including any optimizations, is repeated in full for each recompile.

## Common issues

### dynlib

`nim` uses a runtime dynamic library loading scheme to gain access to shared
libraries. When compiling, no linking is done - instead, when running your
application, `nim` will try to open anything the user has installed.

`nlvm` does not support the `{.dynlib.}` pragma - instead you can use
`{.passL.}` using normal system linking.

```nim
# works with `nim`
proc f() {. importc, dynlib: ""mylib"" .}

# works with both `nim` and `nlvm`
{.passL: ""-lmylib"".}
proc f() {. importc .}
```

### header and emit

When `nim` compiles code, it will generate `c` code which may include other
`c` code, from headers or directly via `emit` statements. This means `nim` has
direct access do symbols declared in the `c` file, which can be both a feature
and a problem.

In `nlvm`, `{.header.}` directives are ignored - `nlvm` looks strictly at
the signature of the declaration, meaning the declaration must _exactly_ match
the `c` header file or subtly ABI issues and crashes ensue!

```nim

# When `nim` encounters this, it will emit `jmp_buf` in the `c` code without
# knowing the true size of the type, letting the `c` compiler determine it
# instead.
type C_JmpBuf {.importc: ""jmp_buf"", header: ""<setjmp.h>"".} = object

# nlvm instead ignores the `header` directive completely and will use the
# declaration as written. Failure to correctly declare the type will result
# in crashes and subtle bugs - memory will be overwritten or fields will be
# read from the wrong offsets.
#
# The following works with both `nim` and `nlvm`, but requires you to be
# careful to match the binary size and layout exactly (note how `bycopy`
# sometimes help to further nail down the ABI):

when defined(linux) and defined(amd64):
  type
    C_JmpBuf {.importc: ""jmp_buf"", bycopy.} = object
      abi: array[200 div sizeof(clong), clong]

# In `nim`, `C` constant defines are often imported using the following trick,
# which makes `nim` emit the right `C` code that the value from the header
# can be read (no writing of course, even though it's a `var`!)
#
# assuming a c header with: `#define RTLD_NOW 2`
# works for nim:
var RTLD_NOW* {.importc: ""RTLD_NOW"", header: ""<dlfcn.h>"".}: cint

# both nlvm and nim (note how these values often can be platform-specific):
when defined(linux) and defined(amd64):
  const RTLD_NOW* = cint(2)

```

### wasm32 support

`wasm32` support is still very bare-bones, so you will need to do a bit of
tinkering to get it to work.

Presently, the `wasm32-unknown-unknown` target is mapped to `--os:standalone`
and `--cpu:wasm32` - this choice represents a very raw `wasm` engine with 32-bit
little-endian integers and pointers - in the future, the `nim` standard library
and `system.nim` will need to be updated to support WASM system interfaces like
emscripten or WASI.

To compile wasm files, you will thus need a `panicoverride.nim` - a minimal
example looks like this and discards any errors:

```nim
# panicoverride.nim
proc rawoutput(s: string) = discard
proc panic(s: string) {.noreturn.} = discard
```

After placing the above code in your project folder, you can compile `.nim`
code to `wasm32`:

```nim
# myfile.nim
proc adder*(v: int): int {.exportc.} =
  v + 4
```

```sh
nlvm c --cpu:wasm32 --os:standalone --gc:none --passl:--no-entry myfile.nim
wasm2wat -l myfile.wasm
```

# Random notes

* Upstream is pinned using a submodule - nlvm relies heavily on internals
  that keep changing - it's unlikely that it works with any other versions,
  patches welcome to update it
* The nim standard library likes to import C headers directly which works
  because the upstream nim compiler uses a C compiler underneath - ergo,
  large parts of the standard library don't work with nlvm.
* Happy to take patches for anything, including better platform support!
* For development, it's convenient to build LLVM with assertions turned on -
  the API is pretty unforgiving
"
1021,"Elkeid is an open source solution that can meet the security requirements of various workloads such as hosts, containers and K8s, and serverless. It is derived from ByteDance's internal best practices.","# Elkeid - Bytedance Cloud Workload Protection Platform

English | [简体中文](README-zh_CN.md)

**Elkeid** is an open source solution that can meet the security requirements of various workloads such as **hosts, containers and K8s, and serverless**. It is derived from ByteDance's internal best practices.

With the business development of enterprises, the situation of multi-cloud, cloud-native, and coexistence of multiple workloads has become more and more prominent. We hope that there can be a set of solutions that can meet the security requirements under different workloads, so **Elkeid** was born.



## Introduction

Elkeid has the following key capabilities:

* **Elkeid** not only has the traditional **HIDS (Host Intrusion Detection System)** ability for host layer intrusion detection and malicious file identification, but also can well identify malicious behaviors in containers. The host can meet the anti-intrusion security requirements of the host and the container on it, and the powerful kernel-level data collection capability at the bottom of Elkeid can satisfy the desire of most security analyst for host-level data.

* For the running business **Elkeid** has the **RASP** capability and can be injected into the business process for anti-intrusion protection, not only the operation and maintenance personnel do not need to install another Agent, but also the business does not need to restart.

* For **K8s** itself, **Elkeid** supports collection to **K8s Audit Log** to perform intrusion detection and risk identification on the **K8s** system.

* **Elkeid**'s rule engine **Elkeid HUB** can also be well linked with external multiple systems.

**Ekeid** integrates these capabilities into one platform to meet the complex security requirements of different workloads, while also achieving multi-component capability association. What is even more rare is that each component undergoes massive byte-beating. Data and years of combat testing.



## Elkeid Community Edition Description

It should be noted that there are differences between the **Elkeid** **open source version** and the full version. The current open source capabilities mainly include:

* All on-device capabilities, that is, on-device data/asset/partial collection capabilities, kernel-state data collection capabilities, RASP probe parts, etc., and are consistent with the internal version of ByteDance;
* All backend capabilities, namely Agent Center, service discovery, etc., are consistent with the internal version of ByteDance;
* Provide a community edition rule engine, namely Elkeid HUB, and use it as an example with a small number of strategies;
* Provides community version of Elkeid Console and some supporting capabilities.

Therefore, it is necessary to have complete anti-intrusion and risk perception capabilities, and it is also necessary to construct policies based on Elkeid HUB and perform secondary processing of the data collected by Elkeid.



## Elkeid Architecture

<img src=""server/docs/server_new.png""/>

##  Elkeid Host Ability
* **[Elkeid Agent](agent)** Linux userspace agent，responsible for managing various plugin, communication with **Elkeid Server**.
* **[Elkeid Driver](driver)** Driver can collect data on Linux Kernel, support container runtime , communication with Elkeid Driver Plugin.
* **[Elkeid RASP](rasp)** Support CPython、Golang、JVM、NodeJS、PHP runtime probe, supports dynamic injection into the runtime.
* **Elkeid Agent Plugin List**
    * [Driver Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/driver): Responsible for managing **Elkeid Driver**, and process the driver data.
    * [Collector Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/collector): Responsible for the collection of assets/log information on the Linux System, such as user list, crontab, package information, etc.
    * [Journal Watcher](https://github.com/bytedance/Elkeid/tree/main/plugins/journal_watcher): Responsible for monitoring systemd logs, currently supports ssh related log collection and reporting.
    * [Scanner Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/scanner): Responsible for static detection of malicious files on the host, currently supports yara.
    * [RASP Plugin](https://github.com/bytedance/Elkeid/tree/main/rasp/plugin): Responsible for managing RASP components and processing data collected from RASP.
    * [Baseline Plugin](https://github.com/bytedance/Elkeid/tree/main/plugins/baseline): Responsible for detecting baseline risks based on baseline check policies.
* [**Elkeid Data Format**](server/docs/ElkeidData.xlsx)
* [**Elkeid Data Usage Tutorial**](elkeidup/raw_data_usage_tutorial/raw_data_usage_tutorial-zh_CN.md)


## Elkeid Backend Ability
* **[Elkeid AgentCenter](server/agent_center)** Responsible for communicating with the Agent, collecting Agent data and simply processing it and then summing it into the MQ, is also responsible for the management of the Agent, including Agent upgrade, configuration modification, task distribution, etc.
* **[Elkeid ServiceDiscovery](server/service_discovery)** Each component in the background needs to register and synchronize service information with the component regularly, so as to ensure that the instances in each service module are visible to each other and facilitate direct communication.
* **[Elkeid Manager](server/manager)** Responsible for the management of the entire backend, and provide related query and management API.
* **[Elkeid Console](server/web_console)** Elkeid Front-end
* **[Elkeid HUB](https://github.com/bytedance/Elkeid-HUB)** Elkeid HIDS RuleEngine



## Elkeid Function List

| Ability List                                           | Elkeid Community Edition | Elkeid Enterprise Edition |
|--------------------------------------------------------|--------------------------|---------------------------|
| Linux  runtime data collection                         | :white_check_mark:       | :white_check_mark:        |
| RASP probe                                             | :white_check_mark:       | :white_check_mark:        |
| K8s Audit Log collection                               | :white_check_mark:       | :white_check_mark:        |
| Agent control plane                                    | :white_check_mark:       | :white_check_mark:        |
| Host Status and Details                                | :white_check_mark:       | :white_check_mark:        |
| Extortion bait                                         | :ng_man:                 | :white_check_mark:        |
| Asset collection                                       | :white_check_mark:       | :white_check_mark:        |
| Asset Collection Enhancements                          | :ng_man:                 | :white_check_mark:        |
| K8s asset collection                                   | :white_check_mark:       | :white_check_mark:        |
| Exposure and Vulnerability Analysis                    | :ng_man:                 | :white_check_mark:        |
| Host/Container Basic Intrusion Detection               | `few samples`            | :white_check_mark:        |
| Host/Container Behavioral Sequence Intrusion Detection | :ng_man:                 | :white_check_mark:        |
| RASP Basic Intrusion Detection                         | `few samples`            | :white_check_mark:        |
| RASP Behavioral Sequence Intrusion Detection           | :ng_man:                 | :white_check_mark:        |
| K8S Basic Intrusion Detection                          | `few samples`            | :white_check_mark:        |
| K8S Behavioral Sequence Intrusion Detection            | :ng_man:                 | :white_check_mark:        |
| K8S Threat Analysis                                    | :ng_man:                 | :white_check_mark:        |
| Alarm traceability (behavior traceability)             | :ng_man:                 | :white_check_mark:        |
| Alarm traceability (resident traceability)             | :ng_man:                 | :white_check_mark:        |
| Alert Whitelist                                        | :white_check_mark:       | :white_check_mark:        |
| Multi-alarm aggregation capability                     | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (Process)                              | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (Network)                              | :ng_man:                 | :white_check_mark:        |
| Threat Repsonse (File)                                 | :ng_man:                 | :white_check_mark:        |
| File isolation                                         | :ng_man:                 | :white_check_mark:        |
| Vulnerability discovery                                | `few vuln info`          | :white_check_mark:        |
| Vulnerability information hot update                   | :ng_man:                 | :white_check_mark:        |
| Baseline check                                         | `few baseline rules`     | :white_check_mark:        |
| Application Vulnerability Hotfix                       | :ng_man:                 | :white_check_mark:        |
| Virus scan                                             | :white_check_mark:       | :white_check_mark:        |
| User behavior log analysis                             | :ng_man:                 | :white_check_mark:        |
| Agent Plugin management                                | :white_check_mark:       | :white_check_mark:        |
| System monitoring                                      | :white_check_mark:       | :white_check_mark:        |
| System Management                                      | :white_check_mark:       | :white_check_mark:        |
| Windows Support                                        | :ng_man:                 | :white_check_mark:        |
| Honey pot                                              | :ng_man:                 | :oncoming_automobile:     |
| Active defense                                         | :ng_man:                 | :oncoming_automobile:     |
| Cloud virus analysis                                   | :ng_man:                 | :oncoming_automobile:     |
| File-integrity monitoring                              | :ng_man:                 | :oncoming_automobile:     |




## Front-end Display (Community Edition)
**Security overview**
<img src=""png/console0.png"" style=""float:left;""/>

**K8s security alert list**

<img src=""png/console1.png"" style=""float:left;""/>

**K8s pod list**

<img src=""png/console2.png"" style=""float:left;""/>

****

**Host overview**

<img src=""png/console3.png"" style=""float:left;""/>

**Resource fingerprint**

<img src=""png/console4.png"" style=""float:left;""/>

**intrusion alert overwiew**

<img src=""png/console5.png"" style=""float:left;""/>

**Vulnerability**

<img src=""png/console6.png"" style=""float:left;""/>

**Baseline check**

<img src=""png/console7.png"" style=""float:left;""/>

**Virus scan**

<img src=""png/console8.png"" style=""float:left;""/>

**Backend hosts monitoring**

<img src=""png/console9.png"" style=""float:left;""/>

**Backend service monitoring**

<img src=""png/console10.png"" style=""float:left;""/>


## Console User Guide
* **[ELkeid Console User Guide](server/docs/console_tutorial/Elkeid_Console_manual.md)**


## Quick Start
* **[Deploy by Elkeidup](elkeidup/README.md)**

## Contact us && Cooperation

<img src=""png/Lark.png"" width=""40%"" style=""float:left;""/>

*Lark Group*



## About Elkeid Enterprise Edition

Elkeid Enterprise Edition supports separate intrusion detection rules(like the HIDS, RASP, K8s) sales, as well as full capacity sales.

If interested in Elkeid Enterprise Edition please contact elkeid@bytedance.com


## Elkeid Docs
For more details and latest updates, see [Elkeid docs](https://elkeid.bytedance.com/English/).


## License
* Elkeid Driver: GPLv2
* Elkeid RASP: Apache-2.0
* Elkeid Agent: Apache-2.0
* Elkeid Server: Apache-2.0
* Elkeid Console: [Elkeid License](server/web_console/LICENSE)
* Elkeid HUB: [Elkeid License](https://github.com/bytedance/Elkeid-HUB/blob/main/LICENSE)

## 404StarLink 2.0 - Galaxy
<img src=""https://github.com/knownsec/404StarLink-Project/raw/master/logo.png"" width=""30%"" style=""float:left;""/>

Elkeid has joined 404Team [404StarLink 2.0 - Galaxy](https://github.com/knownsec/404StarLink2.0-Galaxy)
"
2511,Learning operating system development using Linux kernel and Raspberry Pi,"# Learning operating system development using Linux kernel and Raspberry Pi

This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS or just RPi OS. The RPi OS source code is largely based on [Linux kernel](https://github.com/torvalds/linux), but the OS has very limited functionality and supports only [Raspberry PI 3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/). 

Each lesson is designed in such a way that it first explains how some kernel feature is implemented in the RPi OS, and then it tries to demonstrate how the same functionality works in the Linux kernel. Each lesson has a corresponding folder in the [src](https://github.com/s-matyukevich/raspberry-pi-os/tree/master/src) directory, which contains a snapshot of the OS source code at the time when the lesson had just been completed. This allows the introduction of new concepts gracefully and helps readers to follow the evolution of the RPi OS. Understanding this guide doesn't require any specific OS development skills.

For more information about project goals and history, please read the [Introduction](docs/Introduction.md). The project is still under active development, if you are willing to participate - please read the [Contribution guide](docs/Contributions.md).

<p>
  <a href=""https://twitter.com/RPi_OS"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/twitter.png"" alt=""Follow @RPi_OS on twitter"" height=""34"" >
  </a>

  <a href=""https://www.facebook.com/groups/251043708976964/"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/facebook.png"" alt=""Follow Raspberry Pi OS on facebook"" height=""34"" >
  </a>

  <a href=""https://join.slack.com/t/rpi-os/shared_invite/enQtNDQ1NTg2ODc1MDEwLWVjMTZlZmMyZDE4OGEyYmMzNTY1YjljZjU5YWI1NDllOWEwMjI5YzVkM2RiMzliYjEzN2RlYmUzNzBiYmQyMjY"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/slack.png"" alt=""Join Raspberry Pi OS in slack"" height=""34"" >
  </a>

  <a href=""https://www.producthunt.com/upcoming/raspberry-pi-os"" target=""_blank"">
    <img src=""https://raw.githubusercontent.com/s-matyukevich/raspberry-pi-os/master/images/subscribe.png"" alt=""Subscribe for updates"" height=""34"" >
  </a>
</p>

## Table of Contents

* **[Introduction](docs/Introduction.md)**
* **[Contribution guide](docs/Contributions.md)**
* **[Prerequisites](docs/Prerequisites.md)**
* **Lesson 1: Kernel Initialization** 
  * 1.1 [Introducing RPi OS, or bare metal ""Hello, world!""](docs/lesson01/rpi-os.md)
  * Linux
    * 1.2 [Project structure](docs/lesson01/linux/project-structure.md)
    * 1.3 [Kernel build system](docs/lesson01/linux/build-system.md) 
    * 1.4 [Startup sequence](docs/lesson01/linux/kernel-startup.md)
  * 1.5 [Exercises](docs/lesson01/exercises.md)
* **Lesson 2: Processor initialization**
  * 2.1 [RPi OS](docs/lesson02/rpi-os.md)
  * 2.2 [Linux](docs/lesson02/linux.md)
  * 2.3 [Exercises](docs/lesson02/exercises.md)
* **Lesson 3: Interrupt handling**
  * 3.1 [RPi OS](docs/lesson03/rpi-os.md)
  * Linux
    * 3.2 [Low level exception handling](docs/lesson03/linux/low_level-exception_handling.md) 
    * 3.3 [Interrupt controllers](docs/lesson03/linux/interrupt_controllers.md)
    * 3.4 [Timers](docs/lesson03/linux/timer.md)
  * 3.5 [Exercises](docs/lesson03/exercises.md)
* **Lesson 4: Process scheduler**
  * 4.1 [RPi OS](docs/lesson04/rpi-os.md) 
  * Linux
    * 4.2 [Scheduler basic structures](docs/lesson04/linux/basic_structures.md)
    * 4.3 [Forking a task](docs/lesson04/linux/fork.md)
    * 4.4 [Scheduler](docs/lesson04/linux/scheduler.md)
  * 4.5 [Exercises](docs/lesson04/exercises.md)
* **Lesson 5: User processes and system calls** 
  * 5.1 [RPi OS](docs/lesson05/rpi-os.md) 
  * 5.2 [Linux](docs/lesson05/linux.md)
  * 5.3 [Exercises](docs/lesson05/exercises.md)
* **Lesson 6: Virtual memory management**
  * 6.1 [RPi OS](docs/lesson06/rpi-os.md) 
  * 6.2 Linux (In progress)
  * 6.3 [Exercises](docs/lesson06/exercises.md)
* **Lesson 7: Signals and interrupt waiting** (To be done)
* **Lesson 8: File systems** (To be done)
* **Lesson 9: Executable files (ELF)** (To be done)
* **Lesson 10: Drivers** (To be done)
* **Lesson 11: Networking** (To be done)

"
2431,Master the creation of Modern UX/UI Websites,"# Modern UI/UX GPT-3
### [Live Site](https://gpt3-jsm.com/)

![Modern UI/UX GPT-3](https://i.ibb.co/TR5LW9z/image.png)

## Stay up to date with new projects
New major projects coming soon, subscribe to the mailing list to stay up to date https://resource.jsmasterypro.com/newsletter

## Introduction
This is a code repository for the corresponding video tutorial. 

You might be wondering, what are the prerequisites for building such an amazing website? Don't worry, this course is completely beginner-friendly! We're going to start easy and them move to more complex topics. Every step of the way will be explained. Alongside building the website, you'll learn:

- React Functional components and their reusability
- React file and folder structure
- Fundamental CSS properties to master flex & grid
- Fundamentals of the CSS BEM Model
- From soft and pleasant animations to complex gradients
- Perfectly placed media queries for satisfactory responsiveness covering almost devices
- And at the end you'll learn how to deploy your websites to extremely fast servers and give them a custom domain name.
"
2859,Next RecSys Library,"# NeuRec

## An open source neural recommender library

**Main Contributors**: [Bin Wu](https://github.com/wubinzzu), [Zhongchuan Sun](https://github.com/ZhongchuanSun), [Xiangnan He](http://staff.ustc.edu.cn/~hexn/), [Xiang Wang](https://xiangwang1223.github.io), & [Jonathan Staniforth](https://github.com/jonathanstaniforth)

**NeuRec** is a comprehensive and flexible Python library for recommender systems that includes a large range of state-of-the-art neural recommender models. This library aims to solve general, social and sequential (i.e. next-item) recommendation tasks, using the [Tensorflow](https://www.tensorflow.org/) library to provide 33 models out of the box. NeuRec is [open source](https://opensource.org) and available under the [MIT license](https://opensource.org/licenses/MIT).

## Features

* **Cross platform** - run on any operating system with the available Docker images;
* **State-of-the-art** - 33 neural recommender models available out of the box;
* **Flexible configuration** - easily change the configuration settings to your exact requirements;
* **Easy expansion** - quickly include models or datasets into NeuRec;
* **Fast execution** - naturally support GPU, with a mutli-thread evaluator;
* **Detailed documentation** - extensive documentation available as Jupyter notebooks in [tutorial.ipynb](./tutorial.ipynb).

## Architecture

The architecture of NeuRec is shown in the diagram below:

<img src=""./architecture.jpg"" width = ""50%"" height = ""50%""/>

## Quick Start

Firstly, download this repository and unpack the downloaded source to a suitable location.

Secondly, go to '*./NeuRec*' and compline the evaluator of cpp implementation with the following command line:

```bash
python setup.py build_ext --inplace
```

If the compilation is successful, the evaluator of cpp implementation will be called automatically.
Otherwise, the evaluator of python implementation will be called.

**Note that the cpp implementation is much faster than python.**

Thirdly, specify dataset and recommender in configuration file *NeuRec.properties*.

Finally, run [main.py](./main.py) in IDE or with command line:

```bash
python main.py
```

## Tutorial

The short introduction to NeuRec is described in [tutorial.ipynb](./tutorial.ipynb)

## Models

The list of available models in NeuRec, along with their paper citations, are shown below:

| General Recommender | Paper                                                                                                                           |
|---------------------|---------------------------------------------------------------------------------------------------------------------------------|
| GMF, MLP, NeuMF     | Xiangnan He et al., Neural Collaborative Filtering , WWW 2017.                                                                  |
| BPRMF               | Steffen Rendle et al., BPR: Bayesian Personalized Ranking from Implicit Feedback. UAI 2009.                                     |
| FISM                | Santosh Kabbur et al., FISM: Factored Item Similarity Models for Top-N Recommender Systems. KDD 2013.                           |
| NAIS                | Xiangnan He et al., NAIS: Neural Attentive Item Similarity Model for Recommendation . TKDE2018.                                 |
| DeepICF             | Feng Xue et al., Deep Item-based Collaborative Filtering for Top-N Recommendation. TOIS 2019.                                   |
| ConvNCF             | Xiangnan He et al., Outer Product-based Neural Collaborative Filtering . IJCAI 2018.                                            |
| DMF                 | Hong-Jian Xue et al., Deep Matrix Factorization Models for Recommender Systems. IJCAI 2017.                                     |
| CDAE, DAE           | Yao Wu et al., Collaborative denoising auto-encoders for top-n recommender systems. WSDM 2016.                                  |
| MultiDAE, MultiVAE  | Dawen Liang, et al., Variational autoencoders for collaborative filtering. WWW 2018.                                            |
| JCA                 | Ziwei Zhu, et al., Improving Top-K Recommendation via Joint Collaborative Autoencoders. WWW 2019.                               |
| IRGAN               | Jun Wang, et al., IRGAN: A Minimax Game for Unifying Generative and Discriminative Information Retrieval Models. SIGIR 2017.    |
| CFGAN               | Dong-Kyu Chae, et al., CFGAN: A Generic Collaborative Filtering  Framework based on Generative Adversarial Networks. CIKM 2018. |
| APR                 | Xiangnan He, et al., Adversarial Personalized Ranking for Recommendation. SIGIR 2018.                                           |
| SpectralCF          | Lei Zheng, et al., Spectral Collaborative Filtering. RecSys 2018.                                                               |
| NGCF                | Xiang Wang, et al., Neural Graph Collaborative Filtering. SIGIR 2019.                                                           |
| WRMF                | Yifan Hu, et al., Collaborative Filtering for Implicit Feedback Datasets. ICDM 2008.                                            |
| LightGCN            | Xiangnan He, et al., LightGCN: Simplifying and Powering Graph Convolution Network for Recommendation. SIGIR 2020.               |

| Social Recommender | Paper                                                                                                      |
|------------------------|------------------------------------------------------------------------------------------------------------|
| SBPR                | Tong Zhao et al., Leveraging Social Connections to Improve Personalized Ranking for Collaborative Filtering. CIKM 2014.         |
| DiffNet                    | Le Wu et al., A Neural Influence Diffusion Model for Social Recommendation, SIGIR 2019. |


| Sequential Recommender | Paper                                                                                                      |
|------------------------|------------------------------------------------------------------------------------------------------------|
| FPMC, FPMCplus         | Steffen Rendle et al., Factorizing Personalized Markov Chains for Next-Basket Recommendation, WWW 2010.    |
| HRM                    | Pengfei Wang et al., Learning Hierarchical Representation Model for NextBasket Recommendation, SIGIR 2015. |
| NPE                    | ThaiBinh Nguyen et al., NPE: Neural Personalized Embedding for Collaborative Filtering, ijcai 2018.        |
| TransRec               | Ruining He et al., Translation-based Recommendation, SIGIR 2015.                                           |
| Caser                  | Jiaxi Tang et al., Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding, WSDM 2018.                                           |
| Fossil               | Ruining He et al., Fusing similarity models with Markov chains for sparse sequential recommendation, ICDM 2016.                                           |
| GRU4Rec               | Balázs Hidasi et al., Session-based Recommendations with Recurrent Neural Networks, ICLR 2016.                                           |
| GRU4RecPlus               | Balázs Hidasi et al., Recurrent Neural Networks with Top-k Gains for Session-based Recommendations, CIKM 2018.                                           |
| SASRec               | Wangcheng Kang et al., Self-Attentive Sequential Recommendation, ICDM 2018.                                           |
| SRGNN               |Shu Wu et al., Session-Based Recommendation with Graph Neural Networks, AAAI 2019.                                           |

<!--
## Contributions

Please let us know if you experience any issues or have suggestions for new features by submitting an issue under the Issues tab or joining our WeChat Group.

<img src=""WeChat_QR_Code.jpg"" width = ""30%"" height = ""30%""/>-->

## Acknowledgements

The development of NeuRec is supported by the National Natural Science
Foundation of China under Grant No. 61772475. This project is also supported by the National Research Foundation, Prime Minister’s Office, Singapore under its IRC@Singapore Funding Initiative.

<img src=""./next.png"" width = ""297"" height = ""100"" alt=""next"" align=center />
"
2168,Material Design component library for Mithril and React,"# Polythene

[![Join the chat at https://gitter.im/ArthurClemens/Polythene](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ArthurClemens/Polythene?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

Material Design component library for [Mithril](http://mithril.js.org) and [React](https://facebook.github.io/react/).

Can be used as general-purpose component library that includes dialogs, cards, notifications, lists, buttons, form elements, and more.

<a href=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink.png"" target=""_blank""><img src=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink-thumb.jpg"" height=""500"" /></a>

<a href=""https://arthurclemens.github.io/assets/polythene/docs/polythene-kitchen-sink.png"" target=""_blank"">Kitchen sink - click to enlarge</a>


## Main features

* Allows creating dynamic and interactive interfaces with ease
* Closely follows the Material Design specification
* Versatile theming options to totally deviate from Material Design
* Supports touch, mouse and keyboard
* Extensive documentation with example code


## Demos

* [Live examples for Mithril](docs/online-examples-mithril.md)
* [Live examples for React](docs/online-examples-react.md)


## Getting started

* [Introduction](docs/introduction.md)
* [Getting started with Mithril](docs/getting-started-mithril.md)
* [Getting started with React](docs/getting-started-react.md)

### Setup examples / starter kits

#### Mithril

* [polythene-mithril-setup](https://github.com/ArthurClemens/polythene-mithril-setup)
* [polythene-mithril-typescript-setup](https://github.com/ArthurClemens/polythene-mithril-typescript-setup)
* [polythene-mithril-material-components-web](https://github.com/ArthurClemens/polythene-mithril-material-components-web)
* [polythene-mithril-coffeescript-setup](https://github.com/ArthurClemens/polythene-mithril-coffeescript-setup)

#### React

* [polythene-react-setup](https://github.com/ArthurClemens/polythene-react-setup)


## Guides

* [Documentation: components, examples, CSS, theming](docs/README.md)
* [Extending other libraries](docs/extending.md)
* [Developing](docs/developing.md)
* [Change log](docs/changes.md)
* [Known issues](docs/known-issues.md)


## Compatibility

* Mithril 1.x, Mithril 2.x
* React 16.x
* Bundlers: Rollup, Webpack 3 and 4
* TypeScript


## Browser support

* Chrome: 54+
* Edge: 13+
* Firefox: 49+
* Internet Explorer: 11 - see [Known issues](docs/known-issues.md)
* Mobile Safari: 9+
* Safari: 9+
"
1130,Backend master class: build a simple bank service in Go,"# Simple Bank

This repository contains the codes of the [Backend Master Class](https://bit.ly/backendmaster) course by [TECH SCHOOL](https://bit.ly/m/techschool).

![Backend master class](backend-master.png)

You can also find it on Udemy at [this link](https://bit.ly/backendudemy).

And don't hesitate to [join Tech School's Discord group](https://bit.ly/techschooldc) to chat directly with me and other students.

In this course, you will learn step-by-step how to design, develop and deploy a backend web service from scratch. I believe the best way to learn programming is to build a real application. Therefore, throughout the course, you will learn how to build a backend web service for a simple bank. It will provide APIs for the frontend to do the following things:

- Create and manage bank accounts.
- Record all balance changes to each of the accounts.
- Perform a money transfer between 2 accounts.

The programming language we will use to develop the service is Golang, but the course is not just about coding in Go. You will learn a lot of different topics regarding backend web development. They are presented in 5 sections:

1. In the 1st section, you will learn deeply about how to design the database, generate codes to talk to the DB in a consistent and reliable way using transactions, understand the DB isolation levels, and how to use it correctly in production. Besides the database, you will also learn how to use docker for local development, how to use Git to manage your codes, and how to use GitHub Action to run unit tests automatically.

2. In the 2nd section, you will learn how to build a set of RESTful HTTP APIs using Gin - one of the most popular Golang frameworks for building web services. This includes everything from loading app configs, mocking DB for more robust unit tests, handling errors, authenticating users, and securing the APIs with JWT and PASETO access tokens.  

3. In the 3rd section, you will learn how to build your app with Docker and deploy it to a production Kubernetes cluster on AWS. The lectures are very detailed with a step-by-step guide, from how to build a minimal docker image, set up a free-tier AWS account, create a production database, store and retrieve production secrets, create a Kubernetes cluster with EKS, use GitHub Action to automatically build and deploy the image to the EKS cluster, buy a domain name and route the traffics to the service, secure the connection with HTTPS and auto-renew TLS certificate from Let's Encrypt.

4. In the 4th section, we will discuss several advanced backend topics such as managing user sessions, building gRPC APIs, using gRPC gateway to serve both gRPC and HTTP requests at the same time, embedding Swagger documentation as part of the backend service, partially updating a record using optional parameters, and writing structured logger HTTP middlewares and gRPC interceptors.

5. Then the 5th section will introduce you to asynchronous processing in Golang using background workers and Redis as its message queue, and how to gracefully shut down the server to protect your processing resources. As this part is still a work in progress, we will keep making and uploading new videos about new topics in the future, such as: sending emails, gracefully shutting down servers, CORS, bulk inserts, etc. So please come back here to check them out from time to time.

This course is designed with a lot of details, so that everyone, even with very little programming experience can understand and do it by themselves. I strongly believe that after the course, you would be able to work much more confidently and effectively on your projects.

## Course videos

### Section 1: Working with database [Postgres]

- Lecture #1: [Design DB schema and generate SQL code with dbdiagram.io](https://www.youtube.com/watch?v=rx6CPDK_5mU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=1)
- Lecture #2: [Install & use Docker + Postgres + TablePlus to create DB schema](https://www.youtube.com/watch?v=Q9ipbLeqmQo&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=2)
- Lecture #3: [How to write & run database migration in Golang](https://www.youtube.com/watch?v=0CYkrGIJkpw&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=3)
- Lecture #4: [Generate CRUD Golang code from SQL | Compare db/sql, gorm, sqlx & sqlc](https://www.youtube.com/watch?v=prh0hTyI1sU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=4)
- Lecture #5: [Write unit tests for database CRUD with random data in Golang](https://www.youtube.com/watch?v=phHDfOHB2PU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=5)
- Lecture #6: [A clean way to implement database transaction in Golang](https://www.youtube.com/watch?v=gBh__1eFwVI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=6)
- Lecture #7: [DB transaction lock & How to handle deadlock in Golang](https://www.youtube.com/watch?v=G2aggv_3Bbg&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=7)
- Lecture #8: [How to avoid deadlock in DB transaction? Queries order matters!](https://www.youtube.com/watch?v=qn3-5wdOfoA&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=8)
- Lecture #9: [Deeply understand transaction isolation levels & read phenomena in MySQL & PostgreSQL](https://www.youtube.com/watch?v=4EajrPgJAk0&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=9)
- Lecture #10: [Setup Github Actions for Golang + Postgres to run automated tests](https://www.youtube.com/watch?v=3mzQRJY1GVE&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=10)

### Section 2: Building RESTful HTTP JSON API [Gin]

- Lecture #11: [Implement RESTful HTTP API in Go using Gin](https://www.youtube.com/watch?v=n_Y_YisgqTw&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=11)
- Lecture #12: [Load config from file & environment variables in Go with Viper](https://www.youtube.com/watch?v=n5p8HkO6bnE&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=12)
- Lecture #13: [Mock DB for testing HTTP API in Go and achieve 100% coverage](https://www.youtube.com/watch?v=rL0aeMutoJ0&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=13)
- Lecture #14: [Implement transfer money API with a custom params validator](https://www.youtube.com/watch?v=5q_wsashJZA&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=14)
- Lecture #15: [Add users table with unique & foreign key constraints in PostgreSQL](https://www.youtube.com/watch?v=D4VtNC3vQUs&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=15)
- Lecture #16: [How to handle DB errors in Golang correctly](https://www.youtube.com/watch?v=mJ8b5GcvoxQ&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=16)
- Lecture #17: [How to securely store passwords? Hash password in Go with Bcrypt!](https://www.youtube.com/watch?v=B3xnJI2lHmc&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=17)
- Lecture #18: [How to write stronger unit tests with a custom gomock matcher](https://www.youtube.com/watch?v=DuzBE0jKOgE&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=18)
- Lecture #19: [Why PASETO is better than JWT for token-based authentication?](https://www.youtube.com/watch?v=nBGx-q52KAY&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=19)
- Lecture #20: [How to create and verify JWT & PASETO token in Golang](https://www.youtube.com/watch?v=Oi4FHDGILuY&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=20)
- Lecture #21: [Implement login user API that returns PASETO or JWT access token in Go](https://www.youtube.com/watch?v=lnHbZ9GOGAs&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=21)
- Lecture #22: [Implement authentication middleware and authorization rules in Golang using Gin](https://www.youtube.com/watch?v=Pw8fVBRS4jA&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=22)

### Section 3: Deploying the application to production [Kubernetes + AWS]

- Lecture #23: [Build a minimal Golang Docker image with a multistage Dockerfile](https://www.youtube.com/watch?v=p1dwLKAxUxA&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=23)
- Lecture #24: [How to use docker network to connect 2 stand-alone containers](https://www.youtube.com/watch?v=VcFnqQarpjI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=24)
- Lecture #25: [How to write docker-compose file and control service start-up orders with wait-for.sh](https://www.youtube.com/watch?v=jf6sQsz0M1M&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=25)
- Lecture #26: [How to create a free tier AWS account](https://www.youtube.com/watch?v=4UqN1P8pIkM&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=26)
- Lecture #27: [Auto build & push docker image to AWS ECR with Github Actions](https://www.youtube.com/watch?v=3M4MPmSWt9E&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=27)
- Lecture #28: [How to create a production DB on AWS RDS](https://www.youtube.com/watch?v=0EaG3T4Q5fQ&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=28)
- Lecture #29: [Store & retrieve production secrets with AWS secrets manager](https://www.youtube.com/watch?v=3i1mQ_Ye8jE&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=29)
- Lecture #30: [Kubernetes architecture & How to create an EKS cluster on AWS](https://www.youtube.com/watch?v=TxnCMhYhqRU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=30)
- Lecture #31: [How to use kubectl & k9s to connect to a kubernetes cluster on AWS EKS](https://www.youtube.com/watch?v=hwMevai3_wQ&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=31)
- Lecture #32: [How to deploy a web app to Kubernetes cluster on AWS EKS](https://www.youtube.com/watch?v=PH-Mcd0Rs1w&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=32)
- Lecture #33: [Register a domain name & set up A-record using Route53](https://www.youtube.com/watch?v=-JF2ukmW3i8&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=33)
- Lecture #34: [How to use Ingress to route traffics to different services in Kubernetes](https://www.youtube.com/watch?v=lBrqP6FkNsU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=34)
- Lecture #35: [Automatic issue TLS certificates in Kubernetes with Let's Encrypt](https://www.youtube.com/watch?v=nU4FTjrgSKI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=35)
- Lecture #36: [Automatic deploy to Kubernetes with Github Action](https://www.youtube.com/watch?v=GVY-zze0V_U&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=36)

### Section 4: Advanced Backend Topics [Sessions + gRPC]

- Lecture #37: [How to manage user session with refresh token - Golang](https://www.youtube.com/watch?v=rT20ylRLm5U&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=37)
- Lecture #38: [Generate DB documentation page and schema SQL dump from DBML](https://www.youtube.com/watch?v=dGfVwsPr-IU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=38)
- Lecture #39: [Introduction to gRPC](https://www.youtube.com/watch?v=mRGnA3wPxMM&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=39)
- Lecture #40: [Define gRPC API and generate Go code with protobuf](https://www.youtube.com/watch?v=mVWgEmyAhvM&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=40)
- Lecture #41: [How to run a golang gRPC server and call its API](https://www.youtube.com/watch?v=BkfBJIS0_ro&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=41)
- Lecture #42: [Implement gRPC API to create and login users in Go](https://www.youtube.com/watch?v=7xiWqyZW9lE&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=42)
- Lecture #43: [Write code once, serve both gRPC & HTTP requests](https://www.youtube.com/watch?v=3FfDH3d0aHs&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=43)
- Lecture #44: [How to extract info from gRPC metadata](https://www.youtube.com/watch?v=Sno10WQ21Zs&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=44)
- Lecture #45: [Automatic generate & serve Swagger docs from Go server](https://www.youtube.com/watch?v=Uwkxxee7tvk&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=45)
- Lecture #46: [Embed static frontend files inside Golang backend server's binary](https://www.youtube.com/watch?v=xNgOIm86N5Q&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=46)
- Lecture #47: [Validate gRPC parameters and send human/machine friendly response](https://www.youtube.com/watch?v=CxZ9hMtmZtc&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=47)
- Lecture #48: [Run DB migrations directly inside Golang code](https://www.youtube.com/watch?v=TG43cMpaxlI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=48)
- Lecture #49: [Partial update DB record with SQLC nullable parameters](https://www.youtube.com/watch?v=I2sbw1PzzW0&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=49)
- Lecture #50: [Build gRPC update API with optional parameters](https://www.youtube.com/watch?v=ygqSHIEc8sc&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=50)
- Lecture #51: [Add authorization to protect gRPC API](https://www.youtube.com/watch?v=_jqNs3d99ps&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=51)
- Lecture #52: [Write structured logs for gRPC APIs](https://www.youtube.com/watch?v=tTAxLGrDmPo&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=52)
- Lecture #53: [How to write HTTP logger middleware in Go](https://www.youtube.com/watch?v=Lbiz-PZNiU0&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=53)

### Section 5: Asynchronous processing with background workers [Asynq + Redis]

- Lecture #54: [Implement background worker in Go with Redis and Asynq](https://www.youtube.com/watch?v=XOXdYs8mKkI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=54)
- Lecture #55: [Integrate async worker to Go web server](https://www.youtube.com/watch?v=eXYKGPEXocM&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=55)
- Lecture #56: [Send async tasks to Redis within a DB transaction](https://www.youtube.com/watch?v=ZfFxdPbgN88&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=56)
- Lecture #57: [How to handle errors and print logs for Go Asynq workers](https://www.youtube.com/watch?v=YgfmPIJRg2U&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=57)
- Lecture #58: [A bit of delay might be good for your async tasks](https://www.youtube.com/watch?v=ILNiZgseLUI&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE&index=58)

## Simple bank service

The service that we’re going to build is a simple bank. It will provide APIs for the frontend to do following things:

1. Create and manage bank accounts, which are composed of owner’s name, balance, and currency.
2. Record all balance changes to each of the account. So every time some money is added to or subtracted from the account, an account entry record will be created.
3. Perform a money transfer between 2 accounts. This should happen within a transaction, so that either both accounts’ balance are updated successfully or none of them are.

## Setup local development

### Install tools

- [Docker desktop](https://www.docker.com/products/docker-desktop)
- [TablePlus](https://tableplus.com/)
- [Golang](https://golang.org/)
- [Homebrew](https://brew.sh/)
- [Migrate](https://github.com/golang-migrate/migrate/tree/master/cmd/migrate)

    ```bash
    brew install golang-migrate
    ```

- [DB Docs](https://dbdocs.io/docs)

    ```bash
    npm install -g dbdocs
    dbdocs login
    ```

- [DBML CLI](https://www.dbml.org/cli/#installation)

    ```bash
    npm install -g @dbml/cli
    dbml2sql --version
    ```

- [Sqlc](https://github.com/kyleconroy/sqlc#installation)

    ```bash
    brew install sqlc
    ```

- [Gomock](https://github.com/golang/mock)

    ``` bash
    go install github.com/golang/mock/mockgen@v1.6.0
    ```

### Setup infrastructure

- Create the bank-network

    ``` bash
    make network
    ```

- Start postgres container:

    ```bash
    make postgres
    ```

- Create simple_bank database:

    ```bash
    make createdb
    ```

- Run db migration up all versions:

    ```bash
    make migrateup
    ```

- Run db migration up 1 version:

    ```bash
    make migrateup1
    ```

- Run db migration down all versions:

    ```bash
    make migratedown
    ```

- Run db migration down 1 version:

    ```bash
    make migratedown1
    ```

### Documentation

- Generate DB documentation:

    ```bash
    make db_docs
    ```

- Access the DB documentation at [this address](https://dbdocs.io/techschool.guru/simple_bank). Password: `secret`

### How to generate code

- Generate schema SQL file with DBML:

    ```bash
    make db_schema
    ```

- Generate SQL CRUD with sqlc:

    ```bash
    make sqlc
    ```

- Generate DB mock with gomock:

    ```bash
    make mock
    ```

- Create a new db migration:

    ```bash
    migrate create -ext sql -dir db/migration -seq <migration_name>
    ```

### How to run

- Run server:

    ```bash
    make server
    ```

- Run test:

    ```bash
    make test
    ```

## Deploy to kubernetes cluster

- [Install nginx ingress controller](https://kubernetes.github.io/ingress-nginx/deploy/#aws):

    ```bash
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.48.1/deploy/static/provider/aws/deploy.yaml
    ```

- [Install cert-manager](https://cert-manager.io/docs/installation/kubernetes/):

    ```bash
    kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml
    ```
"
2930,A TensorFlow & Deep Learning online course I taught in 2016,"# TensorFlow and DeepLearning Tutorial

This is a collection of my deep learning tutorials.

这是我的深度学习教程集合。

Season 1 is introduction to TensorFlow, fully connected neural networks and convolutional neural networks.

Season 2 is about Natural Language Processing, sort of.
"
523,💯 The most essential list of resources for Front-End beginners (🇺🇸 🇬🇧 🇨🇦 & 🇫🇷),"# The most essential list of resources for Front-End beginners (🇺🇸 🇬🇧 & 🇫🇷)

[![Join the chat at https://gitter.im/sky-starter-kit/Lobby][gitter-image]][gitter-url] [![Contributors](https://img.shields.io/github/contributors/thedaviddias/Resources-Front-End-Beginner.svg)](https://github.com/thedaviddias/Resources-Front-End-Beginner/graphs/contributors)
[![CC0](https://img.shields.io/badge/license-CC0-green.svg)](https://creativecommons.org/publicdomain/zero/1.0/)

[gitter-image]: https://badges.gitter.im/Front-End-Checklist/Lobby.svg
[gitter-url]: https://gitter.im/Front-End-Checklist/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge

If you want to learn how to become a Front-End developer, you are in the right place!

I will regularly update that list with new resources and links I found on the web. Don't hesitate to participate by sending a PR! Maybe your first on Github :)

I'm using some emoticons to give you more information on these links.

1. All links without a flag are in English 🇺🇸 🇬🇧. The flag 🇫🇷 means the resource is in French, 🌍 means the resource is multi-language.
2. 💰 are paid tutorials, 🆓 are free tutorials. Sometimes you will have some free videos / articles and other paid on the same website.
3. 🔝 indicate that the link is a reference
4. 📹 is present when video content is available

---
## Table of Contents
1. **[Start here](#start-here)**
2. **[Learn HTML](#learn-html)**
3. **[Learn CSS](#learn-css)**
4. **[Learn JavaScript](#learn-javascript)**
5. **[Learn Git](#learn-git)**
6. **[Tools](#tools)**
7. **[Chat / Slack](#chat--slack-channels)**
8. **[Aggregators / News](#aggregators--news)**
9. **[Newsletters](#newsletters)**

![Learn the basics](https://res.cloudinary.com/djnyaloac/image/upload/v1507777230/front-end-know-basics.jpg)
***From Web Developer Roadmap 2017***

---
## Start here
* Understand Internet
  * [How Does the Internet Actually Work?](https://www.youtube.com/watch?v=5SXK__rm6DM) 📹 🔝
  * [What is Internet?](https://www.youtube.com/watch?v=Dxcc6ycZ73M) 📹 🔝
  * [How does the internet work? - Part 1 (It's like a bad drawing.)](https://www.youtube.com/watch?v=XZIMEoUhOA8) 📹
  * [How Does the Internet Work?](https://www.youtube.com/watch?v=7XoaoFjKqYM) 📹
  * [How the Internet Works for Developers - Pt 1 - Overview & Frontend](https://www.youtube.com/watch?v=e4S8zfLdLgQ) 📹
  * 🇫🇷 [Benjamin Bayart : Qu'est ce qu'Internet (Conférence à SciencesPo le 14 avril 2010, durée 5h30)](https://www.youtube.com/watch?v=pwT2egqlke4&list=PLU39vuHuXlJeER75D1GNJiK8-2i0yhRLX) 📹 🔝
  * 🇫🇷 [C'est pas sorcier -INTERNET : Les pirates tissent leur toile](https://www.youtube.com/watch?v=VB7vsaan8PM) 📹
  * 🇫🇷 [Comprendre Internet - histoire](https://www.youtube.com/watch?v=sLJ-QztAqNE) 📹
  * 🇫🇷 [Comprendre comment marche Internet](https://www.youtube.com/playlist?list=PL2972E0D013FE7DE7) 📹
  * 🇫🇷 [Comprendre Internet](http://www.comprendre-internet.com/)
* Understand your journey
  → [Web Developer Roadmap 2019 - Github](https://github.com/kamranahmedse/developer-roadmap)

**[⬆ back to top](#table-of-contents)**

---
## Learn HTML

* Courses / Tutorials
  * 🌍 [Learn HTML - CodeCademy](https://www.codecademy.com/learn/learn-html) 💰🆓 📹 🔝
  * [HTML5 and CSS - FreeCodeCamp](https://www.freecodecamp.org/map#nested-collapseHTML5andCSS) 🆓 🔝
  * [MarkSheet - A free HTML & CSS tutorial](http://marksheet.io/) 🆓 🔝
  * [Intro to HTML/CSS: Making webpages - KhanAcademy](https://www.khanacademy.org/computing/computer-programming/html-css) 🆓
  * [Learn the Web](https://learn-the-web.algonquindesign.ca/) 🆓
  * [HTML5 Introduction - EDX](https://www.edx.org/course/html5-introduction-w3cx-html5-0x-0) 🆓
  * [HTML - Creating basic web pages](https://bento.io/topic/html) 🆓
  * [Learn to code HTML & CSS - Shay Howe](http://learn.shayhowe.com/html-css/) 🆓
  * [HTML Tutorials](http://www.htmldog.com/) 🆓
  * [Intro to HTML and CSS - Udacity](https://www.udacity.com/course/intro-to-html-and-css--ud304) 🆓
  * [Learn HTML in 12 minutes - Youtube](https://www.youtube.com/watch?v=bWPMSSsVdPk) 🆓 📹
  * [Learn HTML in 30 Minutes - Youtube](https://www.youtube.com/watch?v=hrZqiCUx6kg) 🆓 📹
  * [HTML Fundamentals - SoloLearn](https://www.sololearn.com/Course/HTML/) 💰🆓
  * [HTML Basics - TreeHouse](https://teamtreehouse.com/library/html-basics-2) 💰 📹
  * [HTML/CSS Path - Code School](https://www.codeschool.com/learn/html-css) 💰 📹
  * [HTML Essential Training - Lynda](https://www.lynda.com/Web-Development-tutorials/HTML-Essential-Training/170427-2.html) 💰 📹
  * [Your First Day with HTML - Pluralsight](https://www.pluralsight.com/courses/your-first-day-html-1665) 💰 📹
  * [HTML Fundamentals - Pluralsight](https://www.pluralsight.com/courses/html-fundamentals) 💰 📹
  * [Introduction to HTML and CSS - TreeHouse](https://teamtreehouse.com/library/introduction-to-html-and-css) 💰
  * [Introduction to HTML5 and CSS3 - Frontend Masters](https://frontendmasters.com/courses/introduction-html5-css3/) 💰 📹
  * [HTML/CSS on Code Avengers](https://www.codeavengers.com/profile#html-css) 💰🆓
  * [30 Days to Learn HTML & CSS](https://webdesign.tutsplus.com/courses/30-days-to-learn-html-css?_ga=2.133963854.1549833602.1507724443-1498690494.1505785599) 💰🆓 📹
  * [Introduction to HTML](https://scrimba.com/g/ghtml) 🆓 📹
  * 🇫🇷 [Apprenez à créer votre site web avec HTML5 et CSS3 - OpenClassRooms](https://openclassrooms.com/courses/apprenez-a-creer-votre-site-web-avec-html5-et-css3) 💰🆓
  * 🇫🇷 [Tutoriels web HTML - Alsacréations](https://www.alsacreations.com/tuto/liste/1-HTML) 🆓
  * 🇫🇷 [HTML et CSS - Le Cours Complet - Udemy](https://www.udemy.com/cours-html-css/) 💰
  * [HTML5 Tutorial - w3schools](https://www.w3schools.com/html/) 🆓
  * [AlgoExpert's Front-end Expert Course](https://www.algoexpert.io/content#fe) 💰

* Documentation
  * [HTML Reference](http://htmlreference.io/) 🔝
  * [Introduction to HTML - MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) 🔝
  * [HTML Cheat Sheet - Compilation](https://websitesetup.org/html5-cheat-sheet/)
  * [HTML5 Tutorial PDF - Tutorialspoint](https://www.tutorialspoint.com/html5/html5_tutorial.pdf)
  * [Getting to Know HTML - Shay Howe](https://learn.shayhowe.com/html-css/getting-to-know-html/)
  * [The Elements of HTML](https://rawgit.com/w3c/elements-of-html/master/index.html)

* Guidelines
  * [SEO, Speed and Security Best Practices - Checkbot](https://www.checkbot.io/guide/)
  * [HTML Best Practices - Github](https://github.com/hail2u/html-best-practices)

* Quiz / Challenges
  * [LearnYouHTML - NodeSchool](https://github.com/denysdovhan/learnyouhtml)
  * [HTML Quiz beginner level - Skillvalue](https://skillvalue.com/en/quizzes/front-end/html5-beginner-level)

* Articles/Books
  * [Learn to Code HTML and CSS: Develop and Style Websites](https://www.amazon.com/Learn-Code-HTML-CSS-Websites/dp/0321940520)
  * [HTML and CSS: Design and Build Websites](https://www.amazon.com/HTML-CSS-Design-Build-Websites/dp/1118008189)
  * 🇫🇷 [Réalisez votre site web avec HTML 5 et CSS 3](http://www.eyrolles.com/Informatique/Livre/realisez-votre-site-web-avec-html-5-et-css-3-9782212674767)

**[⬆ back to top](#table-of-contents)**

---
### Learn CSS
* Courses / Tutorials

  * 🌍 [Learn CSS - CodeCademy](https://www.codecademy.com/learn/learn-css) 💰🆓 🔝
  * [Learn CSS in 12 Minutes - Youtube](https://www.youtube.com/watch?v=0afZj1G0BIE) 🆓 📹
  * [CSS Basics - TreeHouse](https://teamtreehouse.com/library/css-basics) 💰 📹
  * [Introduction to CSS](https://www.pluralsight.com/courses/css-intro) 💰 📹
  * [CSS3 In-Depth](https://frontendmasters.com/courses/css3-in-depth/) 💰 📹
  * [CSS Essential Training 3 - Lynda](https://www.lynda.com/CSS-tutorials/CSS-Essential-Training-3/609030-2.html) 💰 📹
  * [Scalable Modular Architecture for CSS (SMACSS) - Frontend Masters](https://frontendmasters.com/courses/smacss/) 💰 📹
  * 🇫🇷 [Tutoriel HTML/CSS - Box Sizing - Grafikart](https://www.youtube.com/watch?v=oFziQkOqKd0) 🆓 📹
  * 🇫🇷 [Tutoriel CSS : Comment bien organiser son CSS - Grafikart](https://www.youtube.com/watch?v=t8Up7GiNIoU) 🆓 📹
  * 🇫🇷 [Tutoriels web CSS - Alsacréations](https://www.alsacreations.com/tuto/liste/2-CSS) 🆓
  * [CSS Tutorial - w3schools](https://www.w3schools.com/css/) 🆓
  * [Introduction to CSS](https://scrimba.com/g/gintrotocss) 🆓 📹
  * [Learn CSS - Sololearn](https://www.sololearn.com/Course/CSS/)
    * Selectors
      * [CSS Diner](https://flukeout.github.io/) 🆓 🔝
    * Flexbox
      * 🌍 [Flexbox Froggy](http://flexboxfroggy.com/) 🆓 🔝
      * [Flexbox Defense](http://www.flexboxdefense.com/) 🆓 🔝
    * CSS Grid
      * 🌍 [Grid Garden](http://cssgridgarden.com/) 🆓 🔝
      * [Learn CSS Grid with Wes Bos](https://cssgrid.io/) 🆓 🔝

* Documentation
  * [CSS Reference](http://cssreference.io/) 🔝
  * [CSS - MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS) 🔝
  * [Open Web Reference - CSS](http://ref.openweb.io/CSS/)
  * [CSS Reference](https://tympanus.net/codrops/css_reference/)
  * [Getting to know CSS](https://learn.shayhowe.com/html-css/getting-to-know-css/)

* Guidelines
  * 🌍 [CSS Guidelin.es](https://cssguidelin.es/) 🔝
  * [Airbnb CSS / Sass Styleguide - Github](https://github.com/airbnb/css)
  * [Scalable and Modular Architecture for CSS - SMACSS](https://smacss.com/) 🔝
  * [Google HTML/CSS Style Guide - Github](https://google.github.io/styleguide/htmlcssguide.html)
  * [Sensible CSS Guidelines - Github](https://github.com/chris-pearce/css-guidelines)
  * [Trello CSS Guide - Github](https://gist.github.com/bobbygrace/9e961e8982f42eb91b80)

* Quizz / challenges
  * [CSS Quiz beginner level - Skillvalue](https://skillvalue.com/en/quizzes/front-end/css-beginner-level-2)

* Articles/Books
  * [CSS, The definitive guide - Eric Meyer](https://www.amazon.com/CSS-Definitive-Guide-Eric-Meyer/dp/0596527330)
  * [Enduring CSS - Ben Frain](https://www.amazon.com/Enduring-CSS-Ben-Frain/dp/1787282805)
  * [The CSS PocketGuide - Chris Casciano](https://www.amazon.com/CSS-Pocket-Guide-Peachpit/dp/0321732278)
  * [CSS Secrets: Better Solutions to Everyday Web Design Problems - Lea Verou](https://www.amazon.com/CSS-Secrets-Solutions-Everyday-Problems/dp/1449372635)
  * [Professional CSS3 - Piotr Sikora](https://www.packtpub.com/web-development/professional-css3)
  * 🇫🇷 [CSS3 - Raphaël Goetter, Hugo Giraudel](http://www.eyrolles.com/Informatique/Livre/css3-9782212140231)
  * 🇫🇷 [CSS avancées - Raphaël Goetter](http://www.eyrolles.com/Informatique/Livre/css-avancees-9782212134056)
  * 🇫🇷 [CSS avancées, Vers HTML5 et CSS3 - Mathieu Nebra](%>)
  * 🇫🇷 [Premier pas en CSS3 et HTML5](http://www.eyrolles.com/Informatique/Livre/premiers-pas-en-css3-et-html5-9782212674309)

**[⬆ back to top](#table-of-contents)**

---
### Learn JavaScript
* Courses / Tutorials

  * [Basic JavaScript](https://www.freecodecamp.org/map#nested-collapseBasicJavaScript) 🆓 🔝
  * [Introduction To JavaScript - CodeCademy](https://www.codecademy.com/learn/introduction-to-javascript) 💰🆓 🔝
  * [Beau teaches JavaScript - Youtube](https://www.youtube.com/playlist?list=PLWKjhJtqVAbmoiNlqLJg1gxEjEuKHHcn_) 🆓 📹
  * [JS 30 For 30 - 30 Projects for 30 Days](https://javascript30.com/) 🆓 📹
  * [Intro to JavaScript - Udacity](https://www.udacity.com/course/intro-to-javascript--ud803) 🆓
  * [Learn JavaScript - Codementor](https://www.codementor.io/javascript) 🆓
  * [Introduction to JavaScript Programming - Frontend Masters](https://frontendmasters.com/courses/javascript-basics/) 💰 📹
  * [LambdaSchool Javascript Mini Bootcamp](https://lambdaschool.com/free-course-web/)💰🆓 🔝
  * [JavaScript Essential Training - Lynda](https://www.lynda.com/JavaScript-tutorials/JavaScript-Essential-Training/574716-2.html) 💰 📹
  * [JavaScript Fundamentals - Tuts+](https://code.tutsplus.com/courses/javascript-fundamentals) 💰🆓 📹
  * [Getting Started with JavaScript for Web Development - Scotch](https://scotch.io/courses/getting-started-with-javascript) 💰🆓
  * [JavaScript Basics - TreeHouse](https://teamtreehouse.com/library/javascript-basics) 💰
  * [JavaScript path - Code School](https://www.codeschool.com/learn/javascript) 💰
  * [ES6 for everyone](https://es6.io/) 💰 📹
  * 🇫🇷 [Tutoriels web JavaScript - Alsacréations](https://www.alsacreations.com/tuto/liste/5-Javascript) 🆓
  * [JavaScript.Info](http://javascript.info/)
  * [JavaScript Tutorial - w3schools](https://www.w3schools.com/js/) 🆓
  * [Javascript Tutorial - Watch and Code by Gordon Zhu](https://watchandcode.com/) 🆓💰
  * [Learn Javascript](https://www.sololearn.com/Course/JavaScript/)
  * [Introduction to Javascript](https://scrimba.com/g/gintrotojavascript) 🆓

* Documentation
  * [JavaScript reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)
  * [Modern JavaScript Cheatsheet](https://mbeaudru.github.io/modern-js-cheatsheet/)
  * [ES6 Katas - Learn ES6 by doing it](http://es6katas.org/)

* Guidelines
    * [Clean Code concepts adapted for JavaScript - Github](https://github.com/ryanmcdermott/clean-code-javascript)

* Quiz / challenges
  * [Workshoppers - NodeSchool](https://nodeschool.io/) 🔝
  * [JavaScript Quiz beginner level - Skillvalue](https://skillvalue.com/en/quizzes/front-end/javascript-beginner-level-2) 🔝

* Articles / Books
  * [Practical Modern JavaScript](https://github.com/mjavascript/practical-modern-javascript) 🆓
  * [You Don't Know JS (book series)](https://github.com/getify/You-Dont-Know-JS) 🆓
  * [JavaScript, the definitive guide](https://www.amazon.fr/JavaScript-Definitive-Guide-David-Flanagan/dp/0596805527)
  * [Javascript: The Good Parts](https://www.amazon.fr/Javascript-Good-Parts-D-Crockford/dp/0596517742)
  * [Eloquent JavaScript: A Modern Introduction to Programming](https://www.amazon.com/Eloquent-JavaScript-2nd-Ed-Introduction/dp/1593275846)
  * [JavaScript Allongée](https://leanpub.com/javascriptallongesix)
  * [Learning JavaScript](https://www.amazon.com/Learning-JavaScript-Essentials-Application-Development/dp/1491914912)
  * [Understanding ECMAScript 6: The Definitive Guide for JavaScript Developers](https://www.amazon.fr/Understanding-ECMAScript-Definitive-JavaScript-Developers/dp/1593277571)
  * [JavaScript and JQuery: Interactive Front-End Web Development](https://www.amazon.com/JavaScript-JQuery-Interactive-Front-End-Development/dp/1118531647)
  * 🇫🇷 [JavaScript - Développez efficacement](https://www.amazon.fr/JavaScript-Développez-efficacement-2e-édition/dp/2409009727)
  * [Airbnb JavaScript Guide()](https://github.com/airbnb/javascript)

**[⬆ back to top](#table-of-contents)**

---
## Learn GIT

* [15 minutes to learn Git](https://try.github.io) 🔝
* [Git-it (Desktop App) - NodeSchool](https://github.com/jlord/git-it-electron) 🆓 🔝
* 🌍 [Learn Git on CodeCademy](https://www.codecademy.com/learn/learn-git) 💰🆓 🔝
* [Git-it is a (Mac, Win, Linux) Desktop App for Learning Git and GitHub](https://github.com/jlord/git-it-electron) 🆓 🔝
* [Learn Git Branching – Educational challenges](https://learngitbranching.js.org/) 🆓
* [Introduction to version control with Git - Microsoft Learn](https://docs.microsoft.com/en-gb/learn/paths/intro-to-vc-git/) 🆓
* [Git-it – Learn Git in a real terminal](http://jlord.us/git-it/) 🆓
* [Git CheatSheet](http://www.ndpsoftware.com/git-cheatsheet.html) 🆓
* [Git Essential Training - Lynda](https://www.lynda.com/Git-tutorials/Git-Essential-Training/100222-2.html) 💰 📹
* [Try Git](https://www.codeschool.com/courses/try-git) 🆓
* [Learn Git - Git Tutorials, workflows and commands](https://www.atlassian.com/git)🆓

**[⬆ back to top](#table-of-contents)**

---
## Tools
* Essential
  * [Github](https://github.com/) 💰🆓 🔝
* Website auditors
  * [Checkbot](https://www.checkbot.io/) 💰🆓 🔝
* Playgrounds
  * [Codepen](https://codepen.io/) 💰🆓 🔝
  * [CodeSandbox](https://codesandbox.io/)
  * [SassMeister](https://www.sassmeister.com/)
  * [JSFiddle](https://jsfiddle.net/)
  * [JSBin](https://jsbin.com/)
  * [Thimble](https://thimble.mozilla.org/en-US/)

* Web design Tools
  * [Webflow](https://webflow.com/)🆓💰
  
* Editors
  * [Visual Studio Code](https://code.visualstudio.com/) 🆓 🔝
  * [Sublime Text](https://www.sublimetext.com/) 🆓
  * [Atom](https://atom.io/) 🆓
  * [Brackets](http://brackets.io/) 🆓
  * [NotePad++](https://notepad-plus-plus.org/) 🆓
  * [Cloud9](https://c9.io/) 💰🆓

**[⬆ back to top](#table-of-contents)**

---
## Chat / Slack channels
* [FEDs - Slack](https://feds.slack.com)
* 🇫🇷 [Front-end France - Slack](https://frontendfr.slack.com)
* 🇫🇷 [DevFr - Telegram](https://t.me/DevFr)

---
### Aggregators / News

* [Smashing Magazine](https://www.smashingmagazine.com/) 🔝
* [CSS-Tricks](https://css-tricks.com/) 🔝
* [Front-End Stash](https://frontendstash.top/) 🔝
* [Codrops](https://tympanus.net/codrops/) 🔝
* [Front-End Front - Basically, front-end news](https://frontendfront.com/)
* [Echo JS - JavaScript News](http://www.echojs.com/)
* [A list Apart - Code](https://alistapart.com/topic/code)
* [Scotch - Code Eat Sleep Loop](https://scotch.io/)

**[⬆ back to top](#table-of-contents)**

---
## Newsletters
* [Frontend Focus](https://frontendfoc.us/)
* [CSS Weekly](http://css-weekly.com/)
* [CSS-Tricks](https://css-tricks.com/newsletters/)
* [JavaScript Weekly](http://javascriptweekly.com/)
* [WebTools Weekly](https://webtoolsweekly.com/)
* [Smashing Magazine](https://www.smashingmagazine.com/the-smashing-newsletter/)
* [Sidebar](https://sidebar.io/)
* [Responsive Design Weekly](http://responsivedesignweekly.com/)
* [JSK Weekly](https://javascriptkicks.com/)
* [WebRTC Weekly](https://webrtcweekly.com/)

## Contributing

**Open an issue or a pull request to suggest changes or additions.**

### Contributors

Check out all the super awesome [contributors](https://github.com/thedaviddias/Resources-Front-End-Beginner/graphs/contributors).

## Authors

**[David Dias](https://twitter.com/thedaviddias)**

## License

[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)

**[⬆ back to top](#table-of-contents)**
"
3194,Command line driven CI frontend and development task automation tool.,"# tox

[![PyPI](https://img.shields.io/pypi/v/tox)](https://pypi.org/project/tox/)
[![Supported Python
versions](https://img.shields.io/pypi/pyversions/tox.svg)](https://pypi.org/project/tox/)
[![Downloads](https://pepy.tech/badge/tox/month)](https://pepy.tech/project/tox)
[![Documentation
status](https://readthedocs.org/projects/tox/badge/?version=latest)](https://tox.readthedocs.io/en/latest/?badge=latest)
[![check](https://github.com/tox-dev/tox/actions/workflows/check.yml/badge.svg)](https://github.com/tox-dev/tox/actions/workflows/check.yml)

`tox` aims to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing
and release process of Python software (alongside [pytest](https://docs.pytest.org/en/latest/) and
[devpi](https://www.devpi.net)).

tox is a generic virtual environment management and test command line tool you can use for:

- checking your package builds and installs correctly under different environments (such as different Python
  implementations, versions or installation dependencies),
- running your tests in each of the environments with the test tool of choice,
- acting as a frontend to continuous integration servers, greatly reducing boilerplate and merging CI and shell-based
  testing.

Please read our [user guide](https://tox.wiki/en/latest/user_guide.html#basic-example) for an example and more detailed
introduction, or watch [this YouTube video](https://www.youtube.com/watch?v=SFqna5ilqig) that presents the problem space
and how tox solves it.
"
332,A Toon Shader in Unity Universal Render Pipeline.,"# URP Toon Shader
- [Introduction](#Introduction)
- [Properties](#Properties)
	- [SurfaceOptions](#SurfaceOptions)
	- [Base](#Base)
	- [Shadow](#Shadow)
	- [Specular](#Specular)
	- [Rim](#Rim)
	- [Outline](#Outline)
	- [AdvancedOptions](#AdvancedOptions)
- [Multi Pass Batch](#Multi-Pass-Batch)
- [Reference](#Reference)
- [Licenses](#Licenses)

## Introduction  
Simple toon shader in unity universal pipeline.

![image-UnityChan](image/UnityChan.png)  

Genshin Impact Style(Model and Texture from miHoYo)

![image-Genshin_Sample](image/Genshin_Sample.gif)  

## Properties
### SurfaceOptions
![image-SurfaceOptions](image/SurfaceOptions.png) 


### Base
![image-Base](image/Base.png) 
### Shadow
![image-Shadow](image/Shadow.png) 

#### ShadowType

##### DoubleShade 
Adjustable two-layer shadow.(Reference UTS)

##### RampMapShadow 
Shadows based on rampmap.

##### SDF_FaceShadow (Reference Genshin Impact) 

Used for face shadow, sample a precomputed shadow mask to generate shadows.
Limit:symmetrical face uv.

![image-SDFMask](image/SDFMask.png) 

Need to add a script to the object, set the forward and left direction(ObjectSpace).

![image-SDFScript](image/SDFScript.png) 

About how to generate sdf shadow mask.
Node:Generate mask in r16 format(antialiasing).

https://zhuanlan.zhihu.com/p/389668800 

#### SSAO (Add ""ScreenSpaceAmbientOcclusion"" RenderFeature)

Control SSAO strength.

#### CastHairShadowMask (Add ""RenderFrontHairShadowMaskFeature"" RenderFeature)

Cast a shadow mask in screen space for face shadow.(Check it on front hair material or something)

#### ReceiveHairShadowMask

Sample ""CastHairShadowMask"" for shadow.(Check it on face material)

### Specular

![image-Specular](image/Specular.png) 


### Rim
![image-Rim](image/Rim.png)  

- RimBlendShadow  

![image-BlendRim](image/BlendRim.png) 

1:RimBlendShadow=0 2:RimBlendShadow=1 3:RimBlendShadow=1 RimFlip=1  

- RimFlip  

Flip RimBlendShadow

### Outline
![image-Outline](image/Outline.png)  
- UseSmoothNormal : (if use this feature, you need to check ""Read/Write Enbale"" in the Import Setting of the model, and then rename the model to ""XXX_ol"":https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline#%E5%B9%B3%E6%BB%91%E6%B3%95%E7%BA%BF%E5%AF%BC%E5%85%A5%E5%B7%A5%E5%85%B7ModelOutlineImporter)

### AdvancedOptions
![image-AdvancedOptions](image/AdvancedOptions.png) 


## Multi Pass Batch

In the default URP, if render multiple pass shaders(outline), the Rendering order like this:  
Object1.Pass1-  
Objcet1.Pass2-  
Object2.Pass1-  
Object2.Pass2......  
![image-BeforeBatch](image/BeforeBatch.png)    
It will stop SPRBatch.  
![image-NotSupportBatch](image/NotSupportBatch.png)   
We can change the Rendering order like this by using RenderFeature:  
Object1.Pass1-  
Objcet2.Pass1-  
Object1.Pass2-  
Object2.Pass2......  
![image-AfterBatch](image/AfterBatch.png)   

## Reference

https://github.com/unity3d-jp/UnityChanToonShaderVer2_Project  
https://github.com/Jason-Ma-233/JasonMaToonRenderPipeline  
https://github.com/you-ri/LiliumToonGraph  
https://github.com/Kink3d/kShading  
https://unity.cn/projects/china-unity-tech-week_linruofeng

## Licenses

MIT

""Assets/UnityChan/License""

© Unity Technologies Japan/UCL
"